
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007704  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08007818  08007818  00008818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d84  08007d84  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d84  08007d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d8c  08007d8c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d8c  08007d8c  00008d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d94  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001d4  08007f68  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08007f68  000093b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072ce  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  000104cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00011d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000580  00000000  00000000  00012450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bf3  00000000  00000000  000129d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009268  00000000  00000000  0002a5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e90  00000000  00000000  0003382b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b76bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000322c  00000000  00000000  000b7700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ba92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080077fc 	.word	0x080077fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080077fc 	.word	0x080077fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_GPIO_Init+0x74>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a16      	ldr	r2, [pc, #88]	@ (80011f0 <MX_GPIO_Init+0x74>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_GPIO_Init+0x74>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_GPIO_Init+0x74>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a10      	ldr	r2, [pc, #64]	@ (80011f0 <MX_GPIO_Init+0x74>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_GPIO_Init+0x74>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_DQ_GPIO_Port, DS18B20_DQ_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2101      	movs	r1, #1
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <MX_GPIO_Init+0x78>)
 80011c6:	f001 f972 	bl	80024ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4619      	mov	r1, r3
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_GPIO_Init+0x78>)
 80011e2:	f000 ffc9 	bl	8002178 <HAL_GPIO_Init>

}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010800 	.word	0x40010800

080011f8 <Delay_us>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 微秒级延时函数 (保持不变)
void Delay_us(uint16_t us)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  us *= 6;
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	461a      	mov	r2, r3
 8001206:	0052      	lsls	r2, r2, #1
 8001208:	4413      	add	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	80fb      	strh	r3, [r7, #6]
  while (us--)
 800120e:	e007      	b.n	8001220 <Delay_us+0x28>
  {
    __NOP();
 8001210:	bf00      	nop
    __NOP();
 8001212:	bf00      	nop
    __NOP();
 8001214:	bf00      	nop
    __NOP();
 8001216:	bf00      	nop
    __NOP();
 8001218:	bf00      	nop
    __NOP();
 800121a:	bf00      	nop
    __NOP();
 800121c:	bf00      	nop
    __NOP();
 800121e:	bf00      	nop
  while (us--)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	80fa      	strh	r2, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f2      	bne.n	8001210 <Delay_us+0x18>
  }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
	...

08001238 <DS18B20_WriteBit>:

// 写1位数据 (保持不变)
void DS18B20_WriteBit(uint8_t bit)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2101      	movs	r1, #1
 8001246:	480e      	ldr	r0, [pc, #56]	@ (8001280 <DS18B20_WriteBit+0x48>)
 8001248:	f001 f931 	bl	80024ae <HAL_GPIO_WritePin>
  Delay_us(1); // t_low1: 1-15us
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ffd3 	bl	80011f8 <Delay_us>
  if (bit)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <DS18B20_WriteBit+0x2a>
  {
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 写1
 8001258:	2201      	movs	r2, #1
 800125a:	2101      	movs	r1, #1
 800125c:	4808      	ldr	r0, [pc, #32]	@ (8001280 <DS18B20_WriteBit+0x48>)
 800125e:	f001 f926 	bl	80024ae <HAL_GPIO_WritePin>
  }
  else
  {
    // 保持低电平即可写0
  }
  Delay_us(60);                                               // t_slot: 60-120us
 8001262:	203c      	movs	r0, #60	@ 0x3c
 8001264:	f7ff ffc8 	bl	80011f8 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 8001268:	2201      	movs	r2, #1
 800126a:	2101      	movs	r1, #1
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <DS18B20_WriteBit+0x48>)
 800126e:	f001 f91e 	bl	80024ae <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_rec: >1us
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ffc0 	bl	80011f8 <Delay_us>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40010800 	.word	0x40010800

08001284 <DS18B20_ReadBit>:

// 读1位数据 (保持不变)
uint8_t DS18B20_ReadBit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <DS18B20_ReadBit+0x4c>)
 8001294:	f001 f90b 	bl	80024ae <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_low0: 1-15us
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ffad 	bl	80011f8 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线，由从机拉低或保持高电平
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <DS18B20_ReadBit+0x4c>)
 80012a4:	f001 f903 	bl	80024ae <HAL_GPIO_WritePin>
  Delay_us(10);                                               // t_rdv: <15us (在15us内采样)
 80012a8:	200a      	movs	r0, #10
 80012aa:	f7ff ffa5 	bl	80011f8 <Delay_us>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80012ae:	2101      	movs	r1, #1
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <DS18B20_ReadBit+0x4c>)
 80012b2:	f001 f8e5 	bl	8002480 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <DS18B20_ReadBit+0x3c>
  {
    bit = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
  }
  Delay_us(50); // 等待时间片结束 (60-120us)
 80012c0:	2032      	movs	r0, #50	@ 0x32
 80012c2:	f7ff ff99 	bl	80011f8 <Delay_us>
  return bit;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40010800 	.word	0x40010800

080012d4 <DS18B20_WriteByte>:

// 向DS18B20写入1字节 (保持不变)
void DS18B20_WriteByte(uint8_t data)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e00c      	b.n	80012fe <DS18B20_WriteByte+0x2a>
  {
    DS18B20_WriteBit(data & 0x01);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffa3 	bl	8001238 <DS18B20_WriteBit>
    data >>= 1;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	3301      	adds	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d9ef      	bls.n	80012e4 <DS18B20_WriteByte+0x10>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <DS18B20_ReadByte>:

// 从DS18B20读取1字节 (保持不变)
uint8_t DS18B20_ReadByte(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	71bb      	strb	r3, [r7, #6]
 800131c:	e00e      	b.n	800133c <DS18B20_ReadByte+0x2e>
  {
    data >>= 1;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	71fb      	strb	r3, [r7, #7]
    if (DS18B20_ReadBit())
 8001324:	f7ff ffae 	bl	8001284 <DS18B20_ReadBit>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <DS18B20_ReadByte+0x28>
    {
      data |= 0x80;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001334:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	3301      	adds	r3, #1
 800133a:	71bb      	strb	r3, [r7, #6]
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d9ed      	bls.n	800131e <DS18B20_ReadByte+0x10>
    }
  }
  return data;
 8001342:	79fb      	ldrb	r3, [r7, #7]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <DS18B20_Reset>:

// 复位DS18B20 (保持不变)
// 返回 0 表示成功检测到存在脉冲, 1 表示无设备响应
uint8_t DS18B20_Reset(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  uint8_t status;
  // 配置为推挽输出
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DS18B20_PIN;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	481e      	ldr	r0, [pc, #120]	@ (80013ec <DS18B20_Reset+0xa0>)
 8001374:	f000 ff00 	bl	8002178 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	481b      	ldr	r0, [pc, #108]	@ (80013ec <DS18B20_Reset+0xa0>)
 800137e:	f001 f896 	bl	80024ae <HAL_GPIO_WritePin>
  Delay_us(480); // 至少480us
 8001382:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001386:	f7ff ff37 	bl	80011f8 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2101      	movs	r1, #1
 800138e:	4817      	ldr	r0, [pc, #92]	@ (80013ec <DS18B20_Reset+0xa0>)
 8001390:	f001 f88d 	bl	80024ae <HAL_GPIO_WritePin>

  // 配置为浮空输入
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 或 GPIO_PULLUP，取决于外部上拉
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4812      	ldr	r0, [pc, #72]	@ (80013ec <DS18B20_Reset+0xa0>)
 80013a2:	f000 fee9 	bl	8002178 <HAL_GPIO_Init>

  Delay_us(60);                                         // 等待15-60us后采样
 80013a6:	203c      	movs	r0, #60	@ 0x3c
 80013a8:	f7ff ff26 	bl	80011f8 <Delay_us>
  status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN); // 读取存在脉冲 (低电平有效)
 80013ac:	2101      	movs	r1, #1
 80013ae:	480f      	ldr	r0, [pc, #60]	@ (80013ec <DS18B20_Reset+0xa0>)
 80013b0:	f001 f866 	bl	8002480 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	75fb      	strb	r3, [r7, #23]
  Delay_us(420);                                        // 等待存在脉冲结束 (总共480us)
 80013b8:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 80013bc:	f7ff ff1c 	bl	80011f8 <Delay_us>

  // 恢复为推挽输出，准备后续通信
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4806      	ldr	r0, [pc, #24]	@ (80013ec <DS18B20_Reset+0xa0>)
 80013d2:	f000 fed1 	bl	8002178 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 80013d6:	2201      	movs	r2, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	4804      	ldr	r0, [pc, #16]	@ (80013ec <DS18B20_Reset+0xa0>)
 80013dc:	f001 f867 	bl	80024ae <HAL_GPIO_WritePin>

  return status; // 0=成功, 1=失败
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <crc8>:

// --- 新增：CRC8校验函数 ---
uint8_t crc8(const uint8_t *addr, uint8_t len)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
  while (len--)
 8001400:	e022      	b.n	8001448 <crc8+0x58>
  {
    uint8_t inbyte = *addr++;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800140c:	2308      	movs	r3, #8
 800140e:	737b      	strb	r3, [r7, #13]
 8001410:	e017      	b.n	8001442 <crc8+0x52>
    {
      uint8_t mix = (crc ^ inbyte) & 0x01;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	4053      	eors	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
      if (mix)
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <crc8+0x46>
        crc ^= 0x8C; // 校验多项式 X^8 + X^5 + X^4 + 1
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001432:	43db      	mvns	r3, r3
 8001434:	73fb      	strb	r3, [r7, #15]
      inbyte >>= 1;
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800143c:	7b7b      	ldrb	r3, [r7, #13]
 800143e:	3b01      	subs	r3, #1
 8001440:	737b      	strb	r3, [r7, #13]
 8001442:	7b7b      	ldrb	r3, [r7, #13]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e4      	bne.n	8001412 <crc8+0x22>
  while (len--)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	70fa      	strb	r2, [r7, #3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1d7      	bne.n	8001402 <crc8+0x12>
    }
  }
  return crc;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <DS18B20_Search>:

// --- 新增：1-Wire ROM搜索核心函数 ---
// 返回值: 1 = 找到设备, 0 = 未找到/搜索完成
// rom_code: 用于存储找到的ROM地址
uint8_t DS18B20_Search(uint8_t *rom_code)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint8_t search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  // 初始化搜索状态 (仅在首次搜索时)
  id_bit_number = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	733b      	strb	r3, [r7, #12]

  // 如果上一次搜索是最后一次，则重置状态开始新的搜索
  if (LastDeviceFlag)
 800147c:	4b61      	ldr	r3, [pc, #388]	@ (8001604 <DS18B20_Search+0x1a4>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <DS18B20_Search+0x3a>
  {
    LastDiscrepancy = 0;
 8001484:	4b60      	ldr	r3, [pc, #384]	@ (8001608 <DS18B20_Search+0x1a8>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 800148a:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <DS18B20_Search+0x1a4>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 8001490:	4b5e      	ldr	r3, [pc, #376]	@ (800160c <DS18B20_Search+0x1ac>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    return 0; // 没有更多设备
 8001496:	2300      	movs	r3, #0
 8001498:	e0af      	b.n	80015fa <DS18B20_Search+0x19a>
  }

  // 1. 发送复位脉冲
  if (DS18B20_Reset() != 0)
 800149a:	f7ff ff57 	bl	800134c <DS18B20_Reset>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <DS18B20_Search+0x5a>
  {
    // 总线无响应，重置搜索状态并返回错误
    LastDiscrepancy = 0;
 80014a4:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <DS18B20_Search+0x1a8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80014aa:	4b58      	ldr	r3, [pc, #352]	@ (800160c <DS18B20_Search+0x1ac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80014b0:	4b54      	ldr	r3, [pc, #336]	@ (8001604 <DS18B20_Search+0x1a4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e09f      	b.n	80015fa <DS18B20_Search+0x19a>
  }

  // 2. 发送 ROM 搜索命令 (0xF0)
  DS18B20_WriteByte(0xF0);
 80014ba:	20f0      	movs	r0, #240	@ 0xf0
 80014bc:	f7ff ff0a 	bl	80012d4 <DS18B20_WriteByte>

  // 3. 循环搜索 ROM 的每一位 (64位)
  do
  {
    // 读取两位 (bit 和 complement bit)
    id_bit = DS18B20_ReadBit();
 80014c0:	f7ff fee0 	bl	8001284 <DS18B20_ReadBit>
 80014c4:	4603      	mov	r3, r0
 80014c6:	727b      	strb	r3, [r7, #9]
    cmp_id_bit = DS18B20_ReadBit();
 80014c8:	f7ff fedc 	bl	8001284 <DS18B20_ReadBit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	723b      	strb	r3, [r7, #8]

    // 检查冲突
    if ((id_bit == 1) && (cmp_id_bit == 1))
 80014d0:	7a7b      	ldrb	r3, [r7, #9]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <DS18B20_Search+0x7c>
 80014d6:	7a3b      	ldrb	r3, [r7, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d061      	beq.n	80015a0 <DS18B20_Search+0x140>
      break;
    }
    else
    {
      // 设备响应了
      if (id_bit != cmp_id_bit)
 80014dc:	7a7a      	ldrb	r2, [r7, #9]
 80014de:	7a3b      	ldrb	r3, [r7, #8]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d002      	beq.n	80014ea <DS18B20_Search+0x8a>
      {
        // 所有设备在这一位上值相同，直接选择该位
        search_direction = id_bit;
 80014e4:	7a7b      	ldrb	r3, [r7, #9]
 80014e6:	72bb      	strb	r3, [r7, #10]
 80014e8:	e026      	b.n	8001538 <DS18B20_Search+0xd8>
      }
      else
      {
        // 出现分歧 (Discrepancy)，即至少两个设备在这一位有不同值 (0和1)
        // 如果当前位 < 上次分歧位，选择上次确定的路径
        if (id_bit_number < LastDiscrepancy)
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <DS18B20_Search+0x1a8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d20d      	bcs.n	8001510 <DS18B20_Search+0xb0>
        {
          search_direction = ((rom_code[rom_byte_number] & rom_byte_mask) > 0);
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	4013      	ands	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	72bb      	strb	r3, [r7, #10]
 800150e:	e008      	b.n	8001522 <DS18B20_Search+0xc2>
        }
        else
        {
          // 如果等于上次分歧位，选择1路径
          // 如果大于上次分歧位，选择0路径 (优先探索0分支)
          search_direction = (id_bit_number == LastDiscrepancy);
 8001510:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <DS18B20_Search+0x1a8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	429a      	cmp	r2, r3
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	72bb      	strb	r3, [r7, #10]
        }

        // 如果选择0路径，记录下这个分歧点
        if (search_direction == 0)
 8001522:	7abb      	ldrb	r3, [r7, #10]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <DS18B20_Search+0xd8>
        {
          last_zero = id_bit_number;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	73bb      	strb	r3, [r7, #14]
          // 如果是家族码内的分歧，也记录
          if (last_zero < 9)
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	2b08      	cmp	r3, #8
 8001530:	d802      	bhi.n	8001538 <DS18B20_Search+0xd8>
            LastFamilyDiscrepancy = last_zero;
 8001532:	4a36      	ldr	r2, [pc, #216]	@ (800160c <DS18B20_Search+0x1ac>)
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	7013      	strb	r3, [r2, #0]
        }
      }

      // 存储选择的位到 ROM code 中
      if (search_direction == 1)
 8001538:	7abb      	ldrb	r3, [r7, #10]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d10b      	bne.n	8001556 <DS18B20_Search+0xf6>
        rom_code[rom_byte_number] |= rom_byte_mask;
 800153e:	7b7b      	ldrb	r3, [r7, #13]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	7819      	ldrb	r1, [r3, #0]
 8001546:	7b7b      	ldrb	r3, [r7, #13]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	7afa      	ldrb	r2, [r7, #11]
 800154e:	430a      	orrs	r2, r1
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e00f      	b.n	8001576 <DS18B20_Search+0x116>
      else
        rom_code[rom_byte_number] &= ~rom_byte_mask;
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001564:	43db      	mvns	r3, r3
 8001566:	b25b      	sxtb	r3, r3
 8001568:	4013      	ands	r3, r2
 800156a:	b259      	sxtb	r1, r3
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]

      // 发送选择的位，让不匹配的设备进入休眠
      DS18B20_WriteBit(search_direction);
 8001576:	7abb      	ldrb	r3, [r7, #10]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe5d 	bl	8001238 <DS18B20_WriteBit>

      // 移到下一位
      id_bit_number++;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	3301      	adds	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
      rom_byte_mask <<= 1;
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	72fb      	strb	r3, [r7, #11]

      // 如果一个字节的8位都处理完了，移到下一个字节
      if (rom_byte_mask == 0)
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <DS18B20_Search+0x13a>
      {
        rom_byte_number++;
 8001590:	7b7b      	ldrb	r3, [r7, #13]
 8001592:	3301      	adds	r3, #1
 8001594:	737b      	strb	r3, [r7, #13]
        rom_byte_mask = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	72fb      	strb	r3, [r7, #11]
      }
    }
  } while (rom_byte_number < 8); // 处理完8个字节 (64位)
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	2b07      	cmp	r3, #7
 800159e:	d98f      	bls.n	80014c0 <DS18B20_Search+0x60>

  // 4. 检查搜索结果
  if (id_bit_number >= 65)
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b40      	cmp	r3, #64	@ 0x40
 80015a4:	d90b      	bls.n	80015be <DS18B20_Search+0x15e>
  { // 成功完成64位搜索
    // 更新下次搜索的分歧点
    LastDiscrepancy = last_zero;
 80015a6:	4a18      	ldr	r2, [pc, #96]	@ (8001608 <DS18B20_Search+0x1a8>)
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	7013      	strb	r3, [r2, #0]

    // 检查是否是最后一个设备
    if (LastDiscrepancy == 0)
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <DS18B20_Search+0x1a8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <DS18B20_Search+0x15a>
    {
      LastDeviceFlag = 1; // 本次是最后一个设备
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <DS18B20_Search+0x1a4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
    }
    search_result = 1; // 成功找到一个设备
 80015ba:	2301      	movs	r3, #1
 80015bc:	733b      	strb	r3, [r7, #12]
  }

  // 如果搜索失败或CRC校验失败，重置状态
  if (search_result == 0 || rom_code[0] == 0x00 || crc8(rom_code, 7) != rom_code[7])
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00e      	beq.n	80015e2 <DS18B20_Search+0x182>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00a      	beq.n	80015e2 <DS18B20_Search+0x182>
 80015cc:	2107      	movs	r1, #7
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff0e 	bl	80013f0 <crc8>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3307      	adds	r3, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d00a      	beq.n	80015f8 <DS18B20_Search+0x198>
  {
    LastDiscrepancy = 0;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <DS18B20_Search+0x1a8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <DS18B20_Search+0x1a4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <DS18B20_Search+0x1ac>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    search_result = 0; // 标记为失败
 80015f4:	2300      	movs	r3, #0
 80015f6:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 80015f8:	7b3b      	ldrb	r3, [r7, #12]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000021b 	.word	0x2000021b
 8001608:	20000219 	.word	0x20000219
 800160c:	2000021a 	.word	0x2000021a

08001610 <DS18B20_ScanDevices>:

// --- 新增：扫描总线上的所有DS18B20设备 ---
void DS18B20_ScanDevices(void)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b0a7      	sub	sp, #156	@ 0x9c
 8001614:	af08      	add	r7, sp, #32
  uint8_t id[8];
  g_num_sensors = 0; // 重置计数器
 8001616:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]

  // 重置搜索状态
  LastDiscrepancy = 0;
 800161c:	4b56      	ldr	r3, [pc, #344]	@ (8001778 <DS18B20_ScanDevices+0x168>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
  LastDeviceFlag = 0;
 8001622:	4b56      	ldr	r3, [pc, #344]	@ (800177c <DS18B20_ScanDevices+0x16c>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
  LastFamilyDiscrepancy = 0;
 8001628:	4b55      	ldr	r3, [pc, #340]	@ (8001780 <DS18B20_ScanDevices+0x170>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]

  // 循环搜索，直到找不到更多设备
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 800162e:	e020      	b.n	8001672 <DS18B20_ScanDevices+0x62>
  {
    // 检查是否是DS18B20家族码 (0x28)
    if (id[0] == 0x28)
 8001630:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001634:	2b28      	cmp	r3, #40	@ 0x28
 8001636:	d11c      	bne.n	8001672 <DS18B20_ScanDevices+0x62>
    {
      // 检查CRC校验
      if (crc8(id, 7) == id[7])
 8001638:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800163c:	2107      	movs	r1, #7
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fed6 	bl	80013f0 <crc8>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800164c:	429a      	cmp	r2, r3
 800164e:	d110      	bne.n	8001672 <DS18B20_ScanDevices+0x62>
      {
        memcpy(g_ds18b20_roms[g_num_sensors], id, 8);
 8001650:	4b48      	ldr	r3, [pc, #288]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 8001658:	4413      	add	r3, r2
 800165a:	461a      	mov	r2, r3
 800165c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001660:	cb03      	ldmia	r3!, {r0, r1}
 8001662:	6010      	str	r0, [r2, #0]
 8001664:	6051      	str	r1, [r2, #4]
        g_num_sensors++;
 8001666:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 8001670:	701a      	strb	r2, [r3, #0]
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 8001672:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fef2 	bl	8001460 <DS18B20_Search>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <DS18B20_ScanDevices+0x7a>
 8001682:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b04      	cmp	r3, #4
 8001688:	d9d2      	bls.n	8001630 <DS18B20_ScanDevices+0x20>
    }
    // 如果需要支持其他家族码，可以在这里添加判断
  }
  // 可以在这里通过串口打印找到的传感器数量和ROM地址，用于调试
  char dbg_msg[100];
  sprintf(dbg_msg, "Found %d DS18B20 sensors.\r\n", g_num_sensors);
 800168a:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	493c      	ldr	r1, [pc, #240]	@ (8001788 <DS18B20_ScanDevices+0x178>)
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fc7c 	bl	8003f94 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)dbg_msg, strlen(dbg_msg), 100);
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fd55 	bl	8000150 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f107 0108 	add.w	r1, r7, #8
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	4836      	ldr	r0, [pc, #216]	@ (800178c <DS18B20_ScanDevices+0x17c>)
 80016b2:	f001 fb75 	bl	8002da0 <HAL_UART_Transmit>
  for (int i = 0; i < g_num_sensors; i++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80016ba:	e050      	b.n	800175e <DS18B20_ScanDevices+0x14e>
  {
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80016bc:	4a31      	ldr	r2, [pc, #196]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 80016be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	79db      	ldrb	r3, [r3, #7]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 80016c6:	469c      	mov	ip, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80016c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 80016ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	799b      	ldrb	r3, [r3, #6]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 80016d2:	4619      	mov	r1, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80016d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 80016d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	795b      	ldrb	r3, [r3, #5]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 80016de:	461c      	mov	r4, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80016e0:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 80016e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	791b      	ldrb	r3, [r3, #4]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 80016ea:	461d      	mov	r5, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 80016ec:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 80016ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	78db      	ldrb	r3, [r3, #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 80016f6:	461e      	mov	r6, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 80016fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	789b      	ldrb	r3, [r3, #2]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001702:	607b      	str	r3, [r7, #4]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001704:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 8001706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	785b      	ldrb	r3, [r3, #1]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800170e:	603b      	str	r3, [r7, #0]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001710:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <DS18B20_ScanDevices+0x174>)
 8001712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001714:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001718:	f107 0008 	add.w	r0, r7, #8
 800171c:	9306      	str	r3, [sp, #24]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	9205      	str	r2, [sp, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	9304      	str	r3, [sp, #16]
 8001726:	9603      	str	r6, [sp, #12]
 8001728:	9502      	str	r5, [sp, #8]
 800172a:	9401      	str	r4, [sp, #4]
 800172c:	9100      	str	r1, [sp, #0]
 800172e:	4663      	mov	r3, ip
 8001730:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001732:	4917      	ldr	r1, [pc, #92]	@ (8001790 <DS18B20_ScanDevices+0x180>)
 8001734:	f002 fc2e 	bl	8003f94 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)dbg_msg, strlen(dbg_msg), 200);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fd07 	bl	8000150 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f107 0108 	add.w	r1, r7, #8
 800174a:	23c8      	movs	r3, #200	@ 0xc8
 800174c:	480f      	ldr	r0, [pc, #60]	@ (800178c <DS18B20_ScanDevices+0x17c>)
 800174e:	f001 fb27 	bl	8002da0 <HAL_UART_Transmit>
    HAL_Delay(10); // 短暂延时避免串口发送过快
 8001752:	200a      	movs	r0, #10
 8001754:	f000 fc08 	bl	8001f68 <HAL_Delay>
  for (int i = 0; i < g_num_sensors; i++)
 8001758:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800175a:	3301      	adds	r3, #1
 800175c:	677b      	str	r3, [r7, #116]	@ 0x74
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <DS18B20_ScanDevices+0x164>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001766:	4293      	cmp	r3, r2
 8001768:	dba8      	blt.n	80016bc <DS18B20_ScanDevices+0xac>
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	377c      	adds	r7, #124	@ 0x7c
 8001770:	46bd      	mov	sp, r7
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001774:	20000218 	.word	0x20000218
 8001778:	20000219 	.word	0x20000219
 800177c:	2000021b 	.word	0x2000021b
 8001780:	2000021a 	.word	0x2000021a
 8001784:	200001f0 	.word	0x200001f0
 8001788:	08007818 	.word	0x08007818
 800178c:	20000220 	.word	0x20000220
 8001790:	08007834 	.word	0x08007834

08001794 <DS18B20_Select>:

// --- 新增：选择指定ROM地址的设备 ---
void DS18B20_Select(const uint8_t *rom_code)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  DS18B20_WriteByte(0x55); // Match ROM command
 800179c:	2055      	movs	r0, #85	@ 0x55
 800179e:	f7ff fd99 	bl	80012d4 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e009      	b.n	80017bc <DS18B20_Select+0x28>
  {
    DS18B20_WriteByte(rom_code[i]);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd8f 	bl	80012d4 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d9f2      	bls.n	80017a8 <DS18B20_Select+0x14>
  }
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <DS18B20_SkipRom>:

// --- 新增：向总线上所有设备发送命令 (使用 Skip ROM) ---
void DS18B20_SkipRom(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  DS18B20_WriteByte(0xCC); // Skip ROM command
 80017d0:	20cc      	movs	r0, #204	@ 0xcc
 80017d2:	f7ff fd7f 	bl	80012d4 <DS18B20_WriteByte>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <DS18B20_GetTemp>:

// --- 修改：读取指定ROM地址的温度值 ---
// 返回值：读取到的温度，或特定错误值 (例如 -999.0)
float DS18B20_GetTemp(const uint8_t *rom_code)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint8_t tempL, tempH;
  uint16_t temp;
  float result = -999.0; // 默认错误值
 80017e4:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <DS18B20_GetTemp+0x98>)
 80017e6:	60fb      	str	r3, [r7, #12]

  // 1. 复位并选择指定设备
  if (DS18B20_Reset() != 0)
 80017e8:	f7ff fdb0 	bl	800134c <DS18B20_Reset>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <DS18B20_GetTemp+0x1a>
    return result; // 复位失败
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	e039      	b.n	800186a <DS18B20_GetTemp+0x8e>
  DS18B20_Select(rom_code);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffcc 	bl	8001794 <DS18B20_Select>

  // 2. 发送读取暂存器命令 (0xBE)
  DS18B20_WriteByte(0xBE);
 80017fc:	20be      	movs	r0, #190	@ 0xbe
 80017fe:	f7ff fd69 	bl	80012d4 <DS18B20_WriteByte>

  // 3. 读取暂存器内容 (前两个字节是温度)
  //    注意：实际应用中应读取全部9个字节并校验CRC
  tempL = DS18B20_ReadByte();
 8001802:	f7ff fd84 	bl	800130e <DS18B20_ReadByte>
 8001806:	4603      	mov	r3, r0
 8001808:	72fb      	strb	r3, [r7, #11]
  tempH = DS18B20_ReadByte();
 800180a:	f7ff fd80 	bl	800130e <DS18B20_ReadByte>
 800180e:	4603      	mov	r3, r0
 8001810:	72bb      	strb	r3, [r7, #10]
  //     // CRC校验失败
  //     return -998.0; // 返回不同的错误码
  // }

  // 4. 计算温度
  temp = (tempH << 8) | tempL;
 8001812:	7abb      	ldrb	r3, [r7, #10]
 8001814:	b21b      	sxth	r3, r3
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b21b      	sxth	r3, r3
 8001822:	813b      	strh	r3, [r7, #8]

  // 处理负温度 (符号扩展)
  if (temp & 0x8000)
 8001824:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da11      	bge.n	8001850 <DS18B20_GetTemp+0x74>
  {
    temp = ~temp + 1; // 取反加一
 800182c:	893b      	ldrh	r3, [r7, #8]
 800182e:	425b      	negs	r3, r3
 8001830:	813b      	strh	r3, [r7, #8]
    result = -(float)temp / 16.0;
 8001832:	893b      	ldrh	r3, [r7, #8]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fa4d 	bl	8000cd4 <__aeabi_ui2f>
 800183a:	4603      	mov	r3, r0
 800183c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001840:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb51 	bl	8000eec <__aeabi_fdiv>
 800184a:	4603      	mov	r3, r0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e00b      	b.n	8001868 <DS18B20_GetTemp+0x8c>
  }
  else
  {
    result = (float)temp / 16.0;
 8001850:	893b      	ldrh	r3, [r7, #8]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa3e 	bl	8000cd4 <__aeabi_ui2f>
 8001858:	4603      	mov	r3, r0
 800185a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb44 	bl	8000eec <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
  {
    // 可能读取错误，可以返回特定错误值或上次有效值
    // return -997.0;
  }

  return result;
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	c479c000 	.word	0xc479c000

08001878 <DS18B20_StartConversionAll>:

// --- 新增：启动所有连接设备的温度转换 ---
uint8_t DS18B20_StartConversionAll(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  if (DS18B20_Reset() != 0)
 800187c:	f7ff fd66 	bl	800134c <DS18B20_Reset>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <DS18B20_StartConversionAll+0x12>
    return 1;              // 复位失败
 8001886:	2301      	movs	r3, #1
 8001888:	e005      	b.n	8001896 <DS18B20_StartConversionAll+0x1e>
  DS18B20_SkipRom();       // 使用 Skip ROM 命令
 800188a:	f7ff ff9f 	bl	80017cc <DS18B20_SkipRom>
  DS18B20_WriteByte(0x44); // 启动温度转换命令
 800188e:	2044      	movs	r0, #68	@ 0x44
 8001890:	f7ff fd20 	bl	80012d4 <DS18B20_WriteByte>
  return 0;                // 成功启动
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	b0ab      	sub	sp, #172	@ 0xac
 80018a0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a2:	f000 faff 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a6:	f000 f8ef 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018aa:	f7ff fc67 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80018ae:	f000 fa5d 	bl	8001d6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100); // 等待总线稳定
 80018b2:	2064      	movs	r0, #100	@ 0x64
 80018b4:	f000 fb58 	bl	8001f68 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)"DS18B20 Multi-Sensor Test\r\n", strlen("DS18B20 Multi-Sensor Test\r\n"), 100);
 80018b8:	2364      	movs	r3, #100	@ 0x64
 80018ba:	221b      	movs	r2, #27
 80018bc:	4968      	ldr	r1, [pc, #416]	@ (8001a60 <main+0x1c4>)
 80018be:	4869      	ldr	r0, [pc, #420]	@ (8001a64 <main+0x1c8>)
 80018c0:	f001 fa6e 	bl	8002da0 <HAL_UART_Transmit>

  // --- 修改：扫描设备 ---
  DS18B20_ScanDevices();
 80018c4:	f7ff fea4 	bl	8001610 <DS18B20_ScanDevices>

  if (g_num_sensors == 0)
 80018c8:	4b67      	ldr	r3, [pc, #412]	@ (8001a68 <main+0x1cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <main+0x44>
  {
    HAL_UART_Transmit(&huart1, (uint8_t *)"No DS18B20 sensors found!\r\n", strlen("No DS18B20 sensors found!\r\n"), 100);
 80018d0:	2364      	movs	r3, #100	@ 0x64
 80018d2:	221b      	movs	r2, #27
 80018d4:	4965      	ldr	r1, [pc, #404]	@ (8001a6c <main+0x1d0>)
 80018d6:	4863      	ldr	r0, [pc, #396]	@ (8001a64 <main+0x1c8>)
 80018d8:	f001 fa62 	bl	8002da0 <HAL_UART_Transmit>
    while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <main+0x40>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1. 启动所有传感器的温度转换
    if (DS18B20_StartConversionAll() == 0)
 80018e0:	f7ff ffca 	bl	8001878 <DS18B20_StartConversionAll>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80a2 	bne.w	8001a30 <main+0x194>
    {
      // 2. 等待转换完成 (标准精度约750ms)
      //    注意：如果设置了不同精度，等待时间需要调整
      HAL_Delay(750);
 80018ec:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80018f0:	f000 fb3a 	bl	8001f68 <HAL_Delay>

      // 3. 依次读取每个传感器的温度
      for (uint8_t i = 0; i < g_num_sensors; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80018fa:	e091      	b.n	8001a20 <main+0x184>
      {
        temperature = DS18B20_GetTemp(g_ds18b20_roms[i]);
 80018fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4a5b      	ldr	r2, [pc, #364]	@ (8001a70 <main+0x1d4>)
 8001904:	4413      	add	r3, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff68 	bl	80017dc <DS18B20_GetTemp>
 800190c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

        // 格式化ROM地址用于显示
        char rom_str[25];
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001910:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001914:	4a56      	ldr	r2, [pc, #344]	@ (8001a70 <main+0x1d4>)
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	79db      	ldrb	r3, [r3, #7]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 800191c:	469c      	mov	ip, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800191e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001922:	4a53      	ldr	r2, [pc, #332]	@ (8001a70 <main+0x1d4>)
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	799b      	ldrb	r3, [r3, #6]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 800192a:	469e      	mov	lr, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800192c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001930:	4a4f      	ldr	r2, [pc, #316]	@ (8001a70 <main+0x1d4>)
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	795b      	ldrb	r3, [r3, #5]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001938:	4619      	mov	r1, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800193a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800193e:	4a4c      	ldr	r2, [pc, #304]	@ (8001a70 <main+0x1d4>)
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	791b      	ldrb	r3, [r3, #4]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001946:	461c      	mov	r4, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001948:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800194c:	4a48      	ldr	r2, [pc, #288]	@ (8001a70 <main+0x1d4>)
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	78db      	ldrb	r3, [r3, #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001954:	461d      	mov	r5, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001956:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800195a:	4a45      	ldr	r2, [pc, #276]	@ (8001a70 <main+0x1d4>)
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	789b      	ldrb	r3, [r3, #2]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001962:	461e      	mov	r6, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001964:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001968:	4a41      	ldr	r2, [pc, #260]	@ (8001a70 <main+0x1d4>)
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	785b      	ldrb	r3, [r3, #1]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001970:	607b      	str	r3, [r7, #4]
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001972:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001976:	4a3e      	ldr	r2, [pc, #248]	@ (8001a70 <main+0x1d4>)
 8001978:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 800197c:	f107 0008 	add.w	r0, r7, #8
 8001980:	9305      	str	r3, [sp, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	9304      	str	r3, [sp, #16]
 8001986:	9603      	str	r6, [sp, #12]
 8001988:	9502      	str	r5, [sp, #8]
 800198a:	9401      	str	r4, [sp, #4]
 800198c:	9100      	str	r1, [sp, #0]
 800198e:	4673      	mov	r3, lr
 8001990:	4662      	mov	r2, ip
 8001992:	4938      	ldr	r1, [pc, #224]	@ (8001a74 <main+0x1d8>)
 8001994:	f002 fafe 	bl	8003f94 <siprintf>

        if (temperature > -900.0)
 8001998:	4937      	ldr	r1, [pc, #220]	@ (8001a78 <main+0x1dc>)
 800199a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800199e:	f7ff fbad 	bl	80010fc <__aeabi_fcmpgt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <main+0x134>
        { // 检查是否为有效温度值
          sprintf(msg, "Sensor %d [%s]: %.2f C\r\n", i, rom_str, temperature);
 80019a8:	f897 408f 	ldrb.w	r4, [r7, #143]	@ 0x8f
 80019ac:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80019b0:	f7fe fd3a 	bl	8000428 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	f107 0108 	add.w	r1, r7, #8
 80019bc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019c0:	e9cd 2300 	strd	r2, r3, [sp]
 80019c4:	460b      	mov	r3, r1
 80019c6:	4622      	mov	r2, r4
 80019c8:	492c      	ldr	r1, [pc, #176]	@ (8001a7c <main+0x1e0>)
 80019ca:	f002 fae3 	bl	8003f94 <siprintf>
 80019ce:	e012      	b.n	80019f6 <main+0x15a>
        }
        else
        {
          sprintf(msg, "Sensor %d [%s]: Read Error (Code: %.1f)\r\n", i, rom_str, temperature);
 80019d0:	f897 408f 	ldrb.w	r4, [r7, #143]	@ 0x8f
 80019d4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80019d8:	f7fe fd26 	bl	8000428 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	f107 0108 	add.w	r1, r7, #8
 80019e4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019e8:	e9cd 2300 	strd	r2, r3, [sp]
 80019ec:	460b      	mov	r3, r1
 80019ee:	4622      	mov	r2, r4
 80019f0:	4923      	ldr	r1, [pc, #140]	@ (8001a80 <main+0x1e4>)
 80019f2:	f002 facf 	bl	8003f94 <siprintf>
        }
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 200);
 80019f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fba8 	bl	8000150 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a08:	23c8      	movs	r3, #200	@ 0xc8
 8001a0a:	4816      	ldr	r0, [pc, #88]	@ (8001a64 <main+0x1c8>)
 8001a0c:	f001 f9c8 	bl	8002da0 <HAL_UART_Transmit>
        HAL_Delay(50); // 短暂延时，避免串口拥堵
 8001a10:	2032      	movs	r0, #50	@ 0x32
 8001a12:	f000 faa9 	bl	8001f68 <HAL_Delay>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001a16:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <main+0x1cc>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f4ff af67 	bcc.w	80018fc <main+0x60>
 8001a2e:	e012      	b.n	8001a56 <main+0x1ba>
      }
    }
    else
    {
      sprintf(msg, "Failed to start conversion.\r\n");
 8001a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a34:	4913      	ldr	r1, [pc, #76]	@ (8001a84 <main+0x1e8>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 faac 	bl	8003f94 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fb85 	bl	8000150 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a4e:	2364      	movs	r3, #100	@ 0x64
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <main+0x1c8>)
 8001a52:	f001 f9a5 	bl	8002da0 <HAL_UART_Transmit>
    }

    HAL_Delay(2000); // 每隔一段时间读取一次
 8001a56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a5a:	f000 fa85 	bl	8001f68 <HAL_Delay>
    if (DS18B20_StartConversionAll() == 0)
 8001a5e:	e73f      	b.n	80018e0 <main+0x44>
 8001a60:	08007868 	.word	0x08007868
 8001a64:	20000220 	.word	0x20000220
 8001a68:	20000218 	.word	0x20000218
 8001a6c:	08007884 	.word	0x08007884
 8001a70:	200001f0 	.word	0x200001f0
 8001a74:	080078a0 	.word	0x080078a0
 8001a78:	c4610000 	.word	0xc4610000
 8001a7c:	080078c8 	.word	0x080078c8
 8001a80:	080078e4 	.word	0x080078e4
 8001a84:	08007910 	.word	0x08007910

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	@ 0x40
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2228      	movs	r2, #40	@ 0x28
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fae1 	bl	800405e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ac6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fd05 	bl	80024e0 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001adc:	f000 f819 	bl	8001b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 ff72 	bl	80029e4 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b06:	f000 f804 	bl	8001b12 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3740      	adds	r7, #64	@ 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b16:	b672      	cpsid	i
}
 8001b18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1a:	bf00      	nop
 8001b1c:	e7fd      	b.n	8001b1a <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <HAL_MspInit+0x5c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	@ (8001b7c <HAL_MspInit+0x5c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_MspInit+0x5c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_MspInit+0x5c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <HAL_MspInit+0x5c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_MspInit+0x5c>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_MspInit+0x60>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_MspInit+0x60>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <NMI_Handler+0x4>

08001b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f9ac 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <_kill>:

int _kill(int pid, int sig)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf4:	f002 fa86 	bl	8004104 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2216      	movs	r2, #22
 8001bfc:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_exit>:

void _exit (int status)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c12:	f04f 31ff 	mov.w	r1, #4294967295
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffe7 	bl	8001bea <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <_exit+0x12>

08001c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e00a      	b.n	8001c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c32:	f3af 8000 	nop.w
 8001c36:	4601      	mov	r1, r0
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	b2ca      	uxtb	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf0      	blt.n	8001c32 <_read+0x12>
  }

  return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e009      	b.n	8001c80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf1      	blt.n	8001c6c <_write+0x12>
  }
  return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_close>:

int _close(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <_isatty>:

int _isatty(int file)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f002 f9ee 	bl	8004104 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20005000 	.word	0x20005000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	2000021c 	.word	0x2000021c
 8001d5c:	200003b8 	.word	0x200003b8

08001d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <MX_USART1_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001da4:	f000 ffac 	bl	8002d00 <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f7ff feb0 	bl	8001b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000220 	.word	0x20000220
 8001dbc:	40013800 	.word	0x40013800

08001dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_UART_MspInit+0x8c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d131      	bne.n	8001e44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <HAL_UART_MspInit+0x94>)
 8001e26:	f000 f9a7 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <HAL_UART_MspInit+0x94>)
 8001e40:	f000 f99a 	bl	8002178 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800

08001e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e58:	f7ff ff82 	bl	8001d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e5c:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e5e:	490c      	ldr	r1, [pc, #48]	@ (8001e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e60:	4a0c      	ldr	r2, [pc, #48]	@ (8001e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e74:	4c09      	ldr	r4, [pc, #36]	@ (8001e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f002 f945 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e86:	f7ff fd09 	bl	800189c <main>
  bx lr
 8001e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e94:	08007d94 	.word	0x08007d94
  ldr r2, =_sbss
 8001e98:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e9c:	200003b8 	.word	0x200003b8

08001ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_2_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_Init+0x28>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_Init+0x28>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f92b 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fe2e 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f935 	bl	800215e <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 f90b 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_IncTick+0x1c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_IncTick+0x20>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a03      	ldr	r2, [pc, #12]	@ (8001f50 <HAL_IncTick+0x20>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	20000268 	.word	0x20000268

08001f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b02      	ldr	r3, [pc, #8]	@ (8001f64 <HAL_GetTick+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000268 	.word	0x20000268

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fff0 	bl	8001f54 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffe0 	bl	8001f54 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	@ (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	@ (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	@ 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff90 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	@ (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff49 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff5e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff90 	bl	8002068 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5f 	bl	8002014 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffb0 	bl	80020cc <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b08b      	sub	sp, #44	@ 0x2c
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	e169      	b.n	8002460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800218c:	2201      	movs	r2, #1
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8158 	bne.w	800245a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a9a      	ldr	r2, [pc, #616]	@ (8002418 <HAL_GPIO_Init+0x2a0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d05e      	beq.n	8002272 <HAL_GPIO_Init+0xfa>
 80021b4:	4a98      	ldr	r2, [pc, #608]	@ (8002418 <HAL_GPIO_Init+0x2a0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d875      	bhi.n	80022a6 <HAL_GPIO_Init+0x12e>
 80021ba:	4a98      	ldr	r2, [pc, #608]	@ (800241c <HAL_GPIO_Init+0x2a4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d058      	beq.n	8002272 <HAL_GPIO_Init+0xfa>
 80021c0:	4a96      	ldr	r2, [pc, #600]	@ (800241c <HAL_GPIO_Init+0x2a4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d86f      	bhi.n	80022a6 <HAL_GPIO_Init+0x12e>
 80021c6:	4a96      	ldr	r2, [pc, #600]	@ (8002420 <HAL_GPIO_Init+0x2a8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d052      	beq.n	8002272 <HAL_GPIO_Init+0xfa>
 80021cc:	4a94      	ldr	r2, [pc, #592]	@ (8002420 <HAL_GPIO_Init+0x2a8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d869      	bhi.n	80022a6 <HAL_GPIO_Init+0x12e>
 80021d2:	4a94      	ldr	r2, [pc, #592]	@ (8002424 <HAL_GPIO_Init+0x2ac>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d04c      	beq.n	8002272 <HAL_GPIO_Init+0xfa>
 80021d8:	4a92      	ldr	r2, [pc, #584]	@ (8002424 <HAL_GPIO_Init+0x2ac>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d863      	bhi.n	80022a6 <HAL_GPIO_Init+0x12e>
 80021de:	4a92      	ldr	r2, [pc, #584]	@ (8002428 <HAL_GPIO_Init+0x2b0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d046      	beq.n	8002272 <HAL_GPIO_Init+0xfa>
 80021e4:	4a90      	ldr	r2, [pc, #576]	@ (8002428 <HAL_GPIO_Init+0x2b0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d85d      	bhi.n	80022a6 <HAL_GPIO_Init+0x12e>
 80021ea:	2b12      	cmp	r3, #18
 80021ec:	d82a      	bhi.n	8002244 <HAL_GPIO_Init+0xcc>
 80021ee:	2b12      	cmp	r3, #18
 80021f0:	d859      	bhi.n	80022a6 <HAL_GPIO_Init+0x12e>
 80021f2:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <HAL_GPIO_Init+0x80>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002273 	.word	0x08002273
 80021fc:	0800224d 	.word	0x0800224d
 8002200:	0800225f 	.word	0x0800225f
 8002204:	080022a1 	.word	0x080022a1
 8002208:	080022a7 	.word	0x080022a7
 800220c:	080022a7 	.word	0x080022a7
 8002210:	080022a7 	.word	0x080022a7
 8002214:	080022a7 	.word	0x080022a7
 8002218:	080022a7 	.word	0x080022a7
 800221c:	080022a7 	.word	0x080022a7
 8002220:	080022a7 	.word	0x080022a7
 8002224:	080022a7 	.word	0x080022a7
 8002228:	080022a7 	.word	0x080022a7
 800222c:	080022a7 	.word	0x080022a7
 8002230:	080022a7 	.word	0x080022a7
 8002234:	080022a7 	.word	0x080022a7
 8002238:	080022a7 	.word	0x080022a7
 800223c:	08002255 	.word	0x08002255
 8002240:	08002269 	.word	0x08002269
 8002244:	4a79      	ldr	r2, [pc, #484]	@ (800242c <HAL_GPIO_Init+0x2b4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800224a:	e02c      	b.n	80022a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	623b      	str	r3, [r7, #32]
          break;
 8002252:	e029      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	3304      	adds	r3, #4
 800225a:	623b      	str	r3, [r7, #32]
          break;
 800225c:	e024      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	3308      	adds	r3, #8
 8002264:	623b      	str	r3, [r7, #32]
          break;
 8002266:	e01f      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	330c      	adds	r3, #12
 800226e:	623b      	str	r3, [r7, #32]
          break;
 8002270:	e01a      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227a:	2304      	movs	r3, #4
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e013      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002288:	2308      	movs	r3, #8
 800228a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	611a      	str	r2, [r3, #16]
          break;
 8002292:	e009      	b.n	80022a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	615a      	str	r2, [r3, #20]
          break;
 800229e:	e003      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x130>
          break;
 80022a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2bff      	cmp	r3, #255	@ 0xff
 80022ac:	d801      	bhi.n	80022b2 <HAL_GPIO_Init+0x13a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	e001      	b.n	80022b6 <HAL_GPIO_Init+0x13e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2bff      	cmp	r3, #255	@ 0xff
 80022bc:	d802      	bhi.n	80022c4 <HAL_GPIO_Init+0x14c>
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	e002      	b.n	80022ca <HAL_GPIO_Init+0x152>
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	3b08      	subs	r3, #8
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	210f      	movs	r1, #15
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	431a      	orrs	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80b1 	beq.w	800245a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002430 <HAL_GPIO_Init+0x2b8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002430 <HAL_GPIO_Init+0x2b8>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_GPIO_Init+0x2b8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002310:	4a48      	ldr	r2, [pc, #288]	@ (8002434 <HAL_GPIO_Init+0x2bc>)
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a40      	ldr	r2, [pc, #256]	@ (8002438 <HAL_GPIO_Init+0x2c0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d013      	beq.n	8002364 <HAL_GPIO_Init+0x1ec>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3f      	ldr	r2, [pc, #252]	@ (800243c <HAL_GPIO_Init+0x2c4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00d      	beq.n	8002360 <HAL_GPIO_Init+0x1e8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3e      	ldr	r2, [pc, #248]	@ (8002440 <HAL_GPIO_Init+0x2c8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <HAL_GPIO_Init+0x1e4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3d      	ldr	r2, [pc, #244]	@ (8002444 <HAL_GPIO_Init+0x2cc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_GPIO_Init+0x1e0>
 8002354:	2303      	movs	r3, #3
 8002356:	e006      	b.n	8002366 <HAL_GPIO_Init+0x1ee>
 8002358:	2304      	movs	r3, #4
 800235a:	e004      	b.n	8002366 <HAL_GPIO_Init+0x1ee>
 800235c:	2302      	movs	r3, #2
 800235e:	e002      	b.n	8002366 <HAL_GPIO_Init+0x1ee>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_GPIO_Init+0x1ee>
 8002364:	2300      	movs	r3, #0
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	f002 0203 	and.w	r2, r2, #3
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	4093      	lsls	r3, r2
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002376:	492f      	ldr	r1, [pc, #188]	@ (8002434 <HAL_GPIO_Init+0x2bc>)
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002390:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	492c      	ldr	r1, [pc, #176]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4928      	ldr	r1, [pc, #160]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b8:	4b23      	ldr	r3, [pc, #140]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4922      	ldr	r1, [pc, #136]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c6:	4b20      	ldr	r3, [pc, #128]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	491e      	ldr	r1, [pc, #120]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4918      	ldr	r1, [pc, #96]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ee:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4914      	ldr	r1, [pc, #80]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d021      	beq.n	800244c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e021      	b.n	800245a <HAL_GPIO_Init+0x2e2>
 8002416:	bf00      	nop
 8002418:	10320000 	.word	0x10320000
 800241c:	10310000 	.word	0x10310000
 8002420:	10220000 	.word	0x10220000
 8002424:	10210000 	.word	0x10210000
 8002428:	10120000 	.word	0x10120000
 800242c:	10110000 	.word	0x10110000
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000
 8002438:	40010800 	.word	0x40010800
 800243c:	40010c00 	.word	0x40010c00
 8002440:	40011000 	.word	0x40011000
 8002444:	40011400 	.word	0x40011400
 8002448:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_GPIO_Init+0x304>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	43db      	mvns	r3, r3
 8002454:	4909      	ldr	r1, [pc, #36]	@ (800247c <HAL_GPIO_Init+0x304>)
 8002456:	4013      	ands	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	3301      	adds	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	f47f ae8e 	bne.w	800218c <HAL_GPIO_Init+0x14>
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	372c      	adds	r7, #44	@ 0x2c
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	40010400 	.word	0x40010400

08002480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e001      	b.n	80024a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	807b      	strh	r3, [r7, #2]
 80024ba:	4613      	mov	r3, r2
 80024bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024be:	787b      	ldrb	r3, [r7, #1]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c4:	887a      	ldrh	r2, [r7, #2]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	041a      	lsls	r2, r3, #16
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e272      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b92      	ldr	r3, [pc, #584]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800250c:	4b8f      	ldr	r3, [pc, #572]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x5e>
 8002518:	4b8c      	ldr	r3, [pc, #560]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b89      	ldr	r3, [pc, #548]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06c      	beq.n	800260c <HAL_RCC_OscConfig+0x12c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d168      	bne.n	800260c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e24c      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x76>
 8002548:	4b80      	ldr	r3, [pc, #512]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a7f      	ldr	r2, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b7b      	ldr	r3, [pc, #492]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7a      	ldr	r2, [pc, #488]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b78      	ldr	r3, [pc, #480]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a77      	ldr	r2, [pc, #476]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xbc>
 8002582:	4b72      	ldr	r3, [pc, #456]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a71      	ldr	r2, [pc, #452]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 800259c:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b68      	ldr	r3, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a67      	ldr	r2, [pc, #412]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fcca 	bl	8001f54 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff fcc6 	bl	8001f54 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e200      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe4>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fcb6 	bl	8001f54 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff fcb2 	bl	8001f54 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1ec      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x10c>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002626:	4b49      	ldr	r3, [pc, #292]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x18c>
 8002632:	4b46      	ldr	r3, [pc, #280]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x176>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1c0      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4939      	ldr	r1, [pc, #228]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <HAL_RCC_OscConfig+0x270>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7ff fc6b 	bl	8001f54 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7ff fc67 	bl	8001f54 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1a1      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4927      	ldr	r1, [pc, #156]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_RCC_OscConfig+0x270>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fc4a 	bl	8001f54 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7ff fc46 	bl	8001f54 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e180      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03a      	beq.n	8002764 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d019      	beq.n	800272a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_RCC_OscConfig+0x274>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7ff fc2a 	bl	8001f54 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7ff fc26 	bl	8001f54 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e160      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f000 face 	bl	8002cc4 <RCC_Delay>
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RCC_OscConfig+0x274>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7ff fc10 	bl	8001f54 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002736:	e00f      	b.n	8002758 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7ff fc0c 	bl	8001f54 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d908      	bls.n	8002758 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e146      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	42420000 	.word	0x42420000
 8002754:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b92      	ldr	r3, [pc, #584]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e9      	bne.n	8002738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a6 	beq.w	80028be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b8b      	ldr	r3, [pc, #556]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a87      	ldr	r2, [pc, #540]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b82      	ldr	r3, [pc, #520]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b7f      	ldr	r3, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7e      	ldr	r2, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7ff fbcd 	bl	8001f54 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7ff fbc9 	bl	8001f54 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e103      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x312>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a6e      	ldr	r2, [pc, #440]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e02d      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x334>
 80027fa:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	4b67      	ldr	r3, [pc, #412]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a66      	ldr	r2, [pc, #408]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x356>
 800281c:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a60      	ldr	r2, [pc, #384]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	4b5e      	ldr	r3, [pc, #376]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 8002836:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a5a      	ldr	r2, [pc, #360]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	4b58      	ldr	r3, [pc, #352]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a57      	ldr	r2, [pc, #348]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7ff fb7d 	bl	8001f54 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff fb79 	bl	8001f54 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0b1      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x37e>
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7ff fb67 	bl	8001f54 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff fb63 	bl	8001f54 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e09b      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8087 	beq.w	80029d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d061      	beq.n	8002998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d146      	bne.n	800296a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7ff fb37 	bl	8001f54 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7ff fb33 	bl	8001f54 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e06d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002910:	d108      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4921      	ldr	r1, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a19      	ldr	r1, [r3, #32]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	430b      	orrs	r3, r1
 8002936:	491b      	ldr	r1, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff fb07 	bl	8001f54 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff fb03 	bl	8001f54 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x46a>
 8002968:	e035      	b.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff faf0 	bl	8001f54 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff faec 	bl	8001f54 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e026      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x498>
 8002996:	e01e      	b.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e019      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_OscConfig+0x500>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0d0      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b67      	ldr	r3, [pc, #412]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4965      	ldr	r1, [pc, #404]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b63      	ldr	r3, [pc, #396]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b8      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b59      	ldr	r3, [pc, #356]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a58      	ldr	r2, [pc, #352]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	494d      	ldr	r1, [pc, #308]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e073      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06b      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4936      	ldr	r1, [pc, #216]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7ff fa3e 	bl	8001f54 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7ff fa3a 	bl	8001f54 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e053      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d210      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0207 	bic.w	r2, r3, #7
 8002b1a:	4922      	ldr	r1, [pc, #136]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4916      	ldr	r1, [pc, #88]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	490e      	ldr	r1, [pc, #56]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b72:	f000 f821 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490a      	ldr	r1, [pc, #40]	@ (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f99c 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08007930 	.word	0x08007930
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x30>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x36>
 8002be6:	e027      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bea:	613b      	str	r3, [r7, #16]
      break;
 8002bec:	e027      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0c9b      	lsrs	r3, r3, #18
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0c5b      	lsrs	r3, r3, #17
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	4a11      	ldr	r2, [pc, #68]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1a:	fb03 f202 	mul.w	r2, r3, r2
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e004      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	613b      	str	r3, [r7, #16]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3a:	613b      	str	r3, [r7, #16]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	693b      	ldr	r3, [r7, #16]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	007a1200 	.word	0x007a1200
 8002c54:	08007948 	.word	0x08007948
 8002c58:	08007958 	.word	0x08007958
 8002c5c:	003d0900 	.word	0x003d0900

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b02      	ldr	r3, [pc, #8]	@ (8002c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff2 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08007940 	.word	0x08007940

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffde 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08007940 	.word	0x08007940

08002cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <RCC_Delay+0x34>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <RCC_Delay+0x38>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0a5b      	lsrs	r3, r3, #9
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce0:	bf00      	nop
  }
  while (Delay --);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f9      	bne.n	8002ce0 <RCC_Delay+0x1c>
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e042      	b.n	8002d98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff f84a 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	@ 0x24
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f971 	bl	800302c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d175      	bne.n	8002eac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_UART_Transmit+0x2c>
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e06e      	b.n	8002eae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2221      	movs	r2, #33	@ 0x21
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dde:	f7ff f8b9 	bl	8001f54 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df8:	d108      	bne.n	8002e0c <HAL_UART_Transmit+0x6c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e003      	b.n	8002e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e14:	e02e      	b.n	8002e74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f848 	bl	8002eb6 <UART_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e03a      	b.n	8002eae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	3302      	adds	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e007      	b.n	8002e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3301      	adds	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1cb      	bne.n	8002e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2140      	movs	r1, #64	@ 0x40
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f814 	bl	8002eb6 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e006      	b.n	8002eae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec6:	e03b      	b.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d037      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7ff f840 	bl	8001f54 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e03a      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d023      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b80      	cmp	r3, #128	@ 0x80
 8002efc:	d020      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	d01d      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d116      	bne.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f81d 	bl	8002f68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2208      	movs	r2, #8
 8002f32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e00f      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d0b4      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b095      	sub	sp, #84	@ 0x54
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f90:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e5      	bne.n	8002f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d119      	bne.n	8003014 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003000:	61ba      	str	r2, [r7, #24]
 8003002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	613b      	str	r3, [r7, #16]
   return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003022:	bf00      	nop
 8003024:	3754      	adds	r7, #84	@ 0x54
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003066:	f023 030c 	bic.w	r3, r3, #12
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2c      	ldr	r2, [pc, #176]	@ (8003140 <UART_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7ff fe02 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	e002      	b.n	80030a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7ff fdea 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 80030a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009a      	lsls	r2, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	0119      	lsls	r1, r3, #4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <UART_SetConfig+0x118>)
 80030da:	fba3 0302 	umull	r0, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2064      	movs	r0, #100	@ 0x64
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	@ 0x32
 80030ec:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f8:	4419      	add	r1, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <UART_SetConfig+0x118>)
 8003112:	fba3 0302 	umull	r0, r3, r3, r2
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2064      	movs	r0, #100	@ 0x64
 800311a:	fb00 f303 	mul.w	r3, r0, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	3332      	adds	r3, #50	@ 0x32
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	440a      	add	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013800 	.word	0x40013800
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <__cvt>:
 8003148:	2b00      	cmp	r3, #0
 800314a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800314e:	461d      	mov	r5, r3
 8003150:	bfbb      	ittet	lt
 8003152:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003156:	461d      	movlt	r5, r3
 8003158:	2300      	movge	r3, #0
 800315a:	232d      	movlt	r3, #45	@ 0x2d
 800315c:	b088      	sub	sp, #32
 800315e:	4614      	mov	r4, r2
 8003160:	bfb8      	it	lt
 8003162:	4614      	movlt	r4, r2
 8003164:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003166:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003168:	7013      	strb	r3, [r2, #0]
 800316a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800316c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003170:	f023 0820 	bic.w	r8, r3, #32
 8003174:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003178:	d005      	beq.n	8003186 <__cvt+0x3e>
 800317a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800317e:	d100      	bne.n	8003182 <__cvt+0x3a>
 8003180:	3601      	adds	r6, #1
 8003182:	2302      	movs	r3, #2
 8003184:	e000      	b.n	8003188 <__cvt+0x40>
 8003186:	2303      	movs	r3, #3
 8003188:	aa07      	add	r2, sp, #28
 800318a:	9204      	str	r2, [sp, #16]
 800318c:	aa06      	add	r2, sp, #24
 800318e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003192:	e9cd 3600 	strd	r3, r6, [sp]
 8003196:	4622      	mov	r2, r4
 8003198:	462b      	mov	r3, r5
 800319a:	f001 f87d 	bl	8004298 <_dtoa_r>
 800319e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80031a2:	4607      	mov	r7, r0
 80031a4:	d119      	bne.n	80031da <__cvt+0x92>
 80031a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80031a8:	07db      	lsls	r3, r3, #31
 80031aa:	d50e      	bpl.n	80031ca <__cvt+0x82>
 80031ac:	eb00 0906 	add.w	r9, r0, r6
 80031b0:	2200      	movs	r2, #0
 80031b2:	2300      	movs	r3, #0
 80031b4:	4620      	mov	r0, r4
 80031b6:	4629      	mov	r1, r5
 80031b8:	f7fd fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 80031bc:	b108      	cbz	r0, 80031c2 <__cvt+0x7a>
 80031be:	f8cd 901c 	str.w	r9, [sp, #28]
 80031c2:	2230      	movs	r2, #48	@ 0x30
 80031c4:	9b07      	ldr	r3, [sp, #28]
 80031c6:	454b      	cmp	r3, r9
 80031c8:	d31e      	bcc.n	8003208 <__cvt+0xc0>
 80031ca:	4638      	mov	r0, r7
 80031cc:	9b07      	ldr	r3, [sp, #28]
 80031ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80031d0:	1bdb      	subs	r3, r3, r7
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	b008      	add	sp, #32
 80031d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031de:	eb00 0906 	add.w	r9, r0, r6
 80031e2:	d1e5      	bne.n	80031b0 <__cvt+0x68>
 80031e4:	7803      	ldrb	r3, [r0, #0]
 80031e6:	2b30      	cmp	r3, #48	@ 0x30
 80031e8:	d10a      	bne.n	8003200 <__cvt+0xb8>
 80031ea:	2200      	movs	r2, #0
 80031ec:	2300      	movs	r3, #0
 80031ee:	4620      	mov	r0, r4
 80031f0:	4629      	mov	r1, r5
 80031f2:	f7fd fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80031f6:	b918      	cbnz	r0, 8003200 <__cvt+0xb8>
 80031f8:	f1c6 0601 	rsb	r6, r6, #1
 80031fc:	f8ca 6000 	str.w	r6, [sl]
 8003200:	f8da 3000 	ldr.w	r3, [sl]
 8003204:	4499      	add	r9, r3
 8003206:	e7d3      	b.n	80031b0 <__cvt+0x68>
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	9107      	str	r1, [sp, #28]
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e7d9      	b.n	80031c4 <__cvt+0x7c>

08003210 <__exponent>:
 8003210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003212:	2900      	cmp	r1, #0
 8003214:	bfb6      	itet	lt
 8003216:	232d      	movlt	r3, #45	@ 0x2d
 8003218:	232b      	movge	r3, #43	@ 0x2b
 800321a:	4249      	neglt	r1, r1
 800321c:	2909      	cmp	r1, #9
 800321e:	7002      	strb	r2, [r0, #0]
 8003220:	7043      	strb	r3, [r0, #1]
 8003222:	dd29      	ble.n	8003278 <__exponent+0x68>
 8003224:	f10d 0307 	add.w	r3, sp, #7
 8003228:	461d      	mov	r5, r3
 800322a:	270a      	movs	r7, #10
 800322c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003230:	461a      	mov	r2, r3
 8003232:	fb07 1416 	mls	r4, r7, r6, r1
 8003236:	3430      	adds	r4, #48	@ 0x30
 8003238:	f802 4c01 	strb.w	r4, [r2, #-1]
 800323c:	460c      	mov	r4, r1
 800323e:	2c63      	cmp	r4, #99	@ 0x63
 8003240:	4631      	mov	r1, r6
 8003242:	f103 33ff 	add.w	r3, r3, #4294967295
 8003246:	dcf1      	bgt.n	800322c <__exponent+0x1c>
 8003248:	3130      	adds	r1, #48	@ 0x30
 800324a:	1e94      	subs	r4, r2, #2
 800324c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003250:	4623      	mov	r3, r4
 8003252:	1c41      	adds	r1, r0, #1
 8003254:	42ab      	cmp	r3, r5
 8003256:	d30a      	bcc.n	800326e <__exponent+0x5e>
 8003258:	f10d 0309 	add.w	r3, sp, #9
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	42ac      	cmp	r4, r5
 8003260:	bf88      	it	hi
 8003262:	2300      	movhi	r3, #0
 8003264:	3302      	adds	r3, #2
 8003266:	4403      	add	r3, r0
 8003268:	1a18      	subs	r0, r3, r0
 800326a:	b003      	add	sp, #12
 800326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800326e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003272:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003276:	e7ed      	b.n	8003254 <__exponent+0x44>
 8003278:	2330      	movs	r3, #48	@ 0x30
 800327a:	3130      	adds	r1, #48	@ 0x30
 800327c:	7083      	strb	r3, [r0, #2]
 800327e:	70c1      	strb	r1, [r0, #3]
 8003280:	1d03      	adds	r3, r0, #4
 8003282:	e7f1      	b.n	8003268 <__exponent+0x58>

08003284 <_printf_float>:
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	b091      	sub	sp, #68	@ 0x44
 800328a:	460c      	mov	r4, r1
 800328c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003290:	4616      	mov	r6, r2
 8003292:	461f      	mov	r7, r3
 8003294:	4605      	mov	r5, r0
 8003296:	f000 feeb 	bl	8004070 <_localeconv_r>
 800329a:	6803      	ldr	r3, [r0, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	9308      	str	r3, [sp, #32]
 80032a0:	f7fc ff56 	bl	8000150 <strlen>
 80032a4:	2300      	movs	r3, #0
 80032a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80032a8:	f8d8 3000 	ldr.w	r3, [r8]
 80032ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80032ae:	3307      	adds	r3, #7
 80032b0:	f023 0307 	bic.w	r3, r3, #7
 80032b4:	f103 0208 	add.w	r2, r3, #8
 80032b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80032bc:	f8d4 b000 	ldr.w	fp, [r4]
 80032c0:	f8c8 2000 	str.w	r2, [r8]
 80032c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80032cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032ce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80032d2:	f04f 32ff 	mov.w	r2, #4294967295
 80032d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80032de:	4b9c      	ldr	r3, [pc, #624]	@ (8003550 <_printf_float+0x2cc>)
 80032e0:	f7fd fb94 	bl	8000a0c <__aeabi_dcmpun>
 80032e4:	bb70      	cbnz	r0, 8003344 <_printf_float+0xc0>
 80032e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032ea:	f04f 32ff 	mov.w	r2, #4294967295
 80032ee:	4b98      	ldr	r3, [pc, #608]	@ (8003550 <_printf_float+0x2cc>)
 80032f0:	f7fd fb6e 	bl	80009d0 <__aeabi_dcmple>
 80032f4:	bb30      	cbnz	r0, 8003344 <_printf_float+0xc0>
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fd fb5d 	bl	80009bc <__aeabi_dcmplt>
 8003302:	b110      	cbz	r0, 800330a <_printf_float+0x86>
 8003304:	232d      	movs	r3, #45	@ 0x2d
 8003306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800330a:	4a92      	ldr	r2, [pc, #584]	@ (8003554 <_printf_float+0x2d0>)
 800330c:	4b92      	ldr	r3, [pc, #584]	@ (8003558 <_printf_float+0x2d4>)
 800330e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003312:	bf8c      	ite	hi
 8003314:	4690      	movhi	r8, r2
 8003316:	4698      	movls	r8, r3
 8003318:	2303      	movs	r3, #3
 800331a:	f04f 0900 	mov.w	r9, #0
 800331e:	6123      	str	r3, [r4, #16]
 8003320:	f02b 0304 	bic.w	r3, fp, #4
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	4633      	mov	r3, r6
 8003328:	4621      	mov	r1, r4
 800332a:	4628      	mov	r0, r5
 800332c:	9700      	str	r7, [sp, #0]
 800332e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003330:	f000 f9d4 	bl	80036dc <_printf_common>
 8003334:	3001      	adds	r0, #1
 8003336:	f040 8090 	bne.w	800345a <_printf_float+0x1d6>
 800333a:	f04f 30ff 	mov.w	r0, #4294967295
 800333e:	b011      	add	sp, #68	@ 0x44
 8003340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	4640      	mov	r0, r8
 800334a:	4649      	mov	r1, r9
 800334c:	f7fd fb5e 	bl	8000a0c <__aeabi_dcmpun>
 8003350:	b148      	cbz	r0, 8003366 <_printf_float+0xe2>
 8003352:	464b      	mov	r3, r9
 8003354:	2b00      	cmp	r3, #0
 8003356:	bfb8      	it	lt
 8003358:	232d      	movlt	r3, #45	@ 0x2d
 800335a:	4a80      	ldr	r2, [pc, #512]	@ (800355c <_printf_float+0x2d8>)
 800335c:	bfb8      	it	lt
 800335e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003362:	4b7f      	ldr	r3, [pc, #508]	@ (8003560 <_printf_float+0x2dc>)
 8003364:	e7d3      	b.n	800330e <_printf_float+0x8a>
 8003366:	6863      	ldr	r3, [r4, #4]
 8003368:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	d13f      	bne.n	80033f0 <_printf_float+0x16c>
 8003370:	2306      	movs	r3, #6
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	9206      	str	r2, [sp, #24]
 800337e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003380:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003384:	aa0d      	add	r2, sp, #52	@ 0x34
 8003386:	9203      	str	r2, [sp, #12]
 8003388:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800338c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	4642      	mov	r2, r8
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	4628      	mov	r0, r5
 8003398:	464b      	mov	r3, r9
 800339a:	910a      	str	r1, [sp, #40]	@ 0x28
 800339c:	f7ff fed4 	bl	8003148 <__cvt>
 80033a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80033a2:	4680      	mov	r8, r0
 80033a4:	2947      	cmp	r1, #71	@ 0x47
 80033a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80033a8:	d128      	bne.n	80033fc <_printf_float+0x178>
 80033aa:	1cc8      	adds	r0, r1, #3
 80033ac:	db02      	blt.n	80033b4 <_printf_float+0x130>
 80033ae:	6863      	ldr	r3, [r4, #4]
 80033b0:	4299      	cmp	r1, r3
 80033b2:	dd40      	ble.n	8003436 <_printf_float+0x1b2>
 80033b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80033b8:	fa5f fa8a 	uxtb.w	sl, sl
 80033bc:	4652      	mov	r2, sl
 80033be:	3901      	subs	r1, #1
 80033c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80033c4:	910d      	str	r1, [sp, #52]	@ 0x34
 80033c6:	f7ff ff23 	bl	8003210 <__exponent>
 80033ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033cc:	4681      	mov	r9, r0
 80033ce:	1813      	adds	r3, r2, r0
 80033d0:	2a01      	cmp	r2, #1
 80033d2:	6123      	str	r3, [r4, #16]
 80033d4:	dc02      	bgt.n	80033dc <_printf_float+0x158>
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	07d2      	lsls	r2, r2, #31
 80033da:	d501      	bpl.n	80033e0 <_printf_float+0x15c>
 80033dc:	3301      	adds	r3, #1
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d09e      	beq.n	8003326 <_printf_float+0xa2>
 80033e8:	232d      	movs	r3, #45	@ 0x2d
 80033ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ee:	e79a      	b.n	8003326 <_printf_float+0xa2>
 80033f0:	2947      	cmp	r1, #71	@ 0x47
 80033f2:	d1bf      	bne.n	8003374 <_printf_float+0xf0>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1bd      	bne.n	8003374 <_printf_float+0xf0>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e7ba      	b.n	8003372 <_printf_float+0xee>
 80033fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003400:	d9dc      	bls.n	80033bc <_printf_float+0x138>
 8003402:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003406:	d118      	bne.n	800343a <_printf_float+0x1b6>
 8003408:	2900      	cmp	r1, #0
 800340a:	6863      	ldr	r3, [r4, #4]
 800340c:	dd0b      	ble.n	8003426 <_printf_float+0x1a2>
 800340e:	6121      	str	r1, [r4, #16]
 8003410:	b913      	cbnz	r3, 8003418 <_printf_float+0x194>
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	07d0      	lsls	r0, r2, #31
 8003416:	d502      	bpl.n	800341e <_printf_float+0x19a>
 8003418:	3301      	adds	r3, #1
 800341a:	440b      	add	r3, r1
 800341c:	6123      	str	r3, [r4, #16]
 800341e:	f04f 0900 	mov.w	r9, #0
 8003422:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003424:	e7dc      	b.n	80033e0 <_printf_float+0x15c>
 8003426:	b913      	cbnz	r3, 800342e <_printf_float+0x1aa>
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	07d2      	lsls	r2, r2, #31
 800342c:	d501      	bpl.n	8003432 <_printf_float+0x1ae>
 800342e:	3302      	adds	r3, #2
 8003430:	e7f4      	b.n	800341c <_printf_float+0x198>
 8003432:	2301      	movs	r3, #1
 8003434:	e7f2      	b.n	800341c <_printf_float+0x198>
 8003436:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800343a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800343c:	4299      	cmp	r1, r3
 800343e:	db05      	blt.n	800344c <_printf_float+0x1c8>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	6121      	str	r1, [r4, #16]
 8003444:	07d8      	lsls	r0, r3, #31
 8003446:	d5ea      	bpl.n	800341e <_printf_float+0x19a>
 8003448:	1c4b      	adds	r3, r1, #1
 800344a:	e7e7      	b.n	800341c <_printf_float+0x198>
 800344c:	2900      	cmp	r1, #0
 800344e:	bfcc      	ite	gt
 8003450:	2201      	movgt	r2, #1
 8003452:	f1c1 0202 	rsble	r2, r1, #2
 8003456:	4413      	add	r3, r2
 8003458:	e7e0      	b.n	800341c <_printf_float+0x198>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	055a      	lsls	r2, r3, #21
 800345e:	d407      	bmi.n	8003470 <_printf_float+0x1ec>
 8003460:	6923      	ldr	r3, [r4, #16]
 8003462:	4642      	mov	r2, r8
 8003464:	4631      	mov	r1, r6
 8003466:	4628      	mov	r0, r5
 8003468:	47b8      	blx	r7
 800346a:	3001      	adds	r0, #1
 800346c:	d12b      	bne.n	80034c6 <_printf_float+0x242>
 800346e:	e764      	b.n	800333a <_printf_float+0xb6>
 8003470:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003474:	f240 80dc 	bls.w	8003630 <_printf_float+0x3ac>
 8003478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800347c:	2200      	movs	r2, #0
 800347e:	2300      	movs	r3, #0
 8003480:	f7fd fa92 	bl	80009a8 <__aeabi_dcmpeq>
 8003484:	2800      	cmp	r0, #0
 8003486:	d033      	beq.n	80034f0 <_printf_float+0x26c>
 8003488:	2301      	movs	r3, #1
 800348a:	4631      	mov	r1, r6
 800348c:	4628      	mov	r0, r5
 800348e:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <_printf_float+0x2e0>)
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	f43f af51 	beq.w	800333a <_printf_float+0xb6>
 8003498:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800349c:	4543      	cmp	r3, r8
 800349e:	db02      	blt.n	80034a6 <_printf_float+0x222>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	07d8      	lsls	r0, r3, #31
 80034a4:	d50f      	bpl.n	80034c6 <_printf_float+0x242>
 80034a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034aa:	4631      	mov	r1, r6
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b8      	blx	r7
 80034b0:	3001      	adds	r0, #1
 80034b2:	f43f af42 	beq.w	800333a <_printf_float+0xb6>
 80034b6:	f04f 0900 	mov.w	r9, #0
 80034ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80034be:	f104 0a1a 	add.w	sl, r4, #26
 80034c2:	45c8      	cmp	r8, r9
 80034c4:	dc09      	bgt.n	80034da <_printf_float+0x256>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	079b      	lsls	r3, r3, #30
 80034ca:	f100 8102 	bmi.w	80036d2 <_printf_float+0x44e>
 80034ce:	68e0      	ldr	r0, [r4, #12]
 80034d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034d2:	4298      	cmp	r0, r3
 80034d4:	bfb8      	it	lt
 80034d6:	4618      	movlt	r0, r3
 80034d8:	e731      	b.n	800333e <_printf_float+0xba>
 80034da:	2301      	movs	r3, #1
 80034dc:	4652      	mov	r2, sl
 80034de:	4631      	mov	r1, r6
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b8      	blx	r7
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f af28 	beq.w	800333a <_printf_float+0xb6>
 80034ea:	f109 0901 	add.w	r9, r9, #1
 80034ee:	e7e8      	b.n	80034c2 <_printf_float+0x23e>
 80034f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	dc38      	bgt.n	8003568 <_printf_float+0x2e4>
 80034f6:	2301      	movs	r3, #1
 80034f8:	4631      	mov	r1, r6
 80034fa:	4628      	mov	r0, r5
 80034fc:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <_printf_float+0x2e0>)
 80034fe:	47b8      	blx	r7
 8003500:	3001      	adds	r0, #1
 8003502:	f43f af1a 	beq.w	800333a <_printf_float+0xb6>
 8003506:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800350a:	ea59 0303 	orrs.w	r3, r9, r3
 800350e:	d102      	bne.n	8003516 <_printf_float+0x292>
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	07d9      	lsls	r1, r3, #31
 8003514:	d5d7      	bpl.n	80034c6 <_printf_float+0x242>
 8003516:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800351a:	4631      	mov	r1, r6
 800351c:	4628      	mov	r0, r5
 800351e:	47b8      	blx	r7
 8003520:	3001      	adds	r0, #1
 8003522:	f43f af0a 	beq.w	800333a <_printf_float+0xb6>
 8003526:	f04f 0a00 	mov.w	sl, #0
 800352a:	f104 0b1a 	add.w	fp, r4, #26
 800352e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003530:	425b      	negs	r3, r3
 8003532:	4553      	cmp	r3, sl
 8003534:	dc01      	bgt.n	800353a <_printf_float+0x2b6>
 8003536:	464b      	mov	r3, r9
 8003538:	e793      	b.n	8003462 <_printf_float+0x1de>
 800353a:	2301      	movs	r3, #1
 800353c:	465a      	mov	r2, fp
 800353e:	4631      	mov	r1, r6
 8003540:	4628      	mov	r0, r5
 8003542:	47b8      	blx	r7
 8003544:	3001      	adds	r0, #1
 8003546:	f43f aef8 	beq.w	800333a <_printf_float+0xb6>
 800354a:	f10a 0a01 	add.w	sl, sl, #1
 800354e:	e7ee      	b.n	800352e <_printf_float+0x2aa>
 8003550:	7fefffff 	.word	0x7fefffff
 8003554:	0800795e 	.word	0x0800795e
 8003558:	0800795a 	.word	0x0800795a
 800355c:	08007966 	.word	0x08007966
 8003560:	08007962 	.word	0x08007962
 8003564:	0800796a 	.word	0x0800796a
 8003568:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800356a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800356e:	4553      	cmp	r3, sl
 8003570:	bfa8      	it	ge
 8003572:	4653      	movge	r3, sl
 8003574:	2b00      	cmp	r3, #0
 8003576:	4699      	mov	r9, r3
 8003578:	dc36      	bgt.n	80035e8 <_printf_float+0x364>
 800357a:	f04f 0b00 	mov.w	fp, #0
 800357e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003582:	f104 021a 	add.w	r2, r4, #26
 8003586:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003588:	930a      	str	r3, [sp, #40]	@ 0x28
 800358a:	eba3 0309 	sub.w	r3, r3, r9
 800358e:	455b      	cmp	r3, fp
 8003590:	dc31      	bgt.n	80035f6 <_printf_float+0x372>
 8003592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003594:	459a      	cmp	sl, r3
 8003596:	dc3a      	bgt.n	800360e <_printf_float+0x38a>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	07da      	lsls	r2, r3, #31
 800359c:	d437      	bmi.n	800360e <_printf_float+0x38a>
 800359e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035a0:	ebaa 0903 	sub.w	r9, sl, r3
 80035a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035a6:	ebaa 0303 	sub.w	r3, sl, r3
 80035aa:	4599      	cmp	r9, r3
 80035ac:	bfa8      	it	ge
 80035ae:	4699      	movge	r9, r3
 80035b0:	f1b9 0f00 	cmp.w	r9, #0
 80035b4:	dc33      	bgt.n	800361e <_printf_float+0x39a>
 80035b6:	f04f 0800 	mov.w	r8, #0
 80035ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035be:	f104 0b1a 	add.w	fp, r4, #26
 80035c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035c4:	ebaa 0303 	sub.w	r3, sl, r3
 80035c8:	eba3 0309 	sub.w	r3, r3, r9
 80035cc:	4543      	cmp	r3, r8
 80035ce:	f77f af7a 	ble.w	80034c6 <_printf_float+0x242>
 80035d2:	2301      	movs	r3, #1
 80035d4:	465a      	mov	r2, fp
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f aeac 	beq.w	800333a <_printf_float+0xb6>
 80035e2:	f108 0801 	add.w	r8, r8, #1
 80035e6:	e7ec      	b.n	80035c2 <_printf_float+0x33e>
 80035e8:	4642      	mov	r2, r8
 80035ea:	4631      	mov	r1, r6
 80035ec:	4628      	mov	r0, r5
 80035ee:	47b8      	blx	r7
 80035f0:	3001      	adds	r0, #1
 80035f2:	d1c2      	bne.n	800357a <_printf_float+0x2f6>
 80035f4:	e6a1      	b.n	800333a <_printf_float+0xb6>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4631      	mov	r1, r6
 80035fa:	4628      	mov	r0, r5
 80035fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80035fe:	47b8      	blx	r7
 8003600:	3001      	adds	r0, #1
 8003602:	f43f ae9a 	beq.w	800333a <_printf_float+0xb6>
 8003606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003608:	f10b 0b01 	add.w	fp, fp, #1
 800360c:	e7bb      	b.n	8003586 <_printf_float+0x302>
 800360e:	4631      	mov	r1, r6
 8003610:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003614:	4628      	mov	r0, r5
 8003616:	47b8      	blx	r7
 8003618:	3001      	adds	r0, #1
 800361a:	d1c0      	bne.n	800359e <_printf_float+0x31a>
 800361c:	e68d      	b.n	800333a <_printf_float+0xb6>
 800361e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003620:	464b      	mov	r3, r9
 8003622:	4631      	mov	r1, r6
 8003624:	4628      	mov	r0, r5
 8003626:	4442      	add	r2, r8
 8003628:	47b8      	blx	r7
 800362a:	3001      	adds	r0, #1
 800362c:	d1c3      	bne.n	80035b6 <_printf_float+0x332>
 800362e:	e684      	b.n	800333a <_printf_float+0xb6>
 8003630:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003634:	f1ba 0f01 	cmp.w	sl, #1
 8003638:	dc01      	bgt.n	800363e <_printf_float+0x3ba>
 800363a:	07db      	lsls	r3, r3, #31
 800363c:	d536      	bpl.n	80036ac <_printf_float+0x428>
 800363e:	2301      	movs	r3, #1
 8003640:	4642      	mov	r2, r8
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae76 	beq.w	800333a <_printf_float+0xb6>
 800364e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003652:	4631      	mov	r1, r6
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	f43f ae6e 	beq.w	800333a <_printf_float+0xb6>
 800365e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003662:	2200      	movs	r2, #0
 8003664:	2300      	movs	r3, #0
 8003666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800366a:	f7fd f99d 	bl	80009a8 <__aeabi_dcmpeq>
 800366e:	b9c0      	cbnz	r0, 80036a2 <_printf_float+0x41e>
 8003670:	4653      	mov	r3, sl
 8003672:	f108 0201 	add.w	r2, r8, #1
 8003676:	4631      	mov	r1, r6
 8003678:	4628      	mov	r0, r5
 800367a:	47b8      	blx	r7
 800367c:	3001      	adds	r0, #1
 800367e:	d10c      	bne.n	800369a <_printf_float+0x416>
 8003680:	e65b      	b.n	800333a <_printf_float+0xb6>
 8003682:	2301      	movs	r3, #1
 8003684:	465a      	mov	r2, fp
 8003686:	4631      	mov	r1, r6
 8003688:	4628      	mov	r0, r5
 800368a:	47b8      	blx	r7
 800368c:	3001      	adds	r0, #1
 800368e:	f43f ae54 	beq.w	800333a <_printf_float+0xb6>
 8003692:	f108 0801 	add.w	r8, r8, #1
 8003696:	45d0      	cmp	r8, sl
 8003698:	dbf3      	blt.n	8003682 <_printf_float+0x3fe>
 800369a:	464b      	mov	r3, r9
 800369c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80036a0:	e6e0      	b.n	8003464 <_printf_float+0x1e0>
 80036a2:	f04f 0800 	mov.w	r8, #0
 80036a6:	f104 0b1a 	add.w	fp, r4, #26
 80036aa:	e7f4      	b.n	8003696 <_printf_float+0x412>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4642      	mov	r2, r8
 80036b0:	e7e1      	b.n	8003676 <_printf_float+0x3f2>
 80036b2:	2301      	movs	r3, #1
 80036b4:	464a      	mov	r2, r9
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	f43f ae3c 	beq.w	800333a <_printf_float+0xb6>
 80036c2:	f108 0801 	add.w	r8, r8, #1
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80036ca:	1a5b      	subs	r3, r3, r1
 80036cc:	4543      	cmp	r3, r8
 80036ce:	dcf0      	bgt.n	80036b2 <_printf_float+0x42e>
 80036d0:	e6fd      	b.n	80034ce <_printf_float+0x24a>
 80036d2:	f04f 0800 	mov.w	r8, #0
 80036d6:	f104 0919 	add.w	r9, r4, #25
 80036da:	e7f4      	b.n	80036c6 <_printf_float+0x442>

080036dc <_printf_common>:
 80036dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e0:	4616      	mov	r6, r2
 80036e2:	4698      	mov	r8, r3
 80036e4:	688a      	ldr	r2, [r1, #8]
 80036e6:	690b      	ldr	r3, [r1, #16]
 80036e8:	4607      	mov	r7, r0
 80036ea:	4293      	cmp	r3, r2
 80036ec:	bfb8      	it	lt
 80036ee:	4613      	movlt	r3, r2
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036f6:	460c      	mov	r4, r1
 80036f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036fc:	b10a      	cbz	r2, 8003702 <_printf_common+0x26>
 80036fe:	3301      	adds	r3, #1
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	0699      	lsls	r1, r3, #26
 8003706:	bf42      	ittt	mi
 8003708:	6833      	ldrmi	r3, [r6, #0]
 800370a:	3302      	addmi	r3, #2
 800370c:	6033      	strmi	r3, [r6, #0]
 800370e:	6825      	ldr	r5, [r4, #0]
 8003710:	f015 0506 	ands.w	r5, r5, #6
 8003714:	d106      	bne.n	8003724 <_printf_common+0x48>
 8003716:	f104 0a19 	add.w	sl, r4, #25
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	6832      	ldr	r2, [r6, #0]
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	42ab      	cmp	r3, r5
 8003722:	dc2b      	bgt.n	800377c <_printf_common+0xa0>
 8003724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003728:	6822      	ldr	r2, [r4, #0]
 800372a:	3b00      	subs	r3, #0
 800372c:	bf18      	it	ne
 800372e:	2301      	movne	r3, #1
 8003730:	0692      	lsls	r2, r2, #26
 8003732:	d430      	bmi.n	8003796 <_printf_common+0xba>
 8003734:	4641      	mov	r1, r8
 8003736:	4638      	mov	r0, r7
 8003738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800373c:	47c8      	blx	r9
 800373e:	3001      	adds	r0, #1
 8003740:	d023      	beq.n	800378a <_printf_common+0xae>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	6922      	ldr	r2, [r4, #16]
 8003746:	f003 0306 	and.w	r3, r3, #6
 800374a:	2b04      	cmp	r3, #4
 800374c:	bf14      	ite	ne
 800374e:	2500      	movne	r5, #0
 8003750:	6833      	ldreq	r3, [r6, #0]
 8003752:	f04f 0600 	mov.w	r6, #0
 8003756:	bf08      	it	eq
 8003758:	68e5      	ldreq	r5, [r4, #12]
 800375a:	f104 041a 	add.w	r4, r4, #26
 800375e:	bf08      	it	eq
 8003760:	1aed      	subeq	r5, r5, r3
 8003762:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003766:	bf08      	it	eq
 8003768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800376c:	4293      	cmp	r3, r2
 800376e:	bfc4      	itt	gt
 8003770:	1a9b      	subgt	r3, r3, r2
 8003772:	18ed      	addgt	r5, r5, r3
 8003774:	42b5      	cmp	r5, r6
 8003776:	d11a      	bne.n	80037ae <_printf_common+0xd2>
 8003778:	2000      	movs	r0, #0
 800377a:	e008      	b.n	800378e <_printf_common+0xb2>
 800377c:	2301      	movs	r3, #1
 800377e:	4652      	mov	r2, sl
 8003780:	4641      	mov	r1, r8
 8003782:	4638      	mov	r0, r7
 8003784:	47c8      	blx	r9
 8003786:	3001      	adds	r0, #1
 8003788:	d103      	bne.n	8003792 <_printf_common+0xb6>
 800378a:	f04f 30ff 	mov.w	r0, #4294967295
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003792:	3501      	adds	r5, #1
 8003794:	e7c1      	b.n	800371a <_printf_common+0x3e>
 8003796:	2030      	movs	r0, #48	@ 0x30
 8003798:	18e1      	adds	r1, r4, r3
 800379a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037a4:	4422      	add	r2, r4
 80037a6:	3302      	adds	r3, #2
 80037a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037ac:	e7c2      	b.n	8003734 <_printf_common+0x58>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4622      	mov	r2, r4
 80037b2:	4641      	mov	r1, r8
 80037b4:	4638      	mov	r0, r7
 80037b6:	47c8      	blx	r9
 80037b8:	3001      	adds	r0, #1
 80037ba:	d0e6      	beq.n	800378a <_printf_common+0xae>
 80037bc:	3601      	adds	r6, #1
 80037be:	e7d9      	b.n	8003774 <_printf_common+0x98>

080037c0 <_printf_i>:
 80037c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c4:	7e0f      	ldrb	r7, [r1, #24]
 80037c6:	4691      	mov	r9, r2
 80037c8:	2f78      	cmp	r7, #120	@ 0x78
 80037ca:	4680      	mov	r8, r0
 80037cc:	460c      	mov	r4, r1
 80037ce:	469a      	mov	sl, r3
 80037d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037d6:	d807      	bhi.n	80037e8 <_printf_i+0x28>
 80037d8:	2f62      	cmp	r7, #98	@ 0x62
 80037da:	d80a      	bhi.n	80037f2 <_printf_i+0x32>
 80037dc:	2f00      	cmp	r7, #0
 80037de:	f000 80d1 	beq.w	8003984 <_printf_i+0x1c4>
 80037e2:	2f58      	cmp	r7, #88	@ 0x58
 80037e4:	f000 80b8 	beq.w	8003958 <_printf_i+0x198>
 80037e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037f0:	e03a      	b.n	8003868 <_printf_i+0xa8>
 80037f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037f6:	2b15      	cmp	r3, #21
 80037f8:	d8f6      	bhi.n	80037e8 <_printf_i+0x28>
 80037fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003800 <_printf_i+0x40>)
 80037fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003800:	08003859 	.word	0x08003859
 8003804:	0800386d 	.word	0x0800386d
 8003808:	080037e9 	.word	0x080037e9
 800380c:	080037e9 	.word	0x080037e9
 8003810:	080037e9 	.word	0x080037e9
 8003814:	080037e9 	.word	0x080037e9
 8003818:	0800386d 	.word	0x0800386d
 800381c:	080037e9 	.word	0x080037e9
 8003820:	080037e9 	.word	0x080037e9
 8003824:	080037e9 	.word	0x080037e9
 8003828:	080037e9 	.word	0x080037e9
 800382c:	0800396b 	.word	0x0800396b
 8003830:	08003897 	.word	0x08003897
 8003834:	08003925 	.word	0x08003925
 8003838:	080037e9 	.word	0x080037e9
 800383c:	080037e9 	.word	0x080037e9
 8003840:	0800398d 	.word	0x0800398d
 8003844:	080037e9 	.word	0x080037e9
 8003848:	08003897 	.word	0x08003897
 800384c:	080037e9 	.word	0x080037e9
 8003850:	080037e9 	.word	0x080037e9
 8003854:	0800392d 	.word	0x0800392d
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6032      	str	r2, [r6, #0]
 8003860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003864:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003868:	2301      	movs	r3, #1
 800386a:	e09c      	b.n	80039a6 <_printf_i+0x1e6>
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	1d19      	adds	r1, r3, #4
 8003872:	6031      	str	r1, [r6, #0]
 8003874:	0606      	lsls	r6, r0, #24
 8003876:	d501      	bpl.n	800387c <_printf_i+0xbc>
 8003878:	681d      	ldr	r5, [r3, #0]
 800387a:	e003      	b.n	8003884 <_printf_i+0xc4>
 800387c:	0645      	lsls	r5, r0, #25
 800387e:	d5fb      	bpl.n	8003878 <_printf_i+0xb8>
 8003880:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003884:	2d00      	cmp	r5, #0
 8003886:	da03      	bge.n	8003890 <_printf_i+0xd0>
 8003888:	232d      	movs	r3, #45	@ 0x2d
 800388a:	426d      	negs	r5, r5
 800388c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003890:	230a      	movs	r3, #10
 8003892:	4858      	ldr	r0, [pc, #352]	@ (80039f4 <_printf_i+0x234>)
 8003894:	e011      	b.n	80038ba <_printf_i+0xfa>
 8003896:	6821      	ldr	r1, [r4, #0]
 8003898:	6833      	ldr	r3, [r6, #0]
 800389a:	0608      	lsls	r0, r1, #24
 800389c:	f853 5b04 	ldr.w	r5, [r3], #4
 80038a0:	d402      	bmi.n	80038a8 <_printf_i+0xe8>
 80038a2:	0649      	lsls	r1, r1, #25
 80038a4:	bf48      	it	mi
 80038a6:	b2ad      	uxthmi	r5, r5
 80038a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	bf14      	ite	ne
 80038ae:	230a      	movne	r3, #10
 80038b0:	2308      	moveq	r3, #8
 80038b2:	4850      	ldr	r0, [pc, #320]	@ (80039f4 <_printf_i+0x234>)
 80038b4:	2100      	movs	r1, #0
 80038b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038ba:	6866      	ldr	r6, [r4, #4]
 80038bc:	2e00      	cmp	r6, #0
 80038be:	60a6      	str	r6, [r4, #8]
 80038c0:	db05      	blt.n	80038ce <_printf_i+0x10e>
 80038c2:	6821      	ldr	r1, [r4, #0]
 80038c4:	432e      	orrs	r6, r5
 80038c6:	f021 0104 	bic.w	r1, r1, #4
 80038ca:	6021      	str	r1, [r4, #0]
 80038cc:	d04b      	beq.n	8003966 <_printf_i+0x1a6>
 80038ce:	4616      	mov	r6, r2
 80038d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80038d4:	fb03 5711 	mls	r7, r3, r1, r5
 80038d8:	5dc7      	ldrb	r7, [r0, r7]
 80038da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038de:	462f      	mov	r7, r5
 80038e0:	42bb      	cmp	r3, r7
 80038e2:	460d      	mov	r5, r1
 80038e4:	d9f4      	bls.n	80038d0 <_printf_i+0x110>
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d10b      	bne.n	8003902 <_printf_i+0x142>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	07df      	lsls	r7, r3, #31
 80038ee:	d508      	bpl.n	8003902 <_printf_i+0x142>
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	6861      	ldr	r1, [r4, #4]
 80038f4:	4299      	cmp	r1, r3
 80038f6:	bfde      	ittt	le
 80038f8:	2330      	movle	r3, #48	@ 0x30
 80038fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003902:	1b92      	subs	r2, r2, r6
 8003904:	6122      	str	r2, [r4, #16]
 8003906:	464b      	mov	r3, r9
 8003908:	4621      	mov	r1, r4
 800390a:	4640      	mov	r0, r8
 800390c:	f8cd a000 	str.w	sl, [sp]
 8003910:	aa03      	add	r2, sp, #12
 8003912:	f7ff fee3 	bl	80036dc <_printf_common>
 8003916:	3001      	adds	r0, #1
 8003918:	d14a      	bne.n	80039b0 <_printf_i+0x1f0>
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	b004      	add	sp, #16
 8003920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f043 0320 	orr.w	r3, r3, #32
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	2778      	movs	r7, #120	@ 0x78
 800392e:	4832      	ldr	r0, [pc, #200]	@ (80039f8 <_printf_i+0x238>)
 8003930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	6831      	ldr	r1, [r6, #0]
 8003938:	061f      	lsls	r7, r3, #24
 800393a:	f851 5b04 	ldr.w	r5, [r1], #4
 800393e:	d402      	bmi.n	8003946 <_printf_i+0x186>
 8003940:	065f      	lsls	r7, r3, #25
 8003942:	bf48      	it	mi
 8003944:	b2ad      	uxthmi	r5, r5
 8003946:	6031      	str	r1, [r6, #0]
 8003948:	07d9      	lsls	r1, r3, #31
 800394a:	bf44      	itt	mi
 800394c:	f043 0320 	orrmi.w	r3, r3, #32
 8003950:	6023      	strmi	r3, [r4, #0]
 8003952:	b11d      	cbz	r5, 800395c <_printf_i+0x19c>
 8003954:	2310      	movs	r3, #16
 8003956:	e7ad      	b.n	80038b4 <_printf_i+0xf4>
 8003958:	4826      	ldr	r0, [pc, #152]	@ (80039f4 <_printf_i+0x234>)
 800395a:	e7e9      	b.n	8003930 <_printf_i+0x170>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	f023 0320 	bic.w	r3, r3, #32
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	e7f6      	b.n	8003954 <_printf_i+0x194>
 8003966:	4616      	mov	r6, r2
 8003968:	e7bd      	b.n	80038e6 <_printf_i+0x126>
 800396a:	6833      	ldr	r3, [r6, #0]
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	6961      	ldr	r1, [r4, #20]
 8003972:	6030      	str	r0, [r6, #0]
 8003974:	062e      	lsls	r6, r5, #24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	d501      	bpl.n	800397e <_printf_i+0x1be>
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	e002      	b.n	8003984 <_printf_i+0x1c4>
 800397e:	0668      	lsls	r0, r5, #25
 8003980:	d5fb      	bpl.n	800397a <_printf_i+0x1ba>
 8003982:	8019      	strh	r1, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	4616      	mov	r6, r2
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	e7bc      	b.n	8003906 <_printf_i+0x146>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	1d1a      	adds	r2, r3, #4
 8003992:	6032      	str	r2, [r6, #0]
 8003994:	681e      	ldr	r6, [r3, #0]
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	4630      	mov	r0, r6
 800399a:	f000 fbe0 	bl	800415e <memchr>
 800399e:	b108      	cbz	r0, 80039a4 <_printf_i+0x1e4>
 80039a0:	1b80      	subs	r0, r0, r6
 80039a2:	6060      	str	r0, [r4, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039ae:	e7aa      	b.n	8003906 <_printf_i+0x146>
 80039b0:	4632      	mov	r2, r6
 80039b2:	4649      	mov	r1, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	47d0      	blx	sl
 80039ba:	3001      	adds	r0, #1
 80039bc:	d0ad      	beq.n	800391a <_printf_i+0x15a>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	079b      	lsls	r3, r3, #30
 80039c2:	d413      	bmi.n	80039ec <_printf_i+0x22c>
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	4298      	cmp	r0, r3
 80039ca:	bfb8      	it	lt
 80039cc:	4618      	movlt	r0, r3
 80039ce:	e7a6      	b.n	800391e <_printf_i+0x15e>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4632      	mov	r2, r6
 80039d4:	4649      	mov	r1, r9
 80039d6:	4640      	mov	r0, r8
 80039d8:	47d0      	blx	sl
 80039da:	3001      	adds	r0, #1
 80039dc:	d09d      	beq.n	800391a <_printf_i+0x15a>
 80039de:	3501      	adds	r5, #1
 80039e0:	68e3      	ldr	r3, [r4, #12]
 80039e2:	9903      	ldr	r1, [sp, #12]
 80039e4:	1a5b      	subs	r3, r3, r1
 80039e6:	42ab      	cmp	r3, r5
 80039e8:	dcf2      	bgt.n	80039d0 <_printf_i+0x210>
 80039ea:	e7eb      	b.n	80039c4 <_printf_i+0x204>
 80039ec:	2500      	movs	r5, #0
 80039ee:	f104 0619 	add.w	r6, r4, #25
 80039f2:	e7f5      	b.n	80039e0 <_printf_i+0x220>
 80039f4:	0800796c 	.word	0x0800796c
 80039f8:	0800797d 	.word	0x0800797d

080039fc <_scanf_float>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	b087      	sub	sp, #28
 8003a02:	9303      	str	r3, [sp, #12]
 8003a04:	688b      	ldr	r3, [r1, #8]
 8003a06:	4691      	mov	r9, r2
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003a0e:	bf82      	ittt	hi
 8003a10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003a14:	eb03 0b05 	addhi.w	fp, r3, r5
 8003a18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	f04f 0500 	mov.w	r5, #0
 8003a22:	bf88      	it	hi
 8003a24:	608b      	strhi	r3, [r1, #8]
 8003a26:	680b      	ldr	r3, [r1, #0]
 8003a28:	4680      	mov	r8, r0
 8003a2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003a2e:	f842 3b1c 	str.w	r3, [r2], #28
 8003a32:	460c      	mov	r4, r1
 8003a34:	bf98      	it	ls
 8003a36:	f04f 0b00 	movls.w	fp, #0
 8003a3a:	4616      	mov	r6, r2
 8003a3c:	46aa      	mov	sl, r5
 8003a3e:	462f      	mov	r7, r5
 8003a40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9502      	str	r5, [sp, #8]
 8003a48:	68a2      	ldr	r2, [r4, #8]
 8003a4a:	b15a      	cbz	r2, 8003a64 <_scanf_float+0x68>
 8003a4c:	f8d9 3000 	ldr.w	r3, [r9]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a54:	d862      	bhi.n	8003b1c <_scanf_float+0x120>
 8003a56:	2b40      	cmp	r3, #64	@ 0x40
 8003a58:	d83a      	bhi.n	8003ad0 <_scanf_float+0xd4>
 8003a5a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003a5e:	b2c8      	uxtb	r0, r1
 8003a60:	280e      	cmp	r0, #14
 8003a62:	d938      	bls.n	8003ad6 <_scanf_float+0xda>
 8003a64:	b11f      	cbz	r7, 8003a6e <_scanf_float+0x72>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a72:	f1ba 0f01 	cmp.w	sl, #1
 8003a76:	f200 8114 	bhi.w	8003ca2 <_scanf_float+0x2a6>
 8003a7a:	9b01      	ldr	r3, [sp, #4]
 8003a7c:	429e      	cmp	r6, r3
 8003a7e:	f200 8105 	bhi.w	8003c8c <_scanf_float+0x290>
 8003a82:	2001      	movs	r0, #1
 8003a84:	b007      	add	sp, #28
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003a8e:	2a0d      	cmp	r2, #13
 8003a90:	d8e8      	bhi.n	8003a64 <_scanf_float+0x68>
 8003a92:	a101      	add	r1, pc, #4	@ (adr r1, 8003a98 <_scanf_float+0x9c>)
 8003a94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a98:	08003be1 	.word	0x08003be1
 8003a9c:	08003a65 	.word	0x08003a65
 8003aa0:	08003a65 	.word	0x08003a65
 8003aa4:	08003a65 	.word	0x08003a65
 8003aa8:	08003c3d 	.word	0x08003c3d
 8003aac:	08003c17 	.word	0x08003c17
 8003ab0:	08003a65 	.word	0x08003a65
 8003ab4:	08003a65 	.word	0x08003a65
 8003ab8:	08003bef 	.word	0x08003bef
 8003abc:	08003a65 	.word	0x08003a65
 8003ac0:	08003a65 	.word	0x08003a65
 8003ac4:	08003a65 	.word	0x08003a65
 8003ac8:	08003a65 	.word	0x08003a65
 8003acc:	08003bab 	.word	0x08003bab
 8003ad0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003ad4:	e7db      	b.n	8003a8e <_scanf_float+0x92>
 8003ad6:	290e      	cmp	r1, #14
 8003ad8:	d8c4      	bhi.n	8003a64 <_scanf_float+0x68>
 8003ada:	a001      	add	r0, pc, #4	@ (adr r0, 8003ae0 <_scanf_float+0xe4>)
 8003adc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003ae0:	08003b9b 	.word	0x08003b9b
 8003ae4:	08003a65 	.word	0x08003a65
 8003ae8:	08003b9b 	.word	0x08003b9b
 8003aec:	08003c2b 	.word	0x08003c2b
 8003af0:	08003a65 	.word	0x08003a65
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b81 	.word	0x08003b81
 8003afc:	08003b81 	.word	0x08003b81
 8003b00:	08003b81 	.word	0x08003b81
 8003b04:	08003b81 	.word	0x08003b81
 8003b08:	08003b81 	.word	0x08003b81
 8003b0c:	08003b81 	.word	0x08003b81
 8003b10:	08003b81 	.word	0x08003b81
 8003b14:	08003b81 	.word	0x08003b81
 8003b18:	08003b81 	.word	0x08003b81
 8003b1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8003b1e:	d809      	bhi.n	8003b34 <_scanf_float+0x138>
 8003b20:	2b60      	cmp	r3, #96	@ 0x60
 8003b22:	d8b2      	bhi.n	8003a8a <_scanf_float+0x8e>
 8003b24:	2b54      	cmp	r3, #84	@ 0x54
 8003b26:	d07b      	beq.n	8003c20 <_scanf_float+0x224>
 8003b28:	2b59      	cmp	r3, #89	@ 0x59
 8003b2a:	d19b      	bne.n	8003a64 <_scanf_float+0x68>
 8003b2c:	2d07      	cmp	r5, #7
 8003b2e:	d199      	bne.n	8003a64 <_scanf_float+0x68>
 8003b30:	2508      	movs	r5, #8
 8003b32:	e02f      	b.n	8003b94 <_scanf_float+0x198>
 8003b34:	2b74      	cmp	r3, #116	@ 0x74
 8003b36:	d073      	beq.n	8003c20 <_scanf_float+0x224>
 8003b38:	2b79      	cmp	r3, #121	@ 0x79
 8003b3a:	e7f6      	b.n	8003b2a <_scanf_float+0x12e>
 8003b3c:	6821      	ldr	r1, [r4, #0]
 8003b3e:	05c8      	lsls	r0, r1, #23
 8003b40:	d51e      	bpl.n	8003b80 <_scanf_float+0x184>
 8003b42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003b46:	6021      	str	r1, [r4, #0]
 8003b48:	3701      	adds	r7, #1
 8003b4a:	f1bb 0f00 	cmp.w	fp, #0
 8003b4e:	d003      	beq.n	8003b58 <_scanf_float+0x15c>
 8003b50:	3201      	adds	r2, #1
 8003b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b56:	60a2      	str	r2, [r4, #8]
 8003b58:	68a3      	ldr	r3, [r4, #8]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	3301      	adds	r3, #1
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8003b70:	f340 8083 	ble.w	8003c7a <_scanf_float+0x27e>
 8003b74:	f8d9 3000 	ldr.w	r3, [r9]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f8c9 3000 	str.w	r3, [r9]
 8003b7e:	e763      	b.n	8003a48 <_scanf_float+0x4c>
 8003b80:	eb1a 0105 	adds.w	r1, sl, r5
 8003b84:	f47f af6e 	bne.w	8003a64 <_scanf_float+0x68>
 8003b88:	460d      	mov	r5, r1
 8003b8a:	468a      	mov	sl, r1
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003b92:	6022      	str	r2, [r4, #0]
 8003b94:	f806 3b01 	strb.w	r3, [r6], #1
 8003b98:	e7de      	b.n	8003b58 <_scanf_float+0x15c>
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	0610      	lsls	r0, r2, #24
 8003b9e:	f57f af61 	bpl.w	8003a64 <_scanf_float+0x68>
 8003ba2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	e7f4      	b.n	8003b94 <_scanf_float+0x198>
 8003baa:	f1ba 0f00 	cmp.w	sl, #0
 8003bae:	d10c      	bne.n	8003bca <_scanf_float+0x1ce>
 8003bb0:	b977      	cbnz	r7, 8003bd0 <_scanf_float+0x1d4>
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003bb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003bbc:	d108      	bne.n	8003bd0 <_scanf_float+0x1d4>
 8003bbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003bc2:	f04f 0a01 	mov.w	sl, #1
 8003bc6:	6022      	str	r2, [r4, #0]
 8003bc8:	e7e4      	b.n	8003b94 <_scanf_float+0x198>
 8003bca:	f1ba 0f02 	cmp.w	sl, #2
 8003bce:	d051      	beq.n	8003c74 <_scanf_float+0x278>
 8003bd0:	2d01      	cmp	r5, #1
 8003bd2:	d002      	beq.n	8003bda <_scanf_float+0x1de>
 8003bd4:	2d04      	cmp	r5, #4
 8003bd6:	f47f af45 	bne.w	8003a64 <_scanf_float+0x68>
 8003bda:	3501      	adds	r5, #1
 8003bdc:	b2ed      	uxtb	r5, r5
 8003bde:	e7d9      	b.n	8003b94 <_scanf_float+0x198>
 8003be0:	f1ba 0f01 	cmp.w	sl, #1
 8003be4:	f47f af3e 	bne.w	8003a64 <_scanf_float+0x68>
 8003be8:	f04f 0a02 	mov.w	sl, #2
 8003bec:	e7d2      	b.n	8003b94 <_scanf_float+0x198>
 8003bee:	b975      	cbnz	r5, 8003c0e <_scanf_float+0x212>
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	f47f af38 	bne.w	8003a66 <_scanf_float+0x6a>
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003bfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c00:	f040 80ff 	bne.w	8003e02 <_scanf_float+0x406>
 8003c04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c08:	2501      	movs	r5, #1
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	e7c2      	b.n	8003b94 <_scanf_float+0x198>
 8003c0e:	2d03      	cmp	r5, #3
 8003c10:	d0e3      	beq.n	8003bda <_scanf_float+0x1de>
 8003c12:	2d05      	cmp	r5, #5
 8003c14:	e7df      	b.n	8003bd6 <_scanf_float+0x1da>
 8003c16:	2d02      	cmp	r5, #2
 8003c18:	f47f af24 	bne.w	8003a64 <_scanf_float+0x68>
 8003c1c:	2503      	movs	r5, #3
 8003c1e:	e7b9      	b.n	8003b94 <_scanf_float+0x198>
 8003c20:	2d06      	cmp	r5, #6
 8003c22:	f47f af1f 	bne.w	8003a64 <_scanf_float+0x68>
 8003c26:	2507      	movs	r5, #7
 8003c28:	e7b4      	b.n	8003b94 <_scanf_float+0x198>
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	0591      	lsls	r1, r2, #22
 8003c2e:	f57f af19 	bpl.w	8003a64 <_scanf_float+0x68>
 8003c32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003c36:	6022      	str	r2, [r4, #0]
 8003c38:	9702      	str	r7, [sp, #8]
 8003c3a:	e7ab      	b.n	8003b94 <_scanf_float+0x198>
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003c42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003c46:	d005      	beq.n	8003c54 <_scanf_float+0x258>
 8003c48:	0550      	lsls	r0, r2, #21
 8003c4a:	f57f af0b 	bpl.w	8003a64 <_scanf_float+0x68>
 8003c4e:	2f00      	cmp	r7, #0
 8003c50:	f000 80d7 	beq.w	8003e02 <_scanf_float+0x406>
 8003c54:	0591      	lsls	r1, r2, #22
 8003c56:	bf58      	it	pl
 8003c58:	9902      	ldrpl	r1, [sp, #8]
 8003c5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c5e:	bf58      	it	pl
 8003c60:	1a79      	subpl	r1, r7, r1
 8003c62:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003c66:	f04f 0700 	mov.w	r7, #0
 8003c6a:	bf58      	it	pl
 8003c6c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c70:	6022      	str	r2, [r4, #0]
 8003c72:	e78f      	b.n	8003b94 <_scanf_float+0x198>
 8003c74:	f04f 0a03 	mov.w	sl, #3
 8003c78:	e78c      	b.n	8003b94 <_scanf_float+0x198>
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003c82:	4798      	blx	r3
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f43f aedf 	beq.w	8003a48 <_scanf_float+0x4c>
 8003c8a:	e6eb      	b.n	8003a64 <_scanf_float+0x68>
 8003c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c90:	464a      	mov	r2, r9
 8003c92:	4640      	mov	r0, r8
 8003c94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c98:	4798      	blx	r3
 8003c9a:	6923      	ldr	r3, [r4, #16]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	6123      	str	r3, [r4, #16]
 8003ca0:	e6eb      	b.n	8003a7a <_scanf_float+0x7e>
 8003ca2:	1e6b      	subs	r3, r5, #1
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d824      	bhi.n	8003cf2 <_scanf_float+0x2f6>
 8003ca8:	2d02      	cmp	r5, #2
 8003caa:	d836      	bhi.n	8003d1a <_scanf_float+0x31e>
 8003cac:	9b01      	ldr	r3, [sp, #4]
 8003cae:	429e      	cmp	r6, r3
 8003cb0:	f67f aee7 	bls.w	8003a82 <_scanf_float+0x86>
 8003cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cb8:	464a      	mov	r2, r9
 8003cba:	4640      	mov	r0, r8
 8003cbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cc0:	4798      	blx	r3
 8003cc2:	6923      	ldr	r3, [r4, #16]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	e7f0      	b.n	8003cac <_scanf_float+0x2b0>
 8003cca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cce:	464a      	mov	r2, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003cd6:	4798      	blx	r3
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	6123      	str	r3, [r4, #16]
 8003cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ce2:	fa5f fa8a 	uxtb.w	sl, sl
 8003ce6:	f1ba 0f02 	cmp.w	sl, #2
 8003cea:	d1ee      	bne.n	8003cca <_scanf_float+0x2ce>
 8003cec:	3d03      	subs	r5, #3
 8003cee:	b2ed      	uxtb	r5, r5
 8003cf0:	1b76      	subs	r6, r6, r5
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	05da      	lsls	r2, r3, #23
 8003cf6:	d530      	bpl.n	8003d5a <_scanf_float+0x35e>
 8003cf8:	055b      	lsls	r3, r3, #21
 8003cfa:	d511      	bpl.n	8003d20 <_scanf_float+0x324>
 8003cfc:	9b01      	ldr	r3, [sp, #4]
 8003cfe:	429e      	cmp	r6, r3
 8003d00:	f67f aebf 	bls.w	8003a82 <_scanf_float+0x86>
 8003d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d08:	464a      	mov	r2, r9
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d10:	4798      	blx	r3
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	6123      	str	r3, [r4, #16]
 8003d18:	e7f0      	b.n	8003cfc <_scanf_float+0x300>
 8003d1a:	46aa      	mov	sl, r5
 8003d1c:	46b3      	mov	fp, r6
 8003d1e:	e7de      	b.n	8003cde <_scanf_float+0x2e2>
 8003d20:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	2965      	cmp	r1, #101	@ 0x65
 8003d28:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d2c:	f106 35ff 	add.w	r5, r6, #4294967295
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	d00c      	beq.n	8003d4e <_scanf_float+0x352>
 8003d34:	2945      	cmp	r1, #69	@ 0x45
 8003d36:	d00a      	beq.n	8003d4e <_scanf_float+0x352>
 8003d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d3c:	464a      	mov	r2, r9
 8003d3e:	4640      	mov	r0, r8
 8003d40:	4798      	blx	r3
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	1eb5      	subs	r5, r6, #2
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	464a      	mov	r2, r9
 8003d50:	4640      	mov	r0, r8
 8003d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d56:	4798      	blx	r3
 8003d58:	462e      	mov	r6, r5
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	f012 0210 	ands.w	r2, r2, #16
 8003d60:	d001      	beq.n	8003d66 <_scanf_float+0x36a>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e68e      	b.n	8003a84 <_scanf_float+0x88>
 8003d66:	7032      	strb	r2, [r6, #0]
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d72:	d125      	bne.n	8003dc0 <_scanf_float+0x3c4>
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	429f      	cmp	r7, r3
 8003d78:	d00a      	beq.n	8003d90 <_scanf_float+0x394>
 8003d7a:	1bda      	subs	r2, r3, r7
 8003d7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003d80:	429e      	cmp	r6, r3
 8003d82:	bf28      	it	cs
 8003d84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003d88:	4630      	mov	r0, r6
 8003d8a:	491f      	ldr	r1, [pc, #124]	@ (8003e08 <_scanf_float+0x40c>)
 8003d8c:	f000 f902 	bl	8003f94 <siprintf>
 8003d90:	2200      	movs	r2, #0
 8003d92:	4640      	mov	r0, r8
 8003d94:	9901      	ldr	r1, [sp, #4]
 8003d96:	f002 fbeb 	bl	8006570 <_strtod_r>
 8003d9a:	9b03      	ldr	r3, [sp, #12]
 8003d9c:	6825      	ldr	r5, [r4, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f015 0f02 	tst.w	r5, #2
 8003da4:	4606      	mov	r6, r0
 8003da6:	460f      	mov	r7, r1
 8003da8:	f103 0204 	add.w	r2, r3, #4
 8003dac:	d015      	beq.n	8003dda <_scanf_float+0x3de>
 8003dae:	9903      	ldr	r1, [sp, #12]
 8003db0:	600a      	str	r2, [r1, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e9c3 6700 	strd	r6, r7, [r3]
 8003db8:	68e3      	ldr	r3, [r4, #12]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60e3      	str	r3, [r4, #12]
 8003dbe:	e7d0      	b.n	8003d62 <_scanf_float+0x366>
 8003dc0:	9b04      	ldr	r3, [sp, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0e4      	beq.n	8003d90 <_scanf_float+0x394>
 8003dc6:	9905      	ldr	r1, [sp, #20]
 8003dc8:	230a      	movs	r3, #10
 8003dca:	4640      	mov	r0, r8
 8003dcc:	3101      	adds	r1, #1
 8003dce:	f002 fc4f 	bl	8006670 <_strtol_r>
 8003dd2:	9b04      	ldr	r3, [sp, #16]
 8003dd4:	9e05      	ldr	r6, [sp, #20]
 8003dd6:	1ac2      	subs	r2, r0, r3
 8003dd8:	e7d0      	b.n	8003d7c <_scanf_float+0x380>
 8003dda:	076d      	lsls	r5, r5, #29
 8003ddc:	d4e7      	bmi.n	8003dae <_scanf_float+0x3b2>
 8003dde:	9d03      	ldr	r5, [sp, #12]
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	681d      	ldr	r5, [r3, #0]
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	f7fc fe10 	bl	8000a0c <__aeabi_dcmpun>
 8003dec:	b120      	cbz	r0, 8003df8 <_scanf_float+0x3fc>
 8003dee:	4807      	ldr	r0, [pc, #28]	@ (8003e0c <_scanf_float+0x410>)
 8003df0:	f000 f9c4 	bl	800417c <nanf>
 8003df4:	6028      	str	r0, [r5, #0]
 8003df6:	e7df      	b.n	8003db8 <_scanf_float+0x3bc>
 8003df8:	4630      	mov	r0, r6
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f7fc fe64 	bl	8000ac8 <__aeabi_d2f>
 8003e00:	e7f8      	b.n	8003df4 <_scanf_float+0x3f8>
 8003e02:	2700      	movs	r7, #0
 8003e04:	e633      	b.n	8003a6e <_scanf_float+0x72>
 8003e06:	bf00      	nop
 8003e08:	0800798e 	.word	0x0800798e
 8003e0c:	08007acf 	.word	0x08007acf

08003e10 <std>:
 8003e10:	2300      	movs	r3, #0
 8003e12:	b510      	push	{r4, lr}
 8003e14:	4604      	mov	r4, r0
 8003e16:	e9c0 3300 	strd	r3, r3, [r0]
 8003e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e1e:	6083      	str	r3, [r0, #8]
 8003e20:	8181      	strh	r1, [r0, #12]
 8003e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e24:	81c2      	strh	r2, [r0, #14]
 8003e26:	6183      	str	r3, [r0, #24]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	305c      	adds	r0, #92	@ 0x5c
 8003e2e:	f000 f916 	bl	800405e <memset>
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <std+0x58>)
 8003e34:	6224      	str	r4, [r4, #32]
 8003e36:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <std+0x5c>)
 8003e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <std+0x60>)
 8003e3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <std+0x64>)
 8003e42:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <std+0x68>)
 8003e46:	429c      	cmp	r4, r3
 8003e48:	d006      	beq.n	8003e58 <std+0x48>
 8003e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e4e:	4294      	cmp	r4, r2
 8003e50:	d002      	beq.n	8003e58 <std+0x48>
 8003e52:	33d0      	adds	r3, #208	@ 0xd0
 8003e54:	429c      	cmp	r4, r3
 8003e56:	d105      	bne.n	8003e64 <std+0x54>
 8003e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e60:	f000 b97a 	b.w	8004158 <__retarget_lock_init_recursive>
 8003e64:	bd10      	pop	{r4, pc}
 8003e66:	bf00      	nop
 8003e68:	08003fd9 	.word	0x08003fd9
 8003e6c:	08003ffb 	.word	0x08003ffb
 8003e70:	08004033 	.word	0x08004033
 8003e74:	08004057 	.word	0x08004057
 8003e78:	2000026c 	.word	0x2000026c

08003e7c <stdio_exit_handler>:
 8003e7c:	4a02      	ldr	r2, [pc, #8]	@ (8003e88 <stdio_exit_handler+0xc>)
 8003e7e:	4903      	ldr	r1, [pc, #12]	@ (8003e8c <stdio_exit_handler+0x10>)
 8003e80:	4803      	ldr	r0, [pc, #12]	@ (8003e90 <stdio_exit_handler+0x14>)
 8003e82:	f000 b869 	b.w	8003f58 <_fwalk_sglue>
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	08006a25 	.word	0x08006a25
 8003e90:	2000001c 	.word	0x2000001c

08003e94 <cleanup_stdio>:
 8003e94:	6841      	ldr	r1, [r0, #4]
 8003e96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <cleanup_stdio+0x34>)
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	d001      	beq.n	8003ea4 <cleanup_stdio+0x10>
 8003ea0:	f002 fdc0 	bl	8006a24 <_fflush_r>
 8003ea4:	68a1      	ldr	r1, [r4, #8]
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <cleanup_stdio+0x38>)
 8003ea8:	4299      	cmp	r1, r3
 8003eaa:	d002      	beq.n	8003eb2 <cleanup_stdio+0x1e>
 8003eac:	4620      	mov	r0, r4
 8003eae:	f002 fdb9 	bl	8006a24 <_fflush_r>
 8003eb2:	68e1      	ldr	r1, [r4, #12]
 8003eb4:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <cleanup_stdio+0x3c>)
 8003eb6:	4299      	cmp	r1, r3
 8003eb8:	d004      	beq.n	8003ec4 <cleanup_stdio+0x30>
 8003eba:	4620      	mov	r0, r4
 8003ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec0:	f002 bdb0 	b.w	8006a24 <_fflush_r>
 8003ec4:	bd10      	pop	{r4, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000026c 	.word	0x2000026c
 8003ecc:	200002d4 	.word	0x200002d4
 8003ed0:	2000033c 	.word	0x2000033c

08003ed4 <global_stdio_init.part.0>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <global_stdio_init.part.0+0x30>)
 8003ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8003f08 <global_stdio_init.part.0+0x34>)
 8003eda:	4a0c      	ldr	r2, [pc, #48]	@ (8003f0c <global_stdio_init.part.0+0x38>)
 8003edc:	4620      	mov	r0, r4
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f7ff ff94 	bl	8003e10 <std>
 8003ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003eec:	2201      	movs	r2, #1
 8003eee:	2109      	movs	r1, #9
 8003ef0:	f7ff ff8e 	bl	8003e10 <std>
 8003ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ef8:	2202      	movs	r2, #2
 8003efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003efe:	2112      	movs	r1, #18
 8003f00:	f7ff bf86 	b.w	8003e10 <std>
 8003f04:	200003a4 	.word	0x200003a4
 8003f08:	2000026c 	.word	0x2000026c
 8003f0c:	08003e7d 	.word	0x08003e7d

08003f10 <__sfp_lock_acquire>:
 8003f10:	4801      	ldr	r0, [pc, #4]	@ (8003f18 <__sfp_lock_acquire+0x8>)
 8003f12:	f000 b922 	b.w	800415a <__retarget_lock_acquire_recursive>
 8003f16:	bf00      	nop
 8003f18:	200003ad 	.word	0x200003ad

08003f1c <__sfp_lock_release>:
 8003f1c:	4801      	ldr	r0, [pc, #4]	@ (8003f24 <__sfp_lock_release+0x8>)
 8003f1e:	f000 b91d 	b.w	800415c <__retarget_lock_release_recursive>
 8003f22:	bf00      	nop
 8003f24:	200003ad 	.word	0x200003ad

08003f28 <__sinit>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	f7ff fff0 	bl	8003f10 <__sfp_lock_acquire>
 8003f30:	6a23      	ldr	r3, [r4, #32]
 8003f32:	b11b      	cbz	r3, 8003f3c <__sinit+0x14>
 8003f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f38:	f7ff bff0 	b.w	8003f1c <__sfp_lock_release>
 8003f3c:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <__sinit+0x28>)
 8003f3e:	6223      	str	r3, [r4, #32]
 8003f40:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <__sinit+0x2c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f5      	bne.n	8003f34 <__sinit+0xc>
 8003f48:	f7ff ffc4 	bl	8003ed4 <global_stdio_init.part.0>
 8003f4c:	e7f2      	b.n	8003f34 <__sinit+0xc>
 8003f4e:	bf00      	nop
 8003f50:	08003e95 	.word	0x08003e95
 8003f54:	200003a4 	.word	0x200003a4

08003f58 <_fwalk_sglue>:
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	4688      	mov	r8, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	2600      	movs	r6, #0
 8003f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f68:	f1b9 0901 	subs.w	r9, r9, #1
 8003f6c:	d505      	bpl.n	8003f7a <_fwalk_sglue+0x22>
 8003f6e:	6824      	ldr	r4, [r4, #0]
 8003f70:	2c00      	cmp	r4, #0
 8003f72:	d1f7      	bne.n	8003f64 <_fwalk_sglue+0xc>
 8003f74:	4630      	mov	r0, r6
 8003f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7a:	89ab      	ldrh	r3, [r5, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d907      	bls.n	8003f90 <_fwalk_sglue+0x38>
 8003f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f84:	3301      	adds	r3, #1
 8003f86:	d003      	beq.n	8003f90 <_fwalk_sglue+0x38>
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	47c0      	blx	r8
 8003f8e:	4306      	orrs	r6, r0
 8003f90:	3568      	adds	r5, #104	@ 0x68
 8003f92:	e7e9      	b.n	8003f68 <_fwalk_sglue+0x10>

08003f94 <siprintf>:
 8003f94:	b40e      	push	{r1, r2, r3}
 8003f96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	2400      	movs	r4, #0
 8003f9e:	b09d      	sub	sp, #116	@ 0x74
 8003fa0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003fa2:	9002      	str	r0, [sp, #8]
 8003fa4:	9006      	str	r0, [sp, #24]
 8003fa6:	9107      	str	r1, [sp, #28]
 8003fa8:	9104      	str	r1, [sp, #16]
 8003faa:	4809      	ldr	r0, [pc, #36]	@ (8003fd0 <siprintf+0x3c>)
 8003fac:	4909      	ldr	r1, [pc, #36]	@ (8003fd4 <siprintf+0x40>)
 8003fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fb2:	9105      	str	r1, [sp, #20]
 8003fb4:	6800      	ldr	r0, [r0, #0]
 8003fb6:	a902      	add	r1, sp, #8
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003fbc:	f002 fbb6 	bl	800672c <_svfiprintf_r>
 8003fc0:	9b02      	ldr	r3, [sp, #8]
 8003fc2:	701c      	strb	r4, [r3, #0]
 8003fc4:	b01d      	add	sp, #116	@ 0x74
 8003fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fca:	b003      	add	sp, #12
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000018 	.word	0x20000018
 8003fd4:	ffff0208 	.word	0xffff0208

08003fd8 <__sread>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	460c      	mov	r4, r1
 8003fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe0:	f000 f86c 	bl	80040bc <_read_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	bfab      	itete	ge
 8003fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fea:	89a3      	ldrhlt	r3, [r4, #12]
 8003fec:	181b      	addge	r3, r3, r0
 8003fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ff2:	bfac      	ite	ge
 8003ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ff6:	81a3      	strhlt	r3, [r4, #12]
 8003ff8:	bd10      	pop	{r4, pc}

08003ffa <__swrite>:
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	461f      	mov	r7, r3
 8004000:	898b      	ldrh	r3, [r1, #12]
 8004002:	4605      	mov	r5, r0
 8004004:	05db      	lsls	r3, r3, #23
 8004006:	460c      	mov	r4, r1
 8004008:	4616      	mov	r6, r2
 800400a:	d505      	bpl.n	8004018 <__swrite+0x1e>
 800400c:	2302      	movs	r3, #2
 800400e:	2200      	movs	r2, #0
 8004010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004014:	f000 f840 	bl	8004098 <_lseek_r>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	4632      	mov	r2, r6
 800401c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004020:	81a3      	strh	r3, [r4, #12]
 8004022:	4628      	mov	r0, r5
 8004024:	463b      	mov	r3, r7
 8004026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800402a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800402e:	f000 b857 	b.w	80040e0 <_write_r>

08004032 <__sseek>:
 8004032:	b510      	push	{r4, lr}
 8004034:	460c      	mov	r4, r1
 8004036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403a:	f000 f82d 	bl	8004098 <_lseek_r>
 800403e:	1c43      	adds	r3, r0, #1
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	bf15      	itete	ne
 8004044:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800404a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800404e:	81a3      	strheq	r3, [r4, #12]
 8004050:	bf18      	it	ne
 8004052:	81a3      	strhne	r3, [r4, #12]
 8004054:	bd10      	pop	{r4, pc}

08004056 <__sclose>:
 8004056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405a:	f000 b80d 	b.w	8004078 <_close_r>

0800405e <memset>:
 800405e:	4603      	mov	r3, r0
 8004060:	4402      	add	r2, r0
 8004062:	4293      	cmp	r3, r2
 8004064:	d100      	bne.n	8004068 <memset+0xa>
 8004066:	4770      	bx	lr
 8004068:	f803 1b01 	strb.w	r1, [r3], #1
 800406c:	e7f9      	b.n	8004062 <memset+0x4>
	...

08004070 <_localeconv_r>:
 8004070:	4800      	ldr	r0, [pc, #0]	@ (8004074 <_localeconv_r+0x4>)
 8004072:	4770      	bx	lr
 8004074:	20000158 	.word	0x20000158

08004078 <_close_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	2300      	movs	r3, #0
 800407c:	4d05      	ldr	r5, [pc, #20]	@ (8004094 <_close_r+0x1c>)
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	f7fd fe05 	bl	8001c92 <_close>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_close_r+0x1a>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_close_r+0x1a>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	200003a8 	.word	0x200003a8

08004098 <_lseek_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4604      	mov	r4, r0
 800409c:	4608      	mov	r0, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	2200      	movs	r2, #0
 80040a2:	4d05      	ldr	r5, [pc, #20]	@ (80040b8 <_lseek_r+0x20>)
 80040a4:	602a      	str	r2, [r5, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7fd fe17 	bl	8001cda <_lseek>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_lseek_r+0x1e>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_lseek_r+0x1e>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	200003a8 	.word	0x200003a8

080040bc <_read_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	4d05      	ldr	r5, [pc, #20]	@ (80040dc <_read_r+0x20>)
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fd fda8 	bl	8001c20 <_read>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_read_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_read_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	200003a8 	.word	0x200003a8

080040e0 <_write_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	2200      	movs	r2, #0
 80040ea:	4d05      	ldr	r5, [pc, #20]	@ (8004100 <_write_r+0x20>)
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fd fdb3 	bl	8001c5a <_write>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_write_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_write_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	200003a8 	.word	0x200003a8

08004104 <__errno>:
 8004104:	4b01      	ldr	r3, [pc, #4]	@ (800410c <__errno+0x8>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000018 	.word	0x20000018

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2600      	movs	r6, #0
 8004114:	4d0c      	ldr	r5, [pc, #48]	@ (8004148 <__libc_init_array+0x38>)
 8004116:	4c0d      	ldr	r4, [pc, #52]	@ (800414c <__libc_init_array+0x3c>)
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	f003 fb6c 	bl	80077fc <_init>
 8004124:	2600      	movs	r6, #0
 8004126:	4d0a      	ldr	r5, [pc, #40]	@ (8004150 <__libc_init_array+0x40>)
 8004128:	4c0a      	ldr	r4, [pc, #40]	@ (8004154 <__libc_init_array+0x44>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08007d8c 	.word	0x08007d8c
 800414c:	08007d8c 	.word	0x08007d8c
 8004150:	08007d8c 	.word	0x08007d8c
 8004154:	08007d90 	.word	0x08007d90

08004158 <__retarget_lock_init_recursive>:
 8004158:	4770      	bx	lr

0800415a <__retarget_lock_acquire_recursive>:
 800415a:	4770      	bx	lr

0800415c <__retarget_lock_release_recursive>:
 800415c:	4770      	bx	lr

0800415e <memchr>:
 800415e:	4603      	mov	r3, r0
 8004160:	b510      	push	{r4, lr}
 8004162:	b2c9      	uxtb	r1, r1
 8004164:	4402      	add	r2, r0
 8004166:	4293      	cmp	r3, r2
 8004168:	4618      	mov	r0, r3
 800416a:	d101      	bne.n	8004170 <memchr+0x12>
 800416c:	2000      	movs	r0, #0
 800416e:	e003      	b.n	8004178 <memchr+0x1a>
 8004170:	7804      	ldrb	r4, [r0, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	428c      	cmp	r4, r1
 8004176:	d1f6      	bne.n	8004166 <memchr+0x8>
 8004178:	bd10      	pop	{r4, pc}
	...

0800417c <nanf>:
 800417c:	4800      	ldr	r0, [pc, #0]	@ (8004180 <nanf+0x4>)
 800417e:	4770      	bx	lr
 8004180:	7fc00000 	.word	0x7fc00000

08004184 <quorem>:
 8004184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004188:	6903      	ldr	r3, [r0, #16]
 800418a:	690c      	ldr	r4, [r1, #16]
 800418c:	4607      	mov	r7, r0
 800418e:	42a3      	cmp	r3, r4
 8004190:	db7e      	blt.n	8004290 <quorem+0x10c>
 8004192:	3c01      	subs	r4, #1
 8004194:	00a3      	lsls	r3, r4, #2
 8004196:	f100 0514 	add.w	r5, r0, #20
 800419a:	f101 0814 	add.w	r8, r1, #20
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041ae:	3301      	adds	r3, #1
 80041b0:	429a      	cmp	r2, r3
 80041b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80041b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041ba:	d32e      	bcc.n	800421a <quorem+0x96>
 80041bc:	f04f 0a00 	mov.w	sl, #0
 80041c0:	46c4      	mov	ip, r8
 80041c2:	46ae      	mov	lr, r5
 80041c4:	46d3      	mov	fp, sl
 80041c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041ca:	b298      	uxth	r0, r3
 80041cc:	fb06 a000 	mla	r0, r6, r0, sl
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	0c02      	lsrs	r2, r0, #16
 80041d4:	fb06 2303 	mla	r3, r6, r3, r2
 80041d8:	f8de 2000 	ldr.w	r2, [lr]
 80041dc:	b280      	uxth	r0, r0
 80041de:	b292      	uxth	r2, r2
 80041e0:	1a12      	subs	r2, r2, r0
 80041e2:	445a      	add	r2, fp
 80041e4:	f8de 0000 	ldr.w	r0, [lr]
 80041e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80041f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80041f6:	b292      	uxth	r2, r2
 80041f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80041fc:	45e1      	cmp	r9, ip
 80041fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004202:	f84e 2b04 	str.w	r2, [lr], #4
 8004206:	d2de      	bcs.n	80041c6 <quorem+0x42>
 8004208:	9b00      	ldr	r3, [sp, #0]
 800420a:	58eb      	ldr	r3, [r5, r3]
 800420c:	b92b      	cbnz	r3, 800421a <quorem+0x96>
 800420e:	9b01      	ldr	r3, [sp, #4]
 8004210:	3b04      	subs	r3, #4
 8004212:	429d      	cmp	r5, r3
 8004214:	461a      	mov	r2, r3
 8004216:	d32f      	bcc.n	8004278 <quorem+0xf4>
 8004218:	613c      	str	r4, [r7, #16]
 800421a:	4638      	mov	r0, r7
 800421c:	f001 f9ca 	bl	80055b4 <__mcmp>
 8004220:	2800      	cmp	r0, #0
 8004222:	db25      	blt.n	8004270 <quorem+0xec>
 8004224:	4629      	mov	r1, r5
 8004226:	2000      	movs	r0, #0
 8004228:	f858 2b04 	ldr.w	r2, [r8], #4
 800422c:	f8d1 c000 	ldr.w	ip, [r1]
 8004230:	fa1f fe82 	uxth.w	lr, r2
 8004234:	fa1f f38c 	uxth.w	r3, ip
 8004238:	eba3 030e 	sub.w	r3, r3, lr
 800423c:	4403      	add	r3, r0
 800423e:	0c12      	lsrs	r2, r2, #16
 8004240:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004244:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004248:	b29b      	uxth	r3, r3
 800424a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800424e:	45c1      	cmp	r9, r8
 8004250:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004254:	f841 3b04 	str.w	r3, [r1], #4
 8004258:	d2e6      	bcs.n	8004228 <quorem+0xa4>
 800425a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800425e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004262:	b922      	cbnz	r2, 800426e <quorem+0xea>
 8004264:	3b04      	subs	r3, #4
 8004266:	429d      	cmp	r5, r3
 8004268:	461a      	mov	r2, r3
 800426a:	d30b      	bcc.n	8004284 <quorem+0x100>
 800426c:	613c      	str	r4, [r7, #16]
 800426e:	3601      	adds	r6, #1
 8004270:	4630      	mov	r0, r6
 8004272:	b003      	add	sp, #12
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	3b04      	subs	r3, #4
 800427c:	2a00      	cmp	r2, #0
 800427e:	d1cb      	bne.n	8004218 <quorem+0x94>
 8004280:	3c01      	subs	r4, #1
 8004282:	e7c6      	b.n	8004212 <quorem+0x8e>
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	3b04      	subs	r3, #4
 8004288:	2a00      	cmp	r2, #0
 800428a:	d1ef      	bne.n	800426c <quorem+0xe8>
 800428c:	3c01      	subs	r4, #1
 800428e:	e7ea      	b.n	8004266 <quorem+0xe2>
 8004290:	2000      	movs	r0, #0
 8004292:	e7ee      	b.n	8004272 <quorem+0xee>
 8004294:	0000      	movs	r0, r0
	...

08004298 <_dtoa_r>:
 8004298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	4614      	mov	r4, r2
 800429e:	461d      	mov	r5, r3
 80042a0:	69c7      	ldr	r7, [r0, #28]
 80042a2:	b097      	sub	sp, #92	@ 0x5c
 80042a4:	4681      	mov	r9, r0
 80042a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80042aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80042ac:	b97f      	cbnz	r7, 80042ce <_dtoa_r+0x36>
 80042ae:	2010      	movs	r0, #16
 80042b0:	f000 fe0e 	bl	8004ed0 <malloc>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f8c9 001c 	str.w	r0, [r9, #28]
 80042ba:	b920      	cbnz	r0, 80042c6 <_dtoa_r+0x2e>
 80042bc:	21ef      	movs	r1, #239	@ 0xef
 80042be:	4bac      	ldr	r3, [pc, #688]	@ (8004570 <_dtoa_r+0x2d8>)
 80042c0:	48ac      	ldr	r0, [pc, #688]	@ (8004574 <_dtoa_r+0x2dc>)
 80042c2:	f002 fc27 	bl	8006b14 <__assert_func>
 80042c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80042ca:	6007      	str	r7, [r0, #0]
 80042cc:	60c7      	str	r7, [r0, #12]
 80042ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	b159      	cbz	r1, 80042ee <_dtoa_r+0x56>
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	2301      	movs	r3, #1
 80042da:	4093      	lsls	r3, r2
 80042dc:	604a      	str	r2, [r1, #4]
 80042de:	608b      	str	r3, [r1, #8]
 80042e0:	4648      	mov	r0, r9
 80042e2:	f000 feeb 	bl	80050bc <_Bfree>
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	1e2b      	subs	r3, r5, #0
 80042f0:	bfaf      	iteee	ge
 80042f2:	2300      	movge	r3, #0
 80042f4:	2201      	movlt	r2, #1
 80042f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80042fa:	9307      	strlt	r3, [sp, #28]
 80042fc:	bfa8      	it	ge
 80042fe:	6033      	strge	r3, [r6, #0]
 8004300:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004304:	4b9c      	ldr	r3, [pc, #624]	@ (8004578 <_dtoa_r+0x2e0>)
 8004306:	bfb8      	it	lt
 8004308:	6032      	strlt	r2, [r6, #0]
 800430a:	ea33 0308 	bics.w	r3, r3, r8
 800430e:	d112      	bne.n	8004336 <_dtoa_r+0x9e>
 8004310:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004314:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800431c:	4323      	orrs	r3, r4
 800431e:	f000 855e 	beq.w	8004dde <_dtoa_r+0xb46>
 8004322:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004324:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800457c <_dtoa_r+0x2e4>
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8560 	beq.w	8004dee <_dtoa_r+0xb56>
 800432e:	f10a 0303 	add.w	r3, sl, #3
 8004332:	f000 bd5a 	b.w	8004dea <_dtoa_r+0xb52>
 8004336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800433a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800433e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	2300      	movs	r3, #0
 8004346:	f7fc fb2f 	bl	80009a8 <__aeabi_dcmpeq>
 800434a:	4607      	mov	r7, r0
 800434c:	b158      	cbz	r0, 8004366 <_dtoa_r+0xce>
 800434e:	2301      	movs	r3, #1
 8004350:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004356:	b113      	cbz	r3, 800435e <_dtoa_r+0xc6>
 8004358:	4b89      	ldr	r3, [pc, #548]	@ (8004580 <_dtoa_r+0x2e8>)
 800435a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004584 <_dtoa_r+0x2ec>
 8004362:	f000 bd44 	b.w	8004dee <_dtoa_r+0xb56>
 8004366:	ab14      	add	r3, sp, #80	@ 0x50
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	ab15      	add	r3, sp, #84	@ 0x54
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4648      	mov	r0, r9
 8004370:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004374:	f001 fa36 	bl	80057e4 <__d2b>
 8004378:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800437c:	9003      	str	r0, [sp, #12]
 800437e:	2e00      	cmp	r6, #0
 8004380:	d078      	beq.n	8004474 <_dtoa_r+0x1dc>
 8004382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004388:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800438c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004390:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004394:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004398:	9712      	str	r7, [sp, #72]	@ 0x48
 800439a:	4619      	mov	r1, r3
 800439c:	2200      	movs	r2, #0
 800439e:	4b7a      	ldr	r3, [pc, #488]	@ (8004588 <_dtoa_r+0x2f0>)
 80043a0:	f7fb fee2 	bl	8000168 <__aeabi_dsub>
 80043a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8004558 <_dtoa_r+0x2c0>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fc f895 	bl	80004d8 <__aeabi_dmul>
 80043ae:	a36c      	add	r3, pc, #432	@ (adr r3, 8004560 <_dtoa_r+0x2c8>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fb feda 	bl	800016c <__adddf3>
 80043b8:	4604      	mov	r4, r0
 80043ba:	4630      	mov	r0, r6
 80043bc:	460d      	mov	r5, r1
 80043be:	f7fc f821 	bl	8000404 <__aeabi_i2d>
 80043c2:	a369      	add	r3, pc, #420	@ (adr r3, 8004568 <_dtoa_r+0x2d0>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fc f886 	bl	80004d8 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fb feca 	bl	800016c <__adddf3>
 80043d8:	4604      	mov	r4, r0
 80043da:	460d      	mov	r5, r1
 80043dc:	f7fc fb2c 	bl	8000a38 <__aeabi_d2iz>
 80043e0:	2200      	movs	r2, #0
 80043e2:	4607      	mov	r7, r0
 80043e4:	2300      	movs	r3, #0
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc fae7 	bl	80009bc <__aeabi_dcmplt>
 80043ee:	b140      	cbz	r0, 8004402 <_dtoa_r+0x16a>
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7fc f807 	bl	8000404 <__aeabi_i2d>
 80043f6:	4622      	mov	r2, r4
 80043f8:	462b      	mov	r3, r5
 80043fa:	f7fc fad5 	bl	80009a8 <__aeabi_dcmpeq>
 80043fe:	b900      	cbnz	r0, 8004402 <_dtoa_r+0x16a>
 8004400:	3f01      	subs	r7, #1
 8004402:	2f16      	cmp	r7, #22
 8004404:	d854      	bhi.n	80044b0 <_dtoa_r+0x218>
 8004406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800440a:	4b60      	ldr	r3, [pc, #384]	@ (800458c <_dtoa_r+0x2f4>)
 800440c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc fad2 	bl	80009bc <__aeabi_dcmplt>
 8004418:	2800      	cmp	r0, #0
 800441a:	d04b      	beq.n	80044b4 <_dtoa_r+0x21c>
 800441c:	2300      	movs	r3, #0
 800441e:	3f01      	subs	r7, #1
 8004420:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004422:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004424:	1b9b      	subs	r3, r3, r6
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	bf49      	itett	mi
 800442a:	f1c3 0301 	rsbmi	r3, r3, #1
 800442e:	2300      	movpl	r3, #0
 8004430:	9304      	strmi	r3, [sp, #16]
 8004432:	2300      	movmi	r3, #0
 8004434:	9209      	str	r2, [sp, #36]	@ 0x24
 8004436:	bf54      	ite	pl
 8004438:	9304      	strpl	r3, [sp, #16]
 800443a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800443c:	2f00      	cmp	r7, #0
 800443e:	db3b      	blt.n	80044b8 <_dtoa_r+0x220>
 8004440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004442:	970e      	str	r7, [sp, #56]	@ 0x38
 8004444:	443b      	add	r3, r7
 8004446:	9309      	str	r3, [sp, #36]	@ 0x24
 8004448:	2300      	movs	r3, #0
 800444a:	930a      	str	r3, [sp, #40]	@ 0x28
 800444c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800444e:	2b09      	cmp	r3, #9
 8004450:	d865      	bhi.n	800451e <_dtoa_r+0x286>
 8004452:	2b05      	cmp	r3, #5
 8004454:	bfc4      	itt	gt
 8004456:	3b04      	subgt	r3, #4
 8004458:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800445a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800445c:	bfc8      	it	gt
 800445e:	2400      	movgt	r4, #0
 8004460:	f1a3 0302 	sub.w	r3, r3, #2
 8004464:	bfd8      	it	le
 8004466:	2401      	movle	r4, #1
 8004468:	2b03      	cmp	r3, #3
 800446a:	d864      	bhi.n	8004536 <_dtoa_r+0x29e>
 800446c:	e8df f003 	tbb	[pc, r3]
 8004470:	2c385553 	.word	0x2c385553
 8004474:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004478:	441e      	add	r6, r3
 800447a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800447e:	2b20      	cmp	r3, #32
 8004480:	bfc1      	itttt	gt
 8004482:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004486:	fa08 f803 	lslgt.w	r8, r8, r3
 800448a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800448e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004492:	bfd6      	itet	le
 8004494:	f1c3 0320 	rsble	r3, r3, #32
 8004498:	ea48 0003 	orrgt.w	r0, r8, r3
 800449c:	fa04 f003 	lslle.w	r0, r4, r3
 80044a0:	f7fb ffa0 	bl	80003e4 <__aeabi_ui2d>
 80044a4:	2201      	movs	r2, #1
 80044a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80044aa:	3e01      	subs	r6, #1
 80044ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80044ae:	e774      	b.n	800439a <_dtoa_r+0x102>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e7b5      	b.n	8004420 <_dtoa_r+0x188>
 80044b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80044b6:	e7b4      	b.n	8004422 <_dtoa_r+0x18a>
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	1bdb      	subs	r3, r3, r7
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	427b      	negs	r3, r7
 80044c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80044c2:	2300      	movs	r3, #0
 80044c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80044c6:	e7c1      	b.n	800444c <_dtoa_r+0x1b4>
 80044c8:	2301      	movs	r3, #1
 80044ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044ce:	eb07 0b03 	add.w	fp, r7, r3
 80044d2:	f10b 0301 	add.w	r3, fp, #1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	9308      	str	r3, [sp, #32]
 80044da:	bfb8      	it	lt
 80044dc:	2301      	movlt	r3, #1
 80044de:	e006      	b.n	80044ee <_dtoa_r+0x256>
 80044e0:	2301      	movs	r3, #1
 80044e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	dd28      	ble.n	800453c <_dtoa_r+0x2a4>
 80044ea:	469b      	mov	fp, r3
 80044ec:	9308      	str	r3, [sp, #32]
 80044ee:	2100      	movs	r1, #0
 80044f0:	2204      	movs	r2, #4
 80044f2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80044f6:	f102 0514 	add.w	r5, r2, #20
 80044fa:	429d      	cmp	r5, r3
 80044fc:	d926      	bls.n	800454c <_dtoa_r+0x2b4>
 80044fe:	6041      	str	r1, [r0, #4]
 8004500:	4648      	mov	r0, r9
 8004502:	f000 fd9b 	bl	800503c <_Balloc>
 8004506:	4682      	mov	sl, r0
 8004508:	2800      	cmp	r0, #0
 800450a:	d143      	bne.n	8004594 <_dtoa_r+0x2fc>
 800450c:	4602      	mov	r2, r0
 800450e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004512:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <_dtoa_r+0x2f8>)
 8004514:	e6d4      	b.n	80042c0 <_dtoa_r+0x28>
 8004516:	2300      	movs	r3, #0
 8004518:	e7e3      	b.n	80044e2 <_dtoa_r+0x24a>
 800451a:	2300      	movs	r3, #0
 800451c:	e7d5      	b.n	80044ca <_dtoa_r+0x232>
 800451e:	2401      	movs	r4, #1
 8004520:	2300      	movs	r3, #0
 8004522:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004524:	9320      	str	r3, [sp, #128]	@ 0x80
 8004526:	f04f 3bff 	mov.w	fp, #4294967295
 800452a:	2200      	movs	r2, #0
 800452c:	2312      	movs	r3, #18
 800452e:	f8cd b020 	str.w	fp, [sp, #32]
 8004532:	9221      	str	r2, [sp, #132]	@ 0x84
 8004534:	e7db      	b.n	80044ee <_dtoa_r+0x256>
 8004536:	2301      	movs	r3, #1
 8004538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800453a:	e7f4      	b.n	8004526 <_dtoa_r+0x28e>
 800453c:	f04f 0b01 	mov.w	fp, #1
 8004540:	465b      	mov	r3, fp
 8004542:	f8cd b020 	str.w	fp, [sp, #32]
 8004546:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800454a:	e7d0      	b.n	80044ee <_dtoa_r+0x256>
 800454c:	3101      	adds	r1, #1
 800454e:	0052      	lsls	r2, r2, #1
 8004550:	e7d1      	b.n	80044f6 <_dtoa_r+0x25e>
 8004552:	bf00      	nop
 8004554:	f3af 8000 	nop.w
 8004558:	636f4361 	.word	0x636f4361
 800455c:	3fd287a7 	.word	0x3fd287a7
 8004560:	8b60c8b3 	.word	0x8b60c8b3
 8004564:	3fc68a28 	.word	0x3fc68a28
 8004568:	509f79fb 	.word	0x509f79fb
 800456c:	3fd34413 	.word	0x3fd34413
 8004570:	080079a0 	.word	0x080079a0
 8004574:	080079b7 	.word	0x080079b7
 8004578:	7ff00000 	.word	0x7ff00000
 800457c:	0800799c 	.word	0x0800799c
 8004580:	0800796b 	.word	0x0800796b
 8004584:	0800796a 	.word	0x0800796a
 8004588:	3ff80000 	.word	0x3ff80000
 800458c:	08007b68 	.word	0x08007b68
 8004590:	08007a0f 	.word	0x08007a0f
 8004594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004598:	6018      	str	r0, [r3, #0]
 800459a:	9b08      	ldr	r3, [sp, #32]
 800459c:	2b0e      	cmp	r3, #14
 800459e:	f200 80a1 	bhi.w	80046e4 <_dtoa_r+0x44c>
 80045a2:	2c00      	cmp	r4, #0
 80045a4:	f000 809e 	beq.w	80046e4 <_dtoa_r+0x44c>
 80045a8:	2f00      	cmp	r7, #0
 80045aa:	dd33      	ble.n	8004614 <_dtoa_r+0x37c>
 80045ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004820 <_dtoa_r+0x588>)
 80045ae:	f007 020f 	and.w	r2, r7, #15
 80045b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045b6:	05f8      	lsls	r0, r7, #23
 80045b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80045c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80045c4:	d516      	bpl.n	80045f4 <_dtoa_r+0x35c>
 80045c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045ca:	4b96      	ldr	r3, [pc, #600]	@ (8004824 <_dtoa_r+0x58c>)
 80045cc:	2603      	movs	r6, #3
 80045ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045d2:	f7fc f8ab 	bl	800072c <__aeabi_ddiv>
 80045d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045da:	f004 040f 	and.w	r4, r4, #15
 80045de:	4d91      	ldr	r5, [pc, #580]	@ (8004824 <_dtoa_r+0x58c>)
 80045e0:	b954      	cbnz	r4, 80045f8 <_dtoa_r+0x360>
 80045e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045ea:	f7fc f89f 	bl	800072c <__aeabi_ddiv>
 80045ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045f2:	e028      	b.n	8004646 <_dtoa_r+0x3ae>
 80045f4:	2602      	movs	r6, #2
 80045f6:	e7f2      	b.n	80045de <_dtoa_r+0x346>
 80045f8:	07e1      	lsls	r1, r4, #31
 80045fa:	d508      	bpl.n	800460e <_dtoa_r+0x376>
 80045fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004600:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004604:	f7fb ff68 	bl	80004d8 <__aeabi_dmul>
 8004608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800460c:	3601      	adds	r6, #1
 800460e:	1064      	asrs	r4, r4, #1
 8004610:	3508      	adds	r5, #8
 8004612:	e7e5      	b.n	80045e0 <_dtoa_r+0x348>
 8004614:	f000 80af 	beq.w	8004776 <_dtoa_r+0x4de>
 8004618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800461c:	427c      	negs	r4, r7
 800461e:	4b80      	ldr	r3, [pc, #512]	@ (8004820 <_dtoa_r+0x588>)
 8004620:	f004 020f 	and.w	r2, r4, #15
 8004624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ff54 	bl	80004d8 <__aeabi_dmul>
 8004630:	2602      	movs	r6, #2
 8004632:	2300      	movs	r3, #0
 8004634:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004638:	4d7a      	ldr	r5, [pc, #488]	@ (8004824 <_dtoa_r+0x58c>)
 800463a:	1124      	asrs	r4, r4, #4
 800463c:	2c00      	cmp	r4, #0
 800463e:	f040 808f 	bne.w	8004760 <_dtoa_r+0x4c8>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1d3      	bne.n	80045ee <_dtoa_r+0x356>
 8004646:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800464a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8094 	beq.w	800477a <_dtoa_r+0x4e2>
 8004652:	2200      	movs	r2, #0
 8004654:	4620      	mov	r0, r4
 8004656:	4629      	mov	r1, r5
 8004658:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <_dtoa_r+0x590>)
 800465a:	f7fc f9af 	bl	80009bc <__aeabi_dcmplt>
 800465e:	2800      	cmp	r0, #0
 8004660:	f000 808b 	beq.w	800477a <_dtoa_r+0x4e2>
 8004664:	9b08      	ldr	r3, [sp, #32]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8087 	beq.w	800477a <_dtoa_r+0x4e2>
 800466c:	f1bb 0f00 	cmp.w	fp, #0
 8004670:	dd34      	ble.n	80046dc <_dtoa_r+0x444>
 8004672:	4620      	mov	r0, r4
 8004674:	2200      	movs	r2, #0
 8004676:	4629      	mov	r1, r5
 8004678:	4b6c      	ldr	r3, [pc, #432]	@ (800482c <_dtoa_r+0x594>)
 800467a:	f7fb ff2d 	bl	80004d8 <__aeabi_dmul>
 800467e:	465c      	mov	r4, fp
 8004680:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004684:	f107 38ff 	add.w	r8, r7, #4294967295
 8004688:	3601      	adds	r6, #1
 800468a:	4630      	mov	r0, r6
 800468c:	f7fb feba 	bl	8000404 <__aeabi_i2d>
 8004690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004694:	f7fb ff20 	bl	80004d8 <__aeabi_dmul>
 8004698:	2200      	movs	r2, #0
 800469a:	4b65      	ldr	r3, [pc, #404]	@ (8004830 <_dtoa_r+0x598>)
 800469c:	f7fb fd66 	bl	800016c <__adddf3>
 80046a0:	4605      	mov	r5, r0
 80046a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80046a6:	2c00      	cmp	r4, #0
 80046a8:	d16a      	bne.n	8004780 <_dtoa_r+0x4e8>
 80046aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ae:	2200      	movs	r2, #0
 80046b0:	4b60      	ldr	r3, [pc, #384]	@ (8004834 <_dtoa_r+0x59c>)
 80046b2:	f7fb fd59 	bl	8000168 <__aeabi_dsub>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046be:	462a      	mov	r2, r5
 80046c0:	4633      	mov	r3, r6
 80046c2:	f7fc f999 	bl	80009f8 <__aeabi_dcmpgt>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	f040 8298 	bne.w	8004bfc <_dtoa_r+0x964>
 80046cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046d0:	462a      	mov	r2, r5
 80046d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80046d6:	f7fc f971 	bl	80009bc <__aeabi_dcmplt>
 80046da:	bb38      	cbnz	r0, 800472c <_dtoa_r+0x494>
 80046dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80046e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80046e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f2c0 8157 	blt.w	800499a <_dtoa_r+0x702>
 80046ec:	2f0e      	cmp	r7, #14
 80046ee:	f300 8154 	bgt.w	800499a <_dtoa_r+0x702>
 80046f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004820 <_dtoa_r+0x588>)
 80046f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004700:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004702:	2b00      	cmp	r3, #0
 8004704:	f280 80e5 	bge.w	80048d2 <_dtoa_r+0x63a>
 8004708:	9b08      	ldr	r3, [sp, #32]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f300 80e1 	bgt.w	80048d2 <_dtoa_r+0x63a>
 8004710:	d10c      	bne.n	800472c <_dtoa_r+0x494>
 8004712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004716:	2200      	movs	r2, #0
 8004718:	4b46      	ldr	r3, [pc, #280]	@ (8004834 <_dtoa_r+0x59c>)
 800471a:	f7fb fedd 	bl	80004d8 <__aeabi_dmul>
 800471e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004722:	f7fc f95f 	bl	80009e4 <__aeabi_dcmpge>
 8004726:	2800      	cmp	r0, #0
 8004728:	f000 8266 	beq.w	8004bf8 <_dtoa_r+0x960>
 800472c:	2400      	movs	r4, #0
 800472e:	4625      	mov	r5, r4
 8004730:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004732:	4656      	mov	r6, sl
 8004734:	ea6f 0803 	mvn.w	r8, r3
 8004738:	2700      	movs	r7, #0
 800473a:	4621      	mov	r1, r4
 800473c:	4648      	mov	r0, r9
 800473e:	f000 fcbd 	bl	80050bc <_Bfree>
 8004742:	2d00      	cmp	r5, #0
 8004744:	f000 80bd 	beq.w	80048c2 <_dtoa_r+0x62a>
 8004748:	b12f      	cbz	r7, 8004756 <_dtoa_r+0x4be>
 800474a:	42af      	cmp	r7, r5
 800474c:	d003      	beq.n	8004756 <_dtoa_r+0x4be>
 800474e:	4639      	mov	r1, r7
 8004750:	4648      	mov	r0, r9
 8004752:	f000 fcb3 	bl	80050bc <_Bfree>
 8004756:	4629      	mov	r1, r5
 8004758:	4648      	mov	r0, r9
 800475a:	f000 fcaf 	bl	80050bc <_Bfree>
 800475e:	e0b0      	b.n	80048c2 <_dtoa_r+0x62a>
 8004760:	07e2      	lsls	r2, r4, #31
 8004762:	d505      	bpl.n	8004770 <_dtoa_r+0x4d8>
 8004764:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004768:	f7fb feb6 	bl	80004d8 <__aeabi_dmul>
 800476c:	2301      	movs	r3, #1
 800476e:	3601      	adds	r6, #1
 8004770:	1064      	asrs	r4, r4, #1
 8004772:	3508      	adds	r5, #8
 8004774:	e762      	b.n	800463c <_dtoa_r+0x3a4>
 8004776:	2602      	movs	r6, #2
 8004778:	e765      	b.n	8004646 <_dtoa_r+0x3ae>
 800477a:	46b8      	mov	r8, r7
 800477c:	9c08      	ldr	r4, [sp, #32]
 800477e:	e784      	b.n	800468a <_dtoa_r+0x3f2>
 8004780:	4b27      	ldr	r3, [pc, #156]	@ (8004820 <_dtoa_r+0x588>)
 8004782:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004784:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800478c:	4454      	add	r4, sl
 800478e:	2900      	cmp	r1, #0
 8004790:	d054      	beq.n	800483c <_dtoa_r+0x5a4>
 8004792:	2000      	movs	r0, #0
 8004794:	4928      	ldr	r1, [pc, #160]	@ (8004838 <_dtoa_r+0x5a0>)
 8004796:	f7fb ffc9 	bl	800072c <__aeabi_ddiv>
 800479a:	4633      	mov	r3, r6
 800479c:	462a      	mov	r2, r5
 800479e:	f7fb fce3 	bl	8000168 <__aeabi_dsub>
 80047a2:	4656      	mov	r6, sl
 80047a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ac:	f7fc f944 	bl	8000a38 <__aeabi_d2iz>
 80047b0:	4605      	mov	r5, r0
 80047b2:	f7fb fe27 	bl	8000404 <__aeabi_i2d>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047be:	f7fb fcd3 	bl	8000168 <__aeabi_dsub>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	3530      	adds	r5, #48	@ 0x30
 80047c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047d0:	f806 5b01 	strb.w	r5, [r6], #1
 80047d4:	f7fc f8f2 	bl	80009bc <__aeabi_dcmplt>
 80047d8:	2800      	cmp	r0, #0
 80047da:	d172      	bne.n	80048c2 <_dtoa_r+0x62a>
 80047dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047e0:	2000      	movs	r0, #0
 80047e2:	4911      	ldr	r1, [pc, #68]	@ (8004828 <_dtoa_r+0x590>)
 80047e4:	f7fb fcc0 	bl	8000168 <__aeabi_dsub>
 80047e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047ec:	f7fc f8e6 	bl	80009bc <__aeabi_dcmplt>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f040 80b4 	bne.w	800495e <_dtoa_r+0x6c6>
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	f43f af70 	beq.w	80046dc <_dtoa_r+0x444>
 80047fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004800:	2200      	movs	r2, #0
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <_dtoa_r+0x594>)
 8004804:	f7fb fe68 	bl	80004d8 <__aeabi_dmul>
 8004808:	2200      	movs	r2, #0
 800480a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800480e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <_dtoa_r+0x594>)
 8004814:	f7fb fe60 	bl	80004d8 <__aeabi_dmul>
 8004818:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800481c:	e7c4      	b.n	80047a8 <_dtoa_r+0x510>
 800481e:	bf00      	nop
 8004820:	08007b68 	.word	0x08007b68
 8004824:	08007b40 	.word	0x08007b40
 8004828:	3ff00000 	.word	0x3ff00000
 800482c:	40240000 	.word	0x40240000
 8004830:	401c0000 	.word	0x401c0000
 8004834:	40140000 	.word	0x40140000
 8004838:	3fe00000 	.word	0x3fe00000
 800483c:	4631      	mov	r1, r6
 800483e:	4628      	mov	r0, r5
 8004840:	f7fb fe4a 	bl	80004d8 <__aeabi_dmul>
 8004844:	4656      	mov	r6, sl
 8004846:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800484a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800484c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004850:	f7fc f8f2 	bl	8000a38 <__aeabi_d2iz>
 8004854:	4605      	mov	r5, r0
 8004856:	f7fb fdd5 	bl	8000404 <__aeabi_i2d>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004862:	f7fb fc81 	bl	8000168 <__aeabi_dsub>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	3530      	adds	r5, #48	@ 0x30
 800486c:	f806 5b01 	strb.w	r5, [r6], #1
 8004870:	42a6      	cmp	r6, r4
 8004872:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	d124      	bne.n	80048c6 <_dtoa_r+0x62e>
 800487c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004880:	4bae      	ldr	r3, [pc, #696]	@ (8004b3c <_dtoa_r+0x8a4>)
 8004882:	f7fb fc73 	bl	800016c <__adddf3>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800488e:	f7fc f8b3 	bl	80009f8 <__aeabi_dcmpgt>
 8004892:	2800      	cmp	r0, #0
 8004894:	d163      	bne.n	800495e <_dtoa_r+0x6c6>
 8004896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800489a:	2000      	movs	r0, #0
 800489c:	49a7      	ldr	r1, [pc, #668]	@ (8004b3c <_dtoa_r+0x8a4>)
 800489e:	f7fb fc63 	bl	8000168 <__aeabi_dsub>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048aa:	f7fc f887 	bl	80009bc <__aeabi_dcmplt>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f43f af14 	beq.w	80046dc <_dtoa_r+0x444>
 80048b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80048b6:	1e73      	subs	r3, r6, #1
 80048b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80048ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80048be:	2b30      	cmp	r3, #48	@ 0x30
 80048c0:	d0f8      	beq.n	80048b4 <_dtoa_r+0x61c>
 80048c2:	4647      	mov	r7, r8
 80048c4:	e03b      	b.n	800493e <_dtoa_r+0x6a6>
 80048c6:	4b9e      	ldr	r3, [pc, #632]	@ (8004b40 <_dtoa_r+0x8a8>)
 80048c8:	f7fb fe06 	bl	80004d8 <__aeabi_dmul>
 80048cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048d0:	e7bc      	b.n	800484c <_dtoa_r+0x5b4>
 80048d2:	4656      	mov	r6, sl
 80048d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80048d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048dc:	4620      	mov	r0, r4
 80048de:	4629      	mov	r1, r5
 80048e0:	f7fb ff24 	bl	800072c <__aeabi_ddiv>
 80048e4:	f7fc f8a8 	bl	8000a38 <__aeabi_d2iz>
 80048e8:	4680      	mov	r8, r0
 80048ea:	f7fb fd8b 	bl	8000404 <__aeabi_i2d>
 80048ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048f2:	f7fb fdf1 	bl	80004d8 <__aeabi_dmul>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb fc33 	bl	8000168 <__aeabi_dsub>
 8004902:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004906:	9d08      	ldr	r5, [sp, #32]
 8004908:	f806 4b01 	strb.w	r4, [r6], #1
 800490c:	eba6 040a 	sub.w	r4, r6, sl
 8004910:	42a5      	cmp	r5, r4
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	d133      	bne.n	8004980 <_dtoa_r+0x6e8>
 8004918:	f7fb fc28 	bl	800016c <__adddf3>
 800491c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
 8004924:	f7fc f868 	bl	80009f8 <__aeabi_dcmpgt>
 8004928:	b9c0      	cbnz	r0, 800495c <_dtoa_r+0x6c4>
 800492a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fc f839 	bl	80009a8 <__aeabi_dcmpeq>
 8004936:	b110      	cbz	r0, 800493e <_dtoa_r+0x6a6>
 8004938:	f018 0f01 	tst.w	r8, #1
 800493c:	d10e      	bne.n	800495c <_dtoa_r+0x6c4>
 800493e:	4648      	mov	r0, r9
 8004940:	9903      	ldr	r1, [sp, #12]
 8004942:	f000 fbbb 	bl	80050bc <_Bfree>
 8004946:	2300      	movs	r3, #0
 8004948:	7033      	strb	r3, [r6, #0]
 800494a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800494c:	3701      	adds	r7, #1
 800494e:	601f      	str	r7, [r3, #0]
 8004950:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 824b 	beq.w	8004dee <_dtoa_r+0xb56>
 8004958:	601e      	str	r6, [r3, #0]
 800495a:	e248      	b.n	8004dee <_dtoa_r+0xb56>
 800495c:	46b8      	mov	r8, r7
 800495e:	4633      	mov	r3, r6
 8004960:	461e      	mov	r6, r3
 8004962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004966:	2a39      	cmp	r2, #57	@ 0x39
 8004968:	d106      	bne.n	8004978 <_dtoa_r+0x6e0>
 800496a:	459a      	cmp	sl, r3
 800496c:	d1f8      	bne.n	8004960 <_dtoa_r+0x6c8>
 800496e:	2230      	movs	r2, #48	@ 0x30
 8004970:	f108 0801 	add.w	r8, r8, #1
 8004974:	f88a 2000 	strb.w	r2, [sl]
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	3201      	adds	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e7a0      	b.n	80048c2 <_dtoa_r+0x62a>
 8004980:	2200      	movs	r2, #0
 8004982:	4b6f      	ldr	r3, [pc, #444]	@ (8004b40 <_dtoa_r+0x8a8>)
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	2200      	movs	r2, #0
 800498a:	2300      	movs	r3, #0
 800498c:	4604      	mov	r4, r0
 800498e:	460d      	mov	r5, r1
 8004990:	f7fc f80a 	bl	80009a8 <__aeabi_dcmpeq>
 8004994:	2800      	cmp	r0, #0
 8004996:	d09f      	beq.n	80048d8 <_dtoa_r+0x640>
 8004998:	e7d1      	b.n	800493e <_dtoa_r+0x6a6>
 800499a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800499c:	2a00      	cmp	r2, #0
 800499e:	f000 80ea 	beq.w	8004b76 <_dtoa_r+0x8de>
 80049a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80049a4:	2a01      	cmp	r2, #1
 80049a6:	f300 80cd 	bgt.w	8004b44 <_dtoa_r+0x8ac>
 80049aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	f000 80c1 	beq.w	8004b34 <_dtoa_r+0x89c>
 80049b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80049b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80049b8:	9e04      	ldr	r6, [sp, #16]
 80049ba:	9a04      	ldr	r2, [sp, #16]
 80049bc:	2101      	movs	r1, #1
 80049be:	441a      	add	r2, r3
 80049c0:	9204      	str	r2, [sp, #16]
 80049c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049c4:	4648      	mov	r0, r9
 80049c6:	441a      	add	r2, r3
 80049c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80049ca:	f000 fc75 	bl	80052b8 <__i2b>
 80049ce:	4605      	mov	r5, r0
 80049d0:	b166      	cbz	r6, 80049ec <_dtoa_r+0x754>
 80049d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dd09      	ble.n	80049ec <_dtoa_r+0x754>
 80049d8:	42b3      	cmp	r3, r6
 80049da:	bfa8      	it	ge
 80049dc:	4633      	movge	r3, r6
 80049de:	9a04      	ldr	r2, [sp, #16]
 80049e0:	1af6      	subs	r6, r6, r3
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	9204      	str	r2, [sp, #16]
 80049e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049ee:	b30b      	cbz	r3, 8004a34 <_dtoa_r+0x79c>
 80049f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80c6 	beq.w	8004b84 <_dtoa_r+0x8ec>
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	f000 80c0 	beq.w	8004b7e <_dtoa_r+0x8e6>
 80049fe:	4629      	mov	r1, r5
 8004a00:	4622      	mov	r2, r4
 8004a02:	4648      	mov	r0, r9
 8004a04:	f000 fd10 	bl	8005428 <__pow5mult>
 8004a08:	9a03      	ldr	r2, [sp, #12]
 8004a0a:	4601      	mov	r1, r0
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	4648      	mov	r0, r9
 8004a10:	f000 fc68 	bl	80052e4 <__multiply>
 8004a14:	9903      	ldr	r1, [sp, #12]
 8004a16:	4680      	mov	r8, r0
 8004a18:	4648      	mov	r0, r9
 8004a1a:	f000 fb4f 	bl	80050bc <_Bfree>
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a20:	1b1b      	subs	r3, r3, r4
 8004a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a24:	f000 80b1 	beq.w	8004b8a <_dtoa_r+0x8f2>
 8004a28:	4641      	mov	r1, r8
 8004a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a2c:	4648      	mov	r0, r9
 8004a2e:	f000 fcfb 	bl	8005428 <__pow5mult>
 8004a32:	9003      	str	r0, [sp, #12]
 8004a34:	2101      	movs	r1, #1
 8004a36:	4648      	mov	r0, r9
 8004a38:	f000 fc3e 	bl	80052b8 <__i2b>
 8004a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a3e:	4604      	mov	r4, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 81d8 	beq.w	8004df6 <_dtoa_r+0xb5e>
 8004a46:	461a      	mov	r2, r3
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4648      	mov	r0, r9
 8004a4c:	f000 fcec 	bl	8005428 <__pow5mult>
 8004a50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a52:	4604      	mov	r4, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f300 809f 	bgt.w	8004b98 <_dtoa_r+0x900>
 8004a5a:	9b06      	ldr	r3, [sp, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8097 	bne.w	8004b90 <_dtoa_r+0x8f8>
 8004a62:	9b07      	ldr	r3, [sp, #28]
 8004a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8093 	bne.w	8004b94 <_dtoa_r+0x8fc>
 8004a6e:	9b07      	ldr	r3, [sp, #28]
 8004a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a74:	0d1b      	lsrs	r3, r3, #20
 8004a76:	051b      	lsls	r3, r3, #20
 8004a78:	b133      	cbz	r3, 8004a88 <_dtoa_r+0x7f0>
 8004a7a:	9b04      	ldr	r3, [sp, #16]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	9304      	str	r3, [sp, #16]
 8004a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a82:	3301      	adds	r3, #1
 8004a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a86:	2301      	movs	r3, #1
 8004a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 81b8 	beq.w	8004e02 <_dtoa_r+0xb6a>
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a98:	6918      	ldr	r0, [r3, #16]
 8004a9a:	f000 fbc1 	bl	8005220 <__hi0bits>
 8004a9e:	f1c0 0020 	rsb	r0, r0, #32
 8004aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa4:	4418      	add	r0, r3
 8004aa6:	f010 001f 	ands.w	r0, r0, #31
 8004aaa:	f000 8082 	beq.w	8004bb2 <_dtoa_r+0x91a>
 8004aae:	f1c0 0320 	rsb	r3, r0, #32
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	dd73      	ble.n	8004b9e <_dtoa_r+0x906>
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	f1c0 001c 	rsb	r0, r0, #28
 8004abc:	4403      	add	r3, r0
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac2:	4406      	add	r6, r0
 8004ac4:	4403      	add	r3, r0
 8004ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac8:	9b04      	ldr	r3, [sp, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dd05      	ble.n	8004ada <_dtoa_r+0x842>
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4648      	mov	r0, r9
 8004ad2:	9903      	ldr	r1, [sp, #12]
 8004ad4:	f000 fd02 	bl	80054dc <__lshift>
 8004ad8:	9003      	str	r0, [sp, #12]
 8004ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	dd05      	ble.n	8004aec <_dtoa_r+0x854>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4648      	mov	r0, r9
 8004ae6:	f000 fcf9 	bl	80054dc <__lshift>
 8004aea:	4604      	mov	r4, r0
 8004aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d061      	beq.n	8004bb6 <_dtoa_r+0x91e>
 8004af2:	4621      	mov	r1, r4
 8004af4:	9803      	ldr	r0, [sp, #12]
 8004af6:	f000 fd5d 	bl	80055b4 <__mcmp>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	da5b      	bge.n	8004bb6 <_dtoa_r+0x91e>
 8004afe:	2300      	movs	r3, #0
 8004b00:	220a      	movs	r2, #10
 8004b02:	4648      	mov	r0, r9
 8004b04:	9903      	ldr	r1, [sp, #12]
 8004b06:	f000 fafb 	bl	8005100 <__multadd>
 8004b0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b0c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b10:	9003      	str	r0, [sp, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8177 	beq.w	8004e06 <_dtoa_r+0xb6e>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	220a      	movs	r2, #10
 8004b1e:	4648      	mov	r0, r9
 8004b20:	f000 faee 	bl	8005100 <__multadd>
 8004b24:	f1bb 0f00 	cmp.w	fp, #0
 8004b28:	4605      	mov	r5, r0
 8004b2a:	dc6f      	bgt.n	8004c0c <_dtoa_r+0x974>
 8004b2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	dc49      	bgt.n	8004bc6 <_dtoa_r+0x92e>
 8004b32:	e06b      	b.n	8004c0c <_dtoa_r+0x974>
 8004b34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b3a:	e73c      	b.n	80049b6 <_dtoa_r+0x71e>
 8004b3c:	3fe00000 	.word	0x3fe00000
 8004b40:	40240000 	.word	0x40240000
 8004b44:	9b08      	ldr	r3, [sp, #32]
 8004b46:	1e5c      	subs	r4, r3, #1
 8004b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	db09      	blt.n	8004b62 <_dtoa_r+0x8ca>
 8004b4e:	1b1c      	subs	r4, r3, r4
 8004b50:	9b08      	ldr	r3, [sp, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f6bf af30 	bge.w	80049b8 <_dtoa_r+0x720>
 8004b58:	9b04      	ldr	r3, [sp, #16]
 8004b5a:	9a08      	ldr	r2, [sp, #32]
 8004b5c:	1a9e      	subs	r6, r3, r2
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e72b      	b.n	80049ba <_dtoa_r+0x722>
 8004b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b66:	1ae3      	subs	r3, r4, r3
 8004b68:	441a      	add	r2, r3
 8004b6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b6c:	9e04      	ldr	r6, [sp, #16]
 8004b6e:	2400      	movs	r4, #0
 8004b70:	9b08      	ldr	r3, [sp, #32]
 8004b72:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b74:	e721      	b.n	80049ba <_dtoa_r+0x722>
 8004b76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b78:	9e04      	ldr	r6, [sp, #16]
 8004b7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004b7c:	e728      	b.n	80049d0 <_dtoa_r+0x738>
 8004b7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b82:	e751      	b.n	8004a28 <_dtoa_r+0x790>
 8004b84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b86:	9903      	ldr	r1, [sp, #12]
 8004b88:	e750      	b.n	8004a2c <_dtoa_r+0x794>
 8004b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8e:	e751      	b.n	8004a34 <_dtoa_r+0x79c>
 8004b90:	2300      	movs	r3, #0
 8004b92:	e779      	b.n	8004a88 <_dtoa_r+0x7f0>
 8004b94:	9b06      	ldr	r3, [sp, #24]
 8004b96:	e777      	b.n	8004a88 <_dtoa_r+0x7f0>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b9c:	e779      	b.n	8004a92 <_dtoa_r+0x7fa>
 8004b9e:	d093      	beq.n	8004ac8 <_dtoa_r+0x830>
 8004ba0:	9a04      	ldr	r2, [sp, #16]
 8004ba2:	331c      	adds	r3, #28
 8004ba4:	441a      	add	r2, r3
 8004ba6:	9204      	str	r2, [sp, #16]
 8004ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004baa:	441e      	add	r6, r3
 8004bac:	441a      	add	r2, r3
 8004bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bb0:	e78a      	b.n	8004ac8 <_dtoa_r+0x830>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	e7f4      	b.n	8004ba0 <_dtoa_r+0x908>
 8004bb6:	9b08      	ldr	r3, [sp, #32]
 8004bb8:	46b8      	mov	r8, r7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dc20      	bgt.n	8004c00 <_dtoa_r+0x968>
 8004bbe:	469b      	mov	fp, r3
 8004bc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	dd1e      	ble.n	8004c04 <_dtoa_r+0x96c>
 8004bc6:	f1bb 0f00 	cmp.w	fp, #0
 8004bca:	f47f adb1 	bne.w	8004730 <_dtoa_r+0x498>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	465b      	mov	r3, fp
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	4648      	mov	r0, r9
 8004bd6:	f000 fa93 	bl	8005100 <__multadd>
 8004bda:	4601      	mov	r1, r0
 8004bdc:	4604      	mov	r4, r0
 8004bde:	9803      	ldr	r0, [sp, #12]
 8004be0:	f000 fce8 	bl	80055b4 <__mcmp>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f77f ada3 	ble.w	8004730 <_dtoa_r+0x498>
 8004bea:	4656      	mov	r6, sl
 8004bec:	2331      	movs	r3, #49	@ 0x31
 8004bee:	f108 0801 	add.w	r8, r8, #1
 8004bf2:	f806 3b01 	strb.w	r3, [r6], #1
 8004bf6:	e59f      	b.n	8004738 <_dtoa_r+0x4a0>
 8004bf8:	46b8      	mov	r8, r7
 8004bfa:	9c08      	ldr	r4, [sp, #32]
 8004bfc:	4625      	mov	r5, r4
 8004bfe:	e7f4      	b.n	8004bea <_dtoa_r+0x952>
 8004c00:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004c04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8101 	beq.w	8004e0e <_dtoa_r+0xb76>
 8004c0c:	2e00      	cmp	r6, #0
 8004c0e:	dd05      	ble.n	8004c1c <_dtoa_r+0x984>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4632      	mov	r2, r6
 8004c14:	4648      	mov	r0, r9
 8004c16:	f000 fc61 	bl	80054dc <__lshift>
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d05c      	beq.n	8004cdc <_dtoa_r+0xa44>
 8004c22:	4648      	mov	r0, r9
 8004c24:	6869      	ldr	r1, [r5, #4]
 8004c26:	f000 fa09 	bl	800503c <_Balloc>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b928      	cbnz	r0, 8004c3a <_dtoa_r+0x9a2>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c34:	4b80      	ldr	r3, [pc, #512]	@ (8004e38 <_dtoa_r+0xba0>)
 8004c36:	f7ff bb43 	b.w	80042c0 <_dtoa_r+0x28>
 8004c3a:	692a      	ldr	r2, [r5, #16]
 8004c3c:	f105 010c 	add.w	r1, r5, #12
 8004c40:	3202      	adds	r2, #2
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	300c      	adds	r0, #12
 8004c46:	f001 ff51 	bl	8006aec <memcpy>
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4648      	mov	r0, r9
 8004c50:	f000 fc44 	bl	80054dc <__lshift>
 8004c54:	462f      	mov	r7, r5
 8004c56:	4605      	mov	r5, r0
 8004c58:	f10a 0301 	add.w	r3, sl, #1
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	eb0a 030b 	add.w	r3, sl, fp
 8004c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c64:	9b06      	ldr	r3, [sp, #24]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	9803      	ldr	r0, [sp, #12]
 8004c72:	f103 3bff 	add.w	fp, r3, #4294967295
 8004c76:	f7ff fa85 	bl	8004184 <quorem>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	3330      	adds	r3, #48	@ 0x30
 8004c80:	9006      	str	r0, [sp, #24]
 8004c82:	9803      	ldr	r0, [sp, #12]
 8004c84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c86:	f000 fc95 	bl	80055b4 <__mcmp>
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	9008      	str	r0, [sp, #32]
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4648      	mov	r0, r9
 8004c92:	f000 fcab 	bl	80055ec <__mdiff>
 8004c96:	68c2      	ldr	r2, [r0, #12]
 8004c98:	4606      	mov	r6, r0
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c9c:	bb02      	cbnz	r2, 8004ce0 <_dtoa_r+0xa48>
 8004c9e:	4601      	mov	r1, r0
 8004ca0:	9803      	ldr	r0, [sp, #12]
 8004ca2:	f000 fc87 	bl	80055b4 <__mcmp>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004caa:	4631      	mov	r1, r6
 8004cac:	4648      	mov	r0, r9
 8004cae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004cb2:	f000 fa03 	bl	80050bc <_Bfree>
 8004cb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004cb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004cba:	9e04      	ldr	r6, [sp, #16]
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc2:	4319      	orrs	r1, r3
 8004cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cc6:	d10d      	bne.n	8004ce4 <_dtoa_r+0xa4c>
 8004cc8:	2b39      	cmp	r3, #57	@ 0x39
 8004cca:	d027      	beq.n	8004d1c <_dtoa_r+0xa84>
 8004ccc:	9a08      	ldr	r2, [sp, #32]
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	dd01      	ble.n	8004cd6 <_dtoa_r+0xa3e>
 8004cd2:	9b06      	ldr	r3, [sp, #24]
 8004cd4:	3331      	adds	r3, #49	@ 0x31
 8004cd6:	f88b 3000 	strb.w	r3, [fp]
 8004cda:	e52e      	b.n	800473a <_dtoa_r+0x4a2>
 8004cdc:	4628      	mov	r0, r5
 8004cde:	e7b9      	b.n	8004c54 <_dtoa_r+0x9bc>
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	e7e2      	b.n	8004caa <_dtoa_r+0xa12>
 8004ce4:	9908      	ldr	r1, [sp, #32]
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	db04      	blt.n	8004cf4 <_dtoa_r+0xa5c>
 8004cea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004cec:	4301      	orrs	r1, r0
 8004cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cf0:	4301      	orrs	r1, r0
 8004cf2:	d120      	bne.n	8004d36 <_dtoa_r+0xa9e>
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	ddee      	ble.n	8004cd6 <_dtoa_r+0xa3e>
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	9903      	ldr	r1, [sp, #12]
 8004cfc:	4648      	mov	r0, r9
 8004cfe:	9304      	str	r3, [sp, #16]
 8004d00:	f000 fbec 	bl	80054dc <__lshift>
 8004d04:	4621      	mov	r1, r4
 8004d06:	9003      	str	r0, [sp, #12]
 8004d08:	f000 fc54 	bl	80055b4 <__mcmp>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	dc02      	bgt.n	8004d18 <_dtoa_r+0xa80>
 8004d12:	d1e0      	bne.n	8004cd6 <_dtoa_r+0xa3e>
 8004d14:	07da      	lsls	r2, r3, #31
 8004d16:	d5de      	bpl.n	8004cd6 <_dtoa_r+0xa3e>
 8004d18:	2b39      	cmp	r3, #57	@ 0x39
 8004d1a:	d1da      	bne.n	8004cd2 <_dtoa_r+0xa3a>
 8004d1c:	2339      	movs	r3, #57	@ 0x39
 8004d1e:	f88b 3000 	strb.w	r3, [fp]
 8004d22:	4633      	mov	r3, r6
 8004d24:	461e      	mov	r6, r3
 8004d26:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	2a39      	cmp	r2, #57	@ 0x39
 8004d2e:	d04e      	beq.n	8004dce <_dtoa_r+0xb36>
 8004d30:	3201      	adds	r2, #1
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e501      	b.n	800473a <_dtoa_r+0x4a2>
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	dd03      	ble.n	8004d42 <_dtoa_r+0xaaa>
 8004d3a:	2b39      	cmp	r3, #57	@ 0x39
 8004d3c:	d0ee      	beq.n	8004d1c <_dtoa_r+0xa84>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	e7c9      	b.n	8004cd6 <_dtoa_r+0xa3e>
 8004d42:	9a04      	ldr	r2, [sp, #16]
 8004d44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d4a:	428a      	cmp	r2, r1
 8004d4c:	d028      	beq.n	8004da0 <_dtoa_r+0xb08>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	220a      	movs	r2, #10
 8004d52:	9903      	ldr	r1, [sp, #12]
 8004d54:	4648      	mov	r0, r9
 8004d56:	f000 f9d3 	bl	8005100 <__multadd>
 8004d5a:	42af      	cmp	r7, r5
 8004d5c:	9003      	str	r0, [sp, #12]
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	f04f 020a 	mov.w	r2, #10
 8004d66:	4639      	mov	r1, r7
 8004d68:	4648      	mov	r0, r9
 8004d6a:	d107      	bne.n	8004d7c <_dtoa_r+0xae4>
 8004d6c:	f000 f9c8 	bl	8005100 <__multadd>
 8004d70:	4607      	mov	r7, r0
 8004d72:	4605      	mov	r5, r0
 8004d74:	9b04      	ldr	r3, [sp, #16]
 8004d76:	3301      	adds	r3, #1
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	e777      	b.n	8004c6c <_dtoa_r+0x9d4>
 8004d7c:	f000 f9c0 	bl	8005100 <__multadd>
 8004d80:	4629      	mov	r1, r5
 8004d82:	4607      	mov	r7, r0
 8004d84:	2300      	movs	r3, #0
 8004d86:	220a      	movs	r2, #10
 8004d88:	4648      	mov	r0, r9
 8004d8a:	f000 f9b9 	bl	8005100 <__multadd>
 8004d8e:	4605      	mov	r5, r0
 8004d90:	e7f0      	b.n	8004d74 <_dtoa_r+0xadc>
 8004d92:	f1bb 0f00 	cmp.w	fp, #0
 8004d96:	bfcc      	ite	gt
 8004d98:	465e      	movgt	r6, fp
 8004d9a:	2601      	movle	r6, #1
 8004d9c:	2700      	movs	r7, #0
 8004d9e:	4456      	add	r6, sl
 8004da0:	2201      	movs	r2, #1
 8004da2:	9903      	ldr	r1, [sp, #12]
 8004da4:	4648      	mov	r0, r9
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	f000 fb98 	bl	80054dc <__lshift>
 8004dac:	4621      	mov	r1, r4
 8004dae:	9003      	str	r0, [sp, #12]
 8004db0:	f000 fc00 	bl	80055b4 <__mcmp>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	dcb4      	bgt.n	8004d22 <_dtoa_r+0xa8a>
 8004db8:	d102      	bne.n	8004dc0 <_dtoa_r+0xb28>
 8004dba:	9b04      	ldr	r3, [sp, #16]
 8004dbc:	07db      	lsls	r3, r3, #31
 8004dbe:	d4b0      	bmi.n	8004d22 <_dtoa_r+0xa8a>
 8004dc0:	4633      	mov	r3, r6
 8004dc2:	461e      	mov	r6, r3
 8004dc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dc8:	2a30      	cmp	r2, #48	@ 0x30
 8004dca:	d0fa      	beq.n	8004dc2 <_dtoa_r+0xb2a>
 8004dcc:	e4b5      	b.n	800473a <_dtoa_r+0x4a2>
 8004dce:	459a      	cmp	sl, r3
 8004dd0:	d1a8      	bne.n	8004d24 <_dtoa_r+0xa8c>
 8004dd2:	2331      	movs	r3, #49	@ 0x31
 8004dd4:	f108 0801 	add.w	r8, r8, #1
 8004dd8:	f88a 3000 	strb.w	r3, [sl]
 8004ddc:	e4ad      	b.n	800473a <_dtoa_r+0x4a2>
 8004dde:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004de0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004e3c <_dtoa_r+0xba4>
 8004de4:	b11b      	cbz	r3, 8004dee <_dtoa_r+0xb56>
 8004de6:	f10a 0308 	add.w	r3, sl, #8
 8004dea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4650      	mov	r0, sl
 8004df0:	b017      	add	sp, #92	@ 0x5c
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f77f ae2e 	ble.w	8004a5a <_dtoa_r+0x7c2>
 8004dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e02:	2001      	movs	r0, #1
 8004e04:	e64d      	b.n	8004aa2 <_dtoa_r+0x80a>
 8004e06:	f1bb 0f00 	cmp.w	fp, #0
 8004e0a:	f77f aed9 	ble.w	8004bc0 <_dtoa_r+0x928>
 8004e0e:	4656      	mov	r6, sl
 8004e10:	4621      	mov	r1, r4
 8004e12:	9803      	ldr	r0, [sp, #12]
 8004e14:	f7ff f9b6 	bl	8004184 <quorem>
 8004e18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004e1c:	f806 3b01 	strb.w	r3, [r6], #1
 8004e20:	eba6 020a 	sub.w	r2, r6, sl
 8004e24:	4593      	cmp	fp, r2
 8004e26:	ddb4      	ble.n	8004d92 <_dtoa_r+0xafa>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	220a      	movs	r2, #10
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	9903      	ldr	r1, [sp, #12]
 8004e30:	f000 f966 	bl	8005100 <__multadd>
 8004e34:	9003      	str	r0, [sp, #12]
 8004e36:	e7eb      	b.n	8004e10 <_dtoa_r+0xb78>
 8004e38:	08007a0f 	.word	0x08007a0f
 8004e3c:	08007993 	.word	0x08007993

08004e40 <_free_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4605      	mov	r5, r0
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d040      	beq.n	8004eca <_free_r+0x8a>
 8004e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4c:	1f0c      	subs	r4, r1, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfb8      	it	lt
 8004e52:	18e4      	addlt	r4, r4, r3
 8004e54:	f000 f8e6 	bl	8005024 <__malloc_lock>
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <_free_r+0x8c>)
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	b933      	cbnz	r3, 8004e6c <_free_r+0x2c>
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	6014      	str	r4, [r2, #0]
 8004e62:	4628      	mov	r0, r5
 8004e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e68:	f000 b8e2 	b.w	8005030 <__malloc_unlock>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d908      	bls.n	8004e82 <_free_r+0x42>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	1821      	adds	r1, r4, r0
 8004e74:	428b      	cmp	r3, r1
 8004e76:	bf01      	itttt	eq
 8004e78:	6819      	ldreq	r1, [r3, #0]
 8004e7a:	685b      	ldreq	r3, [r3, #4]
 8004e7c:	1809      	addeq	r1, r1, r0
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	e7ed      	b.n	8004e5e <_free_r+0x1e>
 8004e82:	461a      	mov	r2, r3
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b10b      	cbz	r3, 8004e8c <_free_r+0x4c>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d9fa      	bls.n	8004e82 <_free_r+0x42>
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	1850      	adds	r0, r2, r1
 8004e90:	42a0      	cmp	r0, r4
 8004e92:	d10b      	bne.n	8004eac <_free_r+0x6c>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	4401      	add	r1, r0
 8004e98:	1850      	adds	r0, r2, r1
 8004e9a:	4283      	cmp	r3, r0
 8004e9c:	6011      	str	r1, [r2, #0]
 8004e9e:	d1e0      	bne.n	8004e62 <_free_r+0x22>
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4408      	add	r0, r1
 8004ea6:	6010      	str	r0, [r2, #0]
 8004ea8:	6053      	str	r3, [r2, #4]
 8004eaa:	e7da      	b.n	8004e62 <_free_r+0x22>
 8004eac:	d902      	bls.n	8004eb4 <_free_r+0x74>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	e7d6      	b.n	8004e62 <_free_r+0x22>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	1821      	adds	r1, r4, r0
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	bf01      	itttt	eq
 8004ebc:	6819      	ldreq	r1, [r3, #0]
 8004ebe:	685b      	ldreq	r3, [r3, #4]
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6063      	str	r3, [r4, #4]
 8004ec6:	6054      	str	r4, [r2, #4]
 8004ec8:	e7cb      	b.n	8004e62 <_free_r+0x22>
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	200003b4 	.word	0x200003b4

08004ed0 <malloc>:
 8004ed0:	4b02      	ldr	r3, [pc, #8]	@ (8004edc <malloc+0xc>)
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f000 b825 	b.w	8004f24 <_malloc_r>
 8004eda:	bf00      	nop
 8004edc:	20000018 	.word	0x20000018

08004ee0 <sbrk_aligned>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4e0f      	ldr	r6, [pc, #60]	@ (8004f20 <sbrk_aligned+0x40>)
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	6831      	ldr	r1, [r6, #0]
 8004ee8:	4605      	mov	r5, r0
 8004eea:	b911      	cbnz	r1, 8004ef2 <sbrk_aligned+0x12>
 8004eec:	f001 fdee 	bl	8006acc <_sbrk_r>
 8004ef0:	6030      	str	r0, [r6, #0]
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f001 fde9 	bl	8006acc <_sbrk_r>
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	d103      	bne.n	8004f06 <sbrk_aligned+0x26>
 8004efe:	f04f 34ff 	mov.w	r4, #4294967295
 8004f02:	4620      	mov	r0, r4
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	1cc4      	adds	r4, r0, #3
 8004f08:	f024 0403 	bic.w	r4, r4, #3
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d0f8      	beq.n	8004f02 <sbrk_aligned+0x22>
 8004f10:	1a21      	subs	r1, r4, r0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f001 fdda 	bl	8006acc <_sbrk_r>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d1f2      	bne.n	8004f02 <sbrk_aligned+0x22>
 8004f1c:	e7ef      	b.n	8004efe <sbrk_aligned+0x1e>
 8004f1e:	bf00      	nop
 8004f20:	200003b0 	.word	0x200003b0

08004f24 <_malloc_r>:
 8004f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f28:	1ccd      	adds	r5, r1, #3
 8004f2a:	f025 0503 	bic.w	r5, r5, #3
 8004f2e:	3508      	adds	r5, #8
 8004f30:	2d0c      	cmp	r5, #12
 8004f32:	bf38      	it	cc
 8004f34:	250c      	movcc	r5, #12
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	4606      	mov	r6, r0
 8004f3a:	db01      	blt.n	8004f40 <_malloc_r+0x1c>
 8004f3c:	42a9      	cmp	r1, r5
 8004f3e:	d904      	bls.n	8004f4a <_malloc_r+0x26>
 8004f40:	230c      	movs	r3, #12
 8004f42:	6033      	str	r3, [r6, #0]
 8004f44:	2000      	movs	r0, #0
 8004f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005020 <_malloc_r+0xfc>
 8004f4e:	f000 f869 	bl	8005024 <__malloc_lock>
 8004f52:	f8d8 3000 	ldr.w	r3, [r8]
 8004f56:	461c      	mov	r4, r3
 8004f58:	bb44      	cbnz	r4, 8004fac <_malloc_r+0x88>
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7ff ffbf 	bl	8004ee0 <sbrk_aligned>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	4604      	mov	r4, r0
 8004f66:	d158      	bne.n	800501a <_malloc_r+0xf6>
 8004f68:	f8d8 4000 	ldr.w	r4, [r8]
 8004f6c:	4627      	mov	r7, r4
 8004f6e:	2f00      	cmp	r7, #0
 8004f70:	d143      	bne.n	8004ffa <_malloc_r+0xd6>
 8004f72:	2c00      	cmp	r4, #0
 8004f74:	d04b      	beq.n	800500e <_malloc_r+0xea>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	eb04 0903 	add.w	r9, r4, r3
 8004f80:	f001 fda4 	bl	8006acc <_sbrk_r>
 8004f84:	4581      	cmp	r9, r0
 8004f86:	d142      	bne.n	800500e <_malloc_r+0xea>
 8004f88:	6821      	ldr	r1, [r4, #0]
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	1a6d      	subs	r5, r5, r1
 8004f8e:	4629      	mov	r1, r5
 8004f90:	f7ff ffa6 	bl	8004ee0 <sbrk_aligned>
 8004f94:	3001      	adds	r0, #1
 8004f96:	d03a      	beq.n	800500e <_malloc_r+0xea>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	442b      	add	r3, r5
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	bb62      	cbnz	r2, 8005000 <_malloc_r+0xdc>
 8004fa6:	f8c8 7000 	str.w	r7, [r8]
 8004faa:	e00f      	b.n	8004fcc <_malloc_r+0xa8>
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	1b52      	subs	r2, r2, r5
 8004fb0:	d420      	bmi.n	8004ff4 <_malloc_r+0xd0>
 8004fb2:	2a0b      	cmp	r2, #11
 8004fb4:	d917      	bls.n	8004fe6 <_malloc_r+0xc2>
 8004fb6:	1961      	adds	r1, r4, r5
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	6025      	str	r5, [r4, #0]
 8004fbc:	bf18      	it	ne
 8004fbe:	6059      	strne	r1, [r3, #4]
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	bf08      	it	eq
 8004fc4:	f8c8 1000 	streq.w	r1, [r8]
 8004fc8:	5162      	str	r2, [r4, r5]
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f000 f82f 	bl	8005030 <__malloc_unlock>
 8004fd2:	f104 000b 	add.w	r0, r4, #11
 8004fd6:	1d23      	adds	r3, r4, #4
 8004fd8:	f020 0007 	bic.w	r0, r0, #7
 8004fdc:	1ac2      	subs	r2, r0, r3
 8004fde:	bf1c      	itt	ne
 8004fe0:	1a1b      	subne	r3, r3, r0
 8004fe2:	50a3      	strne	r3, [r4, r2]
 8004fe4:	e7af      	b.n	8004f46 <_malloc_r+0x22>
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	bf0c      	ite	eq
 8004fec:	f8c8 2000 	streq.w	r2, [r8]
 8004ff0:	605a      	strne	r2, [r3, #4]
 8004ff2:	e7eb      	b.n	8004fcc <_malloc_r+0xa8>
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	6864      	ldr	r4, [r4, #4]
 8004ff8:	e7ae      	b.n	8004f58 <_malloc_r+0x34>
 8004ffa:	463c      	mov	r4, r7
 8004ffc:	687f      	ldr	r7, [r7, #4]
 8004ffe:	e7b6      	b.n	8004f6e <_malloc_r+0x4a>
 8005000:	461a      	mov	r2, r3
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	42a3      	cmp	r3, r4
 8005006:	d1fb      	bne.n	8005000 <_malloc_r+0xdc>
 8005008:	2300      	movs	r3, #0
 800500a:	6053      	str	r3, [r2, #4]
 800500c:	e7de      	b.n	8004fcc <_malloc_r+0xa8>
 800500e:	230c      	movs	r3, #12
 8005010:	4630      	mov	r0, r6
 8005012:	6033      	str	r3, [r6, #0]
 8005014:	f000 f80c 	bl	8005030 <__malloc_unlock>
 8005018:	e794      	b.n	8004f44 <_malloc_r+0x20>
 800501a:	6005      	str	r5, [r0, #0]
 800501c:	e7d6      	b.n	8004fcc <_malloc_r+0xa8>
 800501e:	bf00      	nop
 8005020:	200003b4 	.word	0x200003b4

08005024 <__malloc_lock>:
 8005024:	4801      	ldr	r0, [pc, #4]	@ (800502c <__malloc_lock+0x8>)
 8005026:	f7ff b898 	b.w	800415a <__retarget_lock_acquire_recursive>
 800502a:	bf00      	nop
 800502c:	200003ac 	.word	0x200003ac

08005030 <__malloc_unlock>:
 8005030:	4801      	ldr	r0, [pc, #4]	@ (8005038 <__malloc_unlock+0x8>)
 8005032:	f7ff b893 	b.w	800415c <__retarget_lock_release_recursive>
 8005036:	bf00      	nop
 8005038:	200003ac 	.word	0x200003ac

0800503c <_Balloc>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	69c6      	ldr	r6, [r0, #28]
 8005040:	4604      	mov	r4, r0
 8005042:	460d      	mov	r5, r1
 8005044:	b976      	cbnz	r6, 8005064 <_Balloc+0x28>
 8005046:	2010      	movs	r0, #16
 8005048:	f7ff ff42 	bl	8004ed0 <malloc>
 800504c:	4602      	mov	r2, r0
 800504e:	61e0      	str	r0, [r4, #28]
 8005050:	b920      	cbnz	r0, 800505c <_Balloc+0x20>
 8005052:	216b      	movs	r1, #107	@ 0x6b
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <_Balloc+0x78>)
 8005056:	4818      	ldr	r0, [pc, #96]	@ (80050b8 <_Balloc+0x7c>)
 8005058:	f001 fd5c 	bl	8006b14 <__assert_func>
 800505c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005060:	6006      	str	r6, [r0, #0]
 8005062:	60c6      	str	r6, [r0, #12]
 8005064:	69e6      	ldr	r6, [r4, #28]
 8005066:	68f3      	ldr	r3, [r6, #12]
 8005068:	b183      	cbz	r3, 800508c <_Balloc+0x50>
 800506a:	69e3      	ldr	r3, [r4, #28]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005072:	b9b8      	cbnz	r0, 80050a4 <_Balloc+0x68>
 8005074:	2101      	movs	r1, #1
 8005076:	fa01 f605 	lsl.w	r6, r1, r5
 800507a:	1d72      	adds	r2, r6, #5
 800507c:	4620      	mov	r0, r4
 800507e:	0092      	lsls	r2, r2, #2
 8005080:	f001 fd66 	bl	8006b50 <_calloc_r>
 8005084:	b160      	cbz	r0, 80050a0 <_Balloc+0x64>
 8005086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800508a:	e00e      	b.n	80050aa <_Balloc+0x6e>
 800508c:	2221      	movs	r2, #33	@ 0x21
 800508e:	2104      	movs	r1, #4
 8005090:	4620      	mov	r0, r4
 8005092:	f001 fd5d 	bl	8006b50 <_calloc_r>
 8005096:	69e3      	ldr	r3, [r4, #28]
 8005098:	60f0      	str	r0, [r6, #12]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e4      	bne.n	800506a <_Balloc+0x2e>
 80050a0:	2000      	movs	r0, #0
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	6802      	ldr	r2, [r0, #0]
 80050a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050aa:	2300      	movs	r3, #0
 80050ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050b0:	e7f7      	b.n	80050a2 <_Balloc+0x66>
 80050b2:	bf00      	nop
 80050b4:	080079a0 	.word	0x080079a0
 80050b8:	08007a20 	.word	0x08007a20

080050bc <_Bfree>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	69c6      	ldr	r6, [r0, #28]
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b976      	cbnz	r6, 80050e4 <_Bfree+0x28>
 80050c6:	2010      	movs	r0, #16
 80050c8:	f7ff ff02 	bl	8004ed0 <malloc>
 80050cc:	4602      	mov	r2, r0
 80050ce:	61e8      	str	r0, [r5, #28]
 80050d0:	b920      	cbnz	r0, 80050dc <_Bfree+0x20>
 80050d2:	218f      	movs	r1, #143	@ 0x8f
 80050d4:	4b08      	ldr	r3, [pc, #32]	@ (80050f8 <_Bfree+0x3c>)
 80050d6:	4809      	ldr	r0, [pc, #36]	@ (80050fc <_Bfree+0x40>)
 80050d8:	f001 fd1c 	bl	8006b14 <__assert_func>
 80050dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050e0:	6006      	str	r6, [r0, #0]
 80050e2:	60c6      	str	r6, [r0, #12]
 80050e4:	b13c      	cbz	r4, 80050f6 <_Bfree+0x3a>
 80050e6:	69eb      	ldr	r3, [r5, #28]
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050f0:	6021      	str	r1, [r4, #0]
 80050f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	080079a0 	.word	0x080079a0
 80050fc:	08007a20 	.word	0x08007a20

08005100 <__multadd>:
 8005100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005104:	4607      	mov	r7, r0
 8005106:	460c      	mov	r4, r1
 8005108:	461e      	mov	r6, r3
 800510a:	2000      	movs	r0, #0
 800510c:	690d      	ldr	r5, [r1, #16]
 800510e:	f101 0c14 	add.w	ip, r1, #20
 8005112:	f8dc 3000 	ldr.w	r3, [ip]
 8005116:	3001      	adds	r0, #1
 8005118:	b299      	uxth	r1, r3
 800511a:	fb02 6101 	mla	r1, r2, r1, r6
 800511e:	0c1e      	lsrs	r6, r3, #16
 8005120:	0c0b      	lsrs	r3, r1, #16
 8005122:	fb02 3306 	mla	r3, r2, r6, r3
 8005126:	b289      	uxth	r1, r1
 8005128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800512c:	4285      	cmp	r5, r0
 800512e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005132:	f84c 1b04 	str.w	r1, [ip], #4
 8005136:	dcec      	bgt.n	8005112 <__multadd+0x12>
 8005138:	b30e      	cbz	r6, 800517e <__multadd+0x7e>
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	42ab      	cmp	r3, r5
 800513e:	dc19      	bgt.n	8005174 <__multadd+0x74>
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4638      	mov	r0, r7
 8005144:	3101      	adds	r1, #1
 8005146:	f7ff ff79 	bl	800503c <_Balloc>
 800514a:	4680      	mov	r8, r0
 800514c:	b928      	cbnz	r0, 800515a <__multadd+0x5a>
 800514e:	4602      	mov	r2, r0
 8005150:	21ba      	movs	r1, #186	@ 0xba
 8005152:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <__multadd+0x84>)
 8005154:	480c      	ldr	r0, [pc, #48]	@ (8005188 <__multadd+0x88>)
 8005156:	f001 fcdd 	bl	8006b14 <__assert_func>
 800515a:	6922      	ldr	r2, [r4, #16]
 800515c:	f104 010c 	add.w	r1, r4, #12
 8005160:	3202      	adds	r2, #2
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	300c      	adds	r0, #12
 8005166:	f001 fcc1 	bl	8006aec <memcpy>
 800516a:	4621      	mov	r1, r4
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff ffa5 	bl	80050bc <_Bfree>
 8005172:	4644      	mov	r4, r8
 8005174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005178:	3501      	adds	r5, #1
 800517a:	615e      	str	r6, [r3, #20]
 800517c:	6125      	str	r5, [r4, #16]
 800517e:	4620      	mov	r0, r4
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	08007a0f 	.word	0x08007a0f
 8005188:	08007a20 	.word	0x08007a20

0800518c <__s2b>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	4615      	mov	r5, r2
 8005192:	2209      	movs	r2, #9
 8005194:	461f      	mov	r7, r3
 8005196:	3308      	adds	r3, #8
 8005198:	460c      	mov	r4, r1
 800519a:	fb93 f3f2 	sdiv	r3, r3, r2
 800519e:	4606      	mov	r6, r0
 80051a0:	2201      	movs	r2, #1
 80051a2:	2100      	movs	r1, #0
 80051a4:	429a      	cmp	r2, r3
 80051a6:	db09      	blt.n	80051bc <__s2b+0x30>
 80051a8:	4630      	mov	r0, r6
 80051aa:	f7ff ff47 	bl	800503c <_Balloc>
 80051ae:	b940      	cbnz	r0, 80051c2 <__s2b+0x36>
 80051b0:	4602      	mov	r2, r0
 80051b2:	21d3      	movs	r1, #211	@ 0xd3
 80051b4:	4b18      	ldr	r3, [pc, #96]	@ (8005218 <__s2b+0x8c>)
 80051b6:	4819      	ldr	r0, [pc, #100]	@ (800521c <__s2b+0x90>)
 80051b8:	f001 fcac 	bl	8006b14 <__assert_func>
 80051bc:	0052      	lsls	r2, r2, #1
 80051be:	3101      	adds	r1, #1
 80051c0:	e7f0      	b.n	80051a4 <__s2b+0x18>
 80051c2:	9b08      	ldr	r3, [sp, #32]
 80051c4:	2d09      	cmp	r5, #9
 80051c6:	6143      	str	r3, [r0, #20]
 80051c8:	f04f 0301 	mov.w	r3, #1
 80051cc:	6103      	str	r3, [r0, #16]
 80051ce:	dd16      	ble.n	80051fe <__s2b+0x72>
 80051d0:	f104 0909 	add.w	r9, r4, #9
 80051d4:	46c8      	mov	r8, r9
 80051d6:	442c      	add	r4, r5
 80051d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80051dc:	4601      	mov	r1, r0
 80051de:	220a      	movs	r2, #10
 80051e0:	4630      	mov	r0, r6
 80051e2:	3b30      	subs	r3, #48	@ 0x30
 80051e4:	f7ff ff8c 	bl	8005100 <__multadd>
 80051e8:	45a0      	cmp	r8, r4
 80051ea:	d1f5      	bne.n	80051d8 <__s2b+0x4c>
 80051ec:	f1a5 0408 	sub.w	r4, r5, #8
 80051f0:	444c      	add	r4, r9
 80051f2:	1b2d      	subs	r5, r5, r4
 80051f4:	1963      	adds	r3, r4, r5
 80051f6:	42bb      	cmp	r3, r7
 80051f8:	db04      	blt.n	8005204 <__s2b+0x78>
 80051fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051fe:	2509      	movs	r5, #9
 8005200:	340a      	adds	r4, #10
 8005202:	e7f6      	b.n	80051f2 <__s2b+0x66>
 8005204:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005208:	4601      	mov	r1, r0
 800520a:	220a      	movs	r2, #10
 800520c:	4630      	mov	r0, r6
 800520e:	3b30      	subs	r3, #48	@ 0x30
 8005210:	f7ff ff76 	bl	8005100 <__multadd>
 8005214:	e7ee      	b.n	80051f4 <__s2b+0x68>
 8005216:	bf00      	nop
 8005218:	08007a0f 	.word	0x08007a0f
 800521c:	08007a20 	.word	0x08007a20

08005220 <__hi0bits>:
 8005220:	4603      	mov	r3, r0
 8005222:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005226:	bf3a      	itte	cc
 8005228:	0403      	lslcc	r3, r0, #16
 800522a:	2010      	movcc	r0, #16
 800522c:	2000      	movcs	r0, #0
 800522e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005232:	bf3c      	itt	cc
 8005234:	021b      	lslcc	r3, r3, #8
 8005236:	3008      	addcc	r0, #8
 8005238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800523c:	bf3c      	itt	cc
 800523e:	011b      	lslcc	r3, r3, #4
 8005240:	3004      	addcc	r0, #4
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005246:	bf3c      	itt	cc
 8005248:	009b      	lslcc	r3, r3, #2
 800524a:	3002      	addcc	r0, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	db05      	blt.n	800525c <__hi0bits+0x3c>
 8005250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005254:	f100 0001 	add.w	r0, r0, #1
 8005258:	bf08      	it	eq
 800525a:	2020      	moveq	r0, #32
 800525c:	4770      	bx	lr

0800525e <__lo0bits>:
 800525e:	6803      	ldr	r3, [r0, #0]
 8005260:	4602      	mov	r2, r0
 8005262:	f013 0007 	ands.w	r0, r3, #7
 8005266:	d00b      	beq.n	8005280 <__lo0bits+0x22>
 8005268:	07d9      	lsls	r1, r3, #31
 800526a:	d421      	bmi.n	80052b0 <__lo0bits+0x52>
 800526c:	0798      	lsls	r0, r3, #30
 800526e:	bf49      	itett	mi
 8005270:	085b      	lsrmi	r3, r3, #1
 8005272:	089b      	lsrpl	r3, r3, #2
 8005274:	2001      	movmi	r0, #1
 8005276:	6013      	strmi	r3, [r2, #0]
 8005278:	bf5c      	itt	pl
 800527a:	2002      	movpl	r0, #2
 800527c:	6013      	strpl	r3, [r2, #0]
 800527e:	4770      	bx	lr
 8005280:	b299      	uxth	r1, r3
 8005282:	b909      	cbnz	r1, 8005288 <__lo0bits+0x2a>
 8005284:	2010      	movs	r0, #16
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	b2d9      	uxtb	r1, r3
 800528a:	b909      	cbnz	r1, 8005290 <__lo0bits+0x32>
 800528c:	3008      	adds	r0, #8
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	0719      	lsls	r1, r3, #28
 8005292:	bf04      	itt	eq
 8005294:	091b      	lsreq	r3, r3, #4
 8005296:	3004      	addeq	r0, #4
 8005298:	0799      	lsls	r1, r3, #30
 800529a:	bf04      	itt	eq
 800529c:	089b      	lsreq	r3, r3, #2
 800529e:	3002      	addeq	r0, #2
 80052a0:	07d9      	lsls	r1, r3, #31
 80052a2:	d403      	bmi.n	80052ac <__lo0bits+0x4e>
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	f100 0001 	add.w	r0, r0, #1
 80052aa:	d003      	beq.n	80052b4 <__lo0bits+0x56>
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4770      	bx	lr
 80052b0:	2000      	movs	r0, #0
 80052b2:	4770      	bx	lr
 80052b4:	2020      	movs	r0, #32
 80052b6:	4770      	bx	lr

080052b8 <__i2b>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	2101      	movs	r1, #1
 80052be:	f7ff febd 	bl	800503c <_Balloc>
 80052c2:	4602      	mov	r2, r0
 80052c4:	b928      	cbnz	r0, 80052d2 <__i2b+0x1a>
 80052c6:	f240 1145 	movw	r1, #325	@ 0x145
 80052ca:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <__i2b+0x24>)
 80052cc:	4804      	ldr	r0, [pc, #16]	@ (80052e0 <__i2b+0x28>)
 80052ce:	f001 fc21 	bl	8006b14 <__assert_func>
 80052d2:	2301      	movs	r3, #1
 80052d4:	6144      	str	r4, [r0, #20]
 80052d6:	6103      	str	r3, [r0, #16]
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	bf00      	nop
 80052dc:	08007a0f 	.word	0x08007a0f
 80052e0:	08007a20 	.word	0x08007a20

080052e4 <__multiply>:
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	4617      	mov	r7, r2
 80052ea:	690a      	ldr	r2, [r1, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4689      	mov	r9, r1
 80052f0:	429a      	cmp	r2, r3
 80052f2:	bfa2      	ittt	ge
 80052f4:	463b      	movge	r3, r7
 80052f6:	460f      	movge	r7, r1
 80052f8:	4699      	movge	r9, r3
 80052fa:	693d      	ldr	r5, [r7, #16]
 80052fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	eb05 060a 	add.w	r6, r5, sl
 8005308:	42b3      	cmp	r3, r6
 800530a:	b085      	sub	sp, #20
 800530c:	bfb8      	it	lt
 800530e:	3101      	addlt	r1, #1
 8005310:	f7ff fe94 	bl	800503c <_Balloc>
 8005314:	b930      	cbnz	r0, 8005324 <__multiply+0x40>
 8005316:	4602      	mov	r2, r0
 8005318:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800531c:	4b40      	ldr	r3, [pc, #256]	@ (8005420 <__multiply+0x13c>)
 800531e:	4841      	ldr	r0, [pc, #260]	@ (8005424 <__multiply+0x140>)
 8005320:	f001 fbf8 	bl	8006b14 <__assert_func>
 8005324:	f100 0414 	add.w	r4, r0, #20
 8005328:	4623      	mov	r3, r4
 800532a:	2200      	movs	r2, #0
 800532c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005330:	4573      	cmp	r3, lr
 8005332:	d320      	bcc.n	8005376 <__multiply+0x92>
 8005334:	f107 0814 	add.w	r8, r7, #20
 8005338:	f109 0114 	add.w	r1, r9, #20
 800533c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005340:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005344:	9302      	str	r3, [sp, #8]
 8005346:	1beb      	subs	r3, r5, r7
 8005348:	3b15      	subs	r3, #21
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	3304      	adds	r3, #4
 8005350:	3715      	adds	r7, #21
 8005352:	42bd      	cmp	r5, r7
 8005354:	bf38      	it	cc
 8005356:	2304      	movcc	r3, #4
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	9b02      	ldr	r3, [sp, #8]
 800535c:	9103      	str	r1, [sp, #12]
 800535e:	428b      	cmp	r3, r1
 8005360:	d80c      	bhi.n	800537c <__multiply+0x98>
 8005362:	2e00      	cmp	r6, #0
 8005364:	dd03      	ble.n	800536e <__multiply+0x8a>
 8005366:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800536a:	2b00      	cmp	r3, #0
 800536c:	d055      	beq.n	800541a <__multiply+0x136>
 800536e:	6106      	str	r6, [r0, #16]
 8005370:	b005      	add	sp, #20
 8005372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005376:	f843 2b04 	str.w	r2, [r3], #4
 800537a:	e7d9      	b.n	8005330 <__multiply+0x4c>
 800537c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005380:	f1ba 0f00 	cmp.w	sl, #0
 8005384:	d01f      	beq.n	80053c6 <__multiply+0xe2>
 8005386:	46c4      	mov	ip, r8
 8005388:	46a1      	mov	r9, r4
 800538a:	2700      	movs	r7, #0
 800538c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005390:	f8d9 3000 	ldr.w	r3, [r9]
 8005394:	fa1f fb82 	uxth.w	fp, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	fb0a 330b 	mla	r3, sl, fp, r3
 800539e:	443b      	add	r3, r7
 80053a0:	f8d9 7000 	ldr.w	r7, [r9]
 80053a4:	0c12      	lsrs	r2, r2, #16
 80053a6:	0c3f      	lsrs	r7, r7, #16
 80053a8:	fb0a 7202 	mla	r2, sl, r2, r7
 80053ac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b6:	4565      	cmp	r5, ip
 80053b8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80053bc:	f849 3b04 	str.w	r3, [r9], #4
 80053c0:	d8e4      	bhi.n	800538c <__multiply+0xa8>
 80053c2:	9b01      	ldr	r3, [sp, #4]
 80053c4:	50e7      	str	r7, [r4, r3]
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	3104      	adds	r1, #4
 80053ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80053ce:	f1b9 0f00 	cmp.w	r9, #0
 80053d2:	d020      	beq.n	8005416 <__multiply+0x132>
 80053d4:	4647      	mov	r7, r8
 80053d6:	46a4      	mov	ip, r4
 80053d8:	f04f 0a00 	mov.w	sl, #0
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f8b7 b000 	ldrh.w	fp, [r7]
 80053e2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	fb09 220b 	mla	r2, r9, fp, r2
 80053ec:	4452      	add	r2, sl
 80053ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053f2:	f84c 3b04 	str.w	r3, [ip], #4
 80053f6:	f857 3b04 	ldr.w	r3, [r7], #4
 80053fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053fe:	f8bc 3000 	ldrh.w	r3, [ip]
 8005402:	42bd      	cmp	r5, r7
 8005404:	fb09 330a 	mla	r3, r9, sl, r3
 8005408:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800540c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005410:	d8e5      	bhi.n	80053de <__multiply+0xfa>
 8005412:	9a01      	ldr	r2, [sp, #4]
 8005414:	50a3      	str	r3, [r4, r2]
 8005416:	3404      	adds	r4, #4
 8005418:	e79f      	b.n	800535a <__multiply+0x76>
 800541a:	3e01      	subs	r6, #1
 800541c:	e7a1      	b.n	8005362 <__multiply+0x7e>
 800541e:	bf00      	nop
 8005420:	08007a0f 	.word	0x08007a0f
 8005424:	08007a20 	.word	0x08007a20

08005428 <__pow5mult>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4615      	mov	r5, r2
 800542e:	f012 0203 	ands.w	r2, r2, #3
 8005432:	4607      	mov	r7, r0
 8005434:	460e      	mov	r6, r1
 8005436:	d007      	beq.n	8005448 <__pow5mult+0x20>
 8005438:	4c25      	ldr	r4, [pc, #148]	@ (80054d0 <__pow5mult+0xa8>)
 800543a:	3a01      	subs	r2, #1
 800543c:	2300      	movs	r3, #0
 800543e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005442:	f7ff fe5d 	bl	8005100 <__multadd>
 8005446:	4606      	mov	r6, r0
 8005448:	10ad      	asrs	r5, r5, #2
 800544a:	d03d      	beq.n	80054c8 <__pow5mult+0xa0>
 800544c:	69fc      	ldr	r4, [r7, #28]
 800544e:	b97c      	cbnz	r4, 8005470 <__pow5mult+0x48>
 8005450:	2010      	movs	r0, #16
 8005452:	f7ff fd3d 	bl	8004ed0 <malloc>
 8005456:	4602      	mov	r2, r0
 8005458:	61f8      	str	r0, [r7, #28]
 800545a:	b928      	cbnz	r0, 8005468 <__pow5mult+0x40>
 800545c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005460:	4b1c      	ldr	r3, [pc, #112]	@ (80054d4 <__pow5mult+0xac>)
 8005462:	481d      	ldr	r0, [pc, #116]	@ (80054d8 <__pow5mult+0xb0>)
 8005464:	f001 fb56 	bl	8006b14 <__assert_func>
 8005468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800546c:	6004      	str	r4, [r0, #0]
 800546e:	60c4      	str	r4, [r0, #12]
 8005470:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005478:	b94c      	cbnz	r4, 800548e <__pow5mult+0x66>
 800547a:	f240 2171 	movw	r1, #625	@ 0x271
 800547e:	4638      	mov	r0, r7
 8005480:	f7ff ff1a 	bl	80052b8 <__i2b>
 8005484:	2300      	movs	r3, #0
 8005486:	4604      	mov	r4, r0
 8005488:	f8c8 0008 	str.w	r0, [r8, #8]
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	07eb      	lsls	r3, r5, #31
 8005494:	d50a      	bpl.n	80054ac <__pow5mult+0x84>
 8005496:	4631      	mov	r1, r6
 8005498:	4622      	mov	r2, r4
 800549a:	4638      	mov	r0, r7
 800549c:	f7ff ff22 	bl	80052e4 <__multiply>
 80054a0:	4680      	mov	r8, r0
 80054a2:	4631      	mov	r1, r6
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff fe09 	bl	80050bc <_Bfree>
 80054aa:	4646      	mov	r6, r8
 80054ac:	106d      	asrs	r5, r5, #1
 80054ae:	d00b      	beq.n	80054c8 <__pow5mult+0xa0>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	b938      	cbnz	r0, 80054c4 <__pow5mult+0x9c>
 80054b4:	4622      	mov	r2, r4
 80054b6:	4621      	mov	r1, r4
 80054b8:	4638      	mov	r0, r7
 80054ba:	f7ff ff13 	bl	80052e4 <__multiply>
 80054be:	6020      	str	r0, [r4, #0]
 80054c0:	f8c0 9000 	str.w	r9, [r0]
 80054c4:	4604      	mov	r4, r0
 80054c6:	e7e4      	b.n	8005492 <__pow5mult+0x6a>
 80054c8:	4630      	mov	r0, r6
 80054ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ce:	bf00      	nop
 80054d0:	08007b30 	.word	0x08007b30
 80054d4:	080079a0 	.word	0x080079a0
 80054d8:	08007a20 	.word	0x08007a20

080054dc <__lshift>:
 80054dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	4607      	mov	r7, r0
 80054e4:	4691      	mov	r9, r2
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	6849      	ldr	r1, [r1, #4]
 80054ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054f4:	f108 0601 	add.w	r6, r8, #1
 80054f8:	42b3      	cmp	r3, r6
 80054fa:	db0b      	blt.n	8005514 <__lshift+0x38>
 80054fc:	4638      	mov	r0, r7
 80054fe:	f7ff fd9d 	bl	800503c <_Balloc>
 8005502:	4605      	mov	r5, r0
 8005504:	b948      	cbnz	r0, 800551a <__lshift+0x3e>
 8005506:	4602      	mov	r2, r0
 8005508:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800550c:	4b27      	ldr	r3, [pc, #156]	@ (80055ac <__lshift+0xd0>)
 800550e:	4828      	ldr	r0, [pc, #160]	@ (80055b0 <__lshift+0xd4>)
 8005510:	f001 fb00 	bl	8006b14 <__assert_func>
 8005514:	3101      	adds	r1, #1
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	e7ee      	b.n	80054f8 <__lshift+0x1c>
 800551a:	2300      	movs	r3, #0
 800551c:	f100 0114 	add.w	r1, r0, #20
 8005520:	f100 0210 	add.w	r2, r0, #16
 8005524:	4618      	mov	r0, r3
 8005526:	4553      	cmp	r3, sl
 8005528:	db33      	blt.n	8005592 <__lshift+0xb6>
 800552a:	6920      	ldr	r0, [r4, #16]
 800552c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005530:	f104 0314 	add.w	r3, r4, #20
 8005534:	f019 091f 	ands.w	r9, r9, #31
 8005538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800553c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005540:	d02b      	beq.n	800559a <__lshift+0xbe>
 8005542:	468a      	mov	sl, r1
 8005544:	2200      	movs	r2, #0
 8005546:	f1c9 0e20 	rsb	lr, r9, #32
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	fa00 f009 	lsl.w	r0, r0, r9
 8005550:	4310      	orrs	r0, r2
 8005552:	f84a 0b04 	str.w	r0, [sl], #4
 8005556:	f853 2b04 	ldr.w	r2, [r3], #4
 800555a:	459c      	cmp	ip, r3
 800555c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005560:	d8f3      	bhi.n	800554a <__lshift+0x6e>
 8005562:	ebac 0304 	sub.w	r3, ip, r4
 8005566:	3b15      	subs	r3, #21
 8005568:	f023 0303 	bic.w	r3, r3, #3
 800556c:	3304      	adds	r3, #4
 800556e:	f104 0015 	add.w	r0, r4, #21
 8005572:	4560      	cmp	r0, ip
 8005574:	bf88      	it	hi
 8005576:	2304      	movhi	r3, #4
 8005578:	50ca      	str	r2, [r1, r3]
 800557a:	b10a      	cbz	r2, 8005580 <__lshift+0xa4>
 800557c:	f108 0602 	add.w	r6, r8, #2
 8005580:	3e01      	subs	r6, #1
 8005582:	4638      	mov	r0, r7
 8005584:	4621      	mov	r1, r4
 8005586:	612e      	str	r6, [r5, #16]
 8005588:	f7ff fd98 	bl	80050bc <_Bfree>
 800558c:	4628      	mov	r0, r5
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	f842 0f04 	str.w	r0, [r2, #4]!
 8005596:	3301      	adds	r3, #1
 8005598:	e7c5      	b.n	8005526 <__lshift+0x4a>
 800559a:	3904      	subs	r1, #4
 800559c:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a0:	459c      	cmp	ip, r3
 80055a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80055a6:	d8f9      	bhi.n	800559c <__lshift+0xc0>
 80055a8:	e7ea      	b.n	8005580 <__lshift+0xa4>
 80055aa:	bf00      	nop
 80055ac:	08007a0f 	.word	0x08007a0f
 80055b0:	08007a20 	.word	0x08007a20

080055b4 <__mcmp>:
 80055b4:	4603      	mov	r3, r0
 80055b6:	690a      	ldr	r2, [r1, #16]
 80055b8:	6900      	ldr	r0, [r0, #16]
 80055ba:	b530      	push	{r4, r5, lr}
 80055bc:	1a80      	subs	r0, r0, r2
 80055be:	d10e      	bne.n	80055de <__mcmp+0x2a>
 80055c0:	3314      	adds	r3, #20
 80055c2:	3114      	adds	r1, #20
 80055c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80055c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80055cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80055d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80055d4:	4295      	cmp	r5, r2
 80055d6:	d003      	beq.n	80055e0 <__mcmp+0x2c>
 80055d8:	d205      	bcs.n	80055e6 <__mcmp+0x32>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	bd30      	pop	{r4, r5, pc}
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	d3f3      	bcc.n	80055cc <__mcmp+0x18>
 80055e4:	e7fb      	b.n	80055de <__mcmp+0x2a>
 80055e6:	2001      	movs	r0, #1
 80055e8:	e7f9      	b.n	80055de <__mcmp+0x2a>
	...

080055ec <__mdiff>:
 80055ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f0:	4689      	mov	r9, r1
 80055f2:	4606      	mov	r6, r0
 80055f4:	4611      	mov	r1, r2
 80055f6:	4648      	mov	r0, r9
 80055f8:	4614      	mov	r4, r2
 80055fa:	f7ff ffdb 	bl	80055b4 <__mcmp>
 80055fe:	1e05      	subs	r5, r0, #0
 8005600:	d112      	bne.n	8005628 <__mdiff+0x3c>
 8005602:	4629      	mov	r1, r5
 8005604:	4630      	mov	r0, r6
 8005606:	f7ff fd19 	bl	800503c <_Balloc>
 800560a:	4602      	mov	r2, r0
 800560c:	b928      	cbnz	r0, 800561a <__mdiff+0x2e>
 800560e:	f240 2137 	movw	r1, #567	@ 0x237
 8005612:	4b3e      	ldr	r3, [pc, #248]	@ (800570c <__mdiff+0x120>)
 8005614:	483e      	ldr	r0, [pc, #248]	@ (8005710 <__mdiff+0x124>)
 8005616:	f001 fa7d 	bl	8006b14 <__assert_func>
 800561a:	2301      	movs	r3, #1
 800561c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005620:	4610      	mov	r0, r2
 8005622:	b003      	add	sp, #12
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	bfbc      	itt	lt
 800562a:	464b      	movlt	r3, r9
 800562c:	46a1      	movlt	r9, r4
 800562e:	4630      	mov	r0, r6
 8005630:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005634:	bfba      	itte	lt
 8005636:	461c      	movlt	r4, r3
 8005638:	2501      	movlt	r5, #1
 800563a:	2500      	movge	r5, #0
 800563c:	f7ff fcfe 	bl	800503c <_Balloc>
 8005640:	4602      	mov	r2, r0
 8005642:	b918      	cbnz	r0, 800564c <__mdiff+0x60>
 8005644:	f240 2145 	movw	r1, #581	@ 0x245
 8005648:	4b30      	ldr	r3, [pc, #192]	@ (800570c <__mdiff+0x120>)
 800564a:	e7e3      	b.n	8005614 <__mdiff+0x28>
 800564c:	f100 0b14 	add.w	fp, r0, #20
 8005650:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005654:	f109 0310 	add.w	r3, r9, #16
 8005658:	60c5      	str	r5, [r0, #12]
 800565a:	f04f 0c00 	mov.w	ip, #0
 800565e:	f109 0514 	add.w	r5, r9, #20
 8005662:	46d9      	mov	r9, fp
 8005664:	6926      	ldr	r6, [r4, #16]
 8005666:	f104 0e14 	add.w	lr, r4, #20
 800566a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800566e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	9b01      	ldr	r3, [sp, #4]
 8005676:	f85e 0b04 	ldr.w	r0, [lr], #4
 800567a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800567e:	b281      	uxth	r1, r0
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	fa1f f38a 	uxth.w	r3, sl
 8005686:	1a5b      	subs	r3, r3, r1
 8005688:	0c00      	lsrs	r0, r0, #16
 800568a:	4463      	add	r3, ip
 800568c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005690:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800569a:	4576      	cmp	r6, lr
 800569c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056a0:	f849 3b04 	str.w	r3, [r9], #4
 80056a4:	d8e6      	bhi.n	8005674 <__mdiff+0x88>
 80056a6:	1b33      	subs	r3, r6, r4
 80056a8:	3b15      	subs	r3, #21
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	3415      	adds	r4, #21
 80056b0:	3304      	adds	r3, #4
 80056b2:	42a6      	cmp	r6, r4
 80056b4:	bf38      	it	cc
 80056b6:	2304      	movcc	r3, #4
 80056b8:	441d      	add	r5, r3
 80056ba:	445b      	add	r3, fp
 80056bc:	461e      	mov	r6, r3
 80056be:	462c      	mov	r4, r5
 80056c0:	4544      	cmp	r4, r8
 80056c2:	d30e      	bcc.n	80056e2 <__mdiff+0xf6>
 80056c4:	f108 0103 	add.w	r1, r8, #3
 80056c8:	1b49      	subs	r1, r1, r5
 80056ca:	f021 0103 	bic.w	r1, r1, #3
 80056ce:	3d03      	subs	r5, #3
 80056d0:	45a8      	cmp	r8, r5
 80056d2:	bf38      	it	cc
 80056d4:	2100      	movcc	r1, #0
 80056d6:	440b      	add	r3, r1
 80056d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80056dc:	b199      	cbz	r1, 8005706 <__mdiff+0x11a>
 80056de:	6117      	str	r7, [r2, #16]
 80056e0:	e79e      	b.n	8005620 <__mdiff+0x34>
 80056e2:	46e6      	mov	lr, ip
 80056e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80056e8:	fa1f fc81 	uxth.w	ip, r1
 80056ec:	44f4      	add	ip, lr
 80056ee:	0c08      	lsrs	r0, r1, #16
 80056f0:	4471      	add	r1, lr
 80056f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80056f6:	b289      	uxth	r1, r1
 80056f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80056fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005700:	f846 1b04 	str.w	r1, [r6], #4
 8005704:	e7dc      	b.n	80056c0 <__mdiff+0xd4>
 8005706:	3f01      	subs	r7, #1
 8005708:	e7e6      	b.n	80056d8 <__mdiff+0xec>
 800570a:	bf00      	nop
 800570c:	08007a0f 	.word	0x08007a0f
 8005710:	08007a20 	.word	0x08007a20

08005714 <__ulp>:
 8005714:	4b0e      	ldr	r3, [pc, #56]	@ (8005750 <__ulp+0x3c>)
 8005716:	400b      	ands	r3, r1
 8005718:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800571c:	2b00      	cmp	r3, #0
 800571e:	dc08      	bgt.n	8005732 <__ulp+0x1e>
 8005720:	425b      	negs	r3, r3
 8005722:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005726:	ea4f 5223 	mov.w	r2, r3, asr #20
 800572a:	da04      	bge.n	8005736 <__ulp+0x22>
 800572c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005730:	4113      	asrs	r3, r2
 8005732:	2200      	movs	r2, #0
 8005734:	e008      	b.n	8005748 <__ulp+0x34>
 8005736:	f1a2 0314 	sub.w	r3, r2, #20
 800573a:	2b1e      	cmp	r3, #30
 800573c:	bfd6      	itet	le
 800573e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005742:	2201      	movgt	r2, #1
 8005744:	40da      	lsrle	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	7ff00000 	.word	0x7ff00000

08005754 <__b2d>:
 8005754:	6902      	ldr	r2, [r0, #16]
 8005756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005758:	f100 0614 	add.w	r6, r0, #20
 800575c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005760:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005764:	4f1e      	ldr	r7, [pc, #120]	@ (80057e0 <__b2d+0x8c>)
 8005766:	4620      	mov	r0, r4
 8005768:	f7ff fd5a 	bl	8005220 <__hi0bits>
 800576c:	4603      	mov	r3, r0
 800576e:	f1c0 0020 	rsb	r0, r0, #32
 8005772:	2b0a      	cmp	r3, #10
 8005774:	f1a2 0504 	sub.w	r5, r2, #4
 8005778:	6008      	str	r0, [r1, #0]
 800577a:	dc12      	bgt.n	80057a2 <__b2d+0x4e>
 800577c:	42ae      	cmp	r6, r5
 800577e:	bf2c      	ite	cs
 8005780:	2200      	movcs	r2, #0
 8005782:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005786:	f1c3 0c0b 	rsb	ip, r3, #11
 800578a:	3315      	adds	r3, #21
 800578c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005790:	fa04 f303 	lsl.w	r3, r4, r3
 8005794:	fa22 f20c 	lsr.w	r2, r2, ip
 8005798:	ea4e 0107 	orr.w	r1, lr, r7
 800579c:	431a      	orrs	r2, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a2:	42ae      	cmp	r6, r5
 80057a4:	bf36      	itet	cc
 80057a6:	f1a2 0508 	subcc.w	r5, r2, #8
 80057aa:	2200      	movcs	r2, #0
 80057ac:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80057b0:	3b0b      	subs	r3, #11
 80057b2:	d012      	beq.n	80057da <__b2d+0x86>
 80057b4:	f1c3 0720 	rsb	r7, r3, #32
 80057b8:	fa22 f107 	lsr.w	r1, r2, r7
 80057bc:	409c      	lsls	r4, r3
 80057be:	430c      	orrs	r4, r1
 80057c0:	42b5      	cmp	r5, r6
 80057c2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80057c6:	bf94      	ite	ls
 80057c8:	2400      	movls	r4, #0
 80057ca:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80057ce:	409a      	lsls	r2, r3
 80057d0:	40fc      	lsrs	r4, r7
 80057d2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80057d6:	4322      	orrs	r2, r4
 80057d8:	e7e1      	b.n	800579e <__b2d+0x4a>
 80057da:	ea44 0107 	orr.w	r1, r4, r7
 80057de:	e7de      	b.n	800579e <__b2d+0x4a>
 80057e0:	3ff00000 	.word	0x3ff00000

080057e4 <__d2b>:
 80057e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80057e8:	2101      	movs	r1, #1
 80057ea:	4690      	mov	r8, r2
 80057ec:	4699      	mov	r9, r3
 80057ee:	9e08      	ldr	r6, [sp, #32]
 80057f0:	f7ff fc24 	bl	800503c <_Balloc>
 80057f4:	4604      	mov	r4, r0
 80057f6:	b930      	cbnz	r0, 8005806 <__d2b+0x22>
 80057f8:	4602      	mov	r2, r0
 80057fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80057fe:	4b23      	ldr	r3, [pc, #140]	@ (800588c <__d2b+0xa8>)
 8005800:	4823      	ldr	r0, [pc, #140]	@ (8005890 <__d2b+0xac>)
 8005802:	f001 f987 	bl	8006b14 <__assert_func>
 8005806:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800580a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800580e:	b10d      	cbz	r5, 8005814 <__d2b+0x30>
 8005810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	f1b8 0300 	subs.w	r3, r8, #0
 800581a:	d024      	beq.n	8005866 <__d2b+0x82>
 800581c:	4668      	mov	r0, sp
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	f7ff fd1d 	bl	800525e <__lo0bits>
 8005824:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005828:	b1d8      	cbz	r0, 8005862 <__d2b+0x7e>
 800582a:	f1c0 0320 	rsb	r3, r0, #32
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	430b      	orrs	r3, r1
 8005834:	40c2      	lsrs	r2, r0
 8005836:	6163      	str	r3, [r4, #20]
 8005838:	9201      	str	r2, [sp, #4]
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf0c      	ite	eq
 8005840:	2201      	moveq	r2, #1
 8005842:	2202      	movne	r2, #2
 8005844:	61a3      	str	r3, [r4, #24]
 8005846:	6122      	str	r2, [r4, #16]
 8005848:	b1ad      	cbz	r5, 8005876 <__d2b+0x92>
 800584a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800584e:	4405      	add	r5, r0
 8005850:	6035      	str	r5, [r6, #0]
 8005852:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005858:	6018      	str	r0, [r3, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	b002      	add	sp, #8
 800585e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005862:	6161      	str	r1, [r4, #20]
 8005864:	e7e9      	b.n	800583a <__d2b+0x56>
 8005866:	a801      	add	r0, sp, #4
 8005868:	f7ff fcf9 	bl	800525e <__lo0bits>
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	6163      	str	r3, [r4, #20]
 8005872:	3020      	adds	r0, #32
 8005874:	e7e7      	b.n	8005846 <__d2b+0x62>
 8005876:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800587a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800587e:	6030      	str	r0, [r6, #0]
 8005880:	6918      	ldr	r0, [r3, #16]
 8005882:	f7ff fccd 	bl	8005220 <__hi0bits>
 8005886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800588a:	e7e4      	b.n	8005856 <__d2b+0x72>
 800588c:	08007a0f 	.word	0x08007a0f
 8005890:	08007a20 	.word	0x08007a20

08005894 <__ratio>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	b085      	sub	sp, #20
 800589a:	e9cd 1000 	strd	r1, r0, [sp]
 800589e:	a902      	add	r1, sp, #8
 80058a0:	f7ff ff58 	bl	8005754 <__b2d>
 80058a4:	468b      	mov	fp, r1
 80058a6:	4606      	mov	r6, r0
 80058a8:	460f      	mov	r7, r1
 80058aa:	9800      	ldr	r0, [sp, #0]
 80058ac:	a903      	add	r1, sp, #12
 80058ae:	f7ff ff51 	bl	8005754 <__b2d>
 80058b2:	460d      	mov	r5, r1
 80058b4:	9b01      	ldr	r3, [sp, #4]
 80058b6:	4689      	mov	r9, r1
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	9b00      	ldr	r3, [sp, #0]
 80058bc:	4604      	mov	r4, r0
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4630      	mov	r0, r6
 80058c2:	1ac9      	subs	r1, r1, r3
 80058c4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfcd      	iteet	gt
 80058d2:	463a      	movgt	r2, r7
 80058d4:	462a      	movle	r2, r5
 80058d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80058da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80058de:	bfd8      	it	le
 80058e0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80058e4:	464b      	mov	r3, r9
 80058e6:	4622      	mov	r2, r4
 80058e8:	4659      	mov	r1, fp
 80058ea:	f7fa ff1f 	bl	800072c <__aeabi_ddiv>
 80058ee:	b005      	add	sp, #20
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058f4 <__copybits>:
 80058f4:	3901      	subs	r1, #1
 80058f6:	b570      	push	{r4, r5, r6, lr}
 80058f8:	1149      	asrs	r1, r1, #5
 80058fa:	6914      	ldr	r4, [r2, #16]
 80058fc:	3101      	adds	r1, #1
 80058fe:	f102 0314 	add.w	r3, r2, #20
 8005902:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005906:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800590a:	1f05      	subs	r5, r0, #4
 800590c:	42a3      	cmp	r3, r4
 800590e:	d30c      	bcc.n	800592a <__copybits+0x36>
 8005910:	1aa3      	subs	r3, r4, r2
 8005912:	3b11      	subs	r3, #17
 8005914:	f023 0303 	bic.w	r3, r3, #3
 8005918:	3211      	adds	r2, #17
 800591a:	42a2      	cmp	r2, r4
 800591c:	bf88      	it	hi
 800591e:	2300      	movhi	r3, #0
 8005920:	4418      	add	r0, r3
 8005922:	2300      	movs	r3, #0
 8005924:	4288      	cmp	r0, r1
 8005926:	d305      	bcc.n	8005934 <__copybits+0x40>
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	f853 6b04 	ldr.w	r6, [r3], #4
 800592e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005932:	e7eb      	b.n	800590c <__copybits+0x18>
 8005934:	f840 3b04 	str.w	r3, [r0], #4
 8005938:	e7f4      	b.n	8005924 <__copybits+0x30>

0800593a <__any_on>:
 800593a:	f100 0214 	add.w	r2, r0, #20
 800593e:	6900      	ldr	r0, [r0, #16]
 8005940:	114b      	asrs	r3, r1, #5
 8005942:	4298      	cmp	r0, r3
 8005944:	b510      	push	{r4, lr}
 8005946:	db11      	blt.n	800596c <__any_on+0x32>
 8005948:	dd0a      	ble.n	8005960 <__any_on+0x26>
 800594a:	f011 011f 	ands.w	r1, r1, #31
 800594e:	d007      	beq.n	8005960 <__any_on+0x26>
 8005950:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005954:	fa24 f001 	lsr.w	r0, r4, r1
 8005958:	fa00 f101 	lsl.w	r1, r0, r1
 800595c:	428c      	cmp	r4, r1
 800595e:	d10b      	bne.n	8005978 <__any_on+0x3e>
 8005960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005964:	4293      	cmp	r3, r2
 8005966:	d803      	bhi.n	8005970 <__any_on+0x36>
 8005968:	2000      	movs	r0, #0
 800596a:	bd10      	pop	{r4, pc}
 800596c:	4603      	mov	r3, r0
 800596e:	e7f7      	b.n	8005960 <__any_on+0x26>
 8005970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005974:	2900      	cmp	r1, #0
 8005976:	d0f5      	beq.n	8005964 <__any_on+0x2a>
 8005978:	2001      	movs	r0, #1
 800597a:	e7f6      	b.n	800596a <__any_on+0x30>

0800597c <sulp>:
 800597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005980:	460f      	mov	r7, r1
 8005982:	4690      	mov	r8, r2
 8005984:	f7ff fec6 	bl	8005714 <__ulp>
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	f1b8 0f00 	cmp.w	r8, #0
 8005990:	d011      	beq.n	80059b6 <sulp+0x3a>
 8005992:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005996:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800599a:	2b00      	cmp	r3, #0
 800599c:	dd0b      	ble.n	80059b6 <sulp+0x3a>
 800599e:	2400      	movs	r4, #0
 80059a0:	051b      	lsls	r3, r3, #20
 80059a2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80059a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	f7fa fd93 	bl	80004d8 <__aeabi_dmul>
 80059b2:	4604      	mov	r4, r0
 80059b4:	460d      	mov	r5, r1
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080059c0 <_strtod_l>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	b09f      	sub	sp, #124	@ 0x7c
 80059c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80059c8:	2200      	movs	r2, #0
 80059ca:	460c      	mov	r4, r1
 80059cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80059ce:	f04f 0a00 	mov.w	sl, #0
 80059d2:	f04f 0b00 	mov.w	fp, #0
 80059d6:	460a      	mov	r2, r1
 80059d8:	9005      	str	r0, [sp, #20]
 80059da:	9219      	str	r2, [sp, #100]	@ 0x64
 80059dc:	7811      	ldrb	r1, [r2, #0]
 80059de:	292b      	cmp	r1, #43	@ 0x2b
 80059e0:	d048      	beq.n	8005a74 <_strtod_l+0xb4>
 80059e2:	d836      	bhi.n	8005a52 <_strtod_l+0x92>
 80059e4:	290d      	cmp	r1, #13
 80059e6:	d830      	bhi.n	8005a4a <_strtod_l+0x8a>
 80059e8:	2908      	cmp	r1, #8
 80059ea:	d830      	bhi.n	8005a4e <_strtod_l+0x8e>
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d039      	beq.n	8005a64 <_strtod_l+0xa4>
 80059f0:	2200      	movs	r2, #0
 80059f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80059f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80059f6:	782a      	ldrb	r2, [r5, #0]
 80059f8:	2a30      	cmp	r2, #48	@ 0x30
 80059fa:	f040 80b0 	bne.w	8005b5e <_strtod_l+0x19e>
 80059fe:	786a      	ldrb	r2, [r5, #1]
 8005a00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a04:	2a58      	cmp	r2, #88	@ 0x58
 8005a06:	d16c      	bne.n	8005ae2 <_strtod_l+0x122>
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a0c:	4a8f      	ldr	r2, [pc, #572]	@ (8005c4c <_strtod_l+0x28c>)
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	9805      	ldr	r0, [sp, #20]
 8005a16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a18:	a919      	add	r1, sp, #100	@ 0x64
 8005a1a:	f001 f915 	bl	8006c48 <__gethex>
 8005a1e:	f010 060f 	ands.w	r6, r0, #15
 8005a22:	4604      	mov	r4, r0
 8005a24:	d005      	beq.n	8005a32 <_strtod_l+0x72>
 8005a26:	2e06      	cmp	r6, #6
 8005a28:	d126      	bne.n	8005a78 <_strtod_l+0xb8>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005a30:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 8582 	bne.w	800653e <_strtod_l+0xb7e>
 8005a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a3c:	b1bb      	cbz	r3, 8005a6e <_strtod_l+0xae>
 8005a3e:	4650      	mov	r0, sl
 8005a40:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005a44:	b01f      	add	sp, #124	@ 0x7c
 8005a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4a:	2920      	cmp	r1, #32
 8005a4c:	d1d0      	bne.n	80059f0 <_strtod_l+0x30>
 8005a4e:	3201      	adds	r2, #1
 8005a50:	e7c3      	b.n	80059da <_strtod_l+0x1a>
 8005a52:	292d      	cmp	r1, #45	@ 0x2d
 8005a54:	d1cc      	bne.n	80059f0 <_strtod_l+0x30>
 8005a56:	2101      	movs	r1, #1
 8005a58:	910e      	str	r1, [sp, #56]	@ 0x38
 8005a5a:	1c51      	adds	r1, r2, #1
 8005a5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a5e:	7852      	ldrb	r2, [r2, #1]
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d1c7      	bne.n	80059f4 <_strtod_l+0x34>
 8005a64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a66:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 8566 	bne.w	800653a <_strtod_l+0xb7a>
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	e7e7      	b.n	8005a44 <_strtod_l+0x84>
 8005a74:	2100      	movs	r1, #0
 8005a76:	e7ef      	b.n	8005a58 <_strtod_l+0x98>
 8005a78:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a7a:	b13a      	cbz	r2, 8005a8c <_strtod_l+0xcc>
 8005a7c:	2135      	movs	r1, #53	@ 0x35
 8005a7e:	a81c      	add	r0, sp, #112	@ 0x70
 8005a80:	f7ff ff38 	bl	80058f4 <__copybits>
 8005a84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a86:	9805      	ldr	r0, [sp, #20]
 8005a88:	f7ff fb18 	bl	80050bc <_Bfree>
 8005a8c:	3e01      	subs	r6, #1
 8005a8e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005a90:	2e04      	cmp	r6, #4
 8005a92:	d806      	bhi.n	8005aa2 <_strtod_l+0xe2>
 8005a94:	e8df f006 	tbb	[pc, r6]
 8005a98:	201d0314 	.word	0x201d0314
 8005a9c:	14          	.byte	0x14
 8005a9d:	00          	.byte	0x00
 8005a9e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005aa2:	05e1      	lsls	r1, r4, #23
 8005aa4:	bf48      	it	mi
 8005aa6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005aaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005aae:	0d1b      	lsrs	r3, r3, #20
 8005ab0:	051b      	lsls	r3, r3, #20
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1bd      	bne.n	8005a32 <_strtod_l+0x72>
 8005ab6:	f7fe fb25 	bl	8004104 <__errno>
 8005aba:	2322      	movs	r3, #34	@ 0x22
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	e7b8      	b.n	8005a32 <_strtod_l+0x72>
 8005ac0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005ac4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ac8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005acc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ad0:	e7e7      	b.n	8005aa2 <_strtod_l+0xe2>
 8005ad2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005c50 <_strtod_l+0x290>
 8005ad6:	e7e4      	b.n	8005aa2 <_strtod_l+0xe2>
 8005ad8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005adc:	f04f 3aff 	mov.w	sl, #4294967295
 8005ae0:	e7df      	b.n	8005aa2 <_strtod_l+0xe2>
 8005ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	2b30      	cmp	r3, #48	@ 0x30
 8005aec:	d0f9      	beq.n	8005ae2 <_strtod_l+0x122>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d09f      	beq.n	8005a32 <_strtod_l+0x72>
 8005af2:	2301      	movs	r3, #1
 8005af4:	2700      	movs	r7, #0
 8005af6:	220a      	movs	r2, #10
 8005af8:	46b9      	mov	r9, r7
 8005afa:	9308      	str	r3, [sp, #32]
 8005afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005afe:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005b00:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b02:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b04:	7805      	ldrb	r5, [r0, #0]
 8005b06:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b0a:	b2d9      	uxtb	r1, r3
 8005b0c:	2909      	cmp	r1, #9
 8005b0e:	d928      	bls.n	8005b62 <_strtod_l+0x1a2>
 8005b10:	2201      	movs	r2, #1
 8005b12:	4950      	ldr	r1, [pc, #320]	@ (8005c54 <_strtod_l+0x294>)
 8005b14:	f000 ffc8 	bl	8006aa8 <strncmp>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d032      	beq.n	8005b82 <_strtod_l+0x1c2>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4603      	mov	r3, r0
 8005b22:	464d      	mov	r5, r9
 8005b24:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b26:	2a65      	cmp	r2, #101	@ 0x65
 8005b28:	d001      	beq.n	8005b2e <_strtod_l+0x16e>
 8005b2a:	2a45      	cmp	r2, #69	@ 0x45
 8005b2c:	d114      	bne.n	8005b58 <_strtod_l+0x198>
 8005b2e:	b91d      	cbnz	r5, 8005b38 <_strtod_l+0x178>
 8005b30:	9a08      	ldr	r2, [sp, #32]
 8005b32:	4302      	orrs	r2, r0
 8005b34:	d096      	beq.n	8005a64 <_strtod_l+0xa4>
 8005b36:	2500      	movs	r5, #0
 8005b38:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005b3a:	1c62      	adds	r2, r4, #1
 8005b3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b3e:	7862      	ldrb	r2, [r4, #1]
 8005b40:	2a2b      	cmp	r2, #43	@ 0x2b
 8005b42:	d07a      	beq.n	8005c3a <_strtod_l+0x27a>
 8005b44:	2a2d      	cmp	r2, #45	@ 0x2d
 8005b46:	d07e      	beq.n	8005c46 <_strtod_l+0x286>
 8005b48:	f04f 0c00 	mov.w	ip, #0
 8005b4c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005b50:	2909      	cmp	r1, #9
 8005b52:	f240 8085 	bls.w	8005c60 <_strtod_l+0x2a0>
 8005b56:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	e0a5      	b.n	8005caa <_strtod_l+0x2ea>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e7c8      	b.n	8005af4 <_strtod_l+0x134>
 8005b62:	f1b9 0f08 	cmp.w	r9, #8
 8005b66:	bfd8      	it	le
 8005b68:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005b6a:	f100 0001 	add.w	r0, r0, #1
 8005b6e:	bfd6      	itet	le
 8005b70:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b74:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005b78:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005b7a:	f109 0901 	add.w	r9, r9, #1
 8005b7e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b80:	e7bf      	b.n	8005b02 <_strtod_l+0x142>
 8005b82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b88:	785a      	ldrb	r2, [r3, #1]
 8005b8a:	f1b9 0f00 	cmp.w	r9, #0
 8005b8e:	d03b      	beq.n	8005c08 <_strtod_l+0x248>
 8005b90:	464d      	mov	r5, r9
 8005b92:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b94:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d912      	bls.n	8005bc2 <_strtod_l+0x202>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e7c2      	b.n	8005b26 <_strtod_l+0x166>
 8005ba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ba8:	785a      	ldrb	r2, [r3, #1]
 8005baa:	2a30      	cmp	r2, #48	@ 0x30
 8005bac:	d0f8      	beq.n	8005ba0 <_strtod_l+0x1e0>
 8005bae:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	f200 84c8 	bhi.w	8006548 <_strtod_l+0xb88>
 8005bb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8005bba:	2000      	movs	r0, #0
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bc2:	3a30      	subs	r2, #48	@ 0x30
 8005bc4:	f100 0301 	add.w	r3, r0, #1
 8005bc8:	d018      	beq.n	8005bfc <_strtod_l+0x23c>
 8005bca:	462e      	mov	r6, r5
 8005bcc:	f04f 0e0a 	mov.w	lr, #10
 8005bd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bd2:	4419      	add	r1, r3
 8005bd4:	910a      	str	r1, [sp, #40]	@ 0x28
 8005bd6:	1c71      	adds	r1, r6, #1
 8005bd8:	eba1 0c05 	sub.w	ip, r1, r5
 8005bdc:	4563      	cmp	r3, ip
 8005bde:	dc15      	bgt.n	8005c0c <_strtod_l+0x24c>
 8005be0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005be4:	182b      	adds	r3, r5, r0
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	f105 0501 	add.w	r5, r5, #1
 8005bec:	4405      	add	r5, r0
 8005bee:	dc1a      	bgt.n	8005c26 <_strtod_l+0x266>
 8005bf0:	230a      	movs	r3, #10
 8005bf2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bf4:	fb03 2301 	mla	r3, r3, r1, r2
 8005bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005bfe:	4618      	mov	r0, r3
 8005c00:	1c51      	adds	r1, r2, #1
 8005c02:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c04:	7852      	ldrb	r2, [r2, #1]
 8005c06:	e7c5      	b.n	8005b94 <_strtod_l+0x1d4>
 8005c08:	4648      	mov	r0, r9
 8005c0a:	e7ce      	b.n	8005baa <_strtod_l+0x1ea>
 8005c0c:	2e08      	cmp	r6, #8
 8005c0e:	dc05      	bgt.n	8005c1c <_strtod_l+0x25c>
 8005c10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005c12:	fb0e f606 	mul.w	r6, lr, r6
 8005c16:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005c18:	460e      	mov	r6, r1
 8005c1a:	e7dc      	b.n	8005bd6 <_strtod_l+0x216>
 8005c1c:	2910      	cmp	r1, #16
 8005c1e:	bfd8      	it	le
 8005c20:	fb0e f707 	mulle.w	r7, lr, r7
 8005c24:	e7f8      	b.n	8005c18 <_strtod_l+0x258>
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	bfdc      	itt	le
 8005c2a:	230a      	movle	r3, #10
 8005c2c:	fb03 2707 	mlale	r7, r3, r7, r2
 8005c30:	e7e3      	b.n	8005bfa <_strtod_l+0x23a>
 8005c32:	2300      	movs	r3, #0
 8005c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c36:	2301      	movs	r3, #1
 8005c38:	e77a      	b.n	8005b30 <_strtod_l+0x170>
 8005c3a:	f04f 0c00 	mov.w	ip, #0
 8005c3e:	1ca2      	adds	r2, r4, #2
 8005c40:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c42:	78a2      	ldrb	r2, [r4, #2]
 8005c44:	e782      	b.n	8005b4c <_strtod_l+0x18c>
 8005c46:	f04f 0c01 	mov.w	ip, #1
 8005c4a:	e7f8      	b.n	8005c3e <_strtod_l+0x27e>
 8005c4c:	08007c44 	.word	0x08007c44
 8005c50:	7ff00000 	.word	0x7ff00000
 8005c54:	08007a79 	.word	0x08007a79
 8005c58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c5a:	1c51      	adds	r1, r2, #1
 8005c5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c5e:	7852      	ldrb	r2, [r2, #1]
 8005c60:	2a30      	cmp	r2, #48	@ 0x30
 8005c62:	d0f9      	beq.n	8005c58 <_strtod_l+0x298>
 8005c64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005c68:	2908      	cmp	r1, #8
 8005c6a:	f63f af75 	bhi.w	8005b58 <_strtod_l+0x198>
 8005c6e:	f04f 080a 	mov.w	r8, #10
 8005c72:	3a30      	subs	r2, #48	@ 0x30
 8005c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c78:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005c7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c7c:	1c56      	adds	r6, r2, #1
 8005c7e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005c80:	7852      	ldrb	r2, [r2, #1]
 8005c82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005c86:	f1be 0f09 	cmp.w	lr, #9
 8005c8a:	d939      	bls.n	8005d00 <_strtod_l+0x340>
 8005c8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005c92:	1a76      	subs	r6, r6, r1
 8005c94:	2e08      	cmp	r6, #8
 8005c96:	dc03      	bgt.n	8005ca0 <_strtod_l+0x2e0>
 8005c98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c9a:	4588      	cmp	r8, r1
 8005c9c:	bfa8      	it	ge
 8005c9e:	4688      	movge	r8, r1
 8005ca0:	f1bc 0f00 	cmp.w	ip, #0
 8005ca4:	d001      	beq.n	8005caa <_strtod_l+0x2ea>
 8005ca6:	f1c8 0800 	rsb	r8, r8, #0
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	d14e      	bne.n	8005d4c <_strtod_l+0x38c>
 8005cae:	9908      	ldr	r1, [sp, #32]
 8005cb0:	4308      	orrs	r0, r1
 8005cb2:	f47f aebe 	bne.w	8005a32 <_strtod_l+0x72>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f47f aed4 	bne.w	8005a64 <_strtod_l+0xa4>
 8005cbc:	2a69      	cmp	r2, #105	@ 0x69
 8005cbe:	d028      	beq.n	8005d12 <_strtod_l+0x352>
 8005cc0:	dc25      	bgt.n	8005d0e <_strtod_l+0x34e>
 8005cc2:	2a49      	cmp	r2, #73	@ 0x49
 8005cc4:	d025      	beq.n	8005d12 <_strtod_l+0x352>
 8005cc6:	2a4e      	cmp	r2, #78	@ 0x4e
 8005cc8:	f47f aecc 	bne.w	8005a64 <_strtod_l+0xa4>
 8005ccc:	4999      	ldr	r1, [pc, #612]	@ (8005f34 <_strtod_l+0x574>)
 8005cce:	a819      	add	r0, sp, #100	@ 0x64
 8005cd0:	f001 f9dc 	bl	800708c <__match>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f43f aec5 	beq.w	8005a64 <_strtod_l+0xa4>
 8005cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b28      	cmp	r3, #40	@ 0x28
 8005ce0:	d12e      	bne.n	8005d40 <_strtod_l+0x380>
 8005ce2:	4995      	ldr	r1, [pc, #596]	@ (8005f38 <_strtod_l+0x578>)
 8005ce4:	aa1c      	add	r2, sp, #112	@ 0x70
 8005ce6:	a819      	add	r0, sp, #100	@ 0x64
 8005ce8:	f001 f9e4 	bl	80070b4 <__hexnan>
 8005cec:	2805      	cmp	r0, #5
 8005cee:	d127      	bne.n	8005d40 <_strtod_l+0x380>
 8005cf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005cf2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005cf6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005cfa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005cfe:	e698      	b.n	8005a32 <_strtod_l+0x72>
 8005d00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d02:	fb08 2101 	mla	r1, r8, r1, r2
 8005d06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d0c:	e7b5      	b.n	8005c7a <_strtod_l+0x2ba>
 8005d0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d10:	e7da      	b.n	8005cc8 <_strtod_l+0x308>
 8005d12:	498a      	ldr	r1, [pc, #552]	@ (8005f3c <_strtod_l+0x57c>)
 8005d14:	a819      	add	r0, sp, #100	@ 0x64
 8005d16:	f001 f9b9 	bl	800708c <__match>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f43f aea2 	beq.w	8005a64 <_strtod_l+0xa4>
 8005d20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d22:	4987      	ldr	r1, [pc, #540]	@ (8005f40 <_strtod_l+0x580>)
 8005d24:	3b01      	subs	r3, #1
 8005d26:	a819      	add	r0, sp, #100	@ 0x64
 8005d28:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d2a:	f001 f9af 	bl	800708c <__match>
 8005d2e:	b910      	cbnz	r0, 8005d36 <_strtod_l+0x376>
 8005d30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d32:	3301      	adds	r3, #1
 8005d34:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d36:	f04f 0a00 	mov.w	sl, #0
 8005d3a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8005f44 <_strtod_l+0x584>
 8005d3e:	e678      	b.n	8005a32 <_strtod_l+0x72>
 8005d40:	4881      	ldr	r0, [pc, #516]	@ (8005f48 <_strtod_l+0x588>)
 8005d42:	f000 fee1 	bl	8006b08 <nan>
 8005d46:	4682      	mov	sl, r0
 8005d48:	468b      	mov	fp, r1
 8005d4a:	e672      	b.n	8005a32 <_strtod_l+0x72>
 8005d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d4e:	f1b9 0f00 	cmp.w	r9, #0
 8005d52:	bf08      	it	eq
 8005d54:	46a9      	moveq	r9, r5
 8005d56:	eba8 0303 	sub.w	r3, r8, r3
 8005d5a:	2d10      	cmp	r5, #16
 8005d5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005d5e:	462c      	mov	r4, r5
 8005d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d62:	bfa8      	it	ge
 8005d64:	2410      	movge	r4, #16
 8005d66:	f7fa fb3d 	bl	80003e4 <__aeabi_ui2d>
 8005d6a:	2d09      	cmp	r5, #9
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	468b      	mov	fp, r1
 8005d70:	dc11      	bgt.n	8005d96 <_strtod_l+0x3d6>
 8005d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f43f ae5c 	beq.w	8005a32 <_strtod_l+0x72>
 8005d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d7c:	dd76      	ble.n	8005e6c <_strtod_l+0x4ac>
 8005d7e:	2b16      	cmp	r3, #22
 8005d80:	dc5d      	bgt.n	8005e3e <_strtod_l+0x47e>
 8005d82:	4972      	ldr	r1, [pc, #456]	@ (8005f4c <_strtod_l+0x58c>)
 8005d84:	4652      	mov	r2, sl
 8005d86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d8a:	465b      	mov	r3, fp
 8005d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d90:	f7fa fba2 	bl	80004d8 <__aeabi_dmul>
 8005d94:	e7d7      	b.n	8005d46 <_strtod_l+0x386>
 8005d96:	4b6d      	ldr	r3, [pc, #436]	@ (8005f4c <_strtod_l+0x58c>)
 8005d98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005da0:	f7fa fb9a 	bl	80004d8 <__aeabi_dmul>
 8005da4:	4682      	mov	sl, r0
 8005da6:	4638      	mov	r0, r7
 8005da8:	468b      	mov	fp, r1
 8005daa:	f7fa fb1b 	bl	80003e4 <__aeabi_ui2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4650      	mov	r0, sl
 8005db4:	4659      	mov	r1, fp
 8005db6:	f7fa f9d9 	bl	800016c <__adddf3>
 8005dba:	2d0f      	cmp	r5, #15
 8005dbc:	4682      	mov	sl, r0
 8005dbe:	468b      	mov	fp, r1
 8005dc0:	ddd7      	ble.n	8005d72 <_strtod_l+0x3b2>
 8005dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc4:	1b2c      	subs	r4, r5, r4
 8005dc6:	441c      	add	r4, r3
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	f340 8093 	ble.w	8005ef4 <_strtod_l+0x534>
 8005dce:	f014 030f 	ands.w	r3, r4, #15
 8005dd2:	d00a      	beq.n	8005dea <_strtod_l+0x42a>
 8005dd4:	495d      	ldr	r1, [pc, #372]	@ (8005f4c <_strtod_l+0x58c>)
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de0:	465b      	mov	r3, fp
 8005de2:	f7fa fb79 	bl	80004d8 <__aeabi_dmul>
 8005de6:	4682      	mov	sl, r0
 8005de8:	468b      	mov	fp, r1
 8005dea:	f034 040f 	bics.w	r4, r4, #15
 8005dee:	d073      	beq.n	8005ed8 <_strtod_l+0x518>
 8005df0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005df4:	dd49      	ble.n	8005e8a <_strtod_l+0x4ca>
 8005df6:	2400      	movs	r4, #0
 8005df8:	46a0      	mov	r8, r4
 8005dfa:	46a1      	mov	r9, r4
 8005dfc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005dfe:	2322      	movs	r3, #34	@ 0x22
 8005e00:	f04f 0a00 	mov.w	sl, #0
 8005e04:	9a05      	ldr	r2, [sp, #20]
 8005e06:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8005f44 <_strtod_l+0x584>
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f43f ae0f 	beq.w	8005a32 <_strtod_l+0x72>
 8005e14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e16:	9805      	ldr	r0, [sp, #20]
 8005e18:	f7ff f950 	bl	80050bc <_Bfree>
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	9805      	ldr	r0, [sp, #20]
 8005e20:	f7ff f94c 	bl	80050bc <_Bfree>
 8005e24:	4641      	mov	r1, r8
 8005e26:	9805      	ldr	r0, [sp, #20]
 8005e28:	f7ff f948 	bl	80050bc <_Bfree>
 8005e2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e2e:	9805      	ldr	r0, [sp, #20]
 8005e30:	f7ff f944 	bl	80050bc <_Bfree>
 8005e34:	4621      	mov	r1, r4
 8005e36:	9805      	ldr	r0, [sp, #20]
 8005e38:	f7ff f940 	bl	80050bc <_Bfree>
 8005e3c:	e5f9      	b.n	8005a32 <_strtod_l+0x72>
 8005e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005e44:	4293      	cmp	r3, r2
 8005e46:	dbbc      	blt.n	8005dc2 <_strtod_l+0x402>
 8005e48:	4c40      	ldr	r4, [pc, #256]	@ (8005f4c <_strtod_l+0x58c>)
 8005e4a:	f1c5 050f 	rsb	r5, r5, #15
 8005e4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005e52:	4652      	mov	r2, sl
 8005e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e58:	465b      	mov	r3, fp
 8005e5a:	f7fa fb3d 	bl	80004d8 <__aeabi_dmul>
 8005e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e60:	1b5d      	subs	r5, r3, r5
 8005e62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e6a:	e791      	b.n	8005d90 <_strtod_l+0x3d0>
 8005e6c:	3316      	adds	r3, #22
 8005e6e:	dba8      	blt.n	8005dc2 <_strtod_l+0x402>
 8005e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e72:	4650      	mov	r0, sl
 8005e74:	eba3 0808 	sub.w	r8, r3, r8
 8005e78:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <_strtod_l+0x58c>)
 8005e7a:	4659      	mov	r1, fp
 8005e7c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005e80:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005e84:	f7fa fc52 	bl	800072c <__aeabi_ddiv>
 8005e88:	e75d      	b.n	8005d46 <_strtod_l+0x386>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	4659      	mov	r1, fp
 8005e90:	461e      	mov	r6, r3
 8005e92:	4f2f      	ldr	r7, [pc, #188]	@ (8005f50 <_strtod_l+0x590>)
 8005e94:	1124      	asrs	r4, r4, #4
 8005e96:	2c01      	cmp	r4, #1
 8005e98:	dc21      	bgt.n	8005ede <_strtod_l+0x51e>
 8005e9a:	b10b      	cbz	r3, 8005ea0 <_strtod_l+0x4e0>
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	468b      	mov	fp, r1
 8005ea0:	492b      	ldr	r1, [pc, #172]	@ (8005f50 <_strtod_l+0x590>)
 8005ea2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005ea6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005eaa:	4652      	mov	r2, sl
 8005eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb0:	465b      	mov	r3, fp
 8005eb2:	f7fa fb11 	bl	80004d8 <__aeabi_dmul>
 8005eb6:	4b23      	ldr	r3, [pc, #140]	@ (8005f44 <_strtod_l+0x584>)
 8005eb8:	460a      	mov	r2, r1
 8005eba:	400b      	ands	r3, r1
 8005ebc:	4925      	ldr	r1, [pc, #148]	@ (8005f54 <_strtod_l+0x594>)
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	d898      	bhi.n	8005df6 <_strtod_l+0x436>
 8005ec4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	bf86      	itte	hi
 8005ecc:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ed0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8005f58 <_strtod_l+0x598>
 8005ed4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9308      	str	r3, [sp, #32]
 8005edc:	e076      	b.n	8005fcc <_strtod_l+0x60c>
 8005ede:	07e2      	lsls	r2, r4, #31
 8005ee0:	d504      	bpl.n	8005eec <_strtod_l+0x52c>
 8005ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee6:	f7fa faf7 	bl	80004d8 <__aeabi_dmul>
 8005eea:	2301      	movs	r3, #1
 8005eec:	3601      	adds	r6, #1
 8005eee:	1064      	asrs	r4, r4, #1
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	e7d0      	b.n	8005e96 <_strtod_l+0x4d6>
 8005ef4:	d0f0      	beq.n	8005ed8 <_strtod_l+0x518>
 8005ef6:	4264      	negs	r4, r4
 8005ef8:	f014 020f 	ands.w	r2, r4, #15
 8005efc:	d00a      	beq.n	8005f14 <_strtod_l+0x554>
 8005efe:	4b13      	ldr	r3, [pc, #76]	@ (8005f4c <_strtod_l+0x58c>)
 8005f00:	4650      	mov	r0, sl
 8005f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f06:	4659      	mov	r1, fp
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fc0e 	bl	800072c <__aeabi_ddiv>
 8005f10:	4682      	mov	sl, r0
 8005f12:	468b      	mov	fp, r1
 8005f14:	1124      	asrs	r4, r4, #4
 8005f16:	d0df      	beq.n	8005ed8 <_strtod_l+0x518>
 8005f18:	2c1f      	cmp	r4, #31
 8005f1a:	dd1f      	ble.n	8005f5c <_strtod_l+0x59c>
 8005f1c:	2400      	movs	r4, #0
 8005f1e:	46a0      	mov	r8, r4
 8005f20:	46a1      	mov	r9, r4
 8005f22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f24:	2322      	movs	r3, #34	@ 0x22
 8005f26:	9a05      	ldr	r2, [sp, #20]
 8005f28:	f04f 0a00 	mov.w	sl, #0
 8005f2c:	f04f 0b00 	mov.w	fp, #0
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e76b      	b.n	8005e0c <_strtod_l+0x44c>
 8005f34:	08007967 	.word	0x08007967
 8005f38:	08007c30 	.word	0x08007c30
 8005f3c:	0800795f 	.word	0x0800795f
 8005f40:	08007996 	.word	0x08007996
 8005f44:	7ff00000 	.word	0x7ff00000
 8005f48:	08007acf 	.word	0x08007acf
 8005f4c:	08007b68 	.word	0x08007b68
 8005f50:	08007b40 	.word	0x08007b40
 8005f54:	7ca00000 	.word	0x7ca00000
 8005f58:	7fefffff 	.word	0x7fefffff
 8005f5c:	f014 0310 	ands.w	r3, r4, #16
 8005f60:	bf18      	it	ne
 8005f62:	236a      	movne	r3, #106	@ 0x6a
 8005f64:	4650      	mov	r0, sl
 8005f66:	9308      	str	r3, [sp, #32]
 8005f68:	4659      	mov	r1, fp
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4e77      	ldr	r6, [pc, #476]	@ (800614c <_strtod_l+0x78c>)
 8005f6e:	07e7      	lsls	r7, r4, #31
 8005f70:	d504      	bpl.n	8005f7c <_strtod_l+0x5bc>
 8005f72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f76:	f7fa faaf 	bl	80004d8 <__aeabi_dmul>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	1064      	asrs	r4, r4, #1
 8005f7e:	f106 0608 	add.w	r6, r6, #8
 8005f82:	d1f4      	bne.n	8005f6e <_strtod_l+0x5ae>
 8005f84:	b10b      	cbz	r3, 8005f8a <_strtod_l+0x5ca>
 8005f86:	4682      	mov	sl, r0
 8005f88:	468b      	mov	fp, r1
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	b1b3      	cbz	r3, 8005fbc <_strtod_l+0x5fc>
 8005f8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	4659      	mov	r1, fp
 8005f9a:	dd0f      	ble.n	8005fbc <_strtod_l+0x5fc>
 8005f9c:	2b1f      	cmp	r3, #31
 8005f9e:	dd58      	ble.n	8006052 <_strtod_l+0x692>
 8005fa0:	2b34      	cmp	r3, #52	@ 0x34
 8005fa2:	bfd8      	it	le
 8005fa4:	f04f 33ff 	movle.w	r3, #4294967295
 8005fa8:	f04f 0a00 	mov.w	sl, #0
 8005fac:	bfcf      	iteee	gt
 8005fae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005fb2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005fb6:	4093      	lslle	r3, r2
 8005fb8:	ea03 0b01 	andle.w	fp, r3, r1
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1a7      	bne.n	8005f1c <_strtod_l+0x55c>
 8005fcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fce:	464a      	mov	r2, r9
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	9805      	ldr	r0, [sp, #20]
 8005fd8:	f7ff f8d8 	bl	800518c <__s2b>
 8005fdc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f af09 	beq.w	8005df6 <_strtod_l+0x436>
 8005fe4:	2400      	movs	r4, #0
 8005fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	eba3 0308 	sub.w	r3, r3, r8
 8005ff0:	bfa8      	it	ge
 8005ff2:	2300      	movge	r3, #0
 8005ff4:	46a0      	mov	r8, r4
 8005ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ff8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ffc:	9316      	str	r3, [sp, #88]	@ 0x58
 8005ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006000:	9805      	ldr	r0, [sp, #20]
 8006002:	6859      	ldr	r1, [r3, #4]
 8006004:	f7ff f81a 	bl	800503c <_Balloc>
 8006008:	4681      	mov	r9, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	f43f aef7 	beq.w	8005dfe <_strtod_l+0x43e>
 8006010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006012:	300c      	adds	r0, #12
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	f103 010c 	add.w	r1, r3, #12
 800601a:	3202      	adds	r2, #2
 800601c:	0092      	lsls	r2, r2, #2
 800601e:	f000 fd65 	bl	8006aec <memcpy>
 8006022:	ab1c      	add	r3, sp, #112	@ 0x70
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4652      	mov	r2, sl
 800602c:	465b      	mov	r3, fp
 800602e:	9805      	ldr	r0, [sp, #20]
 8006030:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006034:	f7ff fbd6 	bl	80057e4 <__d2b>
 8006038:	901a      	str	r0, [sp, #104]	@ 0x68
 800603a:	2800      	cmp	r0, #0
 800603c:	f43f aedf 	beq.w	8005dfe <_strtod_l+0x43e>
 8006040:	2101      	movs	r1, #1
 8006042:	9805      	ldr	r0, [sp, #20]
 8006044:	f7ff f938 	bl	80052b8 <__i2b>
 8006048:	4680      	mov	r8, r0
 800604a:	b948      	cbnz	r0, 8006060 <_strtod_l+0x6a0>
 800604c:	f04f 0800 	mov.w	r8, #0
 8006050:	e6d5      	b.n	8005dfe <_strtod_l+0x43e>
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	ea03 0a0a 	and.w	sl, r3, sl
 800605e:	e7ad      	b.n	8005fbc <_strtod_l+0x5fc>
 8006060:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006062:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006064:	2d00      	cmp	r5, #0
 8006066:	bfab      	itete	ge
 8006068:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800606a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800606c:	18ef      	addge	r7, r5, r3
 800606e:	1b5e      	sublt	r6, r3, r5
 8006070:	9b08      	ldr	r3, [sp, #32]
 8006072:	bfa8      	it	ge
 8006074:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006076:	eba5 0503 	sub.w	r5, r5, r3
 800607a:	4415      	add	r5, r2
 800607c:	4b34      	ldr	r3, [pc, #208]	@ (8006150 <_strtod_l+0x790>)
 800607e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006082:	bfb8      	it	lt
 8006084:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006086:	429d      	cmp	r5, r3
 8006088:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800608c:	da50      	bge.n	8006130 <_strtod_l+0x770>
 800608e:	1b5b      	subs	r3, r3, r5
 8006090:	2b1f      	cmp	r3, #31
 8006092:	f04f 0101 	mov.w	r1, #1
 8006096:	eba2 0203 	sub.w	r2, r2, r3
 800609a:	dc3d      	bgt.n	8006118 <_strtod_l+0x758>
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060a2:	2300      	movs	r3, #0
 80060a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80060a6:	18bd      	adds	r5, r7, r2
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	42af      	cmp	r7, r5
 80060ac:	4416      	add	r6, r2
 80060ae:	441e      	add	r6, r3
 80060b0:	463b      	mov	r3, r7
 80060b2:	bfa8      	it	ge
 80060b4:	462b      	movge	r3, r5
 80060b6:	42b3      	cmp	r3, r6
 80060b8:	bfa8      	it	ge
 80060ba:	4633      	movge	r3, r6
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bfc2      	ittt	gt
 80060c0:	1aed      	subgt	r5, r5, r3
 80060c2:	1af6      	subgt	r6, r6, r3
 80060c4:	1aff      	subgt	r7, r7, r3
 80060c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dd16      	ble.n	80060fa <_strtod_l+0x73a>
 80060cc:	4641      	mov	r1, r8
 80060ce:	461a      	mov	r2, r3
 80060d0:	9805      	ldr	r0, [sp, #20]
 80060d2:	f7ff f9a9 	bl	8005428 <__pow5mult>
 80060d6:	4680      	mov	r8, r0
 80060d8:	2800      	cmp	r0, #0
 80060da:	d0b7      	beq.n	800604c <_strtod_l+0x68c>
 80060dc:	4601      	mov	r1, r0
 80060de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80060e0:	9805      	ldr	r0, [sp, #20]
 80060e2:	f7ff f8ff 	bl	80052e4 <__multiply>
 80060e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80060e8:	2800      	cmp	r0, #0
 80060ea:	f43f ae88 	beq.w	8005dfe <_strtod_l+0x43e>
 80060ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060f0:	9805      	ldr	r0, [sp, #20]
 80060f2:	f7fe ffe3 	bl	80050bc <_Bfree>
 80060f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	dc1d      	bgt.n	800613a <_strtod_l+0x77a>
 80060fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	dd27      	ble.n	8006154 <_strtod_l+0x794>
 8006104:	4649      	mov	r1, r9
 8006106:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006108:	9805      	ldr	r0, [sp, #20]
 800610a:	f7ff f98d 	bl	8005428 <__pow5mult>
 800610e:	4681      	mov	r9, r0
 8006110:	bb00      	cbnz	r0, 8006154 <_strtod_l+0x794>
 8006112:	f04f 0900 	mov.w	r9, #0
 8006116:	e672      	b.n	8005dfe <_strtod_l+0x43e>
 8006118:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800611c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006120:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006124:	35e2      	adds	r5, #226	@ 0xe2
 8006126:	fa01 f305 	lsl.w	r3, r1, r5
 800612a:	9310      	str	r3, [sp, #64]	@ 0x40
 800612c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800612e:	e7ba      	b.n	80060a6 <_strtod_l+0x6e6>
 8006130:	2300      	movs	r3, #0
 8006132:	9310      	str	r3, [sp, #64]	@ 0x40
 8006134:	2301      	movs	r3, #1
 8006136:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006138:	e7b5      	b.n	80060a6 <_strtod_l+0x6e6>
 800613a:	462a      	mov	r2, r5
 800613c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800613e:	9805      	ldr	r0, [sp, #20]
 8006140:	f7ff f9cc 	bl	80054dc <__lshift>
 8006144:	901a      	str	r0, [sp, #104]	@ 0x68
 8006146:	2800      	cmp	r0, #0
 8006148:	d1d9      	bne.n	80060fe <_strtod_l+0x73e>
 800614a:	e658      	b.n	8005dfe <_strtod_l+0x43e>
 800614c:	08007c58 	.word	0x08007c58
 8006150:	fffffc02 	.word	0xfffffc02
 8006154:	2e00      	cmp	r6, #0
 8006156:	dd07      	ble.n	8006168 <_strtod_l+0x7a8>
 8006158:	4649      	mov	r1, r9
 800615a:	4632      	mov	r2, r6
 800615c:	9805      	ldr	r0, [sp, #20]
 800615e:	f7ff f9bd 	bl	80054dc <__lshift>
 8006162:	4681      	mov	r9, r0
 8006164:	2800      	cmp	r0, #0
 8006166:	d0d4      	beq.n	8006112 <_strtod_l+0x752>
 8006168:	2f00      	cmp	r7, #0
 800616a:	dd08      	ble.n	800617e <_strtod_l+0x7be>
 800616c:	4641      	mov	r1, r8
 800616e:	463a      	mov	r2, r7
 8006170:	9805      	ldr	r0, [sp, #20]
 8006172:	f7ff f9b3 	bl	80054dc <__lshift>
 8006176:	4680      	mov	r8, r0
 8006178:	2800      	cmp	r0, #0
 800617a:	f43f ae40 	beq.w	8005dfe <_strtod_l+0x43e>
 800617e:	464a      	mov	r2, r9
 8006180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006182:	9805      	ldr	r0, [sp, #20]
 8006184:	f7ff fa32 	bl	80055ec <__mdiff>
 8006188:	4604      	mov	r4, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	f43f ae37 	beq.w	8005dfe <_strtod_l+0x43e>
 8006190:	68c3      	ldr	r3, [r0, #12]
 8006192:	4641      	mov	r1, r8
 8006194:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006196:	2300      	movs	r3, #0
 8006198:	60c3      	str	r3, [r0, #12]
 800619a:	f7ff fa0b 	bl	80055b4 <__mcmp>
 800619e:	2800      	cmp	r0, #0
 80061a0:	da3d      	bge.n	800621e <_strtod_l+0x85e>
 80061a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061a4:	ea53 030a 	orrs.w	r3, r3, sl
 80061a8:	d163      	bne.n	8006272 <_strtod_l+0x8b2>
 80061aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d15f      	bne.n	8006272 <_strtod_l+0x8b2>
 80061b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061b6:	0d1b      	lsrs	r3, r3, #20
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80061be:	d958      	bls.n	8006272 <_strtod_l+0x8b2>
 80061c0:	6963      	ldr	r3, [r4, #20]
 80061c2:	b913      	cbnz	r3, 80061ca <_strtod_l+0x80a>
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	dd53      	ble.n	8006272 <_strtod_l+0x8b2>
 80061ca:	4621      	mov	r1, r4
 80061cc:	2201      	movs	r2, #1
 80061ce:	9805      	ldr	r0, [sp, #20]
 80061d0:	f7ff f984 	bl	80054dc <__lshift>
 80061d4:	4641      	mov	r1, r8
 80061d6:	4604      	mov	r4, r0
 80061d8:	f7ff f9ec 	bl	80055b4 <__mcmp>
 80061dc:	2800      	cmp	r0, #0
 80061de:	dd48      	ble.n	8006272 <_strtod_l+0x8b2>
 80061e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061e4:	9a08      	ldr	r2, [sp, #32]
 80061e6:	0d1b      	lsrs	r3, r3, #20
 80061e8:	051b      	lsls	r3, r3, #20
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	d062      	beq.n	80062b4 <_strtod_l+0x8f4>
 80061ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80061f2:	d85f      	bhi.n	80062b4 <_strtod_l+0x8f4>
 80061f4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80061f8:	f67f ae94 	bls.w	8005f24 <_strtod_l+0x564>
 80061fc:	4650      	mov	r0, sl
 80061fe:	4659      	mov	r1, fp
 8006200:	4ba3      	ldr	r3, [pc, #652]	@ (8006490 <_strtod_l+0xad0>)
 8006202:	2200      	movs	r2, #0
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	4ba2      	ldr	r3, [pc, #648]	@ (8006494 <_strtod_l+0xad4>)
 800620a:	4682      	mov	sl, r0
 800620c:	400b      	ands	r3, r1
 800620e:	468b      	mov	fp, r1
 8006210:	2b00      	cmp	r3, #0
 8006212:	f47f adff 	bne.w	8005e14 <_strtod_l+0x454>
 8006216:	2322      	movs	r3, #34	@ 0x22
 8006218:	9a05      	ldr	r2, [sp, #20]
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e5fa      	b.n	8005e14 <_strtod_l+0x454>
 800621e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006222:	d165      	bne.n	80062f0 <_strtod_l+0x930>
 8006224:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800622a:	b35a      	cbz	r2, 8006284 <_strtod_l+0x8c4>
 800622c:	4a9a      	ldr	r2, [pc, #616]	@ (8006498 <_strtod_l+0xad8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d12b      	bne.n	800628a <_strtod_l+0x8ca>
 8006232:	9b08      	ldr	r3, [sp, #32]
 8006234:	4651      	mov	r1, sl
 8006236:	b303      	cbz	r3, 800627a <_strtod_l+0x8ba>
 8006238:	465a      	mov	r2, fp
 800623a:	4b96      	ldr	r3, [pc, #600]	@ (8006494 <_strtod_l+0xad4>)
 800623c:	4013      	ands	r3, r2
 800623e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	d81b      	bhi.n	8006280 <_strtod_l+0x8c0>
 8006248:	0d1b      	lsrs	r3, r3, #20
 800624a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	4299      	cmp	r1, r3
 8006254:	d119      	bne.n	800628a <_strtod_l+0x8ca>
 8006256:	4b91      	ldr	r3, [pc, #580]	@ (800649c <_strtod_l+0xadc>)
 8006258:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800625a:	429a      	cmp	r2, r3
 800625c:	d102      	bne.n	8006264 <_strtod_l+0x8a4>
 800625e:	3101      	adds	r1, #1
 8006260:	f43f adcd 	beq.w	8005dfe <_strtod_l+0x43e>
 8006264:	f04f 0a00 	mov.w	sl, #0
 8006268:	4b8a      	ldr	r3, [pc, #552]	@ (8006494 <_strtod_l+0xad4>)
 800626a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800626c:	401a      	ands	r2, r3
 800626e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006272:	9b08      	ldr	r3, [sp, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1c1      	bne.n	80061fc <_strtod_l+0x83c>
 8006278:	e5cc      	b.n	8005e14 <_strtod_l+0x454>
 800627a:	f04f 33ff 	mov.w	r3, #4294967295
 800627e:	e7e8      	b.n	8006252 <_strtod_l+0x892>
 8006280:	4613      	mov	r3, r2
 8006282:	e7e6      	b.n	8006252 <_strtod_l+0x892>
 8006284:	ea53 030a 	orrs.w	r3, r3, sl
 8006288:	d0aa      	beq.n	80061e0 <_strtod_l+0x820>
 800628a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800628c:	b1db      	cbz	r3, 80062c6 <_strtod_l+0x906>
 800628e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006290:	4213      	tst	r3, r2
 8006292:	d0ee      	beq.n	8006272 <_strtod_l+0x8b2>
 8006294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006296:	4650      	mov	r0, sl
 8006298:	4659      	mov	r1, fp
 800629a:	9a08      	ldr	r2, [sp, #32]
 800629c:	b1bb      	cbz	r3, 80062ce <_strtod_l+0x90e>
 800629e:	f7ff fb6d 	bl	800597c <sulp>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062aa:	f7f9 ff5f 	bl	800016c <__adddf3>
 80062ae:	4682      	mov	sl, r0
 80062b0:	468b      	mov	fp, r1
 80062b2:	e7de      	b.n	8006272 <_strtod_l+0x8b2>
 80062b4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80062b8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80062bc:	f04f 3aff 	mov.w	sl, #4294967295
 80062c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80062c4:	e7d5      	b.n	8006272 <_strtod_l+0x8b2>
 80062c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062c8:	ea13 0f0a 	tst.w	r3, sl
 80062cc:	e7e1      	b.n	8006292 <_strtod_l+0x8d2>
 80062ce:	f7ff fb55 	bl	800597c <sulp>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062da:	f7f9 ff45 	bl	8000168 <__aeabi_dsub>
 80062de:	2200      	movs	r2, #0
 80062e0:	2300      	movs	r3, #0
 80062e2:	4682      	mov	sl, r0
 80062e4:	468b      	mov	fp, r1
 80062e6:	f7fa fb5f 	bl	80009a8 <__aeabi_dcmpeq>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d0c1      	beq.n	8006272 <_strtod_l+0x8b2>
 80062ee:	e619      	b.n	8005f24 <_strtod_l+0x564>
 80062f0:	4641      	mov	r1, r8
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7ff face 	bl	8005894 <__ratio>
 80062f8:	2200      	movs	r2, #0
 80062fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80062fe:	4606      	mov	r6, r0
 8006300:	460f      	mov	r7, r1
 8006302:	f7fa fb65 	bl	80009d0 <__aeabi_dcmple>
 8006306:	2800      	cmp	r0, #0
 8006308:	d06d      	beq.n	80063e6 <_strtod_l+0xa26>
 800630a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d178      	bne.n	8006402 <_strtod_l+0xa42>
 8006310:	f1ba 0f00 	cmp.w	sl, #0
 8006314:	d156      	bne.n	80063c4 <_strtod_l+0xa04>
 8006316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800631c:	2b00      	cmp	r3, #0
 800631e:	d158      	bne.n	80063d2 <_strtod_l+0xa12>
 8006320:	2200      	movs	r2, #0
 8006322:	4630      	mov	r0, r6
 8006324:	4639      	mov	r1, r7
 8006326:	4b5e      	ldr	r3, [pc, #376]	@ (80064a0 <_strtod_l+0xae0>)
 8006328:	f7fa fb48 	bl	80009bc <__aeabi_dcmplt>
 800632c:	2800      	cmp	r0, #0
 800632e:	d157      	bne.n	80063e0 <_strtod_l+0xa20>
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	2200      	movs	r2, #0
 8006336:	4b5b      	ldr	r3, [pc, #364]	@ (80064a4 <_strtod_l+0xae4>)
 8006338:	f7fa f8ce 	bl	80004d8 <__aeabi_dmul>
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006344:	9606      	str	r6, [sp, #24]
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800634c:	4d51      	ldr	r5, [pc, #324]	@ (8006494 <_strtod_l+0xad4>)
 800634e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006354:	401d      	ands	r5, r3
 8006356:	4b54      	ldr	r3, [pc, #336]	@ (80064a8 <_strtod_l+0xae8>)
 8006358:	429d      	cmp	r5, r3
 800635a:	f040 80ab 	bne.w	80064b4 <_strtod_l+0xaf4>
 800635e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006360:	4650      	mov	r0, sl
 8006362:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006366:	4659      	mov	r1, fp
 8006368:	f7ff f9d4 	bl	8005714 <__ulp>
 800636c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	4652      	mov	r2, sl
 8006376:	465b      	mov	r3, fp
 8006378:	f7f9 fef8 	bl	800016c <__adddf3>
 800637c:	460b      	mov	r3, r1
 800637e:	4945      	ldr	r1, [pc, #276]	@ (8006494 <_strtod_l+0xad4>)
 8006380:	4a4a      	ldr	r2, [pc, #296]	@ (80064ac <_strtod_l+0xaec>)
 8006382:	4019      	ands	r1, r3
 8006384:	4291      	cmp	r1, r2
 8006386:	4682      	mov	sl, r0
 8006388:	d942      	bls.n	8006410 <_strtod_l+0xa50>
 800638a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800638c:	4b43      	ldr	r3, [pc, #268]	@ (800649c <_strtod_l+0xadc>)
 800638e:	429a      	cmp	r2, r3
 8006390:	d103      	bne.n	800639a <_strtod_l+0x9da>
 8006392:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006394:	3301      	adds	r3, #1
 8006396:	f43f ad32 	beq.w	8005dfe <_strtod_l+0x43e>
 800639a:	f04f 3aff 	mov.w	sl, #4294967295
 800639e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800649c <_strtod_l+0xadc>
 80063a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063a4:	9805      	ldr	r0, [sp, #20]
 80063a6:	f7fe fe89 	bl	80050bc <_Bfree>
 80063aa:	4649      	mov	r1, r9
 80063ac:	9805      	ldr	r0, [sp, #20]
 80063ae:	f7fe fe85 	bl	80050bc <_Bfree>
 80063b2:	4641      	mov	r1, r8
 80063b4:	9805      	ldr	r0, [sp, #20]
 80063b6:	f7fe fe81 	bl	80050bc <_Bfree>
 80063ba:	4621      	mov	r1, r4
 80063bc:	9805      	ldr	r0, [sp, #20]
 80063be:	f7fe fe7d 	bl	80050bc <_Bfree>
 80063c2:	e61c      	b.n	8005ffe <_strtod_l+0x63e>
 80063c4:	f1ba 0f01 	cmp.w	sl, #1
 80063c8:	d103      	bne.n	80063d2 <_strtod_l+0xa12>
 80063ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f43f ada9 	beq.w	8005f24 <_strtod_l+0x564>
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b36      	ldr	r3, [pc, #216]	@ (80064b0 <_strtod_l+0xaf0>)
 80063d6:	2600      	movs	r6, #0
 80063d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063dc:	4f30      	ldr	r7, [pc, #192]	@ (80064a0 <_strtod_l+0xae0>)
 80063de:	e7b3      	b.n	8006348 <_strtod_l+0x988>
 80063e0:	2600      	movs	r6, #0
 80063e2:	4f30      	ldr	r7, [pc, #192]	@ (80064a4 <_strtod_l+0xae4>)
 80063e4:	e7ac      	b.n	8006340 <_strtod_l+0x980>
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	4b2e      	ldr	r3, [pc, #184]	@ (80064a4 <_strtod_l+0xae4>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	f7fa f873 	bl	80004d8 <__aeabi_dmul>
 80063f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063f4:	4606      	mov	r6, r0
 80063f6:	460f      	mov	r7, r1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0a1      	beq.n	8006340 <_strtod_l+0x980>
 80063fc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006400:	e7a2      	b.n	8006348 <_strtod_l+0x988>
 8006402:	2200      	movs	r2, #0
 8006404:	4b26      	ldr	r3, [pc, #152]	@ (80064a0 <_strtod_l+0xae0>)
 8006406:	4616      	mov	r6, r2
 8006408:	461f      	mov	r7, r3
 800640a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800640e:	e79b      	b.n	8006348 <_strtod_l+0x988>
 8006410:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006414:	9b08      	ldr	r3, [sp, #32]
 8006416:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1c1      	bne.n	80063a2 <_strtod_l+0x9e2>
 800641e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006422:	0d1b      	lsrs	r3, r3, #20
 8006424:	051b      	lsls	r3, r3, #20
 8006426:	429d      	cmp	r5, r3
 8006428:	d1bb      	bne.n	80063a2 <_strtod_l+0x9e2>
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa fe6f 	bl	8001110 <__aeabi_d2lz>
 8006432:	f7fa f823 	bl	800047c <__aeabi_l2d>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7f9 fe93 	bl	8000168 <__aeabi_dsub>
 8006442:	460b      	mov	r3, r1
 8006444:	4602      	mov	r2, r0
 8006446:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800644a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800644e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006450:	ea46 060a 	orr.w	r6, r6, sl
 8006454:	431e      	orrs	r6, r3
 8006456:	d06a      	beq.n	800652e <_strtod_l+0xb6e>
 8006458:	a309      	add	r3, pc, #36	@ (adr r3, 8006480 <_strtod_l+0xac0>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7fa faad 	bl	80009bc <__aeabi_dcmplt>
 8006462:	2800      	cmp	r0, #0
 8006464:	f47f acd6 	bne.w	8005e14 <_strtod_l+0x454>
 8006468:	a307      	add	r3, pc, #28	@ (adr r3, 8006488 <_strtod_l+0xac8>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006472:	f7fa fac1 	bl	80009f8 <__aeabi_dcmpgt>
 8006476:	2800      	cmp	r0, #0
 8006478:	d093      	beq.n	80063a2 <_strtod_l+0x9e2>
 800647a:	e4cb      	b.n	8005e14 <_strtod_l+0x454>
 800647c:	f3af 8000 	nop.w
 8006480:	94a03595 	.word	0x94a03595
 8006484:	3fdfffff 	.word	0x3fdfffff
 8006488:	35afe535 	.word	0x35afe535
 800648c:	3fe00000 	.word	0x3fe00000
 8006490:	39500000 	.word	0x39500000
 8006494:	7ff00000 	.word	0x7ff00000
 8006498:	000fffff 	.word	0x000fffff
 800649c:	7fefffff 	.word	0x7fefffff
 80064a0:	3ff00000 	.word	0x3ff00000
 80064a4:	3fe00000 	.word	0x3fe00000
 80064a8:	7fe00000 	.word	0x7fe00000
 80064ac:	7c9fffff 	.word	0x7c9fffff
 80064b0:	bff00000 	.word	0xbff00000
 80064b4:	9b08      	ldr	r3, [sp, #32]
 80064b6:	b323      	cbz	r3, 8006502 <_strtod_l+0xb42>
 80064b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80064bc:	d821      	bhi.n	8006502 <_strtod_l+0xb42>
 80064be:	a328      	add	r3, pc, #160	@ (adr r3, 8006560 <_strtod_l+0xba0>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fa82 	bl	80009d0 <__aeabi_dcmple>
 80064cc:	b1a0      	cbz	r0, 80064f8 <_strtod_l+0xb38>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7fa fad9 	bl	8000a88 <__aeabi_d2uiz>
 80064d6:	2801      	cmp	r0, #1
 80064d8:	bf38      	it	cc
 80064da:	2001      	movcc	r0, #1
 80064dc:	f7f9 ff82 	bl	80003e4 <__aeabi_ui2d>
 80064e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064e2:	4606      	mov	r6, r0
 80064e4:	460f      	mov	r7, r1
 80064e6:	b9fb      	cbnz	r3, 8006528 <_strtod_l+0xb68>
 80064e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80064ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80064f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80064f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80064f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80064fe:	1b5b      	subs	r3, r3, r5
 8006500:	9311      	str	r3, [sp, #68]	@ 0x44
 8006502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006506:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800650a:	f7ff f903 	bl	8005714 <__ulp>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4650      	mov	r0, sl
 8006514:	4659      	mov	r1, fp
 8006516:	f7f9 ffdf 	bl	80004d8 <__aeabi_dmul>
 800651a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800651e:	f7f9 fe25 	bl	800016c <__adddf3>
 8006522:	4682      	mov	sl, r0
 8006524:	468b      	mov	fp, r1
 8006526:	e775      	b.n	8006414 <_strtod_l+0xa54>
 8006528:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800652c:	e7e0      	b.n	80064f0 <_strtod_l+0xb30>
 800652e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006568 <_strtod_l+0xba8>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7fa fa42 	bl	80009bc <__aeabi_dcmplt>
 8006538:	e79d      	b.n	8006476 <_strtod_l+0xab6>
 800653a:	2300      	movs	r3, #0
 800653c:	930e      	str	r3, [sp, #56]	@ 0x38
 800653e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006540:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	f7ff ba79 	b.w	8005a3a <_strtod_l+0x7a>
 8006548:	2a65      	cmp	r2, #101	@ 0x65
 800654a:	f43f ab72 	beq.w	8005c32 <_strtod_l+0x272>
 800654e:	2a45      	cmp	r2, #69	@ 0x45
 8006550:	f43f ab6f 	beq.w	8005c32 <_strtod_l+0x272>
 8006554:	2301      	movs	r3, #1
 8006556:	f7ff bbaa 	b.w	8005cae <_strtod_l+0x2ee>
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w
 8006560:	ffc00000 	.word	0xffc00000
 8006564:	41dfffff 	.word	0x41dfffff
 8006568:	94a03595 	.word	0x94a03595
 800656c:	3fcfffff 	.word	0x3fcfffff

08006570 <_strtod_r>:
 8006570:	4b01      	ldr	r3, [pc, #4]	@ (8006578 <_strtod_r+0x8>)
 8006572:	f7ff ba25 	b.w	80059c0 <_strtod_l>
 8006576:	bf00      	nop
 8006578:	20000068 	.word	0x20000068

0800657c <_strtol_l.isra.0>:
 800657c:	2b24      	cmp	r3, #36	@ 0x24
 800657e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006582:	4686      	mov	lr, r0
 8006584:	4690      	mov	r8, r2
 8006586:	d801      	bhi.n	800658c <_strtol_l.isra.0+0x10>
 8006588:	2b01      	cmp	r3, #1
 800658a:	d106      	bne.n	800659a <_strtol_l.isra.0+0x1e>
 800658c:	f7fd fdba 	bl	8004104 <__errno>
 8006590:	2316      	movs	r3, #22
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	460d      	mov	r5, r1
 800659c:	4833      	ldr	r0, [pc, #204]	@ (800666c <_strtol_l.isra.0+0xf0>)
 800659e:	462a      	mov	r2, r5
 80065a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065a4:	5d06      	ldrb	r6, [r0, r4]
 80065a6:	f016 0608 	ands.w	r6, r6, #8
 80065aa:	d1f8      	bne.n	800659e <_strtol_l.isra.0+0x22>
 80065ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80065ae:	d110      	bne.n	80065d2 <_strtol_l.isra.0+0x56>
 80065b0:	2601      	movs	r6, #1
 80065b2:	782c      	ldrb	r4, [r5, #0]
 80065b4:	1c95      	adds	r5, r2, #2
 80065b6:	f033 0210 	bics.w	r2, r3, #16
 80065ba:	d115      	bne.n	80065e8 <_strtol_l.isra.0+0x6c>
 80065bc:	2c30      	cmp	r4, #48	@ 0x30
 80065be:	d10d      	bne.n	80065dc <_strtol_l.isra.0+0x60>
 80065c0:	782a      	ldrb	r2, [r5, #0]
 80065c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065c6:	2a58      	cmp	r2, #88	@ 0x58
 80065c8:	d108      	bne.n	80065dc <_strtol_l.isra.0+0x60>
 80065ca:	786c      	ldrb	r4, [r5, #1]
 80065cc:	3502      	adds	r5, #2
 80065ce:	2310      	movs	r3, #16
 80065d0:	e00a      	b.n	80065e8 <_strtol_l.isra.0+0x6c>
 80065d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80065d4:	bf04      	itt	eq
 80065d6:	782c      	ldrbeq	r4, [r5, #0]
 80065d8:	1c95      	addeq	r5, r2, #2
 80065da:	e7ec      	b.n	80065b6 <_strtol_l.isra.0+0x3a>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f6      	bne.n	80065ce <_strtol_l.isra.0+0x52>
 80065e0:	2c30      	cmp	r4, #48	@ 0x30
 80065e2:	bf14      	ite	ne
 80065e4:	230a      	movne	r3, #10
 80065e6:	2308      	moveq	r3, #8
 80065e8:	2200      	movs	r2, #0
 80065ea:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80065ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80065f2:	fbbc f9f3 	udiv	r9, ip, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80065fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006600:	2f09      	cmp	r7, #9
 8006602:	d80f      	bhi.n	8006624 <_strtol_l.isra.0+0xa8>
 8006604:	463c      	mov	r4, r7
 8006606:	42a3      	cmp	r3, r4
 8006608:	dd1b      	ble.n	8006642 <_strtol_l.isra.0+0xc6>
 800660a:	1c57      	adds	r7, r2, #1
 800660c:	d007      	beq.n	800661e <_strtol_l.isra.0+0xa2>
 800660e:	4581      	cmp	r9, r0
 8006610:	d314      	bcc.n	800663c <_strtol_l.isra.0+0xc0>
 8006612:	d101      	bne.n	8006618 <_strtol_l.isra.0+0x9c>
 8006614:	45a2      	cmp	sl, r4
 8006616:	db11      	blt.n	800663c <_strtol_l.isra.0+0xc0>
 8006618:	2201      	movs	r2, #1
 800661a:	fb00 4003 	mla	r0, r0, r3, r4
 800661e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006622:	e7eb      	b.n	80065fc <_strtol_l.isra.0+0x80>
 8006624:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006628:	2f19      	cmp	r7, #25
 800662a:	d801      	bhi.n	8006630 <_strtol_l.isra.0+0xb4>
 800662c:	3c37      	subs	r4, #55	@ 0x37
 800662e:	e7ea      	b.n	8006606 <_strtol_l.isra.0+0x8a>
 8006630:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006634:	2f19      	cmp	r7, #25
 8006636:	d804      	bhi.n	8006642 <_strtol_l.isra.0+0xc6>
 8006638:	3c57      	subs	r4, #87	@ 0x57
 800663a:	e7e4      	b.n	8006606 <_strtol_l.isra.0+0x8a>
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	e7ed      	b.n	800661e <_strtol_l.isra.0+0xa2>
 8006642:	1c53      	adds	r3, r2, #1
 8006644:	d108      	bne.n	8006658 <_strtol_l.isra.0+0xdc>
 8006646:	2322      	movs	r3, #34	@ 0x22
 8006648:	4660      	mov	r0, ip
 800664a:	f8ce 3000 	str.w	r3, [lr]
 800664e:	f1b8 0f00 	cmp.w	r8, #0
 8006652:	d0a0      	beq.n	8006596 <_strtol_l.isra.0+0x1a>
 8006654:	1e69      	subs	r1, r5, #1
 8006656:	e006      	b.n	8006666 <_strtol_l.isra.0+0xea>
 8006658:	b106      	cbz	r6, 800665c <_strtol_l.isra.0+0xe0>
 800665a:	4240      	negs	r0, r0
 800665c:	f1b8 0f00 	cmp.w	r8, #0
 8006660:	d099      	beq.n	8006596 <_strtol_l.isra.0+0x1a>
 8006662:	2a00      	cmp	r2, #0
 8006664:	d1f6      	bne.n	8006654 <_strtol_l.isra.0+0xd8>
 8006666:	f8c8 1000 	str.w	r1, [r8]
 800666a:	e794      	b.n	8006596 <_strtol_l.isra.0+0x1a>
 800666c:	08007c81 	.word	0x08007c81

08006670 <_strtol_r>:
 8006670:	f7ff bf84 	b.w	800657c <_strtol_l.isra.0>

08006674 <__ssputs_r>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	461f      	mov	r7, r3
 800667a:	688e      	ldr	r6, [r1, #8]
 800667c:	4682      	mov	sl, r0
 800667e:	42be      	cmp	r6, r7
 8006680:	460c      	mov	r4, r1
 8006682:	4690      	mov	r8, r2
 8006684:	680b      	ldr	r3, [r1, #0]
 8006686:	d82d      	bhi.n	80066e4 <__ssputs_r+0x70>
 8006688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800668c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006690:	d026      	beq.n	80066e0 <__ssputs_r+0x6c>
 8006692:	6965      	ldr	r5, [r4, #20]
 8006694:	6909      	ldr	r1, [r1, #16]
 8006696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800669a:	eba3 0901 	sub.w	r9, r3, r1
 800669e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066a2:	1c7b      	adds	r3, r7, #1
 80066a4:	444b      	add	r3, r9
 80066a6:	106d      	asrs	r5, r5, #1
 80066a8:	429d      	cmp	r5, r3
 80066aa:	bf38      	it	cc
 80066ac:	461d      	movcc	r5, r3
 80066ae:	0553      	lsls	r3, r2, #21
 80066b0:	d527      	bpl.n	8006702 <__ssputs_r+0x8e>
 80066b2:	4629      	mov	r1, r5
 80066b4:	f7fe fc36 	bl	8004f24 <_malloc_r>
 80066b8:	4606      	mov	r6, r0
 80066ba:	b360      	cbz	r0, 8006716 <__ssputs_r+0xa2>
 80066bc:	464a      	mov	r2, r9
 80066be:	6921      	ldr	r1, [r4, #16]
 80066c0:	f000 fa14 	bl	8006aec <memcpy>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	6126      	str	r6, [r4, #16]
 80066d2:	444e      	add	r6, r9
 80066d4:	6026      	str	r6, [r4, #0]
 80066d6:	463e      	mov	r6, r7
 80066d8:	6165      	str	r5, [r4, #20]
 80066da:	eba5 0509 	sub.w	r5, r5, r9
 80066de:	60a5      	str	r5, [r4, #8]
 80066e0:	42be      	cmp	r6, r7
 80066e2:	d900      	bls.n	80066e6 <__ssputs_r+0x72>
 80066e4:	463e      	mov	r6, r7
 80066e6:	4632      	mov	r2, r6
 80066e8:	4641      	mov	r1, r8
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	f000 f9c2 	bl	8006a74 <memmove>
 80066f0:	2000      	movs	r0, #0
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	1b9b      	subs	r3, r3, r6
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	4433      	add	r3, r6
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006702:	462a      	mov	r2, r5
 8006704:	f000 fd83 	bl	800720e <_realloc_r>
 8006708:	4606      	mov	r6, r0
 800670a:	2800      	cmp	r0, #0
 800670c:	d1e0      	bne.n	80066d0 <__ssputs_r+0x5c>
 800670e:	4650      	mov	r0, sl
 8006710:	6921      	ldr	r1, [r4, #16]
 8006712:	f7fe fb95 	bl	8004e40 <_free_r>
 8006716:	230c      	movs	r3, #12
 8006718:	f8ca 3000 	str.w	r3, [sl]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	e7e9      	b.n	80066fe <__ssputs_r+0x8a>
	...

0800672c <_svfiprintf_r>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	4698      	mov	r8, r3
 8006732:	898b      	ldrh	r3, [r1, #12]
 8006734:	4607      	mov	r7, r0
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	460d      	mov	r5, r1
 800673a:	4614      	mov	r4, r2
 800673c:	b09d      	sub	sp, #116	@ 0x74
 800673e:	d510      	bpl.n	8006762 <_svfiprintf_r+0x36>
 8006740:	690b      	ldr	r3, [r1, #16]
 8006742:	b973      	cbnz	r3, 8006762 <_svfiprintf_r+0x36>
 8006744:	2140      	movs	r1, #64	@ 0x40
 8006746:	f7fe fbed 	bl	8004f24 <_malloc_r>
 800674a:	6028      	str	r0, [r5, #0]
 800674c:	6128      	str	r0, [r5, #16]
 800674e:	b930      	cbnz	r0, 800675e <_svfiprintf_r+0x32>
 8006750:	230c      	movs	r3, #12
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	b01d      	add	sp, #116	@ 0x74
 800675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675e:	2340      	movs	r3, #64	@ 0x40
 8006760:	616b      	str	r3, [r5, #20]
 8006762:	2300      	movs	r3, #0
 8006764:	9309      	str	r3, [sp, #36]	@ 0x24
 8006766:	2320      	movs	r3, #32
 8006768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800676c:	2330      	movs	r3, #48	@ 0x30
 800676e:	f04f 0901 	mov.w	r9, #1
 8006772:	f8cd 800c 	str.w	r8, [sp, #12]
 8006776:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006910 <_svfiprintf_r+0x1e4>
 800677a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800677e:	4623      	mov	r3, r4
 8006780:	469a      	mov	sl, r3
 8006782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006786:	b10a      	cbz	r2, 800678c <_svfiprintf_r+0x60>
 8006788:	2a25      	cmp	r2, #37	@ 0x25
 800678a:	d1f9      	bne.n	8006780 <_svfiprintf_r+0x54>
 800678c:	ebba 0b04 	subs.w	fp, sl, r4
 8006790:	d00b      	beq.n	80067aa <_svfiprintf_r+0x7e>
 8006792:	465b      	mov	r3, fp
 8006794:	4622      	mov	r2, r4
 8006796:	4629      	mov	r1, r5
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff ff6b 	bl	8006674 <__ssputs_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	f000 80a7 	beq.w	80068f2 <_svfiprintf_r+0x1c6>
 80067a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067a6:	445a      	add	r2, fp
 80067a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80067aa:	f89a 3000 	ldrb.w	r3, [sl]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 809f 	beq.w	80068f2 <_svfiprintf_r+0x1c6>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067be:	f10a 0a01 	add.w	sl, sl, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	9307      	str	r3, [sp, #28]
 80067c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80067cc:	4654      	mov	r4, sl
 80067ce:	2205      	movs	r2, #5
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	484e      	ldr	r0, [pc, #312]	@ (8006910 <_svfiprintf_r+0x1e4>)
 80067d6:	f7fd fcc2 	bl	800415e <memchr>
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	b9d8      	cbnz	r0, 8006816 <_svfiprintf_r+0xea>
 80067de:	06d0      	lsls	r0, r2, #27
 80067e0:	bf44      	itt	mi
 80067e2:	2320      	movmi	r3, #32
 80067e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067e8:	0711      	lsls	r1, r2, #28
 80067ea:	bf44      	itt	mi
 80067ec:	232b      	movmi	r3, #43	@ 0x2b
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067f2:	f89a 3000 	ldrb.w	r3, [sl]
 80067f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067f8:	d015      	beq.n	8006826 <_svfiprintf_r+0xfa>
 80067fa:	4654      	mov	r4, sl
 80067fc:	2000      	movs	r0, #0
 80067fe:	f04f 0c0a 	mov.w	ip, #10
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	4621      	mov	r1, r4
 8006806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800680a:	3b30      	subs	r3, #48	@ 0x30
 800680c:	2b09      	cmp	r3, #9
 800680e:	d94b      	bls.n	80068a8 <_svfiprintf_r+0x17c>
 8006810:	b1b0      	cbz	r0, 8006840 <_svfiprintf_r+0x114>
 8006812:	9207      	str	r2, [sp, #28]
 8006814:	e014      	b.n	8006840 <_svfiprintf_r+0x114>
 8006816:	eba0 0308 	sub.w	r3, r0, r8
 800681a:	fa09 f303 	lsl.w	r3, r9, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	46a2      	mov	sl, r4
 8006822:	9304      	str	r3, [sp, #16]
 8006824:	e7d2      	b.n	80067cc <_svfiprintf_r+0xa0>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	1d19      	adds	r1, r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	9103      	str	r1, [sp, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfbb      	ittet	lt
 8006832:	425b      	neglt	r3, r3
 8006834:	f042 0202 	orrlt.w	r2, r2, #2
 8006838:	9307      	strge	r3, [sp, #28]
 800683a:	9307      	strlt	r3, [sp, #28]
 800683c:	bfb8      	it	lt
 800683e:	9204      	strlt	r2, [sp, #16]
 8006840:	7823      	ldrb	r3, [r4, #0]
 8006842:	2b2e      	cmp	r3, #46	@ 0x2e
 8006844:	d10a      	bne.n	800685c <_svfiprintf_r+0x130>
 8006846:	7863      	ldrb	r3, [r4, #1]
 8006848:	2b2a      	cmp	r3, #42	@ 0x2a
 800684a:	d132      	bne.n	80068b2 <_svfiprintf_r+0x186>
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	3402      	adds	r4, #2
 8006850:	1d1a      	adds	r2, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	9203      	str	r2, [sp, #12]
 8006856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800685a:	9305      	str	r3, [sp, #20]
 800685c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006914 <_svfiprintf_r+0x1e8>
 8006860:	2203      	movs	r2, #3
 8006862:	4650      	mov	r0, sl
 8006864:	7821      	ldrb	r1, [r4, #0]
 8006866:	f7fd fc7a 	bl	800415e <memchr>
 800686a:	b138      	cbz	r0, 800687c <_svfiprintf_r+0x150>
 800686c:	2240      	movs	r2, #64	@ 0x40
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	eba0 000a 	sub.w	r0, r0, sl
 8006874:	4082      	lsls	r2, r0
 8006876:	4313      	orrs	r3, r2
 8006878:	3401      	adds	r4, #1
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006880:	2206      	movs	r2, #6
 8006882:	4825      	ldr	r0, [pc, #148]	@ (8006918 <_svfiprintf_r+0x1ec>)
 8006884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006888:	f7fd fc69 	bl	800415e <memchr>
 800688c:	2800      	cmp	r0, #0
 800688e:	d036      	beq.n	80068fe <_svfiprintf_r+0x1d2>
 8006890:	4b22      	ldr	r3, [pc, #136]	@ (800691c <_svfiprintf_r+0x1f0>)
 8006892:	bb1b      	cbnz	r3, 80068dc <_svfiprintf_r+0x1b0>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	3307      	adds	r3, #7
 8006898:	f023 0307 	bic.w	r3, r3, #7
 800689c:	3308      	adds	r3, #8
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a2:	4433      	add	r3, r6
 80068a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a6:	e76a      	b.n	800677e <_svfiprintf_r+0x52>
 80068a8:	460c      	mov	r4, r1
 80068aa:	2001      	movs	r0, #1
 80068ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80068b0:	e7a8      	b.n	8006804 <_svfiprintf_r+0xd8>
 80068b2:	2300      	movs	r3, #0
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4619      	mov	r1, r3
 80068ba:	3401      	adds	r4, #1
 80068bc:	9305      	str	r3, [sp, #20]
 80068be:	4620      	mov	r0, r4
 80068c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c4:	3a30      	subs	r2, #48	@ 0x30
 80068c6:	2a09      	cmp	r2, #9
 80068c8:	d903      	bls.n	80068d2 <_svfiprintf_r+0x1a6>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c6      	beq.n	800685c <_svfiprintf_r+0x130>
 80068ce:	9105      	str	r1, [sp, #20]
 80068d0:	e7c4      	b.n	800685c <_svfiprintf_r+0x130>
 80068d2:	4604      	mov	r4, r0
 80068d4:	2301      	movs	r3, #1
 80068d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068da:	e7f0      	b.n	80068be <_svfiprintf_r+0x192>
 80068dc:	ab03      	add	r3, sp, #12
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	462a      	mov	r2, r5
 80068e2:	4638      	mov	r0, r7
 80068e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <_svfiprintf_r+0x1f4>)
 80068e6:	a904      	add	r1, sp, #16
 80068e8:	f7fc fccc 	bl	8003284 <_printf_float>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	4606      	mov	r6, r0
 80068f0:	d1d6      	bne.n	80068a0 <_svfiprintf_r+0x174>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	065b      	lsls	r3, r3, #25
 80068f6:	f53f af2d 	bmi.w	8006754 <_svfiprintf_r+0x28>
 80068fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068fc:	e72c      	b.n	8006758 <_svfiprintf_r+0x2c>
 80068fe:	ab03      	add	r3, sp, #12
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	462a      	mov	r2, r5
 8006904:	4638      	mov	r0, r7
 8006906:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <_svfiprintf_r+0x1f4>)
 8006908:	a904      	add	r1, sp, #16
 800690a:	f7fc ff59 	bl	80037c0 <_printf_i>
 800690e:	e7ed      	b.n	80068ec <_svfiprintf_r+0x1c0>
 8006910:	08007a7b 	.word	0x08007a7b
 8006914:	08007a81 	.word	0x08007a81
 8006918:	08007a85 	.word	0x08007a85
 800691c:	08003285 	.word	0x08003285
 8006920:	08006675 	.word	0x08006675

08006924 <__sflush_r>:
 8006924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	0716      	lsls	r6, r2, #28
 800692c:	4605      	mov	r5, r0
 800692e:	460c      	mov	r4, r1
 8006930:	d454      	bmi.n	80069dc <__sflush_r+0xb8>
 8006932:	684b      	ldr	r3, [r1, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc02      	bgt.n	800693e <__sflush_r+0x1a>
 8006938:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	dd48      	ble.n	80069d0 <__sflush_r+0xac>
 800693e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006940:	2e00      	cmp	r6, #0
 8006942:	d045      	beq.n	80069d0 <__sflush_r+0xac>
 8006944:	2300      	movs	r3, #0
 8006946:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800694a:	682f      	ldr	r7, [r5, #0]
 800694c:	6a21      	ldr	r1, [r4, #32]
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	d030      	beq.n	80069b4 <__sflush_r+0x90>
 8006952:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	0759      	lsls	r1, r3, #29
 8006958:	d505      	bpl.n	8006966 <__sflush_r+0x42>
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006960:	b10b      	cbz	r3, 8006966 <__sflush_r+0x42>
 8006962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	2300      	movs	r3, #0
 8006968:	4628      	mov	r0, r5
 800696a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	47b0      	blx	r6
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	d106      	bne.n	8006984 <__sflush_r+0x60>
 8006976:	6829      	ldr	r1, [r5, #0]
 8006978:	291d      	cmp	r1, #29
 800697a:	d82b      	bhi.n	80069d4 <__sflush_r+0xb0>
 800697c:	4a28      	ldr	r2, [pc, #160]	@ (8006a20 <__sflush_r+0xfc>)
 800697e:	40ca      	lsrs	r2, r1
 8006980:	07d6      	lsls	r6, r2, #31
 8006982:	d527      	bpl.n	80069d4 <__sflush_r+0xb0>
 8006984:	2200      	movs	r2, #0
 8006986:	6062      	str	r2, [r4, #4]
 8006988:	6922      	ldr	r2, [r4, #16]
 800698a:	04d9      	lsls	r1, r3, #19
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	d504      	bpl.n	800699a <__sflush_r+0x76>
 8006990:	1c42      	adds	r2, r0, #1
 8006992:	d101      	bne.n	8006998 <__sflush_r+0x74>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b903      	cbnz	r3, 800699a <__sflush_r+0x76>
 8006998:	6560      	str	r0, [r4, #84]	@ 0x54
 800699a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699c:	602f      	str	r7, [r5, #0]
 800699e:	b1b9      	cbz	r1, 80069d0 <__sflush_r+0xac>
 80069a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d002      	beq.n	80069ae <__sflush_r+0x8a>
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7fe fa49 	bl	8004e40 <_free_r>
 80069ae:	2300      	movs	r3, #0
 80069b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80069b2:	e00d      	b.n	80069d0 <__sflush_r+0xac>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b0      	blx	r6
 80069ba:	4602      	mov	r2, r0
 80069bc:	1c50      	adds	r0, r2, #1
 80069be:	d1c9      	bne.n	8006954 <__sflush_r+0x30>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0c6      	beq.n	8006954 <__sflush_r+0x30>
 80069c6:	2b1d      	cmp	r3, #29
 80069c8:	d001      	beq.n	80069ce <__sflush_r+0xaa>
 80069ca:	2b16      	cmp	r3, #22
 80069cc:	d11d      	bne.n	8006a0a <__sflush_r+0xe6>
 80069ce:	602f      	str	r7, [r5, #0]
 80069d0:	2000      	movs	r0, #0
 80069d2:	e021      	b.n	8006a18 <__sflush_r+0xf4>
 80069d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d8:	b21b      	sxth	r3, r3
 80069da:	e01a      	b.n	8006a12 <__sflush_r+0xee>
 80069dc:	690f      	ldr	r7, [r1, #16]
 80069de:	2f00      	cmp	r7, #0
 80069e0:	d0f6      	beq.n	80069d0 <__sflush_r+0xac>
 80069e2:	0793      	lsls	r3, r2, #30
 80069e4:	bf18      	it	ne
 80069e6:	2300      	movne	r3, #0
 80069e8:	680e      	ldr	r6, [r1, #0]
 80069ea:	bf08      	it	eq
 80069ec:	694b      	ldreq	r3, [r1, #20]
 80069ee:	1bf6      	subs	r6, r6, r7
 80069f0:	600f      	str	r7, [r1, #0]
 80069f2:	608b      	str	r3, [r1, #8]
 80069f4:	2e00      	cmp	r6, #0
 80069f6:	ddeb      	ble.n	80069d0 <__sflush_r+0xac>
 80069f8:	4633      	mov	r3, r6
 80069fa:	463a      	mov	r2, r7
 80069fc:	4628      	mov	r0, r5
 80069fe:	6a21      	ldr	r1, [r4, #32]
 8006a00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a04:	47e0      	blx	ip
 8006a06:	2800      	cmp	r0, #0
 8006a08:	dc07      	bgt.n	8006a1a <__sflush_r+0xf6>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a1a:	4407      	add	r7, r0
 8006a1c:	1a36      	subs	r6, r6, r0
 8006a1e:	e7e9      	b.n	80069f4 <__sflush_r+0xd0>
 8006a20:	20400001 	.word	0x20400001

08006a24 <_fflush_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	690b      	ldr	r3, [r1, #16]
 8006a28:	4605      	mov	r5, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b913      	cbnz	r3, 8006a34 <_fflush_r+0x10>
 8006a2e:	2500      	movs	r5, #0
 8006a30:	4628      	mov	r0, r5
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	b118      	cbz	r0, 8006a3e <_fflush_r+0x1a>
 8006a36:	6a03      	ldr	r3, [r0, #32]
 8006a38:	b90b      	cbnz	r3, 8006a3e <_fflush_r+0x1a>
 8006a3a:	f7fd fa75 	bl	8003f28 <__sinit>
 8006a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f3      	beq.n	8006a2e <_fflush_r+0xa>
 8006a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a48:	07d0      	lsls	r0, r2, #31
 8006a4a:	d404      	bmi.n	8006a56 <_fflush_r+0x32>
 8006a4c:	0599      	lsls	r1, r3, #22
 8006a4e:	d402      	bmi.n	8006a56 <_fflush_r+0x32>
 8006a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a52:	f7fd fb82 	bl	800415a <__retarget_lock_acquire_recursive>
 8006a56:	4628      	mov	r0, r5
 8006a58:	4621      	mov	r1, r4
 8006a5a:	f7ff ff63 	bl	8006924 <__sflush_r>
 8006a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a60:	4605      	mov	r5, r0
 8006a62:	07da      	lsls	r2, r3, #31
 8006a64:	d4e4      	bmi.n	8006a30 <_fflush_r+0xc>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	059b      	lsls	r3, r3, #22
 8006a6a:	d4e1      	bmi.n	8006a30 <_fflush_r+0xc>
 8006a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a6e:	f7fd fb75 	bl	800415c <__retarget_lock_release_recursive>
 8006a72:	e7dd      	b.n	8006a30 <_fflush_r+0xc>

08006a74 <memmove>:
 8006a74:	4288      	cmp	r0, r1
 8006a76:	b510      	push	{r4, lr}
 8006a78:	eb01 0402 	add.w	r4, r1, r2
 8006a7c:	d902      	bls.n	8006a84 <memmove+0x10>
 8006a7e:	4284      	cmp	r4, r0
 8006a80:	4623      	mov	r3, r4
 8006a82:	d807      	bhi.n	8006a94 <memmove+0x20>
 8006a84:	1e43      	subs	r3, r0, #1
 8006a86:	42a1      	cmp	r1, r4
 8006a88:	d008      	beq.n	8006a9c <memmove+0x28>
 8006a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a92:	e7f8      	b.n	8006a86 <memmove+0x12>
 8006a94:	4601      	mov	r1, r0
 8006a96:	4402      	add	r2, r0
 8006a98:	428a      	cmp	r2, r1
 8006a9a:	d100      	bne.n	8006a9e <memmove+0x2a>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aa6:	e7f7      	b.n	8006a98 <memmove+0x24>

08006aa8 <strncmp>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	b16a      	cbz	r2, 8006ac8 <strncmp+0x20>
 8006aac:	3901      	subs	r1, #1
 8006aae:	1884      	adds	r4, r0, r2
 8006ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d103      	bne.n	8006ac4 <strncmp+0x1c>
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d001      	beq.n	8006ac4 <strncmp+0x1c>
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <strncmp+0x8>
 8006ac4:	1ad0      	subs	r0, r2, r3
 8006ac6:	bd10      	pop	{r4, pc}
 8006ac8:	4610      	mov	r0, r2
 8006aca:	e7fc      	b.n	8006ac6 <strncmp+0x1e>

08006acc <_sbrk_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4d05      	ldr	r5, [pc, #20]	@ (8006ae8 <_sbrk_r+0x1c>)
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fb f90c 	bl	8001cf4 <_sbrk>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_sbrk_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_sbrk_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200003a8 	.word	0x200003a8

08006aec <memcpy>:
 8006aec:	440a      	add	r2, r1
 8006aee:	4291      	cmp	r1, r2
 8006af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af4:	d100      	bne.n	8006af8 <memcpy+0xc>
 8006af6:	4770      	bx	lr
 8006af8:	b510      	push	{r4, lr}
 8006afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b04:	d1f9      	bne.n	8006afa <memcpy+0xe>
 8006b06:	bd10      	pop	{r4, pc}

08006b08 <nan>:
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4901      	ldr	r1, [pc, #4]	@ (8006b10 <nan+0x8>)
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	7ff80000 	.word	0x7ff80000

08006b14 <__assert_func>:
 8006b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b16:	4614      	mov	r4, r2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <__assert_func+0x2c>)
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68d8      	ldr	r0, [r3, #12]
 8006b22:	b14c      	cbz	r4, 8006b38 <__assert_func+0x24>
 8006b24:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <__assert_func+0x30>)
 8006b26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b2a:	9100      	str	r1, [sp, #0]
 8006b2c:	462b      	mov	r3, r5
 8006b2e:	4906      	ldr	r1, [pc, #24]	@ (8006b48 <__assert_func+0x34>)
 8006b30:	f000 fba8 	bl	8007284 <fiprintf>
 8006b34:	f000 fbb8 	bl	80072a8 <abort>
 8006b38:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <__assert_func+0x38>)
 8006b3a:	461c      	mov	r4, r3
 8006b3c:	e7f3      	b.n	8006b26 <__assert_func+0x12>
 8006b3e:	bf00      	nop
 8006b40:	20000018 	.word	0x20000018
 8006b44:	08007a94 	.word	0x08007a94
 8006b48:	08007aa1 	.word	0x08007aa1
 8006b4c:	08007acf 	.word	0x08007acf

08006b50 <_calloc_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	fba1 5402 	umull	r5, r4, r1, r2
 8006b56:	b934      	cbnz	r4, 8006b66 <_calloc_r+0x16>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7fe f9e3 	bl	8004f24 <_malloc_r>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	b928      	cbnz	r0, 8006b6e <_calloc_r+0x1e>
 8006b62:	4630      	mov	r0, r6
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	220c      	movs	r2, #12
 8006b68:	2600      	movs	r6, #0
 8006b6a:	6002      	str	r2, [r0, #0]
 8006b6c:	e7f9      	b.n	8006b62 <_calloc_r+0x12>
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4621      	mov	r1, r4
 8006b72:	f7fd fa74 	bl	800405e <memset>
 8006b76:	e7f4      	b.n	8006b62 <_calloc_r+0x12>

08006b78 <rshift>:
 8006b78:	6903      	ldr	r3, [r0, #16]
 8006b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b82:	f100 0414 	add.w	r4, r0, #20
 8006b86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b8a:	dd46      	ble.n	8006c1a <rshift+0xa2>
 8006b8c:	f011 011f 	ands.w	r1, r1, #31
 8006b90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b98:	d10c      	bne.n	8006bb4 <rshift+0x3c>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	f100 0710 	add.w	r7, r0, #16
 8006ba0:	42b1      	cmp	r1, r6
 8006ba2:	d335      	bcc.n	8006c10 <rshift+0x98>
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	1eea      	subs	r2, r5, #3
 8006baa:	4296      	cmp	r6, r2
 8006bac:	bf38      	it	cc
 8006bae:	2300      	movcc	r3, #0
 8006bb0:	4423      	add	r3, r4
 8006bb2:	e015      	b.n	8006be0 <rshift+0x68>
 8006bb4:	46a1      	mov	r9, r4
 8006bb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006bba:	f1c1 0820 	rsb	r8, r1, #32
 8006bbe:	40cf      	lsrs	r7, r1
 8006bc0:	f105 0e04 	add.w	lr, r5, #4
 8006bc4:	4576      	cmp	r6, lr
 8006bc6:	46f4      	mov	ip, lr
 8006bc8:	d816      	bhi.n	8006bf8 <rshift+0x80>
 8006bca:	1a9a      	subs	r2, r3, r2
 8006bcc:	0092      	lsls	r2, r2, #2
 8006bce:	3a04      	subs	r2, #4
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	42ae      	cmp	r6, r5
 8006bd4:	bf38      	it	cc
 8006bd6:	2200      	movcc	r2, #0
 8006bd8:	18a3      	adds	r3, r4, r2
 8006bda:	50a7      	str	r7, [r4, r2]
 8006bdc:	b107      	cbz	r7, 8006be0 <rshift+0x68>
 8006bde:	3304      	adds	r3, #4
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	eba3 0204 	sub.w	r2, r3, r4
 8006be6:	bf08      	it	eq
 8006be8:	2300      	moveq	r3, #0
 8006bea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bee:	6102      	str	r2, [r0, #16]
 8006bf0:	bf08      	it	eq
 8006bf2:	6143      	streq	r3, [r0, #20]
 8006bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bf8:	f8dc c000 	ldr.w	ip, [ip]
 8006bfc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c00:	ea4c 0707 	orr.w	r7, ip, r7
 8006c04:	f849 7b04 	str.w	r7, [r9], #4
 8006c08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c0c:	40cf      	lsrs	r7, r1
 8006c0e:	e7d9      	b.n	8006bc4 <rshift+0x4c>
 8006c10:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c14:	f847 cf04 	str.w	ip, [r7, #4]!
 8006c18:	e7c2      	b.n	8006ba0 <rshift+0x28>
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	e7e0      	b.n	8006be0 <rshift+0x68>

08006c1e <__hexdig_fun>:
 8006c1e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006c22:	2b09      	cmp	r3, #9
 8006c24:	d802      	bhi.n	8006c2c <__hexdig_fun+0xe>
 8006c26:	3820      	subs	r0, #32
 8006c28:	b2c0      	uxtb	r0, r0
 8006c2a:	4770      	bx	lr
 8006c2c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006c30:	2b05      	cmp	r3, #5
 8006c32:	d801      	bhi.n	8006c38 <__hexdig_fun+0x1a>
 8006c34:	3847      	subs	r0, #71	@ 0x47
 8006c36:	e7f7      	b.n	8006c28 <__hexdig_fun+0xa>
 8006c38:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d801      	bhi.n	8006c44 <__hexdig_fun+0x26>
 8006c40:	3827      	subs	r0, #39	@ 0x27
 8006c42:	e7f1      	b.n	8006c28 <__hexdig_fun+0xa>
 8006c44:	2000      	movs	r0, #0
 8006c46:	4770      	bx	lr

08006c48 <__gethex>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	468a      	mov	sl, r1
 8006c4e:	4690      	mov	r8, r2
 8006c50:	b085      	sub	sp, #20
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	680b      	ldr	r3, [r1, #0]
 8006c56:	9001      	str	r0, [sp, #4]
 8006c58:	1c9c      	adds	r4, r3, #2
 8006c5a:	46a1      	mov	r9, r4
 8006c5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006c60:	2830      	cmp	r0, #48	@ 0x30
 8006c62:	d0fa      	beq.n	8006c5a <__gethex+0x12>
 8006c64:	eba9 0303 	sub.w	r3, r9, r3
 8006c68:	f1a3 0b02 	sub.w	fp, r3, #2
 8006c6c:	f7ff ffd7 	bl	8006c1e <__hexdig_fun>
 8006c70:	4605      	mov	r5, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d168      	bne.n	8006d48 <__gethex+0x100>
 8006c76:	2201      	movs	r2, #1
 8006c78:	4648      	mov	r0, r9
 8006c7a:	499f      	ldr	r1, [pc, #636]	@ (8006ef8 <__gethex+0x2b0>)
 8006c7c:	f7ff ff14 	bl	8006aa8 <strncmp>
 8006c80:	4607      	mov	r7, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d167      	bne.n	8006d56 <__gethex+0x10e>
 8006c86:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006c8a:	4626      	mov	r6, r4
 8006c8c:	f7ff ffc7 	bl	8006c1e <__hexdig_fun>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d062      	beq.n	8006d5a <__gethex+0x112>
 8006c94:	4623      	mov	r3, r4
 8006c96:	7818      	ldrb	r0, [r3, #0]
 8006c98:	4699      	mov	r9, r3
 8006c9a:	2830      	cmp	r0, #48	@ 0x30
 8006c9c:	f103 0301 	add.w	r3, r3, #1
 8006ca0:	d0f9      	beq.n	8006c96 <__gethex+0x4e>
 8006ca2:	f7ff ffbc 	bl	8006c1e <__hexdig_fun>
 8006ca6:	fab0 f580 	clz	r5, r0
 8006caa:	f04f 0b01 	mov.w	fp, #1
 8006cae:	096d      	lsrs	r5, r5, #5
 8006cb0:	464a      	mov	r2, r9
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	7830      	ldrb	r0, [r6, #0]
 8006cb6:	3201      	adds	r2, #1
 8006cb8:	f7ff ffb1 	bl	8006c1e <__hexdig_fun>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1f8      	bne.n	8006cb2 <__gethex+0x6a>
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	498c      	ldr	r1, [pc, #560]	@ (8006ef8 <__gethex+0x2b0>)
 8006cc6:	f7ff feef 	bl	8006aa8 <strncmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d13f      	bne.n	8006d4e <__gethex+0x106>
 8006cce:	b944      	cbnz	r4, 8006ce2 <__gethex+0x9a>
 8006cd0:	1c74      	adds	r4, r6, #1
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	7830      	ldrb	r0, [r6, #0]
 8006cd8:	3201      	adds	r2, #1
 8006cda:	f7ff ffa0 	bl	8006c1e <__hexdig_fun>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d1f8      	bne.n	8006cd4 <__gethex+0x8c>
 8006ce2:	1ba4      	subs	r4, r4, r6
 8006ce4:	00a7      	lsls	r7, r4, #2
 8006ce6:	7833      	ldrb	r3, [r6, #0]
 8006ce8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006cec:	2b50      	cmp	r3, #80	@ 0x50
 8006cee:	d13e      	bne.n	8006d6e <__gethex+0x126>
 8006cf0:	7873      	ldrb	r3, [r6, #1]
 8006cf2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006cf4:	d033      	beq.n	8006d5e <__gethex+0x116>
 8006cf6:	2b2d      	cmp	r3, #45	@ 0x2d
 8006cf8:	d034      	beq.n	8006d64 <__gethex+0x11c>
 8006cfa:	2400      	movs	r4, #0
 8006cfc:	1c71      	adds	r1, r6, #1
 8006cfe:	7808      	ldrb	r0, [r1, #0]
 8006d00:	f7ff ff8d 	bl	8006c1e <__hexdig_fun>
 8006d04:	1e43      	subs	r3, r0, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b18      	cmp	r3, #24
 8006d0a:	d830      	bhi.n	8006d6e <__gethex+0x126>
 8006d0c:	f1a0 0210 	sub.w	r2, r0, #16
 8006d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d14:	f7ff ff83 	bl	8006c1e <__hexdig_fun>
 8006d18:	f100 3cff 	add.w	ip, r0, #4294967295
 8006d1c:	fa5f fc8c 	uxtb.w	ip, ip
 8006d20:	f1bc 0f18 	cmp.w	ip, #24
 8006d24:	f04f 030a 	mov.w	r3, #10
 8006d28:	d91e      	bls.n	8006d68 <__gethex+0x120>
 8006d2a:	b104      	cbz	r4, 8006d2e <__gethex+0xe6>
 8006d2c:	4252      	negs	r2, r2
 8006d2e:	4417      	add	r7, r2
 8006d30:	f8ca 1000 	str.w	r1, [sl]
 8006d34:	b1ed      	cbz	r5, 8006d72 <__gethex+0x12a>
 8006d36:	f1bb 0f00 	cmp.w	fp, #0
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2506      	moveq	r5, #6
 8006d3e:	2500      	movne	r5, #0
 8006d40:	4628      	mov	r0, r5
 8006d42:	b005      	add	sp, #20
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d48:	2500      	movs	r5, #0
 8006d4a:	462c      	mov	r4, r5
 8006d4c:	e7b0      	b.n	8006cb0 <__gethex+0x68>
 8006d4e:	2c00      	cmp	r4, #0
 8006d50:	d1c7      	bne.n	8006ce2 <__gethex+0x9a>
 8006d52:	4627      	mov	r7, r4
 8006d54:	e7c7      	b.n	8006ce6 <__gethex+0x9e>
 8006d56:	464e      	mov	r6, r9
 8006d58:	462f      	mov	r7, r5
 8006d5a:	2501      	movs	r5, #1
 8006d5c:	e7c3      	b.n	8006ce6 <__gethex+0x9e>
 8006d5e:	2400      	movs	r4, #0
 8006d60:	1cb1      	adds	r1, r6, #2
 8006d62:	e7cc      	b.n	8006cfe <__gethex+0xb6>
 8006d64:	2401      	movs	r4, #1
 8006d66:	e7fb      	b.n	8006d60 <__gethex+0x118>
 8006d68:	fb03 0002 	mla	r0, r3, r2, r0
 8006d6c:	e7ce      	b.n	8006d0c <__gethex+0xc4>
 8006d6e:	4631      	mov	r1, r6
 8006d70:	e7de      	b.n	8006d30 <__gethex+0xe8>
 8006d72:	4629      	mov	r1, r5
 8006d74:	eba6 0309 	sub.w	r3, r6, r9
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	2b07      	cmp	r3, #7
 8006d7c:	dc0a      	bgt.n	8006d94 <__gethex+0x14c>
 8006d7e:	9801      	ldr	r0, [sp, #4]
 8006d80:	f7fe f95c 	bl	800503c <_Balloc>
 8006d84:	4604      	mov	r4, r0
 8006d86:	b940      	cbnz	r0, 8006d9a <__gethex+0x152>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	21e4      	movs	r1, #228	@ 0xe4
 8006d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8006efc <__gethex+0x2b4>)
 8006d8e:	485c      	ldr	r0, [pc, #368]	@ (8006f00 <__gethex+0x2b8>)
 8006d90:	f7ff fec0 	bl	8006b14 <__assert_func>
 8006d94:	3101      	adds	r1, #1
 8006d96:	105b      	asrs	r3, r3, #1
 8006d98:	e7ef      	b.n	8006d7a <__gethex+0x132>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f100 0a14 	add.w	sl, r0, #20
 8006da0:	4655      	mov	r5, sl
 8006da2:	469b      	mov	fp, r3
 8006da4:	45b1      	cmp	r9, r6
 8006da6:	d337      	bcc.n	8006e18 <__gethex+0x1d0>
 8006da8:	f845 bb04 	str.w	fp, [r5], #4
 8006dac:	eba5 050a 	sub.w	r5, r5, sl
 8006db0:	10ad      	asrs	r5, r5, #2
 8006db2:	6125      	str	r5, [r4, #16]
 8006db4:	4658      	mov	r0, fp
 8006db6:	f7fe fa33 	bl	8005220 <__hi0bits>
 8006dba:	016d      	lsls	r5, r5, #5
 8006dbc:	f8d8 6000 	ldr.w	r6, [r8]
 8006dc0:	1a2d      	subs	r5, r5, r0
 8006dc2:	42b5      	cmp	r5, r6
 8006dc4:	dd54      	ble.n	8006e70 <__gethex+0x228>
 8006dc6:	1bad      	subs	r5, r5, r6
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7fe fdb5 	bl	800593a <__any_on>
 8006dd0:	4681      	mov	r9, r0
 8006dd2:	b178      	cbz	r0, 8006df4 <__gethex+0x1ac>
 8006dd4:	f04f 0901 	mov.w	r9, #1
 8006dd8:	1e6b      	subs	r3, r5, #1
 8006dda:	1159      	asrs	r1, r3, #5
 8006ddc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006de0:	f003 021f 	and.w	r2, r3, #31
 8006de4:	fa09 f202 	lsl.w	r2, r9, r2
 8006de8:	420a      	tst	r2, r1
 8006dea:	d003      	beq.n	8006df4 <__gethex+0x1ac>
 8006dec:	454b      	cmp	r3, r9
 8006dee:	dc36      	bgt.n	8006e5e <__gethex+0x216>
 8006df0:	f04f 0902 	mov.w	r9, #2
 8006df4:	4629      	mov	r1, r5
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff febe 	bl	8006b78 <rshift>
 8006dfc:	442f      	add	r7, r5
 8006dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e02:	42bb      	cmp	r3, r7
 8006e04:	da42      	bge.n	8006e8c <__gethex+0x244>
 8006e06:	4621      	mov	r1, r4
 8006e08:	9801      	ldr	r0, [sp, #4]
 8006e0a:	f7fe f957 	bl	80050bc <_Bfree>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e12:	25a3      	movs	r5, #163	@ 0xa3
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e793      	b.n	8006d40 <__gethex+0xf8>
 8006e18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006e1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8006e1e:	d012      	beq.n	8006e46 <__gethex+0x1fe>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d104      	bne.n	8006e2e <__gethex+0x1e6>
 8006e24:	f845 bb04 	str.w	fp, [r5], #4
 8006e28:	f04f 0b00 	mov.w	fp, #0
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	7830      	ldrb	r0, [r6, #0]
 8006e30:	9303      	str	r3, [sp, #12]
 8006e32:	f7ff fef4 	bl	8006c1e <__hexdig_fun>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	f000 000f 	and.w	r0, r0, #15
 8006e3c:	4098      	lsls	r0, r3
 8006e3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006e42:	3304      	adds	r3, #4
 8006e44:	e7ae      	b.n	8006da4 <__gethex+0x15c>
 8006e46:	45b1      	cmp	r9, r6
 8006e48:	d8ea      	bhi.n	8006e20 <__gethex+0x1d8>
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	492a      	ldr	r1, [pc, #168]	@ (8006ef8 <__gethex+0x2b0>)
 8006e50:	9303      	str	r3, [sp, #12]
 8006e52:	f7ff fe29 	bl	8006aa8 <strncmp>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1e1      	bne.n	8006e20 <__gethex+0x1d8>
 8006e5c:	e7a2      	b.n	8006da4 <__gethex+0x15c>
 8006e5e:	4620      	mov	r0, r4
 8006e60:	1ea9      	subs	r1, r5, #2
 8006e62:	f7fe fd6a 	bl	800593a <__any_on>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0c2      	beq.n	8006df0 <__gethex+0x1a8>
 8006e6a:	f04f 0903 	mov.w	r9, #3
 8006e6e:	e7c1      	b.n	8006df4 <__gethex+0x1ac>
 8006e70:	da09      	bge.n	8006e86 <__gethex+0x23e>
 8006e72:	1b75      	subs	r5, r6, r5
 8006e74:	4621      	mov	r1, r4
 8006e76:	462a      	mov	r2, r5
 8006e78:	9801      	ldr	r0, [sp, #4]
 8006e7a:	f7fe fb2f 	bl	80054dc <__lshift>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	1b7f      	subs	r7, r7, r5
 8006e82:	f100 0a14 	add.w	sl, r0, #20
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	e7b8      	b.n	8006dfe <__gethex+0x1b6>
 8006e8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e90:	42bd      	cmp	r5, r7
 8006e92:	dd6f      	ble.n	8006f74 <__gethex+0x32c>
 8006e94:	1bed      	subs	r5, r5, r7
 8006e96:	42ae      	cmp	r6, r5
 8006e98:	dc34      	bgt.n	8006f04 <__gethex+0x2bc>
 8006e9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d022      	beq.n	8006ee8 <__gethex+0x2a0>
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d024      	beq.n	8006ef0 <__gethex+0x2a8>
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d115      	bne.n	8006ed6 <__gethex+0x28e>
 8006eaa:	42ae      	cmp	r6, r5
 8006eac:	d113      	bne.n	8006ed6 <__gethex+0x28e>
 8006eae:	2e01      	cmp	r6, #1
 8006eb0:	d10b      	bne.n	8006eca <__gethex+0x282>
 8006eb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006eb6:	9a02      	ldr	r2, [sp, #8]
 8006eb8:	2562      	movs	r5, #98	@ 0x62
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	f8ca 3000 	str.w	r3, [sl]
 8006ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec6:	601c      	str	r4, [r3, #0]
 8006ec8:	e73a      	b.n	8006d40 <__gethex+0xf8>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	1e71      	subs	r1, r6, #1
 8006ece:	f7fe fd34 	bl	800593a <__any_on>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1ed      	bne.n	8006eb2 <__gethex+0x26a>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	9801      	ldr	r0, [sp, #4]
 8006eda:	f7fe f8ef 	bl	80050bc <_Bfree>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ee2:	2550      	movs	r5, #80	@ 0x50
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e72b      	b.n	8006d40 <__gethex+0xf8>
 8006ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f3      	bne.n	8006ed6 <__gethex+0x28e>
 8006eee:	e7e0      	b.n	8006eb2 <__gethex+0x26a>
 8006ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1dd      	bne.n	8006eb2 <__gethex+0x26a>
 8006ef6:	e7ee      	b.n	8006ed6 <__gethex+0x28e>
 8006ef8:	08007a79 	.word	0x08007a79
 8006efc:	08007a0f 	.word	0x08007a0f
 8006f00:	08007ad0 	.word	0x08007ad0
 8006f04:	1e6f      	subs	r7, r5, #1
 8006f06:	f1b9 0f00 	cmp.w	r9, #0
 8006f0a:	d130      	bne.n	8006f6e <__gethex+0x326>
 8006f0c:	b127      	cbz	r7, 8006f18 <__gethex+0x2d0>
 8006f0e:	4639      	mov	r1, r7
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7fe fd12 	bl	800593a <__any_on>
 8006f16:	4681      	mov	r9, r0
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	1b76      	subs	r6, r6, r5
 8006f1e:	2502      	movs	r5, #2
 8006f20:	117a      	asrs	r2, r7, #5
 8006f22:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006f26:	f007 071f 	and.w	r7, r7, #31
 8006f2a:	40bb      	lsls	r3, r7
 8006f2c:	4213      	tst	r3, r2
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bf18      	it	ne
 8006f32:	f049 0902 	orrne.w	r9, r9, #2
 8006f36:	f7ff fe1f 	bl	8006b78 <rshift>
 8006f3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006f3e:	f1b9 0f00 	cmp.w	r9, #0
 8006f42:	d047      	beq.n	8006fd4 <__gethex+0x38c>
 8006f44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d015      	beq.n	8006f78 <__gethex+0x330>
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d017      	beq.n	8006f80 <__gethex+0x338>
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d109      	bne.n	8006f68 <__gethex+0x320>
 8006f54:	f019 0f02 	tst.w	r9, #2
 8006f58:	d006      	beq.n	8006f68 <__gethex+0x320>
 8006f5a:	f8da 3000 	ldr.w	r3, [sl]
 8006f5e:	ea49 0903 	orr.w	r9, r9, r3
 8006f62:	f019 0f01 	tst.w	r9, #1
 8006f66:	d10e      	bne.n	8006f86 <__gethex+0x33e>
 8006f68:	f045 0510 	orr.w	r5, r5, #16
 8006f6c:	e032      	b.n	8006fd4 <__gethex+0x38c>
 8006f6e:	f04f 0901 	mov.w	r9, #1
 8006f72:	e7d1      	b.n	8006f18 <__gethex+0x2d0>
 8006f74:	2501      	movs	r5, #1
 8006f76:	e7e2      	b.n	8006f3e <__gethex+0x2f6>
 8006f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7a:	f1c3 0301 	rsb	r3, r3, #1
 8006f7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <__gethex+0x320>
 8006f86:	f04f 0c00 	mov.w	ip, #0
 8006f8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f8e:	f104 0314 	add.w	r3, r4, #20
 8006f92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006fa4:	d01b      	beq.n	8006fde <__gethex+0x396>
 8006fa6:	3201      	adds	r2, #1
 8006fa8:	6002      	str	r2, [r0, #0]
 8006faa:	2d02      	cmp	r5, #2
 8006fac:	f104 0314 	add.w	r3, r4, #20
 8006fb0:	d13c      	bne.n	800702c <__gethex+0x3e4>
 8006fb2:	f8d8 2000 	ldr.w	r2, [r8]
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	42b2      	cmp	r2, r6
 8006fba:	d109      	bne.n	8006fd0 <__gethex+0x388>
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	1171      	asrs	r1, r6, #5
 8006fc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fc4:	f006 061f 	and.w	r6, r6, #31
 8006fc8:	fa02 f606 	lsl.w	r6, r2, r6
 8006fcc:	421e      	tst	r6, r3
 8006fce:	d13a      	bne.n	8007046 <__gethex+0x3fe>
 8006fd0:	f045 0520 	orr.w	r5, r5, #32
 8006fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fd6:	601c      	str	r4, [r3, #0]
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	601f      	str	r7, [r3, #0]
 8006fdc:	e6b0      	b.n	8006d40 <__gethex+0xf8>
 8006fde:	4299      	cmp	r1, r3
 8006fe0:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fe4:	d8d9      	bhi.n	8006f9a <__gethex+0x352>
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	459b      	cmp	fp, r3
 8006fea:	db17      	blt.n	800701c <__gethex+0x3d4>
 8006fec:	6861      	ldr	r1, [r4, #4]
 8006fee:	9801      	ldr	r0, [sp, #4]
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	f7fe f823 	bl	800503c <_Balloc>
 8006ff6:	4681      	mov	r9, r0
 8006ff8:	b918      	cbnz	r0, 8007002 <__gethex+0x3ba>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	2184      	movs	r1, #132	@ 0x84
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <__gethex+0x41c>)
 8007000:	e6c5      	b.n	8006d8e <__gethex+0x146>
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	f104 010c 	add.w	r1, r4, #12
 8007008:	3202      	adds	r2, #2
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	300c      	adds	r0, #12
 800700e:	f7ff fd6d 	bl	8006aec <memcpy>
 8007012:	4621      	mov	r1, r4
 8007014:	9801      	ldr	r0, [sp, #4]
 8007016:	f7fe f851 	bl	80050bc <_Bfree>
 800701a:	464c      	mov	r4, r9
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	6122      	str	r2, [r4, #16]
 8007022:	2201      	movs	r2, #1
 8007024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007028:	615a      	str	r2, [r3, #20]
 800702a:	e7be      	b.n	8006faa <__gethex+0x362>
 800702c:	6922      	ldr	r2, [r4, #16]
 800702e:	455a      	cmp	r2, fp
 8007030:	dd0b      	ble.n	800704a <__gethex+0x402>
 8007032:	2101      	movs	r1, #1
 8007034:	4620      	mov	r0, r4
 8007036:	f7ff fd9f 	bl	8006b78 <rshift>
 800703a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800703e:	3701      	adds	r7, #1
 8007040:	42bb      	cmp	r3, r7
 8007042:	f6ff aee0 	blt.w	8006e06 <__gethex+0x1be>
 8007046:	2501      	movs	r5, #1
 8007048:	e7c2      	b.n	8006fd0 <__gethex+0x388>
 800704a:	f016 061f 	ands.w	r6, r6, #31
 800704e:	d0fa      	beq.n	8007046 <__gethex+0x3fe>
 8007050:	4453      	add	r3, sl
 8007052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007056:	f7fe f8e3 	bl	8005220 <__hi0bits>
 800705a:	f1c6 0620 	rsb	r6, r6, #32
 800705e:	42b0      	cmp	r0, r6
 8007060:	dbe7      	blt.n	8007032 <__gethex+0x3ea>
 8007062:	e7f0      	b.n	8007046 <__gethex+0x3fe>
 8007064:	08007a0f 	.word	0x08007a0f

08007068 <L_shift>:
 8007068:	f1c2 0208 	rsb	r2, r2, #8
 800706c:	0092      	lsls	r2, r2, #2
 800706e:	b570      	push	{r4, r5, r6, lr}
 8007070:	f1c2 0620 	rsb	r6, r2, #32
 8007074:	6843      	ldr	r3, [r0, #4]
 8007076:	6804      	ldr	r4, [r0, #0]
 8007078:	fa03 f506 	lsl.w	r5, r3, r6
 800707c:	432c      	orrs	r4, r5
 800707e:	40d3      	lsrs	r3, r2
 8007080:	6004      	str	r4, [r0, #0]
 8007082:	f840 3f04 	str.w	r3, [r0, #4]!
 8007086:	4288      	cmp	r0, r1
 8007088:	d3f4      	bcc.n	8007074 <L_shift+0xc>
 800708a:	bd70      	pop	{r4, r5, r6, pc}

0800708c <__match>:
 800708c:	b530      	push	{r4, r5, lr}
 800708e:	6803      	ldr	r3, [r0, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007096:	b914      	cbnz	r4, 800709e <__match+0x12>
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	2001      	movs	r0, #1
 800709c:	bd30      	pop	{r4, r5, pc}
 800709e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80070a6:	2d19      	cmp	r5, #25
 80070a8:	bf98      	it	ls
 80070aa:	3220      	addls	r2, #32
 80070ac:	42a2      	cmp	r2, r4
 80070ae:	d0f0      	beq.n	8007092 <__match+0x6>
 80070b0:	2000      	movs	r0, #0
 80070b2:	e7f3      	b.n	800709c <__match+0x10>

080070b4 <__hexnan>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	2500      	movs	r5, #0
 80070ba:	680b      	ldr	r3, [r1, #0]
 80070bc:	4682      	mov	sl, r0
 80070be:	115e      	asrs	r6, r3, #5
 80070c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070c4:	f013 031f 	ands.w	r3, r3, #31
 80070c8:	bf18      	it	ne
 80070ca:	3604      	addne	r6, #4
 80070cc:	1f37      	subs	r7, r6, #4
 80070ce:	4690      	mov	r8, r2
 80070d0:	46b9      	mov	r9, r7
 80070d2:	463c      	mov	r4, r7
 80070d4:	46ab      	mov	fp, r5
 80070d6:	b087      	sub	sp, #28
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80070e0:	9502      	str	r5, [sp, #8]
 80070e2:	784a      	ldrb	r2, [r1, #1]
 80070e4:	1c4b      	adds	r3, r1, #1
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	b342      	cbz	r2, 800713c <__hexnan+0x88>
 80070ea:	4610      	mov	r0, r2
 80070ec:	9105      	str	r1, [sp, #20]
 80070ee:	9204      	str	r2, [sp, #16]
 80070f0:	f7ff fd95 	bl	8006c1e <__hexdig_fun>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d151      	bne.n	800719c <__hexnan+0xe8>
 80070f8:	9a04      	ldr	r2, [sp, #16]
 80070fa:	9905      	ldr	r1, [sp, #20]
 80070fc:	2a20      	cmp	r2, #32
 80070fe:	d818      	bhi.n	8007132 <__hexnan+0x7e>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	459b      	cmp	fp, r3
 8007104:	dd13      	ble.n	800712e <__hexnan+0x7a>
 8007106:	454c      	cmp	r4, r9
 8007108:	d206      	bcs.n	8007118 <__hexnan+0x64>
 800710a:	2d07      	cmp	r5, #7
 800710c:	dc04      	bgt.n	8007118 <__hexnan+0x64>
 800710e:	462a      	mov	r2, r5
 8007110:	4649      	mov	r1, r9
 8007112:	4620      	mov	r0, r4
 8007114:	f7ff ffa8 	bl	8007068 <L_shift>
 8007118:	4544      	cmp	r4, r8
 800711a:	d952      	bls.n	80071c2 <__hexnan+0x10e>
 800711c:	2300      	movs	r3, #0
 800711e:	f1a4 0904 	sub.w	r9, r4, #4
 8007122:	f844 3c04 	str.w	r3, [r4, #-4]
 8007126:	461d      	mov	r5, r3
 8007128:	464c      	mov	r4, r9
 800712a:	f8cd b008 	str.w	fp, [sp, #8]
 800712e:	9903      	ldr	r1, [sp, #12]
 8007130:	e7d7      	b.n	80070e2 <__hexnan+0x2e>
 8007132:	2a29      	cmp	r2, #41	@ 0x29
 8007134:	d157      	bne.n	80071e6 <__hexnan+0x132>
 8007136:	3102      	adds	r1, #2
 8007138:	f8ca 1000 	str.w	r1, [sl]
 800713c:	f1bb 0f00 	cmp.w	fp, #0
 8007140:	d051      	beq.n	80071e6 <__hexnan+0x132>
 8007142:	454c      	cmp	r4, r9
 8007144:	d206      	bcs.n	8007154 <__hexnan+0xa0>
 8007146:	2d07      	cmp	r5, #7
 8007148:	dc04      	bgt.n	8007154 <__hexnan+0xa0>
 800714a:	462a      	mov	r2, r5
 800714c:	4649      	mov	r1, r9
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff ff8a 	bl	8007068 <L_shift>
 8007154:	4544      	cmp	r4, r8
 8007156:	d936      	bls.n	80071c6 <__hexnan+0x112>
 8007158:	4623      	mov	r3, r4
 800715a:	f1a8 0204 	sub.w	r2, r8, #4
 800715e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007162:	429f      	cmp	r7, r3
 8007164:	f842 1f04 	str.w	r1, [r2, #4]!
 8007168:	d2f9      	bcs.n	800715e <__hexnan+0xaa>
 800716a:	1b3b      	subs	r3, r7, r4
 800716c:	f023 0303 	bic.w	r3, r3, #3
 8007170:	3304      	adds	r3, #4
 8007172:	3401      	adds	r4, #1
 8007174:	3e03      	subs	r6, #3
 8007176:	42b4      	cmp	r4, r6
 8007178:	bf88      	it	hi
 800717a:	2304      	movhi	r3, #4
 800717c:	2200      	movs	r2, #0
 800717e:	4443      	add	r3, r8
 8007180:	f843 2b04 	str.w	r2, [r3], #4
 8007184:	429f      	cmp	r7, r3
 8007186:	d2fb      	bcs.n	8007180 <__hexnan+0xcc>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	b91b      	cbnz	r3, 8007194 <__hexnan+0xe0>
 800718c:	4547      	cmp	r7, r8
 800718e:	d128      	bne.n	80071e2 <__hexnan+0x12e>
 8007190:	2301      	movs	r3, #1
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	2005      	movs	r0, #5
 8007196:	b007      	add	sp, #28
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	3501      	adds	r5, #1
 800719e:	2d08      	cmp	r5, #8
 80071a0:	f10b 0b01 	add.w	fp, fp, #1
 80071a4:	dd06      	ble.n	80071b4 <__hexnan+0x100>
 80071a6:	4544      	cmp	r4, r8
 80071a8:	d9c1      	bls.n	800712e <__hexnan+0x7a>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2501      	movs	r5, #1
 80071ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80071b2:	3c04      	subs	r4, #4
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	f000 000f 	and.w	r0, r0, #15
 80071ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	e7b5      	b.n	800712e <__hexnan+0x7a>
 80071c2:	2508      	movs	r5, #8
 80071c4:	e7b3      	b.n	800712e <__hexnan+0x7a>
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0dd      	beq.n	8007188 <__hexnan+0xd4>
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	f1c3 0320 	rsb	r3, r3, #32
 80071d4:	40da      	lsrs	r2, r3
 80071d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80071da:	4013      	ands	r3, r2
 80071dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80071e0:	e7d2      	b.n	8007188 <__hexnan+0xd4>
 80071e2:	3f04      	subs	r7, #4
 80071e4:	e7d0      	b.n	8007188 <__hexnan+0xd4>
 80071e6:	2004      	movs	r0, #4
 80071e8:	e7d5      	b.n	8007196 <__hexnan+0xe2>

080071ea <__ascii_mbtowc>:
 80071ea:	b082      	sub	sp, #8
 80071ec:	b901      	cbnz	r1, 80071f0 <__ascii_mbtowc+0x6>
 80071ee:	a901      	add	r1, sp, #4
 80071f0:	b142      	cbz	r2, 8007204 <__ascii_mbtowc+0x1a>
 80071f2:	b14b      	cbz	r3, 8007208 <__ascii_mbtowc+0x1e>
 80071f4:	7813      	ldrb	r3, [r2, #0]
 80071f6:	600b      	str	r3, [r1, #0]
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	1e10      	subs	r0, r2, #0
 80071fc:	bf18      	it	ne
 80071fe:	2001      	movne	r0, #1
 8007200:	b002      	add	sp, #8
 8007202:	4770      	bx	lr
 8007204:	4610      	mov	r0, r2
 8007206:	e7fb      	b.n	8007200 <__ascii_mbtowc+0x16>
 8007208:	f06f 0001 	mvn.w	r0, #1
 800720c:	e7f8      	b.n	8007200 <__ascii_mbtowc+0x16>

0800720e <_realloc_r>:
 800720e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007212:	4607      	mov	r7, r0
 8007214:	4614      	mov	r4, r2
 8007216:	460d      	mov	r5, r1
 8007218:	b921      	cbnz	r1, 8007224 <_realloc_r+0x16>
 800721a:	4611      	mov	r1, r2
 800721c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	f7fd be80 	b.w	8004f24 <_malloc_r>
 8007224:	b92a      	cbnz	r2, 8007232 <_realloc_r+0x24>
 8007226:	f7fd fe0b 	bl	8004e40 <_free_r>
 800722a:	4625      	mov	r5, r4
 800722c:	4628      	mov	r0, r5
 800722e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007232:	f000 f840 	bl	80072b6 <_malloc_usable_size_r>
 8007236:	4284      	cmp	r4, r0
 8007238:	4606      	mov	r6, r0
 800723a:	d802      	bhi.n	8007242 <_realloc_r+0x34>
 800723c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007240:	d8f4      	bhi.n	800722c <_realloc_r+0x1e>
 8007242:	4621      	mov	r1, r4
 8007244:	4638      	mov	r0, r7
 8007246:	f7fd fe6d 	bl	8004f24 <_malloc_r>
 800724a:	4680      	mov	r8, r0
 800724c:	b908      	cbnz	r0, 8007252 <_realloc_r+0x44>
 800724e:	4645      	mov	r5, r8
 8007250:	e7ec      	b.n	800722c <_realloc_r+0x1e>
 8007252:	42b4      	cmp	r4, r6
 8007254:	4622      	mov	r2, r4
 8007256:	4629      	mov	r1, r5
 8007258:	bf28      	it	cs
 800725a:	4632      	movcs	r2, r6
 800725c:	f7ff fc46 	bl	8006aec <memcpy>
 8007260:	4629      	mov	r1, r5
 8007262:	4638      	mov	r0, r7
 8007264:	f7fd fdec 	bl	8004e40 <_free_r>
 8007268:	e7f1      	b.n	800724e <_realloc_r+0x40>

0800726a <__ascii_wctomb>:
 800726a:	4603      	mov	r3, r0
 800726c:	4608      	mov	r0, r1
 800726e:	b141      	cbz	r1, 8007282 <__ascii_wctomb+0x18>
 8007270:	2aff      	cmp	r2, #255	@ 0xff
 8007272:	d904      	bls.n	800727e <__ascii_wctomb+0x14>
 8007274:	228a      	movs	r2, #138	@ 0x8a
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	4770      	bx	lr
 800727e:	2001      	movs	r0, #1
 8007280:	700a      	strb	r2, [r1, #0]
 8007282:	4770      	bx	lr

08007284 <fiprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b503      	push	{r0, r1, lr}
 8007288:	4601      	mov	r1, r0
 800728a:	ab03      	add	r3, sp, #12
 800728c:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <fiprintf+0x20>)
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	6800      	ldr	r0, [r0, #0]
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	f000 f83d 	bl	8007314 <_vfiprintf_r>
 800729a:	b002      	add	sp, #8
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	b003      	add	sp, #12
 80072a2:	4770      	bx	lr
 80072a4:	20000018 	.word	0x20000018

080072a8 <abort>:
 80072a8:	2006      	movs	r0, #6
 80072aa:	b508      	push	{r3, lr}
 80072ac:	f000 fa06 	bl	80076bc <raise>
 80072b0:	2001      	movs	r0, #1
 80072b2:	f7fa fcaa 	bl	8001c0a <_exit>

080072b6 <_malloc_usable_size_r>:
 80072b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ba:	1f18      	subs	r0, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfbc      	itt	lt
 80072c0:	580b      	ldrlt	r3, [r1, r0]
 80072c2:	18c0      	addlt	r0, r0, r3
 80072c4:	4770      	bx	lr

080072c6 <__sfputc_r>:
 80072c6:	6893      	ldr	r3, [r2, #8]
 80072c8:	b410      	push	{r4}
 80072ca:	3b01      	subs	r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	6093      	str	r3, [r2, #8]
 80072d0:	da07      	bge.n	80072e2 <__sfputc_r+0x1c>
 80072d2:	6994      	ldr	r4, [r2, #24]
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	db01      	blt.n	80072dc <__sfputc_r+0x16>
 80072d8:	290a      	cmp	r1, #10
 80072da:	d102      	bne.n	80072e2 <__sfputc_r+0x1c>
 80072dc:	bc10      	pop	{r4}
 80072de:	f000 b931 	b.w	8007544 <__swbuf_r>
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	1c58      	adds	r0, r3, #1
 80072e6:	6010      	str	r0, [r2, #0]
 80072e8:	7019      	strb	r1, [r3, #0]
 80072ea:	4608      	mov	r0, r1
 80072ec:	bc10      	pop	{r4}
 80072ee:	4770      	bx	lr

080072f0 <__sfputs_r>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	4606      	mov	r6, r0
 80072f4:	460f      	mov	r7, r1
 80072f6:	4614      	mov	r4, r2
 80072f8:	18d5      	adds	r5, r2, r3
 80072fa:	42ac      	cmp	r4, r5
 80072fc:	d101      	bne.n	8007302 <__sfputs_r+0x12>
 80072fe:	2000      	movs	r0, #0
 8007300:	e007      	b.n	8007312 <__sfputs_r+0x22>
 8007302:	463a      	mov	r2, r7
 8007304:	4630      	mov	r0, r6
 8007306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730a:	f7ff ffdc 	bl	80072c6 <__sfputc_r>
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	d1f3      	bne.n	80072fa <__sfputs_r+0xa>
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007314 <_vfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	460d      	mov	r5, r1
 800731a:	4614      	mov	r4, r2
 800731c:	4698      	mov	r8, r3
 800731e:	4606      	mov	r6, r0
 8007320:	b09d      	sub	sp, #116	@ 0x74
 8007322:	b118      	cbz	r0, 800732c <_vfiprintf_r+0x18>
 8007324:	6a03      	ldr	r3, [r0, #32]
 8007326:	b90b      	cbnz	r3, 800732c <_vfiprintf_r+0x18>
 8007328:	f7fc fdfe 	bl	8003f28 <__sinit>
 800732c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	d405      	bmi.n	800733e <_vfiprintf_r+0x2a>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	059a      	lsls	r2, r3, #22
 8007336:	d402      	bmi.n	800733e <_vfiprintf_r+0x2a>
 8007338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800733a:	f7fc ff0e 	bl	800415a <__retarget_lock_acquire_recursive>
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	071b      	lsls	r3, r3, #28
 8007342:	d501      	bpl.n	8007348 <_vfiprintf_r+0x34>
 8007344:	692b      	ldr	r3, [r5, #16]
 8007346:	b99b      	cbnz	r3, 8007370 <_vfiprintf_r+0x5c>
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f938 	bl	80075c0 <__swsetup_r>
 8007350:	b170      	cbz	r0, 8007370 <_vfiprintf_r+0x5c>
 8007352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007354:	07dc      	lsls	r4, r3, #31
 8007356:	d504      	bpl.n	8007362 <_vfiprintf_r+0x4e>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	b01d      	add	sp, #116	@ 0x74
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	0598      	lsls	r0, r3, #22
 8007366:	d4f7      	bmi.n	8007358 <_vfiprintf_r+0x44>
 8007368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800736a:	f7fc fef7 	bl	800415c <__retarget_lock_release_recursive>
 800736e:	e7f3      	b.n	8007358 <_vfiprintf_r+0x44>
 8007370:	2300      	movs	r3, #0
 8007372:	9309      	str	r3, [sp, #36]	@ 0x24
 8007374:	2320      	movs	r3, #32
 8007376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800737a:	2330      	movs	r3, #48	@ 0x30
 800737c:	f04f 0901 	mov.w	r9, #1
 8007380:	f8cd 800c 	str.w	r8, [sp, #12]
 8007384:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007530 <_vfiprintf_r+0x21c>
 8007388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800738c:	4623      	mov	r3, r4
 800738e:	469a      	mov	sl, r3
 8007390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007394:	b10a      	cbz	r2, 800739a <_vfiprintf_r+0x86>
 8007396:	2a25      	cmp	r2, #37	@ 0x25
 8007398:	d1f9      	bne.n	800738e <_vfiprintf_r+0x7a>
 800739a:	ebba 0b04 	subs.w	fp, sl, r4
 800739e:	d00b      	beq.n	80073b8 <_vfiprintf_r+0xa4>
 80073a0:	465b      	mov	r3, fp
 80073a2:	4622      	mov	r2, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ffa2 	bl	80072f0 <__sfputs_r>
 80073ac:	3001      	adds	r0, #1
 80073ae:	f000 80a7 	beq.w	8007500 <_vfiprintf_r+0x1ec>
 80073b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b4:	445a      	add	r2, fp
 80073b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b8:	f89a 3000 	ldrb.w	r3, [sl]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 809f 	beq.w	8007500 <_vfiprintf_r+0x1ec>
 80073c2:	2300      	movs	r3, #0
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073cc:	f10a 0a01 	add.w	sl, sl, #1
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	9307      	str	r3, [sp, #28]
 80073d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073da:	4654      	mov	r4, sl
 80073dc:	2205      	movs	r2, #5
 80073de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e2:	4853      	ldr	r0, [pc, #332]	@ (8007530 <_vfiprintf_r+0x21c>)
 80073e4:	f7fc febb 	bl	800415e <memchr>
 80073e8:	9a04      	ldr	r2, [sp, #16]
 80073ea:	b9d8      	cbnz	r0, 8007424 <_vfiprintf_r+0x110>
 80073ec:	06d1      	lsls	r1, r2, #27
 80073ee:	bf44      	itt	mi
 80073f0:	2320      	movmi	r3, #32
 80073f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f6:	0713      	lsls	r3, r2, #28
 80073f8:	bf44      	itt	mi
 80073fa:	232b      	movmi	r3, #43	@ 0x2b
 80073fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007400:	f89a 3000 	ldrb.w	r3, [sl]
 8007404:	2b2a      	cmp	r3, #42	@ 0x2a
 8007406:	d015      	beq.n	8007434 <_vfiprintf_r+0x120>
 8007408:	4654      	mov	r4, sl
 800740a:	2000      	movs	r0, #0
 800740c:	f04f 0c0a 	mov.w	ip, #10
 8007410:	9a07      	ldr	r2, [sp, #28]
 8007412:	4621      	mov	r1, r4
 8007414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007418:	3b30      	subs	r3, #48	@ 0x30
 800741a:	2b09      	cmp	r3, #9
 800741c:	d94b      	bls.n	80074b6 <_vfiprintf_r+0x1a2>
 800741e:	b1b0      	cbz	r0, 800744e <_vfiprintf_r+0x13a>
 8007420:	9207      	str	r2, [sp, #28]
 8007422:	e014      	b.n	800744e <_vfiprintf_r+0x13a>
 8007424:	eba0 0308 	sub.w	r3, r0, r8
 8007428:	fa09 f303 	lsl.w	r3, r9, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	46a2      	mov	sl, r4
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	e7d2      	b.n	80073da <_vfiprintf_r+0xc6>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d19      	adds	r1, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9103      	str	r1, [sp, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfbb      	ittet	lt
 8007440:	425b      	neglt	r3, r3
 8007442:	f042 0202 	orrlt.w	r2, r2, #2
 8007446:	9307      	strge	r3, [sp, #28]
 8007448:	9307      	strlt	r3, [sp, #28]
 800744a:	bfb8      	it	lt
 800744c:	9204      	strlt	r2, [sp, #16]
 800744e:	7823      	ldrb	r3, [r4, #0]
 8007450:	2b2e      	cmp	r3, #46	@ 0x2e
 8007452:	d10a      	bne.n	800746a <_vfiprintf_r+0x156>
 8007454:	7863      	ldrb	r3, [r4, #1]
 8007456:	2b2a      	cmp	r3, #42	@ 0x2a
 8007458:	d132      	bne.n	80074c0 <_vfiprintf_r+0x1ac>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	3402      	adds	r4, #2
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	9203      	str	r2, [sp, #12]
 8007464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007534 <_vfiprintf_r+0x220>
 800746e:	2203      	movs	r2, #3
 8007470:	4650      	mov	r0, sl
 8007472:	7821      	ldrb	r1, [r4, #0]
 8007474:	f7fc fe73 	bl	800415e <memchr>
 8007478:	b138      	cbz	r0, 800748a <_vfiprintf_r+0x176>
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	eba0 000a 	sub.w	r0, r0, sl
 8007482:	4082      	lsls	r2, r0
 8007484:	4313      	orrs	r3, r2
 8007486:	3401      	adds	r4, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	2206      	movs	r2, #6
 8007490:	4829      	ldr	r0, [pc, #164]	@ (8007538 <_vfiprintf_r+0x224>)
 8007492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007496:	f7fc fe62 	bl	800415e <memchr>
 800749a:	2800      	cmp	r0, #0
 800749c:	d03f      	beq.n	800751e <_vfiprintf_r+0x20a>
 800749e:	4b27      	ldr	r3, [pc, #156]	@ (800753c <_vfiprintf_r+0x228>)
 80074a0:	bb1b      	cbnz	r3, 80074ea <_vfiprintf_r+0x1d6>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	3307      	adds	r3, #7
 80074a6:	f023 0307 	bic.w	r3, r3, #7
 80074aa:	3308      	adds	r3, #8
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	443b      	add	r3, r7
 80074b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b4:	e76a      	b.n	800738c <_vfiprintf_r+0x78>
 80074b6:	460c      	mov	r4, r1
 80074b8:	2001      	movs	r0, #1
 80074ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80074be:	e7a8      	b.n	8007412 <_vfiprintf_r+0xfe>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f04f 0c0a 	mov.w	ip, #10
 80074c6:	4619      	mov	r1, r3
 80074c8:	3401      	adds	r4, #1
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	4620      	mov	r0, r4
 80074ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074d2:	3a30      	subs	r2, #48	@ 0x30
 80074d4:	2a09      	cmp	r2, #9
 80074d6:	d903      	bls.n	80074e0 <_vfiprintf_r+0x1cc>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0c6      	beq.n	800746a <_vfiprintf_r+0x156>
 80074dc:	9105      	str	r1, [sp, #20]
 80074de:	e7c4      	b.n	800746a <_vfiprintf_r+0x156>
 80074e0:	4604      	mov	r4, r0
 80074e2:	2301      	movs	r3, #1
 80074e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80074e8:	e7f0      	b.n	80074cc <_vfiprintf_r+0x1b8>
 80074ea:	ab03      	add	r3, sp, #12
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	462a      	mov	r2, r5
 80074f0:	4630      	mov	r0, r6
 80074f2:	4b13      	ldr	r3, [pc, #76]	@ (8007540 <_vfiprintf_r+0x22c>)
 80074f4:	a904      	add	r1, sp, #16
 80074f6:	f7fb fec5 	bl	8003284 <_printf_float>
 80074fa:	4607      	mov	r7, r0
 80074fc:	1c78      	adds	r0, r7, #1
 80074fe:	d1d6      	bne.n	80074ae <_vfiprintf_r+0x19a>
 8007500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007502:	07d9      	lsls	r1, r3, #31
 8007504:	d405      	bmi.n	8007512 <_vfiprintf_r+0x1fe>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	059a      	lsls	r2, r3, #22
 800750a:	d402      	bmi.n	8007512 <_vfiprintf_r+0x1fe>
 800750c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800750e:	f7fc fe25 	bl	800415c <__retarget_lock_release_recursive>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	065b      	lsls	r3, r3, #25
 8007516:	f53f af1f 	bmi.w	8007358 <_vfiprintf_r+0x44>
 800751a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800751c:	e71e      	b.n	800735c <_vfiprintf_r+0x48>
 800751e:	ab03      	add	r3, sp, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	4630      	mov	r0, r6
 8007526:	4b06      	ldr	r3, [pc, #24]	@ (8007540 <_vfiprintf_r+0x22c>)
 8007528:	a904      	add	r1, sp, #16
 800752a:	f7fc f949 	bl	80037c0 <_printf_i>
 800752e:	e7e4      	b.n	80074fa <_vfiprintf_r+0x1e6>
 8007530:	08007a7b 	.word	0x08007a7b
 8007534:	08007a81 	.word	0x08007a81
 8007538:	08007a85 	.word	0x08007a85
 800753c:	08003285 	.word	0x08003285
 8007540:	080072f1 	.word	0x080072f1

08007544 <__swbuf_r>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	460e      	mov	r6, r1
 8007548:	4614      	mov	r4, r2
 800754a:	4605      	mov	r5, r0
 800754c:	b118      	cbz	r0, 8007556 <__swbuf_r+0x12>
 800754e:	6a03      	ldr	r3, [r0, #32]
 8007550:	b90b      	cbnz	r3, 8007556 <__swbuf_r+0x12>
 8007552:	f7fc fce9 	bl	8003f28 <__sinit>
 8007556:	69a3      	ldr	r3, [r4, #24]
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	071a      	lsls	r2, r3, #28
 800755e:	d501      	bpl.n	8007564 <__swbuf_r+0x20>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b943      	cbnz	r3, 8007576 <__swbuf_r+0x32>
 8007564:	4621      	mov	r1, r4
 8007566:	4628      	mov	r0, r5
 8007568:	f000 f82a 	bl	80075c0 <__swsetup_r>
 800756c:	b118      	cbz	r0, 8007576 <__swbuf_r+0x32>
 800756e:	f04f 37ff 	mov.w	r7, #4294967295
 8007572:	4638      	mov	r0, r7
 8007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	b2f6      	uxtb	r6, r6
 800757c:	1a98      	subs	r0, r3, r2
 800757e:	6963      	ldr	r3, [r4, #20]
 8007580:	4637      	mov	r7, r6
 8007582:	4283      	cmp	r3, r0
 8007584:	dc05      	bgt.n	8007592 <__swbuf_r+0x4e>
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f7ff fa4b 	bl	8006a24 <_fflush_r>
 800758e:	2800      	cmp	r0, #0
 8007590:	d1ed      	bne.n	800756e <__swbuf_r+0x2a>
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	3b01      	subs	r3, #1
 8007596:	60a3      	str	r3, [r4, #8]
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	6022      	str	r2, [r4, #0]
 800759e:	701e      	strb	r6, [r3, #0]
 80075a0:	6962      	ldr	r2, [r4, #20]
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d004      	beq.n	80075b2 <__swbuf_r+0x6e>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d5e1      	bpl.n	8007572 <__swbuf_r+0x2e>
 80075ae:	2e0a      	cmp	r6, #10
 80075b0:	d1df      	bne.n	8007572 <__swbuf_r+0x2e>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f7ff fa35 	bl	8006a24 <_fflush_r>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0d9      	beq.n	8007572 <__swbuf_r+0x2e>
 80075be:	e7d6      	b.n	800756e <__swbuf_r+0x2a>

080075c0 <__swsetup_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4b29      	ldr	r3, [pc, #164]	@ (8007668 <__swsetup_r+0xa8>)
 80075c4:	4605      	mov	r5, r0
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	460c      	mov	r4, r1
 80075ca:	b118      	cbz	r0, 80075d4 <__swsetup_r+0x14>
 80075cc:	6a03      	ldr	r3, [r0, #32]
 80075ce:	b90b      	cbnz	r3, 80075d4 <__swsetup_r+0x14>
 80075d0:	f7fc fcaa 	bl	8003f28 <__sinit>
 80075d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d8:	0719      	lsls	r1, r3, #28
 80075da:	d422      	bmi.n	8007622 <__swsetup_r+0x62>
 80075dc:	06da      	lsls	r2, r3, #27
 80075de:	d407      	bmi.n	80075f0 <__swsetup_r+0x30>
 80075e0:	2209      	movs	r2, #9
 80075e2:	602a      	str	r2, [r5, #0]
 80075e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	e033      	b.n	8007658 <__swsetup_r+0x98>
 80075f0:	0758      	lsls	r0, r3, #29
 80075f2:	d512      	bpl.n	800761a <__swsetup_r+0x5a>
 80075f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075f6:	b141      	cbz	r1, 800760a <__swsetup_r+0x4a>
 80075f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075fc:	4299      	cmp	r1, r3
 80075fe:	d002      	beq.n	8007606 <__swsetup_r+0x46>
 8007600:	4628      	mov	r0, r5
 8007602:	f7fd fc1d 	bl	8004e40 <_free_r>
 8007606:	2300      	movs	r3, #0
 8007608:	6363      	str	r3, [r4, #52]	@ 0x34
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	2300      	movs	r3, #0
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f043 0308 	orr.w	r3, r3, #8
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	b94b      	cbnz	r3, 800763a <__swsetup_r+0x7a>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800762c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007630:	d003      	beq.n	800763a <__swsetup_r+0x7a>
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f882 	bl	800773e <__smakebuf_r>
 800763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763e:	f013 0201 	ands.w	r2, r3, #1
 8007642:	d00a      	beq.n	800765a <__swsetup_r+0x9a>
 8007644:	2200      	movs	r2, #0
 8007646:	60a2      	str	r2, [r4, #8]
 8007648:	6962      	ldr	r2, [r4, #20]
 800764a:	4252      	negs	r2, r2
 800764c:	61a2      	str	r2, [r4, #24]
 800764e:	6922      	ldr	r2, [r4, #16]
 8007650:	b942      	cbnz	r2, 8007664 <__swsetup_r+0xa4>
 8007652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007656:	d1c5      	bne.n	80075e4 <__swsetup_r+0x24>
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	0799      	lsls	r1, r3, #30
 800765c:	bf58      	it	pl
 800765e:	6962      	ldrpl	r2, [r4, #20]
 8007660:	60a2      	str	r2, [r4, #8]
 8007662:	e7f4      	b.n	800764e <__swsetup_r+0x8e>
 8007664:	2000      	movs	r0, #0
 8007666:	e7f7      	b.n	8007658 <__swsetup_r+0x98>
 8007668:	20000018 	.word	0x20000018

0800766c <_raise_r>:
 800766c:	291f      	cmp	r1, #31
 800766e:	b538      	push	{r3, r4, r5, lr}
 8007670:	4605      	mov	r5, r0
 8007672:	460c      	mov	r4, r1
 8007674:	d904      	bls.n	8007680 <_raise_r+0x14>
 8007676:	2316      	movs	r3, #22
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007682:	b112      	cbz	r2, 800768a <_raise_r+0x1e>
 8007684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007688:	b94b      	cbnz	r3, 800769e <_raise_r+0x32>
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f830 	bl	80076f0 <_getpid_r>
 8007690:	4622      	mov	r2, r4
 8007692:	4601      	mov	r1, r0
 8007694:	4628      	mov	r0, r5
 8007696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800769a:	f000 b817 	b.w	80076cc <_kill_r>
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d00a      	beq.n	80076b8 <_raise_r+0x4c>
 80076a2:	1c59      	adds	r1, r3, #1
 80076a4:	d103      	bne.n	80076ae <_raise_r+0x42>
 80076a6:	2316      	movs	r3, #22
 80076a8:	6003      	str	r3, [r0, #0]
 80076aa:	2001      	movs	r0, #1
 80076ac:	e7e7      	b.n	800767e <_raise_r+0x12>
 80076ae:	2100      	movs	r1, #0
 80076b0:	4620      	mov	r0, r4
 80076b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076b6:	4798      	blx	r3
 80076b8:	2000      	movs	r0, #0
 80076ba:	e7e0      	b.n	800767e <_raise_r+0x12>

080076bc <raise>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	@ (80076c8 <raise+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f7ff bfd3 	b.w	800766c <_raise_r>
 80076c6:	bf00      	nop
 80076c8:	20000018 	.word	0x20000018

080076cc <_kill_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	2300      	movs	r3, #0
 80076d0:	4d06      	ldr	r5, [pc, #24]	@ (80076ec <_kill_r+0x20>)
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7fa fa86 	bl	8001bea <_kill>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_kill_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_kill_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	200003a8 	.word	0x200003a8

080076f0 <_getpid_r>:
 80076f0:	f7fa ba74 	b.w	8001bdc <_getpid>

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	4615      	mov	r5, r2
 80076fe:	2900      	cmp	r1, #0
 8007700:	461e      	mov	r6, r3
 8007702:	b096      	sub	sp, #88	@ 0x58
 8007704:	da0c      	bge.n	8007720 <__swhatbuf_r+0x2c>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	2100      	movs	r1, #0
 800770a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800770e:	bf14      	ite	ne
 8007710:	2340      	movne	r3, #64	@ 0x40
 8007712:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007716:	2000      	movs	r0, #0
 8007718:	6031      	str	r1, [r6, #0]
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	b016      	add	sp, #88	@ 0x58
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	466a      	mov	r2, sp
 8007722:	f000 f849 	bl	80077b8 <_fstat_r>
 8007726:	2800      	cmp	r0, #0
 8007728:	dbed      	blt.n	8007706 <__swhatbuf_r+0x12>
 800772a:	9901      	ldr	r1, [sp, #4]
 800772c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007730:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007734:	4259      	negs	r1, r3
 8007736:	4159      	adcs	r1, r3
 8007738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800773c:	e7eb      	b.n	8007716 <__swhatbuf_r+0x22>

0800773e <__smakebuf_r>:
 800773e:	898b      	ldrh	r3, [r1, #12]
 8007740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007742:	079d      	lsls	r5, r3, #30
 8007744:	4606      	mov	r6, r0
 8007746:	460c      	mov	r4, r1
 8007748:	d507      	bpl.n	800775a <__smakebuf_r+0x1c>
 800774a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	2301      	movs	r3, #1
 8007754:	6163      	str	r3, [r4, #20]
 8007756:	b003      	add	sp, #12
 8007758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775a:	466a      	mov	r2, sp
 800775c:	ab01      	add	r3, sp, #4
 800775e:	f7ff ffc9 	bl	80076f4 <__swhatbuf_r>
 8007762:	9f00      	ldr	r7, [sp, #0]
 8007764:	4605      	mov	r5, r0
 8007766:	4639      	mov	r1, r7
 8007768:	4630      	mov	r0, r6
 800776a:	f7fd fbdb 	bl	8004f24 <_malloc_r>
 800776e:	b948      	cbnz	r0, 8007784 <__smakebuf_r+0x46>
 8007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d4ee      	bmi.n	8007756 <__smakebuf_r+0x18>
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7e2      	b.n	800774a <__smakebuf_r+0xc>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	b15b      	cbz	r3, 80077ae <__smakebuf_r+0x70>
 8007796:	4630      	mov	r0, r6
 8007798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779c:	f000 f81e 	bl	80077dc <_isatty_r>
 80077a0:	b128      	cbz	r0, 80077ae <__smakebuf_r+0x70>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	431d      	orrs	r5, r3
 80077b2:	81a5      	strh	r5, [r4, #12]
 80077b4:	e7cf      	b.n	8007756 <__smakebuf_r+0x18>
	...

080077b8 <_fstat_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	2300      	movs	r3, #0
 80077bc:	4d06      	ldr	r5, [pc, #24]	@ (80077d8 <_fstat_r+0x20>)
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f7fa fa6f 	bl	8001ca8 <_fstat>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_fstat_r+0x1c>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_fstat_r+0x1c>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	200003a8 	.word	0x200003a8

080077dc <_isatty_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	2300      	movs	r3, #0
 80077e0:	4d05      	ldr	r5, [pc, #20]	@ (80077f8 <_isatty_r+0x1c>)
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7fa fa6d 	bl	8001cc6 <_isatty>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_isatty_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_isatty_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	200003a8 	.word	0x200003a8

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
