
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009948  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  08009a58  08009a58  0000aa58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa40  0800aa40  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa40  0800aa40  0000ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa48  0800aa48  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa48  0800aa48  0000ba48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa4c  0800aa4c  0000ba4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aa50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  200001d8  0800ac28  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  0800ac28  0000c8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcbe  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fa  00000000  00000000  00017ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0001a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008da  00000000  00000000  0001ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018772  00000000  00000000  0001b60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4f1  00000000  00000000  00033d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086aa7  00000000  00000000  0004326d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9d14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  000c9d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ce1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a40 	.word	0x08009a40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009a40 	.word	0x08009a40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_DQ_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2112      	movs	r1, #18
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011de:	f002 f98a 	bl	80034f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011fa:	f001 ffe1 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80011fe:	2310      	movs	r3, #16
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001216:	f001 ffd3 	bl	80031c0 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C1_Init+0x50>)
 800126a:	f002 f95d 	bl	8003528 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 ffed 	bl	8002252 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f4 	.word	0x200001f4
 8001280:	40005400 	.word	0x40005400
 8001284:	00061a80 	.word	0x00061a80

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_I2C_MspInit+0x70>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d123      	bne.n	80012f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c0:	23c0      	movs	r3, #192	@ 0xc0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <HAL_I2C_MspInit+0x78>)
 80012d4:	f001 ff74 	bl	80031c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e2:	61d3      	str	r3, [r2, #28]
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00

08001304 <RELAY_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 初始化继电器控制引脚
void RELAY_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2110      	movs	r1, #16
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <RELAY_Init+0x14>)
 800130e:	f002 f8f2 	bl	80034f6 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40010800 	.word	0x40010800

0800131c <RELAY_Control>:

// 控制继电器状态
void RELAY_Control(uint8_t state)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2110      	movs	r1, #16
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <RELAY_Control+0x28>)
 8001338:	f002 f8dd 	bl	80034f6 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010800 	.word	0x40010800

08001348 <Delay_us>:

// 微秒级延时函数 (保持不变)
void Delay_us(uint16_t us)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  us *= 6;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	461a      	mov	r2, r3
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	80fb      	strh	r3, [r7, #6]
  while (us--)
 800135e:	e007      	b.n	8001370 <Delay_us+0x28>
  {
    __NOP();
 8001360:	bf00      	nop
    __NOP();
 8001362:	bf00      	nop
    __NOP();
 8001364:	bf00      	nop
    __NOP();
 8001366:	bf00      	nop
    __NOP();
 8001368:	bf00      	nop
    __NOP();
 800136a:	bf00      	nop
    __NOP();
 800136c:	bf00      	nop
    __NOP();
 800136e:	bf00      	nop
  while (us--)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	80fa      	strh	r2, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f2      	bne.n	8001360 <Delay_us+0x18>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <DS18B20_WriteBit>:

// 写1位数据 (保持不变)
void DS18B20_WriteBit(uint8_t bit)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2102      	movs	r1, #2
 8001396:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 8001398:	f002 f8ad 	bl	80034f6 <HAL_GPIO_WritePin>
  Delay_us(1); // t_low1: 1-15us
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ffd3 	bl	8001348 <Delay_us>
  if (bit)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <DS18B20_WriteBit+0x2a>
  {
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 写1
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013ae:	f002 f8a2 	bl	80034f6 <HAL_GPIO_WritePin>
  }
  else
  {
    // 保持低电平即可写0
  }
  Delay_us(60);                                               // t_slot: 60-120us
 80013b2:	203c      	movs	r0, #60	@ 0x3c
 80013b4:	f7ff ffc8 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 80013b8:	2201      	movs	r2, #1
 80013ba:	2102      	movs	r1, #2
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013be:	f002 f89a 	bl	80034f6 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_rec: >1us
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ffc0 	bl	8001348 <Delay_us>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800

080013d4 <DS18B20_ReadBit>:

// 读1位数据 (保持不变)
uint8_t DS18B20_ReadBit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013e4:	f002 f887 	bl	80034f6 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_low0: 1-15us
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ffad 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线，由从机拉低或保持高电平
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013f4:	f002 f87f 	bl	80034f6 <HAL_GPIO_WritePin>
  Delay_us(10);                                               // t_rdv: <15us (在15us内采样)
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ffa5 	bl	8001348 <Delay_us>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80013fe:	2102      	movs	r1, #2
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 8001402:	f002 f861 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <DS18B20_ReadBit+0x3c>
  {
    bit = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  }
  Delay_us(50); // 等待时间片结束 (60-120us)
 8001410:	2032      	movs	r0, #50	@ 0x32
 8001412:	f7ff ff99 	bl	8001348 <Delay_us>
  return bit;
 8001416:	79fb      	ldrb	r3, [r7, #7]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40010800 	.word	0x40010800

08001424 <DS18B20_WriteByte>:

// 向DS18B20写入1字节 (保持不变)
void DS18B20_WriteByte(uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e00c      	b.n	800144e <DS18B20_WriteByte+0x2a>
  {
    DS18B20_WriteBit(data & 0x01);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffa3 	bl	8001388 <DS18B20_WriteBit>
    data >>= 1;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d9ef      	bls.n	8001434 <DS18B20_WriteByte+0x10>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <DS18B20_ReadByte>:

// 从DS18B20读取1字节 (保持不变)
uint8_t DS18B20_ReadByte(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	71bb      	strb	r3, [r7, #6]
 800146c:	e00e      	b.n	800148c <DS18B20_ReadByte+0x2e>
  {
    data >>= 1;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	71fb      	strb	r3, [r7, #7]
    if (DS18B20_ReadBit())
 8001474:	f7ff ffae 	bl	80013d4 <DS18B20_ReadBit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <DS18B20_ReadByte+0x28>
    {
      data |= 0x80;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001484:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	3301      	adds	r3, #1
 800148a:	71bb      	strb	r3, [r7, #6]
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9ed      	bls.n	800146e <DS18B20_ReadByte+0x10>
    }
  }
  return data;
 8001492:	79fb      	ldrb	r3, [r7, #7]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <DS18B20_Reset>:

// 复位DS18B20 (保持不变)
// 返回 0 表示成功检测到存在脉冲, 1 表示无设备响应
uint8_t DS18B20_Reset(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  uint8_t status;
  // 配置为推挽输出
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DS18B20_PIN;
 80014ae:	2302      	movs	r3, #2
 80014b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	481e      	ldr	r0, [pc, #120]	@ (800153c <DS18B20_Reset+0xa0>)
 80014c4:	f001 fe7c 	bl	80031c0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	481b      	ldr	r0, [pc, #108]	@ (800153c <DS18B20_Reset+0xa0>)
 80014ce:	f002 f812 	bl	80034f6 <HAL_GPIO_WritePin>
  Delay_us(480); // 至少480us
 80014d2:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80014d6:	f7ff ff37 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2102      	movs	r1, #2
 80014de:	4817      	ldr	r0, [pc, #92]	@ (800153c <DS18B20_Reset+0xa0>)
 80014e0:	f002 f809 	bl	80034f6 <HAL_GPIO_WritePin>

  // 配置为浮空输入
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 或 GPIO_PULLUP，取决于外部上拉
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4812      	ldr	r0, [pc, #72]	@ (800153c <DS18B20_Reset+0xa0>)
 80014f2:	f001 fe65 	bl	80031c0 <HAL_GPIO_Init>

  Delay_us(60);                                         // 等待15-60us后采样
 80014f6:	203c      	movs	r0, #60	@ 0x3c
 80014f8:	f7ff ff26 	bl	8001348 <Delay_us>
  status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN); // 读取存在脉冲 (低电平有效)
 80014fc:	2102      	movs	r1, #2
 80014fe:	480f      	ldr	r0, [pc, #60]	@ (800153c <DS18B20_Reset+0xa0>)
 8001500:	f001 ffe2 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	75fb      	strb	r3, [r7, #23]
  Delay_us(420);                                        // 等待存在脉冲结束 (总共480us)
 8001508:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800150c:	f7ff ff1c 	bl	8001348 <Delay_us>

  // 恢复为推挽输出，准备后续通信
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <DS18B20_Reset+0xa0>)
 8001522:	f001 fe4d 	bl	80031c0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 8001526:	2201      	movs	r2, #1
 8001528:	2102      	movs	r1, #2
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <DS18B20_Reset+0xa0>)
 800152c:	f001 ffe3 	bl	80034f6 <HAL_GPIO_WritePin>

  return status; // 0=成功, 1=失败
 8001530:	7dfb      	ldrb	r3, [r7, #23]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010800 	.word	0x40010800

08001540 <crc8>:

// --- 新增：CRC8校验函数 ---
uint8_t crc8(const uint8_t *addr, uint8_t len)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  while (len--)
 8001550:	e022      	b.n	8001598 <crc8+0x58>
  {
    uint8_t inbyte = *addr++;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800155c:	2308      	movs	r3, #8
 800155e:	737b      	strb	r3, [r7, #13]
 8001560:	e017      	b.n	8001592 <crc8+0x52>
    {
      uint8_t mix = (crc ^ inbyte) & 0x01;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	4053      	eors	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      if (mix)
 8001576:	7b3b      	ldrb	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <crc8+0x46>
        crc ^= 0x8C; // 校验多项式 X^8 + X^5 + X^4 + 1
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001582:	43db      	mvns	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
      inbyte >>= 1;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	3b01      	subs	r3, #1
 8001590:	737b      	strb	r3, [r7, #13]
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <crc8+0x22>
  while (len--)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	70fa      	strb	r2, [r7, #3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1d7      	bne.n	8001552 <crc8+0x12>
    }
  }
  return crc;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <DS18B20_Search>:

// --- 新增：1-Wire ROM搜索核心函数 ---
// 返回值: 1 = 找到设备, 0 = 未找到/搜索完成
// rom_code: 用于存储找到的ROM地址
uint8_t DS18B20_Search(uint8_t *rom_code)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint8_t search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  // 初始化搜索状态 (仅在首次搜索时)
  id_bit_number = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	733b      	strb	r3, [r7, #12]

  // 如果上一次搜索是最后一次，则重置状态开始新的搜索
  if (LastDeviceFlag)
 80015cc:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <DS18B20_Search+0x3a>
  {
    LastDiscrepancy = 0;
 80015d4:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80015da:	4b5e      	ldr	r3, [pc, #376]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <DS18B20_Search+0x1ac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    return 0; // 没有更多设备
 80015e6:	2300      	movs	r3, #0
 80015e8:	e0af      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 1. 发送复位脉冲
  if (DS18B20_Reset() != 0)
 80015ea:	f7ff ff57 	bl	800149c <DS18B20_Reset>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <DS18B20_Search+0x5a>
  {
    // 总线无响应，重置搜索状态并返回错误
    LastDiscrepancy = 0;
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015fa:	4b58      	ldr	r3, [pc, #352]	@ (800175c <DS18B20_Search+0x1ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001600:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e09f      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 2. 发送 ROM 搜索命令 (0xF0)
  DS18B20_WriteByte(0xF0);
 800160a:	20f0      	movs	r0, #240	@ 0xf0
 800160c:	f7ff ff0a 	bl	8001424 <DS18B20_WriteByte>

  // 3. 循环搜索 ROM 的每一位 (64位)
  do
  {
    // 读取两位 (bit 和 complement bit)
    id_bit = DS18B20_ReadBit();
 8001610:	f7ff fee0 	bl	80013d4 <DS18B20_ReadBit>
 8001614:	4603      	mov	r3, r0
 8001616:	727b      	strb	r3, [r7, #9]
    cmp_id_bit = DS18B20_ReadBit();
 8001618:	f7ff fedc 	bl	80013d4 <DS18B20_ReadBit>
 800161c:	4603      	mov	r3, r0
 800161e:	723b      	strb	r3, [r7, #8]

    // 检查冲突
    if ((id_bit == 1) && (cmp_id_bit == 1))
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <DS18B20_Search+0x7c>
 8001626:	7a3b      	ldrb	r3, [r7, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d061      	beq.n	80016f0 <DS18B20_Search+0x140>
      break;
    }
    else
    {
      // 设备响应了
      if (id_bit != cmp_id_bit)
 800162c:	7a7a      	ldrb	r2, [r7, #9]
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	d002      	beq.n	800163a <DS18B20_Search+0x8a>
      {
        // 所有设备在这一位上值相同，直接选择该位
        search_direction = id_bit;
 8001634:	7a7b      	ldrb	r3, [r7, #9]
 8001636:	72bb      	strb	r3, [r7, #10]
 8001638:	e026      	b.n	8001688 <DS18B20_Search+0xd8>
      }
      else
      {
        // 出现分歧 (Discrepancy)，即至少两个设备在这一位有不同值 (0和1)
        // 如果当前位 < 上次分歧位，选择上次确定的路径
        if (id_bit_number < LastDiscrepancy)
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <DS18B20_Search+0x1a8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	d20d      	bcs.n	8001660 <DS18B20_Search+0xb0>
        {
          search_direction = ((rom_code[rom_byte_number] & rom_byte_mask) > 0);
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	4013      	ands	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	72bb      	strb	r3, [r7, #10]
 800165e:	e008      	b.n	8001672 <DS18B20_Search+0xc2>
        }
        else
        {
          // 如果等于上次分歧位，选择1路径
          // 如果大于上次分歧位，选择0路径 (优先探索0分支)
          search_direction = (id_bit_number == LastDiscrepancy);
 8001660:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	429a      	cmp	r2, r3
 8001668:	bf0c      	ite	eq
 800166a:	2301      	moveq	r3, #1
 800166c:	2300      	movne	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	72bb      	strb	r3, [r7, #10]
        }

        // 如果选择0路径，记录下这个分歧点
        if (search_direction == 0)
 8001672:	7abb      	ldrb	r3, [r7, #10]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <DS18B20_Search+0xd8>
        {
          last_zero = id_bit_number;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	73bb      	strb	r3, [r7, #14]
          // 如果是家族码内的分歧，也记录
          if (last_zero < 9)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d802      	bhi.n	8001688 <DS18B20_Search+0xd8>
            LastFamilyDiscrepancy = last_zero;
 8001682:	4a36      	ldr	r2, [pc, #216]	@ (800175c <DS18B20_Search+0x1ac>)
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	7013      	strb	r3, [r2, #0]
        }
      }

      // 存储选择的位到 ROM code 中
      if (search_direction == 1)
 8001688:	7abb      	ldrb	r3, [r7, #10]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10b      	bne.n	80016a6 <DS18B20_Search+0xf6>
        rom_code[rom_byte_number] |= rom_byte_mask;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	430a      	orrs	r2, r1
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e00f      	b.n	80016c6 <DS18B20_Search+0x116>
      else
        rom_code[rom_byte_number] &= ~rom_byte_mask;
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	b259      	sxtb	r1, r3
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]

      // 发送选择的位，让不匹配的设备进入休眠
      DS18B20_WriteBit(search_direction);
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe5d 	bl	8001388 <DS18B20_WriteBit>

      // 移到下一位
      id_bit_number++;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
      rom_byte_mask <<= 1;
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	72fb      	strb	r3, [r7, #11]

      // 如果一个字节的8位都处理完了，移到下一个字节
      if (rom_byte_mask == 0)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <DS18B20_Search+0x13a>
      {
        rom_byte_number++;
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	3301      	adds	r3, #1
 80016e4:	737b      	strb	r3, [r7, #13]
        rom_byte_mask = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	72fb      	strb	r3, [r7, #11]
      }
    }
  } while (rom_byte_number < 8); // 处理完8个字节 (64位)
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d98f      	bls.n	8001610 <DS18B20_Search+0x60>

  // 4. 检查搜索结果
  if (id_bit_number >= 65)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	d90b      	bls.n	800170e <DS18B20_Search+0x15e>
  { // 成功完成64位搜索
    // 更新下次搜索的分歧点
    LastDiscrepancy = last_zero;
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	7013      	strb	r3, [r2, #0]

    // 检查是否是最后一个设备
    if (LastDiscrepancy == 0)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <DS18B20_Search+0x15a>
    {
      LastDeviceFlag = 1; // 本次是最后一个设备
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    }
    search_result = 1; // 成功找到一个设备
 800170a:	2301      	movs	r3, #1
 800170c:	733b      	strb	r3, [r7, #12]
  }

  // 如果搜索失败或CRC校验失败，重置状态
  if (search_result == 0 || rom_code[0] == 0x00 || crc8(rom_code, 7) != rom_code[7])
 800170e:	7b3b      	ldrb	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <DS18B20_Search+0x182>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <DS18B20_Search+0x182>
 800171c:	2107      	movs	r1, #7
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff0e 	bl	8001540 <crc8>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d00a      	beq.n	8001748 <DS18B20_Search+0x198>
  {
    LastDiscrepancy = 0;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <DS18B20_Search+0x1a4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <DS18B20_Search+0x1ac>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    search_result = 0; // 标记为失败
 8001744:	2300      	movs	r3, #0
 8001746:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 8001748:	7b3b      	ldrb	r3, [r7, #12]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000273 	.word	0x20000273
 8001758:	20000271 	.word	0x20000271
 800175c:	20000272 	.word	0x20000272

08001760 <DS18B20_ScanDevices>:

// --- 新增：扫描总线上的所有DS18B20设备 ---
void DS18B20_ScanDevices(void)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b0a7      	sub	sp, #156	@ 0x9c
 8001764:	af08      	add	r7, sp, #32
  uint8_t id[8];
  g_num_sensors = 0; // 重置计数器
 8001766:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

  // 重置搜索状态
  LastDiscrepancy = 0;
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <DS18B20_ScanDevices+0x168>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
  LastDeviceFlag = 0;
 8001772:	4b56      	ldr	r3, [pc, #344]	@ (80018cc <DS18B20_ScanDevices+0x16c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
  LastFamilyDiscrepancy = 0;
 8001778:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <DS18B20_ScanDevices+0x170>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]

  // 循环搜索，直到找不到更多设备
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 800177e:	e020      	b.n	80017c2 <DS18B20_ScanDevices+0x62>
  {
    // 检查是否是DS18B20家族码 (0x28)
    if (id[0] == 0x28)
 8001780:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001784:	2b28      	cmp	r3, #40	@ 0x28
 8001786:	d11c      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
    {
      // 检查CRC校验
      if (crc8(id, 7) == id[7])
 8001788:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800178c:	2107      	movs	r1, #7
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fed6 	bl	8001540 <crc8>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800179c:	429a      	cmp	r2, r3
 800179e:	d110      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
      {
        memcpy(g_ds18b20_roms[g_num_sensors], id, 8);
 80017a0:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017b0:	cb03      	ldmia	r3!, {r0, r1}
 80017b2:	6010      	str	r0, [r2, #0]
 80017b4:	6051      	str	r1, [r2, #4]
        g_num_sensors++;
 80017b6:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017c0:	701a      	strb	r2, [r3, #0]
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 80017c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fef2 	bl	80015b0 <DS18B20_Search>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <DS18B20_ScanDevices+0x7a>
 80017d2:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d9d2      	bls.n	8001780 <DS18B20_ScanDevices+0x20>
    }
    // 如果需要支持其他家族码，可以在这里添加判断
  }
  // 可以在这里通过串口打印找到的传感器数量和ROM地址，用于调试
  char dbg_msg[100];
  sprintf(dbg_msg, "Found %d DS18B20 sensors.\r\n", g_num_sensors);
 80017da:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	493c      	ldr	r1, [pc, #240]	@ (80018d8 <DS18B20_ScanDevices+0x178>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fd64 	bl	80062b4 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 100);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcad 	bl	8000150 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f107 0108 	add.w	r1, r7, #8
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	4836      	ldr	r0, [pc, #216]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 8001802:	f002 ff8d 	bl	8004720 <HAL_UART_Transmit>
  for (int i = 0; i < g_num_sensors; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	677b      	str	r3, [r7, #116]	@ 0x74
 800180a:	e050      	b.n	80018ae <DS18B20_ScanDevices+0x14e>
  {
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800180c:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800180e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	79db      	ldrb	r3, [r3, #7]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001816:	469c      	mov	ip, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001818:	4a2e      	ldr	r2, [pc, #184]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800181a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	799b      	ldrb	r3, [r3, #6]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001822:	4619      	mov	r1, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	795b      	ldrb	r3, [r3, #5]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800182e:	461c      	mov	r4, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001830:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	791b      	ldrb	r3, [r3, #4]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800183a:	461d      	mov	r5, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 800183c:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800183e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	78db      	ldrb	r3, [r3, #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001846:	461e      	mov	r6, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001848:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800184a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	789b      	ldrb	r3, [r3, #2]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001852:	607b      	str	r3, [r7, #4]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001854:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	785b      	ldrb	r3, [r3, #1]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800185e:	603b      	str	r3, [r7, #0]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001860:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001864:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001868:	f107 0008 	add.w	r0, r7, #8
 800186c:	9306      	str	r3, [sp, #24]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	9205      	str	r2, [sp, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	9304      	str	r3, [sp, #16]
 8001876:	9603      	str	r6, [sp, #12]
 8001878:	9502      	str	r5, [sp, #8]
 800187a:	9401      	str	r4, [sp, #4]
 800187c:	9100      	str	r1, [sp, #0]
 800187e:	4663      	mov	r3, ip
 8001880:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <DS18B20_ScanDevices+0x180>)
 8001884:	f004 fd16 	bl	80062b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 200);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc5f 	bl	8000150 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	23c8      	movs	r3, #200	@ 0xc8
 800189c:	480f      	ldr	r0, [pc, #60]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 800189e:	f002 ff3f 	bl	8004720 <HAL_UART_Transmit>
    HAL_Delay(10); // 短暂延时避免串口发送过快
 80018a2:	200a      	movs	r0, #10
 80018a4:	f001 faa8 	bl	8002df8 <HAL_Delay>
  for (int i = 0; i < g_num_sensors; i++)
 80018a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018aa:	3301      	adds	r3, #1
 80018ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b6:	4293      	cmp	r3, r2
 80018b8:	dba8      	blt.n	800180c <DS18B20_ScanDevices+0xac>
  }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	377c      	adds	r7, #124	@ 0x7c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	20000270 	.word	0x20000270
 80018c8:	20000271 	.word	0x20000271
 80018cc:	20000273 	.word	0x20000273
 80018d0:	20000272 	.word	0x20000272
 80018d4:	20000248 	.word	0x20000248
 80018d8:	08009a58 	.word	0x08009a58
 80018dc:	20000710 	.word	0x20000710
 80018e0:	08009a74 	.word	0x08009a74

080018e4 <DS18B20_Select>:

// --- 新增：选择指定ROM地址的设备 ---
void DS18B20_Select(const uint8_t *rom_code)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  DS18B20_WriteByte(0x55); // Match ROM command
 80018ec:	2055      	movs	r0, #85	@ 0x55
 80018ee:	f7ff fd99 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e009      	b.n	800190c <DS18B20_Select+0x28>
  {
    DS18B20_WriteByte(rom_code[i]);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fd8f 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d9f2      	bls.n	80018f8 <DS18B20_Select+0x14>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DS18B20_SkipRom>:

// --- 新增：向总线上所有设备发送命令 (使用 Skip ROM) ---
void DS18B20_SkipRom(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  DS18B20_WriteByte(0xCC); // Skip ROM command
 8001920:	20cc      	movs	r0, #204	@ 0xcc
 8001922:	f7ff fd7f 	bl	8001424 <DS18B20_WriteByte>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <DS18B20_GetTemp>:

// --- 修改：读取指定ROM地址的温度值 ---
// 返回值：读取到的温度，或特定错误值 (例如 -999.0)
float DS18B20_GetTemp(const uint8_t *rom_code)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t tempL, tempH;
  uint16_t temp;
  float result = -999.0; // 默认错误值
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <DS18B20_GetTemp+0x98>)
 8001936:	60fb      	str	r3, [r7, #12]

  // 1. 复位并选择指定设备
  if (DS18B20_Reset() != 0)
 8001938:	f7ff fdb0 	bl	800149c <DS18B20_Reset>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <DS18B20_GetTemp+0x1a>
    return result; // 复位失败
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	e039      	b.n	80019ba <DS18B20_GetTemp+0x8e>
  DS18B20_Select(rom_code);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffcc 	bl	80018e4 <DS18B20_Select>

  // 2. 发送读取暂存器命令 (0xBE)
  DS18B20_WriteByte(0xBE);
 800194c:	20be      	movs	r0, #190	@ 0xbe
 800194e:	f7ff fd69 	bl	8001424 <DS18B20_WriteByte>

  // 3. 读取暂存器内容 (前两个字节是温度)
  //    注意：实际应用中应读取全部9个字节并校验CRC
  tempL = DS18B20_ReadByte();
 8001952:	f7ff fd84 	bl	800145e <DS18B20_ReadByte>
 8001956:	4603      	mov	r3, r0
 8001958:	72fb      	strb	r3, [r7, #11]
  tempH = DS18B20_ReadByte();
 800195a:	f7ff fd80 	bl	800145e <DS18B20_ReadByte>
 800195e:	4603      	mov	r3, r0
 8001960:	72bb      	strb	r3, [r7, #10]
  //     // CRC校验失败
  //     return -998.0; // 返回不同的错误码
  // }

  // 4. 计算温度
  temp = (tempH << 8) | tempL;
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	b21b      	sxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	813b      	strh	r3, [r7, #8]

  // 处理负温度 (符号扩展)
  if (temp & 0x8000)
 8001974:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da11      	bge.n	80019a0 <DS18B20_GetTemp+0x74>
  {
    temp = ~temp + 1; // 取反加一
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	425b      	negs	r3, r3
 8001980:	813b      	strh	r3, [r7, #8]
    result = -(float)temp / 16.0;
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9a5 	bl	8000cd4 <__aeabi_ui2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001990:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff faa9 	bl	8000eec <__aeabi_fdiv>
 800199a:	4603      	mov	r3, r0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00b      	b.n	80019b8 <DS18B20_GetTemp+0x8c>
  }
  else
  {
    result = (float)temp / 16.0;
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f996 	bl	8000cd4 <__aeabi_ui2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa9c 	bl	8000eec <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    // 可能读取错误，可以返回特定错误值或上次有效值
    // return -997.0;
  }

  return result;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	c479c000 	.word	0xc479c000

080019c8 <DS18B20_StartConversionAll>:

// 启动所有连接设备的温度转换 ---
uint8_t DS18B20_StartConversionAll(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  if (DS18B20_Reset() != 0)
 80019cc:	f7ff fd66 	bl	800149c <DS18B20_Reset>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <DS18B20_StartConversionAll+0x12>
    return 1;              // 复位失败
 80019d6:	2301      	movs	r3, #1
 80019d8:	e005      	b.n	80019e6 <DS18B20_StartConversionAll+0x1e>
  DS18B20_SkipRom();       // 使用 Skip ROM 命令
 80019da:	f7ff ff9f 	bl	800191c <DS18B20_SkipRom>
  DS18B20_WriteByte(0x44); // 启动温度转换命令
 80019de:	2044      	movs	r0, #68	@ 0x44
 80019e0:	f7ff fd20 	bl	8001424 <DS18B20_WriteByte>
  return 0;                // 成功启动
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_UART_RxCpltCallback>:

// --- 新增：串口3接收中断回调函数 ---
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d137      	bne.n	8001a6e <HAL_UART_RxCpltCallback+0x82>
  {
    // 检查是否接收到换行符或回车符
    if (uart3_current_char == '\n' || uart3_current_char == '\r')
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d003      	beq.n	8001a0e <HAL_UART_RxCpltCallback+0x22>
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b0d      	cmp	r3, #13
 8001a0c:	d10c      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x3c>
    {
      uart3_rx_buffer[uart3_rx_index] = '\0'; // 添加字符串结束符
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_UART_RxCpltCallback+0x98>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]
      uart3_rx_complete = 1; // 标记接收完成
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_UART_RxCpltCallback+0x9c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
      uart3_rx_index = 0;    // 重置索引
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_UART_RxCpltCallback+0x78>
    }
    else if (uart3_rx_index >= UART3_RX_BUFFER_SIZE - 2) // 留一个位置给\0
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a2e:	d90c      	bls.n	8001a4a <HAL_UART_RxCpltCallback+0x5e>
    {
      uart3_rx_buffer[uart3_rx_index] = '\0'; // 添加字符串结束符
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_UART_RxCpltCallback+0x98>)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
      uart3_rx_complete = 1; // 标记接收完成
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_UART_RxCpltCallback+0x9c>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
      uart3_rx_index = 0;    // 重置索引
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e00c      	b.n	8001a64 <HAL_UART_RxCpltCallback+0x78>
    }
    else
    {
      // 存储接收到的字符
      uart3_rx_buffer[uart3_rx_index] = uart3_current_char;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a52:	7819      	ldrb	r1, [r3, #0]
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_UART_RxCpltCallback+0x98>)
 8001a56:	5499      	strb	r1, [r3, r2]
      uart3_rx_index++; // 移动到下一个位置
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a62:	701a      	strb	r2, [r3, #0]
    }
    
    // 重新启动接收中断，继续接收下一个字符
    HAL_UART_Receive_IT(&huart3, &uart3_current_char, 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	4905      	ldr	r1, [pc, #20]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a68:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <HAL_UART_RxCpltCallback+0xa0>)
 8001a6a:	f002 fee4 	bl	8004836 <HAL_UART_Receive_IT>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40004800 	.word	0x40004800
 8001a7c:	200002b4 	.word	0x200002b4
 8001a80:	200002b2 	.word	0x200002b2
 8001a84:	20000280 	.word	0x20000280
 8001a88:	200002b3 	.word	0x200002b3
 8001a8c:	20000710 	.word	0x20000710

08001a90 <Parse_UART3_Command>:

// --- 新增：解析串口命令 ---
void Parse_UART3_Command(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0a0      	sub	sp, #128	@ 0x80
 8001a94:	af02      	add	r7, sp, #8
  if (!uart3_rx_complete) return;
 8001a96:	4b96      	ldr	r3, [pc, #600]	@ (8001cf0 <Parse_UART3_Command+0x260>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8123 	beq.w	8001ce6 <Parse_UART3_Command+0x256>
  
  char *command = (char *)uart3_rx_buffer;
 8001aa0:	4b94      	ldr	r3, [pc, #592]	@ (8001cf4 <Parse_UART3_Command+0x264>)
 8001aa2:	673b      	str	r3, [r7, #112]	@ 0x70
  char response[100];
  
  // 添加详细调试信息 - 显示缓冲区内容
  sprintf(response, "RX Complete! Buffer: [");
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4994      	ldr	r1, [pc, #592]	@ (8001cf8 <Parse_UART3_Command+0x268>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fc03 	bl	80062b4 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fb4d 	bl	8000150 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	1d39      	adds	r1, r7, #4
 8001abc:	23c8      	movs	r3, #200	@ 0xc8
 8001abe:	488f      	ldr	r0, [pc, #572]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001ac0:	f002 fe2e 	bl	8004720 <HAL_UART_Transmit>
  
  for (int i = 0; i < uart3_rx_index; i++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ac8:	e017      	b.n	8001afa <Parse_UART3_Command+0x6a>
    sprintf(response, "%02X ", uart3_rx_buffer[i]);
 8001aca:	4a8a      	ldr	r2, [pc, #552]	@ (8001cf4 <Parse_UART3_Command+0x264>)
 8001acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	498a      	ldr	r1, [pc, #552]	@ (8001d00 <Parse_UART3_Command+0x270>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fbeb 	bl	80062b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fb35 	bl	8000150 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	1d39      	adds	r1, r7, #4
 8001aec:	23c8      	movs	r3, #200	@ 0xc8
 8001aee:	4883      	ldr	r0, [pc, #524]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001af0:	f002 fe16 	bl	8004720 <HAL_UART_Transmit>
  for (int i = 0; i < uart3_rx_index; i++) {
 8001af4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af6:	3301      	adds	r3, #1
 8001af8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001afa:	4b82      	ldr	r3, [pc, #520]	@ (8001d04 <Parse_UART3_Command+0x274>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b02:	4293      	cmp	r3, r2
 8001b04:	dbe1      	blt.n	8001aca <Parse_UART3_Command+0x3a>
  }
  
  sprintf(response, "] String: [%s] (len=%d, index=%d)\r\n", command, strlen(command), uart3_rx_index);
 8001b06:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b08:	f7fe fb22 	bl	8000150 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d04 <Parse_UART3_Command+0x274>)
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	1d38      	adds	r0, r7, #4
 8001b14:	9200      	str	r2, [sp, #0]
 8001b16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001b18:	497b      	ldr	r1, [pc, #492]	@ (8001d08 <Parse_UART3_Command+0x278>)
 8001b1a:	f004 fbcb 	bl	80062b4 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb15 	bl	8000150 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	1d39      	adds	r1, r7, #4
 8001b2c:	23c8      	movs	r3, #200	@ 0xc8
 8001b2e:	4873      	ldr	r0, [pc, #460]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001b30:	f002 fdf6 	bl	8004720 <HAL_UART_Transmit>
  
  // 解析 "on" 命令
  if (strncmp(command, "on", 2) == 0)
 8001b34:	2202      	movs	r2, #2
 8001b36:	4975      	ldr	r1, [pc, #468]	@ (8001d0c <Parse_UART3_Command+0x27c>)
 8001b38:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b3a:	f004 fc37 	bl	80063ac <strncmp>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d152      	bne.n	8001bea <Parse_UART3_Command+0x15a>
  {
    uint32_t duration = atoi(command + 2); // 提取数字部分
 8001b44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b46:	3302      	adds	r3, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fc03 	bl	8005354 <atoi>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	66bb      	str	r3, [r7, #104]	@ 0x68
    sprintf(response, "Parsed duration: %lu\r\n", duration);
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001b56:	496e      	ldr	r1, [pc, #440]	@ (8001d10 <Parse_UART3_Command+0x280>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 fbab 	bl	80062b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe faf5 	bl	8000150 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	1d39      	adds	r1, r7, #4
 8001b6c:	23c8      	movs	r3, #200	@ 0xc8
 8001b6e:	4863      	ldr	r0, [pc, #396]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001b70:	f002 fdd6 	bl	8004720 <HAL_UART_Transmit>
    
    if (duration > 0 && duration <= 9999) // 限制最大时间
 8001b74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d025      	beq.n	8001bc6 <Parse_UART3_Command+0x136>
 8001b7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d820      	bhi.n	8001bc6 <Parse_UART3_Command+0x136>
    {
      relay_timer_count = duration;
 8001b84:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <Parse_UART3_Command+0x284>)
 8001b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b88:	6013      	str	r3, [r2, #0]
      relay_timer_active = 1;
 8001b8a:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <Parse_UART3_Command+0x288>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
      relay_force_state = 1;
 8001b90:	4b62      	ldr	r3, [pc, #392]	@ (8001d1c <Parse_UART3_Command+0x28c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
      relay_temp_control = 0; // 禁用温度控制
 8001b96:	4b62      	ldr	r3, [pc, #392]	@ (8001d20 <Parse_UART3_Command+0x290>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
      RELAY_Control(1);       // 立即打开继电器
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fbbd 	bl	800131c <RELAY_Control>
      
      sprintf(response, "Relay ON for %lu seconds\r\n", duration);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001ba6:	495f      	ldr	r1, [pc, #380]	@ (8001d24 <Parse_UART3_Command+0x294>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fb83 	bl	80062b4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe facd 	bl	8000150 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	1d39      	adds	r1, r7, #4
 8001bbc:	23c8      	movs	r3, #200	@ 0xc8
 8001bbe:	484f      	ldr	r0, [pc, #316]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001bc0:	f002 fdae 	bl	8004720 <HAL_UART_Transmit>
 8001bc4:	e08b      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
    else
    {
      sprintf(response, "Invalid duration: %s (parsed: %lu)\r\n", command, duration);
 8001bc6:	1d38      	adds	r0, r7, #4
 8001bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001bcc:	4956      	ldr	r1, [pc, #344]	@ (8001d28 <Parse_UART3_Command+0x298>)
 8001bce:	f004 fb71 	bl	80062b4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fabb 	bl	8000150 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	1d39      	adds	r1, r7, #4
 8001be0:	23c8      	movs	r3, #200	@ 0xc8
 8001be2:	4846      	ldr	r0, [pc, #280]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001be4:	f002 fd9c 	bl	8004720 <HAL_UART_Transmit>
 8001be8:	e079      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
  }
  // 解析 "off" 命令
  else if (strncmp(command, "off", 3) == 0)
 8001bea:	2203      	movs	r2, #3
 8001bec:	494f      	ldr	r1, [pc, #316]	@ (8001d2c <Parse_UART3_Command+0x29c>)
 8001bee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001bf0:	f004 fbdc 	bl	80063ac <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d141      	bne.n	8001c7e <Parse_UART3_Command+0x1ee>
  {
    uint32_t duration = atoi(command + 3); // 提取数字部分
 8001bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fba8 	bl	8005354 <atoi>
 8001c04:	4603      	mov	r3, r0
 8001c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (duration > 0 && duration <= 9999) // 限制最大时间
 8001c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d025      	beq.n	8001c5a <Parse_UART3_Command+0x1ca>
 8001c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d820      	bhi.n	8001c5a <Parse_UART3_Command+0x1ca>
    {
      relay_timer_count = duration;
 8001c18:	4a3e      	ldr	r2, [pc, #248]	@ (8001d14 <Parse_UART3_Command+0x284>)
 8001c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c1c:	6013      	str	r3, [r2, #0]
      relay_timer_active = 1;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <Parse_UART3_Command+0x288>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
      relay_force_state = 0;
 8001c24:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <Parse_UART3_Command+0x28c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
      relay_temp_control = 0; // 禁用温度控制
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <Parse_UART3_Command+0x290>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
      RELAY_Control(0);       // 立即关闭继电器
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fb73 	bl	800131c <RELAY_Control>
      
      sprintf(response, "Relay OFF for %lu seconds\r\n", duration);
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c3a:	493d      	ldr	r1, [pc, #244]	@ (8001d30 <Parse_UART3_Command+0x2a0>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fb39 	bl	80062b4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fa83 	bl	8000150 <strlen>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	1d39      	adds	r1, r7, #4
 8001c50:	23c8      	movs	r3, #200	@ 0xc8
 8001c52:	482a      	ldr	r0, [pc, #168]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001c54:	f002 fd64 	bl	8004720 <HAL_UART_Transmit>
 8001c58:	e041      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
    else
    {
      sprintf(response, "Invalid duration: %s\r\n", command);
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001c5e:	4935      	ldr	r1, [pc, #212]	@ (8001d34 <Parse_UART3_Command+0x2a4>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb27 	bl	80062b4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fa71 	bl	8000150 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	1d39      	adds	r1, r7, #4
 8001c74:	23c8      	movs	r3, #200	@ 0xc8
 8001c76:	4821      	ldr	r0, [pc, #132]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001c78:	f002 fd52 	bl	8004720 <HAL_UART_Transmit>
 8001c7c:	e02f      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
  }
  // 解析 "auto" 命令 - 恢复温度控制
  else if (strncmp(command, "auto", 4) == 0)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	492d      	ldr	r1, [pc, #180]	@ (8001d38 <Parse_UART3_Command+0x2a8>)
 8001c82:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001c84:	f004 fb92 	bl	80063ac <strncmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <Parse_UART3_Command+0x22c>
  {
    relay_timer_active = 0;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <Parse_UART3_Command+0x288>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    relay_temp_control = 1; // 重新启用温度控制
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <Parse_UART3_Command+0x290>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
    sprintf(response, "Auto temperature control enabled\r\n");
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4927      	ldr	r1, [pc, #156]	@ (8001d3c <Parse_UART3_Command+0x2ac>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fb08 	bl	80062b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fa52 	bl	8000150 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	23c8      	movs	r3, #200	@ 0xc8
 8001cb4:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001cb6:	f002 fd33 	bl	8004720 <HAL_UART_Transmit>
 8001cba:	e010      	b.n	8001cde <Parse_UART3_Command+0x24e>
  }
  else
  {
    sprintf(response, "Unknown command: %s\r\n", command);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001cc0:	491f      	ldr	r1, [pc, #124]	@ (8001d40 <Parse_UART3_Command+0x2b0>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 faf6 	bl	80062b4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fa40 	bl	8000150 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	1d39      	adds	r1, r7, #4
 8001cd6:	23c8      	movs	r3, #200	@ 0xc8
 8001cd8:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001cda:	f002 fd21 	bl	8004720 <HAL_UART_Transmit>
  }
  
  uart3_rx_complete = 0; // 重置完成标志
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <Parse_UART3_Command+0x260>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e000      	b.n	8001ce8 <Parse_UART3_Command+0x258>
  if (!uart3_rx_complete) return;
 8001ce6:	bf00      	nop
}
 8001ce8:	3778      	adds	r7, #120	@ 0x78
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002b3 	.word	0x200002b3
 8001cf4:	20000280 	.word	0x20000280
 8001cf8:	08009aa8 	.word	0x08009aa8
 8001cfc:	20000710 	.word	0x20000710
 8001d00:	08009ac0 	.word	0x08009ac0
 8001d04:	200002b2 	.word	0x200002b2
 8001d08:	08009ac8 	.word	0x08009ac8
 8001d0c:	08009aec 	.word	0x08009aec
 8001d10:	08009af0 	.word	0x08009af0
 8001d14:	200002b8 	.word	0x200002b8
 8001d18:	200002bc 	.word	0x200002bc
 8001d1c:	200002bd 	.word	0x200002bd
 8001d20:	20000000 	.word	0x20000000
 8001d24:	08009b08 	.word	0x08009b08
 8001d28:	08009b24 	.word	0x08009b24
 8001d2c:	08009b4c 	.word	0x08009b4c
 8001d30:	08009b50 	.word	0x08009b50
 8001d34:	08009b6c 	.word	0x08009b6c
 8001d38:	08009b84 	.word	0x08009b84
 8001d3c:	08009b8c 	.word	0x08009b8c
 8001d40:	08009bb0 	.word	0x08009bb0

08001d44 <Update_Relay_Timer>:

// --- 新增：更新继电器定时器 ---
void Update_Relay_Timer(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	@ 0x38
 8001d48:	af00      	add	r7, sp, #0
  if (relay_timer_active && relay_timer_count > 0)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <Update_Relay_Timer+0x5c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d022      	beq.n	8001d98 <Update_Relay_Timer+0x54>
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01e      	beq.n	8001d98 <Update_Relay_Timer+0x54>
  {
    relay_timer_count--;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a10      	ldr	r2, [pc, #64]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d62:	6013      	str	r3, [r2, #0]
    
    // 定时器到期
    if (relay_timer_count == 0)
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d115      	bne.n	8001d98 <Update_Relay_Timer+0x54>
    {
      relay_timer_active = 0;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <Update_Relay_Timer+0x5c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
      relay_temp_control = 1; // 重新启用温度控制
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <Update_Relay_Timer+0x64>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
      
      char response[50];
      sprintf(response, "Timer expired, auto control enabled\r\n");
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	490c      	ldr	r1, [pc, #48]	@ (8001dac <Update_Relay_Timer+0x68>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fa99 	bl	80062b4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe f9e3 	bl	8000150 <strlen>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	1d39      	adds	r1, r7, #4
 8001d90:	23c8      	movs	r3, #200	@ 0xc8
 8001d92:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <Update_Relay_Timer+0x6c>)
 8001d94:	f002 fcc4 	bl	8004720 <HAL_UART_Transmit>
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	@ 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200002bc 	.word	0x200002bc
 8001da4:	200002b8 	.word	0x200002b8
 8001da8:	20000000 	.word	0x20000000
 8001dac:	08009bc8 	.word	0x08009bc8
 8001db0:	20000710 	.word	0x20000710

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	b0df      	sub	sp, #380	@ 0x17c
 8001db8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f000 ffbb 	bl	8002d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 fa03 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f7ff f9db 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001dc6:	f000 feab 	bl	8002b20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001dca:	f000 fed3 	bl	8002b74 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001dce:	f7ff fa2d 	bl	800122c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */  RELAY_Init();
 8001dd2:	f7ff fa97 	bl	8001304 <RELAY_Init>
  OLED_Init();  // 初始化OLED
 8001dd6:	f000 fc3d 	bl	8002654 <OLED_Init>

  HAL_Delay(100); // 等待总线稳定
 8001dda:	2064      	movs	r0, #100	@ 0x64
 8001ddc:	f001 f80c 	bl	8002df8 <HAL_Delay>

  // 启动串口3接收中断
  HAL_UART_Receive_IT(&huart3, &uart3_current_char, 1);
 8001de0:	2201      	movs	r2, #1
 8001de2:	49af      	ldr	r1, [pc, #700]	@ (80020a0 <main+0x2ec>)
 8001de4:	48af      	ldr	r0, [pc, #700]	@ (80020a4 <main+0x2f0>)
 8001de6:	f002 fd26 	bl	8004836 <HAL_UART_Receive_IT>

  // 在OLED上显示欢迎信息
  OLED_ShowString(0, 0, "DS18B20 Temperature", 8);
 8001dea:	2308      	movs	r3, #8
 8001dec:	4aae      	ldr	r2, [pc, #696]	@ (80020a8 <main+0x2f4>)
 8001dee:	2100      	movs	r1, #0
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 fbf9 	bl	80025e8 <OLED_ShowString>
  OLED_ShowString(0, 16, "System Initializing", 8);
 8001df6:	2308      	movs	r3, #8
 8001df8:	4aac      	ldr	r2, [pc, #688]	@ (80020ac <main+0x2f8>)
 8001dfa:	2110      	movs	r1, #16
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f000 fbf3 	bl	80025e8 <OLED_ShowString>
  OLED_Refresh();
 8001e02:	f000 fa49 	bl	8002298 <OLED_Refresh>
    HAL_Delay(1000); // 显示欢迎信息一段时间
 8001e06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e0a:	f000 fff5 	bl	8002df8 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t *)"DS18B20 Multi-Sensor Test\r\n", strlen("DS18B20 Multi-Sensor Test\r\n"), 100);
 8001e0e:	2364      	movs	r3, #100	@ 0x64
 8001e10:	221b      	movs	r2, #27
 8001e12:	49a7      	ldr	r1, [pc, #668]	@ (80020b0 <main+0x2fc>)
 8001e14:	48a7      	ldr	r0, [pc, #668]	@ (80020b4 <main+0x300>)
 8001e16:	f002 fc83 	bl	8004720 <HAL_UART_Transmit>

  // --- 修改：扫描设备 ---
  DS18B20_ScanDevices();
 8001e1a:	f7ff fca1 	bl	8001760 <DS18B20_ScanDevices>

    // 在OLED上显示传感器信息
  OLED_DisplaySensorInfo(g_num_sensors);
 8001e1e:	4ba6      	ldr	r3, [pc, #664]	@ (80020b8 <main+0x304>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fd02 	bl	800282c <OLED_DisplaySensorInfo>
  HAL_Delay(2000);
 8001e28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e2c:	f000 ffe4 	bl	8002df8 <HAL_Delay>

  if (g_num_sensors == 0)
 8001e30:	4ba1      	ldr	r3, [pc, #644]	@ (80020b8 <main+0x304>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <main+0x94>
  {
    HAL_UART_Transmit(&huart1, (uint8_t *)"No DS18B20 sensors found!\r\n", strlen("No DS18B20 sensors found!\r\n"), 100);
 8001e38:	2364      	movs	r3, #100	@ 0x64
 8001e3a:	221b      	movs	r2, #27
 8001e3c:	499f      	ldr	r1, [pc, #636]	@ (80020bc <main+0x308>)
 8001e3e:	489d      	ldr	r0, [pc, #628]	@ (80020b4 <main+0x300>)
 8001e40:	f002 fc6e 	bl	8004720 <HAL_UART_Transmit>
    while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <main+0x90>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 处理串口3接收到的命令
    Parse_UART3_Command();
 8001e48:	f7ff fe22 	bl	8001a90 <Parse_UART3_Command>
    
    // 更新继电器定时器（每秒调用一次）
    static uint32_t last_timer_update = 0;
    if (HAL_GetTick() - last_timer_update >= 1000) // 每1000ms更新一次
 8001e4c:	f000 ffca 	bl	8002de4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b9b      	ldr	r3, [pc, #620]	@ (80020c0 <main+0x30c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e5c:	d306      	bcc.n	8001e6c <main+0xb8>
    {
      Update_Relay_Timer();
 8001e5e:	f7ff ff71 	bl	8001d44 <Update_Relay_Timer>
      last_timer_update = HAL_GetTick();
 8001e62:	f000 ffbf 	bl	8002de4 <HAL_GetTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a95      	ldr	r2, [pc, #596]	@ (80020c0 <main+0x30c>)
 8001e6a:	6013      	str	r3, [r2, #0]
    }
    
    // 1. 启动所有传感器的温度转换
    if (DS18B20_StartConversionAll() == 0)
 8001e6c:	f7ff fdac 	bl	80019c8 <DS18B20_StartConversionAll>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8183 	bne.w	800217e <main+0x3ca>
    {     
      // 2. 等待转换完成 (标准精度约750ms)
      //    注意：如果设置了不同精度，等待时间需要调整
      HAL_Delay(750);
 8001e78:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001e7c:	f000 ffbc 	bl	8002df8 <HAL_Delay>

      // 3. 依次读取每个传感器的温度
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001e86:	e096      	b.n	8001fb6 <main+0x202>
      {
        temperature = DS18B20_GetTemp(g_ds18b20_roms[i]);
 8001e88:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4a8d      	ldr	r2, [pc, #564]	@ (80020c4 <main+0x310>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fd4a 	bl	800192c <DS18B20_GetTemp>
 8001e98:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
        // 保存温度值到数组中
        temperatureArray[i] = temperature;
 8001e9c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ea0:	4989      	ldr	r1, [pc, #548]	@ (80020c8 <main+0x314>)
 8001ea2:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        
        // 格式化ROM地址用于显示
        char rom_str[25];
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001eaa:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001eae:	4a85      	ldr	r2, [pc, #532]	@ (80020c4 <main+0x310>)
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	79db      	ldrb	r3, [r3, #7]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001eb6:	469c      	mov	ip, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001eb8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ebc:	4a81      	ldr	r2, [pc, #516]	@ (80020c4 <main+0x310>)
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	799b      	ldrb	r3, [r3, #6]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ec4:	469e      	mov	lr, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ec6:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001eca:	4a7e      	ldr	r2, [pc, #504]	@ (80020c4 <main+0x310>)
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	795b      	ldrb	r3, [r3, #5]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ed2:	4619      	mov	r1, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ed4:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ed8:	4a7a      	ldr	r2, [pc, #488]	@ (80020c4 <main+0x310>)
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	791b      	ldrb	r3, [r3, #4]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ee0:	461c      	mov	r4, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001ee2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ee6:	4a77      	ldr	r2, [pc, #476]	@ (80020c4 <main+0x310>)
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	78db      	ldrb	r3, [r3, #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001eee:	461d      	mov	r5, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001ef0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ef4:	4a73      	ldr	r2, [pc, #460]	@ (80020c4 <main+0x310>)
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	789b      	ldrb	r3, [r3, #2]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001efc:	461e      	mov	r6, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001efe:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001f02:	4a70      	ldr	r2, [pc, #448]	@ (80020c4 <main+0x310>)
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	785b      	ldrb	r3, [r3, #1]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001f0a:	607b      	str	r3, [r7, #4]
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001f0c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001f10:	4a6c      	ldr	r2, [pc, #432]	@ (80020c4 <main+0x310>)
 8001f12:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001f16:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001f1a:	9305      	str	r3, [sp, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	9304      	str	r3, [sp, #16]
 8001f20:	9603      	str	r6, [sp, #12]
 8001f22:	9502      	str	r5, [sp, #8]
 8001f24:	9401      	str	r4, [sp, #4]
 8001f26:	9100      	str	r1, [sp, #0]
 8001f28:	4673      	mov	r3, lr
 8001f2a:	4662      	mov	r2, ip
 8001f2c:	4967      	ldr	r1, [pc, #412]	@ (80020cc <main+0x318>)
 8001f2e:	f004 f9c1 	bl	80062b4 <siprintf>

        if (temperature > -900.0)
 8001f32:	4967      	ldr	r1, [pc, #412]	@ (80020d0 <main+0x31c>)
 8001f34:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001f38:	f7ff f8e0 	bl	80010fc <__aeabi_fcmpgt>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01e      	beq.n	8001f80 <main+0x1cc>
        { // 检查是否为有效温度值
          sprintf(msg, "Sensor %d [%s]: %.2f C\r\n", i, rom_str, temperature);
 8001f42:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001f46:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001f4a:	f7fe fa6d 	bl	8000428 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001f56:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001f5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4622      	mov	r2, r4
 8001f62:	495c      	ldr	r1, [pc, #368]	@ (80020d4 <main+0x320>)
 8001f64:	f004 f9a6 	bl	80062b4 <siprintf>
          sprintf(msg2, "%.2f;",temperature);
 8001f68:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001f6c:	f7fe fa5c 	bl	8000428 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001f78:	4957      	ldr	r1, [pc, #348]	@ (80020d8 <main+0x324>)
 8001f7a:	f004 f99b 	bl	80062b4 <siprintf>
 8001f7e:	e012      	b.n	8001fa6 <main+0x1f2>
        }
        else
        {
          sprintf(msg, "Sensor %d [%s]: Read Error (Code: %.1f)\r\n", i, rom_str, temperature);
 8001f80:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001f84:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001f88:	f7fe fa4e 	bl	8000428 <__aeabi_f2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001f94:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001f98:	e9cd 2300 	strd	r2, r3, [sp]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	494e      	ldr	r1, [pc, #312]	@ (80020dc <main+0x328>)
 8001fa2:	f004 f987 	bl	80062b4 <siprintf>
        }

        //暂时关闭，防止串口拥堵
        // HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200);
        HAL_Delay(50); // 短暂延时，避免串口拥堵
 8001fa6:	2032      	movs	r0, #50	@ 0x32
 8001fa8:	f000 ff26 	bl	8002df8 <HAL_Delay>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001fac:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001fb6:	4b40      	ldr	r3, [pc, #256]	@ (80020b8 <main+0x304>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	f4ff af62 	bcc.w	8001e88 <main+0xd4>
      }
        // 检查温度并控制继电器（仅在温度控制启用时）
      uint8_t relay_status = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
      if (relay_temp_control) 
 8001fca:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <main+0x32c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d035      	beq.n	800203e <main+0x28a>
      {
        for (uint8_t i = 0; i < g_num_sensors; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8001fd8:	e01d      	b.n	8002016 <main+0x262>
        {
            if(temperatureArray[i] > TEMP_THRESHOLD)
 8001fda:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8001fde:	4a3a      	ldr	r2, [pc, #232]	@ (80020c8 <main+0x314>)
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	493f      	ldr	r1, [pc, #252]	@ (80020e4 <main+0x330>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f888 	bl	80010fc <__aeabi_fcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <main+0x258>
            {
              RELAY_Control(1); // 温度超过阈值，打开继电器
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff f992 	bl	800131c <RELAY_Control>
              sprintf(relay_msg, "ON");
 8001ff8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ffc:	493a      	ldr	r1, [pc, #232]	@ (80020e8 <main+0x334>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 f958 	bl	80062b4 <siprintf>
              relay_status = 1;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
              break;
 800200a:	e00a      	b.n	8002022 <main+0x26e>
        for (uint8_t i = 0; i < g_num_sensors; i++)
 800200c:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8002010:	3301      	adds	r3, #1
 8002012:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8002016:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <main+0x304>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f897 215d 	ldrb.w	r2, [r7, #349]	@ 0x15d
 800201e:	429a      	cmp	r2, r3
 8002020:	d3db      	bcc.n	8001fda <main+0x226>
            }
        }
        
        if (!relay_status) {
 8002022:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11a      	bne.n	8002060 <main+0x2ac>
          RELAY_Control(0); // 温度均低于阈值，关闭继电器
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff f976 	bl	800131c <RELAY_Control>
          sprintf(relay_msg, "OFF");
 8002030:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002034:	492d      	ldr	r1, [pc, #180]	@ (80020ec <main+0x338>)
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f93c 	bl	80062b4 <siprintf>
 800203c:	e010      	b.n	8002060 <main+0x2ac>
        }
      }
      else
      {
        // 使用强制状态
        relay_status = relay_force_state;
 800203e:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <main+0x33c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
        sprintf(relay_msg, relay_status ? "ON" : "OFF");
 8002046:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <main+0x29e>
 800204e:	4a26      	ldr	r2, [pc, #152]	@ (80020e8 <main+0x334>)
 8002050:	e000      	b.n	8002054 <main+0x2a0>
 8002052:	4a26      	ldr	r2, [pc, #152]	@ (80020ec <main+0x338>)
 8002054:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f004 f92a 	bl	80062b4 <siprintf>
      //     (g_num_sensors > 1) ? temperatureArray[1] : -999.0, 
      //     relay_status,
      //     TEMP_THRESHOLD
      // );
      // OLED显示温度和继电器状态
      OLED_DisplayTemperature(
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <main+0x314>)
 8002062:	6818      	ldr	r0, [r3, #0]
          temperatureArray[0], 
          (g_num_sensors > 1) ? temperatureArray[1] : -999.0,
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <main+0x304>)
 8002066:	781b      	ldrb	r3, [r3, #0]
      OLED_DisplayTemperature(
 8002068:	2b01      	cmp	r3, #1
 800206a:	d902      	bls.n	8002072 <main+0x2be>
 800206c:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <main+0x314>)
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	e000      	b.n	8002074 <main+0x2c0>
 8002072:	4920      	ldr	r1, [pc, #128]	@ (80020f4 <main+0x340>)
          (g_num_sensors > 2) ? temperatureArray[2] : -999.0,
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <main+0x304>)
 8002076:	781b      	ldrb	r3, [r3, #0]
      OLED_DisplayTemperature(
 8002078:	2b02      	cmp	r3, #2
 800207a:	d902      	bls.n	8002082 <main+0x2ce>
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <main+0x314>)
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	e000      	b.n	8002084 <main+0x2d0>
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <main+0x340>)
 8002084:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8002088:	4c16      	ldr	r4, [pc, #88]	@ (80020e4 <main+0x330>)
 800208a:	9400      	str	r4, [sp, #0]
 800208c:	f000 fb0c 	bl	80026a8 <OLED_DisplayTemperature>
          relay_status,
          TEMP_THRESHOLD
      );
      
      // 格式化并发送到Lora
      strcpy(msg2, "");
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
      for (uint8_t i = 0; i < 3; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 800209c:	e048      	b.n	8002130 <main+0x37c>
 800209e:	bf00      	nop
 80020a0:	200002b4 	.word	0x200002b4
 80020a4:	20000710 	.word	0x20000710
 80020a8:	08009bf0 	.word	0x08009bf0
 80020ac:	08009c04 	.word	0x08009c04
 80020b0:	08009c18 	.word	0x08009c18
 80020b4:	200006c8 	.word	0x200006c8
 80020b8:	20000270 	.word	0x20000270
 80020bc:	08009c34 	.word	0x08009c34
 80020c0:	200002c0 	.word	0x200002c0
 80020c4:	20000248 	.word	0x20000248
 80020c8:	20000274 	.word	0x20000274
 80020cc:	08009c50 	.word	0x08009c50
 80020d0:	c4610000 	.word	0xc4610000
 80020d4:	08009c78 	.word	0x08009c78
 80020d8:	08009c94 	.word	0x08009c94
 80020dc:	08009c9c 	.word	0x08009c9c
 80020e0:	20000000 	.word	0x20000000
 80020e4:	41f00000 	.word	0x41f00000
 80020e8:	08009cc8 	.word	0x08009cc8
 80020ec:	08009ccc 	.word	0x08009ccc
 80020f0:	200002bd 	.word	0x200002bd
 80020f4:	c479c000 	.word	0xc479c000
      {
          char temp_msg[50];
          sprintf(temp_msg, "%.2f;", temperatureArray[i]);
 80020f8:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 80020fc:	4a2c      	ldr	r2, [pc, #176]	@ (80021b0 <main+0x3fc>)
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f990 	bl	8000428 <__aeabi_f2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	f107 000c 	add.w	r0, r7, #12
 8002110:	4928      	ldr	r1, [pc, #160]	@ (80021b4 <main+0x400>)
 8002112:	f004 f8cf 	bl	80062b4 <siprintf>
          strcat(msg2, temp_msg);
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f004 f934 	bl	800638e <strcat>
      for (uint8_t i = 0; i < 3; i++)
 8002126:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 800212a:	3301      	adds	r3, #1
 800212c:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8002130:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8002134:	2b02      	cmp	r3, #2
 8002136:	d9df      	bls.n	80020f8 <main+0x344>
      }
      strcat(msg2, relay_msg); // 继电器状态
 8002138:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800213c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f004 f923 	bl	800638e <strcat>
      strcat(msg2, ";\r\n");
 8002148:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800214c:	4618      	mov	r0, r3
 800214e:	f7fd ffff 	bl	8000150 <strlen>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800215a:	4413      	add	r3, r2
 800215c:	4a16      	ldr	r2, [pc, #88]	@ (80021b8 <main+0x404>)
 800215e:	6810      	ldr	r0, [r2, #0]
 8002160:	6018      	str	r0, [r3, #0]
      HAL_UART_Transmit(&huart3, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
 8002162:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002166:	4618      	mov	r0, r3
 8002168:	f7fd fff2 	bl	8000150 <strlen>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002174:	23c8      	movs	r3, #200	@ 0xc8
 8002176:	4811      	ldr	r0, [pc, #68]	@ (80021bc <main+0x408>)
 8002178:	f002 fad2 	bl	8004720 <HAL_UART_Transmit>
 800217c:	e012      	b.n	80021a4 <main+0x3f0>
    }
    else
    {
      sprintf(msg, "Failed to start conversion.\r\n");
 800217e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002182:	490f      	ldr	r1, [pc, #60]	@ (80021c0 <main+0x40c>)
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f895 	bl	80062b4 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 800218a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800218e:	4618      	mov	r0, r3
 8002190:	f7fd ffde 	bl	8000150 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	b29a      	uxth	r2, r3
 8002198:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800219c:	2364      	movs	r3, #100	@ 0x64
 800219e:	4809      	ldr	r0, [pc, #36]	@ (80021c4 <main+0x410>)
 80021a0:	f002 fabe 	bl	8004720 <HAL_UART_Transmit>
    }

    HAL_Delay(6000); // 每隔一段时间读取一次
 80021a4:	f241 7070 	movw	r0, #6000	@ 0x1770
 80021a8:	f000 fe26 	bl	8002df8 <HAL_Delay>
  {
 80021ac:	e64c      	b.n	8001e48 <main+0x94>
 80021ae:	bf00      	nop
 80021b0:	20000274 	.word	0x20000274
 80021b4:	08009c94 	.word	0x08009c94
 80021b8:	08009cd0 	.word	0x08009cd0
 80021bc:	20000710 	.word	0x20000710
 80021c0:	08009cd4 	.word	0x08009cd4
 80021c4:	200006c8 	.word	0x200006c8

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	@ 0x40
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0318 	add.w	r3, r7, #24
 80021d2:	2228      	movs	r2, #40	@ 0x28
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f8d1 	bl	800637e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fc:	2302      	movs	r3, #2
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002206:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fe25 	bl	8003e60 <HAL_RCC_OscConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800221c:	f000 f819 	bl	8002252 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002220:	230f      	movs	r3, #15
 8002222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002224:	2302      	movs	r3, #2
 8002226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800222c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 f892 	bl	8004364 <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002246:	f000 f804 	bl	8002252 <Error_Handler>
  }
}
 800224a:	bf00      	nop
 800224c:	3740      	adds	r7, #64	@ 0x40
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002256:	b672      	cpsid	i
}
 8002258:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225a:	bf00      	nop
 800225c:	e7fd      	b.n	800225a <Error_Handler+0x8>
	...

08002260 <OLED_Write_Byte>:
#define COM 0x00  // OLED指令
#define DAT 0x40  // OLED数据

// I2C写入数据
static void OLED_Write_Byte(uint8_t data, uint8_t mode)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af02      	add	r7, sp, #8
 8002266:	4603      	mov	r3, r0
 8002268:	460a      	mov	r2, r1
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	4613      	mov	r3, r2
 800226e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = mode;  // 写命令/数据控制字节
 8002270:	79bb      	ldrb	r3, [r7, #6]
 8002272:	733b      	strb	r3, [r7, #12]
    buf[1] = data;  // 数据字节
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, buf, 2, 100);
 8002278:	f107 020c 	add.w	r2, r7, #12
 800227c:	2364      	movs	r3, #100	@ 0x64
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2302      	movs	r3, #2
 8002282:	2178      	movs	r1, #120	@ 0x78
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <OLED_Write_Byte+0x34>)
 8002286:	f001 fa93 	bl	80037b0 <HAL_I2C_Master_Transmit>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200001f4 	.word	0x200001f4

08002298 <OLED_Refresh>:

// 更新显存到OLED
void OLED_Refresh(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0a4      	sub	sp, #144	@ 0x90
 800229c:	af02      	add	r7, sp, #8
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80022a4:	e03b      	b.n	800231e <OLED_Refresh+0x86>
    {
        OLED_Write_Byte(0xB0 + i, COM);    // 设置页地址(0~7)
 80022a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80022aa:	3b50      	subs	r3, #80	@ 0x50
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ffd5 	bl	8002260 <OLED_Write_Byte>
        OLED_Write_Byte(0x00, COM);        // 设置显示位置—列低地址
 80022b6:	2100      	movs	r1, #0
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ffd1 	bl	8002260 <OLED_Write_Byte>
        OLED_Write_Byte(0x10, COM);        // 设置显示位置—列高地址
 80022be:	2100      	movs	r1, #0
 80022c0:	2010      	movs	r0, #16
 80022c2:	f7ff ffcd 	bl	8002260 <OLED_Write_Byte>
        
        // 一次发送一整行的数据(128字节)，提高效率
        uint8_t data[129];
        data[0] = DAT;  // 数据控制字节
 80022c6:	2340      	movs	r3, #64	@ 0x40
 80022c8:	713b      	strb	r3, [r7, #4]
        for (n = 0; n < 128; n++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80022d0:	e014      	b.n	80022fc <OLED_Refresh+0x64>
            data[n+1] = OLED_GRAM[n][i];
 80022d2:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 80022d6:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80022da:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80022de:	3301      	adds	r3, #1
 80022e0:	4813      	ldr	r0, [pc, #76]	@ (8002330 <OLED_Refresh+0x98>)
 80022e2:	00c9      	lsls	r1, r1, #3
 80022e4:	4401      	add	r1, r0
 80022e6:	440a      	add	r2, r1
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	3388      	adds	r3, #136	@ 0x88
 80022ec:	443b      	add	r3, r7
 80022ee:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (n = 0; n < 128; n++)
 80022f2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80022f6:	3301      	adds	r3, #1
 80022f8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80022fc:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8002300:	2b00      	cmp	r3, #0
 8002302:	dae6      	bge.n	80022d2 <OLED_Refresh+0x3a>
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, data, 129, 200);
 8002304:	1d3a      	adds	r2, r7, #4
 8002306:	23c8      	movs	r3, #200	@ 0xc8
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2381      	movs	r3, #129	@ 0x81
 800230c:	2178      	movs	r1, #120	@ 0x78
 800230e:	4809      	ldr	r0, [pc, #36]	@ (8002334 <OLED_Refresh+0x9c>)
 8002310:	f001 fa4e 	bl	80037b0 <HAL_I2C_Master_Transmit>
    for (i = 0; i < 8; i++)
 8002314:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002318:	3301      	adds	r3, #1
 800231a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800231e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002322:	2b07      	cmp	r3, #7
 8002324:	d9bf      	bls.n	80022a6 <OLED_Refresh+0xe>
    }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3788      	adds	r7, #136	@ 0x88
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200002c4 	.word	0x200002c4
 8002334:	200001f4 	.word	0x200001f4

08002338 <OLED_Clear>:
    OLED_Write_Byte(0xAE, COM); // 关闭屏幕
}

// 清屏函数
void OLED_Clear(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 800233e:	2300      	movs	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	e014      	b.n	800236e <OLED_Clear+0x36>
    {
        for (n = 0; n < 128; n++)
 8002344:	2300      	movs	r3, #0
 8002346:	71bb      	strb	r3, [r7, #6]
 8002348:	e00a      	b.n	8002360 <OLED_Clear+0x28>
        {
            OLED_GRAM[n][i] = 0;
 800234a:	79ba      	ldrb	r2, [r7, #6]
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	490c      	ldr	r1, [pc, #48]	@ (8002380 <OLED_Clear+0x48>)
 8002350:	00d2      	lsls	r2, r2, #3
 8002352:	440a      	add	r2, r1
 8002354:	4413      	add	r3, r2
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
        for (n = 0; n < 128; n++)
 800235a:	79bb      	ldrb	r3, [r7, #6]
 800235c:	3301      	adds	r3, #1
 800235e:	71bb      	strb	r3, [r7, #6]
 8002360:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	daf0      	bge.n	800234a <OLED_Clear+0x12>
    for (i = 0; i < 8; i++)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	3301      	adds	r3, #1
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b07      	cmp	r3, #7
 8002372:	d9e7      	bls.n	8002344 <OLED_Clear+0xc>
        }
    }
    OLED_Refresh(); // 更新显示
 8002374:	f7ff ff90 	bl	8002298 <OLED_Refresh>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200002c4 	.word	0x200002c4

08002384 <OLED_DrawPoint>:

// 画点
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	460b      	mov	r3, r1
 8002390:	71bb      	strb	r3, [r7, #6]
 8002392:	4613      	mov	r3, r2
 8002394:	717b      	strb	r3, [r7, #5]
    uint8_t pos, bx, temp = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
    if (x > 127 || y > 63) return; // 超出范围
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db3c      	blt.n	800241c <OLED_DrawPoint+0x98>
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80023a6:	d839      	bhi.n	800241c <OLED_DrawPoint+0x98>
    pos = y / 8;                   // 得到页地址
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	73bb      	strb	r3, [r7, #14]
    bx = y % 8;                    // 取得y在页内的位置
 80023ae:	79bb      	ldrb	r3, [r7, #6]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	737b      	strb	r3, [r7, #13]
    temp = 1 << bx;                // 得到点在页内的位置对应的值
 80023b6:	7b7b      	ldrb	r3, [r7, #13]
 80023b8:	2201      	movs	r2, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	73fb      	strb	r3, [r7, #15]
    if (t) OLED_GRAM[x][pos] |= temp;  // 置1
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <OLED_DrawPoint+0x68>
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	4917      	ldr	r1, [pc, #92]	@ (8002428 <OLED_DrawPoint+0xa4>)
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	440a      	add	r2, r1
 80023d0:	4413      	add	r3, r2
 80023d2:	7818      	ldrb	r0, [r3, #0]
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	7bf9      	ldrb	r1, [r7, #15]
 80023da:	4301      	orrs	r1, r0
 80023dc:	b2c8      	uxtb	r0, r1
 80023de:	4912      	ldr	r1, [pc, #72]	@ (8002428 <OLED_DrawPoint+0xa4>)
 80023e0:	00d2      	lsls	r2, r2, #3
 80023e2:	440a      	add	r2, r1
 80023e4:	4413      	add	r3, r2
 80023e6:	4602      	mov	r2, r0
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e018      	b.n	800241e <OLED_DrawPoint+0x9a>
    else OLED_GRAM[x][pos] &= ~temp;   // 清0
 80023ec:	79fa      	ldrb	r2, [r7, #7]
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	490d      	ldr	r1, [pc, #52]	@ (8002428 <OLED_DrawPoint+0xa4>)
 80023f2:	00d2      	lsls	r2, r2, #3
 80023f4:	440a      	add	r2, r1
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b25a      	sxtb	r2, r3
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	43db      	mvns	r3, r3
 8002402:	b25b      	sxtb	r3, r3
 8002404:	4013      	ands	r3, r2
 8002406:	b259      	sxtb	r1, r3
 8002408:	79fa      	ldrb	r2, [r7, #7]
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	b2c8      	uxtb	r0, r1
 800240e:	4906      	ldr	r1, [pc, #24]	@ (8002428 <OLED_DrawPoint+0xa4>)
 8002410:	00d2      	lsls	r2, r2, #3
 8002412:	440a      	add	r2, r1
 8002414:	4413      	add	r3, r2
 8002416:	4602      	mov	r2, r0
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e000      	b.n	800241e <OLED_DrawPoint+0x9a>
    if (x > 127 || y > 63) return; // 超出范围
 800241c:	bf00      	nop
}
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200002c4 	.word	0x200002c4

0800242c <OLED_ShowChar>:
    OLED_Refresh();
}

// 在指定位置显示一个字符
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4623      	mov	r3, r4
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	4603      	mov	r3, r0
 8002440:	71bb      	strb	r3, [r7, #6]
 8002442:	460b      	mov	r3, r1
 8002444:	717b      	strb	r3, [r7, #5]
 8002446:	4613      	mov	r3, r2
 8002448:	713b      	strb	r3, [r7, #4]
    uint8_t i, j, c;
    c = chr - ' '; // 得到偏移后的值
 800244a:	797b      	ldrb	r3, [r7, #5]
 800244c:	3b20      	subs	r3, #32
 800244e:	737b      	strb	r3, [r7, #13]
    if (x > 128 - 1)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da04      	bge.n	8002462 <OLED_ShowChar+0x36>
    {
        x = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	71fb      	strb	r3, [r7, #7]
        y = y + 2;
 800245c:	79bb      	ldrb	r3, [r7, #6]
 800245e:	3302      	adds	r3, #2
 8002460:	71bb      	strb	r3, [r7, #6]
    }
    if (size == 16)
 8002462:	793b      	ldrb	r3, [r7, #4]
 8002464:	2b10      	cmp	r3, #16
 8002466:	d177      	bne.n	8002558 <OLED_ShowChar+0x12c>
    {
        for (i = 0; i < 8; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e032      	b.n	80024d4 <OLED_ShowChar+0xa8>
        {
            for (j = 0; j < 8; j++)
 800246e:	2300      	movs	r3, #0
 8002470:	73bb      	strb	r3, [r7, #14]
 8002472:	e029      	b.n	80024c8 <OLED_ShowChar+0x9c>
            {
                if (F8X16[c * 16 + i] & (0x80 >> j))
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	011a      	lsls	r2, r3, #4
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4413      	add	r3, r2
 800247c:	4a58      	ldr	r2, [pc, #352]	@ (80025e0 <OLED_ShowChar+0x1b4>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	4619      	mov	r1, r3
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	2280      	movs	r2, #128	@ 0x80
 8002486:	fa42 f303 	asr.w	r3, r2, r3
 800248a:	400b      	ands	r3, r1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <OLED_ShowChar+0x7e>
                    OLED_DrawPoint(x + j, y + i, 1);
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	4413      	add	r3, r2
 8002496:	b2d8      	uxtb	r0, r3
 8002498:	79ba      	ldrb	r2, [r7, #6]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4413      	add	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2201      	movs	r2, #1
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7ff ff6e 	bl	8002384 <OLED_DrawPoint>
 80024a8:	e00b      	b.n	80024c2 <OLED_ShowChar+0x96>
                else
                    OLED_DrawPoint(x + j, y + i, 0);
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	7bbb      	ldrb	r3, [r7, #14]
 80024ae:	4413      	add	r3, r2
 80024b0:	b2d8      	uxtb	r0, r3
 80024b2:	79ba      	ldrb	r2, [r7, #6]
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4413      	add	r3, r2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	f7ff ff61 	bl	8002384 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 80024c2:	7bbb      	ldrb	r3, [r7, #14]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73bb      	strb	r3, [r7, #14]
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	2b07      	cmp	r3, #7
 80024cc:	d9d2      	bls.n	8002474 <OLED_ShowChar+0x48>
        for (i = 0; i < 8; i++)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	3301      	adds	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b07      	cmp	r3, #7
 80024d8:	d9c9      	bls.n	800246e <OLED_ShowChar+0x42>
            }
        }
        for (i = 0; i < 8; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e037      	b.n	8002550 <OLED_ShowChar+0x124>
        {
            for (j = 0; j < 8; j++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	73bb      	strb	r3, [r7, #14]
 80024e4:	e02e      	b.n	8002544 <OLED_ShowChar+0x118>
            {
                if (F8X16[c * 16 + i + 8] & (0x80 >> j))
 80024e6:	7b7b      	ldrb	r3, [r7, #13]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4413      	add	r3, r2
 80024ee:	3308      	adds	r3, #8
 80024f0:	4a3b      	ldr	r2, [pc, #236]	@ (80025e0 <OLED_ShowChar+0x1b4>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	4619      	mov	r1, r3
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	fa42 f303 	asr.w	r3, r2, r3
 80024fe:	400b      	ands	r3, r1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <OLED_ShowChar+0xf6>
                    OLED_DrawPoint(x + j, y + i + 8, 1);
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	4413      	add	r3, r2
 800250a:	b2d8      	uxtb	r0, r3
 800250c:	79ba      	ldrb	r2, [r7, #6]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	4413      	add	r3, r2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3308      	adds	r3, #8
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2201      	movs	r2, #1
 800251a:	4619      	mov	r1, r3
 800251c:	f7ff ff32 	bl	8002384 <OLED_DrawPoint>
 8002520:	e00d      	b.n	800253e <OLED_ShowChar+0x112>
                else
                    OLED_DrawPoint(x + j, y + i + 8, 0);
 8002522:	79fa      	ldrb	r2, [r7, #7]
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	4413      	add	r3, r2
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	79ba      	ldrb	r2, [r7, #6]
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	4413      	add	r3, r2
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3308      	adds	r3, #8
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	f7ff ff23 	bl	8002384 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	3301      	adds	r3, #1
 8002542:	73bb      	strb	r3, [r7, #14]
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	2b07      	cmp	r3, #7
 8002548:	d9cd      	bls.n	80024e6 <OLED_ShowChar+0xba>
        for (i = 0; i < 8; i++)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b07      	cmp	r3, #7
 8002554:	d9c4      	bls.n	80024e0 <OLED_ShowChar+0xb4>
                else
                    OLED_DrawPoint(x + i, y + j, 0);
            }
        }
    }
}
 8002556:	e03f      	b.n	80025d8 <OLED_ShowChar+0x1ac>
    else if (size == 8)
 8002558:	793b      	ldrb	r3, [r7, #4]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d13c      	bne.n	80025d8 <OLED_ShowChar+0x1ac>
        for (i = 0; i < 6; i++)
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	e036      	b.n	80025d2 <OLED_ShowChar+0x1a6>
            for (j = 0; j < 8; j++)
 8002564:	2300      	movs	r3, #0
 8002566:	73bb      	strb	r3, [r7, #14]
 8002568:	e02d      	b.n	80025c6 <OLED_ShowChar+0x19a>
                if (F6x8[c][i] & (1 << j))
 800256a:	7b7a      	ldrb	r2, [r7, #13]
 800256c:	7bf9      	ldrb	r1, [r7, #15]
 800256e:	481d      	ldr	r0, [pc, #116]	@ (80025e4 <OLED_ShowChar+0x1b8>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4403      	add	r3, r0
 800257a:	440b      	add	r3, r1
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	fa42 f303 	asr.w	r3, r2, r3
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <OLED_ShowChar+0x17c>
                    OLED_DrawPoint(x + i, y + j, 1);
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	4413      	add	r3, r2
 8002594:	b2d8      	uxtb	r0, r3
 8002596:	79ba      	ldrb	r2, [r7, #6]
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	4413      	add	r3, r2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2201      	movs	r2, #1
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7ff feef 	bl	8002384 <OLED_DrawPoint>
 80025a6:	e00b      	b.n	80025c0 <OLED_ShowChar+0x194>
                    OLED_DrawPoint(x + i, y + j, 0);
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	4413      	add	r3, r2
 80025ae:	b2d8      	uxtb	r0, r3
 80025b0:	79ba      	ldrb	r2, [r7, #6]
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
 80025b4:	4413      	add	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7ff fee2 	bl	8002384 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	3301      	adds	r3, #1
 80025c4:	73bb      	strb	r3, [r7, #14]
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	d9ce      	bls.n	800256a <OLED_ShowChar+0x13e>
        for (i = 0; i < 6; i++)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	3301      	adds	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d9c5      	bls.n	8002564 <OLED_ShowChar+0x138>
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	0800a000 	.word	0x0800a000
 80025e4:	08009dd8 	.word	0x08009dd8

080025e8 <OLED_ShowString>:

// 显示字符串
void OLED_ShowString(uint8_t x, uint8_t y, const char *p, uint8_t size)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	603a      	str	r2, [r7, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	460b      	mov	r3, r1
 80025f8:	71bb      	strb	r3, [r7, #6]
 80025fa:	4613      	mov	r3, r2
 80025fc:	717b      	strb	r3, [r7, #5]
    while (*p != '\0')
 80025fe:	e020      	b.n	8002642 <OLED_ShowString+0x5a>
    {
        OLED_ShowChar(x, y, *p, size);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	797b      	ldrb	r3, [r7, #5]
 8002606:	79b9      	ldrb	r1, [r7, #6]
 8002608:	79f8      	ldrb	r0, [r7, #7]
 800260a:	f7ff ff0f 	bl	800242c <OLED_ShowChar>
        x += (size == 8) ? 6 : 8;
 800260e:	797b      	ldrb	r3, [r7, #5]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d101      	bne.n	8002618 <OLED_ShowString+0x30>
 8002614:	2206      	movs	r2, #6
 8002616:	e000      	b.n	800261a <OLED_ShowString+0x32>
 8002618:	2208      	movs	r2, #8
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4413      	add	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
        if (x > 122)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b7a      	cmp	r3, #122	@ 0x7a
 8002624:	d90a      	bls.n	800263c <OLED_ShowString+0x54>
        {
            x = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	71fb      	strb	r3, [r7, #7]
            y += (size == 8) ? 9 : 16;
 800262a:	797b      	ldrb	r3, [r7, #5]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d101      	bne.n	8002634 <OLED_ShowString+0x4c>
 8002630:	2209      	movs	r2, #9
 8002632:	e000      	b.n	8002636 <OLED_ShowString+0x4e>
 8002634:	2210      	movs	r2, #16
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	4413      	add	r3, r2
 800263a:	71bb      	strb	r3, [r7, #6]
        }
        p++;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	603b      	str	r3, [r7, #0]
    while (*p != '\0')
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1da      	bne.n	8002600 <OLED_ShowString+0x18>
    }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <OLED_Init>:
    }
}

// 初始化OLED
void OLED_Init(void)
{
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
    // 初始化命令
    uint8_t CMD_Data[] = {
 800265a:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <OLED_Init+0x50>)
 800265c:	463c      	mov	r4, r7
 800265e:	461d      	mov	r5, r3
 8002660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        0xAE, 0x00, 0x10, 0x40, 0x81, 0xCF, 0xA1, 0xC8, 0xA6,
        0xA8, 0x3f, 0xD3, 0x00, 0xD5, 0x80, 0xD9, 0xF1, 0xDA, 0x12,
        0xDB, 0x40, 0x20, 0x02, 0x8D, 0x14, 0xA4, 0xA6, 0xAF
    };
    
    HAL_Delay(100);  // 延时等待OLED稳定
 800266c:	2064      	movs	r0, #100	@ 0x64
 800266e:	f000 fbc3 	bl	8002df8 <HAL_Delay>
    
    // 发送初始化命令
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 8002672:	2300      	movs	r3, #0
 8002674:	77fb      	strb	r3, [r7, #31]
 8002676:	e00b      	b.n	8002690 <OLED_Init+0x3c>
    {
        OLED_Write_Byte(CMD_Data[i], COM);
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	3320      	adds	r3, #32
 800267c:	443b      	add	r3, r7
 800267e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fdeb 	bl	8002260 <OLED_Write_Byte>
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	3301      	adds	r3, #1
 800268e:	77fb      	strb	r3, [r7, #31]
 8002690:	7ffb      	ldrb	r3, [r7, #31]
 8002692:	2b1b      	cmp	r3, #27
 8002694:	d9f0      	bls.n	8002678 <OLED_Init+0x24>
    }
    
    OLED_Clear();  // 清屏
 8002696:	f7ff fe4f 	bl	8002338 <OLED_Clear>
}
 800269a:	bf00      	nop
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08009cf4 	.word	0x08009cf4

080026a8 <OLED_DisplayTemperature>:
//     OLED_Refresh();  // 更新显示
// }

// 显示温度和继电器状态
void OLED_DisplayTemperature(float temp1, float temp2, float temp3, uint8_t relay_status, float temp_threshold)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 80026b6:	f7ff fe3f 	bl	8002338 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "Temperature Monitor", 8);
 80026ba:	2308      	movs	r3, #8
 80026bc:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <OLED_DisplayTemperature+0x158>)
 80026be:	2100      	movs	r1, #0
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff ff91 	bl	80025e8 <OLED_ShowString>
    OLED_ShowString(0, 16, "Sensor1:", 8);
 80026c6:	2308      	movs	r3, #8
 80026c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002804 <OLED_DisplayTemperature+0x15c>)
 80026ca:	2110      	movs	r1, #16
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff ff8b 	bl	80025e8 <OLED_ShowString>
    
    // 显示传感器1温度
    if (temp1 > -900.0) {
 80026d2:	494d      	ldr	r1, [pc, #308]	@ (8002808 <OLED_DisplayTemperature+0x160>)
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7fe fd11 	bl	80010fc <__aeabi_fcmpgt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d011      	beq.n	8002704 <OLED_DisplayTemperature+0x5c>
        sprintf(buffer, "%.1fC", temp1);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7fd fea1 	bl	8000428 <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	f107 0014 	add.w	r0, r7, #20
 80026ee:	4947      	ldr	r1, [pc, #284]	@ (800280c <OLED_DisplayTemperature+0x164>)
 80026f0:	f003 fde0 	bl	80062b4 <siprintf>
        OLED_ShowString(56, 16, buffer, 8);
 80026f4:	f107 0214 	add.w	r2, r7, #20
 80026f8:	2308      	movs	r3, #8
 80026fa:	2110      	movs	r1, #16
 80026fc:	2038      	movs	r0, #56	@ 0x38
 80026fe:	f7ff ff73 	bl	80025e8 <OLED_ShowString>
 8002702:	e005      	b.n	8002710 <OLED_DisplayTemperature+0x68>
    } else {
        OLED_ShowString(56, 16, "Error", 8);
 8002704:	2308      	movs	r3, #8
 8002706:	4a42      	ldr	r2, [pc, #264]	@ (8002810 <OLED_DisplayTemperature+0x168>)
 8002708:	2110      	movs	r1, #16
 800270a:	2038      	movs	r0, #56	@ 0x38
 800270c:	f7ff ff6c 	bl	80025e8 <OLED_ShowString>
    }
    
    // 显示传感器2温度
    OLED_ShowString(0, 26, "Sensor2:", 8);
 8002710:	2308      	movs	r3, #8
 8002712:	4a40      	ldr	r2, [pc, #256]	@ (8002814 <OLED_DisplayTemperature+0x16c>)
 8002714:	211a      	movs	r1, #26
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff ff66 	bl	80025e8 <OLED_ShowString>
    if (temp2 > -900.0) {
 800271c:	493a      	ldr	r1, [pc, #232]	@ (8002808 <OLED_DisplayTemperature+0x160>)
 800271e:	68b8      	ldr	r0, [r7, #8]
 8002720:	f7fe fcec 	bl	80010fc <__aeabi_fcmpgt>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <OLED_DisplayTemperature+0xa6>
        sprintf(buffer, "%.1fC", temp2);
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f7fd fe7c 	bl	8000428 <__aeabi_f2d>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	f107 0014 	add.w	r0, r7, #20
 8002738:	4934      	ldr	r1, [pc, #208]	@ (800280c <OLED_DisplayTemperature+0x164>)
 800273a:	f003 fdbb 	bl	80062b4 <siprintf>
        OLED_ShowString(56, 26, buffer, 8);
 800273e:	f107 0214 	add.w	r2, r7, #20
 8002742:	2308      	movs	r3, #8
 8002744:	211a      	movs	r1, #26
 8002746:	2038      	movs	r0, #56	@ 0x38
 8002748:	f7ff ff4e 	bl	80025e8 <OLED_ShowString>
 800274c:	e005      	b.n	800275a <OLED_DisplayTemperature+0xb2>
    } else {
        OLED_ShowString(56, 26, "Error", 8);
 800274e:	2308      	movs	r3, #8
 8002750:	4a2f      	ldr	r2, [pc, #188]	@ (8002810 <OLED_DisplayTemperature+0x168>)
 8002752:	211a      	movs	r1, #26
 8002754:	2038      	movs	r0, #56	@ 0x38
 8002756:	f7ff ff47 	bl	80025e8 <OLED_ShowString>
    }

    // 显示传感器3温度
    OLED_ShowString(0, 36, "Sensor3:", 8);
 800275a:	2308      	movs	r3, #8
 800275c:	4a2e      	ldr	r2, [pc, #184]	@ (8002818 <OLED_DisplayTemperature+0x170>)
 800275e:	2124      	movs	r1, #36	@ 0x24
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff ff41 	bl	80025e8 <OLED_ShowString>
    if (temp3 > -900.0) {
 8002766:	4928      	ldr	r1, [pc, #160]	@ (8002808 <OLED_DisplayTemperature+0x160>)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe fcc7 	bl	80010fc <__aeabi_fcmpgt>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d011      	beq.n	8002798 <OLED_DisplayTemperature+0xf0>
        sprintf(buffer, "%.1fC", temp3);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fd fe57 	bl	8000428 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	f107 0014 	add.w	r0, r7, #20
 8002782:	4922      	ldr	r1, [pc, #136]	@ (800280c <OLED_DisplayTemperature+0x164>)
 8002784:	f003 fd96 	bl	80062b4 <siprintf>
        OLED_ShowString(56, 36, buffer, 8);
 8002788:	f107 0214 	add.w	r2, r7, #20
 800278c:	2308      	movs	r3, #8
 800278e:	2124      	movs	r1, #36	@ 0x24
 8002790:	2038      	movs	r0, #56	@ 0x38
 8002792:	f7ff ff29 	bl	80025e8 <OLED_ShowString>
 8002796:	e005      	b.n	80027a4 <OLED_DisplayTemperature+0xfc>
    } else {
        OLED_ShowString(56, 36, "Error", 8);
 8002798:	2308      	movs	r3, #8
 800279a:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <OLED_DisplayTemperature+0x168>)
 800279c:	2124      	movs	r1, #36	@ 0x24
 800279e:	2038      	movs	r0, #56	@ 0x38
 80027a0:	f7ff ff22 	bl	80025e8 <OLED_ShowString>
    }
    
    // 显示继电器状态
    OLED_ShowString(0, 50, "Relay:", 8);
 80027a4:	2308      	movs	r3, #8
 80027a6:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <OLED_DisplayTemperature+0x174>)
 80027a8:	2132      	movs	r1, #50	@ 0x32
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff ff1c 	bl	80025e8 <OLED_ShowString>
    if (relay_status) {
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <OLED_DisplayTemperature+0x11c>
        OLED_ShowString(56, 50, "ON ", 8);
 80027b6:	2308      	movs	r3, #8
 80027b8:	4a19      	ldr	r2, [pc, #100]	@ (8002820 <OLED_DisplayTemperature+0x178>)
 80027ba:	2132      	movs	r1, #50	@ 0x32
 80027bc:	2038      	movs	r0, #56	@ 0x38
 80027be:	f7ff ff13 	bl	80025e8 <OLED_ShowString>
 80027c2:	e005      	b.n	80027d0 <OLED_DisplayTemperature+0x128>
    } else {
        OLED_ShowString(56, 50, "OFF", 8);
 80027c4:	2308      	movs	r3, #8
 80027c6:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <OLED_DisplayTemperature+0x17c>)
 80027c8:	2132      	movs	r1, #50	@ 0x32
 80027ca:	2038      	movs	r0, #56	@ 0x38
 80027cc:	f7ff ff0c 	bl	80025e8 <OLED_ShowString>
    }
    
    // 显示温度阈值
    // OLED_ShowString(0, 64, "Threshold:", 8);
    sprintf(buffer, "%.f", temp_threshold);
 80027d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027d2:	f7fd fe29 	bl	8000428 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	f107 0014 	add.w	r0, r7, #20
 80027de:	4912      	ldr	r1, [pc, #72]	@ (8002828 <OLED_DisplayTemperature+0x180>)
 80027e0:	f003 fd68 	bl	80062b4 <siprintf>
    OLED_ShowString(90, 50, buffer, 8);
 80027e4:	f107 0214 	add.w	r2, r7, #20
 80027e8:	2308      	movs	r3, #8
 80027ea:	2132      	movs	r1, #50	@ 0x32
 80027ec:	205a      	movs	r0, #90	@ 0x5a
 80027ee:	f7ff fefb 	bl	80025e8 <OLED_ShowString>
    
    OLED_Refresh();  // 更新显示
 80027f2:	f7ff fd51 	bl	8002298 <OLED_Refresh>
}
 80027f6:	bf00      	nop
 80027f8:	3728      	adds	r7, #40	@ 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	08009d10 	.word	0x08009d10
 8002804:	08009d24 	.word	0x08009d24
 8002808:	c4610000 	.word	0xc4610000
 800280c:	08009d30 	.word	0x08009d30
 8002810:	08009d38 	.word	0x08009d38
 8002814:	08009d40 	.word	0x08009d40
 8002818:	08009d4c 	.word	0x08009d4c
 800281c:	08009d58 	.word	0x08009d58
 8002820:	08009d60 	.word	0x08009d60
 8002824:	08009d64 	.word	0x08009d64
 8002828:	08009d68 	.word	0x08009d68

0800282c <OLED_DisplaySensorInfo>:

// 显示传感器信息
void OLED_DisplaySensorInfo(uint8_t num_sensors)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 8002836:	f7ff fd7f 	bl	8002338 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "DS18B20 Sensors", 8);
 800283a:	2308      	movs	r3, #8
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <OLED_DisplaySensorInfo+0x7c>)
 800283e:	2100      	movs	r1, #0
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff fed1 	bl	80025e8 <OLED_ShowString>
    
    // 显示传感器数量
    sprintf(buffer, "Found: %d sensors", num_sensors);
 8002846:	79fa      	ldrb	r2, [r7, #7]
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	4917      	ldr	r1, [pc, #92]	@ (80028ac <OLED_DisplaySensorInfo+0x80>)
 800284e:	4618      	mov	r0, r3
 8002850:	f003 fd30 	bl	80062b4 <siprintf>
    OLED_ShowString(0, 16, buffer, 8);
 8002854:	f107 020c 	add.w	r2, r7, #12
 8002858:	2308      	movs	r3, #8
 800285a:	2110      	movs	r1, #16
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff fec3 	bl	80025e8 <OLED_ShowString>
    
    if (num_sensors == 0) {
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10c      	bne.n	8002882 <OLED_DisplaySensorInfo+0x56>
        OLED_ShowString(0, 30, "No sensors found!", 8);
 8002868:	2308      	movs	r3, #8
 800286a:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <OLED_DisplaySensorInfo+0x84>)
 800286c:	211e      	movs	r1, #30
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff feba 	bl	80025e8 <OLED_ShowString>
        OLED_ShowString(0, 40, "Check connections", 8);
 8002874:	2308      	movs	r3, #8
 8002876:	4a0f      	ldr	r2, [pc, #60]	@ (80028b4 <OLED_DisplaySensorInfo+0x88>)
 8002878:	2128      	movs	r1, #40	@ 0x28
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff feb4 	bl	80025e8 <OLED_ShowString>
 8002880:	e00b      	b.n	800289a <OLED_DisplaySensorInfo+0x6e>
    } else {
        OLED_ShowString(0, 30, "System ready", 8);
 8002882:	2308      	movs	r3, #8
 8002884:	4a0c      	ldr	r2, [pc, #48]	@ (80028b8 <OLED_DisplaySensorInfo+0x8c>)
 8002886:	211e      	movs	r1, #30
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff fead 	bl	80025e8 <OLED_ShowString>
        OLED_ShowString(0, 40, "Monitoring...", 8);
 800288e:	2308      	movs	r3, #8
 8002890:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <OLED_DisplaySensorInfo+0x90>)
 8002892:	2128      	movs	r1, #40	@ 0x28
 8002894:	2000      	movs	r0, #0
 8002896:	f7ff fea7 	bl	80025e8 <OLED_ShowString>
    }
    
    OLED_Refresh();  // 更新显示
 800289a:	f7ff fcfd 	bl	8002298 <OLED_Refresh>
 800289e:	bf00      	nop
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	08009d6c 	.word	0x08009d6c
 80028ac:	08009d7c 	.word	0x08009d7c
 80028b0:	08009d90 	.word	0x08009d90
 80028b4:	08009da4 	.word	0x08009da4
 80028b8:	08009db8 	.word	0x08009db8
 80028bc:	08009dc8 	.word	0x08009dc8

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_MspInit+0x5c>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	4a14      	ldr	r2, [pc, #80]	@ (800291c <HAL_MspInit+0x5c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6193      	str	r3, [r2, #24]
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_MspInit+0x5c>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <HAL_MspInit+0x5c>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a0e      	ldr	r2, [pc, #56]	@ (800291c <HAL_MspInit+0x5c>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <HAL_MspInit+0x5c>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_MspInit+0x60>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_MspInit+0x60>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40021000 	.word	0x40021000
 8002920:	40010000 	.word	0x40010000

08002924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <NMI_Handler+0x4>

0800292c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <HardFault_Handler+0x4>

08002934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <MemManage_Handler+0x4>

0800293c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <UsageFault_Handler+0x4>

0800294c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002974:	f000 fa24 	bl	8002dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <USART3_IRQHandler+0x10>)
 8002982:	f001 ff7d 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000710 	.word	0x20000710

08002990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return 1;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <_kill>:

int _kill(int pid, int sig)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029a8:	f003 fd5c 	bl	8006464 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2216      	movs	r2, #22
 80029b0:	601a      	str	r2, [r3, #0]
  return -1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_exit>:

void _exit (int status)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffe7 	bl	800299e <_kill>
  while (1) {}    /* Make sure we hang here */
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <_exit+0x12>

080029d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e00a      	b.n	80029fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029e6:	f3af 8000 	nop.w
 80029ea:	4601      	mov	r1, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf0      	blt.n	80029e6 <_read+0x12>
  }

  return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e009      	b.n	8002a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	60ba      	str	r2, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf1      	blt.n	8002a20 <_write+0x12>
  }
  return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_close>:

int _close(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <_isatty>:

int _isatty(int file)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a82:	2301      	movs	r3, #1
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	@ (8002b04 <_sbrk+0x5c>)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <_sbrk+0x60>)
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <_sbrk+0x64>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <_sbrk+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d207      	bcs.n	8002ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad8:	f003 fcc4 	bl	8006464 <__errno>
 8002adc:	4603      	mov	r3, r0
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e009      	b.n	8002afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <_sbrk+0x64>)
 8002af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20005000 	.word	0x20005000
 8002b08:	00000400 	.word	0x00000400
 8002b0c:	200006c4 	.word	0x200006c4
 8002b10:	200008a8 	.word	0x200008a8

08002b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <MX_USART1_UART_Init+0x50>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	@ (8002b6c <MX_USART1_UART_Init+0x4c>)
 8002b58:	f001 fd92 	bl	8004680 <HAL_UART_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b62:	f7ff fb76 	bl	8002252 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200006c8 	.word	0x200006c8
 8002b70:	40013800 	.word	0x40013800

08002b74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b78:	4b11      	ldr	r3, [pc, #68]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b7a:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <MX_USART3_UART_Init+0x50>)
 8002b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b7e:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b86:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002baa:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <MX_USART3_UART_Init+0x4c>)
 8002bac:	f001 fd68 	bl	8004680 <HAL_UART_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bb6:	f7ff fb4c 	bl	8002252 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000710 	.word	0x20000710
 8002bc4:	40004800 	.word	0x40004800

08002bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0318 	add.w	r3, r7, #24
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd4 <HAL_UART_MspInit+0x10c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d132      	bne.n	8002c4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c00:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a34      	ldr	r2, [pc, #208]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b32      	ldr	r3, [pc, #200]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 0318 	add.w	r3, r7, #24
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	482b      	ldr	r0, [pc, #172]	@ (8002cdc <HAL_UART_MspInit+0x114>)
 8002c2e:	f000 fac7 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	4619      	mov	r1, r3
 8002c46:	4825      	ldr	r0, [pc, #148]	@ (8002cdc <HAL_UART_MspInit+0x114>)
 8002c48:	f000 faba 	bl	80031c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c4c:	e03e      	b.n	8002ccc <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a23      	ldr	r2, [pc, #140]	@ (8002ce0 <HAL_UART_MspInit+0x118>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d139      	bne.n	8002ccc <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c62:	61d3      	str	r3, [r2, #28]
 8002c64:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c76:	f043 0308 	orr.w	r3, r3, #8
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_UART_MspInit+0x110>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	f107 0318 	add.w	r3, r7, #24
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4811      	ldr	r0, [pc, #68]	@ (8002ce4 <HAL_UART_MspInit+0x11c>)
 8002c9e:	f000 fa8f 	bl	80031c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	f107 0318 	add.w	r3, r7, #24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480b      	ldr	r0, [pc, #44]	@ (8002ce4 <HAL_UART_MspInit+0x11c>)
 8002cb8:	f000 fa82 	bl	80031c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2027      	movs	r0, #39	@ 0x27
 8002cc2:	f000 f994 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cc6:	2027      	movs	r0, #39	@ 0x27
 8002cc8:	f000 f9ad 	bl	8003026 <HAL_NVIC_EnableIRQ>
}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	@ 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010800 	.word	0x40010800
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	40010c00 	.word	0x40010c00

08002ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce8:	f7ff ff14 	bl	8002b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cec:	480b      	ldr	r0, [pc, #44]	@ (8002d1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cee:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a09      	ldr	r2, [pc, #36]	@ (8002d28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d04:	4c09      	ldr	r4, [pc, #36]	@ (8002d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d12:	f003 fbad 	bl	8006470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d16:	f7ff f84d 	bl	8001db4 <main>
  bx lr
 8002d1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002d24:	0800aa50 	.word	0x0800aa50
  ldr r2, =_sbss
 8002d28:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d2c:	200008a8 	.word	0x200008a8

08002d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <ADC1_2_IRQHandler>
	...

08002d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d38:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <HAL_Init+0x28>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a07      	ldr	r2, [pc, #28]	@ (8002d5c <HAL_Init+0x28>)
 8002d3e:	f043 0310 	orr.w	r3, r3, #16
 8002d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 f947 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f000 f808 	bl	8002d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d50:	f7ff fdb6 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40022000 	.word	0x40022000

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d68:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <HAL_InitTick+0x54>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_InitTick+0x58>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f95f 	bl	8003042 <HAL_SYSTICK_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00e      	b.n	8002dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d80a      	bhi.n	8002daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d94:	2200      	movs	r2, #0
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f000 f927 	bl	8002fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da0:	4a06      	ldr	r2, [pc, #24]	@ (8002dbc <HAL_InitTick+0x5c>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000004 	.word	0x20000004
 8002db8:	2000000c 	.word	0x2000000c
 8002dbc:	20000008 	.word	0x20000008

08002dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_IncTick+0x1c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_IncTick+0x20>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a03      	ldr	r2, [pc, #12]	@ (8002de0 <HAL_IncTick+0x20>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	20000758 	.word	0x20000758

08002de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTick;
 8002de8:	4b02      	ldr	r3, [pc, #8]	@ (8002df4 <HAL_GetTick+0x10>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	20000758 	.word	0x20000758

08002df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d005      	beq.n	8002e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_Delay+0x44>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e1e:	bf00      	nop
 8002e20:	f7ff ffe0 	bl	8002de4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8f7      	bhi.n	8002e20 <HAL_Delay+0x28>
  {
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	60d3      	str	r3, [r2, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 0307 	and.w	r3, r3, #7
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db0b      	blt.n	8002ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	4906      	ldr	r1, [pc, #24]	@ (8002ed8 <__NVIC_EnableIRQ+0x34>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db0a      	blt.n	8002f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	490c      	ldr	r1, [pc, #48]	@ (8002f28 <__NVIC_SetPriority+0x4c>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f04:	e00a      	b.n	8002f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4908      	ldr	r1, [pc, #32]	@ (8002f2c <__NVIC_SetPriority+0x50>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3b04      	subs	r3, #4
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	bf28      	it	cs
 8002f4e:	2304      	movcs	r3, #4
 8002f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d902      	bls.n	8002f60 <NVIC_EncodePriority+0x30>
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3b03      	subs	r3, #3
 8002f5e:	e000      	b.n	8002f62 <NVIC_EncodePriority+0x32>
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	401a      	ands	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43d9      	mvns	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	4313      	orrs	r3, r2
         );
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	@ 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f7ff ff90 	bl	8002edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff2d 	bl	8002e40 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003000:	f7ff ff42 	bl	8002e88 <__NVIC_GetPriorityGrouping>
 8003004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff ff90 	bl	8002f30 <NVIC_EncodePriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff5f 	bl	8002edc <__NVIC_SetPriority>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff35 	bl	8002ea4 <__NVIC_EnableIRQ>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffa2 	bl	8002f94 <SysTick_Config>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d008      	beq.n	8003084 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e020      	b.n	80030c6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 020e 	bic.w	r2, r2, #14
 8003092:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d005      	beq.n	80030f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2204      	movs	r2, #4
 80030ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e051      	b.n	8003198 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 020e 	bic.w	r2, r2, #14
 8003102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_DMA_Abort_IT+0xd4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d029      	beq.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a21      	ldr	r2, [pc, #132]	@ (80031a8 <HAL_DMA_Abort_IT+0xd8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_DMA_Abort_IT+0x9e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ac <HAL_DMA_Abort_IT+0xdc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01a      	beq.n	8003168 <HAL_DMA_Abort_IT+0x98>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1e      	ldr	r2, [pc, #120]	@ (80031b0 <HAL_DMA_Abort_IT+0xe0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d012      	beq.n	8003162 <HAL_DMA_Abort_IT+0x92>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <HAL_DMA_Abort_IT+0xe4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00a      	beq.n	800315c <HAL_DMA_Abort_IT+0x8c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <HAL_DMA_Abort_IT+0xe8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d102      	bne.n	8003156 <HAL_DMA_Abort_IT+0x86>
 8003150:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003154:	e00e      	b.n	8003174 <HAL_DMA_Abort_IT+0xa4>
 8003156:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800315a:	e00b      	b.n	8003174 <HAL_DMA_Abort_IT+0xa4>
 800315c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003160:	e008      	b.n	8003174 <HAL_DMA_Abort_IT+0xa4>
 8003162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003166:	e005      	b.n	8003174 <HAL_DMA_Abort_IT+0xa4>
 8003168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800316c:	e002      	b.n	8003174 <HAL_DMA_Abort_IT+0xa4>
 800316e:	2310      	movs	r3, #16
 8003170:	e000      	b.n	8003174 <HAL_DMA_Abort_IT+0xa4>
 8003172:	2301      	movs	r3, #1
 8003174:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <HAL_DMA_Abort_IT+0xec>)
 8003176:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
    } 
  }
  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40020008 	.word	0x40020008
 80031a8:	4002001c 	.word	0x4002001c
 80031ac:	40020030 	.word	0x40020030
 80031b0:	40020044 	.word	0x40020044
 80031b4:	40020058 	.word	0x40020058
 80031b8:	4002006c 	.word	0x4002006c
 80031bc:	40020000 	.word	0x40020000

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b08b      	sub	sp, #44	@ 0x2c
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d2:	e169      	b.n	80034a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031d4:	2201      	movs	r2, #1
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f040 8158 	bne.w	80034a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003460 <HAL_GPIO_Init+0x2a0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d05e      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 80031fc:	4a98      	ldr	r2, [pc, #608]	@ (8003460 <HAL_GPIO_Init+0x2a0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d875      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 8003202:	4a98      	ldr	r2, [pc, #608]	@ (8003464 <HAL_GPIO_Init+0x2a4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d058      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 8003208:	4a96      	ldr	r2, [pc, #600]	@ (8003464 <HAL_GPIO_Init+0x2a4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d86f      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 800320e:	4a96      	ldr	r2, [pc, #600]	@ (8003468 <HAL_GPIO_Init+0x2a8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d052      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 8003214:	4a94      	ldr	r2, [pc, #592]	@ (8003468 <HAL_GPIO_Init+0x2a8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d869      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 800321a:	4a94      	ldr	r2, [pc, #592]	@ (800346c <HAL_GPIO_Init+0x2ac>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04c      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 8003220:	4a92      	ldr	r2, [pc, #584]	@ (800346c <HAL_GPIO_Init+0x2ac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d863      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 8003226:	4a92      	ldr	r2, [pc, #584]	@ (8003470 <HAL_GPIO_Init+0x2b0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d046      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 800322c:	4a90      	ldr	r2, [pc, #576]	@ (8003470 <HAL_GPIO_Init+0x2b0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d85d      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 8003232:	2b12      	cmp	r3, #18
 8003234:	d82a      	bhi.n	800328c <HAL_GPIO_Init+0xcc>
 8003236:	2b12      	cmp	r3, #18
 8003238:	d859      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <HAL_GPIO_Init+0x80>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	080032bb 	.word	0x080032bb
 8003244:	08003295 	.word	0x08003295
 8003248:	080032a7 	.word	0x080032a7
 800324c:	080032e9 	.word	0x080032e9
 8003250:	080032ef 	.word	0x080032ef
 8003254:	080032ef 	.word	0x080032ef
 8003258:	080032ef 	.word	0x080032ef
 800325c:	080032ef 	.word	0x080032ef
 8003260:	080032ef 	.word	0x080032ef
 8003264:	080032ef 	.word	0x080032ef
 8003268:	080032ef 	.word	0x080032ef
 800326c:	080032ef 	.word	0x080032ef
 8003270:	080032ef 	.word	0x080032ef
 8003274:	080032ef 	.word	0x080032ef
 8003278:	080032ef 	.word	0x080032ef
 800327c:	080032ef 	.word	0x080032ef
 8003280:	080032ef 	.word	0x080032ef
 8003284:	0800329d 	.word	0x0800329d
 8003288:	080032b1 	.word	0x080032b1
 800328c:	4a79      	ldr	r2, [pc, #484]	@ (8003474 <HAL_GPIO_Init+0x2b4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003292:	e02c      	b.n	80032ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	623b      	str	r3, [r7, #32]
          break;
 800329a:	e029      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	3304      	adds	r3, #4
 80032a2:	623b      	str	r3, [r7, #32]
          break;
 80032a4:	e024      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	3308      	adds	r3, #8
 80032ac:	623b      	str	r3, [r7, #32]
          break;
 80032ae:	e01f      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	330c      	adds	r3, #12
 80032b6:	623b      	str	r3, [r7, #32]
          break;
 80032b8:	e01a      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032c2:	2304      	movs	r3, #4
 80032c4:	623b      	str	r3, [r7, #32]
          break;
 80032c6:	e013      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d0:	2308      	movs	r3, #8
 80032d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	611a      	str	r2, [r3, #16]
          break;
 80032da:	e009      	b.n	80032f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032dc:	2308      	movs	r3, #8
 80032de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	615a      	str	r2, [r3, #20]
          break;
 80032e6:	e003      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032e8:	2300      	movs	r3, #0
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          break;
 80032ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2bff      	cmp	r3, #255	@ 0xff
 80032f4:	d801      	bhi.n	80032fa <HAL_GPIO_Init+0x13a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	e001      	b.n	80032fe <HAL_GPIO_Init+0x13e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2bff      	cmp	r3, #255	@ 0xff
 8003304:	d802      	bhi.n	800330c <HAL_GPIO_Init+0x14c>
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	e002      	b.n	8003312 <HAL_GPIO_Init+0x152>
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	3b08      	subs	r3, #8
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	210f      	movs	r1, #15
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	6a39      	ldr	r1, [r7, #32]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80b1 	beq.w	80034a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003340:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <HAL_GPIO_Init+0x2b8>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4a4c      	ldr	r2, [pc, #304]	@ (8003478 <HAL_GPIO_Init+0x2b8>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6193      	str	r3, [r2, #24]
 800334c:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_GPIO_Init+0x2b8>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003358:	4a48      	ldr	r2, [pc, #288]	@ (800347c <HAL_GPIO_Init+0x2bc>)
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	3302      	adds	r3, #2
 8003360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	220f      	movs	r2, #15
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a40      	ldr	r2, [pc, #256]	@ (8003480 <HAL_GPIO_Init+0x2c0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_GPIO_Init+0x1ec>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3f      	ldr	r2, [pc, #252]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00d      	beq.n	80033a8 <HAL_GPIO_Init+0x1e8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3e      	ldr	r2, [pc, #248]	@ (8003488 <HAL_GPIO_Init+0x2c8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <HAL_GPIO_Init+0x1e4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	@ (800348c <HAL_GPIO_Init+0x2cc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_GPIO_Init+0x1e0>
 800339c:	2303      	movs	r3, #3
 800339e:	e006      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033ac:	2300      	movs	r3, #0
 80033ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033be:	492f      	ldr	r1, [pc, #188]	@ (800347c <HAL_GPIO_Init+0x2bc>)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	492c      	ldr	r1, [pc, #176]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	4928      	ldr	r1, [pc, #160]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4922      	ldr	r1, [pc, #136]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800340e:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	43db      	mvns	r3, r3
 8003416:	491e      	ldr	r1, [pc, #120]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003418:	4013      	ands	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4918      	ldr	r1, [pc, #96]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003436:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	43db      	mvns	r3, r3
 800343e:	4914      	ldr	r1, [pc, #80]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003440:	4013      	ands	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d021      	beq.n	8003494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	490e      	ldr	r1, [pc, #56]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e021      	b.n	80034a2 <HAL_GPIO_Init+0x2e2>
 800345e:	bf00      	nop
 8003460:	10320000 	.word	0x10320000
 8003464:	10310000 	.word	0x10310000
 8003468:	10220000 	.word	0x10220000
 800346c:	10210000 	.word	0x10210000
 8003470:	10120000 	.word	0x10120000
 8003474:	10110000 	.word	0x10110000
 8003478:	40021000 	.word	0x40021000
 800347c:	40010000 	.word	0x40010000
 8003480:	40010800 	.word	0x40010800
 8003484:	40010c00 	.word	0x40010c00
 8003488:	40011000 	.word	0x40011000
 800348c:	40011400 	.word	0x40011400
 8003490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	43db      	mvns	r3, r3
 800349c:	4909      	ldr	r1, [pc, #36]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 800349e:	4013      	ands	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	3301      	adds	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f47f ae8e 	bne.w	80031d4 <HAL_GPIO_Init+0x14>
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	372c      	adds	r7, #44	@ 0x2c
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40010400 	.word	0x40010400

080034c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e001      	b.n	80034ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	807b      	strh	r3, [r7, #2]
 8003502:	4613      	mov	r3, r2
 8003504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003506:	787b      	ldrb	r3, [r7, #1]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350c:	887a      	ldrh	r2, [r7, #2]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003512:	e003      	b.n	800351c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	041a      	lsls	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	611a      	str	r2, [r3, #16]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
	...

08003528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e12b      	b.n	8003792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fe9a 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	@ 0x24
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800357a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800358a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800358c:	f001 f832 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8003590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a81      	ldr	r2, [pc, #516]	@ (800379c <HAL_I2C_Init+0x274>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d807      	bhi.n	80035ac <HAL_I2C_Init+0x84>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a80      	ldr	r2, [pc, #512]	@ (80037a0 <HAL_I2C_Init+0x278>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bf94      	ite	ls
 80035a4:	2301      	movls	r3, #1
 80035a6:	2300      	movhi	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e006      	b.n	80035ba <HAL_I2C_Init+0x92>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a7d      	ldr	r2, [pc, #500]	@ (80037a4 <HAL_I2C_Init+0x27c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf94      	ite	ls
 80035b4:	2301      	movls	r3, #1
 80035b6:	2300      	movhi	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0e7      	b.n	8003792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a78      	ldr	r2, [pc, #480]	@ (80037a8 <HAL_I2C_Init+0x280>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0c9b      	lsrs	r3, r3, #18
 80035cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a6a      	ldr	r2, [pc, #424]	@ (800379c <HAL_I2C_Init+0x274>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d802      	bhi.n	80035fc <HAL_I2C_Init+0xd4>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3301      	adds	r3, #1
 80035fa:	e009      	b.n	8003610 <HAL_I2C_Init+0xe8>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	4a69      	ldr	r2, [pc, #420]	@ (80037ac <HAL_I2C_Init+0x284>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	3301      	adds	r3, #1
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003622:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	495c      	ldr	r1, [pc, #368]	@ (800379c <HAL_I2C_Init+0x274>)
 800362c:	428b      	cmp	r3, r1
 800362e:	d819      	bhi.n	8003664 <HAL_I2C_Init+0x13c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e59      	subs	r1, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fbb1 f3f3 	udiv	r3, r1, r3
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003644:	400b      	ands	r3, r1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_I2C_Init+0x138>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e59      	subs	r1, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fbb1 f3f3 	udiv	r3, r1, r3
 8003658:	3301      	adds	r3, #1
 800365a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365e:	e051      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 8003660:	2304      	movs	r3, #4
 8003662:	e04f      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <HAL_I2C_Init+0x168>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	440b      	add	r3, r1
 800367a:	fbb0 f3f3 	udiv	r3, r0, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e012      	b.n	80036b6 <HAL_I2C_Init+0x18e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	0099      	lsls	r1, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Init+0x196>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e022      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10e      	bne.n	80036e4 <HAL_I2C_Init+0x1bc>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1e58      	subs	r0, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	440b      	add	r3, r1
 80036d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e2:	e00f      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1e58      	subs	r0, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	0099      	lsls	r1, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	6809      	ldr	r1, [r1, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6911      	ldr	r1, [r2, #16]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	430b      	orrs	r3, r1
 8003746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	000186a0 	.word	0x000186a0
 80037a0:	001e847f 	.word	0x001e847f
 80037a4:	003d08ff 	.word	0x003d08ff
 80037a8:	431bde83 	.word	0x431bde83
 80037ac:	10624dd3 	.word	0x10624dd3

080037b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
 80037c0:	4613      	mov	r3, r2
 80037c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff fb0e 	bl	8002de4 <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	f040 80e0 	bne.w	8003998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2319      	movs	r3, #25
 80037de:	2201      	movs	r2, #1
 80037e0:	4970      	ldr	r1, [pc, #448]	@ (80039a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f964 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0d3      	b.n	800399a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_I2C_Master_Transmit+0x50>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e0cc      	b.n	800399a <HAL_I2C_Master_Transmit+0x1ea>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d007      	beq.n	8003826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2221      	movs	r2, #33	@ 0x21
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2210      	movs	r2, #16
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	893a      	ldrh	r2, [r7, #8]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a50      	ldr	r2, [pc, #320]	@ (80039a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003868:	8979      	ldrh	r1, [r7, #10]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f89c 	bl	80039ac <I2C_MasterRequestWrite>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e08d      	b.n	800399a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003894:	e066      	b.n	8003964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	6a39      	ldr	r1, [r7, #32]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fa22 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d107      	bne.n	80038be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06b      	b.n	800399a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d11b      	bne.n	8003938 <HAL_I2C_Master_Transmit+0x188>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6a39      	ldr	r1, [r7, #32]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fa19 	bl	8003d74 <I2C_WaitOnBTFFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	2b04      	cmp	r3, #4
 800394e:	d107      	bne.n	8003960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e01a      	b.n	800399a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d194      	bne.n	8003896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	00100002 	.word	0x00100002
 80039a8:	ffff0000 	.word	0xffff0000

080039ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	460b      	mov	r3, r1
 80039ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d006      	beq.n	80039d6 <I2C_MasterRequestWrite+0x2a>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d003      	beq.n	80039d6 <I2C_MasterRequestWrite+0x2a>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039d4:	d108      	bne.n	80039e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e00b      	b.n	8003a00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	2b12      	cmp	r3, #18
 80039ee:	d107      	bne.n	8003a00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f84f 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00d      	beq.n	8003a34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a26:	d103      	bne.n	8003a30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e035      	b.n	8003aa0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a3c:	d108      	bne.n	8003a50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a3e:	897b      	ldrh	r3, [r7, #10]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a4c:	611a      	str	r2, [r3, #16]
 8003a4e:	e01b      	b.n	8003a88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a50:	897b      	ldrh	r3, [r7, #10]
 8003a52:	11db      	asrs	r3, r3, #7
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f003 0306 	and.w	r3, r3, #6
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f063 030f 	orn	r3, r3, #15
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	490e      	ldr	r1, [pc, #56]	@ (8003aa8 <I2C_MasterRequestWrite+0xfc>)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f898 	bl	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e010      	b.n	8003aa0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4907      	ldr	r1, [pc, #28]	@ (8003aac <I2C_MasterRequestWrite+0x100>)
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f888 	bl	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	00010008 	.word	0x00010008
 8003aac:	00010002 	.word	0x00010002

08003ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac0:	e048      	b.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d044      	beq.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7ff f98b 	bl	8002de4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d139      	bne.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10d      	bne.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	43da      	mvns	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	e00c      	b.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d116      	bne.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e023      	b.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10d      	bne.n	8003b7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	43da      	mvns	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	e00c      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d093      	beq.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb2:	e071      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc2:	d123      	bne.n	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e067      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d041      	beq.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c14:	f7ff f8e6 	bl	8002de4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d136      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10c      	bne.n	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e00b      	b.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	43da      	mvns	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e021      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10c      	bne.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e00b      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f47f af6d 	bne.w	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf0:	e034      	b.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f886 	bl	8003e04 <I2C_IsAcknowledgeFailed>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e034      	b.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d028      	beq.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0a:	f7ff f86b 	bl	8002de4 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11d      	bne.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b80      	cmp	r3, #128	@ 0x80
 8003d2c:	d016      	beq.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e007      	b.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d66:	2b80      	cmp	r3, #128	@ 0x80
 8003d68:	d1c3      	bne.n	8003cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d80:	e034      	b.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f83e 	bl	8003e04 <I2C_IsAcknowledgeFailed>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e034      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d028      	beq.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7ff f823 	bl	8002de4 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11d      	bne.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d016      	beq.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d1c3      	bne.n	8003d82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d11b      	bne.n	8003e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e272      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8087 	beq.w	8003f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e80:	4b92      	ldr	r3, [pc, #584]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
 8003e98:	4b8c      	ldr	r3, [pc, #560]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x12c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d168      	bne.n	8003f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e24c      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x76>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e02e      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b7b      	ldr	r3, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b78      	ldr	r3, [pc, #480]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a77      	ldr	r2, [pc, #476]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0xbc>
 8003f02:	4b72      	ldr	r3, [pc, #456]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe ff52 	bl	8002de4 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe ff4e 	bl	8002de4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e200      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe4>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe ff3e 	bl	8002de4 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe ff3a 	bl	8002de4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1ec      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x10c>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
 8003fb2:	4b46      	ldr	r3, [pc, #280]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c0      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4939      	ldr	r1, [pc, #228]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fef3 	bl	8002de4 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe feef 	bl	8002de4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4927      	ldr	r1, [pc, #156]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe fed2 	bl	8002de4 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe fece 	bl	8002de4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e180      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03a      	beq.n	80040e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fe feb2 	bl	8002de4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fe feae 	bl	8002de4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e160      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f000 face 	bl	8004644 <RCC_Delay>
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7fe fe98 	bl	8002de4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fe fe94 	bl	8002de4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d908      	bls.n	80040d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e146      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	42420000 	.word	0x42420000
 80040d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b92      	ldr	r3, [pc, #584]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e9      	bne.n	80040b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a6 	beq.w	800423e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a87      	ldr	r2, [pc, #540]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b85      	ldr	r3, [pc, #532]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe fe55 	bl	8002de4 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe fe51 	bl	8002de4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e103      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x312>
 8004164:	4b6f      	ldr	r3, [pc, #444]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a6e      	ldr	r2, [pc, #440]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x334>
 800417a:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	4b67      	ldr	r3, [pc, #412]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a66      	ldr	r2, [pc, #408]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x356>
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a60      	ldr	r2, [pc, #384]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6213      	str	r3, [r2, #32]
 80041c2:	4b58      	ldr	r3, [pc, #352]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a57      	ldr	r2, [pc, #348]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fe fe05 	bl	8002de4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe fe01 	bl	8002de4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0b1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x37e>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fe fdef 	bl	8002de4 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe fdeb 	bl	8002de4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e09b      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8087 	beq.w	8004356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d061      	beq.n	8004318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d146      	bne.n	80042ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fe fdbf 	bl	8002de4 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fe fdbb 	bl	8002de4 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e06d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004292:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4921      	ldr	r1, [pc, #132]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a19      	ldr	r1, [r3, #32]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	430b      	orrs	r3, r1
 80042b6:	491b      	ldr	r1, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fe fd8f 	bl	8002de4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fe fd8b 	bl	8002de4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042dc:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x46a>
 80042e8:	e035      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe fd78 	bl	8002de4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fe fd74 	bl	8002de4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e026      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x498>
 8004316:	e01e      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e019      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_OscConfig+0x500>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0d0      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b67      	ldr	r3, [pc, #412]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4965      	ldr	r1, [pc, #404]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a58      	ldr	r2, [pc, #352]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80043e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e073      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4936      	ldr	r1, [pc, #216]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fe fcc6 	bl	8002de4 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fe fcc2 	bl	8002de4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e053      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d210      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0207 	bic.w	r2, r3, #7
 800449a:	4922      	ldr	r1, [pc, #136]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044de:	4b12      	ldr	r3, [pc, #72]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 f821 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	@ (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <HAL_RCC_ClockConfig+0x1cc>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_ClockConfig+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fc24 	bl	8002d60 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	0800a5f0 	.word	0x0800a5f0
 8004530:	20000004 	.word	0x20000004
 8004534:	20000008 	.word	0x20000008

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e027      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800456a:	613b      	str	r3, [r7, #16]
      break;
 800456c:	e027      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0c9b      	lsrs	r3, r3, #18
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0c5b      	lsrs	r3, r3, #17
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800459a:	fb03 f202 	mul.w	r2, r3, r2
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	613b      	str	r3, [r7, #16]
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ba:	613b      	str	r3, [r7, #16]
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	693b      	ldr	r3, [r7, #16]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	0800a608 	.word	0x0800a608
 80045d8:	0800a618 	.word	0x0800a618
 80045dc:	003d0900 	.word	0x003d0900

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b02      	ldr	r3, [pc, #8]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	20000004 	.word	0x20000004

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f8:	f7ff fff2 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	0800a600 	.word	0x0800a600

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004620:	f7ff ffde 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	0800a600 	.word	0x0800a600

08004644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <RCC_Delay+0x34>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	@ (800467c <RCC_Delay+0x38>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004660:	bf00      	nop
  }
  while (Delay --);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f9      	bne.n	8004660 <RCC_Delay+0x1c>
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	20000004 	.word	0x20000004
 800467c:	10624dd3 	.word	0x10624dd3

08004680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e042      	b.n	8004718 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe fa8e 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	@ 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fdb7 	bl	8005238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	d175      	bne.n	800482c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Transmit+0x2c>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e06e      	b.n	800482e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2221      	movs	r2, #33	@ 0x21
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475e:	f7fe fb41 	bl	8002de4 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004778:	d108      	bne.n	800478c <HAL_UART_Transmit+0x6c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	e003      	b.n	8004794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004794:	e02e      	b.n	80047f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb1c 	bl	8004dde <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e03a      	b.n	800482e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	3302      	adds	r3, #2
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	e007      	b.n	80047e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1cb      	bne.n	8004796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	2140      	movs	r1, #64	@ 0x40
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fae8 	bl	8004dde <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b20      	cmp	r3, #32
 800484e:	d112      	bne.n	8004876 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UART_Receive_IT+0x26>
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e00b      	b.n	8004878 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	461a      	mov	r2, r3
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fb0f 	bl	8004e90 <UART_Start_Receive_IT>
 8004872:	4603      	mov	r3, r0
 8004874:	e000      	b.n	8004878 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0ba      	sub	sp, #232	@ 0xe8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80048be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_UART_IRQHandler+0x66>
 80048d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fbec 	bl	80050bc <UART_Receive_IT>
      return;
 80048e4:	e25b      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80de 	beq.w	8004aac <HAL_UART_IRQHandler+0x22c>
 80048f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004900:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80d1 	beq.w	8004aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_UART_IRQHandler+0xae>
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_UART_IRQHandler+0xd2>
 800493a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f043 0202 	orr.w	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xf6>
 800495e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d011      	beq.n	80049a6 <HAL_UART_IRQHandler+0x126>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 81f2 	beq.w	8004d94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_UART_IRQHandler+0x14e>
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fb77 	bl	80050bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_UART_IRQHandler+0x17a>
 80049f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d04f      	beq.n	8004a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa81 	bl	8004f02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d041      	beq.n	8004a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3314      	adds	r3, #20
 8004a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1d9      	bne.n	8004a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d013      	beq.n	8004a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a66:	4a7e      	ldr	r2, [pc, #504]	@ (8004c60 <HAL_UART_IRQHandler+0x3e0>)
 8004a68:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fb2e 	bl	80030d0 <HAL_DMA_Abort_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a84:	4610      	mov	r0, r2
 8004a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	e00e      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f993 	bl	8004db6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	e00a      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f98f 	bl	8004db6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	e006      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f98b 	bl	8004db6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004aa6:	e175      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	bf00      	nop
    return;
 8004aaa:	e173      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 814f 	bne.w	8004d54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8148 	beq.w	8004d54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8141 	beq.w	8004d54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80b6 	beq.w	8004c64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8145 	beq.w	8004d98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b16:	429a      	cmp	r2, r3
 8004b18:	f080 813e 	bcs.w	8004d98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	f000 8088 	beq.w	8004c40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b5c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1d9      	bne.n	8004b30 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ba0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ba4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e1      	bne.n	8004b7c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bdc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004be2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e3      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c24:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e3      	bne.n	8004bfe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fa0d 	bl	800305a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8b6 	bl	8004dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c5c:	e09c      	b.n	8004d98 <HAL_UART_IRQHandler+0x518>
 8004c5e:	bf00      	nop
 8004c60:	08004fc7 	.word	0x08004fc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 808e 	beq.w	8004d9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8089 	beq.w	8004d9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004cae:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e3      	bne.n	8004c8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ce6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d2c:	61fa      	str	r2, [r7, #28]
 8004d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f83b 	bl	8004dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d52:	e023      	b.n	8004d9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <HAL_UART_IRQHandler+0x4f4>
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f93e 	bl	8004fee <UART_Transmit_IT>
    return;
 8004d72:	e014      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <HAL_UART_IRQHandler+0x51e>
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f97d 	bl	800508c <UART_EndTransmit_IT>
    return;
 8004d92:	e004      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d94:	bf00      	nop
 8004d96:	e002      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d9c:	bf00      	nop
  }
}
 8004d9e:	37e8      	adds	r7, #232	@ 0xe8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	e03b      	b.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d037      	beq.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df8:	f7fd fff4 	bl	8002de4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e03a      	b.n	8004e88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b80      	cmp	r3, #128	@ 0x80
 8004e24:	d020      	beq.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b40      	cmp	r3, #64	@ 0x40
 8004e2a:	d01d      	beq.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d116      	bne.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f856 	bl	8004f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e00f      	b.n	8004e88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d0b4      	beq.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	88fa      	ldrh	r2, [r7, #6]
 8004ea8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2222      	movs	r2, #34	@ 0x22
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ed4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0220 	orr.w	r2, r2, #32
 8004ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b095      	sub	sp, #84	@ 0x54
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d119      	bne.n	8004fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9a:	61ba      	str	r2, [r7, #24]
 8004f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fbc:	bf00      	nop
 8004fbe:	3754      	adds	r7, #84	@ 0x54
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fee8 	bl	8004db6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b21      	cmp	r3, #33	@ 0x21
 8005000:	d13e      	bne.n	8005080 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500a:	d114      	bne.n	8005036 <UART_Transmit_IT+0x48>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d110      	bne.n	8005036 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005028:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	1c9a      	adds	r2, r3, #2
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	621a      	str	r2, [r3, #32]
 8005034:	e008      	b.n	8005048 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	1c59      	adds	r1, r3, #1
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6211      	str	r1, [r2, #32]
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4619      	mov	r1, r3
 8005056:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800506a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800507a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e000      	b.n	8005082 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fe79 	bl	8004da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	@ 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b22      	cmp	r3, #34	@ 0x22
 80050ce:	f040 80ae 	bne.w	800522e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050da:	d117      	bne.n	800510c <UART_Receive_IT+0x50>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	1c9a      	adds	r2, r3, #2
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	629a      	str	r2, [r3, #40]	@ 0x28
 800510a:	e026      	b.n	800515a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511e:	d007      	beq.n	8005130 <UART_Receive_IT+0x74>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <UART_Receive_IT+0x82>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e008      	b.n	8005150 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800514a:	b2da      	uxtb	r2, r3
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4619      	mov	r1, r3
 8005168:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800516a:	2b00      	cmp	r3, #0
 800516c:	d15d      	bne.n	800522a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0220 	bic.w	r2, r2, #32
 800517c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800518c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d135      	bne.n	8005220 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f023 0310 	bic.w	r3, r3, #16
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051da:	623a      	str	r2, [r7, #32]
 80051dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	69f9      	ldr	r1, [r7, #28]
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e5      	bne.n	80051ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d10a      	bne.n	8005212 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff fdd5 	bl	8004dc8 <HAL_UARTEx_RxEventCallback>
 800521e:	e002      	b.n	8005226 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc fbe3 	bl	80019ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e002      	b.n	8005230 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3730      	adds	r7, #48	@ 0x30
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005272:	f023 030c 	bic.w	r3, r3, #12
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	430b      	orrs	r3, r1
 800527e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2c      	ldr	r2, [pc, #176]	@ (800534c <UART_SetConfig+0x114>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d103      	bne.n	80052a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7ff f9bc 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	e002      	b.n	80052ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7ff f9a4 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80052ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009a      	lsls	r2, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	4a22      	ldr	r2, [pc, #136]	@ (8005350 <UART_SetConfig+0x118>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	0119      	lsls	r1, r3, #4
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009a      	lsls	r2, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005350 <UART_SetConfig+0x118>)
 80052e6:	fba3 0302 	umull	r0, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2064      	movs	r0, #100	@ 0x64
 80052ee:	fb00 f303 	mul.w	r3, r0, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	3332      	adds	r3, #50	@ 0x32
 80052f8:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <UART_SetConfig+0x118>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005304:	4419      	add	r1, r3
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009a      	lsls	r2, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	fbb2 f2f3 	udiv	r2, r2, r3
 800531c:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <UART_SetConfig+0x118>)
 800531e:	fba3 0302 	umull	r0, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2064      	movs	r0, #100	@ 0x64
 8005326:	fb00 f303 	mul.w	r3, r0, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	@ 0x32
 8005330:	4a07      	ldr	r2, [pc, #28]	@ (8005350 <UART_SetConfig+0x118>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	440a      	add	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40013800 	.word	0x40013800
 8005350:	51eb851f 	.word	0x51eb851f

08005354 <atoi>:
 8005354:	220a      	movs	r2, #10
 8005356:	2100      	movs	r1, #0
 8005358:	f000 b87c 	b.w	8005454 <strtol>

0800535c <_strtol_l.isra.0>:
 800535c:	2b24      	cmp	r3, #36	@ 0x24
 800535e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005362:	4686      	mov	lr, r0
 8005364:	4690      	mov	r8, r2
 8005366:	d801      	bhi.n	800536c <_strtol_l.isra.0+0x10>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d106      	bne.n	800537a <_strtol_l.isra.0+0x1e>
 800536c:	f001 f87a 	bl	8006464 <__errno>
 8005370:	2316      	movs	r3, #22
 8005372:	6003      	str	r3, [r0, #0]
 8005374:	2000      	movs	r0, #0
 8005376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537a:	460d      	mov	r5, r1
 800537c:	4833      	ldr	r0, [pc, #204]	@ (800544c <_strtol_l.isra.0+0xf0>)
 800537e:	462a      	mov	r2, r5
 8005380:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005384:	5d06      	ldrb	r6, [r0, r4]
 8005386:	f016 0608 	ands.w	r6, r6, #8
 800538a:	d1f8      	bne.n	800537e <_strtol_l.isra.0+0x22>
 800538c:	2c2d      	cmp	r4, #45	@ 0x2d
 800538e:	d110      	bne.n	80053b2 <_strtol_l.isra.0+0x56>
 8005390:	2601      	movs	r6, #1
 8005392:	782c      	ldrb	r4, [r5, #0]
 8005394:	1c95      	adds	r5, r2, #2
 8005396:	f033 0210 	bics.w	r2, r3, #16
 800539a:	d115      	bne.n	80053c8 <_strtol_l.isra.0+0x6c>
 800539c:	2c30      	cmp	r4, #48	@ 0x30
 800539e:	d10d      	bne.n	80053bc <_strtol_l.isra.0+0x60>
 80053a0:	782a      	ldrb	r2, [r5, #0]
 80053a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053a6:	2a58      	cmp	r2, #88	@ 0x58
 80053a8:	d108      	bne.n	80053bc <_strtol_l.isra.0+0x60>
 80053aa:	786c      	ldrb	r4, [r5, #1]
 80053ac:	3502      	adds	r5, #2
 80053ae:	2310      	movs	r3, #16
 80053b0:	e00a      	b.n	80053c8 <_strtol_l.isra.0+0x6c>
 80053b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80053b4:	bf04      	itt	eq
 80053b6:	782c      	ldrbeq	r4, [r5, #0]
 80053b8:	1c95      	addeq	r5, r2, #2
 80053ba:	e7ec      	b.n	8005396 <_strtol_l.isra.0+0x3a>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f6      	bne.n	80053ae <_strtol_l.isra.0+0x52>
 80053c0:	2c30      	cmp	r4, #48	@ 0x30
 80053c2:	bf14      	ite	ne
 80053c4:	230a      	movne	r3, #10
 80053c6:	2308      	moveq	r3, #8
 80053c8:	2200      	movs	r2, #0
 80053ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053d2:	fbbc f9f3 	udiv	r9, ip, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80053dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053e0:	2f09      	cmp	r7, #9
 80053e2:	d80f      	bhi.n	8005404 <_strtol_l.isra.0+0xa8>
 80053e4:	463c      	mov	r4, r7
 80053e6:	42a3      	cmp	r3, r4
 80053e8:	dd1b      	ble.n	8005422 <_strtol_l.isra.0+0xc6>
 80053ea:	1c57      	adds	r7, r2, #1
 80053ec:	d007      	beq.n	80053fe <_strtol_l.isra.0+0xa2>
 80053ee:	4581      	cmp	r9, r0
 80053f0:	d314      	bcc.n	800541c <_strtol_l.isra.0+0xc0>
 80053f2:	d101      	bne.n	80053f8 <_strtol_l.isra.0+0x9c>
 80053f4:	45a2      	cmp	sl, r4
 80053f6:	db11      	blt.n	800541c <_strtol_l.isra.0+0xc0>
 80053f8:	2201      	movs	r2, #1
 80053fa:	fb00 4003 	mla	r0, r0, r3, r4
 80053fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005402:	e7eb      	b.n	80053dc <_strtol_l.isra.0+0x80>
 8005404:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005408:	2f19      	cmp	r7, #25
 800540a:	d801      	bhi.n	8005410 <_strtol_l.isra.0+0xb4>
 800540c:	3c37      	subs	r4, #55	@ 0x37
 800540e:	e7ea      	b.n	80053e6 <_strtol_l.isra.0+0x8a>
 8005410:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005414:	2f19      	cmp	r7, #25
 8005416:	d804      	bhi.n	8005422 <_strtol_l.isra.0+0xc6>
 8005418:	3c57      	subs	r4, #87	@ 0x57
 800541a:	e7e4      	b.n	80053e6 <_strtol_l.isra.0+0x8a>
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	e7ed      	b.n	80053fe <_strtol_l.isra.0+0xa2>
 8005422:	1c53      	adds	r3, r2, #1
 8005424:	d108      	bne.n	8005438 <_strtol_l.isra.0+0xdc>
 8005426:	2322      	movs	r3, #34	@ 0x22
 8005428:	4660      	mov	r0, ip
 800542a:	f8ce 3000 	str.w	r3, [lr]
 800542e:	f1b8 0f00 	cmp.w	r8, #0
 8005432:	d0a0      	beq.n	8005376 <_strtol_l.isra.0+0x1a>
 8005434:	1e69      	subs	r1, r5, #1
 8005436:	e006      	b.n	8005446 <_strtol_l.isra.0+0xea>
 8005438:	b106      	cbz	r6, 800543c <_strtol_l.isra.0+0xe0>
 800543a:	4240      	negs	r0, r0
 800543c:	f1b8 0f00 	cmp.w	r8, #0
 8005440:	d099      	beq.n	8005376 <_strtol_l.isra.0+0x1a>
 8005442:	2a00      	cmp	r2, #0
 8005444:	d1f6      	bne.n	8005434 <_strtol_l.isra.0+0xd8>
 8005446:	f8c8 1000 	str.w	r1, [r8]
 800544a:	e794      	b.n	8005376 <_strtol_l.isra.0+0x1a>
 800544c:	0800a61b 	.word	0x0800a61b

08005450 <_strtol_r>:
 8005450:	f7ff bf84 	b.w	800535c <_strtol_l.isra.0>

08005454 <strtol>:
 8005454:	4613      	mov	r3, r2
 8005456:	460a      	mov	r2, r1
 8005458:	4601      	mov	r1, r0
 800545a:	4802      	ldr	r0, [pc, #8]	@ (8005464 <strtol+0x10>)
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f7ff bf7d 	b.w	800535c <_strtol_l.isra.0>
 8005462:	bf00      	nop
 8005464:	2000001c 	.word	0x2000001c

08005468 <__cvt>:
 8005468:	2b00      	cmp	r3, #0
 800546a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546e:	461d      	mov	r5, r3
 8005470:	bfbb      	ittet	lt
 8005472:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005476:	461d      	movlt	r5, r3
 8005478:	2300      	movge	r3, #0
 800547a:	232d      	movlt	r3, #45	@ 0x2d
 800547c:	b088      	sub	sp, #32
 800547e:	4614      	mov	r4, r2
 8005480:	bfb8      	it	lt
 8005482:	4614      	movlt	r4, r2
 8005484:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005486:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005488:	7013      	strb	r3, [r2, #0]
 800548a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800548c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005490:	f023 0820 	bic.w	r8, r3, #32
 8005494:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005498:	d005      	beq.n	80054a6 <__cvt+0x3e>
 800549a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800549e:	d100      	bne.n	80054a2 <__cvt+0x3a>
 80054a0:	3601      	adds	r6, #1
 80054a2:	2302      	movs	r3, #2
 80054a4:	e000      	b.n	80054a8 <__cvt+0x40>
 80054a6:	2303      	movs	r3, #3
 80054a8:	aa07      	add	r2, sp, #28
 80054aa:	9204      	str	r2, [sp, #16]
 80054ac:	aa06      	add	r2, sp, #24
 80054ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054b2:	e9cd 3600 	strd	r3, r6, [sp]
 80054b6:	4622      	mov	r2, r4
 80054b8:	462b      	mov	r3, r5
 80054ba:	f001 f89d 	bl	80065f8 <_dtoa_r>
 80054be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054c2:	4607      	mov	r7, r0
 80054c4:	d119      	bne.n	80054fa <__cvt+0x92>
 80054c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054c8:	07db      	lsls	r3, r3, #31
 80054ca:	d50e      	bpl.n	80054ea <__cvt+0x82>
 80054cc:	eb00 0906 	add.w	r9, r0, r6
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fb fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80054dc:	b108      	cbz	r0, 80054e2 <__cvt+0x7a>
 80054de:	f8cd 901c 	str.w	r9, [sp, #28]
 80054e2:	2230      	movs	r2, #48	@ 0x30
 80054e4:	9b07      	ldr	r3, [sp, #28]
 80054e6:	454b      	cmp	r3, r9
 80054e8:	d31e      	bcc.n	8005528 <__cvt+0xc0>
 80054ea:	4638      	mov	r0, r7
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80054f0:	1bdb      	subs	r3, r3, r7
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	b008      	add	sp, #32
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054fe:	eb00 0906 	add.w	r9, r0, r6
 8005502:	d1e5      	bne.n	80054d0 <__cvt+0x68>
 8005504:	7803      	ldrb	r3, [r0, #0]
 8005506:	2b30      	cmp	r3, #48	@ 0x30
 8005508:	d10a      	bne.n	8005520 <__cvt+0xb8>
 800550a:	2200      	movs	r2, #0
 800550c:	2300      	movs	r3, #0
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	f7fb fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8005516:	b918      	cbnz	r0, 8005520 <__cvt+0xb8>
 8005518:	f1c6 0601 	rsb	r6, r6, #1
 800551c:	f8ca 6000 	str.w	r6, [sl]
 8005520:	f8da 3000 	ldr.w	r3, [sl]
 8005524:	4499      	add	r9, r3
 8005526:	e7d3      	b.n	80054d0 <__cvt+0x68>
 8005528:	1c59      	adds	r1, r3, #1
 800552a:	9107      	str	r1, [sp, #28]
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e7d9      	b.n	80054e4 <__cvt+0x7c>

08005530 <__exponent>:
 8005530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005532:	2900      	cmp	r1, #0
 8005534:	bfb6      	itet	lt
 8005536:	232d      	movlt	r3, #45	@ 0x2d
 8005538:	232b      	movge	r3, #43	@ 0x2b
 800553a:	4249      	neglt	r1, r1
 800553c:	2909      	cmp	r1, #9
 800553e:	7002      	strb	r2, [r0, #0]
 8005540:	7043      	strb	r3, [r0, #1]
 8005542:	dd29      	ble.n	8005598 <__exponent+0x68>
 8005544:	f10d 0307 	add.w	r3, sp, #7
 8005548:	461d      	mov	r5, r3
 800554a:	270a      	movs	r7, #10
 800554c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005550:	461a      	mov	r2, r3
 8005552:	fb07 1416 	mls	r4, r7, r6, r1
 8005556:	3430      	adds	r4, #48	@ 0x30
 8005558:	f802 4c01 	strb.w	r4, [r2, #-1]
 800555c:	460c      	mov	r4, r1
 800555e:	2c63      	cmp	r4, #99	@ 0x63
 8005560:	4631      	mov	r1, r6
 8005562:	f103 33ff 	add.w	r3, r3, #4294967295
 8005566:	dcf1      	bgt.n	800554c <__exponent+0x1c>
 8005568:	3130      	adds	r1, #48	@ 0x30
 800556a:	1e94      	subs	r4, r2, #2
 800556c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005570:	4623      	mov	r3, r4
 8005572:	1c41      	adds	r1, r0, #1
 8005574:	42ab      	cmp	r3, r5
 8005576:	d30a      	bcc.n	800558e <__exponent+0x5e>
 8005578:	f10d 0309 	add.w	r3, sp, #9
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	42ac      	cmp	r4, r5
 8005580:	bf88      	it	hi
 8005582:	2300      	movhi	r3, #0
 8005584:	3302      	adds	r3, #2
 8005586:	4403      	add	r3, r0
 8005588:	1a18      	subs	r0, r3, r0
 800558a:	b003      	add	sp, #12
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005592:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005596:	e7ed      	b.n	8005574 <__exponent+0x44>
 8005598:	2330      	movs	r3, #48	@ 0x30
 800559a:	3130      	adds	r1, #48	@ 0x30
 800559c:	7083      	strb	r3, [r0, #2]
 800559e:	70c1      	strb	r1, [r0, #3]
 80055a0:	1d03      	adds	r3, r0, #4
 80055a2:	e7f1      	b.n	8005588 <__exponent+0x58>

080055a4 <_printf_float>:
 80055a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	b091      	sub	sp, #68	@ 0x44
 80055aa:	460c      	mov	r4, r1
 80055ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80055b0:	4616      	mov	r6, r2
 80055b2:	461f      	mov	r7, r3
 80055b4:	4605      	mov	r5, r0
 80055b6:	f000 ff0b 	bl	80063d0 <_localeconv_r>
 80055ba:	6803      	ldr	r3, [r0, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	9308      	str	r3, [sp, #32]
 80055c0:	f7fa fdc6 	bl	8000150 <strlen>
 80055c4:	2300      	movs	r3, #0
 80055c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80055c8:	f8d8 3000 	ldr.w	r3, [r8]
 80055cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80055ce:	3307      	adds	r3, #7
 80055d0:	f023 0307 	bic.w	r3, r3, #7
 80055d4:	f103 0208 	add.w	r2, r3, #8
 80055d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055dc:	f8d4 b000 	ldr.w	fp, [r4]
 80055e0:	f8c8 2000 	str.w	r2, [r8]
 80055e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80055ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055fe:	4b9c      	ldr	r3, [pc, #624]	@ (8005870 <_printf_float+0x2cc>)
 8005600:	f7fb fa04 	bl	8000a0c <__aeabi_dcmpun>
 8005604:	bb70      	cbnz	r0, 8005664 <_printf_float+0xc0>
 8005606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800560a:	f04f 32ff 	mov.w	r2, #4294967295
 800560e:	4b98      	ldr	r3, [pc, #608]	@ (8005870 <_printf_float+0x2cc>)
 8005610:	f7fb f9de 	bl	80009d0 <__aeabi_dcmple>
 8005614:	bb30      	cbnz	r0, 8005664 <_printf_float+0xc0>
 8005616:	2200      	movs	r2, #0
 8005618:	2300      	movs	r3, #0
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fb f9cd 	bl	80009bc <__aeabi_dcmplt>
 8005622:	b110      	cbz	r0, 800562a <_printf_float+0x86>
 8005624:	232d      	movs	r3, #45	@ 0x2d
 8005626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800562a:	4a92      	ldr	r2, [pc, #584]	@ (8005874 <_printf_float+0x2d0>)
 800562c:	4b92      	ldr	r3, [pc, #584]	@ (8005878 <_printf_float+0x2d4>)
 800562e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005632:	bf8c      	ite	hi
 8005634:	4690      	movhi	r8, r2
 8005636:	4698      	movls	r8, r3
 8005638:	2303      	movs	r3, #3
 800563a:	f04f 0900 	mov.w	r9, #0
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	f02b 0304 	bic.w	r3, fp, #4
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	4633      	mov	r3, r6
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	9700      	str	r7, [sp, #0]
 800564e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005650:	f000 f9d4 	bl	80059fc <_printf_common>
 8005654:	3001      	adds	r0, #1
 8005656:	f040 8090 	bne.w	800577a <_printf_float+0x1d6>
 800565a:	f04f 30ff 	mov.w	r0, #4294967295
 800565e:	b011      	add	sp, #68	@ 0x44
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	4640      	mov	r0, r8
 800566a:	4649      	mov	r1, r9
 800566c:	f7fb f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8005670:	b148      	cbz	r0, 8005686 <_printf_float+0xe2>
 8005672:	464b      	mov	r3, r9
 8005674:	2b00      	cmp	r3, #0
 8005676:	bfb8      	it	lt
 8005678:	232d      	movlt	r3, #45	@ 0x2d
 800567a:	4a80      	ldr	r2, [pc, #512]	@ (800587c <_printf_float+0x2d8>)
 800567c:	bfb8      	it	lt
 800567e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005682:	4b7f      	ldr	r3, [pc, #508]	@ (8005880 <_printf_float+0x2dc>)
 8005684:	e7d3      	b.n	800562e <_printf_float+0x8a>
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	d13f      	bne.n	8005710 <_printf_float+0x16c>
 8005690:	2306      	movs	r3, #6
 8005692:	6063      	str	r3, [r4, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	9206      	str	r2, [sp, #24]
 800569e:	aa0e      	add	r2, sp, #56	@ 0x38
 80056a0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80056a4:	aa0d      	add	r2, sp, #52	@ 0x34
 80056a6:	9203      	str	r2, [sp, #12]
 80056a8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80056ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	4642      	mov	r2, r8
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4628      	mov	r0, r5
 80056b8:	464b      	mov	r3, r9
 80056ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80056bc:	f7ff fed4 	bl	8005468 <__cvt>
 80056c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056c2:	4680      	mov	r8, r0
 80056c4:	2947      	cmp	r1, #71	@ 0x47
 80056c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80056c8:	d128      	bne.n	800571c <_printf_float+0x178>
 80056ca:	1cc8      	adds	r0, r1, #3
 80056cc:	db02      	blt.n	80056d4 <_printf_float+0x130>
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	4299      	cmp	r1, r3
 80056d2:	dd40      	ble.n	8005756 <_printf_float+0x1b2>
 80056d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80056d8:	fa5f fa8a 	uxtb.w	sl, sl
 80056dc:	4652      	mov	r2, sl
 80056de:	3901      	subs	r1, #1
 80056e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80056e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80056e6:	f7ff ff23 	bl	8005530 <__exponent>
 80056ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056ec:	4681      	mov	r9, r0
 80056ee:	1813      	adds	r3, r2, r0
 80056f0:	2a01      	cmp	r2, #1
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	dc02      	bgt.n	80056fc <_printf_float+0x158>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	07d2      	lsls	r2, r2, #31
 80056fa:	d501      	bpl.n	8005700 <_printf_float+0x15c>
 80056fc:	3301      	adds	r3, #1
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005704:	2b00      	cmp	r3, #0
 8005706:	d09e      	beq.n	8005646 <_printf_float+0xa2>
 8005708:	232d      	movs	r3, #45	@ 0x2d
 800570a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800570e:	e79a      	b.n	8005646 <_printf_float+0xa2>
 8005710:	2947      	cmp	r1, #71	@ 0x47
 8005712:	d1bf      	bne.n	8005694 <_printf_float+0xf0>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1bd      	bne.n	8005694 <_printf_float+0xf0>
 8005718:	2301      	movs	r3, #1
 800571a:	e7ba      	b.n	8005692 <_printf_float+0xee>
 800571c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005720:	d9dc      	bls.n	80056dc <_printf_float+0x138>
 8005722:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005726:	d118      	bne.n	800575a <_printf_float+0x1b6>
 8005728:	2900      	cmp	r1, #0
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	dd0b      	ble.n	8005746 <_printf_float+0x1a2>
 800572e:	6121      	str	r1, [r4, #16]
 8005730:	b913      	cbnz	r3, 8005738 <_printf_float+0x194>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	07d0      	lsls	r0, r2, #31
 8005736:	d502      	bpl.n	800573e <_printf_float+0x19a>
 8005738:	3301      	adds	r3, #1
 800573a:	440b      	add	r3, r1
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	f04f 0900 	mov.w	r9, #0
 8005742:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005744:	e7dc      	b.n	8005700 <_printf_float+0x15c>
 8005746:	b913      	cbnz	r3, 800574e <_printf_float+0x1aa>
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	07d2      	lsls	r2, r2, #31
 800574c:	d501      	bpl.n	8005752 <_printf_float+0x1ae>
 800574e:	3302      	adds	r3, #2
 8005750:	e7f4      	b.n	800573c <_printf_float+0x198>
 8005752:	2301      	movs	r3, #1
 8005754:	e7f2      	b.n	800573c <_printf_float+0x198>
 8005756:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800575a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800575c:	4299      	cmp	r1, r3
 800575e:	db05      	blt.n	800576c <_printf_float+0x1c8>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	6121      	str	r1, [r4, #16]
 8005764:	07d8      	lsls	r0, r3, #31
 8005766:	d5ea      	bpl.n	800573e <_printf_float+0x19a>
 8005768:	1c4b      	adds	r3, r1, #1
 800576a:	e7e7      	b.n	800573c <_printf_float+0x198>
 800576c:	2900      	cmp	r1, #0
 800576e:	bfcc      	ite	gt
 8005770:	2201      	movgt	r2, #1
 8005772:	f1c1 0202 	rsble	r2, r1, #2
 8005776:	4413      	add	r3, r2
 8005778:	e7e0      	b.n	800573c <_printf_float+0x198>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	055a      	lsls	r2, r3, #21
 800577e:	d407      	bmi.n	8005790 <_printf_float+0x1ec>
 8005780:	6923      	ldr	r3, [r4, #16]
 8005782:	4642      	mov	r2, r8
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	d12b      	bne.n	80057e6 <_printf_float+0x242>
 800578e:	e764      	b.n	800565a <_printf_float+0xb6>
 8005790:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005794:	f240 80dc 	bls.w	8005950 <_printf_float+0x3ac>
 8005798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800579c:	2200      	movs	r2, #0
 800579e:	2300      	movs	r3, #0
 80057a0:	f7fb f902 	bl	80009a8 <__aeabi_dcmpeq>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d033      	beq.n	8005810 <_printf_float+0x26c>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	4a35      	ldr	r2, [pc, #212]	@ (8005884 <_printf_float+0x2e0>)
 80057b0:	47b8      	blx	r7
 80057b2:	3001      	adds	r0, #1
 80057b4:	f43f af51 	beq.w	800565a <_printf_float+0xb6>
 80057b8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80057bc:	4543      	cmp	r3, r8
 80057be:	db02      	blt.n	80057c6 <_printf_float+0x222>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	07d8      	lsls	r0, r3, #31
 80057c4:	d50f      	bpl.n	80057e6 <_printf_float+0x242>
 80057c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f af42 	beq.w	800565a <_printf_float+0xb6>
 80057d6:	f04f 0900 	mov.w	r9, #0
 80057da:	f108 38ff 	add.w	r8, r8, #4294967295
 80057de:	f104 0a1a 	add.w	sl, r4, #26
 80057e2:	45c8      	cmp	r8, r9
 80057e4:	dc09      	bgt.n	80057fa <_printf_float+0x256>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	079b      	lsls	r3, r3, #30
 80057ea:	f100 8102 	bmi.w	80059f2 <_printf_float+0x44e>
 80057ee:	68e0      	ldr	r0, [r4, #12]
 80057f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057f2:	4298      	cmp	r0, r3
 80057f4:	bfb8      	it	lt
 80057f6:	4618      	movlt	r0, r3
 80057f8:	e731      	b.n	800565e <_printf_float+0xba>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4652      	mov	r2, sl
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f af28 	beq.w	800565a <_printf_float+0xb6>
 800580a:	f109 0901 	add.w	r9, r9, #1
 800580e:	e7e8      	b.n	80057e2 <_printf_float+0x23e>
 8005810:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	dc38      	bgt.n	8005888 <_printf_float+0x2e4>
 8005816:	2301      	movs	r3, #1
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	4a19      	ldr	r2, [pc, #100]	@ (8005884 <_printf_float+0x2e0>)
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f af1a 	beq.w	800565a <_printf_float+0xb6>
 8005826:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800582a:	ea59 0303 	orrs.w	r3, r9, r3
 800582e:	d102      	bne.n	8005836 <_printf_float+0x292>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07d9      	lsls	r1, r3, #31
 8005834:	d5d7      	bpl.n	80057e6 <_printf_float+0x242>
 8005836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f af0a 	beq.w	800565a <_printf_float+0xb6>
 8005846:	f04f 0a00 	mov.w	sl, #0
 800584a:	f104 0b1a 	add.w	fp, r4, #26
 800584e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005850:	425b      	negs	r3, r3
 8005852:	4553      	cmp	r3, sl
 8005854:	dc01      	bgt.n	800585a <_printf_float+0x2b6>
 8005856:	464b      	mov	r3, r9
 8005858:	e793      	b.n	8005782 <_printf_float+0x1de>
 800585a:	2301      	movs	r3, #1
 800585c:	465a      	mov	r2, fp
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	f43f aef8 	beq.w	800565a <_printf_float+0xb6>
 800586a:	f10a 0a01 	add.w	sl, sl, #1
 800586e:	e7ee      	b.n	800584e <_printf_float+0x2aa>
 8005870:	7fefffff 	.word	0x7fefffff
 8005874:	0800a71f 	.word	0x0800a71f
 8005878:	0800a71b 	.word	0x0800a71b
 800587c:	0800a727 	.word	0x0800a727
 8005880:	0800a723 	.word	0x0800a723
 8005884:	0800a72b 	.word	0x0800a72b
 8005888:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800588a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800588e:	4553      	cmp	r3, sl
 8005890:	bfa8      	it	ge
 8005892:	4653      	movge	r3, sl
 8005894:	2b00      	cmp	r3, #0
 8005896:	4699      	mov	r9, r3
 8005898:	dc36      	bgt.n	8005908 <_printf_float+0x364>
 800589a:	f04f 0b00 	mov.w	fp, #0
 800589e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a2:	f104 021a 	add.w	r2, r4, #26
 80058a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058aa:	eba3 0309 	sub.w	r3, r3, r9
 80058ae:	455b      	cmp	r3, fp
 80058b0:	dc31      	bgt.n	8005916 <_printf_float+0x372>
 80058b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058b4:	459a      	cmp	sl, r3
 80058b6:	dc3a      	bgt.n	800592e <_printf_float+0x38a>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07da      	lsls	r2, r3, #31
 80058bc:	d437      	bmi.n	800592e <_printf_float+0x38a>
 80058be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058c0:	ebaa 0903 	sub.w	r9, sl, r3
 80058c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058c6:	ebaa 0303 	sub.w	r3, sl, r3
 80058ca:	4599      	cmp	r9, r3
 80058cc:	bfa8      	it	ge
 80058ce:	4699      	movge	r9, r3
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	dc33      	bgt.n	800593e <_printf_float+0x39a>
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058de:	f104 0b1a 	add.w	fp, r4, #26
 80058e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058e4:	ebaa 0303 	sub.w	r3, sl, r3
 80058e8:	eba3 0309 	sub.w	r3, r3, r9
 80058ec:	4543      	cmp	r3, r8
 80058ee:	f77f af7a 	ble.w	80057e6 <_printf_float+0x242>
 80058f2:	2301      	movs	r3, #1
 80058f4:	465a      	mov	r2, fp
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f aeac 	beq.w	800565a <_printf_float+0xb6>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	e7ec      	b.n	80058e2 <_printf_float+0x33e>
 8005908:	4642      	mov	r2, r8
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	d1c2      	bne.n	800589a <_printf_float+0x2f6>
 8005914:	e6a1      	b.n	800565a <_printf_float+0xb6>
 8005916:	2301      	movs	r3, #1
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	920a      	str	r2, [sp, #40]	@ 0x28
 800591e:	47b8      	blx	r7
 8005920:	3001      	adds	r0, #1
 8005922:	f43f ae9a 	beq.w	800565a <_printf_float+0xb6>
 8005926:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005928:	f10b 0b01 	add.w	fp, fp, #1
 800592c:	e7bb      	b.n	80058a6 <_printf_float+0x302>
 800592e:	4631      	mov	r1, r6
 8005930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	d1c0      	bne.n	80058be <_printf_float+0x31a>
 800593c:	e68d      	b.n	800565a <_printf_float+0xb6>
 800593e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005940:	464b      	mov	r3, r9
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	4442      	add	r2, r8
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	d1c3      	bne.n	80058d6 <_printf_float+0x332>
 800594e:	e684      	b.n	800565a <_printf_float+0xb6>
 8005950:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005954:	f1ba 0f01 	cmp.w	sl, #1
 8005958:	dc01      	bgt.n	800595e <_printf_float+0x3ba>
 800595a:	07db      	lsls	r3, r3, #31
 800595c:	d536      	bpl.n	80059cc <_printf_float+0x428>
 800595e:	2301      	movs	r3, #1
 8005960:	4642      	mov	r2, r8
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae76 	beq.w	800565a <_printf_float+0xb6>
 800596e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f ae6e 	beq.w	800565a <_printf_float+0xb6>
 800597e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005982:	2200      	movs	r2, #0
 8005984:	2300      	movs	r3, #0
 8005986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800598a:	f7fb f80d 	bl	80009a8 <__aeabi_dcmpeq>
 800598e:	b9c0      	cbnz	r0, 80059c2 <_printf_float+0x41e>
 8005990:	4653      	mov	r3, sl
 8005992:	f108 0201 	add.w	r2, r8, #1
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	d10c      	bne.n	80059ba <_printf_float+0x416>
 80059a0:	e65b      	b.n	800565a <_printf_float+0xb6>
 80059a2:	2301      	movs	r3, #1
 80059a4:	465a      	mov	r2, fp
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae54 	beq.w	800565a <_printf_float+0xb6>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	45d0      	cmp	r8, sl
 80059b8:	dbf3      	blt.n	80059a2 <_printf_float+0x3fe>
 80059ba:	464b      	mov	r3, r9
 80059bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059c0:	e6e0      	b.n	8005784 <_printf_float+0x1e0>
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	f104 0b1a 	add.w	fp, r4, #26
 80059ca:	e7f4      	b.n	80059b6 <_printf_float+0x412>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4642      	mov	r2, r8
 80059d0:	e7e1      	b.n	8005996 <_printf_float+0x3f2>
 80059d2:	2301      	movs	r3, #1
 80059d4:	464a      	mov	r2, r9
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f ae3c 	beq.w	800565a <_printf_float+0xb6>
 80059e2:	f108 0801 	add.w	r8, r8, #1
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80059ea:	1a5b      	subs	r3, r3, r1
 80059ec:	4543      	cmp	r3, r8
 80059ee:	dcf0      	bgt.n	80059d2 <_printf_float+0x42e>
 80059f0:	e6fd      	b.n	80057ee <_printf_float+0x24a>
 80059f2:	f04f 0800 	mov.w	r8, #0
 80059f6:	f104 0919 	add.w	r9, r4, #25
 80059fa:	e7f4      	b.n	80059e6 <_printf_float+0x442>

080059fc <_printf_common>:
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	4616      	mov	r6, r2
 8005a02:	4698      	mov	r8, r3
 8005a04:	688a      	ldr	r2, [r1, #8]
 8005a06:	690b      	ldr	r3, [r1, #16]
 8005a08:	4607      	mov	r7, r0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	bfb8      	it	lt
 8005a0e:	4613      	movlt	r3, r2
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a16:	460c      	mov	r4, r1
 8005a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a1c:	b10a      	cbz	r2, 8005a22 <_printf_common+0x26>
 8005a1e:	3301      	adds	r3, #1
 8005a20:	6033      	str	r3, [r6, #0]
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	0699      	lsls	r1, r3, #26
 8005a26:	bf42      	ittt	mi
 8005a28:	6833      	ldrmi	r3, [r6, #0]
 8005a2a:	3302      	addmi	r3, #2
 8005a2c:	6033      	strmi	r3, [r6, #0]
 8005a2e:	6825      	ldr	r5, [r4, #0]
 8005a30:	f015 0506 	ands.w	r5, r5, #6
 8005a34:	d106      	bne.n	8005a44 <_printf_common+0x48>
 8005a36:	f104 0a19 	add.w	sl, r4, #25
 8005a3a:	68e3      	ldr	r3, [r4, #12]
 8005a3c:	6832      	ldr	r2, [r6, #0]
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	42ab      	cmp	r3, r5
 8005a42:	dc2b      	bgt.n	8005a9c <_printf_common+0xa0>
 8005a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	3b00      	subs	r3, #0
 8005a4c:	bf18      	it	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	0692      	lsls	r2, r2, #26
 8005a52:	d430      	bmi.n	8005ab6 <_printf_common+0xba>
 8005a54:	4641      	mov	r1, r8
 8005a56:	4638      	mov	r0, r7
 8005a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a5c:	47c8      	blx	r9
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d023      	beq.n	8005aaa <_printf_common+0xae>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	6922      	ldr	r2, [r4, #16]
 8005a66:	f003 0306 	and.w	r3, r3, #6
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	bf14      	ite	ne
 8005a6e:	2500      	movne	r5, #0
 8005a70:	6833      	ldreq	r3, [r6, #0]
 8005a72:	f04f 0600 	mov.w	r6, #0
 8005a76:	bf08      	it	eq
 8005a78:	68e5      	ldreq	r5, [r4, #12]
 8005a7a:	f104 041a 	add.w	r4, r4, #26
 8005a7e:	bf08      	it	eq
 8005a80:	1aed      	subeq	r5, r5, r3
 8005a82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a86:	bf08      	it	eq
 8005a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	bfc4      	itt	gt
 8005a90:	1a9b      	subgt	r3, r3, r2
 8005a92:	18ed      	addgt	r5, r5, r3
 8005a94:	42b5      	cmp	r5, r6
 8005a96:	d11a      	bne.n	8005ace <_printf_common+0xd2>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e008      	b.n	8005aae <_printf_common+0xb2>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c8      	blx	r9
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d103      	bne.n	8005ab2 <_printf_common+0xb6>
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	3501      	adds	r5, #1
 8005ab4:	e7c1      	b.n	8005a3a <_printf_common+0x3e>
 8005ab6:	2030      	movs	r0, #48	@ 0x30
 8005ab8:	18e1      	adds	r1, r4, r3
 8005aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ac4:	4422      	add	r2, r4
 8005ac6:	3302      	adds	r3, #2
 8005ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005acc:	e7c2      	b.n	8005a54 <_printf_common+0x58>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	47c8      	blx	r9
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0e6      	beq.n	8005aaa <_printf_common+0xae>
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7d9      	b.n	8005a94 <_printf_common+0x98>

08005ae0 <_printf_i>:
 8005ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	7e0f      	ldrb	r7, [r1, #24]
 8005ae6:	4691      	mov	r9, r2
 8005ae8:	2f78      	cmp	r7, #120	@ 0x78
 8005aea:	4680      	mov	r8, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	469a      	mov	sl, r3
 8005af0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005af6:	d807      	bhi.n	8005b08 <_printf_i+0x28>
 8005af8:	2f62      	cmp	r7, #98	@ 0x62
 8005afa:	d80a      	bhi.n	8005b12 <_printf_i+0x32>
 8005afc:	2f00      	cmp	r7, #0
 8005afe:	f000 80d1 	beq.w	8005ca4 <_printf_i+0x1c4>
 8005b02:	2f58      	cmp	r7, #88	@ 0x58
 8005b04:	f000 80b8 	beq.w	8005c78 <_printf_i+0x198>
 8005b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b10:	e03a      	b.n	8005b88 <_printf_i+0xa8>
 8005b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b16:	2b15      	cmp	r3, #21
 8005b18:	d8f6      	bhi.n	8005b08 <_printf_i+0x28>
 8005b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b20 <_printf_i+0x40>)
 8005b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b20:	08005b79 	.word	0x08005b79
 8005b24:	08005b8d 	.word	0x08005b8d
 8005b28:	08005b09 	.word	0x08005b09
 8005b2c:	08005b09 	.word	0x08005b09
 8005b30:	08005b09 	.word	0x08005b09
 8005b34:	08005b09 	.word	0x08005b09
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005b09 	.word	0x08005b09
 8005b40:	08005b09 	.word	0x08005b09
 8005b44:	08005b09 	.word	0x08005b09
 8005b48:	08005b09 	.word	0x08005b09
 8005b4c:	08005c8b 	.word	0x08005c8b
 8005b50:	08005bb7 	.word	0x08005bb7
 8005b54:	08005c45 	.word	0x08005c45
 8005b58:	08005b09 	.word	0x08005b09
 8005b5c:	08005b09 	.word	0x08005b09
 8005b60:	08005cad 	.word	0x08005cad
 8005b64:	08005b09 	.word	0x08005b09
 8005b68:	08005bb7 	.word	0x08005bb7
 8005b6c:	08005b09 	.word	0x08005b09
 8005b70:	08005b09 	.word	0x08005b09
 8005b74:	08005c4d 	.word	0x08005c4d
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	1d1a      	adds	r2, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6032      	str	r2, [r6, #0]
 8005b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e09c      	b.n	8005cc6 <_printf_i+0x1e6>
 8005b8c:	6833      	ldr	r3, [r6, #0]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	1d19      	adds	r1, r3, #4
 8005b92:	6031      	str	r1, [r6, #0]
 8005b94:	0606      	lsls	r6, r0, #24
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0xbc>
 8005b98:	681d      	ldr	r5, [r3, #0]
 8005b9a:	e003      	b.n	8005ba4 <_printf_i+0xc4>
 8005b9c:	0645      	lsls	r5, r0, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0xb8>
 8005ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	da03      	bge.n	8005bb0 <_printf_i+0xd0>
 8005ba8:	232d      	movs	r3, #45	@ 0x2d
 8005baa:	426d      	negs	r5, r5
 8005bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb0:	230a      	movs	r3, #10
 8005bb2:	4858      	ldr	r0, [pc, #352]	@ (8005d14 <_printf_i+0x234>)
 8005bb4:	e011      	b.n	8005bda <_printf_i+0xfa>
 8005bb6:	6821      	ldr	r1, [r4, #0]
 8005bb8:	6833      	ldr	r3, [r6, #0]
 8005bba:	0608      	lsls	r0, r1, #24
 8005bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bc0:	d402      	bmi.n	8005bc8 <_printf_i+0xe8>
 8005bc2:	0649      	lsls	r1, r1, #25
 8005bc4:	bf48      	it	mi
 8005bc6:	b2ad      	uxthmi	r5, r5
 8005bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	bf14      	ite	ne
 8005bce:	230a      	movne	r3, #10
 8005bd0:	2308      	moveq	r3, #8
 8005bd2:	4850      	ldr	r0, [pc, #320]	@ (8005d14 <_printf_i+0x234>)
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bda:	6866      	ldr	r6, [r4, #4]
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	60a6      	str	r6, [r4, #8]
 8005be0:	db05      	blt.n	8005bee <_printf_i+0x10e>
 8005be2:	6821      	ldr	r1, [r4, #0]
 8005be4:	432e      	orrs	r6, r5
 8005be6:	f021 0104 	bic.w	r1, r1, #4
 8005bea:	6021      	str	r1, [r4, #0]
 8005bec:	d04b      	beq.n	8005c86 <_printf_i+0x1a6>
 8005bee:	4616      	mov	r6, r2
 8005bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8005bf8:	5dc7      	ldrb	r7, [r0, r7]
 8005bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bfe:	462f      	mov	r7, r5
 8005c00:	42bb      	cmp	r3, r7
 8005c02:	460d      	mov	r5, r1
 8005c04:	d9f4      	bls.n	8005bf0 <_printf_i+0x110>
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d10b      	bne.n	8005c22 <_printf_i+0x142>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	07df      	lsls	r7, r3, #31
 8005c0e:	d508      	bpl.n	8005c22 <_printf_i+0x142>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	4299      	cmp	r1, r3
 8005c16:	bfde      	ittt	le
 8005c18:	2330      	movle	r3, #48	@ 0x30
 8005c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c22:	1b92      	subs	r2, r2, r6
 8005c24:	6122      	str	r2, [r4, #16]
 8005c26:	464b      	mov	r3, r9
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f8cd a000 	str.w	sl, [sp]
 8005c30:	aa03      	add	r2, sp, #12
 8005c32:	f7ff fee3 	bl	80059fc <_printf_common>
 8005c36:	3001      	adds	r0, #1
 8005c38:	d14a      	bne.n	8005cd0 <_printf_i+0x1f0>
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	b004      	add	sp, #16
 8005c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	f043 0320 	orr.w	r3, r3, #32
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	2778      	movs	r7, #120	@ 0x78
 8005c4e:	4832      	ldr	r0, [pc, #200]	@ (8005d18 <_printf_i+0x238>)
 8005c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	6831      	ldr	r1, [r6, #0]
 8005c58:	061f      	lsls	r7, r3, #24
 8005c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c5e:	d402      	bmi.n	8005c66 <_printf_i+0x186>
 8005c60:	065f      	lsls	r7, r3, #25
 8005c62:	bf48      	it	mi
 8005c64:	b2ad      	uxthmi	r5, r5
 8005c66:	6031      	str	r1, [r6, #0]
 8005c68:	07d9      	lsls	r1, r3, #31
 8005c6a:	bf44      	itt	mi
 8005c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c70:	6023      	strmi	r3, [r4, #0]
 8005c72:	b11d      	cbz	r5, 8005c7c <_printf_i+0x19c>
 8005c74:	2310      	movs	r3, #16
 8005c76:	e7ad      	b.n	8005bd4 <_printf_i+0xf4>
 8005c78:	4826      	ldr	r0, [pc, #152]	@ (8005d14 <_printf_i+0x234>)
 8005c7a:	e7e9      	b.n	8005c50 <_printf_i+0x170>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	f023 0320 	bic.w	r3, r3, #32
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	e7f6      	b.n	8005c74 <_printf_i+0x194>
 8005c86:	4616      	mov	r6, r2
 8005c88:	e7bd      	b.n	8005c06 <_printf_i+0x126>
 8005c8a:	6833      	ldr	r3, [r6, #0]
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	1d18      	adds	r0, r3, #4
 8005c90:	6961      	ldr	r1, [r4, #20]
 8005c92:	6030      	str	r0, [r6, #0]
 8005c94:	062e      	lsls	r6, r5, #24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	d501      	bpl.n	8005c9e <_printf_i+0x1be>
 8005c9a:	6019      	str	r1, [r3, #0]
 8005c9c:	e002      	b.n	8005ca4 <_printf_i+0x1c4>
 8005c9e:	0668      	lsls	r0, r5, #25
 8005ca0:	d5fb      	bpl.n	8005c9a <_printf_i+0x1ba>
 8005ca2:	8019      	strh	r1, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4616      	mov	r6, r2
 8005ca8:	6123      	str	r3, [r4, #16]
 8005caa:	e7bc      	b.n	8005c26 <_printf_i+0x146>
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	2100      	movs	r1, #0
 8005cb0:	1d1a      	adds	r2, r3, #4
 8005cb2:	6032      	str	r2, [r6, #0]
 8005cb4:	681e      	ldr	r6, [r3, #0]
 8005cb6:	6862      	ldr	r2, [r4, #4]
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 fc00 	bl	80064be <memchr>
 8005cbe:	b108      	cbz	r0, 8005cc4 <_printf_i+0x1e4>
 8005cc0:	1b80      	subs	r0, r0, r6
 8005cc2:	6060      	str	r0, [r4, #4]
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cce:	e7aa      	b.n	8005c26 <_printf_i+0x146>
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	47d0      	blx	sl
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d0ad      	beq.n	8005c3a <_printf_i+0x15a>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	079b      	lsls	r3, r3, #30
 8005ce2:	d413      	bmi.n	8005d0c <_printf_i+0x22c>
 8005ce4:	68e0      	ldr	r0, [r4, #12]
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	bfb8      	it	lt
 8005cec:	4618      	movlt	r0, r3
 8005cee:	e7a6      	b.n	8005c3e <_printf_i+0x15e>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	47d0      	blx	sl
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d09d      	beq.n	8005c3a <_printf_i+0x15a>
 8005cfe:	3501      	adds	r5, #1
 8005d00:	68e3      	ldr	r3, [r4, #12]
 8005d02:	9903      	ldr	r1, [sp, #12]
 8005d04:	1a5b      	subs	r3, r3, r1
 8005d06:	42ab      	cmp	r3, r5
 8005d08:	dcf2      	bgt.n	8005cf0 <_printf_i+0x210>
 8005d0a:	e7eb      	b.n	8005ce4 <_printf_i+0x204>
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	f104 0619 	add.w	r6, r4, #25
 8005d12:	e7f5      	b.n	8005d00 <_printf_i+0x220>
 8005d14:	0800a72d 	.word	0x0800a72d
 8005d18:	0800a73e 	.word	0x0800a73e

08005d1c <_scanf_float>:
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	b087      	sub	sp, #28
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	688b      	ldr	r3, [r1, #8]
 8005d26:	4691      	mov	r9, r2
 8005d28:	1e5a      	subs	r2, r3, #1
 8005d2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005d2e:	bf82      	ittt	hi
 8005d30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005d34:	eb03 0b05 	addhi.w	fp, r3, r5
 8005d38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005d3c:	460a      	mov	r2, r1
 8005d3e:	f04f 0500 	mov.w	r5, #0
 8005d42:	bf88      	it	hi
 8005d44:	608b      	strhi	r3, [r1, #8]
 8005d46:	680b      	ldr	r3, [r1, #0]
 8005d48:	4680      	mov	r8, r0
 8005d4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005d4e:	f842 3b1c 	str.w	r3, [r2], #28
 8005d52:	460c      	mov	r4, r1
 8005d54:	bf98      	it	ls
 8005d56:	f04f 0b00 	movls.w	fp, #0
 8005d5a:	4616      	mov	r6, r2
 8005d5c:	46aa      	mov	sl, r5
 8005d5e:	462f      	mov	r7, r5
 8005d60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d64:	9201      	str	r2, [sp, #4]
 8005d66:	9502      	str	r5, [sp, #8]
 8005d68:	68a2      	ldr	r2, [r4, #8]
 8005d6a:	b15a      	cbz	r2, 8005d84 <_scanf_float+0x68>
 8005d6c:	f8d9 3000 	ldr.w	r3, [r9]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b4e      	cmp	r3, #78	@ 0x4e
 8005d74:	d862      	bhi.n	8005e3c <_scanf_float+0x120>
 8005d76:	2b40      	cmp	r3, #64	@ 0x40
 8005d78:	d83a      	bhi.n	8005df0 <_scanf_float+0xd4>
 8005d7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005d7e:	b2c8      	uxtb	r0, r1
 8005d80:	280e      	cmp	r0, #14
 8005d82:	d938      	bls.n	8005df6 <_scanf_float+0xda>
 8005d84:	b11f      	cbz	r7, 8005d8e <_scanf_float+0x72>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d92:	f1ba 0f01 	cmp.w	sl, #1
 8005d96:	f200 8114 	bhi.w	8005fc2 <_scanf_float+0x2a6>
 8005d9a:	9b01      	ldr	r3, [sp, #4]
 8005d9c:	429e      	cmp	r6, r3
 8005d9e:	f200 8105 	bhi.w	8005fac <_scanf_float+0x290>
 8005da2:	2001      	movs	r0, #1
 8005da4:	b007      	add	sp, #28
 8005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005dae:	2a0d      	cmp	r2, #13
 8005db0:	d8e8      	bhi.n	8005d84 <_scanf_float+0x68>
 8005db2:	a101      	add	r1, pc, #4	@ (adr r1, 8005db8 <_scanf_float+0x9c>)
 8005db4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005db8:	08005f01 	.word	0x08005f01
 8005dbc:	08005d85 	.word	0x08005d85
 8005dc0:	08005d85 	.word	0x08005d85
 8005dc4:	08005d85 	.word	0x08005d85
 8005dc8:	08005f5d 	.word	0x08005f5d
 8005dcc:	08005f37 	.word	0x08005f37
 8005dd0:	08005d85 	.word	0x08005d85
 8005dd4:	08005d85 	.word	0x08005d85
 8005dd8:	08005f0f 	.word	0x08005f0f
 8005ddc:	08005d85 	.word	0x08005d85
 8005de0:	08005d85 	.word	0x08005d85
 8005de4:	08005d85 	.word	0x08005d85
 8005de8:	08005d85 	.word	0x08005d85
 8005dec:	08005ecb 	.word	0x08005ecb
 8005df0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005df4:	e7db      	b.n	8005dae <_scanf_float+0x92>
 8005df6:	290e      	cmp	r1, #14
 8005df8:	d8c4      	bhi.n	8005d84 <_scanf_float+0x68>
 8005dfa:	a001      	add	r0, pc, #4	@ (adr r0, 8005e00 <_scanf_float+0xe4>)
 8005dfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e00:	08005ebb 	.word	0x08005ebb
 8005e04:	08005d85 	.word	0x08005d85
 8005e08:	08005ebb 	.word	0x08005ebb
 8005e0c:	08005f4b 	.word	0x08005f4b
 8005e10:	08005d85 	.word	0x08005d85
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005ea1 	.word	0x08005ea1
 8005e1c:	08005ea1 	.word	0x08005ea1
 8005e20:	08005ea1 	.word	0x08005ea1
 8005e24:	08005ea1 	.word	0x08005ea1
 8005e28:	08005ea1 	.word	0x08005ea1
 8005e2c:	08005ea1 	.word	0x08005ea1
 8005e30:	08005ea1 	.word	0x08005ea1
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8005e3e:	d809      	bhi.n	8005e54 <_scanf_float+0x138>
 8005e40:	2b60      	cmp	r3, #96	@ 0x60
 8005e42:	d8b2      	bhi.n	8005daa <_scanf_float+0x8e>
 8005e44:	2b54      	cmp	r3, #84	@ 0x54
 8005e46:	d07b      	beq.n	8005f40 <_scanf_float+0x224>
 8005e48:	2b59      	cmp	r3, #89	@ 0x59
 8005e4a:	d19b      	bne.n	8005d84 <_scanf_float+0x68>
 8005e4c:	2d07      	cmp	r5, #7
 8005e4e:	d199      	bne.n	8005d84 <_scanf_float+0x68>
 8005e50:	2508      	movs	r5, #8
 8005e52:	e02f      	b.n	8005eb4 <_scanf_float+0x198>
 8005e54:	2b74      	cmp	r3, #116	@ 0x74
 8005e56:	d073      	beq.n	8005f40 <_scanf_float+0x224>
 8005e58:	2b79      	cmp	r3, #121	@ 0x79
 8005e5a:	e7f6      	b.n	8005e4a <_scanf_float+0x12e>
 8005e5c:	6821      	ldr	r1, [r4, #0]
 8005e5e:	05c8      	lsls	r0, r1, #23
 8005e60:	d51e      	bpl.n	8005ea0 <_scanf_float+0x184>
 8005e62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005e66:	6021      	str	r1, [r4, #0]
 8005e68:	3701      	adds	r7, #1
 8005e6a:	f1bb 0f00 	cmp.w	fp, #0
 8005e6e:	d003      	beq.n	8005e78 <_scanf_float+0x15c>
 8005e70:	3201      	adds	r2, #1
 8005e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e76:	60a2      	str	r2, [r4, #8]
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	3301      	adds	r3, #1
 8005e82:	6123      	str	r3, [r4, #16]
 8005e84:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f8c9 3004 	str.w	r3, [r9, #4]
 8005e90:	f340 8083 	ble.w	8005f9a <_scanf_float+0x27e>
 8005e94:	f8d9 3000 	ldr.w	r3, [r9]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f8c9 3000 	str.w	r3, [r9]
 8005e9e:	e763      	b.n	8005d68 <_scanf_float+0x4c>
 8005ea0:	eb1a 0105 	adds.w	r1, sl, r5
 8005ea4:	f47f af6e 	bne.w	8005d84 <_scanf_float+0x68>
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	468a      	mov	sl, r1
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005eb8:	e7de      	b.n	8005e78 <_scanf_float+0x15c>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	0610      	lsls	r0, r2, #24
 8005ebe:	f57f af61 	bpl.w	8005d84 <_scanf_float+0x68>
 8005ec2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ec6:	6022      	str	r2, [r4, #0]
 8005ec8:	e7f4      	b.n	8005eb4 <_scanf_float+0x198>
 8005eca:	f1ba 0f00 	cmp.w	sl, #0
 8005ece:	d10c      	bne.n	8005eea <_scanf_float+0x1ce>
 8005ed0:	b977      	cbnz	r7, 8005ef0 <_scanf_float+0x1d4>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ed8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005edc:	d108      	bne.n	8005ef0 <_scanf_float+0x1d4>
 8005ede:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ee2:	f04f 0a01 	mov.w	sl, #1
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	e7e4      	b.n	8005eb4 <_scanf_float+0x198>
 8005eea:	f1ba 0f02 	cmp.w	sl, #2
 8005eee:	d051      	beq.n	8005f94 <_scanf_float+0x278>
 8005ef0:	2d01      	cmp	r5, #1
 8005ef2:	d002      	beq.n	8005efa <_scanf_float+0x1de>
 8005ef4:	2d04      	cmp	r5, #4
 8005ef6:	f47f af45 	bne.w	8005d84 <_scanf_float+0x68>
 8005efa:	3501      	adds	r5, #1
 8005efc:	b2ed      	uxtb	r5, r5
 8005efe:	e7d9      	b.n	8005eb4 <_scanf_float+0x198>
 8005f00:	f1ba 0f01 	cmp.w	sl, #1
 8005f04:	f47f af3e 	bne.w	8005d84 <_scanf_float+0x68>
 8005f08:	f04f 0a02 	mov.w	sl, #2
 8005f0c:	e7d2      	b.n	8005eb4 <_scanf_float+0x198>
 8005f0e:	b975      	cbnz	r5, 8005f2e <_scanf_float+0x212>
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	f47f af38 	bne.w	8005d86 <_scanf_float+0x6a>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005f1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005f20:	f040 80ff 	bne.w	8006122 <_scanf_float+0x406>
 8005f24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f28:	2501      	movs	r5, #1
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	e7c2      	b.n	8005eb4 <_scanf_float+0x198>
 8005f2e:	2d03      	cmp	r5, #3
 8005f30:	d0e3      	beq.n	8005efa <_scanf_float+0x1de>
 8005f32:	2d05      	cmp	r5, #5
 8005f34:	e7df      	b.n	8005ef6 <_scanf_float+0x1da>
 8005f36:	2d02      	cmp	r5, #2
 8005f38:	f47f af24 	bne.w	8005d84 <_scanf_float+0x68>
 8005f3c:	2503      	movs	r5, #3
 8005f3e:	e7b9      	b.n	8005eb4 <_scanf_float+0x198>
 8005f40:	2d06      	cmp	r5, #6
 8005f42:	f47f af1f 	bne.w	8005d84 <_scanf_float+0x68>
 8005f46:	2507      	movs	r5, #7
 8005f48:	e7b4      	b.n	8005eb4 <_scanf_float+0x198>
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	0591      	lsls	r1, r2, #22
 8005f4e:	f57f af19 	bpl.w	8005d84 <_scanf_float+0x68>
 8005f52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	9702      	str	r7, [sp, #8]
 8005f5a:	e7ab      	b.n	8005eb4 <_scanf_float+0x198>
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005f62:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005f66:	d005      	beq.n	8005f74 <_scanf_float+0x258>
 8005f68:	0550      	lsls	r0, r2, #21
 8005f6a:	f57f af0b 	bpl.w	8005d84 <_scanf_float+0x68>
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	f000 80d7 	beq.w	8006122 <_scanf_float+0x406>
 8005f74:	0591      	lsls	r1, r2, #22
 8005f76:	bf58      	it	pl
 8005f78:	9902      	ldrpl	r1, [sp, #8]
 8005f7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f7e:	bf58      	it	pl
 8005f80:	1a79      	subpl	r1, r7, r1
 8005f82:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005f86:	f04f 0700 	mov.w	r7, #0
 8005f8a:	bf58      	it	pl
 8005f8c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f90:	6022      	str	r2, [r4, #0]
 8005f92:	e78f      	b.n	8005eb4 <_scanf_float+0x198>
 8005f94:	f04f 0a03 	mov.w	sl, #3
 8005f98:	e78c      	b.n	8005eb4 <_scanf_float+0x198>
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005fa2:	4798      	blx	r3
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f43f aedf 	beq.w	8005d68 <_scanf_float+0x4c>
 8005faa:	e6eb      	b.n	8005d84 <_scanf_float+0x68>
 8005fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fb0:	464a      	mov	r2, r9
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fb8:	4798      	blx	r3
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	6123      	str	r3, [r4, #16]
 8005fc0:	e6eb      	b.n	8005d9a <_scanf_float+0x7e>
 8005fc2:	1e6b      	subs	r3, r5, #1
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d824      	bhi.n	8006012 <_scanf_float+0x2f6>
 8005fc8:	2d02      	cmp	r5, #2
 8005fca:	d836      	bhi.n	800603a <_scanf_float+0x31e>
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	f67f aee7 	bls.w	8005da2 <_scanf_float+0x86>
 8005fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fd8:	464a      	mov	r2, r9
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fe0:	4798      	blx	r3
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	e7f0      	b.n	8005fcc <_scanf_float+0x2b0>
 8005fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fee:	464a      	mov	r2, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005ff6:	4798      	blx	r3
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006002:	fa5f fa8a 	uxtb.w	sl, sl
 8006006:	f1ba 0f02 	cmp.w	sl, #2
 800600a:	d1ee      	bne.n	8005fea <_scanf_float+0x2ce>
 800600c:	3d03      	subs	r5, #3
 800600e:	b2ed      	uxtb	r5, r5
 8006010:	1b76      	subs	r6, r6, r5
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	05da      	lsls	r2, r3, #23
 8006016:	d530      	bpl.n	800607a <_scanf_float+0x35e>
 8006018:	055b      	lsls	r3, r3, #21
 800601a:	d511      	bpl.n	8006040 <_scanf_float+0x324>
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	429e      	cmp	r6, r3
 8006020:	f67f aebf 	bls.w	8005da2 <_scanf_float+0x86>
 8006024:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006028:	464a      	mov	r2, r9
 800602a:	4640      	mov	r0, r8
 800602c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006030:	4798      	blx	r3
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	3b01      	subs	r3, #1
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	e7f0      	b.n	800601c <_scanf_float+0x300>
 800603a:	46aa      	mov	sl, r5
 800603c:	46b3      	mov	fp, r6
 800603e:	e7de      	b.n	8005ffe <_scanf_float+0x2e2>
 8006040:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	2965      	cmp	r1, #101	@ 0x65
 8006048:	f103 33ff 	add.w	r3, r3, #4294967295
 800604c:	f106 35ff 	add.w	r5, r6, #4294967295
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	d00c      	beq.n	800606e <_scanf_float+0x352>
 8006054:	2945      	cmp	r1, #69	@ 0x45
 8006056:	d00a      	beq.n	800606e <_scanf_float+0x352>
 8006058:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800605c:	464a      	mov	r2, r9
 800605e:	4640      	mov	r0, r8
 8006060:	4798      	blx	r3
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006068:	3b01      	subs	r3, #1
 800606a:	1eb5      	subs	r5, r6, #2
 800606c:	6123      	str	r3, [r4, #16]
 800606e:	464a      	mov	r2, r9
 8006070:	4640      	mov	r0, r8
 8006072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006076:	4798      	blx	r3
 8006078:	462e      	mov	r6, r5
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	f012 0210 	ands.w	r2, r2, #16
 8006080:	d001      	beq.n	8006086 <_scanf_float+0x36a>
 8006082:	2000      	movs	r0, #0
 8006084:	e68e      	b.n	8005da4 <_scanf_float+0x88>
 8006086:	7032      	strb	r2, [r6, #0]
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800608e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006092:	d125      	bne.n	80060e0 <_scanf_float+0x3c4>
 8006094:	9b02      	ldr	r3, [sp, #8]
 8006096:	429f      	cmp	r7, r3
 8006098:	d00a      	beq.n	80060b0 <_scanf_float+0x394>
 800609a:	1bda      	subs	r2, r3, r7
 800609c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80060a0:	429e      	cmp	r6, r3
 80060a2:	bf28      	it	cs
 80060a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80060a8:	4630      	mov	r0, r6
 80060aa:	491f      	ldr	r1, [pc, #124]	@ (8006128 <_scanf_float+0x40c>)
 80060ac:	f000 f902 	bl	80062b4 <siprintf>
 80060b0:	2200      	movs	r2, #0
 80060b2:	4640      	mov	r0, r8
 80060b4:	9901      	ldr	r1, [sp, #4]
 80060b6:	f002 fc0b 	bl	80088d0 <_strtod_r>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	6825      	ldr	r5, [r4, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f015 0f02 	tst.w	r5, #2
 80060c4:	4606      	mov	r6, r0
 80060c6:	460f      	mov	r7, r1
 80060c8:	f103 0204 	add.w	r2, r3, #4
 80060cc:	d015      	beq.n	80060fa <_scanf_float+0x3de>
 80060ce:	9903      	ldr	r1, [sp, #12]
 80060d0:	600a      	str	r2, [r1, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	e9c3 6700 	strd	r6, r7, [r3]
 80060d8:	68e3      	ldr	r3, [r4, #12]
 80060da:	3301      	adds	r3, #1
 80060dc:	60e3      	str	r3, [r4, #12]
 80060de:	e7d0      	b.n	8006082 <_scanf_float+0x366>
 80060e0:	9b04      	ldr	r3, [sp, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0e4      	beq.n	80060b0 <_scanf_float+0x394>
 80060e6:	9905      	ldr	r1, [sp, #20]
 80060e8:	230a      	movs	r3, #10
 80060ea:	4640      	mov	r0, r8
 80060ec:	3101      	adds	r1, #1
 80060ee:	f7ff f9af 	bl	8005450 <_strtol_r>
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	9e05      	ldr	r6, [sp, #20]
 80060f6:	1ac2      	subs	r2, r0, r3
 80060f8:	e7d0      	b.n	800609c <_scanf_float+0x380>
 80060fa:	076d      	lsls	r5, r5, #29
 80060fc:	d4e7      	bmi.n	80060ce <_scanf_float+0x3b2>
 80060fe:	9d03      	ldr	r5, [sp, #12]
 8006100:	602a      	str	r2, [r5, #0]
 8006102:	681d      	ldr	r5, [r3, #0]
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	f7fa fc80 	bl	8000a0c <__aeabi_dcmpun>
 800610c:	b120      	cbz	r0, 8006118 <_scanf_float+0x3fc>
 800610e:	4807      	ldr	r0, [pc, #28]	@ (800612c <_scanf_float+0x410>)
 8006110:	f000 f9e4 	bl	80064dc <nanf>
 8006114:	6028      	str	r0, [r5, #0]
 8006116:	e7df      	b.n	80060d8 <_scanf_float+0x3bc>
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa fcd4 	bl	8000ac8 <__aeabi_d2f>
 8006120:	e7f8      	b.n	8006114 <_scanf_float+0x3f8>
 8006122:	2700      	movs	r7, #0
 8006124:	e633      	b.n	8005d8e <_scanf_float+0x72>
 8006126:	bf00      	nop
 8006128:	0800a74f 	.word	0x0800a74f
 800612c:	0800a890 	.word	0x0800a890

08006130 <std>:
 8006130:	2300      	movs	r3, #0
 8006132:	b510      	push	{r4, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	e9c0 3300 	strd	r3, r3, [r0]
 800613a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800613e:	6083      	str	r3, [r0, #8]
 8006140:	8181      	strh	r1, [r0, #12]
 8006142:	6643      	str	r3, [r0, #100]	@ 0x64
 8006144:	81c2      	strh	r2, [r0, #14]
 8006146:	6183      	str	r3, [r0, #24]
 8006148:	4619      	mov	r1, r3
 800614a:	2208      	movs	r2, #8
 800614c:	305c      	adds	r0, #92	@ 0x5c
 800614e:	f000 f916 	bl	800637e <memset>
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <std+0x58>)
 8006154:	6224      	str	r4, [r4, #32]
 8006156:	6263      	str	r3, [r4, #36]	@ 0x24
 8006158:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <std+0x5c>)
 800615a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <std+0x60>)
 800615e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006160:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <std+0x64>)
 8006162:	6323      	str	r3, [r4, #48]	@ 0x30
 8006164:	4b0c      	ldr	r3, [pc, #48]	@ (8006198 <std+0x68>)
 8006166:	429c      	cmp	r4, r3
 8006168:	d006      	beq.n	8006178 <std+0x48>
 800616a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800616e:	4294      	cmp	r4, r2
 8006170:	d002      	beq.n	8006178 <std+0x48>
 8006172:	33d0      	adds	r3, #208	@ 0xd0
 8006174:	429c      	cmp	r4, r3
 8006176:	d105      	bne.n	8006184 <std+0x54>
 8006178:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006180:	f000 b99a 	b.w	80064b8 <__retarget_lock_init_recursive>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	bf00      	nop
 8006188:	080062f9 	.word	0x080062f9
 800618c:	0800631b 	.word	0x0800631b
 8006190:	08006353 	.word	0x08006353
 8006194:	08006377 	.word	0x08006377
 8006198:	2000075c 	.word	0x2000075c

0800619c <stdio_exit_handler>:
 800619c:	4a02      	ldr	r2, [pc, #8]	@ (80061a8 <stdio_exit_handler+0xc>)
 800619e:	4903      	ldr	r1, [pc, #12]	@ (80061ac <stdio_exit_handler+0x10>)
 80061a0:	4803      	ldr	r0, [pc, #12]	@ (80061b0 <stdio_exit_handler+0x14>)
 80061a2:	f000 b869 	b.w	8006278 <_fwalk_sglue>
 80061a6:	bf00      	nop
 80061a8:	20000010 	.word	0x20000010
 80061ac:	08008c8d 	.word	0x08008c8d
 80061b0:	20000020 	.word	0x20000020

080061b4 <cleanup_stdio>:
 80061b4:	6841      	ldr	r1, [r0, #4]
 80061b6:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <cleanup_stdio+0x34>)
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4299      	cmp	r1, r3
 80061bc:	4604      	mov	r4, r0
 80061be:	d001      	beq.n	80061c4 <cleanup_stdio+0x10>
 80061c0:	f002 fd64 	bl	8008c8c <_fflush_r>
 80061c4:	68a1      	ldr	r1, [r4, #8]
 80061c6:	4b09      	ldr	r3, [pc, #36]	@ (80061ec <cleanup_stdio+0x38>)
 80061c8:	4299      	cmp	r1, r3
 80061ca:	d002      	beq.n	80061d2 <cleanup_stdio+0x1e>
 80061cc:	4620      	mov	r0, r4
 80061ce:	f002 fd5d 	bl	8008c8c <_fflush_r>
 80061d2:	68e1      	ldr	r1, [r4, #12]
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <cleanup_stdio+0x3c>)
 80061d6:	4299      	cmp	r1, r3
 80061d8:	d004      	beq.n	80061e4 <cleanup_stdio+0x30>
 80061da:	4620      	mov	r0, r4
 80061dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e0:	f002 bd54 	b.w	8008c8c <_fflush_r>
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	bf00      	nop
 80061e8:	2000075c 	.word	0x2000075c
 80061ec:	200007c4 	.word	0x200007c4
 80061f0:	2000082c 	.word	0x2000082c

080061f4 <global_stdio_init.part.0>:
 80061f4:	b510      	push	{r4, lr}
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <global_stdio_init.part.0+0x30>)
 80061f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006228 <global_stdio_init.part.0+0x34>)
 80061fa:	4a0c      	ldr	r2, [pc, #48]	@ (800622c <global_stdio_init.part.0+0x38>)
 80061fc:	4620      	mov	r0, r4
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	2104      	movs	r1, #4
 8006202:	2200      	movs	r2, #0
 8006204:	f7ff ff94 	bl	8006130 <std>
 8006208:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800620c:	2201      	movs	r2, #1
 800620e:	2109      	movs	r1, #9
 8006210:	f7ff ff8e 	bl	8006130 <std>
 8006214:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006218:	2202      	movs	r2, #2
 800621a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621e:	2112      	movs	r1, #18
 8006220:	f7ff bf86 	b.w	8006130 <std>
 8006224:	20000894 	.word	0x20000894
 8006228:	2000075c 	.word	0x2000075c
 800622c:	0800619d 	.word	0x0800619d

08006230 <__sfp_lock_acquire>:
 8006230:	4801      	ldr	r0, [pc, #4]	@ (8006238 <__sfp_lock_acquire+0x8>)
 8006232:	f000 b942 	b.w	80064ba <__retarget_lock_acquire_recursive>
 8006236:	bf00      	nop
 8006238:	2000089d 	.word	0x2000089d

0800623c <__sfp_lock_release>:
 800623c:	4801      	ldr	r0, [pc, #4]	@ (8006244 <__sfp_lock_release+0x8>)
 800623e:	f000 b93d 	b.w	80064bc <__retarget_lock_release_recursive>
 8006242:	bf00      	nop
 8006244:	2000089d 	.word	0x2000089d

08006248 <__sinit>:
 8006248:	b510      	push	{r4, lr}
 800624a:	4604      	mov	r4, r0
 800624c:	f7ff fff0 	bl	8006230 <__sfp_lock_acquire>
 8006250:	6a23      	ldr	r3, [r4, #32]
 8006252:	b11b      	cbz	r3, 800625c <__sinit+0x14>
 8006254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006258:	f7ff bff0 	b.w	800623c <__sfp_lock_release>
 800625c:	4b04      	ldr	r3, [pc, #16]	@ (8006270 <__sinit+0x28>)
 800625e:	6223      	str	r3, [r4, #32]
 8006260:	4b04      	ldr	r3, [pc, #16]	@ (8006274 <__sinit+0x2c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f5      	bne.n	8006254 <__sinit+0xc>
 8006268:	f7ff ffc4 	bl	80061f4 <global_stdio_init.part.0>
 800626c:	e7f2      	b.n	8006254 <__sinit+0xc>
 800626e:	bf00      	nop
 8006270:	080061b5 	.word	0x080061b5
 8006274:	20000894 	.word	0x20000894

08006278 <_fwalk_sglue>:
 8006278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627c:	4607      	mov	r7, r0
 800627e:	4688      	mov	r8, r1
 8006280:	4614      	mov	r4, r2
 8006282:	2600      	movs	r6, #0
 8006284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006288:	f1b9 0901 	subs.w	r9, r9, #1
 800628c:	d505      	bpl.n	800629a <_fwalk_sglue+0x22>
 800628e:	6824      	ldr	r4, [r4, #0]
 8006290:	2c00      	cmp	r4, #0
 8006292:	d1f7      	bne.n	8006284 <_fwalk_sglue+0xc>
 8006294:	4630      	mov	r0, r6
 8006296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d907      	bls.n	80062b0 <_fwalk_sglue+0x38>
 80062a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062a4:	3301      	adds	r3, #1
 80062a6:	d003      	beq.n	80062b0 <_fwalk_sglue+0x38>
 80062a8:	4629      	mov	r1, r5
 80062aa:	4638      	mov	r0, r7
 80062ac:	47c0      	blx	r8
 80062ae:	4306      	orrs	r6, r0
 80062b0:	3568      	adds	r5, #104	@ 0x68
 80062b2:	e7e9      	b.n	8006288 <_fwalk_sglue+0x10>

080062b4 <siprintf>:
 80062b4:	b40e      	push	{r1, r2, r3}
 80062b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062ba:	b510      	push	{r4, lr}
 80062bc:	2400      	movs	r4, #0
 80062be:	b09d      	sub	sp, #116	@ 0x74
 80062c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80062c2:	9002      	str	r0, [sp, #8]
 80062c4:	9006      	str	r0, [sp, #24]
 80062c6:	9107      	str	r1, [sp, #28]
 80062c8:	9104      	str	r1, [sp, #16]
 80062ca:	4809      	ldr	r0, [pc, #36]	@ (80062f0 <siprintf+0x3c>)
 80062cc:	4909      	ldr	r1, [pc, #36]	@ (80062f4 <siprintf+0x40>)
 80062ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d2:	9105      	str	r1, [sp, #20]
 80062d4:	6800      	ldr	r0, [r0, #0]
 80062d6:	a902      	add	r1, sp, #8
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80062dc:	f002 fb5a 	bl	8008994 <_svfiprintf_r>
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	701c      	strb	r4, [r3, #0]
 80062e4:	b01d      	add	sp, #116	@ 0x74
 80062e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ea:	b003      	add	sp, #12
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	2000001c 	.word	0x2000001c
 80062f4:	ffff0208 	.word	0xffff0208

080062f8 <__sread>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006300:	f000 f88c 	bl	800641c <_read_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	bfab      	itete	ge
 8006308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800630a:	89a3      	ldrhlt	r3, [r4, #12]
 800630c:	181b      	addge	r3, r3, r0
 800630e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006312:	bfac      	ite	ge
 8006314:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006316:	81a3      	strhlt	r3, [r4, #12]
 8006318:	bd10      	pop	{r4, pc}

0800631a <__swrite>:
 800631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631e:	461f      	mov	r7, r3
 8006320:	898b      	ldrh	r3, [r1, #12]
 8006322:	4605      	mov	r5, r0
 8006324:	05db      	lsls	r3, r3, #23
 8006326:	460c      	mov	r4, r1
 8006328:	4616      	mov	r6, r2
 800632a:	d505      	bpl.n	8006338 <__swrite+0x1e>
 800632c:	2302      	movs	r3, #2
 800632e:	2200      	movs	r2, #0
 8006330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006334:	f000 f860 	bl	80063f8 <_lseek_r>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	4632      	mov	r2, r6
 800633c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	4628      	mov	r0, r5
 8006344:	463b      	mov	r3, r7
 8006346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800634a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634e:	f000 b877 	b.w	8006440 <_write_r>

08006352 <__sseek>:
 8006352:	b510      	push	{r4, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f000 f84d 	bl	80063f8 <_lseek_r>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	bf15      	itete	ne
 8006364:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800636a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800636e:	81a3      	strheq	r3, [r4, #12]
 8006370:	bf18      	it	ne
 8006372:	81a3      	strhne	r3, [r4, #12]
 8006374:	bd10      	pop	{r4, pc}

08006376 <__sclose>:
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 b82d 	b.w	80063d8 <_close_r>

0800637e <memset>:
 800637e:	4603      	mov	r3, r0
 8006380:	4402      	add	r2, r0
 8006382:	4293      	cmp	r3, r2
 8006384:	d100      	bne.n	8006388 <memset+0xa>
 8006386:	4770      	bx	lr
 8006388:	f803 1b01 	strb.w	r1, [r3], #1
 800638c:	e7f9      	b.n	8006382 <memset+0x4>

0800638e <strcat>:
 800638e:	4602      	mov	r2, r0
 8006390:	b510      	push	{r4, lr}
 8006392:	7814      	ldrb	r4, [r2, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	3201      	adds	r2, #1
 8006398:	2c00      	cmp	r4, #0
 800639a:	d1fa      	bne.n	8006392 <strcat+0x4>
 800639c:	3b01      	subs	r3, #1
 800639e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	d1f9      	bne.n	800639e <strcat+0x10>
 80063aa:	bd10      	pop	{r4, pc}

080063ac <strncmp>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	b16a      	cbz	r2, 80063cc <strncmp+0x20>
 80063b0:	3901      	subs	r1, #1
 80063b2:	1884      	adds	r4, r0, r2
 80063b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80063bc:	429a      	cmp	r2, r3
 80063be:	d103      	bne.n	80063c8 <strncmp+0x1c>
 80063c0:	42a0      	cmp	r0, r4
 80063c2:	d001      	beq.n	80063c8 <strncmp+0x1c>
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	d1f5      	bne.n	80063b4 <strncmp+0x8>
 80063c8:	1ad0      	subs	r0, r2, r3
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	4610      	mov	r0, r2
 80063ce:	e7fc      	b.n	80063ca <strncmp+0x1e>

080063d0 <_localeconv_r>:
 80063d0:	4800      	ldr	r0, [pc, #0]	@ (80063d4 <_localeconv_r+0x4>)
 80063d2:	4770      	bx	lr
 80063d4:	2000015c 	.word	0x2000015c

080063d8 <_close_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	2300      	movs	r3, #0
 80063dc:	4d05      	ldr	r5, [pc, #20]	@ (80063f4 <_close_r+0x1c>)
 80063de:	4604      	mov	r4, r0
 80063e0:	4608      	mov	r0, r1
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	f7fc fb2f 	bl	8002a46 <_close>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_close_r+0x1a>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_close_r+0x1a>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	20000898 	.word	0x20000898

080063f8 <_lseek_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	2200      	movs	r2, #0
 8006402:	4d05      	ldr	r5, [pc, #20]	@ (8006418 <_lseek_r+0x20>)
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f7fc fb41 	bl	8002a8e <_lseek>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_lseek_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_lseek_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000898 	.word	0x20000898

0800641c <_read_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	2200      	movs	r2, #0
 8006426:	4d05      	ldr	r5, [pc, #20]	@ (800643c <_read_r+0x20>)
 8006428:	602a      	str	r2, [r5, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f7fc fad2 	bl	80029d4 <_read>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_read_r+0x1e>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_read_r+0x1e>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000898 	.word	0x20000898

08006440 <_write_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	2200      	movs	r2, #0
 800644a:	4d05      	ldr	r5, [pc, #20]	@ (8006460 <_write_r+0x20>)
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fc fadd 	bl	8002a0e <_write>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_write_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_write_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20000898 	.word	0x20000898

08006464 <__errno>:
 8006464:	4b01      	ldr	r3, [pc, #4]	@ (800646c <__errno+0x8>)
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	2000001c 	.word	0x2000001c

08006470 <__libc_init_array>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	2600      	movs	r6, #0
 8006474:	4d0c      	ldr	r5, [pc, #48]	@ (80064a8 <__libc_init_array+0x38>)
 8006476:	4c0d      	ldr	r4, [pc, #52]	@ (80064ac <__libc_init_array+0x3c>)
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	42a6      	cmp	r6, r4
 800647e:	d109      	bne.n	8006494 <__libc_init_array+0x24>
 8006480:	f003 fade 	bl	8009a40 <_init>
 8006484:	2600      	movs	r6, #0
 8006486:	4d0a      	ldr	r5, [pc, #40]	@ (80064b0 <__libc_init_array+0x40>)
 8006488:	4c0a      	ldr	r4, [pc, #40]	@ (80064b4 <__libc_init_array+0x44>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	42a6      	cmp	r6, r4
 8006490:	d105      	bne.n	800649e <__libc_init_array+0x2e>
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f855 3b04 	ldr.w	r3, [r5], #4
 8006498:	4798      	blx	r3
 800649a:	3601      	adds	r6, #1
 800649c:	e7ee      	b.n	800647c <__libc_init_array+0xc>
 800649e:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a2:	4798      	blx	r3
 80064a4:	3601      	adds	r6, #1
 80064a6:	e7f2      	b.n	800648e <__libc_init_array+0x1e>
 80064a8:	0800aa48 	.word	0x0800aa48
 80064ac:	0800aa48 	.word	0x0800aa48
 80064b0:	0800aa48 	.word	0x0800aa48
 80064b4:	0800aa4c 	.word	0x0800aa4c

080064b8 <__retarget_lock_init_recursive>:
 80064b8:	4770      	bx	lr

080064ba <__retarget_lock_acquire_recursive>:
 80064ba:	4770      	bx	lr

080064bc <__retarget_lock_release_recursive>:
 80064bc:	4770      	bx	lr

080064be <memchr>:
 80064be:	4603      	mov	r3, r0
 80064c0:	b510      	push	{r4, lr}
 80064c2:	b2c9      	uxtb	r1, r1
 80064c4:	4402      	add	r2, r0
 80064c6:	4293      	cmp	r3, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	d101      	bne.n	80064d0 <memchr+0x12>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e003      	b.n	80064d8 <memchr+0x1a>
 80064d0:	7804      	ldrb	r4, [r0, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	428c      	cmp	r4, r1
 80064d6:	d1f6      	bne.n	80064c6 <memchr+0x8>
 80064d8:	bd10      	pop	{r4, pc}
	...

080064dc <nanf>:
 80064dc:	4800      	ldr	r0, [pc, #0]	@ (80064e0 <nanf+0x4>)
 80064de:	4770      	bx	lr
 80064e0:	7fc00000 	.word	0x7fc00000

080064e4 <quorem>:
 80064e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	6903      	ldr	r3, [r0, #16]
 80064ea:	690c      	ldr	r4, [r1, #16]
 80064ec:	4607      	mov	r7, r0
 80064ee:	42a3      	cmp	r3, r4
 80064f0:	db7e      	blt.n	80065f0 <quorem+0x10c>
 80064f2:	3c01      	subs	r4, #1
 80064f4:	00a3      	lsls	r3, r4, #2
 80064f6:	f100 0514 	add.w	r5, r0, #20
 80064fa:	f101 0814 	add.w	r8, r1, #20
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800650a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800650e:	3301      	adds	r3, #1
 8006510:	429a      	cmp	r2, r3
 8006512:	fbb2 f6f3 	udiv	r6, r2, r3
 8006516:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800651a:	d32e      	bcc.n	800657a <quorem+0x96>
 800651c:	f04f 0a00 	mov.w	sl, #0
 8006520:	46c4      	mov	ip, r8
 8006522:	46ae      	mov	lr, r5
 8006524:	46d3      	mov	fp, sl
 8006526:	f85c 3b04 	ldr.w	r3, [ip], #4
 800652a:	b298      	uxth	r0, r3
 800652c:	fb06 a000 	mla	r0, r6, r0, sl
 8006530:	0c1b      	lsrs	r3, r3, #16
 8006532:	0c02      	lsrs	r2, r0, #16
 8006534:	fb06 2303 	mla	r3, r6, r3, r2
 8006538:	f8de 2000 	ldr.w	r2, [lr]
 800653c:	b280      	uxth	r0, r0
 800653e:	b292      	uxth	r2, r2
 8006540:	1a12      	subs	r2, r2, r0
 8006542:	445a      	add	r2, fp
 8006544:	f8de 0000 	ldr.w	r0, [lr]
 8006548:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800654c:	b29b      	uxth	r3, r3
 800654e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006552:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006556:	b292      	uxth	r2, r2
 8006558:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800655c:	45e1      	cmp	r9, ip
 800655e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006562:	f84e 2b04 	str.w	r2, [lr], #4
 8006566:	d2de      	bcs.n	8006526 <quorem+0x42>
 8006568:	9b00      	ldr	r3, [sp, #0]
 800656a:	58eb      	ldr	r3, [r5, r3]
 800656c:	b92b      	cbnz	r3, 800657a <quorem+0x96>
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	3b04      	subs	r3, #4
 8006572:	429d      	cmp	r5, r3
 8006574:	461a      	mov	r2, r3
 8006576:	d32f      	bcc.n	80065d8 <quorem+0xf4>
 8006578:	613c      	str	r4, [r7, #16]
 800657a:	4638      	mov	r0, r7
 800657c:	f001 f9ca 	bl	8007914 <__mcmp>
 8006580:	2800      	cmp	r0, #0
 8006582:	db25      	blt.n	80065d0 <quorem+0xec>
 8006584:	4629      	mov	r1, r5
 8006586:	2000      	movs	r0, #0
 8006588:	f858 2b04 	ldr.w	r2, [r8], #4
 800658c:	f8d1 c000 	ldr.w	ip, [r1]
 8006590:	fa1f fe82 	uxth.w	lr, r2
 8006594:	fa1f f38c 	uxth.w	r3, ip
 8006598:	eba3 030e 	sub.w	r3, r3, lr
 800659c:	4403      	add	r3, r0
 800659e:	0c12      	lsrs	r2, r2, #16
 80065a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ae:	45c1      	cmp	r9, r8
 80065b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065b4:	f841 3b04 	str.w	r3, [r1], #4
 80065b8:	d2e6      	bcs.n	8006588 <quorem+0xa4>
 80065ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065c2:	b922      	cbnz	r2, 80065ce <quorem+0xea>
 80065c4:	3b04      	subs	r3, #4
 80065c6:	429d      	cmp	r5, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	d30b      	bcc.n	80065e4 <quorem+0x100>
 80065cc:	613c      	str	r4, [r7, #16]
 80065ce:	3601      	adds	r6, #1
 80065d0:	4630      	mov	r0, r6
 80065d2:	b003      	add	sp, #12
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	3b04      	subs	r3, #4
 80065dc:	2a00      	cmp	r2, #0
 80065de:	d1cb      	bne.n	8006578 <quorem+0x94>
 80065e0:	3c01      	subs	r4, #1
 80065e2:	e7c6      	b.n	8006572 <quorem+0x8e>
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	3b04      	subs	r3, #4
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	d1ef      	bne.n	80065cc <quorem+0xe8>
 80065ec:	3c01      	subs	r4, #1
 80065ee:	e7ea      	b.n	80065c6 <quorem+0xe2>
 80065f0:	2000      	movs	r0, #0
 80065f2:	e7ee      	b.n	80065d2 <quorem+0xee>
 80065f4:	0000      	movs	r0, r0
	...

080065f8 <_dtoa_r>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	4614      	mov	r4, r2
 80065fe:	461d      	mov	r5, r3
 8006600:	69c7      	ldr	r7, [r0, #28]
 8006602:	b097      	sub	sp, #92	@ 0x5c
 8006604:	4681      	mov	r9, r0
 8006606:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800660a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800660c:	b97f      	cbnz	r7, 800662e <_dtoa_r+0x36>
 800660e:	2010      	movs	r0, #16
 8006610:	f000 fe0e 	bl	8007230 <malloc>
 8006614:	4602      	mov	r2, r0
 8006616:	f8c9 001c 	str.w	r0, [r9, #28]
 800661a:	b920      	cbnz	r0, 8006626 <_dtoa_r+0x2e>
 800661c:	21ef      	movs	r1, #239	@ 0xef
 800661e:	4bac      	ldr	r3, [pc, #688]	@ (80068d0 <_dtoa_r+0x2d8>)
 8006620:	48ac      	ldr	r0, [pc, #688]	@ (80068d4 <_dtoa_r+0x2dc>)
 8006622:	f002 fb99 	bl	8008d58 <__assert_func>
 8006626:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800662a:	6007      	str	r7, [r0, #0]
 800662c:	60c7      	str	r7, [r0, #12]
 800662e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	b159      	cbz	r1, 800664e <_dtoa_r+0x56>
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	2301      	movs	r3, #1
 800663a:	4093      	lsls	r3, r2
 800663c:	604a      	str	r2, [r1, #4]
 800663e:	608b      	str	r3, [r1, #8]
 8006640:	4648      	mov	r0, r9
 8006642:	f000 feeb 	bl	800741c <_Bfree>
 8006646:	2200      	movs	r2, #0
 8006648:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	1e2b      	subs	r3, r5, #0
 8006650:	bfaf      	iteee	ge
 8006652:	2300      	movge	r3, #0
 8006654:	2201      	movlt	r2, #1
 8006656:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800665a:	9307      	strlt	r3, [sp, #28]
 800665c:	bfa8      	it	ge
 800665e:	6033      	strge	r3, [r6, #0]
 8006660:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006664:	4b9c      	ldr	r3, [pc, #624]	@ (80068d8 <_dtoa_r+0x2e0>)
 8006666:	bfb8      	it	lt
 8006668:	6032      	strlt	r2, [r6, #0]
 800666a:	ea33 0308 	bics.w	r3, r3, r8
 800666e:	d112      	bne.n	8006696 <_dtoa_r+0x9e>
 8006670:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006674:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800667c:	4323      	orrs	r3, r4
 800667e:	f000 855e 	beq.w	800713e <_dtoa_r+0xb46>
 8006682:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006684:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80068dc <_dtoa_r+0x2e4>
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8560 	beq.w	800714e <_dtoa_r+0xb56>
 800668e:	f10a 0303 	add.w	r3, sl, #3
 8006692:	f000 bd5a 	b.w	800714a <_dtoa_r+0xb52>
 8006696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800669a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800669e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	f7fa f97f 	bl	80009a8 <__aeabi_dcmpeq>
 80066aa:	4607      	mov	r7, r0
 80066ac:	b158      	cbz	r0, 80066c6 <_dtoa_r+0xce>
 80066ae:	2301      	movs	r3, #1
 80066b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066b6:	b113      	cbz	r3, 80066be <_dtoa_r+0xc6>
 80066b8:	4b89      	ldr	r3, [pc, #548]	@ (80068e0 <_dtoa_r+0x2e8>)
 80066ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80068e4 <_dtoa_r+0x2ec>
 80066c2:	f000 bd44 	b.w	800714e <_dtoa_r+0xb56>
 80066c6:	ab14      	add	r3, sp, #80	@ 0x50
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	ab15      	add	r3, sp, #84	@ 0x54
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4648      	mov	r0, r9
 80066d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80066d4:	f001 fa36 	bl	8007b44 <__d2b>
 80066d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80066dc:	9003      	str	r0, [sp, #12]
 80066de:	2e00      	cmp	r6, #0
 80066e0:	d078      	beq.n	80067d4 <_dtoa_r+0x1dc>
 80066e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80066f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80066f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80066fa:	4619      	mov	r1, r3
 80066fc:	2200      	movs	r2, #0
 80066fe:	4b7a      	ldr	r3, [pc, #488]	@ (80068e8 <_dtoa_r+0x2f0>)
 8006700:	f7f9 fd32 	bl	8000168 <__aeabi_dsub>
 8006704:	a36c      	add	r3, pc, #432	@ (adr r3, 80068b8 <_dtoa_r+0x2c0>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f7f9 fee5 	bl	80004d8 <__aeabi_dmul>
 800670e:	a36c      	add	r3, pc, #432	@ (adr r3, 80068c0 <_dtoa_r+0x2c8>)
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f7f9 fd2a 	bl	800016c <__adddf3>
 8006718:	4604      	mov	r4, r0
 800671a:	4630      	mov	r0, r6
 800671c:	460d      	mov	r5, r1
 800671e:	f7f9 fe71 	bl	8000404 <__aeabi_i2d>
 8006722:	a369      	add	r3, pc, #420	@ (adr r3, 80068c8 <_dtoa_r+0x2d0>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fed6 	bl	80004d8 <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4620      	mov	r0, r4
 8006732:	4629      	mov	r1, r5
 8006734:	f7f9 fd1a 	bl	800016c <__adddf3>
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	f7fa f97c 	bl	8000a38 <__aeabi_d2iz>
 8006740:	2200      	movs	r2, #0
 8006742:	4607      	mov	r7, r0
 8006744:	2300      	movs	r3, #0
 8006746:	4620      	mov	r0, r4
 8006748:	4629      	mov	r1, r5
 800674a:	f7fa f937 	bl	80009bc <__aeabi_dcmplt>
 800674e:	b140      	cbz	r0, 8006762 <_dtoa_r+0x16a>
 8006750:	4638      	mov	r0, r7
 8006752:	f7f9 fe57 	bl	8000404 <__aeabi_i2d>
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	f7fa f925 	bl	80009a8 <__aeabi_dcmpeq>
 800675e:	b900      	cbnz	r0, 8006762 <_dtoa_r+0x16a>
 8006760:	3f01      	subs	r7, #1
 8006762:	2f16      	cmp	r7, #22
 8006764:	d854      	bhi.n	8006810 <_dtoa_r+0x218>
 8006766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800676a:	4b60      	ldr	r3, [pc, #384]	@ (80068ec <_dtoa_r+0x2f4>)
 800676c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f7fa f922 	bl	80009bc <__aeabi_dcmplt>
 8006778:	2800      	cmp	r0, #0
 800677a:	d04b      	beq.n	8006814 <_dtoa_r+0x21c>
 800677c:	2300      	movs	r3, #0
 800677e:	3f01      	subs	r7, #1
 8006780:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006782:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006784:	1b9b      	subs	r3, r3, r6
 8006786:	1e5a      	subs	r2, r3, #1
 8006788:	bf49      	itett	mi
 800678a:	f1c3 0301 	rsbmi	r3, r3, #1
 800678e:	2300      	movpl	r3, #0
 8006790:	9304      	strmi	r3, [sp, #16]
 8006792:	2300      	movmi	r3, #0
 8006794:	9209      	str	r2, [sp, #36]	@ 0x24
 8006796:	bf54      	ite	pl
 8006798:	9304      	strpl	r3, [sp, #16]
 800679a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800679c:	2f00      	cmp	r7, #0
 800679e:	db3b      	blt.n	8006818 <_dtoa_r+0x220>
 80067a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a2:	970e      	str	r7, [sp, #56]	@ 0x38
 80067a4:	443b      	add	r3, r7
 80067a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a8:	2300      	movs	r3, #0
 80067aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067ae:	2b09      	cmp	r3, #9
 80067b0:	d865      	bhi.n	800687e <_dtoa_r+0x286>
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	bfc4      	itt	gt
 80067b6:	3b04      	subgt	r3, #4
 80067b8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80067ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067bc:	bfc8      	it	gt
 80067be:	2400      	movgt	r4, #0
 80067c0:	f1a3 0302 	sub.w	r3, r3, #2
 80067c4:	bfd8      	it	le
 80067c6:	2401      	movle	r4, #1
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d864      	bhi.n	8006896 <_dtoa_r+0x29e>
 80067cc:	e8df f003 	tbb	[pc, r3]
 80067d0:	2c385553 	.word	0x2c385553
 80067d4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80067d8:	441e      	add	r6, r3
 80067da:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80067de:	2b20      	cmp	r3, #32
 80067e0:	bfc1      	itttt	gt
 80067e2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067e6:	fa08 f803 	lslgt.w	r8, r8, r3
 80067ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80067f2:	bfd6      	itet	le
 80067f4:	f1c3 0320 	rsble	r3, r3, #32
 80067f8:	ea48 0003 	orrgt.w	r0, r8, r3
 80067fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006800:	f7f9 fdf0 	bl	80003e4 <__aeabi_ui2d>
 8006804:	2201      	movs	r2, #1
 8006806:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800680a:	3e01      	subs	r6, #1
 800680c:	9212      	str	r2, [sp, #72]	@ 0x48
 800680e:	e774      	b.n	80066fa <_dtoa_r+0x102>
 8006810:	2301      	movs	r3, #1
 8006812:	e7b5      	b.n	8006780 <_dtoa_r+0x188>
 8006814:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006816:	e7b4      	b.n	8006782 <_dtoa_r+0x18a>
 8006818:	9b04      	ldr	r3, [sp, #16]
 800681a:	1bdb      	subs	r3, r3, r7
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	427b      	negs	r3, r7
 8006820:	930a      	str	r3, [sp, #40]	@ 0x28
 8006822:	2300      	movs	r3, #0
 8006824:	930e      	str	r3, [sp, #56]	@ 0x38
 8006826:	e7c1      	b.n	80067ac <_dtoa_r+0x1b4>
 8006828:	2301      	movs	r3, #1
 800682a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800682c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800682e:	eb07 0b03 	add.w	fp, r7, r3
 8006832:	f10b 0301 	add.w	r3, fp, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	9308      	str	r3, [sp, #32]
 800683a:	bfb8      	it	lt
 800683c:	2301      	movlt	r3, #1
 800683e:	e006      	b.n	800684e <_dtoa_r+0x256>
 8006840:	2301      	movs	r3, #1
 8006842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006844:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006846:	2b00      	cmp	r3, #0
 8006848:	dd28      	ble.n	800689c <_dtoa_r+0x2a4>
 800684a:	469b      	mov	fp, r3
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	2100      	movs	r1, #0
 8006850:	2204      	movs	r2, #4
 8006852:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006856:	f102 0514 	add.w	r5, r2, #20
 800685a:	429d      	cmp	r5, r3
 800685c:	d926      	bls.n	80068ac <_dtoa_r+0x2b4>
 800685e:	6041      	str	r1, [r0, #4]
 8006860:	4648      	mov	r0, r9
 8006862:	f000 fd9b 	bl	800739c <_Balloc>
 8006866:	4682      	mov	sl, r0
 8006868:	2800      	cmp	r0, #0
 800686a:	d143      	bne.n	80068f4 <_dtoa_r+0x2fc>
 800686c:	4602      	mov	r2, r0
 800686e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006872:	4b1f      	ldr	r3, [pc, #124]	@ (80068f0 <_dtoa_r+0x2f8>)
 8006874:	e6d4      	b.n	8006620 <_dtoa_r+0x28>
 8006876:	2300      	movs	r3, #0
 8006878:	e7e3      	b.n	8006842 <_dtoa_r+0x24a>
 800687a:	2300      	movs	r3, #0
 800687c:	e7d5      	b.n	800682a <_dtoa_r+0x232>
 800687e:	2401      	movs	r4, #1
 8006880:	2300      	movs	r3, #0
 8006882:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006884:	9320      	str	r3, [sp, #128]	@ 0x80
 8006886:	f04f 3bff 	mov.w	fp, #4294967295
 800688a:	2200      	movs	r2, #0
 800688c:	2312      	movs	r3, #18
 800688e:	f8cd b020 	str.w	fp, [sp, #32]
 8006892:	9221      	str	r2, [sp, #132]	@ 0x84
 8006894:	e7db      	b.n	800684e <_dtoa_r+0x256>
 8006896:	2301      	movs	r3, #1
 8006898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800689a:	e7f4      	b.n	8006886 <_dtoa_r+0x28e>
 800689c:	f04f 0b01 	mov.w	fp, #1
 80068a0:	465b      	mov	r3, fp
 80068a2:	f8cd b020 	str.w	fp, [sp, #32]
 80068a6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80068aa:	e7d0      	b.n	800684e <_dtoa_r+0x256>
 80068ac:	3101      	adds	r1, #1
 80068ae:	0052      	lsls	r2, r2, #1
 80068b0:	e7d1      	b.n	8006856 <_dtoa_r+0x25e>
 80068b2:	bf00      	nop
 80068b4:	f3af 8000 	nop.w
 80068b8:	636f4361 	.word	0x636f4361
 80068bc:	3fd287a7 	.word	0x3fd287a7
 80068c0:	8b60c8b3 	.word	0x8b60c8b3
 80068c4:	3fc68a28 	.word	0x3fc68a28
 80068c8:	509f79fb 	.word	0x509f79fb
 80068cc:	3fd34413 	.word	0x3fd34413
 80068d0:	0800a761 	.word	0x0800a761
 80068d4:	0800a778 	.word	0x0800a778
 80068d8:	7ff00000 	.word	0x7ff00000
 80068dc:	0800a75d 	.word	0x0800a75d
 80068e0:	0800a72c 	.word	0x0800a72c
 80068e4:	0800a72b 	.word	0x0800a72b
 80068e8:	3ff80000 	.word	0x3ff80000
 80068ec:	0800a928 	.word	0x0800a928
 80068f0:	0800a7d0 	.word	0x0800a7d0
 80068f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068f8:	6018      	str	r0, [r3, #0]
 80068fa:	9b08      	ldr	r3, [sp, #32]
 80068fc:	2b0e      	cmp	r3, #14
 80068fe:	f200 80a1 	bhi.w	8006a44 <_dtoa_r+0x44c>
 8006902:	2c00      	cmp	r4, #0
 8006904:	f000 809e 	beq.w	8006a44 <_dtoa_r+0x44c>
 8006908:	2f00      	cmp	r7, #0
 800690a:	dd33      	ble.n	8006974 <_dtoa_r+0x37c>
 800690c:	4b9c      	ldr	r3, [pc, #624]	@ (8006b80 <_dtoa_r+0x588>)
 800690e:	f007 020f 	and.w	r2, r7, #15
 8006912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006916:	05f8      	lsls	r0, r7, #23
 8006918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800691c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006924:	d516      	bpl.n	8006954 <_dtoa_r+0x35c>
 8006926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800692a:	4b96      	ldr	r3, [pc, #600]	@ (8006b84 <_dtoa_r+0x58c>)
 800692c:	2603      	movs	r6, #3
 800692e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006932:	f7f9 fefb 	bl	800072c <__aeabi_ddiv>
 8006936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800693a:	f004 040f 	and.w	r4, r4, #15
 800693e:	4d91      	ldr	r5, [pc, #580]	@ (8006b84 <_dtoa_r+0x58c>)
 8006940:	b954      	cbnz	r4, 8006958 <_dtoa_r+0x360>
 8006942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	f7f9 feef 	bl	800072c <__aeabi_ddiv>
 800694e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006952:	e028      	b.n	80069a6 <_dtoa_r+0x3ae>
 8006954:	2602      	movs	r6, #2
 8006956:	e7f2      	b.n	800693e <_dtoa_r+0x346>
 8006958:	07e1      	lsls	r1, r4, #31
 800695a:	d508      	bpl.n	800696e <_dtoa_r+0x376>
 800695c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006964:	f7f9 fdb8 	bl	80004d8 <__aeabi_dmul>
 8006968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800696c:	3601      	adds	r6, #1
 800696e:	1064      	asrs	r4, r4, #1
 8006970:	3508      	adds	r5, #8
 8006972:	e7e5      	b.n	8006940 <_dtoa_r+0x348>
 8006974:	f000 80af 	beq.w	8006ad6 <_dtoa_r+0x4de>
 8006978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800697c:	427c      	negs	r4, r7
 800697e:	4b80      	ldr	r3, [pc, #512]	@ (8006b80 <_dtoa_r+0x588>)
 8006980:	f004 020f 	and.w	r2, r4, #15
 8006984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 fda4 	bl	80004d8 <__aeabi_dmul>
 8006990:	2602      	movs	r6, #2
 8006992:	2300      	movs	r3, #0
 8006994:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006998:	4d7a      	ldr	r5, [pc, #488]	@ (8006b84 <_dtoa_r+0x58c>)
 800699a:	1124      	asrs	r4, r4, #4
 800699c:	2c00      	cmp	r4, #0
 800699e:	f040 808f 	bne.w	8006ac0 <_dtoa_r+0x4c8>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1d3      	bne.n	800694e <_dtoa_r+0x356>
 80069a6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80069aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8094 	beq.w	8006ada <_dtoa_r+0x4e2>
 80069b2:	2200      	movs	r2, #0
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	4b73      	ldr	r3, [pc, #460]	@ (8006b88 <_dtoa_r+0x590>)
 80069ba:	f7f9 ffff 	bl	80009bc <__aeabi_dcmplt>
 80069be:	2800      	cmp	r0, #0
 80069c0:	f000 808b 	beq.w	8006ada <_dtoa_r+0x4e2>
 80069c4:	9b08      	ldr	r3, [sp, #32]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8087 	beq.w	8006ada <_dtoa_r+0x4e2>
 80069cc:	f1bb 0f00 	cmp.w	fp, #0
 80069d0:	dd34      	ble.n	8006a3c <_dtoa_r+0x444>
 80069d2:	4620      	mov	r0, r4
 80069d4:	2200      	movs	r2, #0
 80069d6:	4629      	mov	r1, r5
 80069d8:	4b6c      	ldr	r3, [pc, #432]	@ (8006b8c <_dtoa_r+0x594>)
 80069da:	f7f9 fd7d 	bl	80004d8 <__aeabi_dmul>
 80069de:	465c      	mov	r4, fp
 80069e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80069e8:	3601      	adds	r6, #1
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7f9 fd0a 	bl	8000404 <__aeabi_i2d>
 80069f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	2200      	movs	r2, #0
 80069fa:	4b65      	ldr	r3, [pc, #404]	@ (8006b90 <_dtoa_r+0x598>)
 80069fc:	f7f9 fbb6 	bl	800016c <__adddf3>
 8006a00:	4605      	mov	r5, r0
 8006a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	d16a      	bne.n	8006ae0 <_dtoa_r+0x4e8>
 8006a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4b60      	ldr	r3, [pc, #384]	@ (8006b94 <_dtoa_r+0x59c>)
 8006a12:	f7f9 fba9 	bl	8000168 <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4633      	mov	r3, r6
 8006a22:	f7f9 ffe9 	bl	80009f8 <__aeabi_dcmpgt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 8298 	bne.w	8006f5c <_dtoa_r+0x964>
 8006a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a30:	462a      	mov	r2, r5
 8006a32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a36:	f7f9 ffc1 	bl	80009bc <__aeabi_dcmplt>
 8006a3a:	bb38      	cbnz	r0, 8006a8c <_dtoa_r+0x494>
 8006a3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006a40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f2c0 8157 	blt.w	8006cfa <_dtoa_r+0x702>
 8006a4c:	2f0e      	cmp	r7, #14
 8006a4e:	f300 8154 	bgt.w	8006cfa <_dtoa_r+0x702>
 8006a52:	4b4b      	ldr	r3, [pc, #300]	@ (8006b80 <_dtoa_r+0x588>)
 8006a54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f280 80e5 	bge.w	8006c32 <_dtoa_r+0x63a>
 8006a68:	9b08      	ldr	r3, [sp, #32]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f300 80e1 	bgt.w	8006c32 <_dtoa_r+0x63a>
 8006a70:	d10c      	bne.n	8006a8c <_dtoa_r+0x494>
 8006a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a76:	2200      	movs	r2, #0
 8006a78:	4b46      	ldr	r3, [pc, #280]	@ (8006b94 <_dtoa_r+0x59c>)
 8006a7a:	f7f9 fd2d 	bl	80004d8 <__aeabi_dmul>
 8006a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a82:	f7f9 ffaf 	bl	80009e4 <__aeabi_dcmpge>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f000 8266 	beq.w	8006f58 <_dtoa_r+0x960>
 8006a8c:	2400      	movs	r4, #0
 8006a8e:	4625      	mov	r5, r4
 8006a90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a92:	4656      	mov	r6, sl
 8006a94:	ea6f 0803 	mvn.w	r8, r3
 8006a98:	2700      	movs	r7, #0
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4648      	mov	r0, r9
 8006a9e:	f000 fcbd 	bl	800741c <_Bfree>
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	f000 80bd 	beq.w	8006c22 <_dtoa_r+0x62a>
 8006aa8:	b12f      	cbz	r7, 8006ab6 <_dtoa_r+0x4be>
 8006aaa:	42af      	cmp	r7, r5
 8006aac:	d003      	beq.n	8006ab6 <_dtoa_r+0x4be>
 8006aae:	4639      	mov	r1, r7
 8006ab0:	4648      	mov	r0, r9
 8006ab2:	f000 fcb3 	bl	800741c <_Bfree>
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4648      	mov	r0, r9
 8006aba:	f000 fcaf 	bl	800741c <_Bfree>
 8006abe:	e0b0      	b.n	8006c22 <_dtoa_r+0x62a>
 8006ac0:	07e2      	lsls	r2, r4, #31
 8006ac2:	d505      	bpl.n	8006ad0 <_dtoa_r+0x4d8>
 8006ac4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ac8:	f7f9 fd06 	bl	80004d8 <__aeabi_dmul>
 8006acc:	2301      	movs	r3, #1
 8006ace:	3601      	adds	r6, #1
 8006ad0:	1064      	asrs	r4, r4, #1
 8006ad2:	3508      	adds	r5, #8
 8006ad4:	e762      	b.n	800699c <_dtoa_r+0x3a4>
 8006ad6:	2602      	movs	r6, #2
 8006ad8:	e765      	b.n	80069a6 <_dtoa_r+0x3ae>
 8006ada:	46b8      	mov	r8, r7
 8006adc:	9c08      	ldr	r4, [sp, #32]
 8006ade:	e784      	b.n	80069ea <_dtoa_r+0x3f2>
 8006ae0:	4b27      	ldr	r3, [pc, #156]	@ (8006b80 <_dtoa_r+0x588>)
 8006ae2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aec:	4454      	add	r4, sl
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d054      	beq.n	8006b9c <_dtoa_r+0x5a4>
 8006af2:	2000      	movs	r0, #0
 8006af4:	4928      	ldr	r1, [pc, #160]	@ (8006b98 <_dtoa_r+0x5a0>)
 8006af6:	f7f9 fe19 	bl	800072c <__aeabi_ddiv>
 8006afa:	4633      	mov	r3, r6
 8006afc:	462a      	mov	r2, r5
 8006afe:	f7f9 fb33 	bl	8000168 <__aeabi_dsub>
 8006b02:	4656      	mov	r6, sl
 8006b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0c:	f7f9 ff94 	bl	8000a38 <__aeabi_d2iz>
 8006b10:	4605      	mov	r5, r0
 8006b12:	f7f9 fc77 	bl	8000404 <__aeabi_i2d>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b1e:	f7f9 fb23 	bl	8000168 <__aeabi_dsub>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	3530      	adds	r5, #48	@ 0x30
 8006b28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b30:	f806 5b01 	strb.w	r5, [r6], #1
 8006b34:	f7f9 ff42 	bl	80009bc <__aeabi_dcmplt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d172      	bne.n	8006c22 <_dtoa_r+0x62a>
 8006b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b40:	2000      	movs	r0, #0
 8006b42:	4911      	ldr	r1, [pc, #68]	@ (8006b88 <_dtoa_r+0x590>)
 8006b44:	f7f9 fb10 	bl	8000168 <__aeabi_dsub>
 8006b48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b4c:	f7f9 ff36 	bl	80009bc <__aeabi_dcmplt>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	f040 80b4 	bne.w	8006cbe <_dtoa_r+0x6c6>
 8006b56:	42a6      	cmp	r6, r4
 8006b58:	f43f af70 	beq.w	8006a3c <_dtoa_r+0x444>
 8006b5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b60:	2200      	movs	r2, #0
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <_dtoa_r+0x594>)
 8006b64:	f7f9 fcb8 	bl	80004d8 <__aeabi_dmul>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b72:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <_dtoa_r+0x594>)
 8006b74:	f7f9 fcb0 	bl	80004d8 <__aeabi_dmul>
 8006b78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b7c:	e7c4      	b.n	8006b08 <_dtoa_r+0x510>
 8006b7e:	bf00      	nop
 8006b80:	0800a928 	.word	0x0800a928
 8006b84:	0800a900 	.word	0x0800a900
 8006b88:	3ff00000 	.word	0x3ff00000
 8006b8c:	40240000 	.word	0x40240000
 8006b90:	401c0000 	.word	0x401c0000
 8006b94:	40140000 	.word	0x40140000
 8006b98:	3fe00000 	.word	0x3fe00000
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f7f9 fc9a 	bl	80004d8 <__aeabi_dmul>
 8006ba4:	4656      	mov	r6, sl
 8006ba6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006baa:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb0:	f7f9 ff42 	bl	8000a38 <__aeabi_d2iz>
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	f7f9 fc25 	bl	8000404 <__aeabi_i2d>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc2:	f7f9 fad1 	bl	8000168 <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	3530      	adds	r5, #48	@ 0x30
 8006bcc:	f806 5b01 	strb.w	r5, [r6], #1
 8006bd0:	42a6      	cmp	r6, r4
 8006bd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	d124      	bne.n	8006c26 <_dtoa_r+0x62e>
 8006bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006be0:	4bae      	ldr	r3, [pc, #696]	@ (8006e9c <_dtoa_r+0x8a4>)
 8006be2:	f7f9 fac3 	bl	800016c <__adddf3>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bee:	f7f9 ff03 	bl	80009f8 <__aeabi_dcmpgt>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d163      	bne.n	8006cbe <_dtoa_r+0x6c6>
 8006bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	49a7      	ldr	r1, [pc, #668]	@ (8006e9c <_dtoa_r+0x8a4>)
 8006bfe:	f7f9 fab3 	bl	8000168 <__aeabi_dsub>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c0a:	f7f9 fed7 	bl	80009bc <__aeabi_dcmplt>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f43f af14 	beq.w	8006a3c <_dtoa_r+0x444>
 8006c14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c16:	1e73      	subs	r3, r6, #1
 8006c18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c1e:	2b30      	cmp	r3, #48	@ 0x30
 8006c20:	d0f8      	beq.n	8006c14 <_dtoa_r+0x61c>
 8006c22:	4647      	mov	r7, r8
 8006c24:	e03b      	b.n	8006c9e <_dtoa_r+0x6a6>
 8006c26:	4b9e      	ldr	r3, [pc, #632]	@ (8006ea0 <_dtoa_r+0x8a8>)
 8006c28:	f7f9 fc56 	bl	80004d8 <__aeabi_dmul>
 8006c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c30:	e7bc      	b.n	8006bac <_dtoa_r+0x5b4>
 8006c32:	4656      	mov	r6, sl
 8006c34:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fd74 	bl	800072c <__aeabi_ddiv>
 8006c44:	f7f9 fef8 	bl	8000a38 <__aeabi_d2iz>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	f7f9 fbdb 	bl	8000404 <__aeabi_i2d>
 8006c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c52:	f7f9 fc41 	bl	80004d8 <__aeabi_dmul>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fa83 	bl	8000168 <__aeabi_dsub>
 8006c62:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c66:	9d08      	ldr	r5, [sp, #32]
 8006c68:	f806 4b01 	strb.w	r4, [r6], #1
 8006c6c:	eba6 040a 	sub.w	r4, r6, sl
 8006c70:	42a5      	cmp	r5, r4
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	d133      	bne.n	8006ce0 <_dtoa_r+0x6e8>
 8006c78:	f7f9 fa78 	bl	800016c <__adddf3>
 8006c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	f7f9 feb8 	bl	80009f8 <__aeabi_dcmpgt>
 8006c88:	b9c0      	cbnz	r0, 8006cbc <_dtoa_r+0x6c4>
 8006c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8006c96:	b110      	cbz	r0, 8006c9e <_dtoa_r+0x6a6>
 8006c98:	f018 0f01 	tst.w	r8, #1
 8006c9c:	d10e      	bne.n	8006cbc <_dtoa_r+0x6c4>
 8006c9e:	4648      	mov	r0, r9
 8006ca0:	9903      	ldr	r1, [sp, #12]
 8006ca2:	f000 fbbb 	bl	800741c <_Bfree>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	7033      	strb	r3, [r6, #0]
 8006caa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006cac:	3701      	adds	r7, #1
 8006cae:	601f      	str	r7, [r3, #0]
 8006cb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 824b 	beq.w	800714e <_dtoa_r+0xb56>
 8006cb8:	601e      	str	r6, [r3, #0]
 8006cba:	e248      	b.n	800714e <_dtoa_r+0xb56>
 8006cbc:	46b8      	mov	r8, r7
 8006cbe:	4633      	mov	r3, r6
 8006cc0:	461e      	mov	r6, r3
 8006cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cc6:	2a39      	cmp	r2, #57	@ 0x39
 8006cc8:	d106      	bne.n	8006cd8 <_dtoa_r+0x6e0>
 8006cca:	459a      	cmp	sl, r3
 8006ccc:	d1f8      	bne.n	8006cc0 <_dtoa_r+0x6c8>
 8006cce:	2230      	movs	r2, #48	@ 0x30
 8006cd0:	f108 0801 	add.w	r8, r8, #1
 8006cd4:	f88a 2000 	strb.w	r2, [sl]
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	3201      	adds	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	e7a0      	b.n	8006c22 <_dtoa_r+0x62a>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea0 <_dtoa_r+0x8a8>)
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	4604      	mov	r4, r0
 8006cee:	460d      	mov	r5, r1
 8006cf0:	f7f9 fe5a 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d09f      	beq.n	8006c38 <_dtoa_r+0x640>
 8006cf8:	e7d1      	b.n	8006c9e <_dtoa_r+0x6a6>
 8006cfa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	f000 80ea 	beq.w	8006ed6 <_dtoa_r+0x8de>
 8006d02:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d04:	2a01      	cmp	r2, #1
 8006d06:	f300 80cd 	bgt.w	8006ea4 <_dtoa_r+0x8ac>
 8006d0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d0c:	2a00      	cmp	r2, #0
 8006d0e:	f000 80c1 	beq.w	8006e94 <_dtoa_r+0x89c>
 8006d12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d18:	9e04      	ldr	r6, [sp, #16]
 8006d1a:	9a04      	ldr	r2, [sp, #16]
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	441a      	add	r2, r3
 8006d20:	9204      	str	r2, [sp, #16]
 8006d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d24:	4648      	mov	r0, r9
 8006d26:	441a      	add	r2, r3
 8006d28:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d2a:	f000 fc75 	bl	8007618 <__i2b>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b166      	cbz	r6, 8006d4c <_dtoa_r+0x754>
 8006d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	dd09      	ble.n	8006d4c <_dtoa_r+0x754>
 8006d38:	42b3      	cmp	r3, r6
 8006d3a:	bfa8      	it	ge
 8006d3c:	4633      	movge	r3, r6
 8006d3e:	9a04      	ldr	r2, [sp, #16]
 8006d40:	1af6      	subs	r6, r6, r3
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	9204      	str	r2, [sp, #16]
 8006d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4e:	b30b      	cbz	r3, 8006d94 <_dtoa_r+0x79c>
 8006d50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80c6 	beq.w	8006ee4 <_dtoa_r+0x8ec>
 8006d58:	2c00      	cmp	r4, #0
 8006d5a:	f000 80c0 	beq.w	8006ede <_dtoa_r+0x8e6>
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4622      	mov	r2, r4
 8006d62:	4648      	mov	r0, r9
 8006d64:	f000 fd10 	bl	8007788 <__pow5mult>
 8006d68:	9a03      	ldr	r2, [sp, #12]
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	4648      	mov	r0, r9
 8006d70:	f000 fc68 	bl	8007644 <__multiply>
 8006d74:	9903      	ldr	r1, [sp, #12]
 8006d76:	4680      	mov	r8, r0
 8006d78:	4648      	mov	r0, r9
 8006d7a:	f000 fb4f 	bl	800741c <_Bfree>
 8006d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d80:	1b1b      	subs	r3, r3, r4
 8006d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d84:	f000 80b1 	beq.w	8006eea <_dtoa_r+0x8f2>
 8006d88:	4641      	mov	r1, r8
 8006d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	f000 fcfb 	bl	8007788 <__pow5mult>
 8006d92:	9003      	str	r0, [sp, #12]
 8006d94:	2101      	movs	r1, #1
 8006d96:	4648      	mov	r0, r9
 8006d98:	f000 fc3e 	bl	8007618 <__i2b>
 8006d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 81d8 	beq.w	8007156 <_dtoa_r+0xb5e>
 8006da6:	461a      	mov	r2, r3
 8006da8:	4601      	mov	r1, r0
 8006daa:	4648      	mov	r0, r9
 8006dac:	f000 fcec 	bl	8007788 <__pow5mult>
 8006db0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006db2:	4604      	mov	r4, r0
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f300 809f 	bgt.w	8006ef8 <_dtoa_r+0x900>
 8006dba:	9b06      	ldr	r3, [sp, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 8097 	bne.w	8006ef0 <_dtoa_r+0x8f8>
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 8093 	bne.w	8006ef4 <_dtoa_r+0x8fc>
 8006dce:	9b07      	ldr	r3, [sp, #28]
 8006dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dd4:	0d1b      	lsrs	r3, r3, #20
 8006dd6:	051b      	lsls	r3, r3, #20
 8006dd8:	b133      	cbz	r3, 8006de8 <_dtoa_r+0x7f0>
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de2:	3301      	adds	r3, #1
 8006de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006de6:	2301      	movs	r3, #1
 8006de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 81b8 	beq.w	8007162 <_dtoa_r+0xb6a>
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006df8:	6918      	ldr	r0, [r3, #16]
 8006dfa:	f000 fbc1 	bl	8007580 <__hi0bits>
 8006dfe:	f1c0 0020 	rsb	r0, r0, #32
 8006e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e04:	4418      	add	r0, r3
 8006e06:	f010 001f 	ands.w	r0, r0, #31
 8006e0a:	f000 8082 	beq.w	8006f12 <_dtoa_r+0x91a>
 8006e0e:	f1c0 0320 	rsb	r3, r0, #32
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	dd73      	ble.n	8006efe <_dtoa_r+0x906>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	f1c0 001c 	rsb	r0, r0, #28
 8006e1c:	4403      	add	r3, r0
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e22:	4406      	add	r6, r0
 8006e24:	4403      	add	r3, r0
 8006e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dd05      	ble.n	8006e3a <_dtoa_r+0x842>
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4648      	mov	r0, r9
 8006e32:	9903      	ldr	r1, [sp, #12]
 8006e34:	f000 fd02 	bl	800783c <__lshift>
 8006e38:	9003      	str	r0, [sp, #12]
 8006e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd05      	ble.n	8006e4c <_dtoa_r+0x854>
 8006e40:	4621      	mov	r1, r4
 8006e42:	461a      	mov	r2, r3
 8006e44:	4648      	mov	r0, r9
 8006e46:	f000 fcf9 	bl	800783c <__lshift>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d061      	beq.n	8006f16 <_dtoa_r+0x91e>
 8006e52:	4621      	mov	r1, r4
 8006e54:	9803      	ldr	r0, [sp, #12]
 8006e56:	f000 fd5d 	bl	8007914 <__mcmp>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	da5b      	bge.n	8006f16 <_dtoa_r+0x91e>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	220a      	movs	r2, #10
 8006e62:	4648      	mov	r0, r9
 8006e64:	9903      	ldr	r1, [sp, #12]
 8006e66:	f000 fafb 	bl	8007460 <__multadd>
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e6c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e70:	9003      	str	r0, [sp, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8177 	beq.w	8007166 <_dtoa_r+0xb6e>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	220a      	movs	r2, #10
 8006e7e:	4648      	mov	r0, r9
 8006e80:	f000 faee 	bl	8007460 <__multadd>
 8006e84:	f1bb 0f00 	cmp.w	fp, #0
 8006e88:	4605      	mov	r5, r0
 8006e8a:	dc6f      	bgt.n	8006f6c <_dtoa_r+0x974>
 8006e8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	dc49      	bgt.n	8006f26 <_dtoa_r+0x92e>
 8006e92:	e06b      	b.n	8006f6c <_dtoa_r+0x974>
 8006e94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e9a:	e73c      	b.n	8006d16 <_dtoa_r+0x71e>
 8006e9c:	3fe00000 	.word	0x3fe00000
 8006ea0:	40240000 	.word	0x40240000
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	1e5c      	subs	r4, r3, #1
 8006ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eaa:	42a3      	cmp	r3, r4
 8006eac:	db09      	blt.n	8006ec2 <_dtoa_r+0x8ca>
 8006eae:	1b1c      	subs	r4, r3, r4
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f6bf af30 	bge.w	8006d18 <_dtoa_r+0x720>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	9a08      	ldr	r2, [sp, #32]
 8006ebc:	1a9e      	subs	r6, r3, r2
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e72b      	b.n	8006d1a <_dtoa_r+0x722>
 8006ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ec6:	1ae3      	subs	r3, r4, r3
 8006ec8:	441a      	add	r2, r3
 8006eca:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ecc:	9e04      	ldr	r6, [sp, #16]
 8006ece:	2400      	movs	r4, #0
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ed4:	e721      	b.n	8006d1a <_dtoa_r+0x722>
 8006ed6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ed8:	9e04      	ldr	r6, [sp, #16]
 8006eda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006edc:	e728      	b.n	8006d30 <_dtoa_r+0x738>
 8006ede:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ee2:	e751      	b.n	8006d88 <_dtoa_r+0x790>
 8006ee4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ee6:	9903      	ldr	r1, [sp, #12]
 8006ee8:	e750      	b.n	8006d8c <_dtoa_r+0x794>
 8006eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eee:	e751      	b.n	8006d94 <_dtoa_r+0x79c>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e779      	b.n	8006de8 <_dtoa_r+0x7f0>
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	e777      	b.n	8006de8 <_dtoa_r+0x7f0>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006efc:	e779      	b.n	8006df2 <_dtoa_r+0x7fa>
 8006efe:	d093      	beq.n	8006e28 <_dtoa_r+0x830>
 8006f00:	9a04      	ldr	r2, [sp, #16]
 8006f02:	331c      	adds	r3, #28
 8006f04:	441a      	add	r2, r3
 8006f06:	9204      	str	r2, [sp, #16]
 8006f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f0a:	441e      	add	r6, r3
 8006f0c:	441a      	add	r2, r3
 8006f0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f10:	e78a      	b.n	8006e28 <_dtoa_r+0x830>
 8006f12:	4603      	mov	r3, r0
 8006f14:	e7f4      	b.n	8006f00 <_dtoa_r+0x908>
 8006f16:	9b08      	ldr	r3, [sp, #32]
 8006f18:	46b8      	mov	r8, r7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc20      	bgt.n	8006f60 <_dtoa_r+0x968>
 8006f1e:	469b      	mov	fp, r3
 8006f20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	dd1e      	ble.n	8006f64 <_dtoa_r+0x96c>
 8006f26:	f1bb 0f00 	cmp.w	fp, #0
 8006f2a:	f47f adb1 	bne.w	8006a90 <_dtoa_r+0x498>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	465b      	mov	r3, fp
 8006f32:	2205      	movs	r2, #5
 8006f34:	4648      	mov	r0, r9
 8006f36:	f000 fa93 	bl	8007460 <__multadd>
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	9803      	ldr	r0, [sp, #12]
 8006f40:	f000 fce8 	bl	8007914 <__mcmp>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f77f ada3 	ble.w	8006a90 <_dtoa_r+0x498>
 8006f4a:	4656      	mov	r6, sl
 8006f4c:	2331      	movs	r3, #49	@ 0x31
 8006f4e:	f108 0801 	add.w	r8, r8, #1
 8006f52:	f806 3b01 	strb.w	r3, [r6], #1
 8006f56:	e59f      	b.n	8006a98 <_dtoa_r+0x4a0>
 8006f58:	46b8      	mov	r8, r7
 8006f5a:	9c08      	ldr	r4, [sp, #32]
 8006f5c:	4625      	mov	r5, r4
 8006f5e:	e7f4      	b.n	8006f4a <_dtoa_r+0x952>
 8006f60:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8101 	beq.w	800716e <_dtoa_r+0xb76>
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	dd05      	ble.n	8006f7c <_dtoa_r+0x984>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4632      	mov	r2, r6
 8006f74:	4648      	mov	r0, r9
 8006f76:	f000 fc61 	bl	800783c <__lshift>
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d05c      	beq.n	800703c <_dtoa_r+0xa44>
 8006f82:	4648      	mov	r0, r9
 8006f84:	6869      	ldr	r1, [r5, #4]
 8006f86:	f000 fa09 	bl	800739c <_Balloc>
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	b928      	cbnz	r0, 8006f9a <_dtoa_r+0x9a2>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f94:	4b80      	ldr	r3, [pc, #512]	@ (8007198 <_dtoa_r+0xba0>)
 8006f96:	f7ff bb43 	b.w	8006620 <_dtoa_r+0x28>
 8006f9a:	692a      	ldr	r2, [r5, #16]
 8006f9c:	f105 010c 	add.w	r1, r5, #12
 8006fa0:	3202      	adds	r2, #2
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	300c      	adds	r0, #12
 8006fa6:	f001 fec3 	bl	8008d30 <memcpy>
 8006faa:	2201      	movs	r2, #1
 8006fac:	4631      	mov	r1, r6
 8006fae:	4648      	mov	r0, r9
 8006fb0:	f000 fc44 	bl	800783c <__lshift>
 8006fb4:	462f      	mov	r7, r5
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	f10a 0301 	add.w	r3, sl, #1
 8006fbc:	9304      	str	r3, [sp, #16]
 8006fbe:	eb0a 030b 	add.w	r3, sl, fp
 8006fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc4:	9b06      	ldr	r3, [sp, #24]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	4621      	mov	r1, r4
 8006fd0:	9803      	ldr	r0, [sp, #12]
 8006fd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8006fd6:	f7ff fa85 	bl	80064e4 <quorem>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4639      	mov	r1, r7
 8006fde:	3330      	adds	r3, #48	@ 0x30
 8006fe0:	9006      	str	r0, [sp, #24]
 8006fe2:	9803      	ldr	r0, [sp, #12]
 8006fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fe6:	f000 fc95 	bl	8007914 <__mcmp>
 8006fea:	462a      	mov	r2, r5
 8006fec:	9008      	str	r0, [sp, #32]
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4648      	mov	r0, r9
 8006ff2:	f000 fcab 	bl	800794c <__mdiff>
 8006ff6:	68c2      	ldr	r2, [r0, #12]
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ffc:	bb02      	cbnz	r2, 8007040 <_dtoa_r+0xa48>
 8006ffe:	4601      	mov	r1, r0
 8007000:	9803      	ldr	r0, [sp, #12]
 8007002:	f000 fc87 	bl	8007914 <__mcmp>
 8007006:	4602      	mov	r2, r0
 8007008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800700a:	4631      	mov	r1, r6
 800700c:	4648      	mov	r0, r9
 800700e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007012:	f000 fa03 	bl	800741c <_Bfree>
 8007016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007018:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800701a:	9e04      	ldr	r6, [sp, #16]
 800701c:	ea42 0103 	orr.w	r1, r2, r3
 8007020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007022:	4319      	orrs	r1, r3
 8007024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007026:	d10d      	bne.n	8007044 <_dtoa_r+0xa4c>
 8007028:	2b39      	cmp	r3, #57	@ 0x39
 800702a:	d027      	beq.n	800707c <_dtoa_r+0xa84>
 800702c:	9a08      	ldr	r2, [sp, #32]
 800702e:	2a00      	cmp	r2, #0
 8007030:	dd01      	ble.n	8007036 <_dtoa_r+0xa3e>
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	3331      	adds	r3, #49	@ 0x31
 8007036:	f88b 3000 	strb.w	r3, [fp]
 800703a:	e52e      	b.n	8006a9a <_dtoa_r+0x4a2>
 800703c:	4628      	mov	r0, r5
 800703e:	e7b9      	b.n	8006fb4 <_dtoa_r+0x9bc>
 8007040:	2201      	movs	r2, #1
 8007042:	e7e2      	b.n	800700a <_dtoa_r+0xa12>
 8007044:	9908      	ldr	r1, [sp, #32]
 8007046:	2900      	cmp	r1, #0
 8007048:	db04      	blt.n	8007054 <_dtoa_r+0xa5c>
 800704a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800704c:	4301      	orrs	r1, r0
 800704e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007050:	4301      	orrs	r1, r0
 8007052:	d120      	bne.n	8007096 <_dtoa_r+0xa9e>
 8007054:	2a00      	cmp	r2, #0
 8007056:	ddee      	ble.n	8007036 <_dtoa_r+0xa3e>
 8007058:	2201      	movs	r2, #1
 800705a:	9903      	ldr	r1, [sp, #12]
 800705c:	4648      	mov	r0, r9
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	f000 fbec 	bl	800783c <__lshift>
 8007064:	4621      	mov	r1, r4
 8007066:	9003      	str	r0, [sp, #12]
 8007068:	f000 fc54 	bl	8007914 <__mcmp>
 800706c:	2800      	cmp	r0, #0
 800706e:	9b04      	ldr	r3, [sp, #16]
 8007070:	dc02      	bgt.n	8007078 <_dtoa_r+0xa80>
 8007072:	d1e0      	bne.n	8007036 <_dtoa_r+0xa3e>
 8007074:	07da      	lsls	r2, r3, #31
 8007076:	d5de      	bpl.n	8007036 <_dtoa_r+0xa3e>
 8007078:	2b39      	cmp	r3, #57	@ 0x39
 800707a:	d1da      	bne.n	8007032 <_dtoa_r+0xa3a>
 800707c:	2339      	movs	r3, #57	@ 0x39
 800707e:	f88b 3000 	strb.w	r3, [fp]
 8007082:	4633      	mov	r3, r6
 8007084:	461e      	mov	r6, r3
 8007086:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800708a:	3b01      	subs	r3, #1
 800708c:	2a39      	cmp	r2, #57	@ 0x39
 800708e:	d04e      	beq.n	800712e <_dtoa_r+0xb36>
 8007090:	3201      	adds	r2, #1
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	e501      	b.n	8006a9a <_dtoa_r+0x4a2>
 8007096:	2a00      	cmp	r2, #0
 8007098:	dd03      	ble.n	80070a2 <_dtoa_r+0xaaa>
 800709a:	2b39      	cmp	r3, #57	@ 0x39
 800709c:	d0ee      	beq.n	800707c <_dtoa_r+0xa84>
 800709e:	3301      	adds	r3, #1
 80070a0:	e7c9      	b.n	8007036 <_dtoa_r+0xa3e>
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070aa:	428a      	cmp	r2, r1
 80070ac:	d028      	beq.n	8007100 <_dtoa_r+0xb08>
 80070ae:	2300      	movs	r3, #0
 80070b0:	220a      	movs	r2, #10
 80070b2:	9903      	ldr	r1, [sp, #12]
 80070b4:	4648      	mov	r0, r9
 80070b6:	f000 f9d3 	bl	8007460 <__multadd>
 80070ba:	42af      	cmp	r7, r5
 80070bc:	9003      	str	r0, [sp, #12]
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	f04f 020a 	mov.w	r2, #10
 80070c6:	4639      	mov	r1, r7
 80070c8:	4648      	mov	r0, r9
 80070ca:	d107      	bne.n	80070dc <_dtoa_r+0xae4>
 80070cc:	f000 f9c8 	bl	8007460 <__multadd>
 80070d0:	4607      	mov	r7, r0
 80070d2:	4605      	mov	r5, r0
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	3301      	adds	r3, #1
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	e777      	b.n	8006fcc <_dtoa_r+0x9d4>
 80070dc:	f000 f9c0 	bl	8007460 <__multadd>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4607      	mov	r7, r0
 80070e4:	2300      	movs	r3, #0
 80070e6:	220a      	movs	r2, #10
 80070e8:	4648      	mov	r0, r9
 80070ea:	f000 f9b9 	bl	8007460 <__multadd>
 80070ee:	4605      	mov	r5, r0
 80070f0:	e7f0      	b.n	80070d4 <_dtoa_r+0xadc>
 80070f2:	f1bb 0f00 	cmp.w	fp, #0
 80070f6:	bfcc      	ite	gt
 80070f8:	465e      	movgt	r6, fp
 80070fa:	2601      	movle	r6, #1
 80070fc:	2700      	movs	r7, #0
 80070fe:	4456      	add	r6, sl
 8007100:	2201      	movs	r2, #1
 8007102:	9903      	ldr	r1, [sp, #12]
 8007104:	4648      	mov	r0, r9
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	f000 fb98 	bl	800783c <__lshift>
 800710c:	4621      	mov	r1, r4
 800710e:	9003      	str	r0, [sp, #12]
 8007110:	f000 fc00 	bl	8007914 <__mcmp>
 8007114:	2800      	cmp	r0, #0
 8007116:	dcb4      	bgt.n	8007082 <_dtoa_r+0xa8a>
 8007118:	d102      	bne.n	8007120 <_dtoa_r+0xb28>
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	07db      	lsls	r3, r3, #31
 800711e:	d4b0      	bmi.n	8007082 <_dtoa_r+0xa8a>
 8007120:	4633      	mov	r3, r6
 8007122:	461e      	mov	r6, r3
 8007124:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007128:	2a30      	cmp	r2, #48	@ 0x30
 800712a:	d0fa      	beq.n	8007122 <_dtoa_r+0xb2a>
 800712c:	e4b5      	b.n	8006a9a <_dtoa_r+0x4a2>
 800712e:	459a      	cmp	sl, r3
 8007130:	d1a8      	bne.n	8007084 <_dtoa_r+0xa8c>
 8007132:	2331      	movs	r3, #49	@ 0x31
 8007134:	f108 0801 	add.w	r8, r8, #1
 8007138:	f88a 3000 	strb.w	r3, [sl]
 800713c:	e4ad      	b.n	8006a9a <_dtoa_r+0x4a2>
 800713e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007140:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800719c <_dtoa_r+0xba4>
 8007144:	b11b      	cbz	r3, 800714e <_dtoa_r+0xb56>
 8007146:	f10a 0308 	add.w	r3, sl, #8
 800714a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	4650      	mov	r0, sl
 8007150:	b017      	add	sp, #92	@ 0x5c
 8007152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007158:	2b01      	cmp	r3, #1
 800715a:	f77f ae2e 	ble.w	8006dba <_dtoa_r+0x7c2>
 800715e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007160:	930a      	str	r3, [sp, #40]	@ 0x28
 8007162:	2001      	movs	r0, #1
 8007164:	e64d      	b.n	8006e02 <_dtoa_r+0x80a>
 8007166:	f1bb 0f00 	cmp.w	fp, #0
 800716a:	f77f aed9 	ble.w	8006f20 <_dtoa_r+0x928>
 800716e:	4656      	mov	r6, sl
 8007170:	4621      	mov	r1, r4
 8007172:	9803      	ldr	r0, [sp, #12]
 8007174:	f7ff f9b6 	bl	80064e4 <quorem>
 8007178:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800717c:	f806 3b01 	strb.w	r3, [r6], #1
 8007180:	eba6 020a 	sub.w	r2, r6, sl
 8007184:	4593      	cmp	fp, r2
 8007186:	ddb4      	ble.n	80070f2 <_dtoa_r+0xafa>
 8007188:	2300      	movs	r3, #0
 800718a:	220a      	movs	r2, #10
 800718c:	4648      	mov	r0, r9
 800718e:	9903      	ldr	r1, [sp, #12]
 8007190:	f000 f966 	bl	8007460 <__multadd>
 8007194:	9003      	str	r0, [sp, #12]
 8007196:	e7eb      	b.n	8007170 <_dtoa_r+0xb78>
 8007198:	0800a7d0 	.word	0x0800a7d0
 800719c:	0800a754 	.word	0x0800a754

080071a0 <_free_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4605      	mov	r5, r0
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d040      	beq.n	800722a <_free_r+0x8a>
 80071a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ac:	1f0c      	subs	r4, r1, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bfb8      	it	lt
 80071b2:	18e4      	addlt	r4, r4, r3
 80071b4:	f000 f8e6 	bl	8007384 <__malloc_lock>
 80071b8:	4a1c      	ldr	r2, [pc, #112]	@ (800722c <_free_r+0x8c>)
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	b933      	cbnz	r3, 80071cc <_free_r+0x2c>
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	6014      	str	r4, [r2, #0]
 80071c2:	4628      	mov	r0, r5
 80071c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c8:	f000 b8e2 	b.w	8007390 <__malloc_unlock>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d908      	bls.n	80071e2 <_free_r+0x42>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	1821      	adds	r1, r4, r0
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf01      	itttt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	1809      	addeq	r1, r1, r0
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	e7ed      	b.n	80071be <_free_r+0x1e>
 80071e2:	461a      	mov	r2, r3
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b10b      	cbz	r3, 80071ec <_free_r+0x4c>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d9fa      	bls.n	80071e2 <_free_r+0x42>
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	1850      	adds	r0, r2, r1
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d10b      	bne.n	800720c <_free_r+0x6c>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	4401      	add	r1, r0
 80071f8:	1850      	adds	r0, r2, r1
 80071fa:	4283      	cmp	r3, r0
 80071fc:	6011      	str	r1, [r2, #0]
 80071fe:	d1e0      	bne.n	80071c2 <_free_r+0x22>
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4408      	add	r0, r1
 8007206:	6010      	str	r0, [r2, #0]
 8007208:	6053      	str	r3, [r2, #4]
 800720a:	e7da      	b.n	80071c2 <_free_r+0x22>
 800720c:	d902      	bls.n	8007214 <_free_r+0x74>
 800720e:	230c      	movs	r3, #12
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	e7d6      	b.n	80071c2 <_free_r+0x22>
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	1821      	adds	r1, r4, r0
 8007218:	428b      	cmp	r3, r1
 800721a:	bf01      	itttt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	1809      	addeq	r1, r1, r0
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	6054      	str	r4, [r2, #4]
 8007228:	e7cb      	b.n	80071c2 <_free_r+0x22>
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	200008a4 	.word	0x200008a4

08007230 <malloc>:
 8007230:	4b02      	ldr	r3, [pc, #8]	@ (800723c <malloc+0xc>)
 8007232:	4601      	mov	r1, r0
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f000 b825 	b.w	8007284 <_malloc_r>
 800723a:	bf00      	nop
 800723c:	2000001c 	.word	0x2000001c

08007240 <sbrk_aligned>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4e0f      	ldr	r6, [pc, #60]	@ (8007280 <sbrk_aligned+0x40>)
 8007244:	460c      	mov	r4, r1
 8007246:	6831      	ldr	r1, [r6, #0]
 8007248:	4605      	mov	r5, r0
 800724a:	b911      	cbnz	r1, 8007252 <sbrk_aligned+0x12>
 800724c:	f001 fd60 	bl	8008d10 <_sbrk_r>
 8007250:	6030      	str	r0, [r6, #0]
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f001 fd5b 	bl	8008d10 <_sbrk_r>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d103      	bne.n	8007266 <sbrk_aligned+0x26>
 800725e:	f04f 34ff 	mov.w	r4, #4294967295
 8007262:	4620      	mov	r0, r4
 8007264:	bd70      	pop	{r4, r5, r6, pc}
 8007266:	1cc4      	adds	r4, r0, #3
 8007268:	f024 0403 	bic.w	r4, r4, #3
 800726c:	42a0      	cmp	r0, r4
 800726e:	d0f8      	beq.n	8007262 <sbrk_aligned+0x22>
 8007270:	1a21      	subs	r1, r4, r0
 8007272:	4628      	mov	r0, r5
 8007274:	f001 fd4c 	bl	8008d10 <_sbrk_r>
 8007278:	3001      	adds	r0, #1
 800727a:	d1f2      	bne.n	8007262 <sbrk_aligned+0x22>
 800727c:	e7ef      	b.n	800725e <sbrk_aligned+0x1e>
 800727e:	bf00      	nop
 8007280:	200008a0 	.word	0x200008a0

08007284 <_malloc_r>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	1ccd      	adds	r5, r1, #3
 800728a:	f025 0503 	bic.w	r5, r5, #3
 800728e:	3508      	adds	r5, #8
 8007290:	2d0c      	cmp	r5, #12
 8007292:	bf38      	it	cc
 8007294:	250c      	movcc	r5, #12
 8007296:	2d00      	cmp	r5, #0
 8007298:	4606      	mov	r6, r0
 800729a:	db01      	blt.n	80072a0 <_malloc_r+0x1c>
 800729c:	42a9      	cmp	r1, r5
 800729e:	d904      	bls.n	80072aa <_malloc_r+0x26>
 80072a0:	230c      	movs	r3, #12
 80072a2:	6033      	str	r3, [r6, #0]
 80072a4:	2000      	movs	r0, #0
 80072a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007380 <_malloc_r+0xfc>
 80072ae:	f000 f869 	bl	8007384 <__malloc_lock>
 80072b2:	f8d8 3000 	ldr.w	r3, [r8]
 80072b6:	461c      	mov	r4, r3
 80072b8:	bb44      	cbnz	r4, 800730c <_malloc_r+0x88>
 80072ba:	4629      	mov	r1, r5
 80072bc:	4630      	mov	r0, r6
 80072be:	f7ff ffbf 	bl	8007240 <sbrk_aligned>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	4604      	mov	r4, r0
 80072c6:	d158      	bne.n	800737a <_malloc_r+0xf6>
 80072c8:	f8d8 4000 	ldr.w	r4, [r8]
 80072cc:	4627      	mov	r7, r4
 80072ce:	2f00      	cmp	r7, #0
 80072d0:	d143      	bne.n	800735a <_malloc_r+0xd6>
 80072d2:	2c00      	cmp	r4, #0
 80072d4:	d04b      	beq.n	800736e <_malloc_r+0xea>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	4639      	mov	r1, r7
 80072da:	4630      	mov	r0, r6
 80072dc:	eb04 0903 	add.w	r9, r4, r3
 80072e0:	f001 fd16 	bl	8008d10 <_sbrk_r>
 80072e4:	4581      	cmp	r9, r0
 80072e6:	d142      	bne.n	800736e <_malloc_r+0xea>
 80072e8:	6821      	ldr	r1, [r4, #0]
 80072ea:	4630      	mov	r0, r6
 80072ec:	1a6d      	subs	r5, r5, r1
 80072ee:	4629      	mov	r1, r5
 80072f0:	f7ff ffa6 	bl	8007240 <sbrk_aligned>
 80072f4:	3001      	adds	r0, #1
 80072f6:	d03a      	beq.n	800736e <_malloc_r+0xea>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	442b      	add	r3, r5
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	bb62      	cbnz	r2, 8007360 <_malloc_r+0xdc>
 8007306:	f8c8 7000 	str.w	r7, [r8]
 800730a:	e00f      	b.n	800732c <_malloc_r+0xa8>
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	1b52      	subs	r2, r2, r5
 8007310:	d420      	bmi.n	8007354 <_malloc_r+0xd0>
 8007312:	2a0b      	cmp	r2, #11
 8007314:	d917      	bls.n	8007346 <_malloc_r+0xc2>
 8007316:	1961      	adds	r1, r4, r5
 8007318:	42a3      	cmp	r3, r4
 800731a:	6025      	str	r5, [r4, #0]
 800731c:	bf18      	it	ne
 800731e:	6059      	strne	r1, [r3, #4]
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	bf08      	it	eq
 8007324:	f8c8 1000 	streq.w	r1, [r8]
 8007328:	5162      	str	r2, [r4, r5]
 800732a:	604b      	str	r3, [r1, #4]
 800732c:	4630      	mov	r0, r6
 800732e:	f000 f82f 	bl	8007390 <__malloc_unlock>
 8007332:	f104 000b 	add.w	r0, r4, #11
 8007336:	1d23      	adds	r3, r4, #4
 8007338:	f020 0007 	bic.w	r0, r0, #7
 800733c:	1ac2      	subs	r2, r0, r3
 800733e:	bf1c      	itt	ne
 8007340:	1a1b      	subne	r3, r3, r0
 8007342:	50a3      	strne	r3, [r4, r2]
 8007344:	e7af      	b.n	80072a6 <_malloc_r+0x22>
 8007346:	6862      	ldr	r2, [r4, #4]
 8007348:	42a3      	cmp	r3, r4
 800734a:	bf0c      	ite	eq
 800734c:	f8c8 2000 	streq.w	r2, [r8]
 8007350:	605a      	strne	r2, [r3, #4]
 8007352:	e7eb      	b.n	800732c <_malloc_r+0xa8>
 8007354:	4623      	mov	r3, r4
 8007356:	6864      	ldr	r4, [r4, #4]
 8007358:	e7ae      	b.n	80072b8 <_malloc_r+0x34>
 800735a:	463c      	mov	r4, r7
 800735c:	687f      	ldr	r7, [r7, #4]
 800735e:	e7b6      	b.n	80072ce <_malloc_r+0x4a>
 8007360:	461a      	mov	r2, r3
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	42a3      	cmp	r3, r4
 8007366:	d1fb      	bne.n	8007360 <_malloc_r+0xdc>
 8007368:	2300      	movs	r3, #0
 800736a:	6053      	str	r3, [r2, #4]
 800736c:	e7de      	b.n	800732c <_malloc_r+0xa8>
 800736e:	230c      	movs	r3, #12
 8007370:	4630      	mov	r0, r6
 8007372:	6033      	str	r3, [r6, #0]
 8007374:	f000 f80c 	bl	8007390 <__malloc_unlock>
 8007378:	e794      	b.n	80072a4 <_malloc_r+0x20>
 800737a:	6005      	str	r5, [r0, #0]
 800737c:	e7d6      	b.n	800732c <_malloc_r+0xa8>
 800737e:	bf00      	nop
 8007380:	200008a4 	.word	0x200008a4

08007384 <__malloc_lock>:
 8007384:	4801      	ldr	r0, [pc, #4]	@ (800738c <__malloc_lock+0x8>)
 8007386:	f7ff b898 	b.w	80064ba <__retarget_lock_acquire_recursive>
 800738a:	bf00      	nop
 800738c:	2000089c 	.word	0x2000089c

08007390 <__malloc_unlock>:
 8007390:	4801      	ldr	r0, [pc, #4]	@ (8007398 <__malloc_unlock+0x8>)
 8007392:	f7ff b893 	b.w	80064bc <__retarget_lock_release_recursive>
 8007396:	bf00      	nop
 8007398:	2000089c 	.word	0x2000089c

0800739c <_Balloc>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	69c6      	ldr	r6, [r0, #28]
 80073a0:	4604      	mov	r4, r0
 80073a2:	460d      	mov	r5, r1
 80073a4:	b976      	cbnz	r6, 80073c4 <_Balloc+0x28>
 80073a6:	2010      	movs	r0, #16
 80073a8:	f7ff ff42 	bl	8007230 <malloc>
 80073ac:	4602      	mov	r2, r0
 80073ae:	61e0      	str	r0, [r4, #28]
 80073b0:	b920      	cbnz	r0, 80073bc <_Balloc+0x20>
 80073b2:	216b      	movs	r1, #107	@ 0x6b
 80073b4:	4b17      	ldr	r3, [pc, #92]	@ (8007414 <_Balloc+0x78>)
 80073b6:	4818      	ldr	r0, [pc, #96]	@ (8007418 <_Balloc+0x7c>)
 80073b8:	f001 fcce 	bl	8008d58 <__assert_func>
 80073bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073c0:	6006      	str	r6, [r0, #0]
 80073c2:	60c6      	str	r6, [r0, #12]
 80073c4:	69e6      	ldr	r6, [r4, #28]
 80073c6:	68f3      	ldr	r3, [r6, #12]
 80073c8:	b183      	cbz	r3, 80073ec <_Balloc+0x50>
 80073ca:	69e3      	ldr	r3, [r4, #28]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073d2:	b9b8      	cbnz	r0, 8007404 <_Balloc+0x68>
 80073d4:	2101      	movs	r1, #1
 80073d6:	fa01 f605 	lsl.w	r6, r1, r5
 80073da:	1d72      	adds	r2, r6, #5
 80073dc:	4620      	mov	r0, r4
 80073de:	0092      	lsls	r2, r2, #2
 80073e0:	f001 fcd8 	bl	8008d94 <_calloc_r>
 80073e4:	b160      	cbz	r0, 8007400 <_Balloc+0x64>
 80073e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ea:	e00e      	b.n	800740a <_Balloc+0x6e>
 80073ec:	2221      	movs	r2, #33	@ 0x21
 80073ee:	2104      	movs	r1, #4
 80073f0:	4620      	mov	r0, r4
 80073f2:	f001 fccf 	bl	8008d94 <_calloc_r>
 80073f6:	69e3      	ldr	r3, [r4, #28]
 80073f8:	60f0      	str	r0, [r6, #12]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e4      	bne.n	80073ca <_Balloc+0x2e>
 8007400:	2000      	movs	r0, #0
 8007402:	bd70      	pop	{r4, r5, r6, pc}
 8007404:	6802      	ldr	r2, [r0, #0]
 8007406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800740a:	2300      	movs	r3, #0
 800740c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007410:	e7f7      	b.n	8007402 <_Balloc+0x66>
 8007412:	bf00      	nop
 8007414:	0800a761 	.word	0x0800a761
 8007418:	0800a7e1 	.word	0x0800a7e1

0800741c <_Bfree>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	69c6      	ldr	r6, [r0, #28]
 8007420:	4605      	mov	r5, r0
 8007422:	460c      	mov	r4, r1
 8007424:	b976      	cbnz	r6, 8007444 <_Bfree+0x28>
 8007426:	2010      	movs	r0, #16
 8007428:	f7ff ff02 	bl	8007230 <malloc>
 800742c:	4602      	mov	r2, r0
 800742e:	61e8      	str	r0, [r5, #28]
 8007430:	b920      	cbnz	r0, 800743c <_Bfree+0x20>
 8007432:	218f      	movs	r1, #143	@ 0x8f
 8007434:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <_Bfree+0x3c>)
 8007436:	4809      	ldr	r0, [pc, #36]	@ (800745c <_Bfree+0x40>)
 8007438:	f001 fc8e 	bl	8008d58 <__assert_func>
 800743c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007440:	6006      	str	r6, [r0, #0]
 8007442:	60c6      	str	r6, [r0, #12]
 8007444:	b13c      	cbz	r4, 8007456 <_Bfree+0x3a>
 8007446:	69eb      	ldr	r3, [r5, #28]
 8007448:	6862      	ldr	r2, [r4, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007450:	6021      	str	r1, [r4, #0]
 8007452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	0800a761 	.word	0x0800a761
 800745c:	0800a7e1 	.word	0x0800a7e1

08007460 <__multadd>:
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007464:	4607      	mov	r7, r0
 8007466:	460c      	mov	r4, r1
 8007468:	461e      	mov	r6, r3
 800746a:	2000      	movs	r0, #0
 800746c:	690d      	ldr	r5, [r1, #16]
 800746e:	f101 0c14 	add.w	ip, r1, #20
 8007472:	f8dc 3000 	ldr.w	r3, [ip]
 8007476:	3001      	adds	r0, #1
 8007478:	b299      	uxth	r1, r3
 800747a:	fb02 6101 	mla	r1, r2, r1, r6
 800747e:	0c1e      	lsrs	r6, r3, #16
 8007480:	0c0b      	lsrs	r3, r1, #16
 8007482:	fb02 3306 	mla	r3, r2, r6, r3
 8007486:	b289      	uxth	r1, r1
 8007488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800748c:	4285      	cmp	r5, r0
 800748e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007492:	f84c 1b04 	str.w	r1, [ip], #4
 8007496:	dcec      	bgt.n	8007472 <__multadd+0x12>
 8007498:	b30e      	cbz	r6, 80074de <__multadd+0x7e>
 800749a:	68a3      	ldr	r3, [r4, #8]
 800749c:	42ab      	cmp	r3, r5
 800749e:	dc19      	bgt.n	80074d4 <__multadd+0x74>
 80074a0:	6861      	ldr	r1, [r4, #4]
 80074a2:	4638      	mov	r0, r7
 80074a4:	3101      	adds	r1, #1
 80074a6:	f7ff ff79 	bl	800739c <_Balloc>
 80074aa:	4680      	mov	r8, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__multadd+0x5a>
 80074ae:	4602      	mov	r2, r0
 80074b0:	21ba      	movs	r1, #186	@ 0xba
 80074b2:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <__multadd+0x84>)
 80074b4:	480c      	ldr	r0, [pc, #48]	@ (80074e8 <__multadd+0x88>)
 80074b6:	f001 fc4f 	bl	8008d58 <__assert_func>
 80074ba:	6922      	ldr	r2, [r4, #16]
 80074bc:	f104 010c 	add.w	r1, r4, #12
 80074c0:	3202      	adds	r2, #2
 80074c2:	0092      	lsls	r2, r2, #2
 80074c4:	300c      	adds	r0, #12
 80074c6:	f001 fc33 	bl	8008d30 <memcpy>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff ffa5 	bl	800741c <_Bfree>
 80074d2:	4644      	mov	r4, r8
 80074d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074d8:	3501      	adds	r5, #1
 80074da:	615e      	str	r6, [r3, #20]
 80074dc:	6125      	str	r5, [r4, #16]
 80074de:	4620      	mov	r0, r4
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e4:	0800a7d0 	.word	0x0800a7d0
 80074e8:	0800a7e1 	.word	0x0800a7e1

080074ec <__s2b>:
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	4615      	mov	r5, r2
 80074f2:	2209      	movs	r2, #9
 80074f4:	461f      	mov	r7, r3
 80074f6:	3308      	adds	r3, #8
 80074f8:	460c      	mov	r4, r1
 80074fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fe:	4606      	mov	r6, r0
 8007500:	2201      	movs	r2, #1
 8007502:	2100      	movs	r1, #0
 8007504:	429a      	cmp	r2, r3
 8007506:	db09      	blt.n	800751c <__s2b+0x30>
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ff47 	bl	800739c <_Balloc>
 800750e:	b940      	cbnz	r0, 8007522 <__s2b+0x36>
 8007510:	4602      	mov	r2, r0
 8007512:	21d3      	movs	r1, #211	@ 0xd3
 8007514:	4b18      	ldr	r3, [pc, #96]	@ (8007578 <__s2b+0x8c>)
 8007516:	4819      	ldr	r0, [pc, #100]	@ (800757c <__s2b+0x90>)
 8007518:	f001 fc1e 	bl	8008d58 <__assert_func>
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	3101      	adds	r1, #1
 8007520:	e7f0      	b.n	8007504 <__s2b+0x18>
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	2d09      	cmp	r5, #9
 8007526:	6143      	str	r3, [r0, #20]
 8007528:	f04f 0301 	mov.w	r3, #1
 800752c:	6103      	str	r3, [r0, #16]
 800752e:	dd16      	ble.n	800755e <__s2b+0x72>
 8007530:	f104 0909 	add.w	r9, r4, #9
 8007534:	46c8      	mov	r8, r9
 8007536:	442c      	add	r4, r5
 8007538:	f818 3b01 	ldrb.w	r3, [r8], #1
 800753c:	4601      	mov	r1, r0
 800753e:	220a      	movs	r2, #10
 8007540:	4630      	mov	r0, r6
 8007542:	3b30      	subs	r3, #48	@ 0x30
 8007544:	f7ff ff8c 	bl	8007460 <__multadd>
 8007548:	45a0      	cmp	r8, r4
 800754a:	d1f5      	bne.n	8007538 <__s2b+0x4c>
 800754c:	f1a5 0408 	sub.w	r4, r5, #8
 8007550:	444c      	add	r4, r9
 8007552:	1b2d      	subs	r5, r5, r4
 8007554:	1963      	adds	r3, r4, r5
 8007556:	42bb      	cmp	r3, r7
 8007558:	db04      	blt.n	8007564 <__s2b+0x78>
 800755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755e:	2509      	movs	r5, #9
 8007560:	340a      	adds	r4, #10
 8007562:	e7f6      	b.n	8007552 <__s2b+0x66>
 8007564:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007568:	4601      	mov	r1, r0
 800756a:	220a      	movs	r2, #10
 800756c:	4630      	mov	r0, r6
 800756e:	3b30      	subs	r3, #48	@ 0x30
 8007570:	f7ff ff76 	bl	8007460 <__multadd>
 8007574:	e7ee      	b.n	8007554 <__s2b+0x68>
 8007576:	bf00      	nop
 8007578:	0800a7d0 	.word	0x0800a7d0
 800757c:	0800a7e1 	.word	0x0800a7e1

08007580 <__hi0bits>:
 8007580:	4603      	mov	r3, r0
 8007582:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007586:	bf3a      	itte	cc
 8007588:	0403      	lslcc	r3, r0, #16
 800758a:	2010      	movcc	r0, #16
 800758c:	2000      	movcs	r0, #0
 800758e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007592:	bf3c      	itt	cc
 8007594:	021b      	lslcc	r3, r3, #8
 8007596:	3008      	addcc	r0, #8
 8007598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800759c:	bf3c      	itt	cc
 800759e:	011b      	lslcc	r3, r3, #4
 80075a0:	3004      	addcc	r0, #4
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a6:	bf3c      	itt	cc
 80075a8:	009b      	lslcc	r3, r3, #2
 80075aa:	3002      	addcc	r0, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	db05      	blt.n	80075bc <__hi0bits+0x3c>
 80075b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80075b4:	f100 0001 	add.w	r0, r0, #1
 80075b8:	bf08      	it	eq
 80075ba:	2020      	moveq	r0, #32
 80075bc:	4770      	bx	lr

080075be <__lo0bits>:
 80075be:	6803      	ldr	r3, [r0, #0]
 80075c0:	4602      	mov	r2, r0
 80075c2:	f013 0007 	ands.w	r0, r3, #7
 80075c6:	d00b      	beq.n	80075e0 <__lo0bits+0x22>
 80075c8:	07d9      	lsls	r1, r3, #31
 80075ca:	d421      	bmi.n	8007610 <__lo0bits+0x52>
 80075cc:	0798      	lsls	r0, r3, #30
 80075ce:	bf49      	itett	mi
 80075d0:	085b      	lsrmi	r3, r3, #1
 80075d2:	089b      	lsrpl	r3, r3, #2
 80075d4:	2001      	movmi	r0, #1
 80075d6:	6013      	strmi	r3, [r2, #0]
 80075d8:	bf5c      	itt	pl
 80075da:	2002      	movpl	r0, #2
 80075dc:	6013      	strpl	r3, [r2, #0]
 80075de:	4770      	bx	lr
 80075e0:	b299      	uxth	r1, r3
 80075e2:	b909      	cbnz	r1, 80075e8 <__lo0bits+0x2a>
 80075e4:	2010      	movs	r0, #16
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b2d9      	uxtb	r1, r3
 80075ea:	b909      	cbnz	r1, 80075f0 <__lo0bits+0x32>
 80075ec:	3008      	adds	r0, #8
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	0719      	lsls	r1, r3, #28
 80075f2:	bf04      	itt	eq
 80075f4:	091b      	lsreq	r3, r3, #4
 80075f6:	3004      	addeq	r0, #4
 80075f8:	0799      	lsls	r1, r3, #30
 80075fa:	bf04      	itt	eq
 80075fc:	089b      	lsreq	r3, r3, #2
 80075fe:	3002      	addeq	r0, #2
 8007600:	07d9      	lsls	r1, r3, #31
 8007602:	d403      	bmi.n	800760c <__lo0bits+0x4e>
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	f100 0001 	add.w	r0, r0, #1
 800760a:	d003      	beq.n	8007614 <__lo0bits+0x56>
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	4770      	bx	lr
 8007610:	2000      	movs	r0, #0
 8007612:	4770      	bx	lr
 8007614:	2020      	movs	r0, #32
 8007616:	4770      	bx	lr

08007618 <__i2b>:
 8007618:	b510      	push	{r4, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	2101      	movs	r1, #1
 800761e:	f7ff febd 	bl	800739c <_Balloc>
 8007622:	4602      	mov	r2, r0
 8007624:	b928      	cbnz	r0, 8007632 <__i2b+0x1a>
 8007626:	f240 1145 	movw	r1, #325	@ 0x145
 800762a:	4b04      	ldr	r3, [pc, #16]	@ (800763c <__i2b+0x24>)
 800762c:	4804      	ldr	r0, [pc, #16]	@ (8007640 <__i2b+0x28>)
 800762e:	f001 fb93 	bl	8008d58 <__assert_func>
 8007632:	2301      	movs	r3, #1
 8007634:	6144      	str	r4, [r0, #20]
 8007636:	6103      	str	r3, [r0, #16]
 8007638:	bd10      	pop	{r4, pc}
 800763a:	bf00      	nop
 800763c:	0800a7d0 	.word	0x0800a7d0
 8007640:	0800a7e1 	.word	0x0800a7e1

08007644 <__multiply>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	4617      	mov	r7, r2
 800764a:	690a      	ldr	r2, [r1, #16]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4689      	mov	r9, r1
 8007650:	429a      	cmp	r2, r3
 8007652:	bfa2      	ittt	ge
 8007654:	463b      	movge	r3, r7
 8007656:	460f      	movge	r7, r1
 8007658:	4699      	movge	r9, r3
 800765a:	693d      	ldr	r5, [r7, #16]
 800765c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	eb05 060a 	add.w	r6, r5, sl
 8007668:	42b3      	cmp	r3, r6
 800766a:	b085      	sub	sp, #20
 800766c:	bfb8      	it	lt
 800766e:	3101      	addlt	r1, #1
 8007670:	f7ff fe94 	bl	800739c <_Balloc>
 8007674:	b930      	cbnz	r0, 8007684 <__multiply+0x40>
 8007676:	4602      	mov	r2, r0
 8007678:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800767c:	4b40      	ldr	r3, [pc, #256]	@ (8007780 <__multiply+0x13c>)
 800767e:	4841      	ldr	r0, [pc, #260]	@ (8007784 <__multiply+0x140>)
 8007680:	f001 fb6a 	bl	8008d58 <__assert_func>
 8007684:	f100 0414 	add.w	r4, r0, #20
 8007688:	4623      	mov	r3, r4
 800768a:	2200      	movs	r2, #0
 800768c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007690:	4573      	cmp	r3, lr
 8007692:	d320      	bcc.n	80076d6 <__multiply+0x92>
 8007694:	f107 0814 	add.w	r8, r7, #20
 8007698:	f109 0114 	add.w	r1, r9, #20
 800769c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80076a0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80076a4:	9302      	str	r3, [sp, #8]
 80076a6:	1beb      	subs	r3, r5, r7
 80076a8:	3b15      	subs	r3, #21
 80076aa:	f023 0303 	bic.w	r3, r3, #3
 80076ae:	3304      	adds	r3, #4
 80076b0:	3715      	adds	r7, #21
 80076b2:	42bd      	cmp	r5, r7
 80076b4:	bf38      	it	cc
 80076b6:	2304      	movcc	r3, #4
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	9103      	str	r1, [sp, #12]
 80076be:	428b      	cmp	r3, r1
 80076c0:	d80c      	bhi.n	80076dc <__multiply+0x98>
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	dd03      	ble.n	80076ce <__multiply+0x8a>
 80076c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d055      	beq.n	800777a <__multiply+0x136>
 80076ce:	6106      	str	r6, [r0, #16]
 80076d0:	b005      	add	sp, #20
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	f843 2b04 	str.w	r2, [r3], #4
 80076da:	e7d9      	b.n	8007690 <__multiply+0x4c>
 80076dc:	f8b1 a000 	ldrh.w	sl, [r1]
 80076e0:	f1ba 0f00 	cmp.w	sl, #0
 80076e4:	d01f      	beq.n	8007726 <__multiply+0xe2>
 80076e6:	46c4      	mov	ip, r8
 80076e8:	46a1      	mov	r9, r4
 80076ea:	2700      	movs	r7, #0
 80076ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076f0:	f8d9 3000 	ldr.w	r3, [r9]
 80076f4:	fa1f fb82 	uxth.w	fp, r2
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	fb0a 330b 	mla	r3, sl, fp, r3
 80076fe:	443b      	add	r3, r7
 8007700:	f8d9 7000 	ldr.w	r7, [r9]
 8007704:	0c12      	lsrs	r2, r2, #16
 8007706:	0c3f      	lsrs	r7, r7, #16
 8007708:	fb0a 7202 	mla	r2, sl, r2, r7
 800770c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007716:	4565      	cmp	r5, ip
 8007718:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800771c:	f849 3b04 	str.w	r3, [r9], #4
 8007720:	d8e4      	bhi.n	80076ec <__multiply+0xa8>
 8007722:	9b01      	ldr	r3, [sp, #4]
 8007724:	50e7      	str	r7, [r4, r3]
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	3104      	adds	r1, #4
 800772a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800772e:	f1b9 0f00 	cmp.w	r9, #0
 8007732:	d020      	beq.n	8007776 <__multiply+0x132>
 8007734:	4647      	mov	r7, r8
 8007736:	46a4      	mov	ip, r4
 8007738:	f04f 0a00 	mov.w	sl, #0
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	f8b7 b000 	ldrh.w	fp, [r7]
 8007742:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007746:	b29b      	uxth	r3, r3
 8007748:	fb09 220b 	mla	r2, r9, fp, r2
 800774c:	4452      	add	r2, sl
 800774e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007752:	f84c 3b04 	str.w	r3, [ip], #4
 8007756:	f857 3b04 	ldr.w	r3, [r7], #4
 800775a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800775e:	f8bc 3000 	ldrh.w	r3, [ip]
 8007762:	42bd      	cmp	r5, r7
 8007764:	fb09 330a 	mla	r3, r9, sl, r3
 8007768:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800776c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007770:	d8e5      	bhi.n	800773e <__multiply+0xfa>
 8007772:	9a01      	ldr	r2, [sp, #4]
 8007774:	50a3      	str	r3, [r4, r2]
 8007776:	3404      	adds	r4, #4
 8007778:	e79f      	b.n	80076ba <__multiply+0x76>
 800777a:	3e01      	subs	r6, #1
 800777c:	e7a1      	b.n	80076c2 <__multiply+0x7e>
 800777e:	bf00      	nop
 8007780:	0800a7d0 	.word	0x0800a7d0
 8007784:	0800a7e1 	.word	0x0800a7e1

08007788 <__pow5mult>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	4615      	mov	r5, r2
 800778e:	f012 0203 	ands.w	r2, r2, #3
 8007792:	4607      	mov	r7, r0
 8007794:	460e      	mov	r6, r1
 8007796:	d007      	beq.n	80077a8 <__pow5mult+0x20>
 8007798:	4c25      	ldr	r4, [pc, #148]	@ (8007830 <__pow5mult+0xa8>)
 800779a:	3a01      	subs	r2, #1
 800779c:	2300      	movs	r3, #0
 800779e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077a2:	f7ff fe5d 	bl	8007460 <__multadd>
 80077a6:	4606      	mov	r6, r0
 80077a8:	10ad      	asrs	r5, r5, #2
 80077aa:	d03d      	beq.n	8007828 <__pow5mult+0xa0>
 80077ac:	69fc      	ldr	r4, [r7, #28]
 80077ae:	b97c      	cbnz	r4, 80077d0 <__pow5mult+0x48>
 80077b0:	2010      	movs	r0, #16
 80077b2:	f7ff fd3d 	bl	8007230 <malloc>
 80077b6:	4602      	mov	r2, r0
 80077b8:	61f8      	str	r0, [r7, #28]
 80077ba:	b928      	cbnz	r0, 80077c8 <__pow5mult+0x40>
 80077bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007834 <__pow5mult+0xac>)
 80077c2:	481d      	ldr	r0, [pc, #116]	@ (8007838 <__pow5mult+0xb0>)
 80077c4:	f001 fac8 	bl	8008d58 <__assert_func>
 80077c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077cc:	6004      	str	r4, [r0, #0]
 80077ce:	60c4      	str	r4, [r0, #12]
 80077d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077d8:	b94c      	cbnz	r4, 80077ee <__pow5mult+0x66>
 80077da:	f240 2171 	movw	r1, #625	@ 0x271
 80077de:	4638      	mov	r0, r7
 80077e0:	f7ff ff1a 	bl	8007618 <__i2b>
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ec:	6003      	str	r3, [r0, #0]
 80077ee:	f04f 0900 	mov.w	r9, #0
 80077f2:	07eb      	lsls	r3, r5, #31
 80077f4:	d50a      	bpl.n	800780c <__pow5mult+0x84>
 80077f6:	4631      	mov	r1, r6
 80077f8:	4622      	mov	r2, r4
 80077fa:	4638      	mov	r0, r7
 80077fc:	f7ff ff22 	bl	8007644 <__multiply>
 8007800:	4680      	mov	r8, r0
 8007802:	4631      	mov	r1, r6
 8007804:	4638      	mov	r0, r7
 8007806:	f7ff fe09 	bl	800741c <_Bfree>
 800780a:	4646      	mov	r6, r8
 800780c:	106d      	asrs	r5, r5, #1
 800780e:	d00b      	beq.n	8007828 <__pow5mult+0xa0>
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	b938      	cbnz	r0, 8007824 <__pow5mult+0x9c>
 8007814:	4622      	mov	r2, r4
 8007816:	4621      	mov	r1, r4
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ff13 	bl	8007644 <__multiply>
 800781e:	6020      	str	r0, [r4, #0]
 8007820:	f8c0 9000 	str.w	r9, [r0]
 8007824:	4604      	mov	r4, r0
 8007826:	e7e4      	b.n	80077f2 <__pow5mult+0x6a>
 8007828:	4630      	mov	r0, r6
 800782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782e:	bf00      	nop
 8007830:	0800a8f4 	.word	0x0800a8f4
 8007834:	0800a761 	.word	0x0800a761
 8007838:	0800a7e1 	.word	0x0800a7e1

0800783c <__lshift>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	460c      	mov	r4, r1
 8007842:	4607      	mov	r7, r0
 8007844:	4691      	mov	r9, r2
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	6849      	ldr	r1, [r1, #4]
 800784a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007854:	f108 0601 	add.w	r6, r8, #1
 8007858:	42b3      	cmp	r3, r6
 800785a:	db0b      	blt.n	8007874 <__lshift+0x38>
 800785c:	4638      	mov	r0, r7
 800785e:	f7ff fd9d 	bl	800739c <_Balloc>
 8007862:	4605      	mov	r5, r0
 8007864:	b948      	cbnz	r0, 800787a <__lshift+0x3e>
 8007866:	4602      	mov	r2, r0
 8007868:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800786c:	4b27      	ldr	r3, [pc, #156]	@ (800790c <__lshift+0xd0>)
 800786e:	4828      	ldr	r0, [pc, #160]	@ (8007910 <__lshift+0xd4>)
 8007870:	f001 fa72 	bl	8008d58 <__assert_func>
 8007874:	3101      	adds	r1, #1
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	e7ee      	b.n	8007858 <__lshift+0x1c>
 800787a:	2300      	movs	r3, #0
 800787c:	f100 0114 	add.w	r1, r0, #20
 8007880:	f100 0210 	add.w	r2, r0, #16
 8007884:	4618      	mov	r0, r3
 8007886:	4553      	cmp	r3, sl
 8007888:	db33      	blt.n	80078f2 <__lshift+0xb6>
 800788a:	6920      	ldr	r0, [r4, #16]
 800788c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007890:	f104 0314 	add.w	r3, r4, #20
 8007894:	f019 091f 	ands.w	r9, r9, #31
 8007898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800789c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078a0:	d02b      	beq.n	80078fa <__lshift+0xbe>
 80078a2:	468a      	mov	sl, r1
 80078a4:	2200      	movs	r2, #0
 80078a6:	f1c9 0e20 	rsb	lr, r9, #32
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	fa00 f009 	lsl.w	r0, r0, r9
 80078b0:	4310      	orrs	r0, r2
 80078b2:	f84a 0b04 	str.w	r0, [sl], #4
 80078b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ba:	459c      	cmp	ip, r3
 80078bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80078c0:	d8f3      	bhi.n	80078aa <__lshift+0x6e>
 80078c2:	ebac 0304 	sub.w	r3, ip, r4
 80078c6:	3b15      	subs	r3, #21
 80078c8:	f023 0303 	bic.w	r3, r3, #3
 80078cc:	3304      	adds	r3, #4
 80078ce:	f104 0015 	add.w	r0, r4, #21
 80078d2:	4560      	cmp	r0, ip
 80078d4:	bf88      	it	hi
 80078d6:	2304      	movhi	r3, #4
 80078d8:	50ca      	str	r2, [r1, r3]
 80078da:	b10a      	cbz	r2, 80078e0 <__lshift+0xa4>
 80078dc:	f108 0602 	add.w	r6, r8, #2
 80078e0:	3e01      	subs	r6, #1
 80078e2:	4638      	mov	r0, r7
 80078e4:	4621      	mov	r1, r4
 80078e6:	612e      	str	r6, [r5, #16]
 80078e8:	f7ff fd98 	bl	800741c <_Bfree>
 80078ec:	4628      	mov	r0, r5
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80078f6:	3301      	adds	r3, #1
 80078f8:	e7c5      	b.n	8007886 <__lshift+0x4a>
 80078fa:	3904      	subs	r1, #4
 80078fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007900:	459c      	cmp	ip, r3
 8007902:	f841 2f04 	str.w	r2, [r1, #4]!
 8007906:	d8f9      	bhi.n	80078fc <__lshift+0xc0>
 8007908:	e7ea      	b.n	80078e0 <__lshift+0xa4>
 800790a:	bf00      	nop
 800790c:	0800a7d0 	.word	0x0800a7d0
 8007910:	0800a7e1 	.word	0x0800a7e1

08007914 <__mcmp>:
 8007914:	4603      	mov	r3, r0
 8007916:	690a      	ldr	r2, [r1, #16]
 8007918:	6900      	ldr	r0, [r0, #16]
 800791a:	b530      	push	{r4, r5, lr}
 800791c:	1a80      	subs	r0, r0, r2
 800791e:	d10e      	bne.n	800793e <__mcmp+0x2a>
 8007920:	3314      	adds	r3, #20
 8007922:	3114      	adds	r1, #20
 8007924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800792c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007934:	4295      	cmp	r5, r2
 8007936:	d003      	beq.n	8007940 <__mcmp+0x2c>
 8007938:	d205      	bcs.n	8007946 <__mcmp+0x32>
 800793a:	f04f 30ff 	mov.w	r0, #4294967295
 800793e:	bd30      	pop	{r4, r5, pc}
 8007940:	42a3      	cmp	r3, r4
 8007942:	d3f3      	bcc.n	800792c <__mcmp+0x18>
 8007944:	e7fb      	b.n	800793e <__mcmp+0x2a>
 8007946:	2001      	movs	r0, #1
 8007948:	e7f9      	b.n	800793e <__mcmp+0x2a>
	...

0800794c <__mdiff>:
 800794c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	4689      	mov	r9, r1
 8007952:	4606      	mov	r6, r0
 8007954:	4611      	mov	r1, r2
 8007956:	4648      	mov	r0, r9
 8007958:	4614      	mov	r4, r2
 800795a:	f7ff ffdb 	bl	8007914 <__mcmp>
 800795e:	1e05      	subs	r5, r0, #0
 8007960:	d112      	bne.n	8007988 <__mdiff+0x3c>
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fd19 	bl	800739c <_Balloc>
 800796a:	4602      	mov	r2, r0
 800796c:	b928      	cbnz	r0, 800797a <__mdiff+0x2e>
 800796e:	f240 2137 	movw	r1, #567	@ 0x237
 8007972:	4b3e      	ldr	r3, [pc, #248]	@ (8007a6c <__mdiff+0x120>)
 8007974:	483e      	ldr	r0, [pc, #248]	@ (8007a70 <__mdiff+0x124>)
 8007976:	f001 f9ef 	bl	8008d58 <__assert_func>
 800797a:	2301      	movs	r3, #1
 800797c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007980:	4610      	mov	r0, r2
 8007982:	b003      	add	sp, #12
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	bfbc      	itt	lt
 800798a:	464b      	movlt	r3, r9
 800798c:	46a1      	movlt	r9, r4
 800798e:	4630      	mov	r0, r6
 8007990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007994:	bfba      	itte	lt
 8007996:	461c      	movlt	r4, r3
 8007998:	2501      	movlt	r5, #1
 800799a:	2500      	movge	r5, #0
 800799c:	f7ff fcfe 	bl	800739c <_Balloc>
 80079a0:	4602      	mov	r2, r0
 80079a2:	b918      	cbnz	r0, 80079ac <__mdiff+0x60>
 80079a4:	f240 2145 	movw	r1, #581	@ 0x245
 80079a8:	4b30      	ldr	r3, [pc, #192]	@ (8007a6c <__mdiff+0x120>)
 80079aa:	e7e3      	b.n	8007974 <__mdiff+0x28>
 80079ac:	f100 0b14 	add.w	fp, r0, #20
 80079b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80079b4:	f109 0310 	add.w	r3, r9, #16
 80079b8:	60c5      	str	r5, [r0, #12]
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	f109 0514 	add.w	r5, r9, #20
 80079c2:	46d9      	mov	r9, fp
 80079c4:	6926      	ldr	r6, [r4, #16]
 80079c6:	f104 0e14 	add.w	lr, r4, #20
 80079ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079de:	b281      	uxth	r1, r0
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	fa1f f38a 	uxth.w	r3, sl
 80079e6:	1a5b      	subs	r3, r3, r1
 80079e8:	0c00      	lsrs	r0, r0, #16
 80079ea:	4463      	add	r3, ip
 80079ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80079f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079fa:	4576      	cmp	r6, lr
 80079fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a00:	f849 3b04 	str.w	r3, [r9], #4
 8007a04:	d8e6      	bhi.n	80079d4 <__mdiff+0x88>
 8007a06:	1b33      	subs	r3, r6, r4
 8007a08:	3b15      	subs	r3, #21
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	3415      	adds	r4, #21
 8007a10:	3304      	adds	r3, #4
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	bf38      	it	cc
 8007a16:	2304      	movcc	r3, #4
 8007a18:	441d      	add	r5, r3
 8007a1a:	445b      	add	r3, fp
 8007a1c:	461e      	mov	r6, r3
 8007a1e:	462c      	mov	r4, r5
 8007a20:	4544      	cmp	r4, r8
 8007a22:	d30e      	bcc.n	8007a42 <__mdiff+0xf6>
 8007a24:	f108 0103 	add.w	r1, r8, #3
 8007a28:	1b49      	subs	r1, r1, r5
 8007a2a:	f021 0103 	bic.w	r1, r1, #3
 8007a2e:	3d03      	subs	r5, #3
 8007a30:	45a8      	cmp	r8, r5
 8007a32:	bf38      	it	cc
 8007a34:	2100      	movcc	r1, #0
 8007a36:	440b      	add	r3, r1
 8007a38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a3c:	b199      	cbz	r1, 8007a66 <__mdiff+0x11a>
 8007a3e:	6117      	str	r7, [r2, #16]
 8007a40:	e79e      	b.n	8007980 <__mdiff+0x34>
 8007a42:	46e6      	mov	lr, ip
 8007a44:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a48:	fa1f fc81 	uxth.w	ip, r1
 8007a4c:	44f4      	add	ip, lr
 8007a4e:	0c08      	lsrs	r0, r1, #16
 8007a50:	4471      	add	r1, lr
 8007a52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a56:	b289      	uxth	r1, r1
 8007a58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a60:	f846 1b04 	str.w	r1, [r6], #4
 8007a64:	e7dc      	b.n	8007a20 <__mdiff+0xd4>
 8007a66:	3f01      	subs	r7, #1
 8007a68:	e7e6      	b.n	8007a38 <__mdiff+0xec>
 8007a6a:	bf00      	nop
 8007a6c:	0800a7d0 	.word	0x0800a7d0
 8007a70:	0800a7e1 	.word	0x0800a7e1

08007a74 <__ulp>:
 8007a74:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab0 <__ulp+0x3c>)
 8007a76:	400b      	ands	r3, r1
 8007a78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc08      	bgt.n	8007a92 <__ulp+0x1e>
 8007a80:	425b      	negs	r3, r3
 8007a82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a8a:	da04      	bge.n	8007a96 <__ulp+0x22>
 8007a8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a90:	4113      	asrs	r3, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	e008      	b.n	8007aa8 <__ulp+0x34>
 8007a96:	f1a2 0314 	sub.w	r3, r2, #20
 8007a9a:	2b1e      	cmp	r3, #30
 8007a9c:	bfd6      	itet	le
 8007a9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007aa2:	2201      	movgt	r2, #1
 8007aa4:	40da      	lsrle	r2, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	7ff00000 	.word	0x7ff00000

08007ab4 <__b2d>:
 8007ab4:	6902      	ldr	r2, [r0, #16]
 8007ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab8:	f100 0614 	add.w	r6, r0, #20
 8007abc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007ac0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007ac4:	4f1e      	ldr	r7, [pc, #120]	@ (8007b40 <__b2d+0x8c>)
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff fd5a 	bl	8007580 <__hi0bits>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f1c0 0020 	rsb	r0, r0, #32
 8007ad2:	2b0a      	cmp	r3, #10
 8007ad4:	f1a2 0504 	sub.w	r5, r2, #4
 8007ad8:	6008      	str	r0, [r1, #0]
 8007ada:	dc12      	bgt.n	8007b02 <__b2d+0x4e>
 8007adc:	42ae      	cmp	r6, r5
 8007ade:	bf2c      	ite	cs
 8007ae0:	2200      	movcs	r2, #0
 8007ae2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007ae6:	f1c3 0c0b 	rsb	ip, r3, #11
 8007aea:	3315      	adds	r3, #21
 8007aec:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007af0:	fa04 f303 	lsl.w	r3, r4, r3
 8007af4:	fa22 f20c 	lsr.w	r2, r2, ip
 8007af8:	ea4e 0107 	orr.w	r1, lr, r7
 8007afc:	431a      	orrs	r2, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b02:	42ae      	cmp	r6, r5
 8007b04:	bf36      	itet	cc
 8007b06:	f1a2 0508 	subcc.w	r5, r2, #8
 8007b0a:	2200      	movcs	r2, #0
 8007b0c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007b10:	3b0b      	subs	r3, #11
 8007b12:	d012      	beq.n	8007b3a <__b2d+0x86>
 8007b14:	f1c3 0720 	rsb	r7, r3, #32
 8007b18:	fa22 f107 	lsr.w	r1, r2, r7
 8007b1c:	409c      	lsls	r4, r3
 8007b1e:	430c      	orrs	r4, r1
 8007b20:	42b5      	cmp	r5, r6
 8007b22:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007b26:	bf94      	ite	ls
 8007b28:	2400      	movls	r4, #0
 8007b2a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	40fc      	lsrs	r4, r7
 8007b32:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007b36:	4322      	orrs	r2, r4
 8007b38:	e7e1      	b.n	8007afe <__b2d+0x4a>
 8007b3a:	ea44 0107 	orr.w	r1, r4, r7
 8007b3e:	e7de      	b.n	8007afe <__b2d+0x4a>
 8007b40:	3ff00000 	.word	0x3ff00000

08007b44 <__d2b>:
 8007b44:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4690      	mov	r8, r2
 8007b4c:	4699      	mov	r9, r3
 8007b4e:	9e08      	ldr	r6, [sp, #32]
 8007b50:	f7ff fc24 	bl	800739c <_Balloc>
 8007b54:	4604      	mov	r4, r0
 8007b56:	b930      	cbnz	r0, 8007b66 <__d2b+0x22>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b5e:	4b23      	ldr	r3, [pc, #140]	@ (8007bec <__d2b+0xa8>)
 8007b60:	4823      	ldr	r0, [pc, #140]	@ (8007bf0 <__d2b+0xac>)
 8007b62:	f001 f8f9 	bl	8008d58 <__assert_func>
 8007b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b6e:	b10d      	cbz	r5, 8007b74 <__d2b+0x30>
 8007b70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	f1b8 0300 	subs.w	r3, r8, #0
 8007b7a:	d024      	beq.n	8007bc6 <__d2b+0x82>
 8007b7c:	4668      	mov	r0, sp
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	f7ff fd1d 	bl	80075be <__lo0bits>
 8007b84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b88:	b1d8      	cbz	r0, 8007bc2 <__d2b+0x7e>
 8007b8a:	f1c0 0320 	rsb	r3, r0, #32
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	430b      	orrs	r3, r1
 8007b94:	40c2      	lsrs	r2, r0
 8007b96:	6163      	str	r3, [r4, #20]
 8007b98:	9201      	str	r2, [sp, #4]
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bf0c      	ite	eq
 8007ba0:	2201      	moveq	r2, #1
 8007ba2:	2202      	movne	r2, #2
 8007ba4:	61a3      	str	r3, [r4, #24]
 8007ba6:	6122      	str	r2, [r4, #16]
 8007ba8:	b1ad      	cbz	r5, 8007bd6 <__d2b+0x92>
 8007baa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007bae:	4405      	add	r5, r0
 8007bb0:	6035      	str	r5, [r6, #0]
 8007bb2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb8:	6018      	str	r0, [r3, #0]
 8007bba:	4620      	mov	r0, r4
 8007bbc:	b002      	add	sp, #8
 8007bbe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007bc2:	6161      	str	r1, [r4, #20]
 8007bc4:	e7e9      	b.n	8007b9a <__d2b+0x56>
 8007bc6:	a801      	add	r0, sp, #4
 8007bc8:	f7ff fcf9 	bl	80075be <__lo0bits>
 8007bcc:	9b01      	ldr	r3, [sp, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	6163      	str	r3, [r4, #20]
 8007bd2:	3020      	adds	r0, #32
 8007bd4:	e7e7      	b.n	8007ba6 <__d2b+0x62>
 8007bd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bde:	6030      	str	r0, [r6, #0]
 8007be0:	6918      	ldr	r0, [r3, #16]
 8007be2:	f7ff fccd 	bl	8007580 <__hi0bits>
 8007be6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bea:	e7e4      	b.n	8007bb6 <__d2b+0x72>
 8007bec:	0800a7d0 	.word	0x0800a7d0
 8007bf0:	0800a7e1 	.word	0x0800a7e1

08007bf4 <__ratio>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	e9cd 1000 	strd	r1, r0, [sp]
 8007bfe:	a902      	add	r1, sp, #8
 8007c00:	f7ff ff58 	bl	8007ab4 <__b2d>
 8007c04:	468b      	mov	fp, r1
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	9800      	ldr	r0, [sp, #0]
 8007c0c:	a903      	add	r1, sp, #12
 8007c0e:	f7ff ff51 	bl	8007ab4 <__b2d>
 8007c12:	460d      	mov	r5, r1
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	4689      	mov	r9, r1
 8007c18:	6919      	ldr	r1, [r3, #16]
 8007c1a:	9b00      	ldr	r3, [sp, #0]
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	4630      	mov	r0, r6
 8007c22:	1ac9      	subs	r1, r1, r3
 8007c24:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfcd      	iteet	gt
 8007c32:	463a      	movgt	r2, r7
 8007c34:	462a      	movle	r2, r5
 8007c36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c3a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007c3e:	bfd8      	it	le
 8007c40:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007c44:	464b      	mov	r3, r9
 8007c46:	4622      	mov	r2, r4
 8007c48:	4659      	mov	r1, fp
 8007c4a:	f7f8 fd6f 	bl	800072c <__aeabi_ddiv>
 8007c4e:	b005      	add	sp, #20
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c54 <__copybits>:
 8007c54:	3901      	subs	r1, #1
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	1149      	asrs	r1, r1, #5
 8007c5a:	6914      	ldr	r4, [r2, #16]
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	f102 0314 	add.w	r3, r2, #20
 8007c62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c6a:	1f05      	subs	r5, r0, #4
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d30c      	bcc.n	8007c8a <__copybits+0x36>
 8007c70:	1aa3      	subs	r3, r4, r2
 8007c72:	3b11      	subs	r3, #17
 8007c74:	f023 0303 	bic.w	r3, r3, #3
 8007c78:	3211      	adds	r2, #17
 8007c7a:	42a2      	cmp	r2, r4
 8007c7c:	bf88      	it	hi
 8007c7e:	2300      	movhi	r3, #0
 8007c80:	4418      	add	r0, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	4288      	cmp	r0, r1
 8007c86:	d305      	bcc.n	8007c94 <__copybits+0x40>
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c8e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c92:	e7eb      	b.n	8007c6c <__copybits+0x18>
 8007c94:	f840 3b04 	str.w	r3, [r0], #4
 8007c98:	e7f4      	b.n	8007c84 <__copybits+0x30>

08007c9a <__any_on>:
 8007c9a:	f100 0214 	add.w	r2, r0, #20
 8007c9e:	6900      	ldr	r0, [r0, #16]
 8007ca0:	114b      	asrs	r3, r1, #5
 8007ca2:	4298      	cmp	r0, r3
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	db11      	blt.n	8007ccc <__any_on+0x32>
 8007ca8:	dd0a      	ble.n	8007cc0 <__any_on+0x26>
 8007caa:	f011 011f 	ands.w	r1, r1, #31
 8007cae:	d007      	beq.n	8007cc0 <__any_on+0x26>
 8007cb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007cb4:	fa24 f001 	lsr.w	r0, r4, r1
 8007cb8:	fa00 f101 	lsl.w	r1, r0, r1
 8007cbc:	428c      	cmp	r4, r1
 8007cbe:	d10b      	bne.n	8007cd8 <__any_on+0x3e>
 8007cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d803      	bhi.n	8007cd0 <__any_on+0x36>
 8007cc8:	2000      	movs	r0, #0
 8007cca:	bd10      	pop	{r4, pc}
 8007ccc:	4603      	mov	r3, r0
 8007cce:	e7f7      	b.n	8007cc0 <__any_on+0x26>
 8007cd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d0f5      	beq.n	8007cc4 <__any_on+0x2a>
 8007cd8:	2001      	movs	r0, #1
 8007cda:	e7f6      	b.n	8007cca <__any_on+0x30>

08007cdc <sulp>:
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	f7ff fec6 	bl	8007a74 <__ulp>
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	d011      	beq.n	8007d16 <sulp+0x3a>
 8007cf2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007cf6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dd0b      	ble.n	8007d16 <sulp+0x3a>
 8007cfe:	2400      	movs	r4, #0
 8007d00:	051b      	lsls	r3, r3, #20
 8007d02:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007d06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	462b      	mov	r3, r5
 8007d0e:	f7f8 fbe3 	bl	80004d8 <__aeabi_dmul>
 8007d12:	4604      	mov	r4, r0
 8007d14:	460d      	mov	r5, r1
 8007d16:	4620      	mov	r0, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007d20 <_strtod_l>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	b09f      	sub	sp, #124	@ 0x7c
 8007d26:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007d28:	2200      	movs	r2, #0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007d2e:	f04f 0a00 	mov.w	sl, #0
 8007d32:	f04f 0b00 	mov.w	fp, #0
 8007d36:	460a      	mov	r2, r1
 8007d38:	9005      	str	r0, [sp, #20]
 8007d3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d3c:	7811      	ldrb	r1, [r2, #0]
 8007d3e:	292b      	cmp	r1, #43	@ 0x2b
 8007d40:	d048      	beq.n	8007dd4 <_strtod_l+0xb4>
 8007d42:	d836      	bhi.n	8007db2 <_strtod_l+0x92>
 8007d44:	290d      	cmp	r1, #13
 8007d46:	d830      	bhi.n	8007daa <_strtod_l+0x8a>
 8007d48:	2908      	cmp	r1, #8
 8007d4a:	d830      	bhi.n	8007dae <_strtod_l+0x8e>
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d039      	beq.n	8007dc4 <_strtod_l+0xa4>
 8007d50:	2200      	movs	r2, #0
 8007d52:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007d56:	782a      	ldrb	r2, [r5, #0]
 8007d58:	2a30      	cmp	r2, #48	@ 0x30
 8007d5a:	f040 80b0 	bne.w	8007ebe <_strtod_l+0x19e>
 8007d5e:	786a      	ldrb	r2, [r5, #1]
 8007d60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d64:	2a58      	cmp	r2, #88	@ 0x58
 8007d66:	d16c      	bne.n	8007e42 <_strtod_l+0x122>
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d6c:	4a8f      	ldr	r2, [pc, #572]	@ (8007fac <_strtod_l+0x28c>)
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	ab1a      	add	r3, sp, #104	@ 0x68
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d78:	a919      	add	r1, sp, #100	@ 0x64
 8007d7a:	f001 f887 	bl	8008e8c <__gethex>
 8007d7e:	f010 060f 	ands.w	r6, r0, #15
 8007d82:	4604      	mov	r4, r0
 8007d84:	d005      	beq.n	8007d92 <_strtod_l+0x72>
 8007d86:	2e06      	cmp	r6, #6
 8007d88:	d126      	bne.n	8007dd8 <_strtod_l+0xb8>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007d90:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 8582 	bne.w	800889e <_strtod_l+0xb7e>
 8007d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d9c:	b1bb      	cbz	r3, 8007dce <_strtod_l+0xae>
 8007d9e:	4650      	mov	r0, sl
 8007da0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007da4:	b01f      	add	sp, #124	@ 0x7c
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007daa:	2920      	cmp	r1, #32
 8007dac:	d1d0      	bne.n	8007d50 <_strtod_l+0x30>
 8007dae:	3201      	adds	r2, #1
 8007db0:	e7c3      	b.n	8007d3a <_strtod_l+0x1a>
 8007db2:	292d      	cmp	r1, #45	@ 0x2d
 8007db4:	d1cc      	bne.n	8007d50 <_strtod_l+0x30>
 8007db6:	2101      	movs	r1, #1
 8007db8:	910e      	str	r1, [sp, #56]	@ 0x38
 8007dba:	1c51      	adds	r1, r2, #1
 8007dbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007dbe:	7852      	ldrb	r2, [r2, #1]
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	d1c7      	bne.n	8007d54 <_strtod_l+0x34>
 8007dc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007dc6:	9419      	str	r4, [sp, #100]	@ 0x64
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8566 	bne.w	800889a <_strtod_l+0xb7a>
 8007dce:	4650      	mov	r0, sl
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	e7e7      	b.n	8007da4 <_strtod_l+0x84>
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	e7ef      	b.n	8007db8 <_strtod_l+0x98>
 8007dd8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007dda:	b13a      	cbz	r2, 8007dec <_strtod_l+0xcc>
 8007ddc:	2135      	movs	r1, #53	@ 0x35
 8007dde:	a81c      	add	r0, sp, #112	@ 0x70
 8007de0:	f7ff ff38 	bl	8007c54 <__copybits>
 8007de4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007de6:	9805      	ldr	r0, [sp, #20]
 8007de8:	f7ff fb18 	bl	800741c <_Bfree>
 8007dec:	3e01      	subs	r6, #1
 8007dee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007df0:	2e04      	cmp	r6, #4
 8007df2:	d806      	bhi.n	8007e02 <_strtod_l+0xe2>
 8007df4:	e8df f006 	tbb	[pc, r6]
 8007df8:	201d0314 	.word	0x201d0314
 8007dfc:	14          	.byte	0x14
 8007dfd:	00          	.byte	0x00
 8007dfe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007e02:	05e1      	lsls	r1, r4, #23
 8007e04:	bf48      	it	mi
 8007e06:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007e0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e0e:	0d1b      	lsrs	r3, r3, #20
 8007e10:	051b      	lsls	r3, r3, #20
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1bd      	bne.n	8007d92 <_strtod_l+0x72>
 8007e16:	f7fe fb25 	bl	8006464 <__errno>
 8007e1a:	2322      	movs	r3, #34	@ 0x22
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	e7b8      	b.n	8007d92 <_strtod_l+0x72>
 8007e20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007e24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007e28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007e2c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007e30:	e7e7      	b.n	8007e02 <_strtod_l+0xe2>
 8007e32:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007fb0 <_strtod_l+0x290>
 8007e36:	e7e4      	b.n	8007e02 <_strtod_l+0xe2>
 8007e38:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8007e40:	e7df      	b.n	8007e02 <_strtod_l+0xe2>
 8007e42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	2b30      	cmp	r3, #48	@ 0x30
 8007e4c:	d0f9      	beq.n	8007e42 <_strtod_l+0x122>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d09f      	beq.n	8007d92 <_strtod_l+0x72>
 8007e52:	2301      	movs	r3, #1
 8007e54:	2700      	movs	r7, #0
 8007e56:	220a      	movs	r2, #10
 8007e58:	46b9      	mov	r9, r7
 8007e5a:	9308      	str	r3, [sp, #32]
 8007e5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e5e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e62:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007e64:	7805      	ldrb	r5, [r0, #0]
 8007e66:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007e6a:	b2d9      	uxtb	r1, r3
 8007e6c:	2909      	cmp	r1, #9
 8007e6e:	d928      	bls.n	8007ec2 <_strtod_l+0x1a2>
 8007e70:	2201      	movs	r2, #1
 8007e72:	4950      	ldr	r1, [pc, #320]	@ (8007fb4 <_strtod_l+0x294>)
 8007e74:	f7fe fa9a 	bl	80063ac <strncmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d032      	beq.n	8007ee2 <_strtod_l+0x1c2>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4603      	mov	r3, r0
 8007e82:	464d      	mov	r5, r9
 8007e84:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e86:	2a65      	cmp	r2, #101	@ 0x65
 8007e88:	d001      	beq.n	8007e8e <_strtod_l+0x16e>
 8007e8a:	2a45      	cmp	r2, #69	@ 0x45
 8007e8c:	d114      	bne.n	8007eb8 <_strtod_l+0x198>
 8007e8e:	b91d      	cbnz	r5, 8007e98 <_strtod_l+0x178>
 8007e90:	9a08      	ldr	r2, [sp, #32]
 8007e92:	4302      	orrs	r2, r0
 8007e94:	d096      	beq.n	8007dc4 <_strtod_l+0xa4>
 8007e96:	2500      	movs	r5, #0
 8007e98:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007e9a:	1c62      	adds	r2, r4, #1
 8007e9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e9e:	7862      	ldrb	r2, [r4, #1]
 8007ea0:	2a2b      	cmp	r2, #43	@ 0x2b
 8007ea2:	d07a      	beq.n	8007f9a <_strtod_l+0x27a>
 8007ea4:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ea6:	d07e      	beq.n	8007fa6 <_strtod_l+0x286>
 8007ea8:	f04f 0c00 	mov.w	ip, #0
 8007eac:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007eb0:	2909      	cmp	r1, #9
 8007eb2:	f240 8085 	bls.w	8007fc0 <_strtod_l+0x2a0>
 8007eb6:	9419      	str	r4, [sp, #100]	@ 0x64
 8007eb8:	f04f 0800 	mov.w	r8, #0
 8007ebc:	e0a5      	b.n	800800a <_strtod_l+0x2ea>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e7c8      	b.n	8007e54 <_strtod_l+0x134>
 8007ec2:	f1b9 0f08 	cmp.w	r9, #8
 8007ec6:	bfd8      	it	le
 8007ec8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007eca:	f100 0001 	add.w	r0, r0, #1
 8007ece:	bfd6      	itet	le
 8007ed0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ed4:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007ed8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007eda:	f109 0901 	add.w	r9, r9, #1
 8007ede:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ee0:	e7bf      	b.n	8007e62 <_strtod_l+0x142>
 8007ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ee8:	785a      	ldrb	r2, [r3, #1]
 8007eea:	f1b9 0f00 	cmp.w	r9, #0
 8007eee:	d03b      	beq.n	8007f68 <_strtod_l+0x248>
 8007ef0:	464d      	mov	r5, r9
 8007ef2:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ef4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007ef8:	2b09      	cmp	r3, #9
 8007efa:	d912      	bls.n	8007f22 <_strtod_l+0x202>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e7c2      	b.n	8007e86 <_strtod_l+0x166>
 8007f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f02:	3001      	adds	r0, #1
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f08:	785a      	ldrb	r2, [r3, #1]
 8007f0a:	2a30      	cmp	r2, #48	@ 0x30
 8007f0c:	d0f8      	beq.n	8007f00 <_strtod_l+0x1e0>
 8007f0e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	f200 84c8 	bhi.w	80088a8 <_strtod_l+0xb88>
 8007f18:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f22:	3a30      	subs	r2, #48	@ 0x30
 8007f24:	f100 0301 	add.w	r3, r0, #1
 8007f28:	d018      	beq.n	8007f5c <_strtod_l+0x23c>
 8007f2a:	462e      	mov	r6, r5
 8007f2c:	f04f 0e0a 	mov.w	lr, #10
 8007f30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f32:	4419      	add	r1, r3
 8007f34:	910a      	str	r1, [sp, #40]	@ 0x28
 8007f36:	1c71      	adds	r1, r6, #1
 8007f38:	eba1 0c05 	sub.w	ip, r1, r5
 8007f3c:	4563      	cmp	r3, ip
 8007f3e:	dc15      	bgt.n	8007f6c <_strtod_l+0x24c>
 8007f40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007f44:	182b      	adds	r3, r5, r0
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	f105 0501 	add.w	r5, r5, #1
 8007f4c:	4405      	add	r5, r0
 8007f4e:	dc1a      	bgt.n	8007f86 <_strtod_l+0x266>
 8007f50:	230a      	movs	r3, #10
 8007f52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f54:	fb03 2301 	mla	r3, r3, r1, r2
 8007f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f5e:	4618      	mov	r0, r3
 8007f60:	1c51      	adds	r1, r2, #1
 8007f62:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f64:	7852      	ldrb	r2, [r2, #1]
 8007f66:	e7c5      	b.n	8007ef4 <_strtod_l+0x1d4>
 8007f68:	4648      	mov	r0, r9
 8007f6a:	e7ce      	b.n	8007f0a <_strtod_l+0x1ea>
 8007f6c:	2e08      	cmp	r6, #8
 8007f6e:	dc05      	bgt.n	8007f7c <_strtod_l+0x25c>
 8007f70:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007f72:	fb0e f606 	mul.w	r6, lr, r6
 8007f76:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007f78:	460e      	mov	r6, r1
 8007f7a:	e7dc      	b.n	8007f36 <_strtod_l+0x216>
 8007f7c:	2910      	cmp	r1, #16
 8007f7e:	bfd8      	it	le
 8007f80:	fb0e f707 	mulle.w	r7, lr, r7
 8007f84:	e7f8      	b.n	8007f78 <_strtod_l+0x258>
 8007f86:	2b0f      	cmp	r3, #15
 8007f88:	bfdc      	itt	le
 8007f8a:	230a      	movle	r3, #10
 8007f8c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007f90:	e7e3      	b.n	8007f5a <_strtod_l+0x23a>
 8007f92:	2300      	movs	r3, #0
 8007f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f96:	2301      	movs	r3, #1
 8007f98:	e77a      	b.n	8007e90 <_strtod_l+0x170>
 8007f9a:	f04f 0c00 	mov.w	ip, #0
 8007f9e:	1ca2      	adds	r2, r4, #2
 8007fa0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fa2:	78a2      	ldrb	r2, [r4, #2]
 8007fa4:	e782      	b.n	8007eac <_strtod_l+0x18c>
 8007fa6:	f04f 0c01 	mov.w	ip, #1
 8007faa:	e7f8      	b.n	8007f9e <_strtod_l+0x27e>
 8007fac:	0800aa04 	.word	0x0800aa04
 8007fb0:	7ff00000 	.word	0x7ff00000
 8007fb4:	0800a83a 	.word	0x0800a83a
 8007fb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fba:	1c51      	adds	r1, r2, #1
 8007fbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007fbe:	7852      	ldrb	r2, [r2, #1]
 8007fc0:	2a30      	cmp	r2, #48	@ 0x30
 8007fc2:	d0f9      	beq.n	8007fb8 <_strtod_l+0x298>
 8007fc4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007fc8:	2908      	cmp	r1, #8
 8007fca:	f63f af75 	bhi.w	8007eb8 <_strtod_l+0x198>
 8007fce:	f04f 080a 	mov.w	r8, #10
 8007fd2:	3a30      	subs	r2, #48	@ 0x30
 8007fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fd8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007fda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fdc:	1c56      	adds	r6, r2, #1
 8007fde:	9619      	str	r6, [sp, #100]	@ 0x64
 8007fe0:	7852      	ldrb	r2, [r2, #1]
 8007fe2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007fe6:	f1be 0f09 	cmp.w	lr, #9
 8007fea:	d939      	bls.n	8008060 <_strtod_l+0x340>
 8007fec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007fee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007ff2:	1a76      	subs	r6, r6, r1
 8007ff4:	2e08      	cmp	r6, #8
 8007ff6:	dc03      	bgt.n	8008000 <_strtod_l+0x2e0>
 8007ff8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ffa:	4588      	cmp	r8, r1
 8007ffc:	bfa8      	it	ge
 8007ffe:	4688      	movge	r8, r1
 8008000:	f1bc 0f00 	cmp.w	ip, #0
 8008004:	d001      	beq.n	800800a <_strtod_l+0x2ea>
 8008006:	f1c8 0800 	rsb	r8, r8, #0
 800800a:	2d00      	cmp	r5, #0
 800800c:	d14e      	bne.n	80080ac <_strtod_l+0x38c>
 800800e:	9908      	ldr	r1, [sp, #32]
 8008010:	4308      	orrs	r0, r1
 8008012:	f47f aebe 	bne.w	8007d92 <_strtod_l+0x72>
 8008016:	2b00      	cmp	r3, #0
 8008018:	f47f aed4 	bne.w	8007dc4 <_strtod_l+0xa4>
 800801c:	2a69      	cmp	r2, #105	@ 0x69
 800801e:	d028      	beq.n	8008072 <_strtod_l+0x352>
 8008020:	dc25      	bgt.n	800806e <_strtod_l+0x34e>
 8008022:	2a49      	cmp	r2, #73	@ 0x49
 8008024:	d025      	beq.n	8008072 <_strtod_l+0x352>
 8008026:	2a4e      	cmp	r2, #78	@ 0x4e
 8008028:	f47f aecc 	bne.w	8007dc4 <_strtod_l+0xa4>
 800802c:	4999      	ldr	r1, [pc, #612]	@ (8008294 <_strtod_l+0x574>)
 800802e:	a819      	add	r0, sp, #100	@ 0x64
 8008030:	f001 f94e 	bl	80092d0 <__match>
 8008034:	2800      	cmp	r0, #0
 8008036:	f43f aec5 	beq.w	8007dc4 <_strtod_l+0xa4>
 800803a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b28      	cmp	r3, #40	@ 0x28
 8008040:	d12e      	bne.n	80080a0 <_strtod_l+0x380>
 8008042:	4995      	ldr	r1, [pc, #596]	@ (8008298 <_strtod_l+0x578>)
 8008044:	aa1c      	add	r2, sp, #112	@ 0x70
 8008046:	a819      	add	r0, sp, #100	@ 0x64
 8008048:	f001 f956 	bl	80092f8 <__hexnan>
 800804c:	2805      	cmp	r0, #5
 800804e:	d127      	bne.n	80080a0 <_strtod_l+0x380>
 8008050:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008052:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008056:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800805a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800805e:	e698      	b.n	8007d92 <_strtod_l+0x72>
 8008060:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008062:	fb08 2101 	mla	r1, r8, r1, r2
 8008066:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800806a:	9209      	str	r2, [sp, #36]	@ 0x24
 800806c:	e7b5      	b.n	8007fda <_strtod_l+0x2ba>
 800806e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008070:	e7da      	b.n	8008028 <_strtod_l+0x308>
 8008072:	498a      	ldr	r1, [pc, #552]	@ (800829c <_strtod_l+0x57c>)
 8008074:	a819      	add	r0, sp, #100	@ 0x64
 8008076:	f001 f92b 	bl	80092d0 <__match>
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f aea2 	beq.w	8007dc4 <_strtod_l+0xa4>
 8008080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008082:	4987      	ldr	r1, [pc, #540]	@ (80082a0 <_strtod_l+0x580>)
 8008084:	3b01      	subs	r3, #1
 8008086:	a819      	add	r0, sp, #100	@ 0x64
 8008088:	9319      	str	r3, [sp, #100]	@ 0x64
 800808a:	f001 f921 	bl	80092d0 <__match>
 800808e:	b910      	cbnz	r0, 8008096 <_strtod_l+0x376>
 8008090:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008092:	3301      	adds	r3, #1
 8008094:	9319      	str	r3, [sp, #100]	@ 0x64
 8008096:	f04f 0a00 	mov.w	sl, #0
 800809a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80082a4 <_strtod_l+0x584>
 800809e:	e678      	b.n	8007d92 <_strtod_l+0x72>
 80080a0:	4881      	ldr	r0, [pc, #516]	@ (80082a8 <_strtod_l+0x588>)
 80080a2:	f000 fe53 	bl	8008d4c <nan>
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	e672      	b.n	8007d92 <_strtod_l+0x72>
 80080ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ae:	f1b9 0f00 	cmp.w	r9, #0
 80080b2:	bf08      	it	eq
 80080b4:	46a9      	moveq	r9, r5
 80080b6:	eba8 0303 	sub.w	r3, r8, r3
 80080ba:	2d10      	cmp	r5, #16
 80080bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80080be:	462c      	mov	r4, r5
 80080c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c2:	bfa8      	it	ge
 80080c4:	2410      	movge	r4, #16
 80080c6:	f7f8 f98d 	bl	80003e4 <__aeabi_ui2d>
 80080ca:	2d09      	cmp	r5, #9
 80080cc:	4682      	mov	sl, r0
 80080ce:	468b      	mov	fp, r1
 80080d0:	dc11      	bgt.n	80080f6 <_strtod_l+0x3d6>
 80080d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f43f ae5c 	beq.w	8007d92 <_strtod_l+0x72>
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	dd76      	ble.n	80081cc <_strtod_l+0x4ac>
 80080de:	2b16      	cmp	r3, #22
 80080e0:	dc5d      	bgt.n	800819e <_strtod_l+0x47e>
 80080e2:	4972      	ldr	r1, [pc, #456]	@ (80082ac <_strtod_l+0x58c>)
 80080e4:	4652      	mov	r2, sl
 80080e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080ea:	465b      	mov	r3, fp
 80080ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f0:	f7f8 f9f2 	bl	80004d8 <__aeabi_dmul>
 80080f4:	e7d7      	b.n	80080a6 <_strtod_l+0x386>
 80080f6:	4b6d      	ldr	r3, [pc, #436]	@ (80082ac <_strtod_l+0x58c>)
 80080f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008100:	f7f8 f9ea 	bl	80004d8 <__aeabi_dmul>
 8008104:	4682      	mov	sl, r0
 8008106:	4638      	mov	r0, r7
 8008108:	468b      	mov	fp, r1
 800810a:	f7f8 f96b 	bl	80003e4 <__aeabi_ui2d>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4650      	mov	r0, sl
 8008114:	4659      	mov	r1, fp
 8008116:	f7f8 f829 	bl	800016c <__adddf3>
 800811a:	2d0f      	cmp	r5, #15
 800811c:	4682      	mov	sl, r0
 800811e:	468b      	mov	fp, r1
 8008120:	ddd7      	ble.n	80080d2 <_strtod_l+0x3b2>
 8008122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008124:	1b2c      	subs	r4, r5, r4
 8008126:	441c      	add	r4, r3
 8008128:	2c00      	cmp	r4, #0
 800812a:	f340 8093 	ble.w	8008254 <_strtod_l+0x534>
 800812e:	f014 030f 	ands.w	r3, r4, #15
 8008132:	d00a      	beq.n	800814a <_strtod_l+0x42a>
 8008134:	495d      	ldr	r1, [pc, #372]	@ (80082ac <_strtod_l+0x58c>)
 8008136:	4652      	mov	r2, sl
 8008138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800813c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008140:	465b      	mov	r3, fp
 8008142:	f7f8 f9c9 	bl	80004d8 <__aeabi_dmul>
 8008146:	4682      	mov	sl, r0
 8008148:	468b      	mov	fp, r1
 800814a:	f034 040f 	bics.w	r4, r4, #15
 800814e:	d073      	beq.n	8008238 <_strtod_l+0x518>
 8008150:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008154:	dd49      	ble.n	80081ea <_strtod_l+0x4ca>
 8008156:	2400      	movs	r4, #0
 8008158:	46a0      	mov	r8, r4
 800815a:	46a1      	mov	r9, r4
 800815c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800815e:	2322      	movs	r3, #34	@ 0x22
 8008160:	f04f 0a00 	mov.w	sl, #0
 8008164:	9a05      	ldr	r2, [sp, #20]
 8008166:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80082a4 <_strtod_l+0x584>
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800816e:	2b00      	cmp	r3, #0
 8008170:	f43f ae0f 	beq.w	8007d92 <_strtod_l+0x72>
 8008174:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008176:	9805      	ldr	r0, [sp, #20]
 8008178:	f7ff f950 	bl	800741c <_Bfree>
 800817c:	4649      	mov	r1, r9
 800817e:	9805      	ldr	r0, [sp, #20]
 8008180:	f7ff f94c 	bl	800741c <_Bfree>
 8008184:	4641      	mov	r1, r8
 8008186:	9805      	ldr	r0, [sp, #20]
 8008188:	f7ff f948 	bl	800741c <_Bfree>
 800818c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800818e:	9805      	ldr	r0, [sp, #20]
 8008190:	f7ff f944 	bl	800741c <_Bfree>
 8008194:	4621      	mov	r1, r4
 8008196:	9805      	ldr	r0, [sp, #20]
 8008198:	f7ff f940 	bl	800741c <_Bfree>
 800819c:	e5f9      	b.n	8007d92 <_strtod_l+0x72>
 800819e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80081a4:	4293      	cmp	r3, r2
 80081a6:	dbbc      	blt.n	8008122 <_strtod_l+0x402>
 80081a8:	4c40      	ldr	r4, [pc, #256]	@ (80082ac <_strtod_l+0x58c>)
 80081aa:	f1c5 050f 	rsb	r5, r5, #15
 80081ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80081b2:	4652      	mov	r2, sl
 80081b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b8:	465b      	mov	r3, fp
 80081ba:	f7f8 f98d 	bl	80004d8 <__aeabi_dmul>
 80081be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c0:	1b5d      	subs	r5, r3, r5
 80081c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80081c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081ca:	e791      	b.n	80080f0 <_strtod_l+0x3d0>
 80081cc:	3316      	adds	r3, #22
 80081ce:	dba8      	blt.n	8008122 <_strtod_l+0x402>
 80081d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d2:	4650      	mov	r0, sl
 80081d4:	eba3 0808 	sub.w	r8, r3, r8
 80081d8:	4b34      	ldr	r3, [pc, #208]	@ (80082ac <_strtod_l+0x58c>)
 80081da:	4659      	mov	r1, fp
 80081dc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80081e0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80081e4:	f7f8 faa2 	bl	800072c <__aeabi_ddiv>
 80081e8:	e75d      	b.n	80080a6 <_strtod_l+0x386>
 80081ea:	2300      	movs	r3, #0
 80081ec:	4650      	mov	r0, sl
 80081ee:	4659      	mov	r1, fp
 80081f0:	461e      	mov	r6, r3
 80081f2:	4f2f      	ldr	r7, [pc, #188]	@ (80082b0 <_strtod_l+0x590>)
 80081f4:	1124      	asrs	r4, r4, #4
 80081f6:	2c01      	cmp	r4, #1
 80081f8:	dc21      	bgt.n	800823e <_strtod_l+0x51e>
 80081fa:	b10b      	cbz	r3, 8008200 <_strtod_l+0x4e0>
 80081fc:	4682      	mov	sl, r0
 80081fe:	468b      	mov	fp, r1
 8008200:	492b      	ldr	r1, [pc, #172]	@ (80082b0 <_strtod_l+0x590>)
 8008202:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008206:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800820a:	4652      	mov	r2, sl
 800820c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008210:	465b      	mov	r3, fp
 8008212:	f7f8 f961 	bl	80004d8 <__aeabi_dmul>
 8008216:	4b23      	ldr	r3, [pc, #140]	@ (80082a4 <_strtod_l+0x584>)
 8008218:	460a      	mov	r2, r1
 800821a:	400b      	ands	r3, r1
 800821c:	4925      	ldr	r1, [pc, #148]	@ (80082b4 <_strtod_l+0x594>)
 800821e:	4682      	mov	sl, r0
 8008220:	428b      	cmp	r3, r1
 8008222:	d898      	bhi.n	8008156 <_strtod_l+0x436>
 8008224:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008228:	428b      	cmp	r3, r1
 800822a:	bf86      	itte	hi
 800822c:	f04f 3aff 	movhi.w	sl, #4294967295
 8008230:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80082b8 <_strtod_l+0x598>
 8008234:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008238:	2300      	movs	r3, #0
 800823a:	9308      	str	r3, [sp, #32]
 800823c:	e076      	b.n	800832c <_strtod_l+0x60c>
 800823e:	07e2      	lsls	r2, r4, #31
 8008240:	d504      	bpl.n	800824c <_strtod_l+0x52c>
 8008242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008246:	f7f8 f947 	bl	80004d8 <__aeabi_dmul>
 800824a:	2301      	movs	r3, #1
 800824c:	3601      	adds	r6, #1
 800824e:	1064      	asrs	r4, r4, #1
 8008250:	3708      	adds	r7, #8
 8008252:	e7d0      	b.n	80081f6 <_strtod_l+0x4d6>
 8008254:	d0f0      	beq.n	8008238 <_strtod_l+0x518>
 8008256:	4264      	negs	r4, r4
 8008258:	f014 020f 	ands.w	r2, r4, #15
 800825c:	d00a      	beq.n	8008274 <_strtod_l+0x554>
 800825e:	4b13      	ldr	r3, [pc, #76]	@ (80082ac <_strtod_l+0x58c>)
 8008260:	4650      	mov	r0, sl
 8008262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008266:	4659      	mov	r1, fp
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f8 fa5e 	bl	800072c <__aeabi_ddiv>
 8008270:	4682      	mov	sl, r0
 8008272:	468b      	mov	fp, r1
 8008274:	1124      	asrs	r4, r4, #4
 8008276:	d0df      	beq.n	8008238 <_strtod_l+0x518>
 8008278:	2c1f      	cmp	r4, #31
 800827a:	dd1f      	ble.n	80082bc <_strtod_l+0x59c>
 800827c:	2400      	movs	r4, #0
 800827e:	46a0      	mov	r8, r4
 8008280:	46a1      	mov	r9, r4
 8008282:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008284:	2322      	movs	r3, #34	@ 0x22
 8008286:	9a05      	ldr	r2, [sp, #20]
 8008288:	f04f 0a00 	mov.w	sl, #0
 800828c:	f04f 0b00 	mov.w	fp, #0
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	e76b      	b.n	800816c <_strtod_l+0x44c>
 8008294:	0800a728 	.word	0x0800a728
 8008298:	0800a9f0 	.word	0x0800a9f0
 800829c:	0800a720 	.word	0x0800a720
 80082a0:	0800a757 	.word	0x0800a757
 80082a4:	7ff00000 	.word	0x7ff00000
 80082a8:	0800a890 	.word	0x0800a890
 80082ac:	0800a928 	.word	0x0800a928
 80082b0:	0800a900 	.word	0x0800a900
 80082b4:	7ca00000 	.word	0x7ca00000
 80082b8:	7fefffff 	.word	0x7fefffff
 80082bc:	f014 0310 	ands.w	r3, r4, #16
 80082c0:	bf18      	it	ne
 80082c2:	236a      	movne	r3, #106	@ 0x6a
 80082c4:	4650      	mov	r0, sl
 80082c6:	9308      	str	r3, [sp, #32]
 80082c8:	4659      	mov	r1, fp
 80082ca:	2300      	movs	r3, #0
 80082cc:	4e77      	ldr	r6, [pc, #476]	@ (80084ac <_strtod_l+0x78c>)
 80082ce:	07e7      	lsls	r7, r4, #31
 80082d0:	d504      	bpl.n	80082dc <_strtod_l+0x5bc>
 80082d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082d6:	f7f8 f8ff 	bl	80004d8 <__aeabi_dmul>
 80082da:	2301      	movs	r3, #1
 80082dc:	1064      	asrs	r4, r4, #1
 80082de:	f106 0608 	add.w	r6, r6, #8
 80082e2:	d1f4      	bne.n	80082ce <_strtod_l+0x5ae>
 80082e4:	b10b      	cbz	r3, 80082ea <_strtod_l+0x5ca>
 80082e6:	4682      	mov	sl, r0
 80082e8:	468b      	mov	fp, r1
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	b1b3      	cbz	r3, 800831c <_strtod_l+0x5fc>
 80082ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	4659      	mov	r1, fp
 80082fa:	dd0f      	ble.n	800831c <_strtod_l+0x5fc>
 80082fc:	2b1f      	cmp	r3, #31
 80082fe:	dd58      	ble.n	80083b2 <_strtod_l+0x692>
 8008300:	2b34      	cmp	r3, #52	@ 0x34
 8008302:	bfd8      	it	le
 8008304:	f04f 33ff 	movle.w	r3, #4294967295
 8008308:	f04f 0a00 	mov.w	sl, #0
 800830c:	bfcf      	iteee	gt
 800830e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008312:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008316:	4093      	lslle	r3, r2
 8008318:	ea03 0b01 	andle.w	fp, r3, r1
 800831c:	2200      	movs	r2, #0
 800831e:	2300      	movs	r3, #0
 8008320:	4650      	mov	r0, sl
 8008322:	4659      	mov	r1, fp
 8008324:	f7f8 fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8008328:	2800      	cmp	r0, #0
 800832a:	d1a7      	bne.n	800827c <_strtod_l+0x55c>
 800832c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800832e:	464a      	mov	r2, r9
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008334:	462b      	mov	r3, r5
 8008336:	9805      	ldr	r0, [sp, #20]
 8008338:	f7ff f8d8 	bl	80074ec <__s2b>
 800833c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800833e:	2800      	cmp	r0, #0
 8008340:	f43f af09 	beq.w	8008156 <_strtod_l+0x436>
 8008344:	2400      	movs	r4, #0
 8008346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800834a:	2a00      	cmp	r2, #0
 800834c:	eba3 0308 	sub.w	r3, r3, r8
 8008350:	bfa8      	it	ge
 8008352:	2300      	movge	r3, #0
 8008354:	46a0      	mov	r8, r4
 8008356:	9312      	str	r3, [sp, #72]	@ 0x48
 8008358:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800835c:	9316      	str	r3, [sp, #88]	@ 0x58
 800835e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008360:	9805      	ldr	r0, [sp, #20]
 8008362:	6859      	ldr	r1, [r3, #4]
 8008364:	f7ff f81a 	bl	800739c <_Balloc>
 8008368:	4681      	mov	r9, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	f43f aef7 	beq.w	800815e <_strtod_l+0x43e>
 8008370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008372:	300c      	adds	r0, #12
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	f103 010c 	add.w	r1, r3, #12
 800837a:	3202      	adds	r2, #2
 800837c:	0092      	lsls	r2, r2, #2
 800837e:	f000 fcd7 	bl	8008d30 <memcpy>
 8008382:	ab1c      	add	r3, sp, #112	@ 0x70
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	4652      	mov	r2, sl
 800838c:	465b      	mov	r3, fp
 800838e:	9805      	ldr	r0, [sp, #20]
 8008390:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008394:	f7ff fbd6 	bl	8007b44 <__d2b>
 8008398:	901a      	str	r0, [sp, #104]	@ 0x68
 800839a:	2800      	cmp	r0, #0
 800839c:	f43f aedf 	beq.w	800815e <_strtod_l+0x43e>
 80083a0:	2101      	movs	r1, #1
 80083a2:	9805      	ldr	r0, [sp, #20]
 80083a4:	f7ff f938 	bl	8007618 <__i2b>
 80083a8:	4680      	mov	r8, r0
 80083aa:	b948      	cbnz	r0, 80083c0 <_strtod_l+0x6a0>
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	e6d5      	b.n	800815e <_strtod_l+0x43e>
 80083b2:	f04f 32ff 	mov.w	r2, #4294967295
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	ea03 0a0a 	and.w	sl, r3, sl
 80083be:	e7ad      	b.n	800831c <_strtod_l+0x5fc>
 80083c0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80083c2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80083c4:	2d00      	cmp	r5, #0
 80083c6:	bfab      	itete	ge
 80083c8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80083ca:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80083cc:	18ef      	addge	r7, r5, r3
 80083ce:	1b5e      	sublt	r6, r3, r5
 80083d0:	9b08      	ldr	r3, [sp, #32]
 80083d2:	bfa8      	it	ge
 80083d4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80083d6:	eba5 0503 	sub.w	r5, r5, r3
 80083da:	4415      	add	r5, r2
 80083dc:	4b34      	ldr	r3, [pc, #208]	@ (80084b0 <_strtod_l+0x790>)
 80083de:	f105 35ff 	add.w	r5, r5, #4294967295
 80083e2:	bfb8      	it	lt
 80083e4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80083e6:	429d      	cmp	r5, r3
 80083e8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80083ec:	da50      	bge.n	8008490 <_strtod_l+0x770>
 80083ee:	1b5b      	subs	r3, r3, r5
 80083f0:	2b1f      	cmp	r3, #31
 80083f2:	f04f 0101 	mov.w	r1, #1
 80083f6:	eba2 0203 	sub.w	r2, r2, r3
 80083fa:	dc3d      	bgt.n	8008478 <_strtod_l+0x758>
 80083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008400:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008402:	2300      	movs	r3, #0
 8008404:	9310      	str	r3, [sp, #64]	@ 0x40
 8008406:	18bd      	adds	r5, r7, r2
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	42af      	cmp	r7, r5
 800840c:	4416      	add	r6, r2
 800840e:	441e      	add	r6, r3
 8008410:	463b      	mov	r3, r7
 8008412:	bfa8      	it	ge
 8008414:	462b      	movge	r3, r5
 8008416:	42b3      	cmp	r3, r6
 8008418:	bfa8      	it	ge
 800841a:	4633      	movge	r3, r6
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfc2      	ittt	gt
 8008420:	1aed      	subgt	r5, r5, r3
 8008422:	1af6      	subgt	r6, r6, r3
 8008424:	1aff      	subgt	r7, r7, r3
 8008426:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008428:	2b00      	cmp	r3, #0
 800842a:	dd16      	ble.n	800845a <_strtod_l+0x73a>
 800842c:	4641      	mov	r1, r8
 800842e:	461a      	mov	r2, r3
 8008430:	9805      	ldr	r0, [sp, #20]
 8008432:	f7ff f9a9 	bl	8007788 <__pow5mult>
 8008436:	4680      	mov	r8, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d0b7      	beq.n	80083ac <_strtod_l+0x68c>
 800843c:	4601      	mov	r1, r0
 800843e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008440:	9805      	ldr	r0, [sp, #20]
 8008442:	f7ff f8ff 	bl	8007644 <__multiply>
 8008446:	900a      	str	r0, [sp, #40]	@ 0x28
 8008448:	2800      	cmp	r0, #0
 800844a:	f43f ae88 	beq.w	800815e <_strtod_l+0x43e>
 800844e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008450:	9805      	ldr	r0, [sp, #20]
 8008452:	f7fe ffe3 	bl	800741c <_Bfree>
 8008456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008458:	931a      	str	r3, [sp, #104]	@ 0x68
 800845a:	2d00      	cmp	r5, #0
 800845c:	dc1d      	bgt.n	800849a <_strtod_l+0x77a>
 800845e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008460:	2b00      	cmp	r3, #0
 8008462:	dd27      	ble.n	80084b4 <_strtod_l+0x794>
 8008464:	4649      	mov	r1, r9
 8008466:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008468:	9805      	ldr	r0, [sp, #20]
 800846a:	f7ff f98d 	bl	8007788 <__pow5mult>
 800846e:	4681      	mov	r9, r0
 8008470:	bb00      	cbnz	r0, 80084b4 <_strtod_l+0x794>
 8008472:	f04f 0900 	mov.w	r9, #0
 8008476:	e672      	b.n	800815e <_strtod_l+0x43e>
 8008478:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800847c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008480:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008484:	35e2      	adds	r5, #226	@ 0xe2
 8008486:	fa01 f305 	lsl.w	r3, r1, r5
 800848a:	9310      	str	r3, [sp, #64]	@ 0x40
 800848c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800848e:	e7ba      	b.n	8008406 <_strtod_l+0x6e6>
 8008490:	2300      	movs	r3, #0
 8008492:	9310      	str	r3, [sp, #64]	@ 0x40
 8008494:	2301      	movs	r3, #1
 8008496:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008498:	e7b5      	b.n	8008406 <_strtod_l+0x6e6>
 800849a:	462a      	mov	r2, r5
 800849c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800849e:	9805      	ldr	r0, [sp, #20]
 80084a0:	f7ff f9cc 	bl	800783c <__lshift>
 80084a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d1d9      	bne.n	800845e <_strtod_l+0x73e>
 80084aa:	e658      	b.n	800815e <_strtod_l+0x43e>
 80084ac:	0800aa18 	.word	0x0800aa18
 80084b0:	fffffc02 	.word	0xfffffc02
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	dd07      	ble.n	80084c8 <_strtod_l+0x7a8>
 80084b8:	4649      	mov	r1, r9
 80084ba:	4632      	mov	r2, r6
 80084bc:	9805      	ldr	r0, [sp, #20]
 80084be:	f7ff f9bd 	bl	800783c <__lshift>
 80084c2:	4681      	mov	r9, r0
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d0d4      	beq.n	8008472 <_strtod_l+0x752>
 80084c8:	2f00      	cmp	r7, #0
 80084ca:	dd08      	ble.n	80084de <_strtod_l+0x7be>
 80084cc:	4641      	mov	r1, r8
 80084ce:	463a      	mov	r2, r7
 80084d0:	9805      	ldr	r0, [sp, #20]
 80084d2:	f7ff f9b3 	bl	800783c <__lshift>
 80084d6:	4680      	mov	r8, r0
 80084d8:	2800      	cmp	r0, #0
 80084da:	f43f ae40 	beq.w	800815e <_strtod_l+0x43e>
 80084de:	464a      	mov	r2, r9
 80084e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084e2:	9805      	ldr	r0, [sp, #20]
 80084e4:	f7ff fa32 	bl	800794c <__mdiff>
 80084e8:	4604      	mov	r4, r0
 80084ea:	2800      	cmp	r0, #0
 80084ec:	f43f ae37 	beq.w	800815e <_strtod_l+0x43e>
 80084f0:	68c3      	ldr	r3, [r0, #12]
 80084f2:	4641      	mov	r1, r8
 80084f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084f6:	2300      	movs	r3, #0
 80084f8:	60c3      	str	r3, [r0, #12]
 80084fa:	f7ff fa0b 	bl	8007914 <__mcmp>
 80084fe:	2800      	cmp	r0, #0
 8008500:	da3d      	bge.n	800857e <_strtod_l+0x85e>
 8008502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008504:	ea53 030a 	orrs.w	r3, r3, sl
 8008508:	d163      	bne.n	80085d2 <_strtod_l+0x8b2>
 800850a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800850e:	2b00      	cmp	r3, #0
 8008510:	d15f      	bne.n	80085d2 <_strtod_l+0x8b2>
 8008512:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008516:	0d1b      	lsrs	r3, r3, #20
 8008518:	051b      	lsls	r3, r3, #20
 800851a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800851e:	d958      	bls.n	80085d2 <_strtod_l+0x8b2>
 8008520:	6963      	ldr	r3, [r4, #20]
 8008522:	b913      	cbnz	r3, 800852a <_strtod_l+0x80a>
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	2b01      	cmp	r3, #1
 8008528:	dd53      	ble.n	80085d2 <_strtod_l+0x8b2>
 800852a:	4621      	mov	r1, r4
 800852c:	2201      	movs	r2, #1
 800852e:	9805      	ldr	r0, [sp, #20]
 8008530:	f7ff f984 	bl	800783c <__lshift>
 8008534:	4641      	mov	r1, r8
 8008536:	4604      	mov	r4, r0
 8008538:	f7ff f9ec 	bl	8007914 <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	dd48      	ble.n	80085d2 <_strtod_l+0x8b2>
 8008540:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008544:	9a08      	ldr	r2, [sp, #32]
 8008546:	0d1b      	lsrs	r3, r3, #20
 8008548:	051b      	lsls	r3, r3, #20
 800854a:	2a00      	cmp	r2, #0
 800854c:	d062      	beq.n	8008614 <_strtod_l+0x8f4>
 800854e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008552:	d85f      	bhi.n	8008614 <_strtod_l+0x8f4>
 8008554:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008558:	f67f ae94 	bls.w	8008284 <_strtod_l+0x564>
 800855c:	4650      	mov	r0, sl
 800855e:	4659      	mov	r1, fp
 8008560:	4ba3      	ldr	r3, [pc, #652]	@ (80087f0 <_strtod_l+0xad0>)
 8008562:	2200      	movs	r2, #0
 8008564:	f7f7 ffb8 	bl	80004d8 <__aeabi_dmul>
 8008568:	4ba2      	ldr	r3, [pc, #648]	@ (80087f4 <_strtod_l+0xad4>)
 800856a:	4682      	mov	sl, r0
 800856c:	400b      	ands	r3, r1
 800856e:	468b      	mov	fp, r1
 8008570:	2b00      	cmp	r3, #0
 8008572:	f47f adff 	bne.w	8008174 <_strtod_l+0x454>
 8008576:	2322      	movs	r3, #34	@ 0x22
 8008578:	9a05      	ldr	r2, [sp, #20]
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	e5fa      	b.n	8008174 <_strtod_l+0x454>
 800857e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008582:	d165      	bne.n	8008650 <_strtod_l+0x930>
 8008584:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800858a:	b35a      	cbz	r2, 80085e4 <_strtod_l+0x8c4>
 800858c:	4a9a      	ldr	r2, [pc, #616]	@ (80087f8 <_strtod_l+0xad8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d12b      	bne.n	80085ea <_strtod_l+0x8ca>
 8008592:	9b08      	ldr	r3, [sp, #32]
 8008594:	4651      	mov	r1, sl
 8008596:	b303      	cbz	r3, 80085da <_strtod_l+0x8ba>
 8008598:	465a      	mov	r2, fp
 800859a:	4b96      	ldr	r3, [pc, #600]	@ (80087f4 <_strtod_l+0xad4>)
 800859c:	4013      	ands	r3, r2
 800859e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	d81b      	bhi.n	80085e0 <_strtod_l+0x8c0>
 80085a8:	0d1b      	lsrs	r3, r3, #20
 80085aa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d119      	bne.n	80085ea <_strtod_l+0x8ca>
 80085b6:	4b91      	ldr	r3, [pc, #580]	@ (80087fc <_strtod_l+0xadc>)
 80085b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d102      	bne.n	80085c4 <_strtod_l+0x8a4>
 80085be:	3101      	adds	r1, #1
 80085c0:	f43f adcd 	beq.w	800815e <_strtod_l+0x43e>
 80085c4:	f04f 0a00 	mov.w	sl, #0
 80085c8:	4b8a      	ldr	r3, [pc, #552]	@ (80087f4 <_strtod_l+0xad4>)
 80085ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085cc:	401a      	ands	r2, r3
 80085ce:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80085d2:	9b08      	ldr	r3, [sp, #32]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1c1      	bne.n	800855c <_strtod_l+0x83c>
 80085d8:	e5cc      	b.n	8008174 <_strtod_l+0x454>
 80085da:	f04f 33ff 	mov.w	r3, #4294967295
 80085de:	e7e8      	b.n	80085b2 <_strtod_l+0x892>
 80085e0:	4613      	mov	r3, r2
 80085e2:	e7e6      	b.n	80085b2 <_strtod_l+0x892>
 80085e4:	ea53 030a 	orrs.w	r3, r3, sl
 80085e8:	d0aa      	beq.n	8008540 <_strtod_l+0x820>
 80085ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085ec:	b1db      	cbz	r3, 8008626 <_strtod_l+0x906>
 80085ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085f0:	4213      	tst	r3, r2
 80085f2:	d0ee      	beq.n	80085d2 <_strtod_l+0x8b2>
 80085f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f6:	4650      	mov	r0, sl
 80085f8:	4659      	mov	r1, fp
 80085fa:	9a08      	ldr	r2, [sp, #32]
 80085fc:	b1bb      	cbz	r3, 800862e <_strtod_l+0x90e>
 80085fe:	f7ff fb6d 	bl	8007cdc <sulp>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800860a:	f7f7 fdaf 	bl	800016c <__adddf3>
 800860e:	4682      	mov	sl, r0
 8008610:	468b      	mov	fp, r1
 8008612:	e7de      	b.n	80085d2 <_strtod_l+0x8b2>
 8008614:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008618:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800861c:	f04f 3aff 	mov.w	sl, #4294967295
 8008620:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008624:	e7d5      	b.n	80085d2 <_strtod_l+0x8b2>
 8008626:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008628:	ea13 0f0a 	tst.w	r3, sl
 800862c:	e7e1      	b.n	80085f2 <_strtod_l+0x8d2>
 800862e:	f7ff fb55 	bl	8007cdc <sulp>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800863a:	f7f7 fd95 	bl	8000168 <__aeabi_dsub>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4682      	mov	sl, r0
 8008644:	468b      	mov	fp, r1
 8008646:	f7f8 f9af 	bl	80009a8 <__aeabi_dcmpeq>
 800864a:	2800      	cmp	r0, #0
 800864c:	d0c1      	beq.n	80085d2 <_strtod_l+0x8b2>
 800864e:	e619      	b.n	8008284 <_strtod_l+0x564>
 8008650:	4641      	mov	r1, r8
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff face 	bl	8007bf4 <__ratio>
 8008658:	2200      	movs	r2, #0
 800865a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	f7f8 f9b5 	bl	80009d0 <__aeabi_dcmple>
 8008666:	2800      	cmp	r0, #0
 8008668:	d06d      	beq.n	8008746 <_strtod_l+0xa26>
 800866a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d178      	bne.n	8008762 <_strtod_l+0xa42>
 8008670:	f1ba 0f00 	cmp.w	sl, #0
 8008674:	d156      	bne.n	8008724 <_strtod_l+0xa04>
 8008676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800867c:	2b00      	cmp	r3, #0
 800867e:	d158      	bne.n	8008732 <_strtod_l+0xa12>
 8008680:	2200      	movs	r2, #0
 8008682:	4630      	mov	r0, r6
 8008684:	4639      	mov	r1, r7
 8008686:	4b5e      	ldr	r3, [pc, #376]	@ (8008800 <_strtod_l+0xae0>)
 8008688:	f7f8 f998 	bl	80009bc <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	d157      	bne.n	8008740 <_strtod_l+0xa20>
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	2200      	movs	r2, #0
 8008696:	4b5b      	ldr	r3, [pc, #364]	@ (8008804 <_strtod_l+0xae4>)
 8008698:	f7f7 ff1e 	bl	80004d8 <__aeabi_dmul>
 800869c:	4606      	mov	r6, r0
 800869e:	460f      	mov	r7, r1
 80086a0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80086a4:	9606      	str	r6, [sp, #24]
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ac:	4d51      	ldr	r5, [pc, #324]	@ (80087f4 <_strtod_l+0xad4>)
 80086ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b4:	401d      	ands	r5, r3
 80086b6:	4b54      	ldr	r3, [pc, #336]	@ (8008808 <_strtod_l+0xae8>)
 80086b8:	429d      	cmp	r5, r3
 80086ba:	f040 80ab 	bne.w	8008814 <_strtod_l+0xaf4>
 80086be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c0:	4650      	mov	r0, sl
 80086c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80086c6:	4659      	mov	r1, fp
 80086c8:	f7ff f9d4 	bl	8007a74 <__ulp>
 80086cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086d0:	f7f7 ff02 	bl	80004d8 <__aeabi_dmul>
 80086d4:	4652      	mov	r2, sl
 80086d6:	465b      	mov	r3, fp
 80086d8:	f7f7 fd48 	bl	800016c <__adddf3>
 80086dc:	460b      	mov	r3, r1
 80086de:	4945      	ldr	r1, [pc, #276]	@ (80087f4 <_strtod_l+0xad4>)
 80086e0:	4a4a      	ldr	r2, [pc, #296]	@ (800880c <_strtod_l+0xaec>)
 80086e2:	4019      	ands	r1, r3
 80086e4:	4291      	cmp	r1, r2
 80086e6:	4682      	mov	sl, r0
 80086e8:	d942      	bls.n	8008770 <_strtod_l+0xa50>
 80086ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086ec:	4b43      	ldr	r3, [pc, #268]	@ (80087fc <_strtod_l+0xadc>)
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d103      	bne.n	80086fa <_strtod_l+0x9da>
 80086f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086f4:	3301      	adds	r3, #1
 80086f6:	f43f ad32 	beq.w	800815e <_strtod_l+0x43e>
 80086fa:	f04f 3aff 	mov.w	sl, #4294967295
 80086fe:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80087fc <_strtod_l+0xadc>
 8008702:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	f7fe fe89 	bl	800741c <_Bfree>
 800870a:	4649      	mov	r1, r9
 800870c:	9805      	ldr	r0, [sp, #20]
 800870e:	f7fe fe85 	bl	800741c <_Bfree>
 8008712:	4641      	mov	r1, r8
 8008714:	9805      	ldr	r0, [sp, #20]
 8008716:	f7fe fe81 	bl	800741c <_Bfree>
 800871a:	4621      	mov	r1, r4
 800871c:	9805      	ldr	r0, [sp, #20]
 800871e:	f7fe fe7d 	bl	800741c <_Bfree>
 8008722:	e61c      	b.n	800835e <_strtod_l+0x63e>
 8008724:	f1ba 0f01 	cmp.w	sl, #1
 8008728:	d103      	bne.n	8008732 <_strtod_l+0xa12>
 800872a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872c:	2b00      	cmp	r3, #0
 800872e:	f43f ada9 	beq.w	8008284 <_strtod_l+0x564>
 8008732:	2200      	movs	r2, #0
 8008734:	4b36      	ldr	r3, [pc, #216]	@ (8008810 <_strtod_l+0xaf0>)
 8008736:	2600      	movs	r6, #0
 8008738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800873c:	4f30      	ldr	r7, [pc, #192]	@ (8008800 <_strtod_l+0xae0>)
 800873e:	e7b3      	b.n	80086a8 <_strtod_l+0x988>
 8008740:	2600      	movs	r6, #0
 8008742:	4f30      	ldr	r7, [pc, #192]	@ (8008804 <_strtod_l+0xae4>)
 8008744:	e7ac      	b.n	80086a0 <_strtod_l+0x980>
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
 800874a:	4b2e      	ldr	r3, [pc, #184]	@ (8008804 <_strtod_l+0xae4>)
 800874c:	2200      	movs	r2, #0
 800874e:	f7f7 fec3 	bl	80004d8 <__aeabi_dmul>
 8008752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008754:	4606      	mov	r6, r0
 8008756:	460f      	mov	r7, r1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0a1      	beq.n	80086a0 <_strtod_l+0x980>
 800875c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008760:	e7a2      	b.n	80086a8 <_strtod_l+0x988>
 8008762:	2200      	movs	r2, #0
 8008764:	4b26      	ldr	r3, [pc, #152]	@ (8008800 <_strtod_l+0xae0>)
 8008766:	4616      	mov	r6, r2
 8008768:	461f      	mov	r7, r3
 800876a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800876e:	e79b      	b.n	80086a8 <_strtod_l+0x988>
 8008770:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008774:	9b08      	ldr	r3, [sp, #32]
 8008776:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1c1      	bne.n	8008702 <_strtod_l+0x9e2>
 800877e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008782:	0d1b      	lsrs	r3, r3, #20
 8008784:	051b      	lsls	r3, r3, #20
 8008786:	429d      	cmp	r5, r3
 8008788:	d1bb      	bne.n	8008702 <_strtod_l+0x9e2>
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	f7f8 fcbf 	bl	8001110 <__aeabi_d2lz>
 8008792:	f7f7 fe73 	bl	800047c <__aeabi_l2d>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4630      	mov	r0, r6
 800879c:	4639      	mov	r1, r7
 800879e:	f7f7 fce3 	bl	8000168 <__aeabi_dsub>
 80087a2:	460b      	mov	r3, r1
 80087a4:	4602      	mov	r2, r0
 80087a6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80087aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80087ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087b0:	ea46 060a 	orr.w	r6, r6, sl
 80087b4:	431e      	orrs	r6, r3
 80087b6:	d06a      	beq.n	800888e <_strtod_l+0xb6e>
 80087b8:	a309      	add	r3, pc, #36	@ (adr r3, 80087e0 <_strtod_l+0xac0>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f8 f8fd 	bl	80009bc <__aeabi_dcmplt>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f47f acd6 	bne.w	8008174 <_strtod_l+0x454>
 80087c8:	a307      	add	r3, pc, #28	@ (adr r3, 80087e8 <_strtod_l+0xac8>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087d2:	f7f8 f911 	bl	80009f8 <__aeabi_dcmpgt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d093      	beq.n	8008702 <_strtod_l+0x9e2>
 80087da:	e4cb      	b.n	8008174 <_strtod_l+0x454>
 80087dc:	f3af 8000 	nop.w
 80087e0:	94a03595 	.word	0x94a03595
 80087e4:	3fdfffff 	.word	0x3fdfffff
 80087e8:	35afe535 	.word	0x35afe535
 80087ec:	3fe00000 	.word	0x3fe00000
 80087f0:	39500000 	.word	0x39500000
 80087f4:	7ff00000 	.word	0x7ff00000
 80087f8:	000fffff 	.word	0x000fffff
 80087fc:	7fefffff 	.word	0x7fefffff
 8008800:	3ff00000 	.word	0x3ff00000
 8008804:	3fe00000 	.word	0x3fe00000
 8008808:	7fe00000 	.word	0x7fe00000
 800880c:	7c9fffff 	.word	0x7c9fffff
 8008810:	bff00000 	.word	0xbff00000
 8008814:	9b08      	ldr	r3, [sp, #32]
 8008816:	b323      	cbz	r3, 8008862 <_strtod_l+0xb42>
 8008818:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800881c:	d821      	bhi.n	8008862 <_strtod_l+0xb42>
 800881e:	a328      	add	r3, pc, #160	@ (adr r3, 80088c0 <_strtod_l+0xba0>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f8 f8d2 	bl	80009d0 <__aeabi_dcmple>
 800882c:	b1a0      	cbz	r0, 8008858 <_strtod_l+0xb38>
 800882e:	4639      	mov	r1, r7
 8008830:	4630      	mov	r0, r6
 8008832:	f7f8 f929 	bl	8000a88 <__aeabi_d2uiz>
 8008836:	2801      	cmp	r0, #1
 8008838:	bf38      	it	cc
 800883a:	2001      	movcc	r0, #1
 800883c:	f7f7 fdd2 	bl	80003e4 <__aeabi_ui2d>
 8008840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	b9fb      	cbnz	r3, 8008888 <_strtod_l+0xb68>
 8008848:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800884c:	9014      	str	r0, [sp, #80]	@ 0x50
 800884e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008850:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008854:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008858:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800885a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800885e:	1b5b      	subs	r3, r3, r5
 8008860:	9311      	str	r3, [sp, #68]	@ 0x44
 8008862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008866:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800886a:	f7ff f903 	bl	8007a74 <__ulp>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4650      	mov	r0, sl
 8008874:	4659      	mov	r1, fp
 8008876:	f7f7 fe2f 	bl	80004d8 <__aeabi_dmul>
 800887a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800887e:	f7f7 fc75 	bl	800016c <__adddf3>
 8008882:	4682      	mov	sl, r0
 8008884:	468b      	mov	fp, r1
 8008886:	e775      	b.n	8008774 <_strtod_l+0xa54>
 8008888:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800888c:	e7e0      	b.n	8008850 <_strtod_l+0xb30>
 800888e:	a30e      	add	r3, pc, #56	@ (adr r3, 80088c8 <_strtod_l+0xba8>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f7f8 f892 	bl	80009bc <__aeabi_dcmplt>
 8008898:	e79d      	b.n	80087d6 <_strtod_l+0xab6>
 800889a:	2300      	movs	r3, #0
 800889c:	930e      	str	r3, [sp, #56]	@ 0x38
 800889e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088a0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	f7ff ba79 	b.w	8007d9a <_strtod_l+0x7a>
 80088a8:	2a65      	cmp	r2, #101	@ 0x65
 80088aa:	f43f ab72 	beq.w	8007f92 <_strtod_l+0x272>
 80088ae:	2a45      	cmp	r2, #69	@ 0x45
 80088b0:	f43f ab6f 	beq.w	8007f92 <_strtod_l+0x272>
 80088b4:	2301      	movs	r3, #1
 80088b6:	f7ff bbaa 	b.w	800800e <_strtod_l+0x2ee>
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w
 80088c0:	ffc00000 	.word	0xffc00000
 80088c4:	41dfffff 	.word	0x41dfffff
 80088c8:	94a03595 	.word	0x94a03595
 80088cc:	3fcfffff 	.word	0x3fcfffff

080088d0 <_strtod_r>:
 80088d0:	4b01      	ldr	r3, [pc, #4]	@ (80088d8 <_strtod_r+0x8>)
 80088d2:	f7ff ba25 	b.w	8007d20 <_strtod_l>
 80088d6:	bf00      	nop
 80088d8:	2000006c 	.word	0x2000006c

080088dc <__ssputs_r>:
 80088dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	461f      	mov	r7, r3
 80088e2:	688e      	ldr	r6, [r1, #8]
 80088e4:	4682      	mov	sl, r0
 80088e6:	42be      	cmp	r6, r7
 80088e8:	460c      	mov	r4, r1
 80088ea:	4690      	mov	r8, r2
 80088ec:	680b      	ldr	r3, [r1, #0]
 80088ee:	d82d      	bhi.n	800894c <__ssputs_r+0x70>
 80088f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088f8:	d026      	beq.n	8008948 <__ssputs_r+0x6c>
 80088fa:	6965      	ldr	r5, [r4, #20]
 80088fc:	6909      	ldr	r1, [r1, #16]
 80088fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008902:	eba3 0901 	sub.w	r9, r3, r1
 8008906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800890a:	1c7b      	adds	r3, r7, #1
 800890c:	444b      	add	r3, r9
 800890e:	106d      	asrs	r5, r5, #1
 8008910:	429d      	cmp	r5, r3
 8008912:	bf38      	it	cc
 8008914:	461d      	movcc	r5, r3
 8008916:	0553      	lsls	r3, r2, #21
 8008918:	d527      	bpl.n	800896a <__ssputs_r+0x8e>
 800891a:	4629      	mov	r1, r5
 800891c:	f7fe fcb2 	bl	8007284 <_malloc_r>
 8008920:	4606      	mov	r6, r0
 8008922:	b360      	cbz	r0, 800897e <__ssputs_r+0xa2>
 8008924:	464a      	mov	r2, r9
 8008926:	6921      	ldr	r1, [r4, #16]
 8008928:	f000 fa02 	bl	8008d30 <memcpy>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	6126      	str	r6, [r4, #16]
 800893a:	444e      	add	r6, r9
 800893c:	6026      	str	r6, [r4, #0]
 800893e:	463e      	mov	r6, r7
 8008940:	6165      	str	r5, [r4, #20]
 8008942:	eba5 0509 	sub.w	r5, r5, r9
 8008946:	60a5      	str	r5, [r4, #8]
 8008948:	42be      	cmp	r6, r7
 800894a:	d900      	bls.n	800894e <__ssputs_r+0x72>
 800894c:	463e      	mov	r6, r7
 800894e:	4632      	mov	r2, r6
 8008950:	4641      	mov	r1, r8
 8008952:	6820      	ldr	r0, [r4, #0]
 8008954:	f000 f9c2 	bl	8008cdc <memmove>
 8008958:	2000      	movs	r0, #0
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	1b9b      	subs	r3, r3, r6
 800895e:	60a3      	str	r3, [r4, #8]
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	4433      	add	r3, r6
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	462a      	mov	r2, r5
 800896c:	f000 fd71 	bl	8009452 <_realloc_r>
 8008970:	4606      	mov	r6, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	d1e0      	bne.n	8008938 <__ssputs_r+0x5c>
 8008976:	4650      	mov	r0, sl
 8008978:	6921      	ldr	r1, [r4, #16]
 800897a:	f7fe fc11 	bl	80071a0 <_free_r>
 800897e:	230c      	movs	r3, #12
 8008980:	f8ca 3000 	str.w	r3, [sl]
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f04f 30ff 	mov.w	r0, #4294967295
 800898a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	e7e9      	b.n	8008966 <__ssputs_r+0x8a>
	...

08008994 <_svfiprintf_r>:
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	4698      	mov	r8, r3
 800899a:	898b      	ldrh	r3, [r1, #12]
 800899c:	4607      	mov	r7, r0
 800899e:	061b      	lsls	r3, r3, #24
 80089a0:	460d      	mov	r5, r1
 80089a2:	4614      	mov	r4, r2
 80089a4:	b09d      	sub	sp, #116	@ 0x74
 80089a6:	d510      	bpl.n	80089ca <_svfiprintf_r+0x36>
 80089a8:	690b      	ldr	r3, [r1, #16]
 80089aa:	b973      	cbnz	r3, 80089ca <_svfiprintf_r+0x36>
 80089ac:	2140      	movs	r1, #64	@ 0x40
 80089ae:	f7fe fc69 	bl	8007284 <_malloc_r>
 80089b2:	6028      	str	r0, [r5, #0]
 80089b4:	6128      	str	r0, [r5, #16]
 80089b6:	b930      	cbnz	r0, 80089c6 <_svfiprintf_r+0x32>
 80089b8:	230c      	movs	r3, #12
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	b01d      	add	sp, #116	@ 0x74
 80089c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	2340      	movs	r3, #64	@ 0x40
 80089c8:	616b      	str	r3, [r5, #20]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ce:	2320      	movs	r3, #32
 80089d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089d4:	2330      	movs	r3, #48	@ 0x30
 80089d6:	f04f 0901 	mov.w	r9, #1
 80089da:	f8cd 800c 	str.w	r8, [sp, #12]
 80089de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b78 <_svfiprintf_r+0x1e4>
 80089e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089e6:	4623      	mov	r3, r4
 80089e8:	469a      	mov	sl, r3
 80089ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ee:	b10a      	cbz	r2, 80089f4 <_svfiprintf_r+0x60>
 80089f0:	2a25      	cmp	r2, #37	@ 0x25
 80089f2:	d1f9      	bne.n	80089e8 <_svfiprintf_r+0x54>
 80089f4:	ebba 0b04 	subs.w	fp, sl, r4
 80089f8:	d00b      	beq.n	8008a12 <_svfiprintf_r+0x7e>
 80089fa:	465b      	mov	r3, fp
 80089fc:	4622      	mov	r2, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ff6b 	bl	80088dc <__ssputs_r>
 8008a06:	3001      	adds	r0, #1
 8008a08:	f000 80a7 	beq.w	8008b5a <_svfiprintf_r+0x1c6>
 8008a0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a0e:	445a      	add	r2, fp
 8008a10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a12:	f89a 3000 	ldrb.w	r3, [sl]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 809f 	beq.w	8008b5a <_svfiprintf_r+0x1c6>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a26:	f10a 0a01 	add.w	sl, sl, #1
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a34:	4654      	mov	r4, sl
 8008a36:	2205      	movs	r2, #5
 8008a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3c:	484e      	ldr	r0, [pc, #312]	@ (8008b78 <_svfiprintf_r+0x1e4>)
 8008a3e:	f7fd fd3e 	bl	80064be <memchr>
 8008a42:	9a04      	ldr	r2, [sp, #16]
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_svfiprintf_r+0xea>
 8008a46:	06d0      	lsls	r0, r2, #27
 8008a48:	bf44      	itt	mi
 8008a4a:	2320      	movmi	r3, #32
 8008a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a50:	0711      	lsls	r1, r2, #28
 8008a52:	bf44      	itt	mi
 8008a54:	232b      	movmi	r3, #43	@ 0x2b
 8008a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a60:	d015      	beq.n	8008a8e <_svfiprintf_r+0xfa>
 8008a62:	4654      	mov	r4, sl
 8008a64:	2000      	movs	r0, #0
 8008a66:	f04f 0c0a 	mov.w	ip, #10
 8008a6a:	9a07      	ldr	r2, [sp, #28]
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a72:	3b30      	subs	r3, #48	@ 0x30
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d94b      	bls.n	8008b10 <_svfiprintf_r+0x17c>
 8008a78:	b1b0      	cbz	r0, 8008aa8 <_svfiprintf_r+0x114>
 8008a7a:	9207      	str	r2, [sp, #28]
 8008a7c:	e014      	b.n	8008aa8 <_svfiprintf_r+0x114>
 8008a7e:	eba0 0308 	sub.w	r3, r0, r8
 8008a82:	fa09 f303 	lsl.w	r3, r9, r3
 8008a86:	4313      	orrs	r3, r2
 8008a88:	46a2      	mov	sl, r4
 8008a8a:	9304      	str	r3, [sp, #16]
 8008a8c:	e7d2      	b.n	8008a34 <_svfiprintf_r+0xa0>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	1d19      	adds	r1, r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	9103      	str	r1, [sp, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbb      	ittet	lt
 8008a9a:	425b      	neglt	r3, r3
 8008a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa0:	9307      	strge	r3, [sp, #28]
 8008aa2:	9307      	strlt	r3, [sp, #28]
 8008aa4:	bfb8      	it	lt
 8008aa6:	9204      	strlt	r2, [sp, #16]
 8008aa8:	7823      	ldrb	r3, [r4, #0]
 8008aaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aac:	d10a      	bne.n	8008ac4 <_svfiprintf_r+0x130>
 8008aae:	7863      	ldrb	r3, [r4, #1]
 8008ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ab2:	d132      	bne.n	8008b1a <_svfiprintf_r+0x186>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	3402      	adds	r4, #2
 8008ab8:	1d1a      	adds	r2, r3, #4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	9203      	str	r2, [sp, #12]
 8008abe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b7c <_svfiprintf_r+0x1e8>
 8008ac8:	2203      	movs	r2, #3
 8008aca:	4650      	mov	r0, sl
 8008acc:	7821      	ldrb	r1, [r4, #0]
 8008ace:	f7fd fcf6 	bl	80064be <memchr>
 8008ad2:	b138      	cbz	r0, 8008ae4 <_svfiprintf_r+0x150>
 8008ad4:	2240      	movs	r2, #64	@ 0x40
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	eba0 000a 	sub.w	r0, r0, sl
 8008adc:	4082      	lsls	r2, r0
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	3401      	adds	r4, #1
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	2206      	movs	r2, #6
 8008aea:	4825      	ldr	r0, [pc, #148]	@ (8008b80 <_svfiprintf_r+0x1ec>)
 8008aec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008af0:	f7fd fce5 	bl	80064be <memchr>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d036      	beq.n	8008b66 <_svfiprintf_r+0x1d2>
 8008af8:	4b22      	ldr	r3, [pc, #136]	@ (8008b84 <_svfiprintf_r+0x1f0>)
 8008afa:	bb1b      	cbnz	r3, 8008b44 <_svfiprintf_r+0x1b0>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	3307      	adds	r3, #7
 8008b00:	f023 0307 	bic.w	r3, r3, #7
 8008b04:	3308      	adds	r3, #8
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0a:	4433      	add	r3, r6
 8008b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0e:	e76a      	b.n	80089e6 <_svfiprintf_r+0x52>
 8008b10:	460c      	mov	r4, r1
 8008b12:	2001      	movs	r0, #1
 8008b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b18:	e7a8      	b.n	8008a6c <_svfiprintf_r+0xd8>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f04f 0c0a 	mov.w	ip, #10
 8008b20:	4619      	mov	r1, r3
 8008b22:	3401      	adds	r4, #1
 8008b24:	9305      	str	r3, [sp, #20]
 8008b26:	4620      	mov	r0, r4
 8008b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b2c:	3a30      	subs	r2, #48	@ 0x30
 8008b2e:	2a09      	cmp	r2, #9
 8008b30:	d903      	bls.n	8008b3a <_svfiprintf_r+0x1a6>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0c6      	beq.n	8008ac4 <_svfiprintf_r+0x130>
 8008b36:	9105      	str	r1, [sp, #20]
 8008b38:	e7c4      	b.n	8008ac4 <_svfiprintf_r+0x130>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b42:	e7f0      	b.n	8008b26 <_svfiprintf_r+0x192>
 8008b44:	ab03      	add	r3, sp, #12
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	462a      	mov	r2, r5
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b88 <_svfiprintf_r+0x1f4>)
 8008b4e:	a904      	add	r1, sp, #16
 8008b50:	f7fc fd28 	bl	80055a4 <_printf_float>
 8008b54:	1c42      	adds	r2, r0, #1
 8008b56:	4606      	mov	r6, r0
 8008b58:	d1d6      	bne.n	8008b08 <_svfiprintf_r+0x174>
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	065b      	lsls	r3, r3, #25
 8008b5e:	f53f af2d 	bmi.w	80089bc <_svfiprintf_r+0x28>
 8008b62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b64:	e72c      	b.n	80089c0 <_svfiprintf_r+0x2c>
 8008b66:	ab03      	add	r3, sp, #12
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	462a      	mov	r2, r5
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	4b06      	ldr	r3, [pc, #24]	@ (8008b88 <_svfiprintf_r+0x1f4>)
 8008b70:	a904      	add	r1, sp, #16
 8008b72:	f7fc ffb5 	bl	8005ae0 <_printf_i>
 8008b76:	e7ed      	b.n	8008b54 <_svfiprintf_r+0x1c0>
 8008b78:	0800a83c 	.word	0x0800a83c
 8008b7c:	0800a842 	.word	0x0800a842
 8008b80:	0800a846 	.word	0x0800a846
 8008b84:	080055a5 	.word	0x080055a5
 8008b88:	080088dd 	.word	0x080088dd

08008b8c <__sflush_r>:
 8008b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	0716      	lsls	r6, r2, #28
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	d454      	bmi.n	8008c44 <__sflush_r+0xb8>
 8008b9a:	684b      	ldr	r3, [r1, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc02      	bgt.n	8008ba6 <__sflush_r+0x1a>
 8008ba0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd48      	ble.n	8008c38 <__sflush_r+0xac>
 8008ba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ba8:	2e00      	cmp	r6, #0
 8008baa:	d045      	beq.n	8008c38 <__sflush_r+0xac>
 8008bac:	2300      	movs	r3, #0
 8008bae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bb2:	682f      	ldr	r7, [r5, #0]
 8008bb4:	6a21      	ldr	r1, [r4, #32]
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	d030      	beq.n	8008c1c <__sflush_r+0x90>
 8008bba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	0759      	lsls	r1, r3, #29
 8008bc0:	d505      	bpl.n	8008bce <__sflush_r+0x42>
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	1ad2      	subs	r2, r2, r3
 8008bc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bc8:	b10b      	cbz	r3, 8008bce <__sflush_r+0x42>
 8008bca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bcc:	1ad2      	subs	r2, r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bd4:	6a21      	ldr	r1, [r4, #32]
 8008bd6:	47b0      	blx	r6
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	d106      	bne.n	8008bec <__sflush_r+0x60>
 8008bde:	6829      	ldr	r1, [r5, #0]
 8008be0:	291d      	cmp	r1, #29
 8008be2:	d82b      	bhi.n	8008c3c <__sflush_r+0xb0>
 8008be4:	4a28      	ldr	r2, [pc, #160]	@ (8008c88 <__sflush_r+0xfc>)
 8008be6:	40ca      	lsrs	r2, r1
 8008be8:	07d6      	lsls	r6, r2, #31
 8008bea:	d527      	bpl.n	8008c3c <__sflush_r+0xb0>
 8008bec:	2200      	movs	r2, #0
 8008bee:	6062      	str	r2, [r4, #4]
 8008bf0:	6922      	ldr	r2, [r4, #16]
 8008bf2:	04d9      	lsls	r1, r3, #19
 8008bf4:	6022      	str	r2, [r4, #0]
 8008bf6:	d504      	bpl.n	8008c02 <__sflush_r+0x76>
 8008bf8:	1c42      	adds	r2, r0, #1
 8008bfa:	d101      	bne.n	8008c00 <__sflush_r+0x74>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b903      	cbnz	r3, 8008c02 <__sflush_r+0x76>
 8008c00:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c04:	602f      	str	r7, [r5, #0]
 8008c06:	b1b9      	cbz	r1, 8008c38 <__sflush_r+0xac>
 8008c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	d002      	beq.n	8008c16 <__sflush_r+0x8a>
 8008c10:	4628      	mov	r0, r5
 8008c12:	f7fe fac5 	bl	80071a0 <_free_r>
 8008c16:	2300      	movs	r3, #0
 8008c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c1a:	e00d      	b.n	8008c38 <__sflush_r+0xac>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b0      	blx	r6
 8008c22:	4602      	mov	r2, r0
 8008c24:	1c50      	adds	r0, r2, #1
 8008c26:	d1c9      	bne.n	8008bbc <__sflush_r+0x30>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0c6      	beq.n	8008bbc <__sflush_r+0x30>
 8008c2e:	2b1d      	cmp	r3, #29
 8008c30:	d001      	beq.n	8008c36 <__sflush_r+0xaa>
 8008c32:	2b16      	cmp	r3, #22
 8008c34:	d11d      	bne.n	8008c72 <__sflush_r+0xe6>
 8008c36:	602f      	str	r7, [r5, #0]
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e021      	b.n	8008c80 <__sflush_r+0xf4>
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c40:	b21b      	sxth	r3, r3
 8008c42:	e01a      	b.n	8008c7a <__sflush_r+0xee>
 8008c44:	690f      	ldr	r7, [r1, #16]
 8008c46:	2f00      	cmp	r7, #0
 8008c48:	d0f6      	beq.n	8008c38 <__sflush_r+0xac>
 8008c4a:	0793      	lsls	r3, r2, #30
 8008c4c:	bf18      	it	ne
 8008c4e:	2300      	movne	r3, #0
 8008c50:	680e      	ldr	r6, [r1, #0]
 8008c52:	bf08      	it	eq
 8008c54:	694b      	ldreq	r3, [r1, #20]
 8008c56:	1bf6      	subs	r6, r6, r7
 8008c58:	600f      	str	r7, [r1, #0]
 8008c5a:	608b      	str	r3, [r1, #8]
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	ddeb      	ble.n	8008c38 <__sflush_r+0xac>
 8008c60:	4633      	mov	r3, r6
 8008c62:	463a      	mov	r2, r7
 8008c64:	4628      	mov	r0, r5
 8008c66:	6a21      	ldr	r1, [r4, #32]
 8008c68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008c6c:	47e0      	blx	ip
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	dc07      	bgt.n	8008c82 <__sflush_r+0xf6>
 8008c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c82:	4407      	add	r7, r0
 8008c84:	1a36      	subs	r6, r6, r0
 8008c86:	e7e9      	b.n	8008c5c <__sflush_r+0xd0>
 8008c88:	20400001 	.word	0x20400001

08008c8c <_fflush_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	690b      	ldr	r3, [r1, #16]
 8008c90:	4605      	mov	r5, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	b913      	cbnz	r3, 8008c9c <_fflush_r+0x10>
 8008c96:	2500      	movs	r5, #0
 8008c98:	4628      	mov	r0, r5
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	b118      	cbz	r0, 8008ca6 <_fflush_r+0x1a>
 8008c9e:	6a03      	ldr	r3, [r0, #32]
 8008ca0:	b90b      	cbnz	r3, 8008ca6 <_fflush_r+0x1a>
 8008ca2:	f7fd fad1 	bl	8006248 <__sinit>
 8008ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0f3      	beq.n	8008c96 <_fflush_r+0xa>
 8008cae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cb0:	07d0      	lsls	r0, r2, #31
 8008cb2:	d404      	bmi.n	8008cbe <_fflush_r+0x32>
 8008cb4:	0599      	lsls	r1, r3, #22
 8008cb6:	d402      	bmi.n	8008cbe <_fflush_r+0x32>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cba:	f7fd fbfe 	bl	80064ba <__retarget_lock_acquire_recursive>
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7ff ff63 	bl	8008b8c <__sflush_r>
 8008cc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cc8:	4605      	mov	r5, r0
 8008cca:	07da      	lsls	r2, r3, #31
 8008ccc:	d4e4      	bmi.n	8008c98 <_fflush_r+0xc>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	059b      	lsls	r3, r3, #22
 8008cd2:	d4e1      	bmi.n	8008c98 <_fflush_r+0xc>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cd6:	f7fd fbf1 	bl	80064bc <__retarget_lock_release_recursive>
 8008cda:	e7dd      	b.n	8008c98 <_fflush_r+0xc>

08008cdc <memmove>:
 8008cdc:	4288      	cmp	r0, r1
 8008cde:	b510      	push	{r4, lr}
 8008ce0:	eb01 0402 	add.w	r4, r1, r2
 8008ce4:	d902      	bls.n	8008cec <memmove+0x10>
 8008ce6:	4284      	cmp	r4, r0
 8008ce8:	4623      	mov	r3, r4
 8008cea:	d807      	bhi.n	8008cfc <memmove+0x20>
 8008cec:	1e43      	subs	r3, r0, #1
 8008cee:	42a1      	cmp	r1, r4
 8008cf0:	d008      	beq.n	8008d04 <memmove+0x28>
 8008cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cfa:	e7f8      	b.n	8008cee <memmove+0x12>
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	4402      	add	r2, r0
 8008d00:	428a      	cmp	r2, r1
 8008d02:	d100      	bne.n	8008d06 <memmove+0x2a>
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d0e:	e7f7      	b.n	8008d00 <memmove+0x24>

08008d10 <_sbrk_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	2300      	movs	r3, #0
 8008d14:	4d05      	ldr	r5, [pc, #20]	@ (8008d2c <_sbrk_r+0x1c>)
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7f9 fec4 	bl	8002aa8 <_sbrk>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_sbrk_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_sbrk_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000898 	.word	0x20000898

08008d30 <memcpy>:
 8008d30:	440a      	add	r2, r1
 8008d32:	4291      	cmp	r1, r2
 8008d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d38:	d100      	bne.n	8008d3c <memcpy+0xc>
 8008d3a:	4770      	bx	lr
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d42:	4291      	cmp	r1, r2
 8008d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d48:	d1f9      	bne.n	8008d3e <memcpy+0xe>
 8008d4a:	bd10      	pop	{r4, pc}

08008d4c <nan>:
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	4901      	ldr	r1, [pc, #4]	@ (8008d54 <nan+0x8>)
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	7ff80000 	.word	0x7ff80000

08008d58 <__assert_func>:
 8008d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <__assert_func+0x2c>)
 8008d60:	4605      	mov	r5, r0
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68d8      	ldr	r0, [r3, #12]
 8008d66:	b14c      	cbz	r4, 8008d7c <__assert_func+0x24>
 8008d68:	4b07      	ldr	r3, [pc, #28]	@ (8008d88 <__assert_func+0x30>)
 8008d6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d6e:	9100      	str	r1, [sp, #0]
 8008d70:	462b      	mov	r3, r5
 8008d72:	4906      	ldr	r1, [pc, #24]	@ (8008d8c <__assert_func+0x34>)
 8008d74:	f000 fba8 	bl	80094c8 <fiprintf>
 8008d78:	f000 fbb8 	bl	80094ec <abort>
 8008d7c:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <__assert_func+0x38>)
 8008d7e:	461c      	mov	r4, r3
 8008d80:	e7f3      	b.n	8008d6a <__assert_func+0x12>
 8008d82:	bf00      	nop
 8008d84:	2000001c 	.word	0x2000001c
 8008d88:	0800a855 	.word	0x0800a855
 8008d8c:	0800a862 	.word	0x0800a862
 8008d90:	0800a890 	.word	0x0800a890

08008d94 <_calloc_r>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	fba1 5402 	umull	r5, r4, r1, r2
 8008d9a:	b934      	cbnz	r4, 8008daa <_calloc_r+0x16>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7fe fa71 	bl	8007284 <_malloc_r>
 8008da2:	4606      	mov	r6, r0
 8008da4:	b928      	cbnz	r0, 8008db2 <_calloc_r+0x1e>
 8008da6:	4630      	mov	r0, r6
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	220c      	movs	r2, #12
 8008dac:	2600      	movs	r6, #0
 8008dae:	6002      	str	r2, [r0, #0]
 8008db0:	e7f9      	b.n	8008da6 <_calloc_r+0x12>
 8008db2:	462a      	mov	r2, r5
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7fd fae2 	bl	800637e <memset>
 8008dba:	e7f4      	b.n	8008da6 <_calloc_r+0x12>

08008dbc <rshift>:
 8008dbc:	6903      	ldr	r3, [r0, #16]
 8008dbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dc6:	f100 0414 	add.w	r4, r0, #20
 8008dca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dce:	dd46      	ble.n	8008e5e <rshift+0xa2>
 8008dd0:	f011 011f 	ands.w	r1, r1, #31
 8008dd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008dd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ddc:	d10c      	bne.n	8008df8 <rshift+0x3c>
 8008dde:	4629      	mov	r1, r5
 8008de0:	f100 0710 	add.w	r7, r0, #16
 8008de4:	42b1      	cmp	r1, r6
 8008de6:	d335      	bcc.n	8008e54 <rshift+0x98>
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	1eea      	subs	r2, r5, #3
 8008dee:	4296      	cmp	r6, r2
 8008df0:	bf38      	it	cc
 8008df2:	2300      	movcc	r3, #0
 8008df4:	4423      	add	r3, r4
 8008df6:	e015      	b.n	8008e24 <rshift+0x68>
 8008df8:	46a1      	mov	r9, r4
 8008dfa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008dfe:	f1c1 0820 	rsb	r8, r1, #32
 8008e02:	40cf      	lsrs	r7, r1
 8008e04:	f105 0e04 	add.w	lr, r5, #4
 8008e08:	4576      	cmp	r6, lr
 8008e0a:	46f4      	mov	ip, lr
 8008e0c:	d816      	bhi.n	8008e3c <rshift+0x80>
 8008e0e:	1a9a      	subs	r2, r3, r2
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	3a04      	subs	r2, #4
 8008e14:	3501      	adds	r5, #1
 8008e16:	42ae      	cmp	r6, r5
 8008e18:	bf38      	it	cc
 8008e1a:	2200      	movcc	r2, #0
 8008e1c:	18a3      	adds	r3, r4, r2
 8008e1e:	50a7      	str	r7, [r4, r2]
 8008e20:	b107      	cbz	r7, 8008e24 <rshift+0x68>
 8008e22:	3304      	adds	r3, #4
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	eba3 0204 	sub.w	r2, r3, r4
 8008e2a:	bf08      	it	eq
 8008e2c:	2300      	moveq	r3, #0
 8008e2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e32:	6102      	str	r2, [r0, #16]
 8008e34:	bf08      	it	eq
 8008e36:	6143      	streq	r3, [r0, #20]
 8008e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e3c:	f8dc c000 	ldr.w	ip, [ip]
 8008e40:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e44:	ea4c 0707 	orr.w	r7, ip, r7
 8008e48:	f849 7b04 	str.w	r7, [r9], #4
 8008e4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e50:	40cf      	lsrs	r7, r1
 8008e52:	e7d9      	b.n	8008e08 <rshift+0x4c>
 8008e54:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e58:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e5c:	e7c2      	b.n	8008de4 <rshift+0x28>
 8008e5e:	4623      	mov	r3, r4
 8008e60:	e7e0      	b.n	8008e24 <rshift+0x68>

08008e62 <__hexdig_fun>:
 8008e62:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e66:	2b09      	cmp	r3, #9
 8008e68:	d802      	bhi.n	8008e70 <__hexdig_fun+0xe>
 8008e6a:	3820      	subs	r0, #32
 8008e6c:	b2c0      	uxtb	r0, r0
 8008e6e:	4770      	bx	lr
 8008e70:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d801      	bhi.n	8008e7c <__hexdig_fun+0x1a>
 8008e78:	3847      	subs	r0, #71	@ 0x47
 8008e7a:	e7f7      	b.n	8008e6c <__hexdig_fun+0xa>
 8008e7c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e80:	2b05      	cmp	r3, #5
 8008e82:	d801      	bhi.n	8008e88 <__hexdig_fun+0x26>
 8008e84:	3827      	subs	r0, #39	@ 0x27
 8008e86:	e7f1      	b.n	8008e6c <__hexdig_fun+0xa>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	4770      	bx	lr

08008e8c <__gethex>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	468a      	mov	sl, r1
 8008e92:	4690      	mov	r8, r2
 8008e94:	b085      	sub	sp, #20
 8008e96:	9302      	str	r3, [sp, #8]
 8008e98:	680b      	ldr	r3, [r1, #0]
 8008e9a:	9001      	str	r0, [sp, #4]
 8008e9c:	1c9c      	adds	r4, r3, #2
 8008e9e:	46a1      	mov	r9, r4
 8008ea0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ea4:	2830      	cmp	r0, #48	@ 0x30
 8008ea6:	d0fa      	beq.n	8008e9e <__gethex+0x12>
 8008ea8:	eba9 0303 	sub.w	r3, r9, r3
 8008eac:	f1a3 0b02 	sub.w	fp, r3, #2
 8008eb0:	f7ff ffd7 	bl	8008e62 <__hexdig_fun>
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d168      	bne.n	8008f8c <__gethex+0x100>
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	499f      	ldr	r1, [pc, #636]	@ (800913c <__gethex+0x2b0>)
 8008ec0:	f7fd fa74 	bl	80063ac <strncmp>
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d167      	bne.n	8008f9a <__gethex+0x10e>
 8008eca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ece:	4626      	mov	r6, r4
 8008ed0:	f7ff ffc7 	bl	8008e62 <__hexdig_fun>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d062      	beq.n	8008f9e <__gethex+0x112>
 8008ed8:	4623      	mov	r3, r4
 8008eda:	7818      	ldrb	r0, [r3, #0]
 8008edc:	4699      	mov	r9, r3
 8008ede:	2830      	cmp	r0, #48	@ 0x30
 8008ee0:	f103 0301 	add.w	r3, r3, #1
 8008ee4:	d0f9      	beq.n	8008eda <__gethex+0x4e>
 8008ee6:	f7ff ffbc 	bl	8008e62 <__hexdig_fun>
 8008eea:	fab0 f580 	clz	r5, r0
 8008eee:	f04f 0b01 	mov.w	fp, #1
 8008ef2:	096d      	lsrs	r5, r5, #5
 8008ef4:	464a      	mov	r2, r9
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	7830      	ldrb	r0, [r6, #0]
 8008efa:	3201      	adds	r2, #1
 8008efc:	f7ff ffb1 	bl	8008e62 <__hexdig_fun>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d1f8      	bne.n	8008ef6 <__gethex+0x6a>
 8008f04:	2201      	movs	r2, #1
 8008f06:	4630      	mov	r0, r6
 8008f08:	498c      	ldr	r1, [pc, #560]	@ (800913c <__gethex+0x2b0>)
 8008f0a:	f7fd fa4f 	bl	80063ac <strncmp>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d13f      	bne.n	8008f92 <__gethex+0x106>
 8008f12:	b944      	cbnz	r4, 8008f26 <__gethex+0x9a>
 8008f14:	1c74      	adds	r4, r6, #1
 8008f16:	4622      	mov	r2, r4
 8008f18:	4616      	mov	r6, r2
 8008f1a:	7830      	ldrb	r0, [r6, #0]
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	f7ff ffa0 	bl	8008e62 <__hexdig_fun>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d1f8      	bne.n	8008f18 <__gethex+0x8c>
 8008f26:	1ba4      	subs	r4, r4, r6
 8008f28:	00a7      	lsls	r7, r4, #2
 8008f2a:	7833      	ldrb	r3, [r6, #0]
 8008f2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f30:	2b50      	cmp	r3, #80	@ 0x50
 8008f32:	d13e      	bne.n	8008fb2 <__gethex+0x126>
 8008f34:	7873      	ldrb	r3, [r6, #1]
 8008f36:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f38:	d033      	beq.n	8008fa2 <__gethex+0x116>
 8008f3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f3c:	d034      	beq.n	8008fa8 <__gethex+0x11c>
 8008f3e:	2400      	movs	r4, #0
 8008f40:	1c71      	adds	r1, r6, #1
 8008f42:	7808      	ldrb	r0, [r1, #0]
 8008f44:	f7ff ff8d 	bl	8008e62 <__hexdig_fun>
 8008f48:	1e43      	subs	r3, r0, #1
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b18      	cmp	r3, #24
 8008f4e:	d830      	bhi.n	8008fb2 <__gethex+0x126>
 8008f50:	f1a0 0210 	sub.w	r2, r0, #16
 8008f54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f58:	f7ff ff83 	bl	8008e62 <__hexdig_fun>
 8008f5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f60:	fa5f fc8c 	uxtb.w	ip, ip
 8008f64:	f1bc 0f18 	cmp.w	ip, #24
 8008f68:	f04f 030a 	mov.w	r3, #10
 8008f6c:	d91e      	bls.n	8008fac <__gethex+0x120>
 8008f6e:	b104      	cbz	r4, 8008f72 <__gethex+0xe6>
 8008f70:	4252      	negs	r2, r2
 8008f72:	4417      	add	r7, r2
 8008f74:	f8ca 1000 	str.w	r1, [sl]
 8008f78:	b1ed      	cbz	r5, 8008fb6 <__gethex+0x12a>
 8008f7a:	f1bb 0f00 	cmp.w	fp, #0
 8008f7e:	bf0c      	ite	eq
 8008f80:	2506      	moveq	r5, #6
 8008f82:	2500      	movne	r5, #0
 8008f84:	4628      	mov	r0, r5
 8008f86:	b005      	add	sp, #20
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	2500      	movs	r5, #0
 8008f8e:	462c      	mov	r4, r5
 8008f90:	e7b0      	b.n	8008ef4 <__gethex+0x68>
 8008f92:	2c00      	cmp	r4, #0
 8008f94:	d1c7      	bne.n	8008f26 <__gethex+0x9a>
 8008f96:	4627      	mov	r7, r4
 8008f98:	e7c7      	b.n	8008f2a <__gethex+0x9e>
 8008f9a:	464e      	mov	r6, r9
 8008f9c:	462f      	mov	r7, r5
 8008f9e:	2501      	movs	r5, #1
 8008fa0:	e7c3      	b.n	8008f2a <__gethex+0x9e>
 8008fa2:	2400      	movs	r4, #0
 8008fa4:	1cb1      	adds	r1, r6, #2
 8008fa6:	e7cc      	b.n	8008f42 <__gethex+0xb6>
 8008fa8:	2401      	movs	r4, #1
 8008faa:	e7fb      	b.n	8008fa4 <__gethex+0x118>
 8008fac:	fb03 0002 	mla	r0, r3, r2, r0
 8008fb0:	e7ce      	b.n	8008f50 <__gethex+0xc4>
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	e7de      	b.n	8008f74 <__gethex+0xe8>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	eba6 0309 	sub.w	r3, r6, r9
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	2b07      	cmp	r3, #7
 8008fc0:	dc0a      	bgt.n	8008fd8 <__gethex+0x14c>
 8008fc2:	9801      	ldr	r0, [sp, #4]
 8008fc4:	f7fe f9ea 	bl	800739c <_Balloc>
 8008fc8:	4604      	mov	r4, r0
 8008fca:	b940      	cbnz	r0, 8008fde <__gethex+0x152>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	21e4      	movs	r1, #228	@ 0xe4
 8008fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8009140 <__gethex+0x2b4>)
 8008fd2:	485c      	ldr	r0, [pc, #368]	@ (8009144 <__gethex+0x2b8>)
 8008fd4:	f7ff fec0 	bl	8008d58 <__assert_func>
 8008fd8:	3101      	adds	r1, #1
 8008fda:	105b      	asrs	r3, r3, #1
 8008fdc:	e7ef      	b.n	8008fbe <__gethex+0x132>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f100 0a14 	add.w	sl, r0, #20
 8008fe4:	4655      	mov	r5, sl
 8008fe6:	469b      	mov	fp, r3
 8008fe8:	45b1      	cmp	r9, r6
 8008fea:	d337      	bcc.n	800905c <__gethex+0x1d0>
 8008fec:	f845 bb04 	str.w	fp, [r5], #4
 8008ff0:	eba5 050a 	sub.w	r5, r5, sl
 8008ff4:	10ad      	asrs	r5, r5, #2
 8008ff6:	6125      	str	r5, [r4, #16]
 8008ff8:	4658      	mov	r0, fp
 8008ffa:	f7fe fac1 	bl	8007580 <__hi0bits>
 8008ffe:	016d      	lsls	r5, r5, #5
 8009000:	f8d8 6000 	ldr.w	r6, [r8]
 8009004:	1a2d      	subs	r5, r5, r0
 8009006:	42b5      	cmp	r5, r6
 8009008:	dd54      	ble.n	80090b4 <__gethex+0x228>
 800900a:	1bad      	subs	r5, r5, r6
 800900c:	4629      	mov	r1, r5
 800900e:	4620      	mov	r0, r4
 8009010:	f7fe fe43 	bl	8007c9a <__any_on>
 8009014:	4681      	mov	r9, r0
 8009016:	b178      	cbz	r0, 8009038 <__gethex+0x1ac>
 8009018:	f04f 0901 	mov.w	r9, #1
 800901c:	1e6b      	subs	r3, r5, #1
 800901e:	1159      	asrs	r1, r3, #5
 8009020:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009024:	f003 021f 	and.w	r2, r3, #31
 8009028:	fa09 f202 	lsl.w	r2, r9, r2
 800902c:	420a      	tst	r2, r1
 800902e:	d003      	beq.n	8009038 <__gethex+0x1ac>
 8009030:	454b      	cmp	r3, r9
 8009032:	dc36      	bgt.n	80090a2 <__gethex+0x216>
 8009034:	f04f 0902 	mov.w	r9, #2
 8009038:	4629      	mov	r1, r5
 800903a:	4620      	mov	r0, r4
 800903c:	f7ff febe 	bl	8008dbc <rshift>
 8009040:	442f      	add	r7, r5
 8009042:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009046:	42bb      	cmp	r3, r7
 8009048:	da42      	bge.n	80090d0 <__gethex+0x244>
 800904a:	4621      	mov	r1, r4
 800904c:	9801      	ldr	r0, [sp, #4]
 800904e:	f7fe f9e5 	bl	800741c <_Bfree>
 8009052:	2300      	movs	r3, #0
 8009054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009056:	25a3      	movs	r5, #163	@ 0xa3
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	e793      	b.n	8008f84 <__gethex+0xf8>
 800905c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009060:	2a2e      	cmp	r2, #46	@ 0x2e
 8009062:	d012      	beq.n	800908a <__gethex+0x1fe>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d104      	bne.n	8009072 <__gethex+0x1e6>
 8009068:	f845 bb04 	str.w	fp, [r5], #4
 800906c:	f04f 0b00 	mov.w	fp, #0
 8009070:	465b      	mov	r3, fp
 8009072:	7830      	ldrb	r0, [r6, #0]
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	f7ff fef4 	bl	8008e62 <__hexdig_fun>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	f000 000f 	and.w	r0, r0, #15
 8009080:	4098      	lsls	r0, r3
 8009082:	ea4b 0b00 	orr.w	fp, fp, r0
 8009086:	3304      	adds	r3, #4
 8009088:	e7ae      	b.n	8008fe8 <__gethex+0x15c>
 800908a:	45b1      	cmp	r9, r6
 800908c:	d8ea      	bhi.n	8009064 <__gethex+0x1d8>
 800908e:	2201      	movs	r2, #1
 8009090:	4630      	mov	r0, r6
 8009092:	492a      	ldr	r1, [pc, #168]	@ (800913c <__gethex+0x2b0>)
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	f7fd f989 	bl	80063ac <strncmp>
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	2800      	cmp	r0, #0
 800909e:	d1e1      	bne.n	8009064 <__gethex+0x1d8>
 80090a0:	e7a2      	b.n	8008fe8 <__gethex+0x15c>
 80090a2:	4620      	mov	r0, r4
 80090a4:	1ea9      	subs	r1, r5, #2
 80090a6:	f7fe fdf8 	bl	8007c9a <__any_on>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0c2      	beq.n	8009034 <__gethex+0x1a8>
 80090ae:	f04f 0903 	mov.w	r9, #3
 80090b2:	e7c1      	b.n	8009038 <__gethex+0x1ac>
 80090b4:	da09      	bge.n	80090ca <__gethex+0x23e>
 80090b6:	1b75      	subs	r5, r6, r5
 80090b8:	4621      	mov	r1, r4
 80090ba:	462a      	mov	r2, r5
 80090bc:	9801      	ldr	r0, [sp, #4]
 80090be:	f7fe fbbd 	bl	800783c <__lshift>
 80090c2:	4604      	mov	r4, r0
 80090c4:	1b7f      	subs	r7, r7, r5
 80090c6:	f100 0a14 	add.w	sl, r0, #20
 80090ca:	f04f 0900 	mov.w	r9, #0
 80090ce:	e7b8      	b.n	8009042 <__gethex+0x1b6>
 80090d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090d4:	42bd      	cmp	r5, r7
 80090d6:	dd6f      	ble.n	80091b8 <__gethex+0x32c>
 80090d8:	1bed      	subs	r5, r5, r7
 80090da:	42ae      	cmp	r6, r5
 80090dc:	dc34      	bgt.n	8009148 <__gethex+0x2bc>
 80090de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d022      	beq.n	800912c <__gethex+0x2a0>
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d024      	beq.n	8009134 <__gethex+0x2a8>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d115      	bne.n	800911a <__gethex+0x28e>
 80090ee:	42ae      	cmp	r6, r5
 80090f0:	d113      	bne.n	800911a <__gethex+0x28e>
 80090f2:	2e01      	cmp	r6, #1
 80090f4:	d10b      	bne.n	800910e <__gethex+0x282>
 80090f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090fa:	9a02      	ldr	r2, [sp, #8]
 80090fc:	2562      	movs	r5, #98	@ 0x62
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	6123      	str	r3, [r4, #16]
 8009104:	f8ca 3000 	str.w	r3, [sl]
 8009108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910a:	601c      	str	r4, [r3, #0]
 800910c:	e73a      	b.n	8008f84 <__gethex+0xf8>
 800910e:	4620      	mov	r0, r4
 8009110:	1e71      	subs	r1, r6, #1
 8009112:	f7fe fdc2 	bl	8007c9a <__any_on>
 8009116:	2800      	cmp	r0, #0
 8009118:	d1ed      	bne.n	80090f6 <__gethex+0x26a>
 800911a:	4621      	mov	r1, r4
 800911c:	9801      	ldr	r0, [sp, #4]
 800911e:	f7fe f97d 	bl	800741c <_Bfree>
 8009122:	2300      	movs	r3, #0
 8009124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009126:	2550      	movs	r5, #80	@ 0x50
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	e72b      	b.n	8008f84 <__gethex+0xf8>
 800912c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f3      	bne.n	800911a <__gethex+0x28e>
 8009132:	e7e0      	b.n	80090f6 <__gethex+0x26a>
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1dd      	bne.n	80090f6 <__gethex+0x26a>
 800913a:	e7ee      	b.n	800911a <__gethex+0x28e>
 800913c:	0800a83a 	.word	0x0800a83a
 8009140:	0800a7d0 	.word	0x0800a7d0
 8009144:	0800a891 	.word	0x0800a891
 8009148:	1e6f      	subs	r7, r5, #1
 800914a:	f1b9 0f00 	cmp.w	r9, #0
 800914e:	d130      	bne.n	80091b2 <__gethex+0x326>
 8009150:	b127      	cbz	r7, 800915c <__gethex+0x2d0>
 8009152:	4639      	mov	r1, r7
 8009154:	4620      	mov	r0, r4
 8009156:	f7fe fda0 	bl	8007c9a <__any_on>
 800915a:	4681      	mov	r9, r0
 800915c:	2301      	movs	r3, #1
 800915e:	4629      	mov	r1, r5
 8009160:	1b76      	subs	r6, r6, r5
 8009162:	2502      	movs	r5, #2
 8009164:	117a      	asrs	r2, r7, #5
 8009166:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800916a:	f007 071f 	and.w	r7, r7, #31
 800916e:	40bb      	lsls	r3, r7
 8009170:	4213      	tst	r3, r2
 8009172:	4620      	mov	r0, r4
 8009174:	bf18      	it	ne
 8009176:	f049 0902 	orrne.w	r9, r9, #2
 800917a:	f7ff fe1f 	bl	8008dbc <rshift>
 800917e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009182:	f1b9 0f00 	cmp.w	r9, #0
 8009186:	d047      	beq.n	8009218 <__gethex+0x38c>
 8009188:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d015      	beq.n	80091bc <__gethex+0x330>
 8009190:	2b03      	cmp	r3, #3
 8009192:	d017      	beq.n	80091c4 <__gethex+0x338>
 8009194:	2b01      	cmp	r3, #1
 8009196:	d109      	bne.n	80091ac <__gethex+0x320>
 8009198:	f019 0f02 	tst.w	r9, #2
 800919c:	d006      	beq.n	80091ac <__gethex+0x320>
 800919e:	f8da 3000 	ldr.w	r3, [sl]
 80091a2:	ea49 0903 	orr.w	r9, r9, r3
 80091a6:	f019 0f01 	tst.w	r9, #1
 80091aa:	d10e      	bne.n	80091ca <__gethex+0x33e>
 80091ac:	f045 0510 	orr.w	r5, r5, #16
 80091b0:	e032      	b.n	8009218 <__gethex+0x38c>
 80091b2:	f04f 0901 	mov.w	r9, #1
 80091b6:	e7d1      	b.n	800915c <__gethex+0x2d0>
 80091b8:	2501      	movs	r5, #1
 80091ba:	e7e2      	b.n	8009182 <__gethex+0x2f6>
 80091bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091be:	f1c3 0301 	rsb	r3, r3, #1
 80091c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0f0      	beq.n	80091ac <__gethex+0x320>
 80091ca:	f04f 0c00 	mov.w	ip, #0
 80091ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091d2:	f104 0314 	add.w	r3, r4, #20
 80091d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091de:	4618      	mov	r0, r3
 80091e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091e8:	d01b      	beq.n	8009222 <__gethex+0x396>
 80091ea:	3201      	adds	r2, #1
 80091ec:	6002      	str	r2, [r0, #0]
 80091ee:	2d02      	cmp	r5, #2
 80091f0:	f104 0314 	add.w	r3, r4, #20
 80091f4:	d13c      	bne.n	8009270 <__gethex+0x3e4>
 80091f6:	f8d8 2000 	ldr.w	r2, [r8]
 80091fa:	3a01      	subs	r2, #1
 80091fc:	42b2      	cmp	r2, r6
 80091fe:	d109      	bne.n	8009214 <__gethex+0x388>
 8009200:	2201      	movs	r2, #1
 8009202:	1171      	asrs	r1, r6, #5
 8009204:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009208:	f006 061f 	and.w	r6, r6, #31
 800920c:	fa02 f606 	lsl.w	r6, r2, r6
 8009210:	421e      	tst	r6, r3
 8009212:	d13a      	bne.n	800928a <__gethex+0x3fe>
 8009214:	f045 0520 	orr.w	r5, r5, #32
 8009218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800921a:	601c      	str	r4, [r3, #0]
 800921c:	9b02      	ldr	r3, [sp, #8]
 800921e:	601f      	str	r7, [r3, #0]
 8009220:	e6b0      	b.n	8008f84 <__gethex+0xf8>
 8009222:	4299      	cmp	r1, r3
 8009224:	f843 cc04 	str.w	ip, [r3, #-4]
 8009228:	d8d9      	bhi.n	80091de <__gethex+0x352>
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	459b      	cmp	fp, r3
 800922e:	db17      	blt.n	8009260 <__gethex+0x3d4>
 8009230:	6861      	ldr	r1, [r4, #4]
 8009232:	9801      	ldr	r0, [sp, #4]
 8009234:	3101      	adds	r1, #1
 8009236:	f7fe f8b1 	bl	800739c <_Balloc>
 800923a:	4681      	mov	r9, r0
 800923c:	b918      	cbnz	r0, 8009246 <__gethex+0x3ba>
 800923e:	4602      	mov	r2, r0
 8009240:	2184      	movs	r1, #132	@ 0x84
 8009242:	4b19      	ldr	r3, [pc, #100]	@ (80092a8 <__gethex+0x41c>)
 8009244:	e6c5      	b.n	8008fd2 <__gethex+0x146>
 8009246:	6922      	ldr	r2, [r4, #16]
 8009248:	f104 010c 	add.w	r1, r4, #12
 800924c:	3202      	adds	r2, #2
 800924e:	0092      	lsls	r2, r2, #2
 8009250:	300c      	adds	r0, #12
 8009252:	f7ff fd6d 	bl	8008d30 <memcpy>
 8009256:	4621      	mov	r1, r4
 8009258:	9801      	ldr	r0, [sp, #4]
 800925a:	f7fe f8df 	bl	800741c <_Bfree>
 800925e:	464c      	mov	r4, r9
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	6122      	str	r2, [r4, #16]
 8009266:	2201      	movs	r2, #1
 8009268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800926c:	615a      	str	r2, [r3, #20]
 800926e:	e7be      	b.n	80091ee <__gethex+0x362>
 8009270:	6922      	ldr	r2, [r4, #16]
 8009272:	455a      	cmp	r2, fp
 8009274:	dd0b      	ble.n	800928e <__gethex+0x402>
 8009276:	2101      	movs	r1, #1
 8009278:	4620      	mov	r0, r4
 800927a:	f7ff fd9f 	bl	8008dbc <rshift>
 800927e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009282:	3701      	adds	r7, #1
 8009284:	42bb      	cmp	r3, r7
 8009286:	f6ff aee0 	blt.w	800904a <__gethex+0x1be>
 800928a:	2501      	movs	r5, #1
 800928c:	e7c2      	b.n	8009214 <__gethex+0x388>
 800928e:	f016 061f 	ands.w	r6, r6, #31
 8009292:	d0fa      	beq.n	800928a <__gethex+0x3fe>
 8009294:	4453      	add	r3, sl
 8009296:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800929a:	f7fe f971 	bl	8007580 <__hi0bits>
 800929e:	f1c6 0620 	rsb	r6, r6, #32
 80092a2:	42b0      	cmp	r0, r6
 80092a4:	dbe7      	blt.n	8009276 <__gethex+0x3ea>
 80092a6:	e7f0      	b.n	800928a <__gethex+0x3fe>
 80092a8:	0800a7d0 	.word	0x0800a7d0

080092ac <L_shift>:
 80092ac:	f1c2 0208 	rsb	r2, r2, #8
 80092b0:	0092      	lsls	r2, r2, #2
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	f1c2 0620 	rsb	r6, r2, #32
 80092b8:	6843      	ldr	r3, [r0, #4]
 80092ba:	6804      	ldr	r4, [r0, #0]
 80092bc:	fa03 f506 	lsl.w	r5, r3, r6
 80092c0:	432c      	orrs	r4, r5
 80092c2:	40d3      	lsrs	r3, r2
 80092c4:	6004      	str	r4, [r0, #0]
 80092c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80092ca:	4288      	cmp	r0, r1
 80092cc:	d3f4      	bcc.n	80092b8 <L_shift+0xc>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}

080092d0 <__match>:
 80092d0:	b530      	push	{r4, r5, lr}
 80092d2:	6803      	ldr	r3, [r0, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092da:	b914      	cbnz	r4, 80092e2 <__match+0x12>
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	2001      	movs	r0, #1
 80092e0:	bd30      	pop	{r4, r5, pc}
 80092e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092ea:	2d19      	cmp	r5, #25
 80092ec:	bf98      	it	ls
 80092ee:	3220      	addls	r2, #32
 80092f0:	42a2      	cmp	r2, r4
 80092f2:	d0f0      	beq.n	80092d6 <__match+0x6>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e7f3      	b.n	80092e0 <__match+0x10>

080092f8 <__hexnan>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	2500      	movs	r5, #0
 80092fe:	680b      	ldr	r3, [r1, #0]
 8009300:	4682      	mov	sl, r0
 8009302:	115e      	asrs	r6, r3, #5
 8009304:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009308:	f013 031f 	ands.w	r3, r3, #31
 800930c:	bf18      	it	ne
 800930e:	3604      	addne	r6, #4
 8009310:	1f37      	subs	r7, r6, #4
 8009312:	4690      	mov	r8, r2
 8009314:	46b9      	mov	r9, r7
 8009316:	463c      	mov	r4, r7
 8009318:	46ab      	mov	fp, r5
 800931a:	b087      	sub	sp, #28
 800931c:	6801      	ldr	r1, [r0, #0]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	f846 5c04 	str.w	r5, [r6, #-4]
 8009324:	9502      	str	r5, [sp, #8]
 8009326:	784a      	ldrb	r2, [r1, #1]
 8009328:	1c4b      	adds	r3, r1, #1
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	b342      	cbz	r2, 8009380 <__hexnan+0x88>
 800932e:	4610      	mov	r0, r2
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	9204      	str	r2, [sp, #16]
 8009334:	f7ff fd95 	bl	8008e62 <__hexdig_fun>
 8009338:	2800      	cmp	r0, #0
 800933a:	d151      	bne.n	80093e0 <__hexnan+0xe8>
 800933c:	9a04      	ldr	r2, [sp, #16]
 800933e:	9905      	ldr	r1, [sp, #20]
 8009340:	2a20      	cmp	r2, #32
 8009342:	d818      	bhi.n	8009376 <__hexnan+0x7e>
 8009344:	9b02      	ldr	r3, [sp, #8]
 8009346:	459b      	cmp	fp, r3
 8009348:	dd13      	ble.n	8009372 <__hexnan+0x7a>
 800934a:	454c      	cmp	r4, r9
 800934c:	d206      	bcs.n	800935c <__hexnan+0x64>
 800934e:	2d07      	cmp	r5, #7
 8009350:	dc04      	bgt.n	800935c <__hexnan+0x64>
 8009352:	462a      	mov	r2, r5
 8009354:	4649      	mov	r1, r9
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff ffa8 	bl	80092ac <L_shift>
 800935c:	4544      	cmp	r4, r8
 800935e:	d952      	bls.n	8009406 <__hexnan+0x10e>
 8009360:	2300      	movs	r3, #0
 8009362:	f1a4 0904 	sub.w	r9, r4, #4
 8009366:	f844 3c04 	str.w	r3, [r4, #-4]
 800936a:	461d      	mov	r5, r3
 800936c:	464c      	mov	r4, r9
 800936e:	f8cd b008 	str.w	fp, [sp, #8]
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	e7d7      	b.n	8009326 <__hexnan+0x2e>
 8009376:	2a29      	cmp	r2, #41	@ 0x29
 8009378:	d157      	bne.n	800942a <__hexnan+0x132>
 800937a:	3102      	adds	r1, #2
 800937c:	f8ca 1000 	str.w	r1, [sl]
 8009380:	f1bb 0f00 	cmp.w	fp, #0
 8009384:	d051      	beq.n	800942a <__hexnan+0x132>
 8009386:	454c      	cmp	r4, r9
 8009388:	d206      	bcs.n	8009398 <__hexnan+0xa0>
 800938a:	2d07      	cmp	r5, #7
 800938c:	dc04      	bgt.n	8009398 <__hexnan+0xa0>
 800938e:	462a      	mov	r2, r5
 8009390:	4649      	mov	r1, r9
 8009392:	4620      	mov	r0, r4
 8009394:	f7ff ff8a 	bl	80092ac <L_shift>
 8009398:	4544      	cmp	r4, r8
 800939a:	d936      	bls.n	800940a <__hexnan+0x112>
 800939c:	4623      	mov	r3, r4
 800939e:	f1a8 0204 	sub.w	r2, r8, #4
 80093a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80093a6:	429f      	cmp	r7, r3
 80093a8:	f842 1f04 	str.w	r1, [r2, #4]!
 80093ac:	d2f9      	bcs.n	80093a2 <__hexnan+0xaa>
 80093ae:	1b3b      	subs	r3, r7, r4
 80093b0:	f023 0303 	bic.w	r3, r3, #3
 80093b4:	3304      	adds	r3, #4
 80093b6:	3401      	adds	r4, #1
 80093b8:	3e03      	subs	r6, #3
 80093ba:	42b4      	cmp	r4, r6
 80093bc:	bf88      	it	hi
 80093be:	2304      	movhi	r3, #4
 80093c0:	2200      	movs	r2, #0
 80093c2:	4443      	add	r3, r8
 80093c4:	f843 2b04 	str.w	r2, [r3], #4
 80093c8:	429f      	cmp	r7, r3
 80093ca:	d2fb      	bcs.n	80093c4 <__hexnan+0xcc>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	b91b      	cbnz	r3, 80093d8 <__hexnan+0xe0>
 80093d0:	4547      	cmp	r7, r8
 80093d2:	d128      	bne.n	8009426 <__hexnan+0x12e>
 80093d4:	2301      	movs	r3, #1
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	2005      	movs	r0, #5
 80093da:	b007      	add	sp, #28
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	3501      	adds	r5, #1
 80093e2:	2d08      	cmp	r5, #8
 80093e4:	f10b 0b01 	add.w	fp, fp, #1
 80093e8:	dd06      	ble.n	80093f8 <__hexnan+0x100>
 80093ea:	4544      	cmp	r4, r8
 80093ec:	d9c1      	bls.n	8009372 <__hexnan+0x7a>
 80093ee:	2300      	movs	r3, #0
 80093f0:	2501      	movs	r5, #1
 80093f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f6:	3c04      	subs	r4, #4
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	f000 000f 	and.w	r0, r0, #15
 80093fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009402:	6020      	str	r0, [r4, #0]
 8009404:	e7b5      	b.n	8009372 <__hexnan+0x7a>
 8009406:	2508      	movs	r5, #8
 8009408:	e7b3      	b.n	8009372 <__hexnan+0x7a>
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0dd      	beq.n	80093cc <__hexnan+0xd4>
 8009410:	f04f 32ff 	mov.w	r2, #4294967295
 8009414:	f1c3 0320 	rsb	r3, r3, #32
 8009418:	40da      	lsrs	r2, r3
 800941a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800941e:	4013      	ands	r3, r2
 8009420:	f846 3c04 	str.w	r3, [r6, #-4]
 8009424:	e7d2      	b.n	80093cc <__hexnan+0xd4>
 8009426:	3f04      	subs	r7, #4
 8009428:	e7d0      	b.n	80093cc <__hexnan+0xd4>
 800942a:	2004      	movs	r0, #4
 800942c:	e7d5      	b.n	80093da <__hexnan+0xe2>

0800942e <__ascii_mbtowc>:
 800942e:	b082      	sub	sp, #8
 8009430:	b901      	cbnz	r1, 8009434 <__ascii_mbtowc+0x6>
 8009432:	a901      	add	r1, sp, #4
 8009434:	b142      	cbz	r2, 8009448 <__ascii_mbtowc+0x1a>
 8009436:	b14b      	cbz	r3, 800944c <__ascii_mbtowc+0x1e>
 8009438:	7813      	ldrb	r3, [r2, #0]
 800943a:	600b      	str	r3, [r1, #0]
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	1e10      	subs	r0, r2, #0
 8009440:	bf18      	it	ne
 8009442:	2001      	movne	r0, #1
 8009444:	b002      	add	sp, #8
 8009446:	4770      	bx	lr
 8009448:	4610      	mov	r0, r2
 800944a:	e7fb      	b.n	8009444 <__ascii_mbtowc+0x16>
 800944c:	f06f 0001 	mvn.w	r0, #1
 8009450:	e7f8      	b.n	8009444 <__ascii_mbtowc+0x16>

08009452 <_realloc_r>:
 8009452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	4607      	mov	r7, r0
 8009458:	4614      	mov	r4, r2
 800945a:	460d      	mov	r5, r1
 800945c:	b921      	cbnz	r1, 8009468 <_realloc_r+0x16>
 800945e:	4611      	mov	r1, r2
 8009460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009464:	f7fd bf0e 	b.w	8007284 <_malloc_r>
 8009468:	b92a      	cbnz	r2, 8009476 <_realloc_r+0x24>
 800946a:	f7fd fe99 	bl	80071a0 <_free_r>
 800946e:	4625      	mov	r5, r4
 8009470:	4628      	mov	r0, r5
 8009472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009476:	f000 f840 	bl	80094fa <_malloc_usable_size_r>
 800947a:	4284      	cmp	r4, r0
 800947c:	4606      	mov	r6, r0
 800947e:	d802      	bhi.n	8009486 <_realloc_r+0x34>
 8009480:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009484:	d8f4      	bhi.n	8009470 <_realloc_r+0x1e>
 8009486:	4621      	mov	r1, r4
 8009488:	4638      	mov	r0, r7
 800948a:	f7fd fefb 	bl	8007284 <_malloc_r>
 800948e:	4680      	mov	r8, r0
 8009490:	b908      	cbnz	r0, 8009496 <_realloc_r+0x44>
 8009492:	4645      	mov	r5, r8
 8009494:	e7ec      	b.n	8009470 <_realloc_r+0x1e>
 8009496:	42b4      	cmp	r4, r6
 8009498:	4622      	mov	r2, r4
 800949a:	4629      	mov	r1, r5
 800949c:	bf28      	it	cs
 800949e:	4632      	movcs	r2, r6
 80094a0:	f7ff fc46 	bl	8008d30 <memcpy>
 80094a4:	4629      	mov	r1, r5
 80094a6:	4638      	mov	r0, r7
 80094a8:	f7fd fe7a 	bl	80071a0 <_free_r>
 80094ac:	e7f1      	b.n	8009492 <_realloc_r+0x40>

080094ae <__ascii_wctomb>:
 80094ae:	4603      	mov	r3, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	b141      	cbz	r1, 80094c6 <__ascii_wctomb+0x18>
 80094b4:	2aff      	cmp	r2, #255	@ 0xff
 80094b6:	d904      	bls.n	80094c2 <__ascii_wctomb+0x14>
 80094b8:	228a      	movs	r2, #138	@ 0x8a
 80094ba:	f04f 30ff 	mov.w	r0, #4294967295
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	4770      	bx	lr
 80094c2:	2001      	movs	r0, #1
 80094c4:	700a      	strb	r2, [r1, #0]
 80094c6:	4770      	bx	lr

080094c8 <fiprintf>:
 80094c8:	b40e      	push	{r1, r2, r3}
 80094ca:	b503      	push	{r0, r1, lr}
 80094cc:	4601      	mov	r1, r0
 80094ce:	ab03      	add	r3, sp, #12
 80094d0:	4805      	ldr	r0, [pc, #20]	@ (80094e8 <fiprintf+0x20>)
 80094d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d6:	6800      	ldr	r0, [r0, #0]
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	f000 f83d 	bl	8009558 <_vfiprintf_r>
 80094de:	b002      	add	sp, #8
 80094e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e4:	b003      	add	sp, #12
 80094e6:	4770      	bx	lr
 80094e8:	2000001c 	.word	0x2000001c

080094ec <abort>:
 80094ec:	2006      	movs	r0, #6
 80094ee:	b508      	push	{r3, lr}
 80094f0:	f000 fa06 	bl	8009900 <raise>
 80094f4:	2001      	movs	r0, #1
 80094f6:	f7f9 fa62 	bl	80029be <_exit>

080094fa <_malloc_usable_size_r>:
 80094fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094fe:	1f18      	subs	r0, r3, #4
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfbc      	itt	lt
 8009504:	580b      	ldrlt	r3, [r1, r0]
 8009506:	18c0      	addlt	r0, r0, r3
 8009508:	4770      	bx	lr

0800950a <__sfputc_r>:
 800950a:	6893      	ldr	r3, [r2, #8]
 800950c:	b410      	push	{r4}
 800950e:	3b01      	subs	r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	6093      	str	r3, [r2, #8]
 8009514:	da07      	bge.n	8009526 <__sfputc_r+0x1c>
 8009516:	6994      	ldr	r4, [r2, #24]
 8009518:	42a3      	cmp	r3, r4
 800951a:	db01      	blt.n	8009520 <__sfputc_r+0x16>
 800951c:	290a      	cmp	r1, #10
 800951e:	d102      	bne.n	8009526 <__sfputc_r+0x1c>
 8009520:	bc10      	pop	{r4}
 8009522:	f000 b931 	b.w	8009788 <__swbuf_r>
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	1c58      	adds	r0, r3, #1
 800952a:	6010      	str	r0, [r2, #0]
 800952c:	7019      	strb	r1, [r3, #0]
 800952e:	4608      	mov	r0, r1
 8009530:	bc10      	pop	{r4}
 8009532:	4770      	bx	lr

08009534 <__sfputs_r>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	4614      	mov	r4, r2
 800953c:	18d5      	adds	r5, r2, r3
 800953e:	42ac      	cmp	r4, r5
 8009540:	d101      	bne.n	8009546 <__sfputs_r+0x12>
 8009542:	2000      	movs	r0, #0
 8009544:	e007      	b.n	8009556 <__sfputs_r+0x22>
 8009546:	463a      	mov	r2, r7
 8009548:	4630      	mov	r0, r6
 800954a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954e:	f7ff ffdc 	bl	800950a <__sfputc_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d1f3      	bne.n	800953e <__sfputs_r+0xa>
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009558 <_vfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	4614      	mov	r4, r2
 8009560:	4698      	mov	r8, r3
 8009562:	4606      	mov	r6, r0
 8009564:	b09d      	sub	sp, #116	@ 0x74
 8009566:	b118      	cbz	r0, 8009570 <_vfiprintf_r+0x18>
 8009568:	6a03      	ldr	r3, [r0, #32]
 800956a:	b90b      	cbnz	r3, 8009570 <_vfiprintf_r+0x18>
 800956c:	f7fc fe6c 	bl	8006248 <__sinit>
 8009570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	d405      	bmi.n	8009582 <_vfiprintf_r+0x2a>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d402      	bmi.n	8009582 <_vfiprintf_r+0x2a>
 800957c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957e:	f7fc ff9c 	bl	80064ba <__retarget_lock_acquire_recursive>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	071b      	lsls	r3, r3, #28
 8009586:	d501      	bpl.n	800958c <_vfiprintf_r+0x34>
 8009588:	692b      	ldr	r3, [r5, #16]
 800958a:	b99b      	cbnz	r3, 80095b4 <_vfiprintf_r+0x5c>
 800958c:	4629      	mov	r1, r5
 800958e:	4630      	mov	r0, r6
 8009590:	f000 f938 	bl	8009804 <__swsetup_r>
 8009594:	b170      	cbz	r0, 80095b4 <_vfiprintf_r+0x5c>
 8009596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009598:	07dc      	lsls	r4, r3, #31
 800959a:	d504      	bpl.n	80095a6 <_vfiprintf_r+0x4e>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	b01d      	add	sp, #116	@ 0x74
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	0598      	lsls	r0, r3, #22
 80095aa:	d4f7      	bmi.n	800959c <_vfiprintf_r+0x44>
 80095ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ae:	f7fc ff85 	bl	80064bc <__retarget_lock_release_recursive>
 80095b2:	e7f3      	b.n	800959c <_vfiprintf_r+0x44>
 80095b4:	2300      	movs	r3, #0
 80095b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b8:	2320      	movs	r3, #32
 80095ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095be:	2330      	movs	r3, #48	@ 0x30
 80095c0:	f04f 0901 	mov.w	r9, #1
 80095c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009774 <_vfiprintf_r+0x21c>
 80095cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095d0:	4623      	mov	r3, r4
 80095d2:	469a      	mov	sl, r3
 80095d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d8:	b10a      	cbz	r2, 80095de <_vfiprintf_r+0x86>
 80095da:	2a25      	cmp	r2, #37	@ 0x25
 80095dc:	d1f9      	bne.n	80095d2 <_vfiprintf_r+0x7a>
 80095de:	ebba 0b04 	subs.w	fp, sl, r4
 80095e2:	d00b      	beq.n	80095fc <_vfiprintf_r+0xa4>
 80095e4:	465b      	mov	r3, fp
 80095e6:	4622      	mov	r2, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ffa2 	bl	8009534 <__sfputs_r>
 80095f0:	3001      	adds	r0, #1
 80095f2:	f000 80a7 	beq.w	8009744 <_vfiprintf_r+0x1ec>
 80095f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f8:	445a      	add	r2, fp
 80095fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 809f 	beq.w	8009744 <_vfiprintf_r+0x1ec>
 8009606:	2300      	movs	r3, #0
 8009608:	f04f 32ff 	mov.w	r2, #4294967295
 800960c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009610:	f10a 0a01 	add.w	sl, sl, #1
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	9307      	str	r3, [sp, #28]
 8009618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800961c:	931a      	str	r3, [sp, #104]	@ 0x68
 800961e:	4654      	mov	r4, sl
 8009620:	2205      	movs	r2, #5
 8009622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009626:	4853      	ldr	r0, [pc, #332]	@ (8009774 <_vfiprintf_r+0x21c>)
 8009628:	f7fc ff49 	bl	80064be <memchr>
 800962c:	9a04      	ldr	r2, [sp, #16]
 800962e:	b9d8      	cbnz	r0, 8009668 <_vfiprintf_r+0x110>
 8009630:	06d1      	lsls	r1, r2, #27
 8009632:	bf44      	itt	mi
 8009634:	2320      	movmi	r3, #32
 8009636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800963a:	0713      	lsls	r3, r2, #28
 800963c:	bf44      	itt	mi
 800963e:	232b      	movmi	r3, #43	@ 0x2b
 8009640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009644:	f89a 3000 	ldrb.w	r3, [sl]
 8009648:	2b2a      	cmp	r3, #42	@ 0x2a
 800964a:	d015      	beq.n	8009678 <_vfiprintf_r+0x120>
 800964c:	4654      	mov	r4, sl
 800964e:	2000      	movs	r0, #0
 8009650:	f04f 0c0a 	mov.w	ip, #10
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	4621      	mov	r1, r4
 8009658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965c:	3b30      	subs	r3, #48	@ 0x30
 800965e:	2b09      	cmp	r3, #9
 8009660:	d94b      	bls.n	80096fa <_vfiprintf_r+0x1a2>
 8009662:	b1b0      	cbz	r0, 8009692 <_vfiprintf_r+0x13a>
 8009664:	9207      	str	r2, [sp, #28]
 8009666:	e014      	b.n	8009692 <_vfiprintf_r+0x13a>
 8009668:	eba0 0308 	sub.w	r3, r0, r8
 800966c:	fa09 f303 	lsl.w	r3, r9, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	46a2      	mov	sl, r4
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	e7d2      	b.n	800961e <_vfiprintf_r+0xc6>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	1d19      	adds	r1, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9103      	str	r1, [sp, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfbb      	ittet	lt
 8009684:	425b      	neglt	r3, r3
 8009686:	f042 0202 	orrlt.w	r2, r2, #2
 800968a:	9307      	strge	r3, [sp, #28]
 800968c:	9307      	strlt	r3, [sp, #28]
 800968e:	bfb8      	it	lt
 8009690:	9204      	strlt	r2, [sp, #16]
 8009692:	7823      	ldrb	r3, [r4, #0]
 8009694:	2b2e      	cmp	r3, #46	@ 0x2e
 8009696:	d10a      	bne.n	80096ae <_vfiprintf_r+0x156>
 8009698:	7863      	ldrb	r3, [r4, #1]
 800969a:	2b2a      	cmp	r3, #42	@ 0x2a
 800969c:	d132      	bne.n	8009704 <_vfiprintf_r+0x1ac>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	3402      	adds	r4, #2
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	9203      	str	r2, [sp, #12]
 80096a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009778 <_vfiprintf_r+0x220>
 80096b2:	2203      	movs	r2, #3
 80096b4:	4650      	mov	r0, sl
 80096b6:	7821      	ldrb	r1, [r4, #0]
 80096b8:	f7fc ff01 	bl	80064be <memchr>
 80096bc:	b138      	cbz	r0, 80096ce <_vfiprintf_r+0x176>
 80096be:	2240      	movs	r2, #64	@ 0x40
 80096c0:	9b04      	ldr	r3, [sp, #16]
 80096c2:	eba0 000a 	sub.w	r0, r0, sl
 80096c6:	4082      	lsls	r2, r0
 80096c8:	4313      	orrs	r3, r2
 80096ca:	3401      	adds	r4, #1
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d2:	2206      	movs	r2, #6
 80096d4:	4829      	ldr	r0, [pc, #164]	@ (800977c <_vfiprintf_r+0x224>)
 80096d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096da:	f7fc fef0 	bl	80064be <memchr>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d03f      	beq.n	8009762 <_vfiprintf_r+0x20a>
 80096e2:	4b27      	ldr	r3, [pc, #156]	@ (8009780 <_vfiprintf_r+0x228>)
 80096e4:	bb1b      	cbnz	r3, 800972e <_vfiprintf_r+0x1d6>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	3307      	adds	r3, #7
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	3308      	adds	r3, #8
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f4:	443b      	add	r3, r7
 80096f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f8:	e76a      	b.n	80095d0 <_vfiprintf_r+0x78>
 80096fa:	460c      	mov	r4, r1
 80096fc:	2001      	movs	r0, #1
 80096fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009702:	e7a8      	b.n	8009656 <_vfiprintf_r+0xfe>
 8009704:	2300      	movs	r3, #0
 8009706:	f04f 0c0a 	mov.w	ip, #10
 800970a:	4619      	mov	r1, r3
 800970c:	3401      	adds	r4, #1
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	4620      	mov	r0, r4
 8009712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009716:	3a30      	subs	r2, #48	@ 0x30
 8009718:	2a09      	cmp	r2, #9
 800971a:	d903      	bls.n	8009724 <_vfiprintf_r+0x1cc>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0c6      	beq.n	80096ae <_vfiprintf_r+0x156>
 8009720:	9105      	str	r1, [sp, #20]
 8009722:	e7c4      	b.n	80096ae <_vfiprintf_r+0x156>
 8009724:	4604      	mov	r4, r0
 8009726:	2301      	movs	r3, #1
 8009728:	fb0c 2101 	mla	r1, ip, r1, r2
 800972c:	e7f0      	b.n	8009710 <_vfiprintf_r+0x1b8>
 800972e:	ab03      	add	r3, sp, #12
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	462a      	mov	r2, r5
 8009734:	4630      	mov	r0, r6
 8009736:	4b13      	ldr	r3, [pc, #76]	@ (8009784 <_vfiprintf_r+0x22c>)
 8009738:	a904      	add	r1, sp, #16
 800973a:	f7fb ff33 	bl	80055a4 <_printf_float>
 800973e:	4607      	mov	r7, r0
 8009740:	1c78      	adds	r0, r7, #1
 8009742:	d1d6      	bne.n	80096f2 <_vfiprintf_r+0x19a>
 8009744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	d405      	bmi.n	8009756 <_vfiprintf_r+0x1fe>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	059a      	lsls	r2, r3, #22
 800974e:	d402      	bmi.n	8009756 <_vfiprintf_r+0x1fe>
 8009750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009752:	f7fc feb3 	bl	80064bc <__retarget_lock_release_recursive>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	065b      	lsls	r3, r3, #25
 800975a:	f53f af1f 	bmi.w	800959c <_vfiprintf_r+0x44>
 800975e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009760:	e71e      	b.n	80095a0 <_vfiprintf_r+0x48>
 8009762:	ab03      	add	r3, sp, #12
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	462a      	mov	r2, r5
 8009768:	4630      	mov	r0, r6
 800976a:	4b06      	ldr	r3, [pc, #24]	@ (8009784 <_vfiprintf_r+0x22c>)
 800976c:	a904      	add	r1, sp, #16
 800976e:	f7fc f9b7 	bl	8005ae0 <_printf_i>
 8009772:	e7e4      	b.n	800973e <_vfiprintf_r+0x1e6>
 8009774:	0800a83c 	.word	0x0800a83c
 8009778:	0800a842 	.word	0x0800a842
 800977c:	0800a846 	.word	0x0800a846
 8009780:	080055a5 	.word	0x080055a5
 8009784:	08009535 	.word	0x08009535

08009788 <__swbuf_r>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	460e      	mov	r6, r1
 800978c:	4614      	mov	r4, r2
 800978e:	4605      	mov	r5, r0
 8009790:	b118      	cbz	r0, 800979a <__swbuf_r+0x12>
 8009792:	6a03      	ldr	r3, [r0, #32]
 8009794:	b90b      	cbnz	r3, 800979a <__swbuf_r+0x12>
 8009796:	f7fc fd57 	bl	8006248 <__sinit>
 800979a:	69a3      	ldr	r3, [r4, #24]
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	071a      	lsls	r2, r3, #28
 80097a2:	d501      	bpl.n	80097a8 <__swbuf_r+0x20>
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	b943      	cbnz	r3, 80097ba <__swbuf_r+0x32>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f82a 	bl	8009804 <__swsetup_r>
 80097b0:	b118      	cbz	r0, 80097ba <__swbuf_r+0x32>
 80097b2:	f04f 37ff 	mov.w	r7, #4294967295
 80097b6:	4638      	mov	r0, r7
 80097b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	6922      	ldr	r2, [r4, #16]
 80097be:	b2f6      	uxtb	r6, r6
 80097c0:	1a98      	subs	r0, r3, r2
 80097c2:	6963      	ldr	r3, [r4, #20]
 80097c4:	4637      	mov	r7, r6
 80097c6:	4283      	cmp	r3, r0
 80097c8:	dc05      	bgt.n	80097d6 <__swbuf_r+0x4e>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7ff fa5d 	bl	8008c8c <_fflush_r>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d1ed      	bne.n	80097b2 <__swbuf_r+0x2a>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	3b01      	subs	r3, #1
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	6022      	str	r2, [r4, #0]
 80097e2:	701e      	strb	r6, [r3, #0]
 80097e4:	6962      	ldr	r2, [r4, #20]
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d004      	beq.n	80097f6 <__swbuf_r+0x6e>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d5e1      	bpl.n	80097b6 <__swbuf_r+0x2e>
 80097f2:	2e0a      	cmp	r6, #10
 80097f4:	d1df      	bne.n	80097b6 <__swbuf_r+0x2e>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f7ff fa47 	bl	8008c8c <_fflush_r>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d0d9      	beq.n	80097b6 <__swbuf_r+0x2e>
 8009802:	e7d6      	b.n	80097b2 <__swbuf_r+0x2a>

08009804 <__swsetup_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4b29      	ldr	r3, [pc, #164]	@ (80098ac <__swsetup_r+0xa8>)
 8009808:	4605      	mov	r5, r0
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	460c      	mov	r4, r1
 800980e:	b118      	cbz	r0, 8009818 <__swsetup_r+0x14>
 8009810:	6a03      	ldr	r3, [r0, #32]
 8009812:	b90b      	cbnz	r3, 8009818 <__swsetup_r+0x14>
 8009814:	f7fc fd18 	bl	8006248 <__sinit>
 8009818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981c:	0719      	lsls	r1, r3, #28
 800981e:	d422      	bmi.n	8009866 <__swsetup_r+0x62>
 8009820:	06da      	lsls	r2, r3, #27
 8009822:	d407      	bmi.n	8009834 <__swsetup_r+0x30>
 8009824:	2209      	movs	r2, #9
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982c:	f04f 30ff 	mov.w	r0, #4294967295
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	e033      	b.n	800989c <__swsetup_r+0x98>
 8009834:	0758      	lsls	r0, r3, #29
 8009836:	d512      	bpl.n	800985e <__swsetup_r+0x5a>
 8009838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800983a:	b141      	cbz	r1, 800984e <__swsetup_r+0x4a>
 800983c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009840:	4299      	cmp	r1, r3
 8009842:	d002      	beq.n	800984a <__swsetup_r+0x46>
 8009844:	4628      	mov	r0, r5
 8009846:	f7fd fcab 	bl	80071a0 <_free_r>
 800984a:	2300      	movs	r3, #0
 800984c:	6363      	str	r3, [r4, #52]	@ 0x34
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	2300      	movs	r3, #0
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	6923      	ldr	r3, [r4, #16]
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f043 0308 	orr.w	r3, r3, #8
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	b94b      	cbnz	r3, 800987e <__swsetup_r+0x7a>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009874:	d003      	beq.n	800987e <__swsetup_r+0x7a>
 8009876:	4621      	mov	r1, r4
 8009878:	4628      	mov	r0, r5
 800987a:	f000 f882 	bl	8009982 <__smakebuf_r>
 800987e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009882:	f013 0201 	ands.w	r2, r3, #1
 8009886:	d00a      	beq.n	800989e <__swsetup_r+0x9a>
 8009888:	2200      	movs	r2, #0
 800988a:	60a2      	str	r2, [r4, #8]
 800988c:	6962      	ldr	r2, [r4, #20]
 800988e:	4252      	negs	r2, r2
 8009890:	61a2      	str	r2, [r4, #24]
 8009892:	6922      	ldr	r2, [r4, #16]
 8009894:	b942      	cbnz	r2, 80098a8 <__swsetup_r+0xa4>
 8009896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800989a:	d1c5      	bne.n	8009828 <__swsetup_r+0x24>
 800989c:	bd38      	pop	{r3, r4, r5, pc}
 800989e:	0799      	lsls	r1, r3, #30
 80098a0:	bf58      	it	pl
 80098a2:	6962      	ldrpl	r2, [r4, #20]
 80098a4:	60a2      	str	r2, [r4, #8]
 80098a6:	e7f4      	b.n	8009892 <__swsetup_r+0x8e>
 80098a8:	2000      	movs	r0, #0
 80098aa:	e7f7      	b.n	800989c <__swsetup_r+0x98>
 80098ac:	2000001c 	.word	0x2000001c

080098b0 <_raise_r>:
 80098b0:	291f      	cmp	r1, #31
 80098b2:	b538      	push	{r3, r4, r5, lr}
 80098b4:	4605      	mov	r5, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	d904      	bls.n	80098c4 <_raise_r+0x14>
 80098ba:	2316      	movs	r3, #22
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098c6:	b112      	cbz	r2, 80098ce <_raise_r+0x1e>
 80098c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098cc:	b94b      	cbnz	r3, 80098e2 <_raise_r+0x32>
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 f830 	bl	8009934 <_getpid_r>
 80098d4:	4622      	mov	r2, r4
 80098d6:	4601      	mov	r1, r0
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098de:	f000 b817 	b.w	8009910 <_kill_r>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00a      	beq.n	80098fc <_raise_r+0x4c>
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	d103      	bne.n	80098f2 <_raise_r+0x42>
 80098ea:	2316      	movs	r3, #22
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7e7      	b.n	80098c2 <_raise_r+0x12>
 80098f2:	2100      	movs	r1, #0
 80098f4:	4620      	mov	r0, r4
 80098f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098fa:	4798      	blx	r3
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7e0      	b.n	80098c2 <_raise_r+0x12>

08009900 <raise>:
 8009900:	4b02      	ldr	r3, [pc, #8]	@ (800990c <raise+0xc>)
 8009902:	4601      	mov	r1, r0
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	f7ff bfd3 	b.w	80098b0 <_raise_r>
 800990a:	bf00      	nop
 800990c:	2000001c 	.word	0x2000001c

08009910 <_kill_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	2300      	movs	r3, #0
 8009914:	4d06      	ldr	r5, [pc, #24]	@ (8009930 <_kill_r+0x20>)
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7f9 f83e 	bl	800299e <_kill>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_kill_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_kill_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	20000898 	.word	0x20000898

08009934 <_getpid_r>:
 8009934:	f7f9 b82c 	b.w	8002990 <_getpid>

08009938 <__swhatbuf_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	460c      	mov	r4, r1
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	4615      	mov	r5, r2
 8009942:	2900      	cmp	r1, #0
 8009944:	461e      	mov	r6, r3
 8009946:	b096      	sub	sp, #88	@ 0x58
 8009948:	da0c      	bge.n	8009964 <__swhatbuf_r+0x2c>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	2100      	movs	r1, #0
 800994e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009952:	bf14      	ite	ne
 8009954:	2340      	movne	r3, #64	@ 0x40
 8009956:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800995a:	2000      	movs	r0, #0
 800995c:	6031      	str	r1, [r6, #0]
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	b016      	add	sp, #88	@ 0x58
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	466a      	mov	r2, sp
 8009966:	f000 f849 	bl	80099fc <_fstat_r>
 800996a:	2800      	cmp	r0, #0
 800996c:	dbed      	blt.n	800994a <__swhatbuf_r+0x12>
 800996e:	9901      	ldr	r1, [sp, #4]
 8009970:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009974:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009978:	4259      	negs	r1, r3
 800997a:	4159      	adcs	r1, r3
 800997c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009980:	e7eb      	b.n	800995a <__swhatbuf_r+0x22>

08009982 <__smakebuf_r>:
 8009982:	898b      	ldrh	r3, [r1, #12]
 8009984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009986:	079d      	lsls	r5, r3, #30
 8009988:	4606      	mov	r6, r0
 800998a:	460c      	mov	r4, r1
 800998c:	d507      	bpl.n	800999e <__smakebuf_r+0x1c>
 800998e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009992:	6023      	str	r3, [r4, #0]
 8009994:	6123      	str	r3, [r4, #16]
 8009996:	2301      	movs	r3, #1
 8009998:	6163      	str	r3, [r4, #20]
 800999a:	b003      	add	sp, #12
 800999c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800999e:	466a      	mov	r2, sp
 80099a0:	ab01      	add	r3, sp, #4
 80099a2:	f7ff ffc9 	bl	8009938 <__swhatbuf_r>
 80099a6:	9f00      	ldr	r7, [sp, #0]
 80099a8:	4605      	mov	r5, r0
 80099aa:	4639      	mov	r1, r7
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7fd fc69 	bl	8007284 <_malloc_r>
 80099b2:	b948      	cbnz	r0, 80099c8 <__smakebuf_r+0x46>
 80099b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b8:	059a      	lsls	r2, r3, #22
 80099ba:	d4ee      	bmi.n	800999a <__smakebuf_r+0x18>
 80099bc:	f023 0303 	bic.w	r3, r3, #3
 80099c0:	f043 0302 	orr.w	r3, r3, #2
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	e7e2      	b.n	800998e <__smakebuf_r+0xc>
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	6020      	str	r0, [r4, #0]
 80099d8:	b15b      	cbz	r3, 80099f2 <__smakebuf_r+0x70>
 80099da:	4630      	mov	r0, r6
 80099dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e0:	f000 f81e 	bl	8009a20 <_isatty_r>
 80099e4:	b128      	cbz	r0, 80099f2 <__smakebuf_r+0x70>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f023 0303 	bic.w	r3, r3, #3
 80099ec:	f043 0301 	orr.w	r3, r3, #1
 80099f0:	81a3      	strh	r3, [r4, #12]
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	431d      	orrs	r5, r3
 80099f6:	81a5      	strh	r5, [r4, #12]
 80099f8:	e7cf      	b.n	800999a <__smakebuf_r+0x18>
	...

080099fc <_fstat_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	2300      	movs	r3, #0
 8009a00:	4d06      	ldr	r5, [pc, #24]	@ (8009a1c <_fstat_r+0x20>)
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	4611      	mov	r1, r2
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	f7f9 f827 	bl	8002a5c <_fstat>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	d102      	bne.n	8009a18 <_fstat_r+0x1c>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	b103      	cbz	r3, 8009a18 <_fstat_r+0x1c>
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	bd38      	pop	{r3, r4, r5, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000898 	.word	0x20000898

08009a20 <_isatty_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	2300      	movs	r3, #0
 8009a24:	4d05      	ldr	r5, [pc, #20]	@ (8009a3c <_isatty_r+0x1c>)
 8009a26:	4604      	mov	r4, r0
 8009a28:	4608      	mov	r0, r1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	f7f9 f825 	bl	8002a7a <_isatty>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_isatty_r+0x1a>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_isatty_r+0x1a>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000898 	.word	0x20000898

08009a40 <_init>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr

08009a4c <_fini>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr
