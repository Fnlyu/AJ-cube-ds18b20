
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080051a0  080051a0  000061a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005554  08005554  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005554  08005554  00006554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800555c  0800555c  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005560  08005560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005564  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08005738  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005738  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fb6  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001740  00000000  00000000  0000e1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0000f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000558  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bed  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f2a  00000000  00000000  0002815d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d52  00000000  00000000  00031087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  000b4e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b7aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005188 	.word	0x08005188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005188 	.word	0x08005188

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_GPIO_Init+0x74>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <MX_GPIO_Init+0x74>)
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_GPIO_Init+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0320 	and.w	r3, r3, #32
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_GPIO_Init+0x74>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <MX_GPIO_Init+0x74>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_GPIO_Init+0x74>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_DQ_GPIO_Port, DS18B20_DQ_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2101      	movs	r1, #1
 8000b70:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <MX_GPIO_Init+0x78>)
 8000b72:	f000 fe64 	bl	800183e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_GPIO_Init+0x78>)
 8000b8e:	f000 fcbb 	bl	8001508 <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <Delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// 微秒级延时函数（72MHz时钟下粗略延时）
void Delay_us(uint16_t us) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
    us *= 6;  // 粗略校准值
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	80fb      	strh	r3, [r7, #6]
    while(us--) {
 8000bba:	e007      	b.n	8000bcc <Delay_us+0x28>
        __NOP(); __NOP(); __NOP(); __NOP();
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
        __NOP(); __NOP(); __NOP(); __NOP();
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
    while(us--) {
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	1e5a      	subs	r2, r3, #1
 8000bd0:	80fa      	strh	r2, [r7, #6]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f2      	bne.n	8000bbc <Delay_us+0x18>
    }
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
	...

08000be4 <DS18B20_WriteBit>:

// 写1位数据（修正参数类型）
void DS18B20_WriteBit(uint8_t bit) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <DS18B20_WriteBit+0x48>)
 8000bf4:	f000 fe23 	bl	800183e <HAL_GPIO_WritePin>
    Delay_us(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff ffd3 	bl	8000ba4 <Delay_us>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, bit ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bf14      	ite	ne
 8000c04:	2301      	movne	r3, #1
 8000c06:	2300      	moveq	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <DS18B20_WriteBit+0x48>)
 8000c10:	f000 fe15 	bl	800183e <HAL_GPIO_WritePin>
    Delay_us(60);
 8000c14:	203c      	movs	r0, #60	@ 0x3c
 8000c16:	f7ff ffc5 	bl	8000ba4 <Delay_us>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <DS18B20_WriteBit+0x48>)
 8000c20:	f000 fe0d 	bl	800183e <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010800 	.word	0x40010800

08000c30 <DS18B20_ReadBit>:

// 读1位数据（修正返回类型）
uint8_t DS18B20_ReadBit(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	480e      	ldr	r0, [pc, #56]	@ (8000c78 <DS18B20_ReadBit+0x48>)
 8000c40:	f000 fdfd 	bl	800183e <HAL_GPIO_WritePin>
    Delay_us(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffad 	bl	8000ba4 <Delay_us>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	480a      	ldr	r0, [pc, #40]	@ (8000c78 <DS18B20_ReadBit+0x48>)
 8000c50:	f000 fdf5 	bl	800183e <HAL_GPIO_WritePin>
    Delay_us(10);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff ffa5 	bl	8000ba4 <Delay_us>
    bit = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <DS18B20_ReadBit+0x48>)
 8000c5e:	f000 fdd7 	bl	8001810 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    Delay_us(50);
 8000c66:	2032      	movs	r0, #50	@ 0x32
 8000c68:	f7ff ff9c 	bl	8000ba4 <Delay_us>
    return bit; // 返回实际读取值（0或1）
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800

08000c7c <DS18B20_WriteByte>:

// 向DS18B20写入1字节（逐位写入）
void DS18B20_WriteByte(uint8_t data) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e00c      	b.n	8000ca6 <DS18B20_WriteByte+0x2a>
        DS18B20_WriteBit(data & 0x01);  // 从最低位开始写入
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffa5 	bl	8000be4 <DS18B20_WriteBit>
        data >>= 1;                     // 准备下一位
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++) {
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d9ef      	bls.n	8000c8c <DS18B20_WriteByte+0x10>
    }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <DS18B20_ReadByte>:

// 从DS18B20读取1字节（逐位读取）
uint8_t DS18B20_ReadByte(void) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71bb      	strb	r3, [r7, #6]
 8000cc4:	e00e      	b.n	8000ce4 <DS18B20_ReadByte+0x2e>
        data >>= 1;                     // 先右移，从最低位开始接收
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	085b      	lsrs	r3, r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
        if(DS18B20_ReadBit()) {         // 读取位值
 8000ccc:	f7ff ffb0 	bl	8000c30 <DS18B20_ReadBit>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <DS18B20_ReadByte+0x28>
            data |= 0x80;               // 如果读到1，设置最高位
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cdc:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++) {
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	71bb      	strb	r3, [r7, #6]
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d9ed      	bls.n	8000cc6 <DS18B20_ReadByte+0x10>
        }
    }
    return data;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <DS18B20_Reset>:
// 复位DS18B20
uint8_t DS18B20_Reset(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    uint8_t status;
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <DS18B20_Reset+0x48>)
 8000d00:	f000 fd9d 	bl	800183e <HAL_GPIO_WritePin>
    Delay_us(480);       // 保持480us低电平
 8000d04:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000d08:	f7ff ff4c 	bl	8000ba4 <Delay_us>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2101      	movs	r1, #1
 8000d10:	480a      	ldr	r0, [pc, #40]	@ (8000d3c <DS18B20_Reset+0x48>)
 8000d12:	f000 fd94 	bl	800183e <HAL_GPIO_WritePin>
    Delay_us(60);        // 等待15-60us
 8000d16:	203c      	movs	r0, #60	@ 0x3c
 8000d18:	f7ff ff44 	bl	8000ba4 <Delay_us>
    status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <DS18B20_Reset+0x48>)
 8000d20:	f000 fd76 	bl	8001810 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
    Delay_us(420);       // 等待存在脉冲结束
 8000d28:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8000d2c:	f7ff ff3a 	bl	8000ba4 <Delay_us>
    return status;       // 0=存在脉冲成功
 8000d30:	79fb      	ldrb	r3, [r7, #7]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40010800 	.word	0x40010800

08000d40 <DS18B20_GetTemp>:


// 读取温度值
float DS18B20_GetTemp(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
    uint8_t tempL, tempH;
    uint16_t temp;
    float result;

    DS18B20_Reset();
 8000d46:	f7ff ffd5 	bl	8000cf4 <DS18B20_Reset>
    DS18B20_WriteByte(0xCC);  // 跳过ROM
 8000d4a:	20cc      	movs	r0, #204	@ 0xcc
 8000d4c:	f7ff ff96 	bl	8000c7c <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44);  // 启动温度转换
 8000d50:	2044      	movs	r0, #68	@ 0x44
 8000d52:	f7ff ff93 	bl	8000c7c <DS18B20_WriteByte>
    HAL_Delay(750);           // 等待转换完成
 8000d56:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000d5a:	f000 facd 	bl	80012f8 <HAL_Delay>

    DS18B20_Reset();
 8000d5e:	f7ff ffc9 	bl	8000cf4 <DS18B20_Reset>
    DS18B20_WriteByte(0xCC);
 8000d62:	20cc      	movs	r0, #204	@ 0xcc
 8000d64:	f7ff ff8a 	bl	8000c7c <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE);  // 读取温度寄存器
 8000d68:	20be      	movs	r0, #190	@ 0xbe
 8000d6a:	f7ff ff87 	bl	8000c7c <DS18B20_WriteByte>

    tempL = DS18B20_ReadByte();
 8000d6e:	f7ff ffa2 	bl	8000cb6 <DS18B20_ReadByte>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    tempH = DS18B20_ReadByte();
 8000d76:	f7ff ff9e 	bl	8000cb6 <DS18B20_ReadByte>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71bb      	strb	r3, [r7, #6]
    temp = (tempH << 8) | tempL;
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	80bb      	strh	r3, [r7, #4]
    result = temp / 16.0;
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fb36 	bl	8000404 <__aeabi_i2d>
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <DS18B20_GetTemp+0x7c>)
 8000d9e:	f7ff fcc5 	bl	800072c <__aeabi_ddiv>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f7ff fe6d 	bl	8000a88 <__aeabi_d2f>
 8000dae:	4603      	mov	r3, r0
 8000db0:	603b      	str	r3, [r7, #0]
    return result;
 8000db2:	683b      	ldr	r3, [r7, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40300000 	.word	0x40300000

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	@ 0x38
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fa35 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f825 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f7ff feab 	bl	8000b28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000dd2:	f000 f993 	bl	80010fc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */


	      temperature = DS18B20_GetTemp();
 8000dd6:	f7ff ffb3 	bl	8000d40 <DS18B20_GetTemp>
 8000dda:	6378      	str	r0, [r7, #52]	@ 0x34
	      sprintf(msg, "Temperature: %.2f C\r\n", temperature);
 8000ddc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000dde:	f7ff fb23 	bl	8000428 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4638      	mov	r0, r7
 8000de8:	4909      	ldr	r1, [pc, #36]	@ (8000e10 <main+0x50>)
 8000dea:	f002 f891 	bl	8002f10 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8000dee:	463b      	mov	r3, r7
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff f9ad 	bl	8000150 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4639      	mov	r1, r7
 8000dfc:	2364      	movs	r3, #100	@ 0x64
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <main+0x54>)
 8000e00:	f001 f996 	bl	8002130 <HAL_UART_Transmit>
	      HAL_Delay(1000);
 8000e04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e08:	f000 fa76 	bl	80012f8 <HAL_Delay>
	      temperature = DS18B20_GetTemp();
 8000e0c:	bf00      	nop
 8000e0e:	e7e2      	b.n	8000dd6 <main+0x16>
 8000e10:	080051a0 	.word	0x080051a0
 8000e14:	200001f4 	.word	0x200001f4

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	@ 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	@ 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f8d7 	bl	8002fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e56:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fd05 	bl	8001870 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e6c:	f000 f819 	bl	8000ea2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 ff72 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e96:	f000 f804 	bl	8000ea2 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3740      	adds	r7, #64	@ 0x40
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea6:	b672      	cpsid	i
}
 8000ea8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eaa:	bf00      	nop
 8000eac:	e7fd      	b.n	8000eaa <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f9ac 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <_kill>:

int _kill(int pid, int sig)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f84:	f002 f87c 	bl	8003080 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2216      	movs	r2, #22
 8000f8c:	601a      	str	r2, [r3, #0]
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_exit>:

void _exit (int status)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffe7 	bl	8000f7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <_exit+0x12>

08000fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
  }

  return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x12>
  }
  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_close>:

int _close(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001048:	605a      	str	r2, [r3, #4]
  return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <_isatty>:

int _isatty(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f001 ffe4 	bl	8003080 <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20005000 	.word	0x20005000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	200001f0 	.word	0x200001f0
 80010ec:	20000390 	.word	0x20000390

080010f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <MX_USART1_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_USART1_UART_Init+0x4c>)
 8001134:	f000 ffac 	bl	8002090 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f7ff feb0 	bl	8000ea2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001f4 	.word	0x200001f4
 800114c:	40013800 	.word	0x40013800

08001150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_UART_MspInit+0x8c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d131      	bne.n	80011d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_UART_MspInit+0x90>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a1a      	ldr	r2, [pc, #104]	@ (80011e0 <HAL_UART_MspInit+0x90>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_UART_MspInit+0x90>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_UART_MspInit+0x90>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <HAL_UART_MspInit+0x90>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_UART_MspInit+0x90>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <HAL_UART_MspInit+0x94>)
 80011b6:	f000 f9a7 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <HAL_UART_MspInit+0x94>)
 80011d0:	f000 f99a 	bl	8001508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010800 	.word	0x40010800

080011e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff ff82 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ee:	490c      	ldr	r1, [pc, #48]	@ (8001220 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001204:	4c09      	ldr	r4, [pc, #36]	@ (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f001 ff3b 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001216:	f7ff fdd3 	bl	8000dc0 <main>
  bx lr
 800121a:	4770      	bx	lr
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001224:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 8001228:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800122c:	2000038c 	.word	0x2000038c

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f92b 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fe2e 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f935 	bl	80014ee <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f90b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <HAL_IncTick+0x20>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000008 	.word	0x20000008
 80012e0:	2000023c 	.word	0x2000023c

080012e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	@ (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	2000023c 	.word	0x2000023c

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fff0 	bl	80012e4 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffe0 	bl	80012e4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	@ 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	@ 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff90 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff49 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff5e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffb0 	bl	800145c <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	@ 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e169      	b.n	80017f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8158 	bne.w	80017ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a9a      	ldr	r2, [pc, #616]	@ (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001544:	4a98      	ldr	r2, [pc, #608]	@ (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d875      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800154a:	4a98      	ldr	r2, [pc, #608]	@ (80017ac <HAL_GPIO_Init+0x2a4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d058      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001550:	4a96      	ldr	r2, [pc, #600]	@ (80017ac <HAL_GPIO_Init+0x2a4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d86f      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001556:	4a96      	ldr	r2, [pc, #600]	@ (80017b0 <HAL_GPIO_Init+0x2a8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d052      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 800155c:	4a94      	ldr	r2, [pc, #592]	@ (80017b0 <HAL_GPIO_Init+0x2a8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d869      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001562:	4a94      	ldr	r2, [pc, #592]	@ (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04c      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001568:	4a92      	ldr	r2, [pc, #584]	@ (80017b4 <HAL_GPIO_Init+0x2ac>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d863      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800156e:	4a92      	ldr	r2, [pc, #584]	@ (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d046      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001574:	4a90      	ldr	r2, [pc, #576]	@ (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d85d      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d82a      	bhi.n	80015d4 <HAL_GPIO_Init+0xcc>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d859      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <HAL_GPIO_Init+0x80>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001603 	.word	0x08001603
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015ef 	.word	0x080015ef
 8001594:	08001631 	.word	0x08001631
 8001598:	08001637 	.word	0x08001637
 800159c:	08001637 	.word	0x08001637
 80015a0:	08001637 	.word	0x08001637
 80015a4:	08001637 	.word	0x08001637
 80015a8:	08001637 	.word	0x08001637
 80015ac:	08001637 	.word	0x08001637
 80015b0:	08001637 	.word	0x08001637
 80015b4:	08001637 	.word	0x08001637
 80015b8:	08001637 	.word	0x08001637
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001637 	.word	0x08001637
 80015c4:	08001637 	.word	0x08001637
 80015c8:	08001637 	.word	0x08001637
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	4a79      	ldr	r2, [pc, #484]	@ (80017bc <HAL_GPIO_Init+0x2b4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015da:	e02c      	b.n	8001636 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e029      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e024      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	3308      	adds	r3, #8
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e01f      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	330c      	adds	r3, #12
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e01a      	b.n	8001638 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e013      	b.n	8001638 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e009      	b.n	8001638 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e003      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x130>
          break;
 8001636:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	@ 0xff
 800163c:	d801      	bhi.n	8001642 <HAL_GPIO_Init+0x13a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_Init+0x13e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2bff      	cmp	r3, #255	@ 0xff
 800164c:	d802      	bhi.n	8001654 <HAL_GPIO_Init+0x14c>
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x152>
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	3b08      	subs	r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80b1 	beq.w	80017ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001688:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <HAL_GPIO_Init+0x2b8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a4c      	ldr	r2, [pc, #304]	@ (80017c0 <HAL_GPIO_Init+0x2b8>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b4a      	ldr	r3, [pc, #296]	@ (80017c0 <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <HAL_GPIO_Init+0x2bc>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a40      	ldr	r2, [pc, #256]	@ (80017c8 <HAL_GPIO_Init+0x2c0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_GPIO_Init+0x1ec>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3f      	ldr	r2, [pc, #252]	@ (80017cc <HAL_GPIO_Init+0x2c4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00d      	beq.n	80016f0 <HAL_GPIO_Init+0x1e8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a3e      	ldr	r2, [pc, #248]	@ (80017d0 <HAL_GPIO_Init+0x2c8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x1e4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a3d      	ldr	r2, [pc, #244]	@ (80017d4 <HAL_GPIO_Init+0x2cc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_GPIO_Init+0x1e0>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016f4:	2300      	movs	r3, #0
 80016f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001706:	492f      	ldr	r1, [pc, #188]	@ (80017c4 <HAL_GPIO_Init+0x2bc>)
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	492c      	ldr	r1, [pc, #176]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4928      	ldr	r1, [pc, #160]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4922      	ldr	r1, [pc, #136]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	491e      	ldr	r1, [pc, #120]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4918      	ldr	r1, [pc, #96]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177e:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4914      	ldr	r1, [pc, #80]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d021      	beq.n	80017dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	490e      	ldr	r1, [pc, #56]	@ (80017d8 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e021      	b.n	80017ea <HAL_GPIO_Init+0x2e2>
 80017a6:	bf00      	nop
 80017a8:	10320000 	.word	0x10320000
 80017ac:	10310000 	.word	0x10310000
 80017b0:	10220000 	.word	0x10220000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	10120000 	.word	0x10120000
 80017bc:	10110000 	.word	0x10110000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40011400 	.word	0x40011400
 80017d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_GPIO_Init+0x304>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	4909      	ldr	r1, [pc, #36]	@ (800180c <HAL_GPIO_Init+0x304>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f47f ae8e 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	372c      	adds	r7, #44	@ 0x2c
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40010400 	.word	0x40010400

08001810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e001      	b.n	8001832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184e:	787b      	ldrb	r3, [r7, #1]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001854:	887a      	ldrh	r2, [r7, #2]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800185a:	e003      	b.n	8001864 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	041a      	lsls	r2, r3, #16
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	611a      	str	r2, [r3, #16]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e272      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8087 	beq.w	800199e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001890:	4b92      	ldr	r3, [pc, #584]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	d00c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189c:	4b8f      	ldr	r3, [pc, #572]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d112      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
 80018a8:	4b8c      	ldr	r3, [pc, #560]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b4:	d10b      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b6:	4b89      	ldr	r3, [pc, #548]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06c      	beq.n	800199c <HAL_RCC_OscConfig+0x12c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d168      	bne.n	800199c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e24c      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x76>
 80018d8:	4b80      	ldr	r3, [pc, #512]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7f      	ldr	r2, [pc, #508]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e02e      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b7b      	ldr	r3, [pc, #492]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7a      	ldr	r2, [pc, #488]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b78      	ldr	r3, [pc, #480]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a77      	ldr	r2, [pc, #476]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0xbc>
 8001912:	4b72      	ldr	r3, [pc, #456]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a71      	ldr	r2, [pc, #452]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6f      	ldr	r3, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6e      	ldr	r2, [pc, #440]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 800192c:	4b6b      	ldr	r3, [pc, #428]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6a      	ldr	r2, [pc, #424]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b68      	ldr	r3, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a67      	ldr	r2, [pc, #412]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fcca 	bl	80012e4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fcc6 	bl	80012e4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	@ 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e200      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b5d      	ldr	r3, [pc, #372]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xe4>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fcb6 	bl	80012e4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fcb2 	bl	80012e4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	@ 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1ec      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x10c>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b6:	4b49      	ldr	r3, [pc, #292]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c0      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4939      	ldr	r1, [pc, #228]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fc6b 	bl	80012e4 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fc67 	bl	80012e4 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4927      	ldr	r1, [pc, #156]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc4a 	bl	80012e4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc46 	bl	80012e4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e180      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03a      	beq.n	8001af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fc2a 	bl	80012e4 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fc26 	bl	80012e4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e160      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 face 	bl	8002054 <RCC_Delay>
 8001ab8:	e01c      	b.n	8001af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fc10 	bl	80012e4 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	e00f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fc0c 	bl	80012e4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d908      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e146      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	42420000 	.word	0x42420000
 8001ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e9      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a6 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8b      	ldr	r3, [pc, #556]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b88      	ldr	r3, [pc, #544]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a87      	ldr	r2, [pc, #540]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b85      	ldr	r3, [pc, #532]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b82      	ldr	r3, [pc, #520]	@ (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fbcd 	bl	80012e4 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fbc9 	bl	80012e4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	@ 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e103      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b75      	ldr	r3, [pc, #468]	@ (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x312>
 8001b74:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a6e      	ldr	r2, [pc, #440]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x334>
 8001b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a69      	ldr	r2, [pc, #420]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b67      	ldr	r3, [pc, #412]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x356>
 8001bac:	4b61      	ldr	r3, [pc, #388]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a60      	ldr	r2, [pc, #384]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a5a      	ldr	r2, [pc, #360]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	4b58      	ldr	r3, [pc, #352]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fb7d 	bl	80012e4 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fb79 	bl	80012e4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x37e>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fb67 	bl	80012e4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fb63 	bl	80012e4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e09b      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c58:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d061      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d146      	bne.n	8001cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fb37 	bl	80012e4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff fb33 	bl	80012e4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e06d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4921      	ldr	r1, [pc, #132]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a19      	ldr	r1, [r3, #32]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	491b      	ldr	r1, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fb07 	bl	80012e4 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fb03 	bl	80012e4 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x46a>
 8001cf8:	e035      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff faf0 	bl	80012e4 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff faec 	bl	80012e4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e026      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x498>
 8001d26:	e01e      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e019      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_OscConfig+0x500>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff fa3e 	bl	80012e4 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff fa3a 	bl	80012e4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f99c 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	080051b8 	.word	0x080051b8
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x30>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x36>
 8001f76:	e027      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	e027      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0c5b      	lsrs	r3, r3, #17
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	fb03 f202 	mul.w	r2, r3, r2
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e004      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	613b      	str	r3, [r7, #16]
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	693b      	ldr	r3, [r7, #16]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	080051d0 	.word	0x080051d0
 8001fe8:	080051e0 	.word	0x080051e0
 8001fec:	003d0900 	.word	0x003d0900

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	@ (8002000 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff2 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	@ (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	080051c8 	.word	0x080051c8

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	080051c8 	.word	0x080051c8

08002054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800205c:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <RCC_Delay+0x34>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <RCC_Delay+0x38>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0a5b      	lsrs	r3, r3, #9
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002070:	bf00      	nop
  }
  while (Delay --);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <RCC_Delay+0x1c>
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000000 	.word	0x20000000
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e042      	b.n	8002128 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff f84a 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	@ 0x24
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f971 	bl	80023bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b20      	cmp	r3, #32
 800214e:	d175      	bne.n	800223c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_UART_Transmit+0x2c>
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e06e      	b.n	800223e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2221      	movs	r2, #33	@ 0x21
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216e:	f7ff f8b9 	bl	80012e4 <HAL_GetTick>
 8002172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002188:	d108      	bne.n	800219c <HAL_UART_Transmit+0x6c>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	e003      	b.n	80021a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021a4:	e02e      	b.n	8002204 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f848 	bl	8002246 <UART_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e03a      	b.n	800223e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10b      	bne.n	80021e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3302      	adds	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e007      	b.n	80021f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3301      	adds	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1cb      	bne.n	80021a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	2140      	movs	r1, #64	@ 0x40
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f814 	bl	8002246 <UART_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e006      	b.n	800223e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	e000      	b.n	800223e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800223c:	2302      	movs	r3, #2
  }
}
 800223e:	4618      	mov	r0, r3
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002256:	e03b      	b.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d037      	beq.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002260:	f7ff f840 	bl	80012e4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	6a3a      	ldr	r2, [r7, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d302      	bcc.n	8002276 <UART_WaitOnFlagUntilTimeout+0x30>
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e03a      	b.n	80022f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d023      	beq.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b80      	cmp	r3, #128	@ 0x80
 800228c:	d020      	beq.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b40      	cmp	r3, #64	@ 0x40
 8002292:	d01d      	beq.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d116      	bne.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f81d 	bl	80022f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2208      	movs	r2, #8
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e00f      	b.n	80022f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d0b4      	beq.n	8002258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b095      	sub	sp, #84	@ 0x54
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	330c      	adds	r3, #12
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230a:	e853 3f00 	ldrex	r3, [r3]
 800230e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	330c      	adds	r3, #12
 800231e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002320:	643a      	str	r2, [r7, #64]	@ 0x40
 8002322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002328:	e841 2300 	strex	r3, r2, [r1]
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e5      	bne.n	8002300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3314      	adds	r3, #20
 800233a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	e853 3f00 	ldrex	r3, [r3]
 8002342:	61fb      	str	r3, [r7, #28]
   return(result);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3314      	adds	r3, #20
 8002352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800235a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800235c:	e841 2300 	strex	r3, r2, [r1]
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e5      	bne.n	8002334 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	2b01      	cmp	r3, #1
 800236e:	d119      	bne.n	80023a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	330c      	adds	r3, #12
 8002376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002390:	61ba      	str	r2, [r7, #24]
 8002392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	e841 2300 	strex	r3, r2, [r1]
 800239c:	613b      	str	r3, [r7, #16]
   return(result);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e5      	bne.n	8002370 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023b2:	bf00      	nop
 80023b4:	3754      	adds	r7, #84	@ 0x54
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023f6:	f023 030c 	bic.w	r3, r3, #12
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <UART_SetConfig+0x114>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff fe02 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	e002      	b.n	8002432 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800242c:	f7ff fdea 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009a      	lsls	r2, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <UART_SetConfig+0x118>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	0119      	lsls	r1, r3, #4
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f2f3 	udiv	r2, r2, r3
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <UART_SetConfig+0x118>)
 800246a:	fba3 0302 	umull	r0, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2064      	movs	r0, #100	@ 0x64
 8002472:	fb00 f303 	mul.w	r3, r0, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3332      	adds	r3, #50	@ 0x32
 800247c:	4a15      	ldr	r2, [pc, #84]	@ (80024d4 <UART_SetConfig+0x118>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002488:	4419      	add	r1, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <UART_SetConfig+0x118>)
 80024a2:	fba3 0302 	umull	r0, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2064      	movs	r0, #100	@ 0x64
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	3332      	adds	r3, #50	@ 0x32
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <UART_SetConfig+0x118>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	440a      	add	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013800 	.word	0x40013800
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <__cvt>:
 80024d8:	2b00      	cmp	r3, #0
 80024da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024de:	461d      	mov	r5, r3
 80024e0:	bfbb      	ittet	lt
 80024e2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80024e6:	461d      	movlt	r5, r3
 80024e8:	2300      	movge	r3, #0
 80024ea:	232d      	movlt	r3, #45	@ 0x2d
 80024ec:	b088      	sub	sp, #32
 80024ee:	4614      	mov	r4, r2
 80024f0:	bfb8      	it	lt
 80024f2:	4614      	movlt	r4, r2
 80024f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80024f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80024f8:	7013      	strb	r3, [r2, #0]
 80024fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80024fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002500:	f023 0820 	bic.w	r8, r3, #32
 8002504:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002508:	d005      	beq.n	8002516 <__cvt+0x3e>
 800250a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800250e:	d100      	bne.n	8002512 <__cvt+0x3a>
 8002510:	3601      	adds	r6, #1
 8002512:	2302      	movs	r3, #2
 8002514:	e000      	b.n	8002518 <__cvt+0x40>
 8002516:	2303      	movs	r3, #3
 8002518:	aa07      	add	r2, sp, #28
 800251a:	9204      	str	r2, [sp, #16]
 800251c:	aa06      	add	r2, sp, #24
 800251e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002522:	e9cd 3600 	strd	r3, r6, [sp]
 8002526:	4622      	mov	r2, r4
 8002528:	462b      	mov	r3, r5
 800252a:	f000 fe6d 	bl	8003208 <_dtoa_r>
 800252e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002532:	4607      	mov	r7, r0
 8002534:	d119      	bne.n	800256a <__cvt+0x92>
 8002536:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002538:	07db      	lsls	r3, r3, #31
 800253a:	d50e      	bpl.n	800255a <__cvt+0x82>
 800253c:	eb00 0906 	add.w	r9, r0, r6
 8002540:	2200      	movs	r2, #0
 8002542:	2300      	movs	r3, #0
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fe fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800254c:	b108      	cbz	r0, 8002552 <__cvt+0x7a>
 800254e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002552:	2230      	movs	r2, #48	@ 0x30
 8002554:	9b07      	ldr	r3, [sp, #28]
 8002556:	454b      	cmp	r3, r9
 8002558:	d31e      	bcc.n	8002598 <__cvt+0xc0>
 800255a:	4638      	mov	r0, r7
 800255c:	9b07      	ldr	r3, [sp, #28]
 800255e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002560:	1bdb      	subs	r3, r3, r7
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	b008      	add	sp, #32
 8002566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800256a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800256e:	eb00 0906 	add.w	r9, r0, r6
 8002572:	d1e5      	bne.n	8002540 <__cvt+0x68>
 8002574:	7803      	ldrb	r3, [r0, #0]
 8002576:	2b30      	cmp	r3, #48	@ 0x30
 8002578:	d10a      	bne.n	8002590 <__cvt+0xb8>
 800257a:	2200      	movs	r2, #0
 800257c:	2300      	movs	r3, #0
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fe fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8002586:	b918      	cbnz	r0, 8002590 <__cvt+0xb8>
 8002588:	f1c6 0601 	rsb	r6, r6, #1
 800258c:	f8ca 6000 	str.w	r6, [sl]
 8002590:	f8da 3000 	ldr.w	r3, [sl]
 8002594:	4499      	add	r9, r3
 8002596:	e7d3      	b.n	8002540 <__cvt+0x68>
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	9107      	str	r1, [sp, #28]
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e7d9      	b.n	8002554 <__cvt+0x7c>

080025a0 <__exponent>:
 80025a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025a2:	2900      	cmp	r1, #0
 80025a4:	bfb6      	itet	lt
 80025a6:	232d      	movlt	r3, #45	@ 0x2d
 80025a8:	232b      	movge	r3, #43	@ 0x2b
 80025aa:	4249      	neglt	r1, r1
 80025ac:	2909      	cmp	r1, #9
 80025ae:	7002      	strb	r2, [r0, #0]
 80025b0:	7043      	strb	r3, [r0, #1]
 80025b2:	dd29      	ble.n	8002608 <__exponent+0x68>
 80025b4:	f10d 0307 	add.w	r3, sp, #7
 80025b8:	461d      	mov	r5, r3
 80025ba:	270a      	movs	r7, #10
 80025bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80025c0:	461a      	mov	r2, r3
 80025c2:	fb07 1416 	mls	r4, r7, r6, r1
 80025c6:	3430      	adds	r4, #48	@ 0x30
 80025c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80025cc:	460c      	mov	r4, r1
 80025ce:	2c63      	cmp	r4, #99	@ 0x63
 80025d0:	4631      	mov	r1, r6
 80025d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80025d6:	dcf1      	bgt.n	80025bc <__exponent+0x1c>
 80025d8:	3130      	adds	r1, #48	@ 0x30
 80025da:	1e94      	subs	r4, r2, #2
 80025dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80025e0:	4623      	mov	r3, r4
 80025e2:	1c41      	adds	r1, r0, #1
 80025e4:	42ab      	cmp	r3, r5
 80025e6:	d30a      	bcc.n	80025fe <__exponent+0x5e>
 80025e8:	f10d 0309 	add.w	r3, sp, #9
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	42ac      	cmp	r4, r5
 80025f0:	bf88      	it	hi
 80025f2:	2300      	movhi	r3, #0
 80025f4:	3302      	adds	r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	1a18      	subs	r0, r3, r0
 80025fa:	b003      	add	sp, #12
 80025fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002602:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002606:	e7ed      	b.n	80025e4 <__exponent+0x44>
 8002608:	2330      	movs	r3, #48	@ 0x30
 800260a:	3130      	adds	r1, #48	@ 0x30
 800260c:	7083      	strb	r3, [r0, #2]
 800260e:	70c1      	strb	r1, [r0, #3]
 8002610:	1d03      	adds	r3, r0, #4
 8002612:	e7f1      	b.n	80025f8 <__exponent+0x58>

08002614 <_printf_float>:
 8002614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002618:	b091      	sub	sp, #68	@ 0x44
 800261a:	460c      	mov	r4, r1
 800261c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002620:	4616      	mov	r6, r2
 8002622:	461f      	mov	r7, r3
 8002624:	4605      	mov	r5, r0
 8002626:	f000 fce1 	bl	8002fec <_localeconv_r>
 800262a:	6803      	ldr	r3, [r0, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	9308      	str	r3, [sp, #32]
 8002630:	f7fd fd8e 	bl	8000150 <strlen>
 8002634:	2300      	movs	r3, #0
 8002636:	930e      	str	r3, [sp, #56]	@ 0x38
 8002638:	f8d8 3000 	ldr.w	r3, [r8]
 800263c:	9009      	str	r0, [sp, #36]	@ 0x24
 800263e:	3307      	adds	r3, #7
 8002640:	f023 0307 	bic.w	r3, r3, #7
 8002644:	f103 0208 	add.w	r2, r3, #8
 8002648:	f894 a018 	ldrb.w	sl, [r4, #24]
 800264c:	f8d4 b000 	ldr.w	fp, [r4]
 8002650:	f8c8 2000 	str.w	r2, [r8]
 8002654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002658:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800265c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800265e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002662:	f04f 32ff 	mov.w	r2, #4294967295
 8002666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800266a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800266e:	4b9c      	ldr	r3, [pc, #624]	@ (80028e0 <_printf_float+0x2cc>)
 8002670:	f7fe f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8002674:	bb70      	cbnz	r0, 80026d4 <_printf_float+0xc0>
 8002676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800267a:	f04f 32ff 	mov.w	r2, #4294967295
 800267e:	4b98      	ldr	r3, [pc, #608]	@ (80028e0 <_printf_float+0x2cc>)
 8002680:	f7fe f9a6 	bl	80009d0 <__aeabi_dcmple>
 8002684:	bb30      	cbnz	r0, 80026d4 <_printf_float+0xc0>
 8002686:	2200      	movs	r2, #0
 8002688:	2300      	movs	r3, #0
 800268a:	4640      	mov	r0, r8
 800268c:	4649      	mov	r1, r9
 800268e:	f7fe f995 	bl	80009bc <__aeabi_dcmplt>
 8002692:	b110      	cbz	r0, 800269a <_printf_float+0x86>
 8002694:	232d      	movs	r3, #45	@ 0x2d
 8002696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800269a:	4a92      	ldr	r2, [pc, #584]	@ (80028e4 <_printf_float+0x2d0>)
 800269c:	4b92      	ldr	r3, [pc, #584]	@ (80028e8 <_printf_float+0x2d4>)
 800269e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80026a2:	bf8c      	ite	hi
 80026a4:	4690      	movhi	r8, r2
 80026a6:	4698      	movls	r8, r3
 80026a8:	2303      	movs	r3, #3
 80026aa:	f04f 0900 	mov.w	r9, #0
 80026ae:	6123      	str	r3, [r4, #16]
 80026b0:	f02b 0304 	bic.w	r3, fp, #4
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	4633      	mov	r3, r6
 80026b8:	4621      	mov	r1, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	9700      	str	r7, [sp, #0]
 80026be:	aa0f      	add	r2, sp, #60	@ 0x3c
 80026c0:	f000 f9d4 	bl	8002a6c <_printf_common>
 80026c4:	3001      	adds	r0, #1
 80026c6:	f040 8090 	bne.w	80027ea <_printf_float+0x1d6>
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295
 80026ce:	b011      	add	sp, #68	@ 0x44
 80026d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	4640      	mov	r0, r8
 80026da:	4649      	mov	r1, r9
 80026dc:	f7fe f996 	bl	8000a0c <__aeabi_dcmpun>
 80026e0:	b148      	cbz	r0, 80026f6 <_printf_float+0xe2>
 80026e2:	464b      	mov	r3, r9
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bfb8      	it	lt
 80026e8:	232d      	movlt	r3, #45	@ 0x2d
 80026ea:	4a80      	ldr	r2, [pc, #512]	@ (80028ec <_printf_float+0x2d8>)
 80026ec:	bfb8      	it	lt
 80026ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80026f2:	4b7f      	ldr	r3, [pc, #508]	@ (80028f0 <_printf_float+0x2dc>)
 80026f4:	e7d3      	b.n	800269e <_printf_float+0x8a>
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	d13f      	bne.n	8002780 <_printf_float+0x16c>
 8002700:	2306      	movs	r3, #6
 8002702:	6063      	str	r3, [r4, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800270a:	6023      	str	r3, [r4, #0]
 800270c:	9206      	str	r2, [sp, #24]
 800270e:	aa0e      	add	r2, sp, #56	@ 0x38
 8002710:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002714:	aa0d      	add	r2, sp, #52	@ 0x34
 8002716:	9203      	str	r2, [sp, #12]
 8002718:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800271c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002720:	6863      	ldr	r3, [r4, #4]
 8002722:	4642      	mov	r2, r8
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4628      	mov	r0, r5
 8002728:	464b      	mov	r3, r9
 800272a:	910a      	str	r1, [sp, #40]	@ 0x28
 800272c:	f7ff fed4 	bl	80024d8 <__cvt>
 8002730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002732:	4680      	mov	r8, r0
 8002734:	2947      	cmp	r1, #71	@ 0x47
 8002736:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002738:	d128      	bne.n	800278c <_printf_float+0x178>
 800273a:	1cc8      	adds	r0, r1, #3
 800273c:	db02      	blt.n	8002744 <_printf_float+0x130>
 800273e:	6863      	ldr	r3, [r4, #4]
 8002740:	4299      	cmp	r1, r3
 8002742:	dd40      	ble.n	80027c6 <_printf_float+0x1b2>
 8002744:	f1aa 0a02 	sub.w	sl, sl, #2
 8002748:	fa5f fa8a 	uxtb.w	sl, sl
 800274c:	4652      	mov	r2, sl
 800274e:	3901      	subs	r1, #1
 8002750:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002754:	910d      	str	r1, [sp, #52]	@ 0x34
 8002756:	f7ff ff23 	bl	80025a0 <__exponent>
 800275a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800275c:	4681      	mov	r9, r0
 800275e:	1813      	adds	r3, r2, r0
 8002760:	2a01      	cmp	r2, #1
 8002762:	6123      	str	r3, [r4, #16]
 8002764:	dc02      	bgt.n	800276c <_printf_float+0x158>
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	07d2      	lsls	r2, r2, #31
 800276a:	d501      	bpl.n	8002770 <_printf_float+0x15c>
 800276c:	3301      	adds	r3, #1
 800276e:	6123      	str	r3, [r4, #16]
 8002770:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002774:	2b00      	cmp	r3, #0
 8002776:	d09e      	beq.n	80026b6 <_printf_float+0xa2>
 8002778:	232d      	movs	r3, #45	@ 0x2d
 800277a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800277e:	e79a      	b.n	80026b6 <_printf_float+0xa2>
 8002780:	2947      	cmp	r1, #71	@ 0x47
 8002782:	d1bf      	bne.n	8002704 <_printf_float+0xf0>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1bd      	bne.n	8002704 <_printf_float+0xf0>
 8002788:	2301      	movs	r3, #1
 800278a:	e7ba      	b.n	8002702 <_printf_float+0xee>
 800278c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002790:	d9dc      	bls.n	800274c <_printf_float+0x138>
 8002792:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002796:	d118      	bne.n	80027ca <_printf_float+0x1b6>
 8002798:	2900      	cmp	r1, #0
 800279a:	6863      	ldr	r3, [r4, #4]
 800279c:	dd0b      	ble.n	80027b6 <_printf_float+0x1a2>
 800279e:	6121      	str	r1, [r4, #16]
 80027a0:	b913      	cbnz	r3, 80027a8 <_printf_float+0x194>
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	07d0      	lsls	r0, r2, #31
 80027a6:	d502      	bpl.n	80027ae <_printf_float+0x19a>
 80027a8:	3301      	adds	r3, #1
 80027aa:	440b      	add	r3, r1
 80027ac:	6123      	str	r3, [r4, #16]
 80027ae:	f04f 0900 	mov.w	r9, #0
 80027b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80027b4:	e7dc      	b.n	8002770 <_printf_float+0x15c>
 80027b6:	b913      	cbnz	r3, 80027be <_printf_float+0x1aa>
 80027b8:	6822      	ldr	r2, [r4, #0]
 80027ba:	07d2      	lsls	r2, r2, #31
 80027bc:	d501      	bpl.n	80027c2 <_printf_float+0x1ae>
 80027be:	3302      	adds	r3, #2
 80027c0:	e7f4      	b.n	80027ac <_printf_float+0x198>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e7f2      	b.n	80027ac <_printf_float+0x198>
 80027c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80027ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80027cc:	4299      	cmp	r1, r3
 80027ce:	db05      	blt.n	80027dc <_printf_float+0x1c8>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	6121      	str	r1, [r4, #16]
 80027d4:	07d8      	lsls	r0, r3, #31
 80027d6:	d5ea      	bpl.n	80027ae <_printf_float+0x19a>
 80027d8:	1c4b      	adds	r3, r1, #1
 80027da:	e7e7      	b.n	80027ac <_printf_float+0x198>
 80027dc:	2900      	cmp	r1, #0
 80027de:	bfcc      	ite	gt
 80027e0:	2201      	movgt	r2, #1
 80027e2:	f1c1 0202 	rsble	r2, r1, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	e7e0      	b.n	80027ac <_printf_float+0x198>
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	055a      	lsls	r2, r3, #21
 80027ee:	d407      	bmi.n	8002800 <_printf_float+0x1ec>
 80027f0:	6923      	ldr	r3, [r4, #16]
 80027f2:	4642      	mov	r2, r8
 80027f4:	4631      	mov	r1, r6
 80027f6:	4628      	mov	r0, r5
 80027f8:	47b8      	blx	r7
 80027fa:	3001      	adds	r0, #1
 80027fc:	d12b      	bne.n	8002856 <_printf_float+0x242>
 80027fe:	e764      	b.n	80026ca <_printf_float+0xb6>
 8002800:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002804:	f240 80dc 	bls.w	80029c0 <_printf_float+0x3ac>
 8002808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800280c:	2200      	movs	r2, #0
 800280e:	2300      	movs	r3, #0
 8002810:	f7fe f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8002814:	2800      	cmp	r0, #0
 8002816:	d033      	beq.n	8002880 <_printf_float+0x26c>
 8002818:	2301      	movs	r3, #1
 800281a:	4631      	mov	r1, r6
 800281c:	4628      	mov	r0, r5
 800281e:	4a35      	ldr	r2, [pc, #212]	@ (80028f4 <_printf_float+0x2e0>)
 8002820:	47b8      	blx	r7
 8002822:	3001      	adds	r0, #1
 8002824:	f43f af51 	beq.w	80026ca <_printf_float+0xb6>
 8002828:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800282c:	4543      	cmp	r3, r8
 800282e:	db02      	blt.n	8002836 <_printf_float+0x222>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	07d8      	lsls	r0, r3, #31
 8002834:	d50f      	bpl.n	8002856 <_printf_float+0x242>
 8002836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800283a:	4631      	mov	r1, r6
 800283c:	4628      	mov	r0, r5
 800283e:	47b8      	blx	r7
 8002840:	3001      	adds	r0, #1
 8002842:	f43f af42 	beq.w	80026ca <_printf_float+0xb6>
 8002846:	f04f 0900 	mov.w	r9, #0
 800284a:	f108 38ff 	add.w	r8, r8, #4294967295
 800284e:	f104 0a1a 	add.w	sl, r4, #26
 8002852:	45c8      	cmp	r8, r9
 8002854:	dc09      	bgt.n	800286a <_printf_float+0x256>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	079b      	lsls	r3, r3, #30
 800285a:	f100 8102 	bmi.w	8002a62 <_printf_float+0x44e>
 800285e:	68e0      	ldr	r0, [r4, #12]
 8002860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002862:	4298      	cmp	r0, r3
 8002864:	bfb8      	it	lt
 8002866:	4618      	movlt	r0, r3
 8002868:	e731      	b.n	80026ce <_printf_float+0xba>
 800286a:	2301      	movs	r3, #1
 800286c:	4652      	mov	r2, sl
 800286e:	4631      	mov	r1, r6
 8002870:	4628      	mov	r0, r5
 8002872:	47b8      	blx	r7
 8002874:	3001      	adds	r0, #1
 8002876:	f43f af28 	beq.w	80026ca <_printf_float+0xb6>
 800287a:	f109 0901 	add.w	r9, r9, #1
 800287e:	e7e8      	b.n	8002852 <_printf_float+0x23e>
 8002880:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002882:	2b00      	cmp	r3, #0
 8002884:	dc38      	bgt.n	80028f8 <_printf_float+0x2e4>
 8002886:	2301      	movs	r3, #1
 8002888:	4631      	mov	r1, r6
 800288a:	4628      	mov	r0, r5
 800288c:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <_printf_float+0x2e0>)
 800288e:	47b8      	blx	r7
 8002890:	3001      	adds	r0, #1
 8002892:	f43f af1a 	beq.w	80026ca <_printf_float+0xb6>
 8002896:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800289a:	ea59 0303 	orrs.w	r3, r9, r3
 800289e:	d102      	bne.n	80028a6 <_printf_float+0x292>
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	07d9      	lsls	r1, r3, #31
 80028a4:	d5d7      	bpl.n	8002856 <_printf_float+0x242>
 80028a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80028aa:	4631      	mov	r1, r6
 80028ac:	4628      	mov	r0, r5
 80028ae:	47b8      	blx	r7
 80028b0:	3001      	adds	r0, #1
 80028b2:	f43f af0a 	beq.w	80026ca <_printf_float+0xb6>
 80028b6:	f04f 0a00 	mov.w	sl, #0
 80028ba:	f104 0b1a 	add.w	fp, r4, #26
 80028be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80028c0:	425b      	negs	r3, r3
 80028c2:	4553      	cmp	r3, sl
 80028c4:	dc01      	bgt.n	80028ca <_printf_float+0x2b6>
 80028c6:	464b      	mov	r3, r9
 80028c8:	e793      	b.n	80027f2 <_printf_float+0x1de>
 80028ca:	2301      	movs	r3, #1
 80028cc:	465a      	mov	r2, fp
 80028ce:	4631      	mov	r1, r6
 80028d0:	4628      	mov	r0, r5
 80028d2:	47b8      	blx	r7
 80028d4:	3001      	adds	r0, #1
 80028d6:	f43f aef8 	beq.w	80026ca <_printf_float+0xb6>
 80028da:	f10a 0a01 	add.w	sl, sl, #1
 80028de:	e7ee      	b.n	80028be <_printf_float+0x2aa>
 80028e0:	7fefffff 	.word	0x7fefffff
 80028e4:	080051e6 	.word	0x080051e6
 80028e8:	080051e2 	.word	0x080051e2
 80028ec:	080051ee 	.word	0x080051ee
 80028f0:	080051ea 	.word	0x080051ea
 80028f4:	080051f2 	.word	0x080051f2
 80028f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80028fe:	4553      	cmp	r3, sl
 8002900:	bfa8      	it	ge
 8002902:	4653      	movge	r3, sl
 8002904:	2b00      	cmp	r3, #0
 8002906:	4699      	mov	r9, r3
 8002908:	dc36      	bgt.n	8002978 <_printf_float+0x364>
 800290a:	f04f 0b00 	mov.w	fp, #0
 800290e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002912:	f104 021a 	add.w	r2, r4, #26
 8002916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002918:	930a      	str	r3, [sp, #40]	@ 0x28
 800291a:	eba3 0309 	sub.w	r3, r3, r9
 800291e:	455b      	cmp	r3, fp
 8002920:	dc31      	bgt.n	8002986 <_printf_float+0x372>
 8002922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002924:	459a      	cmp	sl, r3
 8002926:	dc3a      	bgt.n	800299e <_printf_float+0x38a>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	07da      	lsls	r2, r3, #31
 800292c:	d437      	bmi.n	800299e <_printf_float+0x38a>
 800292e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002930:	ebaa 0903 	sub.w	r9, sl, r3
 8002934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002936:	ebaa 0303 	sub.w	r3, sl, r3
 800293a:	4599      	cmp	r9, r3
 800293c:	bfa8      	it	ge
 800293e:	4699      	movge	r9, r3
 8002940:	f1b9 0f00 	cmp.w	r9, #0
 8002944:	dc33      	bgt.n	80029ae <_printf_float+0x39a>
 8002946:	f04f 0800 	mov.w	r8, #0
 800294a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800294e:	f104 0b1a 	add.w	fp, r4, #26
 8002952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002954:	ebaa 0303 	sub.w	r3, sl, r3
 8002958:	eba3 0309 	sub.w	r3, r3, r9
 800295c:	4543      	cmp	r3, r8
 800295e:	f77f af7a 	ble.w	8002856 <_printf_float+0x242>
 8002962:	2301      	movs	r3, #1
 8002964:	465a      	mov	r2, fp
 8002966:	4631      	mov	r1, r6
 8002968:	4628      	mov	r0, r5
 800296a:	47b8      	blx	r7
 800296c:	3001      	adds	r0, #1
 800296e:	f43f aeac 	beq.w	80026ca <_printf_float+0xb6>
 8002972:	f108 0801 	add.w	r8, r8, #1
 8002976:	e7ec      	b.n	8002952 <_printf_float+0x33e>
 8002978:	4642      	mov	r2, r8
 800297a:	4631      	mov	r1, r6
 800297c:	4628      	mov	r0, r5
 800297e:	47b8      	blx	r7
 8002980:	3001      	adds	r0, #1
 8002982:	d1c2      	bne.n	800290a <_printf_float+0x2f6>
 8002984:	e6a1      	b.n	80026ca <_printf_float+0xb6>
 8002986:	2301      	movs	r3, #1
 8002988:	4631      	mov	r1, r6
 800298a:	4628      	mov	r0, r5
 800298c:	920a      	str	r2, [sp, #40]	@ 0x28
 800298e:	47b8      	blx	r7
 8002990:	3001      	adds	r0, #1
 8002992:	f43f ae9a 	beq.w	80026ca <_printf_float+0xb6>
 8002996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002998:	f10b 0b01 	add.w	fp, fp, #1
 800299c:	e7bb      	b.n	8002916 <_printf_float+0x302>
 800299e:	4631      	mov	r1, r6
 80029a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80029a4:	4628      	mov	r0, r5
 80029a6:	47b8      	blx	r7
 80029a8:	3001      	adds	r0, #1
 80029aa:	d1c0      	bne.n	800292e <_printf_float+0x31a>
 80029ac:	e68d      	b.n	80026ca <_printf_float+0xb6>
 80029ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80029b0:	464b      	mov	r3, r9
 80029b2:	4631      	mov	r1, r6
 80029b4:	4628      	mov	r0, r5
 80029b6:	4442      	add	r2, r8
 80029b8:	47b8      	blx	r7
 80029ba:	3001      	adds	r0, #1
 80029bc:	d1c3      	bne.n	8002946 <_printf_float+0x332>
 80029be:	e684      	b.n	80026ca <_printf_float+0xb6>
 80029c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80029c4:	f1ba 0f01 	cmp.w	sl, #1
 80029c8:	dc01      	bgt.n	80029ce <_printf_float+0x3ba>
 80029ca:	07db      	lsls	r3, r3, #31
 80029cc:	d536      	bpl.n	8002a3c <_printf_float+0x428>
 80029ce:	2301      	movs	r3, #1
 80029d0:	4642      	mov	r2, r8
 80029d2:	4631      	mov	r1, r6
 80029d4:	4628      	mov	r0, r5
 80029d6:	47b8      	blx	r7
 80029d8:	3001      	adds	r0, #1
 80029da:	f43f ae76 	beq.w	80026ca <_printf_float+0xb6>
 80029de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80029e2:	4631      	mov	r1, r6
 80029e4:	4628      	mov	r0, r5
 80029e6:	47b8      	blx	r7
 80029e8:	3001      	adds	r0, #1
 80029ea:	f43f ae6e 	beq.w	80026ca <_printf_float+0xb6>
 80029ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80029f2:	2200      	movs	r2, #0
 80029f4:	2300      	movs	r3, #0
 80029f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80029fa:	f7fd ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80029fe:	b9c0      	cbnz	r0, 8002a32 <_printf_float+0x41e>
 8002a00:	4653      	mov	r3, sl
 8002a02:	f108 0201 	add.w	r2, r8, #1
 8002a06:	4631      	mov	r1, r6
 8002a08:	4628      	mov	r0, r5
 8002a0a:	47b8      	blx	r7
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	d10c      	bne.n	8002a2a <_printf_float+0x416>
 8002a10:	e65b      	b.n	80026ca <_printf_float+0xb6>
 8002a12:	2301      	movs	r3, #1
 8002a14:	465a      	mov	r2, fp
 8002a16:	4631      	mov	r1, r6
 8002a18:	4628      	mov	r0, r5
 8002a1a:	47b8      	blx	r7
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	f43f ae54 	beq.w	80026ca <_printf_float+0xb6>
 8002a22:	f108 0801 	add.w	r8, r8, #1
 8002a26:	45d0      	cmp	r8, sl
 8002a28:	dbf3      	blt.n	8002a12 <_printf_float+0x3fe>
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002a30:	e6e0      	b.n	80027f4 <_printf_float+0x1e0>
 8002a32:	f04f 0800 	mov.w	r8, #0
 8002a36:	f104 0b1a 	add.w	fp, r4, #26
 8002a3a:	e7f4      	b.n	8002a26 <_printf_float+0x412>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4642      	mov	r2, r8
 8002a40:	e7e1      	b.n	8002a06 <_printf_float+0x3f2>
 8002a42:	2301      	movs	r3, #1
 8002a44:	464a      	mov	r2, r9
 8002a46:	4631      	mov	r1, r6
 8002a48:	4628      	mov	r0, r5
 8002a4a:	47b8      	blx	r7
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	f43f ae3c 	beq.w	80026ca <_printf_float+0xb6>
 8002a52:	f108 0801 	add.w	r8, r8, #1
 8002a56:	68e3      	ldr	r3, [r4, #12]
 8002a58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002a5a:	1a5b      	subs	r3, r3, r1
 8002a5c:	4543      	cmp	r3, r8
 8002a5e:	dcf0      	bgt.n	8002a42 <_printf_float+0x42e>
 8002a60:	e6fd      	b.n	800285e <_printf_float+0x24a>
 8002a62:	f04f 0800 	mov.w	r8, #0
 8002a66:	f104 0919 	add.w	r9, r4, #25
 8002a6a:	e7f4      	b.n	8002a56 <_printf_float+0x442>

08002a6c <_printf_common>:
 8002a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a70:	4616      	mov	r6, r2
 8002a72:	4698      	mov	r8, r3
 8002a74:	688a      	ldr	r2, [r1, #8]
 8002a76:	690b      	ldr	r3, [r1, #16]
 8002a78:	4607      	mov	r7, r0
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	bfb8      	it	lt
 8002a7e:	4613      	movlt	r3, r2
 8002a80:	6033      	str	r3, [r6, #0]
 8002a82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a86:	460c      	mov	r4, r1
 8002a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a8c:	b10a      	cbz	r2, 8002a92 <_printf_common+0x26>
 8002a8e:	3301      	adds	r3, #1
 8002a90:	6033      	str	r3, [r6, #0]
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	0699      	lsls	r1, r3, #26
 8002a96:	bf42      	ittt	mi
 8002a98:	6833      	ldrmi	r3, [r6, #0]
 8002a9a:	3302      	addmi	r3, #2
 8002a9c:	6033      	strmi	r3, [r6, #0]
 8002a9e:	6825      	ldr	r5, [r4, #0]
 8002aa0:	f015 0506 	ands.w	r5, r5, #6
 8002aa4:	d106      	bne.n	8002ab4 <_printf_common+0x48>
 8002aa6:	f104 0a19 	add.w	sl, r4, #25
 8002aaa:	68e3      	ldr	r3, [r4, #12]
 8002aac:	6832      	ldr	r2, [r6, #0]
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	42ab      	cmp	r3, r5
 8002ab2:	dc2b      	bgt.n	8002b0c <_printf_common+0xa0>
 8002ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ab8:	6822      	ldr	r2, [r4, #0]
 8002aba:	3b00      	subs	r3, #0
 8002abc:	bf18      	it	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	0692      	lsls	r2, r2, #26
 8002ac2:	d430      	bmi.n	8002b26 <_printf_common+0xba>
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002acc:	47c8      	blx	r9
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d023      	beq.n	8002b1a <_printf_common+0xae>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	6922      	ldr	r2, [r4, #16]
 8002ad6:	f003 0306 	and.w	r3, r3, #6
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf14      	ite	ne
 8002ade:	2500      	movne	r5, #0
 8002ae0:	6833      	ldreq	r3, [r6, #0]
 8002ae2:	f04f 0600 	mov.w	r6, #0
 8002ae6:	bf08      	it	eq
 8002ae8:	68e5      	ldreq	r5, [r4, #12]
 8002aea:	f104 041a 	add.w	r4, r4, #26
 8002aee:	bf08      	it	eq
 8002af0:	1aed      	subeq	r5, r5, r3
 8002af2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002af6:	bf08      	it	eq
 8002af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bfc4      	itt	gt
 8002b00:	1a9b      	subgt	r3, r3, r2
 8002b02:	18ed      	addgt	r5, r5, r3
 8002b04:	42b5      	cmp	r5, r6
 8002b06:	d11a      	bne.n	8002b3e <_printf_common+0xd2>
 8002b08:	2000      	movs	r0, #0
 8002b0a:	e008      	b.n	8002b1e <_printf_common+0xb2>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	4652      	mov	r2, sl
 8002b10:	4641      	mov	r1, r8
 8002b12:	4638      	mov	r0, r7
 8002b14:	47c8      	blx	r9
 8002b16:	3001      	adds	r0, #1
 8002b18:	d103      	bne.n	8002b22 <_printf_common+0xb6>
 8002b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b22:	3501      	adds	r5, #1
 8002b24:	e7c1      	b.n	8002aaa <_printf_common+0x3e>
 8002b26:	2030      	movs	r0, #48	@ 0x30
 8002b28:	18e1      	adds	r1, r4, r3
 8002b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b34:	4422      	add	r2, r4
 8002b36:	3302      	adds	r3, #2
 8002b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b3c:	e7c2      	b.n	8002ac4 <_printf_common+0x58>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	4622      	mov	r2, r4
 8002b42:	4641      	mov	r1, r8
 8002b44:	4638      	mov	r0, r7
 8002b46:	47c8      	blx	r9
 8002b48:	3001      	adds	r0, #1
 8002b4a:	d0e6      	beq.n	8002b1a <_printf_common+0xae>
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7d9      	b.n	8002b04 <_printf_common+0x98>

08002b50 <_printf_i>:
 8002b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b54:	7e0f      	ldrb	r7, [r1, #24]
 8002b56:	4691      	mov	r9, r2
 8002b58:	2f78      	cmp	r7, #120	@ 0x78
 8002b5a:	4680      	mov	r8, r0
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	469a      	mov	sl, r3
 8002b60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b66:	d807      	bhi.n	8002b78 <_printf_i+0x28>
 8002b68:	2f62      	cmp	r7, #98	@ 0x62
 8002b6a:	d80a      	bhi.n	8002b82 <_printf_i+0x32>
 8002b6c:	2f00      	cmp	r7, #0
 8002b6e:	f000 80d1 	beq.w	8002d14 <_printf_i+0x1c4>
 8002b72:	2f58      	cmp	r7, #88	@ 0x58
 8002b74:	f000 80b8 	beq.w	8002ce8 <_printf_i+0x198>
 8002b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b80:	e03a      	b.n	8002bf8 <_printf_i+0xa8>
 8002b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b86:	2b15      	cmp	r3, #21
 8002b88:	d8f6      	bhi.n	8002b78 <_printf_i+0x28>
 8002b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8002b90 <_printf_i+0x40>)
 8002b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b90:	08002be9 	.word	0x08002be9
 8002b94:	08002bfd 	.word	0x08002bfd
 8002b98:	08002b79 	.word	0x08002b79
 8002b9c:	08002b79 	.word	0x08002b79
 8002ba0:	08002b79 	.word	0x08002b79
 8002ba4:	08002b79 	.word	0x08002b79
 8002ba8:	08002bfd 	.word	0x08002bfd
 8002bac:	08002b79 	.word	0x08002b79
 8002bb0:	08002b79 	.word	0x08002b79
 8002bb4:	08002b79 	.word	0x08002b79
 8002bb8:	08002b79 	.word	0x08002b79
 8002bbc:	08002cfb 	.word	0x08002cfb
 8002bc0:	08002c27 	.word	0x08002c27
 8002bc4:	08002cb5 	.word	0x08002cb5
 8002bc8:	08002b79 	.word	0x08002b79
 8002bcc:	08002b79 	.word	0x08002b79
 8002bd0:	08002d1d 	.word	0x08002d1d
 8002bd4:	08002b79 	.word	0x08002b79
 8002bd8:	08002c27 	.word	0x08002c27
 8002bdc:	08002b79 	.word	0x08002b79
 8002be0:	08002b79 	.word	0x08002b79
 8002be4:	08002cbd 	.word	0x08002cbd
 8002be8:	6833      	ldr	r3, [r6, #0]
 8002bea:	1d1a      	adds	r2, r3, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6032      	str	r2, [r6, #0]
 8002bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e09c      	b.n	8002d36 <_printf_i+0x1e6>
 8002bfc:	6833      	ldr	r3, [r6, #0]
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	1d19      	adds	r1, r3, #4
 8002c02:	6031      	str	r1, [r6, #0]
 8002c04:	0606      	lsls	r6, r0, #24
 8002c06:	d501      	bpl.n	8002c0c <_printf_i+0xbc>
 8002c08:	681d      	ldr	r5, [r3, #0]
 8002c0a:	e003      	b.n	8002c14 <_printf_i+0xc4>
 8002c0c:	0645      	lsls	r5, r0, #25
 8002c0e:	d5fb      	bpl.n	8002c08 <_printf_i+0xb8>
 8002c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c14:	2d00      	cmp	r5, #0
 8002c16:	da03      	bge.n	8002c20 <_printf_i+0xd0>
 8002c18:	232d      	movs	r3, #45	@ 0x2d
 8002c1a:	426d      	negs	r5, r5
 8002c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c20:	230a      	movs	r3, #10
 8002c22:	4858      	ldr	r0, [pc, #352]	@ (8002d84 <_printf_i+0x234>)
 8002c24:	e011      	b.n	8002c4a <_printf_i+0xfa>
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	6833      	ldr	r3, [r6, #0]
 8002c2a:	0608      	lsls	r0, r1, #24
 8002c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c30:	d402      	bmi.n	8002c38 <_printf_i+0xe8>
 8002c32:	0649      	lsls	r1, r1, #25
 8002c34:	bf48      	it	mi
 8002c36:	b2ad      	uxthmi	r5, r5
 8002c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c3a:	6033      	str	r3, [r6, #0]
 8002c3c:	bf14      	ite	ne
 8002c3e:	230a      	movne	r3, #10
 8002c40:	2308      	moveq	r3, #8
 8002c42:	4850      	ldr	r0, [pc, #320]	@ (8002d84 <_printf_i+0x234>)
 8002c44:	2100      	movs	r1, #0
 8002c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c4a:	6866      	ldr	r6, [r4, #4]
 8002c4c:	2e00      	cmp	r6, #0
 8002c4e:	60a6      	str	r6, [r4, #8]
 8002c50:	db05      	blt.n	8002c5e <_printf_i+0x10e>
 8002c52:	6821      	ldr	r1, [r4, #0]
 8002c54:	432e      	orrs	r6, r5
 8002c56:	f021 0104 	bic.w	r1, r1, #4
 8002c5a:	6021      	str	r1, [r4, #0]
 8002c5c:	d04b      	beq.n	8002cf6 <_printf_i+0x1a6>
 8002c5e:	4616      	mov	r6, r2
 8002c60:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c64:	fb03 5711 	mls	r7, r3, r1, r5
 8002c68:	5dc7      	ldrb	r7, [r0, r7]
 8002c6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c6e:	462f      	mov	r7, r5
 8002c70:	42bb      	cmp	r3, r7
 8002c72:	460d      	mov	r5, r1
 8002c74:	d9f4      	bls.n	8002c60 <_printf_i+0x110>
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d10b      	bne.n	8002c92 <_printf_i+0x142>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	07df      	lsls	r7, r3, #31
 8002c7e:	d508      	bpl.n	8002c92 <_printf_i+0x142>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	6861      	ldr	r1, [r4, #4]
 8002c84:	4299      	cmp	r1, r3
 8002c86:	bfde      	ittt	le
 8002c88:	2330      	movle	r3, #48	@ 0x30
 8002c8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c92:	1b92      	subs	r2, r2, r6
 8002c94:	6122      	str	r2, [r4, #16]
 8002c96:	464b      	mov	r3, r9
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	f8cd a000 	str.w	sl, [sp]
 8002ca0:	aa03      	add	r2, sp, #12
 8002ca2:	f7ff fee3 	bl	8002a6c <_printf_common>
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d14a      	bne.n	8002d40 <_printf_i+0x1f0>
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	b004      	add	sp, #16
 8002cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	f043 0320 	orr.w	r3, r3, #32
 8002cba:	6023      	str	r3, [r4, #0]
 8002cbc:	2778      	movs	r7, #120	@ 0x78
 8002cbe:	4832      	ldr	r0, [pc, #200]	@ (8002d88 <_printf_i+0x238>)
 8002cc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	6831      	ldr	r1, [r6, #0]
 8002cc8:	061f      	lsls	r7, r3, #24
 8002cca:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cce:	d402      	bmi.n	8002cd6 <_printf_i+0x186>
 8002cd0:	065f      	lsls	r7, r3, #25
 8002cd2:	bf48      	it	mi
 8002cd4:	b2ad      	uxthmi	r5, r5
 8002cd6:	6031      	str	r1, [r6, #0]
 8002cd8:	07d9      	lsls	r1, r3, #31
 8002cda:	bf44      	itt	mi
 8002cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce0:	6023      	strmi	r3, [r4, #0]
 8002ce2:	b11d      	cbz	r5, 8002cec <_printf_i+0x19c>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	e7ad      	b.n	8002c44 <_printf_i+0xf4>
 8002ce8:	4826      	ldr	r0, [pc, #152]	@ (8002d84 <_printf_i+0x234>)
 8002cea:	e7e9      	b.n	8002cc0 <_printf_i+0x170>
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	f023 0320 	bic.w	r3, r3, #32
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	e7f6      	b.n	8002ce4 <_printf_i+0x194>
 8002cf6:	4616      	mov	r6, r2
 8002cf8:	e7bd      	b.n	8002c76 <_printf_i+0x126>
 8002cfa:	6833      	ldr	r3, [r6, #0]
 8002cfc:	6825      	ldr	r5, [r4, #0]
 8002cfe:	1d18      	adds	r0, r3, #4
 8002d00:	6961      	ldr	r1, [r4, #20]
 8002d02:	6030      	str	r0, [r6, #0]
 8002d04:	062e      	lsls	r6, r5, #24
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	d501      	bpl.n	8002d0e <_printf_i+0x1be>
 8002d0a:	6019      	str	r1, [r3, #0]
 8002d0c:	e002      	b.n	8002d14 <_printf_i+0x1c4>
 8002d0e:	0668      	lsls	r0, r5, #25
 8002d10:	d5fb      	bpl.n	8002d0a <_printf_i+0x1ba>
 8002d12:	8019      	strh	r1, [r3, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	4616      	mov	r6, r2
 8002d18:	6123      	str	r3, [r4, #16]
 8002d1a:	e7bc      	b.n	8002c96 <_printf_i+0x146>
 8002d1c:	6833      	ldr	r3, [r6, #0]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	1d1a      	adds	r2, r3, #4
 8002d22:	6032      	str	r2, [r6, #0]
 8002d24:	681e      	ldr	r6, [r3, #0]
 8002d26:	6862      	ldr	r2, [r4, #4]
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f000 f9d6 	bl	80030da <memchr>
 8002d2e:	b108      	cbz	r0, 8002d34 <_printf_i+0x1e4>
 8002d30:	1b80      	subs	r0, r0, r6
 8002d32:	6060      	str	r0, [r4, #4]
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	6123      	str	r3, [r4, #16]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d3e:	e7aa      	b.n	8002c96 <_printf_i+0x146>
 8002d40:	4632      	mov	r2, r6
 8002d42:	4649      	mov	r1, r9
 8002d44:	4640      	mov	r0, r8
 8002d46:	6923      	ldr	r3, [r4, #16]
 8002d48:	47d0      	blx	sl
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d0ad      	beq.n	8002caa <_printf_i+0x15a>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	079b      	lsls	r3, r3, #30
 8002d52:	d413      	bmi.n	8002d7c <_printf_i+0x22c>
 8002d54:	68e0      	ldr	r0, [r4, #12]
 8002d56:	9b03      	ldr	r3, [sp, #12]
 8002d58:	4298      	cmp	r0, r3
 8002d5a:	bfb8      	it	lt
 8002d5c:	4618      	movlt	r0, r3
 8002d5e:	e7a6      	b.n	8002cae <_printf_i+0x15e>
 8002d60:	2301      	movs	r3, #1
 8002d62:	4632      	mov	r2, r6
 8002d64:	4649      	mov	r1, r9
 8002d66:	4640      	mov	r0, r8
 8002d68:	47d0      	blx	sl
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	d09d      	beq.n	8002caa <_printf_i+0x15a>
 8002d6e:	3501      	adds	r5, #1
 8002d70:	68e3      	ldr	r3, [r4, #12]
 8002d72:	9903      	ldr	r1, [sp, #12]
 8002d74:	1a5b      	subs	r3, r3, r1
 8002d76:	42ab      	cmp	r3, r5
 8002d78:	dcf2      	bgt.n	8002d60 <_printf_i+0x210>
 8002d7a:	e7eb      	b.n	8002d54 <_printf_i+0x204>
 8002d7c:	2500      	movs	r5, #0
 8002d7e:	f104 0619 	add.w	r6, r4, #25
 8002d82:	e7f5      	b.n	8002d70 <_printf_i+0x220>
 8002d84:	080051f4 	.word	0x080051f4
 8002d88:	08005205 	.word	0x08005205

08002d8c <std>:
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	4604      	mov	r4, r0
 8002d92:	e9c0 3300 	strd	r3, r3, [r0]
 8002d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d9a:	6083      	str	r3, [r0, #8]
 8002d9c:	8181      	strh	r1, [r0, #12]
 8002d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002da0:	81c2      	strh	r2, [r0, #14]
 8002da2:	6183      	str	r3, [r0, #24]
 8002da4:	4619      	mov	r1, r3
 8002da6:	2208      	movs	r2, #8
 8002da8:	305c      	adds	r0, #92	@ 0x5c
 8002daa:	f000 f916 	bl	8002fda <memset>
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <std+0x58>)
 8002db0:	6224      	str	r4, [r4, #32]
 8002db2:	6263      	str	r3, [r4, #36]	@ 0x24
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <std+0x5c>)
 8002db6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <std+0x60>)
 8002dba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <std+0x64>)
 8002dbe:	6323      	str	r3, [r4, #48]	@ 0x30
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <std+0x68>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d006      	beq.n	8002dd4 <std+0x48>
 8002dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002dca:	4294      	cmp	r4, r2
 8002dcc:	d002      	beq.n	8002dd4 <std+0x48>
 8002dce:	33d0      	adds	r3, #208	@ 0xd0
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	d105      	bne.n	8002de0 <std+0x54>
 8002dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ddc:	f000 b97a 	b.w	80030d4 <__retarget_lock_init_recursive>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	bf00      	nop
 8002de4:	08002f55 	.word	0x08002f55
 8002de8:	08002f77 	.word	0x08002f77
 8002dec:	08002faf 	.word	0x08002faf
 8002df0:	08002fd3 	.word	0x08002fd3
 8002df4:	20000240 	.word	0x20000240

08002df8 <stdio_exit_handler>:
 8002df8:	4a02      	ldr	r2, [pc, #8]	@ (8002e04 <stdio_exit_handler+0xc>)
 8002dfa:	4903      	ldr	r1, [pc, #12]	@ (8002e08 <stdio_exit_handler+0x10>)
 8002dfc:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <stdio_exit_handler+0x14>)
 8002dfe:	f000 b869 	b.w	8002ed4 <_fwalk_sglue>
 8002e02:	bf00      	nop
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	08004a51 	.word	0x08004a51
 8002e0c:	2000001c 	.word	0x2000001c

08002e10 <cleanup_stdio>:
 8002e10:	6841      	ldr	r1, [r0, #4]
 8002e12:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <cleanup_stdio+0x34>)
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4299      	cmp	r1, r3
 8002e18:	4604      	mov	r4, r0
 8002e1a:	d001      	beq.n	8002e20 <cleanup_stdio+0x10>
 8002e1c:	f001 fe18 	bl	8004a50 <_fflush_r>
 8002e20:	68a1      	ldr	r1, [r4, #8]
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <cleanup_stdio+0x38>)
 8002e24:	4299      	cmp	r1, r3
 8002e26:	d002      	beq.n	8002e2e <cleanup_stdio+0x1e>
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f001 fe11 	bl	8004a50 <_fflush_r>
 8002e2e:	68e1      	ldr	r1, [r4, #12]
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <cleanup_stdio+0x3c>)
 8002e32:	4299      	cmp	r1, r3
 8002e34:	d004      	beq.n	8002e40 <cleanup_stdio+0x30>
 8002e36:	4620      	mov	r0, r4
 8002e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e3c:	f001 be08 	b.w	8004a50 <_fflush_r>
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	bf00      	nop
 8002e44:	20000240 	.word	0x20000240
 8002e48:	200002a8 	.word	0x200002a8
 8002e4c:	20000310 	.word	0x20000310

08002e50 <global_stdio_init.part.0>:
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <global_stdio_init.part.0+0x30>)
 8002e54:	4c0b      	ldr	r4, [pc, #44]	@ (8002e84 <global_stdio_init.part.0+0x34>)
 8002e56:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <global_stdio_init.part.0+0x38>)
 8002e58:	4620      	mov	r0, r4
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f7ff ff94 	bl	8002d8c <std>
 8002e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2109      	movs	r1, #9
 8002e6c:	f7ff ff8e 	bl	8002d8c <std>
 8002e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e74:	2202      	movs	r2, #2
 8002e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7a:	2112      	movs	r1, #18
 8002e7c:	f7ff bf86 	b.w	8002d8c <std>
 8002e80:	20000378 	.word	0x20000378
 8002e84:	20000240 	.word	0x20000240
 8002e88:	08002df9 	.word	0x08002df9

08002e8c <__sfp_lock_acquire>:
 8002e8c:	4801      	ldr	r0, [pc, #4]	@ (8002e94 <__sfp_lock_acquire+0x8>)
 8002e8e:	f000 b922 	b.w	80030d6 <__retarget_lock_acquire_recursive>
 8002e92:	bf00      	nop
 8002e94:	20000381 	.word	0x20000381

08002e98 <__sfp_lock_release>:
 8002e98:	4801      	ldr	r0, [pc, #4]	@ (8002ea0 <__sfp_lock_release+0x8>)
 8002e9a:	f000 b91d 	b.w	80030d8 <__retarget_lock_release_recursive>
 8002e9e:	bf00      	nop
 8002ea0:	20000381 	.word	0x20000381

08002ea4 <__sinit>:
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	f7ff fff0 	bl	8002e8c <__sfp_lock_acquire>
 8002eac:	6a23      	ldr	r3, [r4, #32]
 8002eae:	b11b      	cbz	r3, 8002eb8 <__sinit+0x14>
 8002eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eb4:	f7ff bff0 	b.w	8002e98 <__sfp_lock_release>
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <__sinit+0x28>)
 8002eba:	6223      	str	r3, [r4, #32]
 8002ebc:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <__sinit+0x2c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f5      	bne.n	8002eb0 <__sinit+0xc>
 8002ec4:	f7ff ffc4 	bl	8002e50 <global_stdio_init.part.0>
 8002ec8:	e7f2      	b.n	8002eb0 <__sinit+0xc>
 8002eca:	bf00      	nop
 8002ecc:	08002e11 	.word	0x08002e11
 8002ed0:	20000378 	.word	0x20000378

08002ed4 <_fwalk_sglue>:
 8002ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed8:	4607      	mov	r7, r0
 8002eda:	4688      	mov	r8, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	2600      	movs	r6, #0
 8002ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8002ee8:	d505      	bpl.n	8002ef6 <_fwalk_sglue+0x22>
 8002eea:	6824      	ldr	r4, [r4, #0]
 8002eec:	2c00      	cmp	r4, #0
 8002eee:	d1f7      	bne.n	8002ee0 <_fwalk_sglue+0xc>
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ef6:	89ab      	ldrh	r3, [r5, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d907      	bls.n	8002f0c <_fwalk_sglue+0x38>
 8002efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f00:	3301      	adds	r3, #1
 8002f02:	d003      	beq.n	8002f0c <_fwalk_sglue+0x38>
 8002f04:	4629      	mov	r1, r5
 8002f06:	4638      	mov	r0, r7
 8002f08:	47c0      	blx	r8
 8002f0a:	4306      	orrs	r6, r0
 8002f0c:	3568      	adds	r5, #104	@ 0x68
 8002f0e:	e7e9      	b.n	8002ee4 <_fwalk_sglue+0x10>

08002f10 <siprintf>:
 8002f10:	b40e      	push	{r1, r2, r3}
 8002f12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f16:	b510      	push	{r4, lr}
 8002f18:	2400      	movs	r4, #0
 8002f1a:	b09d      	sub	sp, #116	@ 0x74
 8002f1c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002f1e:	9002      	str	r0, [sp, #8]
 8002f20:	9006      	str	r0, [sp, #24]
 8002f22:	9107      	str	r1, [sp, #28]
 8002f24:	9104      	str	r1, [sp, #16]
 8002f26:	4809      	ldr	r0, [pc, #36]	@ (8002f4c <siprintf+0x3c>)
 8002f28:	4909      	ldr	r1, [pc, #36]	@ (8002f50 <siprintf+0x40>)
 8002f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f2e:	9105      	str	r1, [sp, #20]
 8002f30:	6800      	ldr	r0, [r0, #0]
 8002f32:	a902      	add	r1, sp, #8
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002f38:	f001 fc0e 	bl	8004758 <_svfiprintf_r>
 8002f3c:	9b02      	ldr	r3, [sp, #8]
 8002f3e:	701c      	strb	r4, [r3, #0]
 8002f40:	b01d      	add	sp, #116	@ 0x74
 8002f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f46:	b003      	add	sp, #12
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000018 	.word	0x20000018
 8002f50:	ffff0208 	.word	0xffff0208

08002f54 <__sread>:
 8002f54:	b510      	push	{r4, lr}
 8002f56:	460c      	mov	r4, r1
 8002f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5c:	f000 f86c 	bl	8003038 <_read_r>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	bfab      	itete	ge
 8002f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f66:	89a3      	ldrhlt	r3, [r4, #12]
 8002f68:	181b      	addge	r3, r3, r0
 8002f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f6e:	bfac      	ite	ge
 8002f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f72:	81a3      	strhlt	r3, [r4, #12]
 8002f74:	bd10      	pop	{r4, pc}

08002f76 <__swrite>:
 8002f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7a:	461f      	mov	r7, r3
 8002f7c:	898b      	ldrh	r3, [r1, #12]
 8002f7e:	4605      	mov	r5, r0
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	460c      	mov	r4, r1
 8002f84:	4616      	mov	r6, r2
 8002f86:	d505      	bpl.n	8002f94 <__swrite+0x1e>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f90:	f000 f840 	bl	8003014 <_lseek_r>
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	4632      	mov	r2, r6
 8002f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002faa:	f000 b857 	b.w	800305c <_write_r>

08002fae <__sseek>:
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb6:	f000 f82d 	bl	8003014 <_lseek_r>
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	bf15      	itete	ne
 8002fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fca:	81a3      	strheq	r3, [r4, #12]
 8002fcc:	bf18      	it	ne
 8002fce:	81a3      	strhne	r3, [r4, #12]
 8002fd0:	bd10      	pop	{r4, pc}

08002fd2 <__sclose>:
 8002fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd6:	f000 b80d 	b.w	8002ff4 <_close_r>

08002fda <memset>:
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4402      	add	r2, r0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <memset+0xa>
 8002fe2:	4770      	bx	lr
 8002fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe8:	e7f9      	b.n	8002fde <memset+0x4>
	...

08002fec <_localeconv_r>:
 8002fec:	4800      	ldr	r0, [pc, #0]	@ (8002ff0 <_localeconv_r+0x4>)
 8002fee:	4770      	bx	lr
 8002ff0:	20000158 	.word	0x20000158

08002ff4 <_close_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	4d05      	ldr	r5, [pc, #20]	@ (8003010 <_close_r+0x1c>)
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	f7fe f80f 	bl	8001022 <_close>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_close_r+0x1a>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_close_r+0x1a>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	2000037c 	.word	0x2000037c

08003014 <_lseek_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4604      	mov	r4, r0
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	2200      	movs	r2, #0
 800301e:	4d05      	ldr	r5, [pc, #20]	@ (8003034 <_lseek_r+0x20>)
 8003020:	602a      	str	r2, [r5, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	f7fe f821 	bl	800106a <_lseek>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d102      	bne.n	8003032 <_lseek_r+0x1e>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	b103      	cbz	r3, 8003032 <_lseek_r+0x1e>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	bd38      	pop	{r3, r4, r5, pc}
 8003034:	2000037c 	.word	0x2000037c

08003038 <_read_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4604      	mov	r4, r0
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	2200      	movs	r2, #0
 8003042:	4d05      	ldr	r5, [pc, #20]	@ (8003058 <_read_r+0x20>)
 8003044:	602a      	str	r2, [r5, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	f7fd ffb2 	bl	8000fb0 <_read>
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	d102      	bne.n	8003056 <_read_r+0x1e>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	b103      	cbz	r3, 8003056 <_read_r+0x1e>
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	2000037c 	.word	0x2000037c

0800305c <_write_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4604      	mov	r4, r0
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	2200      	movs	r2, #0
 8003066:	4d05      	ldr	r5, [pc, #20]	@ (800307c <_write_r+0x20>)
 8003068:	602a      	str	r2, [r5, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f7fd ffbd 	bl	8000fea <_write>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_write_r+0x1e>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	b103      	cbz	r3, 800307a <_write_r+0x1e>
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	2000037c 	.word	0x2000037c

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	@ (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000018 	.word	0x20000018

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	@ (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	@ (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f002 f874 	bl	8005188 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	@ (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	@ (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	0800555c 	.word	0x0800555c
 80030c8:	0800555c 	.word	0x0800555c
 80030cc:	0800555c 	.word	0x0800555c
 80030d0:	08005560 	.word	0x08005560

080030d4 <__retarget_lock_init_recursive>:
 80030d4:	4770      	bx	lr

080030d6 <__retarget_lock_acquire_recursive>:
 80030d6:	4770      	bx	lr

080030d8 <__retarget_lock_release_recursive>:
 80030d8:	4770      	bx	lr

080030da <memchr>:
 80030da:	4603      	mov	r3, r0
 80030dc:	b510      	push	{r4, lr}
 80030de:	b2c9      	uxtb	r1, r1
 80030e0:	4402      	add	r2, r0
 80030e2:	4293      	cmp	r3, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	d101      	bne.n	80030ec <memchr+0x12>
 80030e8:	2000      	movs	r0, #0
 80030ea:	e003      	b.n	80030f4 <memchr+0x1a>
 80030ec:	7804      	ldrb	r4, [r0, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	428c      	cmp	r4, r1
 80030f2:	d1f6      	bne.n	80030e2 <memchr+0x8>
 80030f4:	bd10      	pop	{r4, pc}

080030f6 <quorem>:
 80030f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030fa:	6903      	ldr	r3, [r0, #16]
 80030fc:	690c      	ldr	r4, [r1, #16]
 80030fe:	4607      	mov	r7, r0
 8003100:	42a3      	cmp	r3, r4
 8003102:	db7e      	blt.n	8003202 <quorem+0x10c>
 8003104:	3c01      	subs	r4, #1
 8003106:	00a3      	lsls	r3, r4, #2
 8003108:	f100 0514 	add.w	r5, r0, #20
 800310c:	f101 0814 	add.w	r8, r1, #20
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800311c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003120:	3301      	adds	r3, #1
 8003122:	429a      	cmp	r2, r3
 8003124:	fbb2 f6f3 	udiv	r6, r2, r3
 8003128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800312c:	d32e      	bcc.n	800318c <quorem+0x96>
 800312e:	f04f 0a00 	mov.w	sl, #0
 8003132:	46c4      	mov	ip, r8
 8003134:	46ae      	mov	lr, r5
 8003136:	46d3      	mov	fp, sl
 8003138:	f85c 3b04 	ldr.w	r3, [ip], #4
 800313c:	b298      	uxth	r0, r3
 800313e:	fb06 a000 	mla	r0, r6, r0, sl
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	0c02      	lsrs	r2, r0, #16
 8003146:	fb06 2303 	mla	r3, r6, r3, r2
 800314a:	f8de 2000 	ldr.w	r2, [lr]
 800314e:	b280      	uxth	r0, r0
 8003150:	b292      	uxth	r2, r2
 8003152:	1a12      	subs	r2, r2, r0
 8003154:	445a      	add	r2, fp
 8003156:	f8de 0000 	ldr.w	r0, [lr]
 800315a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800315e:	b29b      	uxth	r3, r3
 8003160:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003164:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003168:	b292      	uxth	r2, r2
 800316a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800316e:	45e1      	cmp	r9, ip
 8003170:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003174:	f84e 2b04 	str.w	r2, [lr], #4
 8003178:	d2de      	bcs.n	8003138 <quorem+0x42>
 800317a:	9b00      	ldr	r3, [sp, #0]
 800317c:	58eb      	ldr	r3, [r5, r3]
 800317e:	b92b      	cbnz	r3, 800318c <quorem+0x96>
 8003180:	9b01      	ldr	r3, [sp, #4]
 8003182:	3b04      	subs	r3, #4
 8003184:	429d      	cmp	r5, r3
 8003186:	461a      	mov	r2, r3
 8003188:	d32f      	bcc.n	80031ea <quorem+0xf4>
 800318a:	613c      	str	r4, [r7, #16]
 800318c:	4638      	mov	r0, r7
 800318e:	f001 f97f 	bl	8004490 <__mcmp>
 8003192:	2800      	cmp	r0, #0
 8003194:	db25      	blt.n	80031e2 <quorem+0xec>
 8003196:	4629      	mov	r1, r5
 8003198:	2000      	movs	r0, #0
 800319a:	f858 2b04 	ldr.w	r2, [r8], #4
 800319e:	f8d1 c000 	ldr.w	ip, [r1]
 80031a2:	fa1f fe82 	uxth.w	lr, r2
 80031a6:	fa1f f38c 	uxth.w	r3, ip
 80031aa:	eba3 030e 	sub.w	r3, r3, lr
 80031ae:	4403      	add	r3, r0
 80031b0:	0c12      	lsrs	r2, r2, #16
 80031b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80031b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031c0:	45c1      	cmp	r9, r8
 80031c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80031c6:	f841 3b04 	str.w	r3, [r1], #4
 80031ca:	d2e6      	bcs.n	800319a <quorem+0xa4>
 80031cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031d4:	b922      	cbnz	r2, 80031e0 <quorem+0xea>
 80031d6:	3b04      	subs	r3, #4
 80031d8:	429d      	cmp	r5, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	d30b      	bcc.n	80031f6 <quorem+0x100>
 80031de:	613c      	str	r4, [r7, #16]
 80031e0:	3601      	adds	r6, #1
 80031e2:	4630      	mov	r0, r6
 80031e4:	b003      	add	sp, #12
 80031e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	3b04      	subs	r3, #4
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	d1cb      	bne.n	800318a <quorem+0x94>
 80031f2:	3c01      	subs	r4, #1
 80031f4:	e7c6      	b.n	8003184 <quorem+0x8e>
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	3b04      	subs	r3, #4
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d1ef      	bne.n	80031de <quorem+0xe8>
 80031fe:	3c01      	subs	r4, #1
 8003200:	e7ea      	b.n	80031d8 <quorem+0xe2>
 8003202:	2000      	movs	r0, #0
 8003204:	e7ee      	b.n	80031e4 <quorem+0xee>
	...

08003208 <_dtoa_r>:
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	4614      	mov	r4, r2
 800320e:	461d      	mov	r5, r3
 8003210:	69c7      	ldr	r7, [r0, #28]
 8003212:	b097      	sub	sp, #92	@ 0x5c
 8003214:	4681      	mov	r9, r0
 8003216:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800321a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800321c:	b97f      	cbnz	r7, 800323e <_dtoa_r+0x36>
 800321e:	2010      	movs	r0, #16
 8003220:	f000 fe0e 	bl	8003e40 <malloc>
 8003224:	4602      	mov	r2, r0
 8003226:	f8c9 001c 	str.w	r0, [r9, #28]
 800322a:	b920      	cbnz	r0, 8003236 <_dtoa_r+0x2e>
 800322c:	21ef      	movs	r1, #239	@ 0xef
 800322e:	4bac      	ldr	r3, [pc, #688]	@ (80034e0 <_dtoa_r+0x2d8>)
 8003230:	48ac      	ldr	r0, [pc, #688]	@ (80034e4 <_dtoa_r+0x2dc>)
 8003232:	f001 fc6d 	bl	8004b10 <__assert_func>
 8003236:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800323a:	6007      	str	r7, [r0, #0]
 800323c:	60c7      	str	r7, [r0, #12]
 800323e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	b159      	cbz	r1, 800325e <_dtoa_r+0x56>
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	2301      	movs	r3, #1
 800324a:	4093      	lsls	r3, r2
 800324c:	604a      	str	r2, [r1, #4]
 800324e:	608b      	str	r3, [r1, #8]
 8003250:	4648      	mov	r0, r9
 8003252:	f000 feeb 	bl	800402c <_Bfree>
 8003256:	2200      	movs	r2, #0
 8003258:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	1e2b      	subs	r3, r5, #0
 8003260:	bfaf      	iteee	ge
 8003262:	2300      	movge	r3, #0
 8003264:	2201      	movlt	r2, #1
 8003266:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800326a:	9307      	strlt	r3, [sp, #28]
 800326c:	bfa8      	it	ge
 800326e:	6033      	strge	r3, [r6, #0]
 8003270:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003274:	4b9c      	ldr	r3, [pc, #624]	@ (80034e8 <_dtoa_r+0x2e0>)
 8003276:	bfb8      	it	lt
 8003278:	6032      	strlt	r2, [r6, #0]
 800327a:	ea33 0308 	bics.w	r3, r3, r8
 800327e:	d112      	bne.n	80032a6 <_dtoa_r+0x9e>
 8003280:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003284:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800328c:	4323      	orrs	r3, r4
 800328e:	f000 855e 	beq.w	8003d4e <_dtoa_r+0xb46>
 8003292:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003294:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80034ec <_dtoa_r+0x2e4>
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8560 	beq.w	8003d5e <_dtoa_r+0xb56>
 800329e:	f10a 0303 	add.w	r3, sl, #3
 80032a2:	f000 bd5a 	b.w	8003d5a <_dtoa_r+0xb52>
 80032a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80032ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80032b2:	2200      	movs	r2, #0
 80032b4:	2300      	movs	r3, #0
 80032b6:	f7fd fb77 	bl	80009a8 <__aeabi_dcmpeq>
 80032ba:	4607      	mov	r7, r0
 80032bc:	b158      	cbz	r0, 80032d6 <_dtoa_r+0xce>
 80032be:	2301      	movs	r3, #1
 80032c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80032c6:	b113      	cbz	r3, 80032ce <_dtoa_r+0xc6>
 80032c8:	4b89      	ldr	r3, [pc, #548]	@ (80034f0 <_dtoa_r+0x2e8>)
 80032ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80034f4 <_dtoa_r+0x2ec>
 80032d2:	f000 bd44 	b.w	8003d5e <_dtoa_r+0xb56>
 80032d6:	ab14      	add	r3, sp, #80	@ 0x50
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	ab15      	add	r3, sp, #84	@ 0x54
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	4648      	mov	r0, r9
 80032e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80032e4:	f001 f984 	bl	80045f0 <__d2b>
 80032e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80032ec:	9003      	str	r0, [sp, #12]
 80032ee:	2e00      	cmp	r6, #0
 80032f0:	d078      	beq.n	80033e4 <_dtoa_r+0x1dc>
 80032f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80032f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80032fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003300:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003304:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003308:	9712      	str	r7, [sp, #72]	@ 0x48
 800330a:	4619      	mov	r1, r3
 800330c:	2200      	movs	r2, #0
 800330e:	4b7a      	ldr	r3, [pc, #488]	@ (80034f8 <_dtoa_r+0x2f0>)
 8003310:	f7fc ff2a 	bl	8000168 <__aeabi_dsub>
 8003314:	a36c      	add	r3, pc, #432	@ (adr r3, 80034c8 <_dtoa_r+0x2c0>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd f8dd 	bl	80004d8 <__aeabi_dmul>
 800331e:	a36c      	add	r3, pc, #432	@ (adr r3, 80034d0 <_dtoa_r+0x2c8>)
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f7fc ff22 	bl	800016c <__adddf3>
 8003328:	4604      	mov	r4, r0
 800332a:	4630      	mov	r0, r6
 800332c:	460d      	mov	r5, r1
 800332e:	f7fd f869 	bl	8000404 <__aeabi_i2d>
 8003332:	a369      	add	r3, pc, #420	@ (adr r3, 80034d8 <_dtoa_r+0x2d0>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd f8ce 	bl	80004d8 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4620      	mov	r0, r4
 8003342:	4629      	mov	r1, r5
 8003344:	f7fc ff12 	bl	800016c <__adddf3>
 8003348:	4604      	mov	r4, r0
 800334a:	460d      	mov	r5, r1
 800334c:	f7fd fb74 	bl	8000a38 <__aeabi_d2iz>
 8003350:	2200      	movs	r2, #0
 8003352:	4607      	mov	r7, r0
 8003354:	2300      	movs	r3, #0
 8003356:	4620      	mov	r0, r4
 8003358:	4629      	mov	r1, r5
 800335a:	f7fd fb2f 	bl	80009bc <__aeabi_dcmplt>
 800335e:	b140      	cbz	r0, 8003372 <_dtoa_r+0x16a>
 8003360:	4638      	mov	r0, r7
 8003362:	f7fd f84f 	bl	8000404 <__aeabi_i2d>
 8003366:	4622      	mov	r2, r4
 8003368:	462b      	mov	r3, r5
 800336a:	f7fd fb1d 	bl	80009a8 <__aeabi_dcmpeq>
 800336e:	b900      	cbnz	r0, 8003372 <_dtoa_r+0x16a>
 8003370:	3f01      	subs	r7, #1
 8003372:	2f16      	cmp	r7, #22
 8003374:	d854      	bhi.n	8003420 <_dtoa_r+0x218>
 8003376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800337a:	4b60      	ldr	r3, [pc, #384]	@ (80034fc <_dtoa_r+0x2f4>)
 800337c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd fb1a 	bl	80009bc <__aeabi_dcmplt>
 8003388:	2800      	cmp	r0, #0
 800338a:	d04b      	beq.n	8003424 <_dtoa_r+0x21c>
 800338c:	2300      	movs	r3, #0
 800338e:	3f01      	subs	r7, #1
 8003390:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003392:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003394:	1b9b      	subs	r3, r3, r6
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	bf49      	itett	mi
 800339a:	f1c3 0301 	rsbmi	r3, r3, #1
 800339e:	2300      	movpl	r3, #0
 80033a0:	9304      	strmi	r3, [sp, #16]
 80033a2:	2300      	movmi	r3, #0
 80033a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80033a6:	bf54      	ite	pl
 80033a8:	9304      	strpl	r3, [sp, #16]
 80033aa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80033ac:	2f00      	cmp	r7, #0
 80033ae:	db3b      	blt.n	8003428 <_dtoa_r+0x220>
 80033b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033b2:	970e      	str	r7, [sp, #56]	@ 0x38
 80033b4:	443b      	add	r3, r7
 80033b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80033b8:	2300      	movs	r3, #0
 80033ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80033bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d865      	bhi.n	800348e <_dtoa_r+0x286>
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	bfc4      	itt	gt
 80033c6:	3b04      	subgt	r3, #4
 80033c8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80033ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80033cc:	bfc8      	it	gt
 80033ce:	2400      	movgt	r4, #0
 80033d0:	f1a3 0302 	sub.w	r3, r3, #2
 80033d4:	bfd8      	it	le
 80033d6:	2401      	movle	r4, #1
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d864      	bhi.n	80034a6 <_dtoa_r+0x29e>
 80033dc:	e8df f003 	tbb	[pc, r3]
 80033e0:	2c385553 	.word	0x2c385553
 80033e4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80033e8:	441e      	add	r6, r3
 80033ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	bfc1      	itttt	gt
 80033f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80033f6:	fa08 f803 	lslgt.w	r8, r8, r3
 80033fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80033fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003402:	bfd6      	itet	le
 8003404:	f1c3 0320 	rsble	r3, r3, #32
 8003408:	ea48 0003 	orrgt.w	r0, r8, r3
 800340c:	fa04 f003 	lslle.w	r0, r4, r3
 8003410:	f7fc ffe8 	bl	80003e4 <__aeabi_ui2d>
 8003414:	2201      	movs	r2, #1
 8003416:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800341a:	3e01      	subs	r6, #1
 800341c:	9212      	str	r2, [sp, #72]	@ 0x48
 800341e:	e774      	b.n	800330a <_dtoa_r+0x102>
 8003420:	2301      	movs	r3, #1
 8003422:	e7b5      	b.n	8003390 <_dtoa_r+0x188>
 8003424:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003426:	e7b4      	b.n	8003392 <_dtoa_r+0x18a>
 8003428:	9b04      	ldr	r3, [sp, #16]
 800342a:	1bdb      	subs	r3, r3, r7
 800342c:	9304      	str	r3, [sp, #16]
 800342e:	427b      	negs	r3, r7
 8003430:	930a      	str	r3, [sp, #40]	@ 0x28
 8003432:	2300      	movs	r3, #0
 8003434:	930e      	str	r3, [sp, #56]	@ 0x38
 8003436:	e7c1      	b.n	80033bc <_dtoa_r+0x1b4>
 8003438:	2301      	movs	r3, #1
 800343a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800343c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800343e:	eb07 0b03 	add.w	fp, r7, r3
 8003442:	f10b 0301 	add.w	r3, fp, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	9308      	str	r3, [sp, #32]
 800344a:	bfb8      	it	lt
 800344c:	2301      	movlt	r3, #1
 800344e:	e006      	b.n	800345e <_dtoa_r+0x256>
 8003450:	2301      	movs	r3, #1
 8003452:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003456:	2b00      	cmp	r3, #0
 8003458:	dd28      	ble.n	80034ac <_dtoa_r+0x2a4>
 800345a:	469b      	mov	fp, r3
 800345c:	9308      	str	r3, [sp, #32]
 800345e:	2100      	movs	r1, #0
 8003460:	2204      	movs	r2, #4
 8003462:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003466:	f102 0514 	add.w	r5, r2, #20
 800346a:	429d      	cmp	r5, r3
 800346c:	d926      	bls.n	80034bc <_dtoa_r+0x2b4>
 800346e:	6041      	str	r1, [r0, #4]
 8003470:	4648      	mov	r0, r9
 8003472:	f000 fd9b 	bl	8003fac <_Balloc>
 8003476:	4682      	mov	sl, r0
 8003478:	2800      	cmp	r0, #0
 800347a:	d143      	bne.n	8003504 <_dtoa_r+0x2fc>
 800347c:	4602      	mov	r2, r0
 800347e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003482:	4b1f      	ldr	r3, [pc, #124]	@ (8003500 <_dtoa_r+0x2f8>)
 8003484:	e6d4      	b.n	8003230 <_dtoa_r+0x28>
 8003486:	2300      	movs	r3, #0
 8003488:	e7e3      	b.n	8003452 <_dtoa_r+0x24a>
 800348a:	2300      	movs	r3, #0
 800348c:	e7d5      	b.n	800343a <_dtoa_r+0x232>
 800348e:	2401      	movs	r4, #1
 8003490:	2300      	movs	r3, #0
 8003492:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003494:	9320      	str	r3, [sp, #128]	@ 0x80
 8003496:	f04f 3bff 	mov.w	fp, #4294967295
 800349a:	2200      	movs	r2, #0
 800349c:	2312      	movs	r3, #18
 800349e:	f8cd b020 	str.w	fp, [sp, #32]
 80034a2:	9221      	str	r2, [sp, #132]	@ 0x84
 80034a4:	e7db      	b.n	800345e <_dtoa_r+0x256>
 80034a6:	2301      	movs	r3, #1
 80034a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034aa:	e7f4      	b.n	8003496 <_dtoa_r+0x28e>
 80034ac:	f04f 0b01 	mov.w	fp, #1
 80034b0:	465b      	mov	r3, fp
 80034b2:	f8cd b020 	str.w	fp, [sp, #32]
 80034b6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80034ba:	e7d0      	b.n	800345e <_dtoa_r+0x256>
 80034bc:	3101      	adds	r1, #1
 80034be:	0052      	lsls	r2, r2, #1
 80034c0:	e7d1      	b.n	8003466 <_dtoa_r+0x25e>
 80034c2:	bf00      	nop
 80034c4:	f3af 8000 	nop.w
 80034c8:	636f4361 	.word	0x636f4361
 80034cc:	3fd287a7 	.word	0x3fd287a7
 80034d0:	8b60c8b3 	.word	0x8b60c8b3
 80034d4:	3fc68a28 	.word	0x3fc68a28
 80034d8:	509f79fb 	.word	0x509f79fb
 80034dc:	3fd34413 	.word	0x3fd34413
 80034e0:	08005223 	.word	0x08005223
 80034e4:	0800523a 	.word	0x0800523a
 80034e8:	7ff00000 	.word	0x7ff00000
 80034ec:	0800521f 	.word	0x0800521f
 80034f0:	080051f3 	.word	0x080051f3
 80034f4:	080051f2 	.word	0x080051f2
 80034f8:	3ff80000 	.word	0x3ff80000
 80034fc:	08005388 	.word	0x08005388
 8003500:	08005292 	.word	0x08005292
 8003504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003508:	6018      	str	r0, [r3, #0]
 800350a:	9b08      	ldr	r3, [sp, #32]
 800350c:	2b0e      	cmp	r3, #14
 800350e:	f200 80a1 	bhi.w	8003654 <_dtoa_r+0x44c>
 8003512:	2c00      	cmp	r4, #0
 8003514:	f000 809e 	beq.w	8003654 <_dtoa_r+0x44c>
 8003518:	2f00      	cmp	r7, #0
 800351a:	dd33      	ble.n	8003584 <_dtoa_r+0x37c>
 800351c:	4b9c      	ldr	r3, [pc, #624]	@ (8003790 <_dtoa_r+0x588>)
 800351e:	f007 020f 	and.w	r2, r7, #15
 8003522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003526:	05f8      	lsls	r0, r7, #23
 8003528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800352c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003534:	d516      	bpl.n	8003564 <_dtoa_r+0x35c>
 8003536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800353a:	4b96      	ldr	r3, [pc, #600]	@ (8003794 <_dtoa_r+0x58c>)
 800353c:	2603      	movs	r6, #3
 800353e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003542:	f7fd f8f3 	bl	800072c <__aeabi_ddiv>
 8003546:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800354a:	f004 040f 	and.w	r4, r4, #15
 800354e:	4d91      	ldr	r5, [pc, #580]	@ (8003794 <_dtoa_r+0x58c>)
 8003550:	b954      	cbnz	r4, 8003568 <_dtoa_r+0x360>
 8003552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800355a:	f7fd f8e7 	bl	800072c <__aeabi_ddiv>
 800355e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003562:	e028      	b.n	80035b6 <_dtoa_r+0x3ae>
 8003564:	2602      	movs	r6, #2
 8003566:	e7f2      	b.n	800354e <_dtoa_r+0x346>
 8003568:	07e1      	lsls	r1, r4, #31
 800356a:	d508      	bpl.n	800357e <_dtoa_r+0x376>
 800356c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003574:	f7fc ffb0 	bl	80004d8 <__aeabi_dmul>
 8003578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800357c:	3601      	adds	r6, #1
 800357e:	1064      	asrs	r4, r4, #1
 8003580:	3508      	adds	r5, #8
 8003582:	e7e5      	b.n	8003550 <_dtoa_r+0x348>
 8003584:	f000 80af 	beq.w	80036e6 <_dtoa_r+0x4de>
 8003588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800358c:	427c      	negs	r4, r7
 800358e:	4b80      	ldr	r3, [pc, #512]	@ (8003790 <_dtoa_r+0x588>)
 8003590:	f004 020f 	and.w	r2, r4, #15
 8003594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fc ff9c 	bl	80004d8 <__aeabi_dmul>
 80035a0:	2602      	movs	r6, #2
 80035a2:	2300      	movs	r3, #0
 80035a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80035a8:	4d7a      	ldr	r5, [pc, #488]	@ (8003794 <_dtoa_r+0x58c>)
 80035aa:	1124      	asrs	r4, r4, #4
 80035ac:	2c00      	cmp	r4, #0
 80035ae:	f040 808f 	bne.w	80036d0 <_dtoa_r+0x4c8>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1d3      	bne.n	800355e <_dtoa_r+0x356>
 80035b6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80035ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8094 	beq.w	80036ea <_dtoa_r+0x4e2>
 80035c2:	2200      	movs	r2, #0
 80035c4:	4620      	mov	r0, r4
 80035c6:	4629      	mov	r1, r5
 80035c8:	4b73      	ldr	r3, [pc, #460]	@ (8003798 <_dtoa_r+0x590>)
 80035ca:	f7fd f9f7 	bl	80009bc <__aeabi_dcmplt>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	f000 808b 	beq.w	80036ea <_dtoa_r+0x4e2>
 80035d4:	9b08      	ldr	r3, [sp, #32]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8087 	beq.w	80036ea <_dtoa_r+0x4e2>
 80035dc:	f1bb 0f00 	cmp.w	fp, #0
 80035e0:	dd34      	ble.n	800364c <_dtoa_r+0x444>
 80035e2:	4620      	mov	r0, r4
 80035e4:	2200      	movs	r2, #0
 80035e6:	4629      	mov	r1, r5
 80035e8:	4b6c      	ldr	r3, [pc, #432]	@ (800379c <_dtoa_r+0x594>)
 80035ea:	f7fc ff75 	bl	80004d8 <__aeabi_dmul>
 80035ee:	465c      	mov	r4, fp
 80035f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80035f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80035f8:	3601      	adds	r6, #1
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7fc ff02 	bl	8000404 <__aeabi_i2d>
 8003600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003604:	f7fc ff68 	bl	80004d8 <__aeabi_dmul>
 8003608:	2200      	movs	r2, #0
 800360a:	4b65      	ldr	r3, [pc, #404]	@ (80037a0 <_dtoa_r+0x598>)
 800360c:	f7fc fdae 	bl	800016c <__adddf3>
 8003610:	4605      	mov	r5, r0
 8003612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003616:	2c00      	cmp	r4, #0
 8003618:	d16a      	bne.n	80036f0 <_dtoa_r+0x4e8>
 800361a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800361e:	2200      	movs	r2, #0
 8003620:	4b60      	ldr	r3, [pc, #384]	@ (80037a4 <_dtoa_r+0x59c>)
 8003622:	f7fc fda1 	bl	8000168 <__aeabi_dsub>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800362e:	462a      	mov	r2, r5
 8003630:	4633      	mov	r3, r6
 8003632:	f7fd f9e1 	bl	80009f8 <__aeabi_dcmpgt>
 8003636:	2800      	cmp	r0, #0
 8003638:	f040 8298 	bne.w	8003b6c <_dtoa_r+0x964>
 800363c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003640:	462a      	mov	r2, r5
 8003642:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003646:	f7fd f9b9 	bl	80009bc <__aeabi_dcmplt>
 800364a:	bb38      	cbnz	r0, 800369c <_dtoa_r+0x494>
 800364c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003650:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003654:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003656:	2b00      	cmp	r3, #0
 8003658:	f2c0 8157 	blt.w	800390a <_dtoa_r+0x702>
 800365c:	2f0e      	cmp	r7, #14
 800365e:	f300 8154 	bgt.w	800390a <_dtoa_r+0x702>
 8003662:	4b4b      	ldr	r3, [pc, #300]	@ (8003790 <_dtoa_r+0x588>)
 8003664:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003668:	e9d3 3400 	ldrd	r3, r4, [r3]
 800366c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003670:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003672:	2b00      	cmp	r3, #0
 8003674:	f280 80e5 	bge.w	8003842 <_dtoa_r+0x63a>
 8003678:	9b08      	ldr	r3, [sp, #32]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f300 80e1 	bgt.w	8003842 <_dtoa_r+0x63a>
 8003680:	d10c      	bne.n	800369c <_dtoa_r+0x494>
 8003682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003686:	2200      	movs	r2, #0
 8003688:	4b46      	ldr	r3, [pc, #280]	@ (80037a4 <_dtoa_r+0x59c>)
 800368a:	f7fc ff25 	bl	80004d8 <__aeabi_dmul>
 800368e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003692:	f7fd f9a7 	bl	80009e4 <__aeabi_dcmpge>
 8003696:	2800      	cmp	r0, #0
 8003698:	f000 8266 	beq.w	8003b68 <_dtoa_r+0x960>
 800369c:	2400      	movs	r4, #0
 800369e:	4625      	mov	r5, r4
 80036a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80036a2:	4656      	mov	r6, sl
 80036a4:	ea6f 0803 	mvn.w	r8, r3
 80036a8:	2700      	movs	r7, #0
 80036aa:	4621      	mov	r1, r4
 80036ac:	4648      	mov	r0, r9
 80036ae:	f000 fcbd 	bl	800402c <_Bfree>
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	f000 80bd 	beq.w	8003832 <_dtoa_r+0x62a>
 80036b8:	b12f      	cbz	r7, 80036c6 <_dtoa_r+0x4be>
 80036ba:	42af      	cmp	r7, r5
 80036bc:	d003      	beq.n	80036c6 <_dtoa_r+0x4be>
 80036be:	4639      	mov	r1, r7
 80036c0:	4648      	mov	r0, r9
 80036c2:	f000 fcb3 	bl	800402c <_Bfree>
 80036c6:	4629      	mov	r1, r5
 80036c8:	4648      	mov	r0, r9
 80036ca:	f000 fcaf 	bl	800402c <_Bfree>
 80036ce:	e0b0      	b.n	8003832 <_dtoa_r+0x62a>
 80036d0:	07e2      	lsls	r2, r4, #31
 80036d2:	d505      	bpl.n	80036e0 <_dtoa_r+0x4d8>
 80036d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80036d8:	f7fc fefe 	bl	80004d8 <__aeabi_dmul>
 80036dc:	2301      	movs	r3, #1
 80036de:	3601      	adds	r6, #1
 80036e0:	1064      	asrs	r4, r4, #1
 80036e2:	3508      	adds	r5, #8
 80036e4:	e762      	b.n	80035ac <_dtoa_r+0x3a4>
 80036e6:	2602      	movs	r6, #2
 80036e8:	e765      	b.n	80035b6 <_dtoa_r+0x3ae>
 80036ea:	46b8      	mov	r8, r7
 80036ec:	9c08      	ldr	r4, [sp, #32]
 80036ee:	e784      	b.n	80035fa <_dtoa_r+0x3f2>
 80036f0:	4b27      	ldr	r3, [pc, #156]	@ (8003790 <_dtoa_r+0x588>)
 80036f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80036f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80036fc:	4454      	add	r4, sl
 80036fe:	2900      	cmp	r1, #0
 8003700:	d054      	beq.n	80037ac <_dtoa_r+0x5a4>
 8003702:	2000      	movs	r0, #0
 8003704:	4928      	ldr	r1, [pc, #160]	@ (80037a8 <_dtoa_r+0x5a0>)
 8003706:	f7fd f811 	bl	800072c <__aeabi_ddiv>
 800370a:	4633      	mov	r3, r6
 800370c:	462a      	mov	r2, r5
 800370e:	f7fc fd2b 	bl	8000168 <__aeabi_dsub>
 8003712:	4656      	mov	r6, sl
 8003714:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800371c:	f7fd f98c 	bl	8000a38 <__aeabi_d2iz>
 8003720:	4605      	mov	r5, r0
 8003722:	f7fc fe6f 	bl	8000404 <__aeabi_i2d>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800372e:	f7fc fd1b 	bl	8000168 <__aeabi_dsub>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	3530      	adds	r5, #48	@ 0x30
 8003738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800373c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003740:	f806 5b01 	strb.w	r5, [r6], #1
 8003744:	f7fd f93a 	bl	80009bc <__aeabi_dcmplt>
 8003748:	2800      	cmp	r0, #0
 800374a:	d172      	bne.n	8003832 <_dtoa_r+0x62a>
 800374c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003750:	2000      	movs	r0, #0
 8003752:	4911      	ldr	r1, [pc, #68]	@ (8003798 <_dtoa_r+0x590>)
 8003754:	f7fc fd08 	bl	8000168 <__aeabi_dsub>
 8003758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800375c:	f7fd f92e 	bl	80009bc <__aeabi_dcmplt>
 8003760:	2800      	cmp	r0, #0
 8003762:	f040 80b4 	bne.w	80038ce <_dtoa_r+0x6c6>
 8003766:	42a6      	cmp	r6, r4
 8003768:	f43f af70 	beq.w	800364c <_dtoa_r+0x444>
 800376c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003770:	2200      	movs	r2, #0
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <_dtoa_r+0x594>)
 8003774:	f7fc feb0 	bl	80004d8 <__aeabi_dmul>
 8003778:	2200      	movs	r2, #0
 800377a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800377e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <_dtoa_r+0x594>)
 8003784:	f7fc fea8 	bl	80004d8 <__aeabi_dmul>
 8003788:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800378c:	e7c4      	b.n	8003718 <_dtoa_r+0x510>
 800378e:	bf00      	nop
 8003790:	08005388 	.word	0x08005388
 8003794:	08005360 	.word	0x08005360
 8003798:	3ff00000 	.word	0x3ff00000
 800379c:	40240000 	.word	0x40240000
 80037a0:	401c0000 	.word	0x401c0000
 80037a4:	40140000 	.word	0x40140000
 80037a8:	3fe00000 	.word	0x3fe00000
 80037ac:	4631      	mov	r1, r6
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7fc fe92 	bl	80004d8 <__aeabi_dmul>
 80037b4:	4656      	mov	r6, sl
 80037b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80037ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80037bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037c0:	f7fd f93a 	bl	8000a38 <__aeabi_d2iz>
 80037c4:	4605      	mov	r5, r0
 80037c6:	f7fc fe1d 	bl	8000404 <__aeabi_i2d>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037d2:	f7fc fcc9 	bl	8000168 <__aeabi_dsub>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	3530      	adds	r5, #48	@ 0x30
 80037dc:	f806 5b01 	strb.w	r5, [r6], #1
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	d124      	bne.n	8003836 <_dtoa_r+0x62e>
 80037ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80037f0:	4bae      	ldr	r3, [pc, #696]	@ (8003aac <_dtoa_r+0x8a4>)
 80037f2:	f7fc fcbb 	bl	800016c <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037fe:	f7fd f8fb 	bl	80009f8 <__aeabi_dcmpgt>
 8003802:	2800      	cmp	r0, #0
 8003804:	d163      	bne.n	80038ce <_dtoa_r+0x6c6>
 8003806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800380a:	2000      	movs	r0, #0
 800380c:	49a7      	ldr	r1, [pc, #668]	@ (8003aac <_dtoa_r+0x8a4>)
 800380e:	f7fc fcab 	bl	8000168 <__aeabi_dsub>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800381a:	f7fd f8cf 	bl	80009bc <__aeabi_dcmplt>
 800381e:	2800      	cmp	r0, #0
 8003820:	f43f af14 	beq.w	800364c <_dtoa_r+0x444>
 8003824:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003826:	1e73      	subs	r3, r6, #1
 8003828:	9313      	str	r3, [sp, #76]	@ 0x4c
 800382a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800382e:	2b30      	cmp	r3, #48	@ 0x30
 8003830:	d0f8      	beq.n	8003824 <_dtoa_r+0x61c>
 8003832:	4647      	mov	r7, r8
 8003834:	e03b      	b.n	80038ae <_dtoa_r+0x6a6>
 8003836:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab0 <_dtoa_r+0x8a8>)
 8003838:	f7fc fe4e 	bl	80004d8 <__aeabi_dmul>
 800383c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003840:	e7bc      	b.n	80037bc <_dtoa_r+0x5b4>
 8003842:	4656      	mov	r6, sl
 8003844:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	f7fc ff6c 	bl	800072c <__aeabi_ddiv>
 8003854:	f7fd f8f0 	bl	8000a38 <__aeabi_d2iz>
 8003858:	4680      	mov	r8, r0
 800385a:	f7fc fdd3 	bl	8000404 <__aeabi_i2d>
 800385e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003862:	f7fc fe39 	bl	80004d8 <__aeabi_dmul>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f7fc fc7b 	bl	8000168 <__aeabi_dsub>
 8003872:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003876:	9d08      	ldr	r5, [sp, #32]
 8003878:	f806 4b01 	strb.w	r4, [r6], #1
 800387c:	eba6 040a 	sub.w	r4, r6, sl
 8003880:	42a5      	cmp	r5, r4
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	d133      	bne.n	80038f0 <_dtoa_r+0x6e8>
 8003888:	f7fc fc70 	bl	800016c <__adddf3>
 800388c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003890:	4604      	mov	r4, r0
 8003892:	460d      	mov	r5, r1
 8003894:	f7fd f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8003898:	b9c0      	cbnz	r0, 80038cc <_dtoa_r+0x6c4>
 800389a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7fd f881 	bl	80009a8 <__aeabi_dcmpeq>
 80038a6:	b110      	cbz	r0, 80038ae <_dtoa_r+0x6a6>
 80038a8:	f018 0f01 	tst.w	r8, #1
 80038ac:	d10e      	bne.n	80038cc <_dtoa_r+0x6c4>
 80038ae:	4648      	mov	r0, r9
 80038b0:	9903      	ldr	r1, [sp, #12]
 80038b2:	f000 fbbb 	bl	800402c <_Bfree>
 80038b6:	2300      	movs	r3, #0
 80038b8:	7033      	strb	r3, [r6, #0]
 80038ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80038bc:	3701      	adds	r7, #1
 80038be:	601f      	str	r7, [r3, #0]
 80038c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 824b 	beq.w	8003d5e <_dtoa_r+0xb56>
 80038c8:	601e      	str	r6, [r3, #0]
 80038ca:	e248      	b.n	8003d5e <_dtoa_r+0xb56>
 80038cc:	46b8      	mov	r8, r7
 80038ce:	4633      	mov	r3, r6
 80038d0:	461e      	mov	r6, r3
 80038d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038d6:	2a39      	cmp	r2, #57	@ 0x39
 80038d8:	d106      	bne.n	80038e8 <_dtoa_r+0x6e0>
 80038da:	459a      	cmp	sl, r3
 80038dc:	d1f8      	bne.n	80038d0 <_dtoa_r+0x6c8>
 80038de:	2230      	movs	r2, #48	@ 0x30
 80038e0:	f108 0801 	add.w	r8, r8, #1
 80038e4:	f88a 2000 	strb.w	r2, [sl]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	3201      	adds	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e7a0      	b.n	8003832 <_dtoa_r+0x62a>
 80038f0:	2200      	movs	r2, #0
 80038f2:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab0 <_dtoa_r+0x8a8>)
 80038f4:	f7fc fdf0 	bl	80004d8 <__aeabi_dmul>
 80038f8:	2200      	movs	r2, #0
 80038fa:	2300      	movs	r3, #0
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	f7fd f852 	bl	80009a8 <__aeabi_dcmpeq>
 8003904:	2800      	cmp	r0, #0
 8003906:	d09f      	beq.n	8003848 <_dtoa_r+0x640>
 8003908:	e7d1      	b.n	80038ae <_dtoa_r+0x6a6>
 800390a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800390c:	2a00      	cmp	r2, #0
 800390e:	f000 80ea 	beq.w	8003ae6 <_dtoa_r+0x8de>
 8003912:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003914:	2a01      	cmp	r2, #1
 8003916:	f300 80cd 	bgt.w	8003ab4 <_dtoa_r+0x8ac>
 800391a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800391c:	2a00      	cmp	r2, #0
 800391e:	f000 80c1 	beq.w	8003aa4 <_dtoa_r+0x89c>
 8003922:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003926:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003928:	9e04      	ldr	r6, [sp, #16]
 800392a:	9a04      	ldr	r2, [sp, #16]
 800392c:	2101      	movs	r1, #1
 800392e:	441a      	add	r2, r3
 8003930:	9204      	str	r2, [sp, #16]
 8003932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003934:	4648      	mov	r0, r9
 8003936:	441a      	add	r2, r3
 8003938:	9209      	str	r2, [sp, #36]	@ 0x24
 800393a:	f000 fc2b 	bl	8004194 <__i2b>
 800393e:	4605      	mov	r5, r0
 8003940:	b166      	cbz	r6, 800395c <_dtoa_r+0x754>
 8003942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	dd09      	ble.n	800395c <_dtoa_r+0x754>
 8003948:	42b3      	cmp	r3, r6
 800394a:	bfa8      	it	ge
 800394c:	4633      	movge	r3, r6
 800394e:	9a04      	ldr	r2, [sp, #16]
 8003950:	1af6      	subs	r6, r6, r3
 8003952:	1ad2      	subs	r2, r2, r3
 8003954:	9204      	str	r2, [sp, #16]
 8003956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	9309      	str	r3, [sp, #36]	@ 0x24
 800395c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800395e:	b30b      	cbz	r3, 80039a4 <_dtoa_r+0x79c>
 8003960:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80c6 	beq.w	8003af4 <_dtoa_r+0x8ec>
 8003968:	2c00      	cmp	r4, #0
 800396a:	f000 80c0 	beq.w	8003aee <_dtoa_r+0x8e6>
 800396e:	4629      	mov	r1, r5
 8003970:	4622      	mov	r2, r4
 8003972:	4648      	mov	r0, r9
 8003974:	f000 fcc6 	bl	8004304 <__pow5mult>
 8003978:	9a03      	ldr	r2, [sp, #12]
 800397a:	4601      	mov	r1, r0
 800397c:	4605      	mov	r5, r0
 800397e:	4648      	mov	r0, r9
 8003980:	f000 fc1e 	bl	80041c0 <__multiply>
 8003984:	9903      	ldr	r1, [sp, #12]
 8003986:	4680      	mov	r8, r0
 8003988:	4648      	mov	r0, r9
 800398a:	f000 fb4f 	bl	800402c <_Bfree>
 800398e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003990:	1b1b      	subs	r3, r3, r4
 8003992:	930a      	str	r3, [sp, #40]	@ 0x28
 8003994:	f000 80b1 	beq.w	8003afa <_dtoa_r+0x8f2>
 8003998:	4641      	mov	r1, r8
 800399a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800399c:	4648      	mov	r0, r9
 800399e:	f000 fcb1 	bl	8004304 <__pow5mult>
 80039a2:	9003      	str	r0, [sp, #12]
 80039a4:	2101      	movs	r1, #1
 80039a6:	4648      	mov	r0, r9
 80039a8:	f000 fbf4 	bl	8004194 <__i2b>
 80039ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80039ae:	4604      	mov	r4, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 81d8 	beq.w	8003d66 <_dtoa_r+0xb5e>
 80039b6:	461a      	mov	r2, r3
 80039b8:	4601      	mov	r1, r0
 80039ba:	4648      	mov	r0, r9
 80039bc:	f000 fca2 	bl	8004304 <__pow5mult>
 80039c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80039c2:	4604      	mov	r4, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f300 809f 	bgt.w	8003b08 <_dtoa_r+0x900>
 80039ca:	9b06      	ldr	r3, [sp, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 8097 	bne.w	8003b00 <_dtoa_r+0x8f8>
 80039d2:	9b07      	ldr	r3, [sp, #28]
 80039d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 8093 	bne.w	8003b04 <_dtoa_r+0x8fc>
 80039de:	9b07      	ldr	r3, [sp, #28]
 80039e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	b133      	cbz	r3, 80039f8 <_dtoa_r+0x7f0>
 80039ea:	9b04      	ldr	r3, [sp, #16]
 80039ec:	3301      	adds	r3, #1
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039f2:	3301      	adds	r3, #1
 80039f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80039f6:	2301      	movs	r3, #1
 80039f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80039fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 81b8 	beq.w	8003d72 <_dtoa_r+0xb6a>
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a08:	6918      	ldr	r0, [r3, #16]
 8003a0a:	f000 fb77 	bl	80040fc <__hi0bits>
 8003a0e:	f1c0 0020 	rsb	r0, r0, #32
 8003a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a14:	4418      	add	r0, r3
 8003a16:	f010 001f 	ands.w	r0, r0, #31
 8003a1a:	f000 8082 	beq.w	8003b22 <_dtoa_r+0x91a>
 8003a1e:	f1c0 0320 	rsb	r3, r0, #32
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	dd73      	ble.n	8003b0e <_dtoa_r+0x906>
 8003a26:	9b04      	ldr	r3, [sp, #16]
 8003a28:	f1c0 001c 	rsb	r0, r0, #28
 8003a2c:	4403      	add	r3, r0
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a32:	4406      	add	r6, r0
 8003a34:	4403      	add	r3, r0
 8003a36:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a38:	9b04      	ldr	r3, [sp, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dd05      	ble.n	8003a4a <_dtoa_r+0x842>
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4648      	mov	r0, r9
 8003a42:	9903      	ldr	r1, [sp, #12]
 8003a44:	f000 fcb8 	bl	80043b8 <__lshift>
 8003a48:	9003      	str	r0, [sp, #12]
 8003a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	dd05      	ble.n	8003a5c <_dtoa_r+0x854>
 8003a50:	4621      	mov	r1, r4
 8003a52:	461a      	mov	r2, r3
 8003a54:	4648      	mov	r0, r9
 8003a56:	f000 fcaf 	bl	80043b8 <__lshift>
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d061      	beq.n	8003b26 <_dtoa_r+0x91e>
 8003a62:	4621      	mov	r1, r4
 8003a64:	9803      	ldr	r0, [sp, #12]
 8003a66:	f000 fd13 	bl	8004490 <__mcmp>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	da5b      	bge.n	8003b26 <_dtoa_r+0x91e>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	220a      	movs	r2, #10
 8003a72:	4648      	mov	r0, r9
 8003a74:	9903      	ldr	r1, [sp, #12]
 8003a76:	f000 fafb 	bl	8004070 <__multadd>
 8003a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a7c:	f107 38ff 	add.w	r8, r7, #4294967295
 8003a80:	9003      	str	r0, [sp, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8177 	beq.w	8003d76 <_dtoa_r+0xb6e>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	220a      	movs	r2, #10
 8003a8e:	4648      	mov	r0, r9
 8003a90:	f000 faee 	bl	8004070 <__multadd>
 8003a94:	f1bb 0f00 	cmp.w	fp, #0
 8003a98:	4605      	mov	r5, r0
 8003a9a:	dc6f      	bgt.n	8003b7c <_dtoa_r+0x974>
 8003a9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	dc49      	bgt.n	8003b36 <_dtoa_r+0x92e>
 8003aa2:	e06b      	b.n	8003b7c <_dtoa_r+0x974>
 8003aa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003aa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003aaa:	e73c      	b.n	8003926 <_dtoa_r+0x71e>
 8003aac:	3fe00000 	.word	0x3fe00000
 8003ab0:	40240000 	.word	0x40240000
 8003ab4:	9b08      	ldr	r3, [sp, #32]
 8003ab6:	1e5c      	subs	r4, r3, #1
 8003ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	db09      	blt.n	8003ad2 <_dtoa_r+0x8ca>
 8003abe:	1b1c      	subs	r4, r3, r4
 8003ac0:	9b08      	ldr	r3, [sp, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f6bf af30 	bge.w	8003928 <_dtoa_r+0x720>
 8003ac8:	9b04      	ldr	r3, [sp, #16]
 8003aca:	9a08      	ldr	r2, [sp, #32]
 8003acc:	1a9e      	subs	r6, r3, r2
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e72b      	b.n	800392a <_dtoa_r+0x722>
 8003ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ad4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ad6:	1ae3      	subs	r3, r4, r3
 8003ad8:	441a      	add	r2, r3
 8003ada:	940a      	str	r4, [sp, #40]	@ 0x28
 8003adc:	9e04      	ldr	r6, [sp, #16]
 8003ade:	2400      	movs	r4, #0
 8003ae0:	9b08      	ldr	r3, [sp, #32]
 8003ae2:	920e      	str	r2, [sp, #56]	@ 0x38
 8003ae4:	e721      	b.n	800392a <_dtoa_r+0x722>
 8003ae6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003ae8:	9e04      	ldr	r6, [sp, #16]
 8003aea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003aec:	e728      	b.n	8003940 <_dtoa_r+0x738>
 8003aee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003af2:	e751      	b.n	8003998 <_dtoa_r+0x790>
 8003af4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003af6:	9903      	ldr	r1, [sp, #12]
 8003af8:	e750      	b.n	800399c <_dtoa_r+0x794>
 8003afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003afe:	e751      	b.n	80039a4 <_dtoa_r+0x79c>
 8003b00:	2300      	movs	r3, #0
 8003b02:	e779      	b.n	80039f8 <_dtoa_r+0x7f0>
 8003b04:	9b06      	ldr	r3, [sp, #24]
 8003b06:	e777      	b.n	80039f8 <_dtoa_r+0x7f0>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b0c:	e779      	b.n	8003a02 <_dtoa_r+0x7fa>
 8003b0e:	d093      	beq.n	8003a38 <_dtoa_r+0x830>
 8003b10:	9a04      	ldr	r2, [sp, #16]
 8003b12:	331c      	adds	r3, #28
 8003b14:	441a      	add	r2, r3
 8003b16:	9204      	str	r2, [sp, #16]
 8003b18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b1a:	441e      	add	r6, r3
 8003b1c:	441a      	add	r2, r3
 8003b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b20:	e78a      	b.n	8003a38 <_dtoa_r+0x830>
 8003b22:	4603      	mov	r3, r0
 8003b24:	e7f4      	b.n	8003b10 <_dtoa_r+0x908>
 8003b26:	9b08      	ldr	r3, [sp, #32]
 8003b28:	46b8      	mov	r8, r7
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	dc20      	bgt.n	8003b70 <_dtoa_r+0x968>
 8003b2e:	469b      	mov	fp, r3
 8003b30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	dd1e      	ble.n	8003b74 <_dtoa_r+0x96c>
 8003b36:	f1bb 0f00 	cmp.w	fp, #0
 8003b3a:	f47f adb1 	bne.w	80036a0 <_dtoa_r+0x498>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	465b      	mov	r3, fp
 8003b42:	2205      	movs	r2, #5
 8003b44:	4648      	mov	r0, r9
 8003b46:	f000 fa93 	bl	8004070 <__multadd>
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	9803      	ldr	r0, [sp, #12]
 8003b50:	f000 fc9e 	bl	8004490 <__mcmp>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f77f ada3 	ble.w	80036a0 <_dtoa_r+0x498>
 8003b5a:	4656      	mov	r6, sl
 8003b5c:	2331      	movs	r3, #49	@ 0x31
 8003b5e:	f108 0801 	add.w	r8, r8, #1
 8003b62:	f806 3b01 	strb.w	r3, [r6], #1
 8003b66:	e59f      	b.n	80036a8 <_dtoa_r+0x4a0>
 8003b68:	46b8      	mov	r8, r7
 8003b6a:	9c08      	ldr	r4, [sp, #32]
 8003b6c:	4625      	mov	r5, r4
 8003b6e:	e7f4      	b.n	8003b5a <_dtoa_r+0x952>
 8003b70:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003b74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8101 	beq.w	8003d7e <_dtoa_r+0xb76>
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	dd05      	ble.n	8003b8c <_dtoa_r+0x984>
 8003b80:	4629      	mov	r1, r5
 8003b82:	4632      	mov	r2, r6
 8003b84:	4648      	mov	r0, r9
 8003b86:	f000 fc17 	bl	80043b8 <__lshift>
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d05c      	beq.n	8003c4c <_dtoa_r+0xa44>
 8003b92:	4648      	mov	r0, r9
 8003b94:	6869      	ldr	r1, [r5, #4]
 8003b96:	f000 fa09 	bl	8003fac <_Balloc>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	b928      	cbnz	r0, 8003baa <_dtoa_r+0x9a2>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003ba4:	4b80      	ldr	r3, [pc, #512]	@ (8003da8 <_dtoa_r+0xba0>)
 8003ba6:	f7ff bb43 	b.w	8003230 <_dtoa_r+0x28>
 8003baa:	692a      	ldr	r2, [r5, #16]
 8003bac:	f105 010c 	add.w	r1, r5, #12
 8003bb0:	3202      	adds	r2, #2
 8003bb2:	0092      	lsls	r2, r2, #2
 8003bb4:	300c      	adds	r0, #12
 8003bb6:	f000 ff9d 	bl	8004af4 <memcpy>
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4648      	mov	r0, r9
 8003bc0:	f000 fbfa 	bl	80043b8 <__lshift>
 8003bc4:	462f      	mov	r7, r5
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	f10a 0301 	add.w	r3, sl, #1
 8003bcc:	9304      	str	r3, [sp, #16]
 8003bce:	eb0a 030b 	add.w	r3, sl, fp
 8003bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bd4:	9b06      	ldr	r3, [sp, #24]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	4621      	mov	r1, r4
 8003be0:	9803      	ldr	r0, [sp, #12]
 8003be2:	f103 3bff 	add.w	fp, r3, #4294967295
 8003be6:	f7ff fa86 	bl	80030f6 <quorem>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4639      	mov	r1, r7
 8003bee:	3330      	adds	r3, #48	@ 0x30
 8003bf0:	9006      	str	r0, [sp, #24]
 8003bf2:	9803      	ldr	r0, [sp, #12]
 8003bf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bf6:	f000 fc4b 	bl	8004490 <__mcmp>
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	9008      	str	r0, [sp, #32]
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4648      	mov	r0, r9
 8003c02:	f000 fc61 	bl	80044c8 <__mdiff>
 8003c06:	68c2      	ldr	r2, [r0, #12]
 8003c08:	4606      	mov	r6, r0
 8003c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c0c:	bb02      	cbnz	r2, 8003c50 <_dtoa_r+0xa48>
 8003c0e:	4601      	mov	r1, r0
 8003c10:	9803      	ldr	r0, [sp, #12]
 8003c12:	f000 fc3d 	bl	8004490 <__mcmp>
 8003c16:	4602      	mov	r2, r0
 8003c18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4648      	mov	r0, r9
 8003c1e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8003c22:	f000 fa03 	bl	800402c <_Bfree>
 8003c26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003c2a:	9e04      	ldr	r6, [sp, #16]
 8003c2c:	ea42 0103 	orr.w	r1, r2, r3
 8003c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c32:	4319      	orrs	r1, r3
 8003c34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c36:	d10d      	bne.n	8003c54 <_dtoa_r+0xa4c>
 8003c38:	2b39      	cmp	r3, #57	@ 0x39
 8003c3a:	d027      	beq.n	8003c8c <_dtoa_r+0xa84>
 8003c3c:	9a08      	ldr	r2, [sp, #32]
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	dd01      	ble.n	8003c46 <_dtoa_r+0xa3e>
 8003c42:	9b06      	ldr	r3, [sp, #24]
 8003c44:	3331      	adds	r3, #49	@ 0x31
 8003c46:	f88b 3000 	strb.w	r3, [fp]
 8003c4a:	e52e      	b.n	80036aa <_dtoa_r+0x4a2>
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	e7b9      	b.n	8003bc4 <_dtoa_r+0x9bc>
 8003c50:	2201      	movs	r2, #1
 8003c52:	e7e2      	b.n	8003c1a <_dtoa_r+0xa12>
 8003c54:	9908      	ldr	r1, [sp, #32]
 8003c56:	2900      	cmp	r1, #0
 8003c58:	db04      	blt.n	8003c64 <_dtoa_r+0xa5c>
 8003c5a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8003c5c:	4301      	orrs	r1, r0
 8003c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c60:	4301      	orrs	r1, r0
 8003c62:	d120      	bne.n	8003ca6 <_dtoa_r+0xa9e>
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	ddee      	ble.n	8003c46 <_dtoa_r+0xa3e>
 8003c68:	2201      	movs	r2, #1
 8003c6a:	9903      	ldr	r1, [sp, #12]
 8003c6c:	4648      	mov	r0, r9
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	f000 fba2 	bl	80043b8 <__lshift>
 8003c74:	4621      	mov	r1, r4
 8003c76:	9003      	str	r0, [sp, #12]
 8003c78:	f000 fc0a 	bl	8004490 <__mcmp>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	9b04      	ldr	r3, [sp, #16]
 8003c80:	dc02      	bgt.n	8003c88 <_dtoa_r+0xa80>
 8003c82:	d1e0      	bne.n	8003c46 <_dtoa_r+0xa3e>
 8003c84:	07da      	lsls	r2, r3, #31
 8003c86:	d5de      	bpl.n	8003c46 <_dtoa_r+0xa3e>
 8003c88:	2b39      	cmp	r3, #57	@ 0x39
 8003c8a:	d1da      	bne.n	8003c42 <_dtoa_r+0xa3a>
 8003c8c:	2339      	movs	r3, #57	@ 0x39
 8003c8e:	f88b 3000 	strb.w	r3, [fp]
 8003c92:	4633      	mov	r3, r6
 8003c94:	461e      	mov	r6, r3
 8003c96:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2a39      	cmp	r2, #57	@ 0x39
 8003c9e:	d04e      	beq.n	8003d3e <_dtoa_r+0xb36>
 8003ca0:	3201      	adds	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e501      	b.n	80036aa <_dtoa_r+0x4a2>
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	dd03      	ble.n	8003cb2 <_dtoa_r+0xaaa>
 8003caa:	2b39      	cmp	r3, #57	@ 0x39
 8003cac:	d0ee      	beq.n	8003c8c <_dtoa_r+0xa84>
 8003cae:	3301      	adds	r3, #1
 8003cb0:	e7c9      	b.n	8003c46 <_dtoa_r+0xa3e>
 8003cb2:	9a04      	ldr	r2, [sp, #16]
 8003cb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003cb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003cba:	428a      	cmp	r2, r1
 8003cbc:	d028      	beq.n	8003d10 <_dtoa_r+0xb08>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	9903      	ldr	r1, [sp, #12]
 8003cc4:	4648      	mov	r0, r9
 8003cc6:	f000 f9d3 	bl	8004070 <__multadd>
 8003cca:	42af      	cmp	r7, r5
 8003ccc:	9003      	str	r0, [sp, #12]
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f04f 020a 	mov.w	r2, #10
 8003cd6:	4639      	mov	r1, r7
 8003cd8:	4648      	mov	r0, r9
 8003cda:	d107      	bne.n	8003cec <_dtoa_r+0xae4>
 8003cdc:	f000 f9c8 	bl	8004070 <__multadd>
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	9b04      	ldr	r3, [sp, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	9304      	str	r3, [sp, #16]
 8003cea:	e777      	b.n	8003bdc <_dtoa_r+0x9d4>
 8003cec:	f000 f9c0 	bl	8004070 <__multadd>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	220a      	movs	r2, #10
 8003cf8:	4648      	mov	r0, r9
 8003cfa:	f000 f9b9 	bl	8004070 <__multadd>
 8003cfe:	4605      	mov	r5, r0
 8003d00:	e7f0      	b.n	8003ce4 <_dtoa_r+0xadc>
 8003d02:	f1bb 0f00 	cmp.w	fp, #0
 8003d06:	bfcc      	ite	gt
 8003d08:	465e      	movgt	r6, fp
 8003d0a:	2601      	movle	r6, #1
 8003d0c:	2700      	movs	r7, #0
 8003d0e:	4456      	add	r6, sl
 8003d10:	2201      	movs	r2, #1
 8003d12:	9903      	ldr	r1, [sp, #12]
 8003d14:	4648      	mov	r0, r9
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	f000 fb4e 	bl	80043b8 <__lshift>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	9003      	str	r0, [sp, #12]
 8003d20:	f000 fbb6 	bl	8004490 <__mcmp>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	dcb4      	bgt.n	8003c92 <_dtoa_r+0xa8a>
 8003d28:	d102      	bne.n	8003d30 <_dtoa_r+0xb28>
 8003d2a:	9b04      	ldr	r3, [sp, #16]
 8003d2c:	07db      	lsls	r3, r3, #31
 8003d2e:	d4b0      	bmi.n	8003c92 <_dtoa_r+0xa8a>
 8003d30:	4633      	mov	r3, r6
 8003d32:	461e      	mov	r6, r3
 8003d34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d38:	2a30      	cmp	r2, #48	@ 0x30
 8003d3a:	d0fa      	beq.n	8003d32 <_dtoa_r+0xb2a>
 8003d3c:	e4b5      	b.n	80036aa <_dtoa_r+0x4a2>
 8003d3e:	459a      	cmp	sl, r3
 8003d40:	d1a8      	bne.n	8003c94 <_dtoa_r+0xa8c>
 8003d42:	2331      	movs	r3, #49	@ 0x31
 8003d44:	f108 0801 	add.w	r8, r8, #1
 8003d48:	f88a 3000 	strb.w	r3, [sl]
 8003d4c:	e4ad      	b.n	80036aa <_dtoa_r+0x4a2>
 8003d4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003dac <_dtoa_r+0xba4>
 8003d54:	b11b      	cbz	r3, 8003d5e <_dtoa_r+0xb56>
 8003d56:	f10a 0308 	add.w	r3, sl, #8
 8003d5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4650      	mov	r0, sl
 8003d60:	b017      	add	sp, #92	@ 0x5c
 8003d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f77f ae2e 	ble.w	80039ca <_dtoa_r+0x7c2>
 8003d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d72:	2001      	movs	r0, #1
 8003d74:	e64d      	b.n	8003a12 <_dtoa_r+0x80a>
 8003d76:	f1bb 0f00 	cmp.w	fp, #0
 8003d7a:	f77f aed9 	ble.w	8003b30 <_dtoa_r+0x928>
 8003d7e:	4656      	mov	r6, sl
 8003d80:	4621      	mov	r1, r4
 8003d82:	9803      	ldr	r0, [sp, #12]
 8003d84:	f7ff f9b7 	bl	80030f6 <quorem>
 8003d88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8003d90:	eba6 020a 	sub.w	r2, r6, sl
 8003d94:	4593      	cmp	fp, r2
 8003d96:	ddb4      	ble.n	8003d02 <_dtoa_r+0xafa>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	220a      	movs	r2, #10
 8003d9c:	4648      	mov	r0, r9
 8003d9e:	9903      	ldr	r1, [sp, #12]
 8003da0:	f000 f966 	bl	8004070 <__multadd>
 8003da4:	9003      	str	r0, [sp, #12]
 8003da6:	e7eb      	b.n	8003d80 <_dtoa_r+0xb78>
 8003da8:	08005292 	.word	0x08005292
 8003dac:	08005216 	.word	0x08005216

08003db0 <_free_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4605      	mov	r5, r0
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d040      	beq.n	8003e3a <_free_r+0x8a>
 8003db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dbc:	1f0c      	subs	r4, r1, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bfb8      	it	lt
 8003dc2:	18e4      	addlt	r4, r4, r3
 8003dc4:	f000 f8e6 	bl	8003f94 <__malloc_lock>
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e3c <_free_r+0x8c>)
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	b933      	cbnz	r3, 8003ddc <_free_r+0x2c>
 8003dce:	6063      	str	r3, [r4, #4]
 8003dd0:	6014      	str	r4, [r2, #0]
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd8:	f000 b8e2 	b.w	8003fa0 <__malloc_unlock>
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d908      	bls.n	8003df2 <_free_r+0x42>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	1821      	adds	r1, r4, r0
 8003de4:	428b      	cmp	r3, r1
 8003de6:	bf01      	itttt	eq
 8003de8:	6819      	ldreq	r1, [r3, #0]
 8003dea:	685b      	ldreq	r3, [r3, #4]
 8003dec:	1809      	addeq	r1, r1, r0
 8003dee:	6021      	streq	r1, [r4, #0]
 8003df0:	e7ed      	b.n	8003dce <_free_r+0x1e>
 8003df2:	461a      	mov	r2, r3
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b10b      	cbz	r3, 8003dfc <_free_r+0x4c>
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d9fa      	bls.n	8003df2 <_free_r+0x42>
 8003dfc:	6811      	ldr	r1, [r2, #0]
 8003dfe:	1850      	adds	r0, r2, r1
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d10b      	bne.n	8003e1c <_free_r+0x6c>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	4401      	add	r1, r0
 8003e08:	1850      	adds	r0, r2, r1
 8003e0a:	4283      	cmp	r3, r0
 8003e0c:	6011      	str	r1, [r2, #0]
 8003e0e:	d1e0      	bne.n	8003dd2 <_free_r+0x22>
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4408      	add	r0, r1
 8003e16:	6010      	str	r0, [r2, #0]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	e7da      	b.n	8003dd2 <_free_r+0x22>
 8003e1c:	d902      	bls.n	8003e24 <_free_r+0x74>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	e7d6      	b.n	8003dd2 <_free_r+0x22>
 8003e24:	6820      	ldr	r0, [r4, #0]
 8003e26:	1821      	adds	r1, r4, r0
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	bf01      	itttt	eq
 8003e2c:	6819      	ldreq	r1, [r3, #0]
 8003e2e:	685b      	ldreq	r3, [r3, #4]
 8003e30:	1809      	addeq	r1, r1, r0
 8003e32:	6021      	streq	r1, [r4, #0]
 8003e34:	6063      	str	r3, [r4, #4]
 8003e36:	6054      	str	r4, [r2, #4]
 8003e38:	e7cb      	b.n	8003dd2 <_free_r+0x22>
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	20000388 	.word	0x20000388

08003e40 <malloc>:
 8003e40:	4b02      	ldr	r3, [pc, #8]	@ (8003e4c <malloc+0xc>)
 8003e42:	4601      	mov	r1, r0
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	f000 b825 	b.w	8003e94 <_malloc_r>
 8003e4a:	bf00      	nop
 8003e4c:	20000018 	.word	0x20000018

08003e50 <sbrk_aligned>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4e0f      	ldr	r6, [pc, #60]	@ (8003e90 <sbrk_aligned+0x40>)
 8003e54:	460c      	mov	r4, r1
 8003e56:	6831      	ldr	r1, [r6, #0]
 8003e58:	4605      	mov	r5, r0
 8003e5a:	b911      	cbnz	r1, 8003e62 <sbrk_aligned+0x12>
 8003e5c:	f000 fe3a 	bl	8004ad4 <_sbrk_r>
 8003e60:	6030      	str	r0, [r6, #0]
 8003e62:	4621      	mov	r1, r4
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 fe35 	bl	8004ad4 <_sbrk_r>
 8003e6a:	1c43      	adds	r3, r0, #1
 8003e6c:	d103      	bne.n	8003e76 <sbrk_aligned+0x26>
 8003e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e72:	4620      	mov	r0, r4
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	1cc4      	adds	r4, r0, #3
 8003e78:	f024 0403 	bic.w	r4, r4, #3
 8003e7c:	42a0      	cmp	r0, r4
 8003e7e:	d0f8      	beq.n	8003e72 <sbrk_aligned+0x22>
 8003e80:	1a21      	subs	r1, r4, r0
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 fe26 	bl	8004ad4 <_sbrk_r>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d1f2      	bne.n	8003e72 <sbrk_aligned+0x22>
 8003e8c:	e7ef      	b.n	8003e6e <sbrk_aligned+0x1e>
 8003e8e:	bf00      	nop
 8003e90:	20000384 	.word	0x20000384

08003e94 <_malloc_r>:
 8003e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e98:	1ccd      	adds	r5, r1, #3
 8003e9a:	f025 0503 	bic.w	r5, r5, #3
 8003e9e:	3508      	adds	r5, #8
 8003ea0:	2d0c      	cmp	r5, #12
 8003ea2:	bf38      	it	cc
 8003ea4:	250c      	movcc	r5, #12
 8003ea6:	2d00      	cmp	r5, #0
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	db01      	blt.n	8003eb0 <_malloc_r+0x1c>
 8003eac:	42a9      	cmp	r1, r5
 8003eae:	d904      	bls.n	8003eba <_malloc_r+0x26>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	6033      	str	r3, [r6, #0]
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f90 <_malloc_r+0xfc>
 8003ebe:	f000 f869 	bl	8003f94 <__malloc_lock>
 8003ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec6:	461c      	mov	r4, r3
 8003ec8:	bb44      	cbnz	r4, 8003f1c <_malloc_r+0x88>
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f7ff ffbf 	bl	8003e50 <sbrk_aligned>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	d158      	bne.n	8003f8a <_malloc_r+0xf6>
 8003ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8003edc:	4627      	mov	r7, r4
 8003ede:	2f00      	cmp	r7, #0
 8003ee0:	d143      	bne.n	8003f6a <_malloc_r+0xd6>
 8003ee2:	2c00      	cmp	r4, #0
 8003ee4:	d04b      	beq.n	8003f7e <_malloc_r+0xea>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	4639      	mov	r1, r7
 8003eea:	4630      	mov	r0, r6
 8003eec:	eb04 0903 	add.w	r9, r4, r3
 8003ef0:	f000 fdf0 	bl	8004ad4 <_sbrk_r>
 8003ef4:	4581      	cmp	r9, r0
 8003ef6:	d142      	bne.n	8003f7e <_malloc_r+0xea>
 8003ef8:	6821      	ldr	r1, [r4, #0]
 8003efa:	4630      	mov	r0, r6
 8003efc:	1a6d      	subs	r5, r5, r1
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7ff ffa6 	bl	8003e50 <sbrk_aligned>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d03a      	beq.n	8003f7e <_malloc_r+0xea>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	442b      	add	r3, r5
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	bb62      	cbnz	r2, 8003f70 <_malloc_r+0xdc>
 8003f16:	f8c8 7000 	str.w	r7, [r8]
 8003f1a:	e00f      	b.n	8003f3c <_malloc_r+0xa8>
 8003f1c:	6822      	ldr	r2, [r4, #0]
 8003f1e:	1b52      	subs	r2, r2, r5
 8003f20:	d420      	bmi.n	8003f64 <_malloc_r+0xd0>
 8003f22:	2a0b      	cmp	r2, #11
 8003f24:	d917      	bls.n	8003f56 <_malloc_r+0xc2>
 8003f26:	1961      	adds	r1, r4, r5
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	6025      	str	r5, [r4, #0]
 8003f2c:	bf18      	it	ne
 8003f2e:	6059      	strne	r1, [r3, #4]
 8003f30:	6863      	ldr	r3, [r4, #4]
 8003f32:	bf08      	it	eq
 8003f34:	f8c8 1000 	streq.w	r1, [r8]
 8003f38:	5162      	str	r2, [r4, r5]
 8003f3a:	604b      	str	r3, [r1, #4]
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 f82f 	bl	8003fa0 <__malloc_unlock>
 8003f42:	f104 000b 	add.w	r0, r4, #11
 8003f46:	1d23      	adds	r3, r4, #4
 8003f48:	f020 0007 	bic.w	r0, r0, #7
 8003f4c:	1ac2      	subs	r2, r0, r3
 8003f4e:	bf1c      	itt	ne
 8003f50:	1a1b      	subne	r3, r3, r0
 8003f52:	50a3      	strne	r3, [r4, r2]
 8003f54:	e7af      	b.n	8003eb6 <_malloc_r+0x22>
 8003f56:	6862      	ldr	r2, [r4, #4]
 8003f58:	42a3      	cmp	r3, r4
 8003f5a:	bf0c      	ite	eq
 8003f5c:	f8c8 2000 	streq.w	r2, [r8]
 8003f60:	605a      	strne	r2, [r3, #4]
 8003f62:	e7eb      	b.n	8003f3c <_malloc_r+0xa8>
 8003f64:	4623      	mov	r3, r4
 8003f66:	6864      	ldr	r4, [r4, #4]
 8003f68:	e7ae      	b.n	8003ec8 <_malloc_r+0x34>
 8003f6a:	463c      	mov	r4, r7
 8003f6c:	687f      	ldr	r7, [r7, #4]
 8003f6e:	e7b6      	b.n	8003ede <_malloc_r+0x4a>
 8003f70:	461a      	mov	r2, r3
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	d1fb      	bne.n	8003f70 <_malloc_r+0xdc>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6053      	str	r3, [r2, #4]
 8003f7c:	e7de      	b.n	8003f3c <_malloc_r+0xa8>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	4630      	mov	r0, r6
 8003f82:	6033      	str	r3, [r6, #0]
 8003f84:	f000 f80c 	bl	8003fa0 <__malloc_unlock>
 8003f88:	e794      	b.n	8003eb4 <_malloc_r+0x20>
 8003f8a:	6005      	str	r5, [r0, #0]
 8003f8c:	e7d6      	b.n	8003f3c <_malloc_r+0xa8>
 8003f8e:	bf00      	nop
 8003f90:	20000388 	.word	0x20000388

08003f94 <__malloc_lock>:
 8003f94:	4801      	ldr	r0, [pc, #4]	@ (8003f9c <__malloc_lock+0x8>)
 8003f96:	f7ff b89e 	b.w	80030d6 <__retarget_lock_acquire_recursive>
 8003f9a:	bf00      	nop
 8003f9c:	20000380 	.word	0x20000380

08003fa0 <__malloc_unlock>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	@ (8003fa8 <__malloc_unlock+0x8>)
 8003fa2:	f7ff b899 	b.w	80030d8 <__retarget_lock_release_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	20000380 	.word	0x20000380

08003fac <_Balloc>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	69c6      	ldr	r6, [r0, #28]
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	b976      	cbnz	r6, 8003fd4 <_Balloc+0x28>
 8003fb6:	2010      	movs	r0, #16
 8003fb8:	f7ff ff42 	bl	8003e40 <malloc>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	61e0      	str	r0, [r4, #28]
 8003fc0:	b920      	cbnz	r0, 8003fcc <_Balloc+0x20>
 8003fc2:	216b      	movs	r1, #107	@ 0x6b
 8003fc4:	4b17      	ldr	r3, [pc, #92]	@ (8004024 <_Balloc+0x78>)
 8003fc6:	4818      	ldr	r0, [pc, #96]	@ (8004028 <_Balloc+0x7c>)
 8003fc8:	f000 fda2 	bl	8004b10 <__assert_func>
 8003fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fd0:	6006      	str	r6, [r0, #0]
 8003fd2:	60c6      	str	r6, [r0, #12]
 8003fd4:	69e6      	ldr	r6, [r4, #28]
 8003fd6:	68f3      	ldr	r3, [r6, #12]
 8003fd8:	b183      	cbz	r3, 8003ffc <_Balloc+0x50>
 8003fda:	69e3      	ldr	r3, [r4, #28]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003fe2:	b9b8      	cbnz	r0, 8004014 <_Balloc+0x68>
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8003fea:	1d72      	adds	r2, r6, #5
 8003fec:	4620      	mov	r0, r4
 8003fee:	0092      	lsls	r2, r2, #2
 8003ff0:	f000 fdac 	bl	8004b4c <_calloc_r>
 8003ff4:	b160      	cbz	r0, 8004010 <_Balloc+0x64>
 8003ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ffa:	e00e      	b.n	800401a <_Balloc+0x6e>
 8003ffc:	2221      	movs	r2, #33	@ 0x21
 8003ffe:	2104      	movs	r1, #4
 8004000:	4620      	mov	r0, r4
 8004002:	f000 fda3 	bl	8004b4c <_calloc_r>
 8004006:	69e3      	ldr	r3, [r4, #28]
 8004008:	60f0      	str	r0, [r6, #12]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e4      	bne.n	8003fda <_Balloc+0x2e>
 8004010:	2000      	movs	r0, #0
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800401a:	2300      	movs	r3, #0
 800401c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004020:	e7f7      	b.n	8004012 <_Balloc+0x66>
 8004022:	bf00      	nop
 8004024:	08005223 	.word	0x08005223
 8004028:	080052a3 	.word	0x080052a3

0800402c <_Bfree>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	69c6      	ldr	r6, [r0, #28]
 8004030:	4605      	mov	r5, r0
 8004032:	460c      	mov	r4, r1
 8004034:	b976      	cbnz	r6, 8004054 <_Bfree+0x28>
 8004036:	2010      	movs	r0, #16
 8004038:	f7ff ff02 	bl	8003e40 <malloc>
 800403c:	4602      	mov	r2, r0
 800403e:	61e8      	str	r0, [r5, #28]
 8004040:	b920      	cbnz	r0, 800404c <_Bfree+0x20>
 8004042:	218f      	movs	r1, #143	@ 0x8f
 8004044:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <_Bfree+0x3c>)
 8004046:	4809      	ldr	r0, [pc, #36]	@ (800406c <_Bfree+0x40>)
 8004048:	f000 fd62 	bl	8004b10 <__assert_func>
 800404c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004050:	6006      	str	r6, [r0, #0]
 8004052:	60c6      	str	r6, [r0, #12]
 8004054:	b13c      	cbz	r4, 8004066 <_Bfree+0x3a>
 8004056:	69eb      	ldr	r3, [r5, #28]
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004060:	6021      	str	r1, [r4, #0]
 8004062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	08005223 	.word	0x08005223
 800406c:	080052a3 	.word	0x080052a3

08004070 <__multadd>:
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	4607      	mov	r7, r0
 8004076:	460c      	mov	r4, r1
 8004078:	461e      	mov	r6, r3
 800407a:	2000      	movs	r0, #0
 800407c:	690d      	ldr	r5, [r1, #16]
 800407e:	f101 0c14 	add.w	ip, r1, #20
 8004082:	f8dc 3000 	ldr.w	r3, [ip]
 8004086:	3001      	adds	r0, #1
 8004088:	b299      	uxth	r1, r3
 800408a:	fb02 6101 	mla	r1, r2, r1, r6
 800408e:	0c1e      	lsrs	r6, r3, #16
 8004090:	0c0b      	lsrs	r3, r1, #16
 8004092:	fb02 3306 	mla	r3, r2, r6, r3
 8004096:	b289      	uxth	r1, r1
 8004098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800409c:	4285      	cmp	r5, r0
 800409e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80040a2:	f84c 1b04 	str.w	r1, [ip], #4
 80040a6:	dcec      	bgt.n	8004082 <__multadd+0x12>
 80040a8:	b30e      	cbz	r6, 80040ee <__multadd+0x7e>
 80040aa:	68a3      	ldr	r3, [r4, #8]
 80040ac:	42ab      	cmp	r3, r5
 80040ae:	dc19      	bgt.n	80040e4 <__multadd+0x74>
 80040b0:	6861      	ldr	r1, [r4, #4]
 80040b2:	4638      	mov	r0, r7
 80040b4:	3101      	adds	r1, #1
 80040b6:	f7ff ff79 	bl	8003fac <_Balloc>
 80040ba:	4680      	mov	r8, r0
 80040bc:	b928      	cbnz	r0, 80040ca <__multadd+0x5a>
 80040be:	4602      	mov	r2, r0
 80040c0:	21ba      	movs	r1, #186	@ 0xba
 80040c2:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <__multadd+0x84>)
 80040c4:	480c      	ldr	r0, [pc, #48]	@ (80040f8 <__multadd+0x88>)
 80040c6:	f000 fd23 	bl	8004b10 <__assert_func>
 80040ca:	6922      	ldr	r2, [r4, #16]
 80040cc:	f104 010c 	add.w	r1, r4, #12
 80040d0:	3202      	adds	r2, #2
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	300c      	adds	r0, #12
 80040d6:	f000 fd0d 	bl	8004af4 <memcpy>
 80040da:	4621      	mov	r1, r4
 80040dc:	4638      	mov	r0, r7
 80040de:	f7ff ffa5 	bl	800402c <_Bfree>
 80040e2:	4644      	mov	r4, r8
 80040e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040e8:	3501      	adds	r5, #1
 80040ea:	615e      	str	r6, [r3, #20]
 80040ec:	6125      	str	r5, [r4, #16]
 80040ee:	4620      	mov	r0, r4
 80040f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f4:	08005292 	.word	0x08005292
 80040f8:	080052a3 	.word	0x080052a3

080040fc <__hi0bits>:
 80040fc:	4603      	mov	r3, r0
 80040fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004102:	bf3a      	itte	cc
 8004104:	0403      	lslcc	r3, r0, #16
 8004106:	2010      	movcc	r0, #16
 8004108:	2000      	movcs	r0, #0
 800410a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800410e:	bf3c      	itt	cc
 8004110:	021b      	lslcc	r3, r3, #8
 8004112:	3008      	addcc	r0, #8
 8004114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004118:	bf3c      	itt	cc
 800411a:	011b      	lslcc	r3, r3, #4
 800411c:	3004      	addcc	r0, #4
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004122:	bf3c      	itt	cc
 8004124:	009b      	lslcc	r3, r3, #2
 8004126:	3002      	addcc	r0, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	db05      	blt.n	8004138 <__hi0bits+0x3c>
 800412c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004130:	f100 0001 	add.w	r0, r0, #1
 8004134:	bf08      	it	eq
 8004136:	2020      	moveq	r0, #32
 8004138:	4770      	bx	lr

0800413a <__lo0bits>:
 800413a:	6803      	ldr	r3, [r0, #0]
 800413c:	4602      	mov	r2, r0
 800413e:	f013 0007 	ands.w	r0, r3, #7
 8004142:	d00b      	beq.n	800415c <__lo0bits+0x22>
 8004144:	07d9      	lsls	r1, r3, #31
 8004146:	d421      	bmi.n	800418c <__lo0bits+0x52>
 8004148:	0798      	lsls	r0, r3, #30
 800414a:	bf49      	itett	mi
 800414c:	085b      	lsrmi	r3, r3, #1
 800414e:	089b      	lsrpl	r3, r3, #2
 8004150:	2001      	movmi	r0, #1
 8004152:	6013      	strmi	r3, [r2, #0]
 8004154:	bf5c      	itt	pl
 8004156:	2002      	movpl	r0, #2
 8004158:	6013      	strpl	r3, [r2, #0]
 800415a:	4770      	bx	lr
 800415c:	b299      	uxth	r1, r3
 800415e:	b909      	cbnz	r1, 8004164 <__lo0bits+0x2a>
 8004160:	2010      	movs	r0, #16
 8004162:	0c1b      	lsrs	r3, r3, #16
 8004164:	b2d9      	uxtb	r1, r3
 8004166:	b909      	cbnz	r1, 800416c <__lo0bits+0x32>
 8004168:	3008      	adds	r0, #8
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	0719      	lsls	r1, r3, #28
 800416e:	bf04      	itt	eq
 8004170:	091b      	lsreq	r3, r3, #4
 8004172:	3004      	addeq	r0, #4
 8004174:	0799      	lsls	r1, r3, #30
 8004176:	bf04      	itt	eq
 8004178:	089b      	lsreq	r3, r3, #2
 800417a:	3002      	addeq	r0, #2
 800417c:	07d9      	lsls	r1, r3, #31
 800417e:	d403      	bmi.n	8004188 <__lo0bits+0x4e>
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	f100 0001 	add.w	r0, r0, #1
 8004186:	d003      	beq.n	8004190 <__lo0bits+0x56>
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4770      	bx	lr
 800418c:	2000      	movs	r0, #0
 800418e:	4770      	bx	lr
 8004190:	2020      	movs	r0, #32
 8004192:	4770      	bx	lr

08004194 <__i2b>:
 8004194:	b510      	push	{r4, lr}
 8004196:	460c      	mov	r4, r1
 8004198:	2101      	movs	r1, #1
 800419a:	f7ff ff07 	bl	8003fac <_Balloc>
 800419e:	4602      	mov	r2, r0
 80041a0:	b928      	cbnz	r0, 80041ae <__i2b+0x1a>
 80041a2:	f240 1145 	movw	r1, #325	@ 0x145
 80041a6:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <__i2b+0x24>)
 80041a8:	4804      	ldr	r0, [pc, #16]	@ (80041bc <__i2b+0x28>)
 80041aa:	f000 fcb1 	bl	8004b10 <__assert_func>
 80041ae:	2301      	movs	r3, #1
 80041b0:	6144      	str	r4, [r0, #20]
 80041b2:	6103      	str	r3, [r0, #16]
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	08005292 	.word	0x08005292
 80041bc:	080052a3 	.word	0x080052a3

080041c0 <__multiply>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4617      	mov	r7, r2
 80041c6:	690a      	ldr	r2, [r1, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4689      	mov	r9, r1
 80041cc:	429a      	cmp	r2, r3
 80041ce:	bfa2      	ittt	ge
 80041d0:	463b      	movge	r3, r7
 80041d2:	460f      	movge	r7, r1
 80041d4:	4699      	movge	r9, r3
 80041d6:	693d      	ldr	r5, [r7, #16]
 80041d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	eb05 060a 	add.w	r6, r5, sl
 80041e4:	42b3      	cmp	r3, r6
 80041e6:	b085      	sub	sp, #20
 80041e8:	bfb8      	it	lt
 80041ea:	3101      	addlt	r1, #1
 80041ec:	f7ff fede 	bl	8003fac <_Balloc>
 80041f0:	b930      	cbnz	r0, 8004200 <__multiply+0x40>
 80041f2:	4602      	mov	r2, r0
 80041f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80041f8:	4b40      	ldr	r3, [pc, #256]	@ (80042fc <__multiply+0x13c>)
 80041fa:	4841      	ldr	r0, [pc, #260]	@ (8004300 <__multiply+0x140>)
 80041fc:	f000 fc88 	bl	8004b10 <__assert_func>
 8004200:	f100 0414 	add.w	r4, r0, #20
 8004204:	4623      	mov	r3, r4
 8004206:	2200      	movs	r2, #0
 8004208:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800420c:	4573      	cmp	r3, lr
 800420e:	d320      	bcc.n	8004252 <__multiply+0x92>
 8004210:	f107 0814 	add.w	r8, r7, #20
 8004214:	f109 0114 	add.w	r1, r9, #20
 8004218:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800421c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	1beb      	subs	r3, r5, r7
 8004224:	3b15      	subs	r3, #21
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	3304      	adds	r3, #4
 800422c:	3715      	adds	r7, #21
 800422e:	42bd      	cmp	r5, r7
 8004230:	bf38      	it	cc
 8004232:	2304      	movcc	r3, #4
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	9b02      	ldr	r3, [sp, #8]
 8004238:	9103      	str	r1, [sp, #12]
 800423a:	428b      	cmp	r3, r1
 800423c:	d80c      	bhi.n	8004258 <__multiply+0x98>
 800423e:	2e00      	cmp	r6, #0
 8004240:	dd03      	ble.n	800424a <__multiply+0x8a>
 8004242:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004246:	2b00      	cmp	r3, #0
 8004248:	d055      	beq.n	80042f6 <__multiply+0x136>
 800424a:	6106      	str	r6, [r0, #16]
 800424c:	b005      	add	sp, #20
 800424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004252:	f843 2b04 	str.w	r2, [r3], #4
 8004256:	e7d9      	b.n	800420c <__multiply+0x4c>
 8004258:	f8b1 a000 	ldrh.w	sl, [r1]
 800425c:	f1ba 0f00 	cmp.w	sl, #0
 8004260:	d01f      	beq.n	80042a2 <__multiply+0xe2>
 8004262:	46c4      	mov	ip, r8
 8004264:	46a1      	mov	r9, r4
 8004266:	2700      	movs	r7, #0
 8004268:	f85c 2b04 	ldr.w	r2, [ip], #4
 800426c:	f8d9 3000 	ldr.w	r3, [r9]
 8004270:	fa1f fb82 	uxth.w	fp, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	fb0a 330b 	mla	r3, sl, fp, r3
 800427a:	443b      	add	r3, r7
 800427c:	f8d9 7000 	ldr.w	r7, [r9]
 8004280:	0c12      	lsrs	r2, r2, #16
 8004282:	0c3f      	lsrs	r7, r7, #16
 8004284:	fb0a 7202 	mla	r2, sl, r2, r7
 8004288:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800428c:	b29b      	uxth	r3, r3
 800428e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004292:	4565      	cmp	r5, ip
 8004294:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004298:	f849 3b04 	str.w	r3, [r9], #4
 800429c:	d8e4      	bhi.n	8004268 <__multiply+0xa8>
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	50e7      	str	r7, [r4, r3]
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	3104      	adds	r1, #4
 80042a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80042aa:	f1b9 0f00 	cmp.w	r9, #0
 80042ae:	d020      	beq.n	80042f2 <__multiply+0x132>
 80042b0:	4647      	mov	r7, r8
 80042b2:	46a4      	mov	ip, r4
 80042b4:	f04f 0a00 	mov.w	sl, #0
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f8b7 b000 	ldrh.w	fp, [r7]
 80042be:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	fb09 220b 	mla	r2, r9, fp, r2
 80042c8:	4452      	add	r2, sl
 80042ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042ce:	f84c 3b04 	str.w	r3, [ip], #4
 80042d2:	f857 3b04 	ldr.w	r3, [r7], #4
 80042d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042da:	f8bc 3000 	ldrh.w	r3, [ip]
 80042de:	42bd      	cmp	r5, r7
 80042e0:	fb09 330a 	mla	r3, r9, sl, r3
 80042e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80042e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042ec:	d8e5      	bhi.n	80042ba <__multiply+0xfa>
 80042ee:	9a01      	ldr	r2, [sp, #4]
 80042f0:	50a3      	str	r3, [r4, r2]
 80042f2:	3404      	adds	r4, #4
 80042f4:	e79f      	b.n	8004236 <__multiply+0x76>
 80042f6:	3e01      	subs	r6, #1
 80042f8:	e7a1      	b.n	800423e <__multiply+0x7e>
 80042fa:	bf00      	nop
 80042fc:	08005292 	.word	0x08005292
 8004300:	080052a3 	.word	0x080052a3

08004304 <__pow5mult>:
 8004304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004308:	4615      	mov	r5, r2
 800430a:	f012 0203 	ands.w	r2, r2, #3
 800430e:	4607      	mov	r7, r0
 8004310:	460e      	mov	r6, r1
 8004312:	d007      	beq.n	8004324 <__pow5mult+0x20>
 8004314:	4c25      	ldr	r4, [pc, #148]	@ (80043ac <__pow5mult+0xa8>)
 8004316:	3a01      	subs	r2, #1
 8004318:	2300      	movs	r3, #0
 800431a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800431e:	f7ff fea7 	bl	8004070 <__multadd>
 8004322:	4606      	mov	r6, r0
 8004324:	10ad      	asrs	r5, r5, #2
 8004326:	d03d      	beq.n	80043a4 <__pow5mult+0xa0>
 8004328:	69fc      	ldr	r4, [r7, #28]
 800432a:	b97c      	cbnz	r4, 800434c <__pow5mult+0x48>
 800432c:	2010      	movs	r0, #16
 800432e:	f7ff fd87 	bl	8003e40 <malloc>
 8004332:	4602      	mov	r2, r0
 8004334:	61f8      	str	r0, [r7, #28]
 8004336:	b928      	cbnz	r0, 8004344 <__pow5mult+0x40>
 8004338:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800433c:	4b1c      	ldr	r3, [pc, #112]	@ (80043b0 <__pow5mult+0xac>)
 800433e:	481d      	ldr	r0, [pc, #116]	@ (80043b4 <__pow5mult+0xb0>)
 8004340:	f000 fbe6 	bl	8004b10 <__assert_func>
 8004344:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004348:	6004      	str	r4, [r0, #0]
 800434a:	60c4      	str	r4, [r0, #12]
 800434c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004350:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004354:	b94c      	cbnz	r4, 800436a <__pow5mult+0x66>
 8004356:	f240 2171 	movw	r1, #625	@ 0x271
 800435a:	4638      	mov	r0, r7
 800435c:	f7ff ff1a 	bl	8004194 <__i2b>
 8004360:	2300      	movs	r3, #0
 8004362:	4604      	mov	r4, r0
 8004364:	f8c8 0008 	str.w	r0, [r8, #8]
 8004368:	6003      	str	r3, [r0, #0]
 800436a:	f04f 0900 	mov.w	r9, #0
 800436e:	07eb      	lsls	r3, r5, #31
 8004370:	d50a      	bpl.n	8004388 <__pow5mult+0x84>
 8004372:	4631      	mov	r1, r6
 8004374:	4622      	mov	r2, r4
 8004376:	4638      	mov	r0, r7
 8004378:	f7ff ff22 	bl	80041c0 <__multiply>
 800437c:	4680      	mov	r8, r0
 800437e:	4631      	mov	r1, r6
 8004380:	4638      	mov	r0, r7
 8004382:	f7ff fe53 	bl	800402c <_Bfree>
 8004386:	4646      	mov	r6, r8
 8004388:	106d      	asrs	r5, r5, #1
 800438a:	d00b      	beq.n	80043a4 <__pow5mult+0xa0>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	b938      	cbnz	r0, 80043a0 <__pow5mult+0x9c>
 8004390:	4622      	mov	r2, r4
 8004392:	4621      	mov	r1, r4
 8004394:	4638      	mov	r0, r7
 8004396:	f7ff ff13 	bl	80041c0 <__multiply>
 800439a:	6020      	str	r0, [r4, #0]
 800439c:	f8c0 9000 	str.w	r9, [r0]
 80043a0:	4604      	mov	r4, r0
 80043a2:	e7e4      	b.n	800436e <__pow5mult+0x6a>
 80043a4:	4630      	mov	r0, r6
 80043a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043aa:	bf00      	nop
 80043ac:	08005354 	.word	0x08005354
 80043b0:	08005223 	.word	0x08005223
 80043b4:	080052a3 	.word	0x080052a3

080043b8 <__lshift>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	460c      	mov	r4, r1
 80043be:	4607      	mov	r7, r0
 80043c0:	4691      	mov	r9, r2
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	6849      	ldr	r1, [r1, #4]
 80043c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043d0:	f108 0601 	add.w	r6, r8, #1
 80043d4:	42b3      	cmp	r3, r6
 80043d6:	db0b      	blt.n	80043f0 <__lshift+0x38>
 80043d8:	4638      	mov	r0, r7
 80043da:	f7ff fde7 	bl	8003fac <_Balloc>
 80043de:	4605      	mov	r5, r0
 80043e0:	b948      	cbnz	r0, 80043f6 <__lshift+0x3e>
 80043e2:	4602      	mov	r2, r0
 80043e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80043e8:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <__lshift+0xd0>)
 80043ea:	4828      	ldr	r0, [pc, #160]	@ (800448c <__lshift+0xd4>)
 80043ec:	f000 fb90 	bl	8004b10 <__assert_func>
 80043f0:	3101      	adds	r1, #1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	e7ee      	b.n	80043d4 <__lshift+0x1c>
 80043f6:	2300      	movs	r3, #0
 80043f8:	f100 0114 	add.w	r1, r0, #20
 80043fc:	f100 0210 	add.w	r2, r0, #16
 8004400:	4618      	mov	r0, r3
 8004402:	4553      	cmp	r3, sl
 8004404:	db33      	blt.n	800446e <__lshift+0xb6>
 8004406:	6920      	ldr	r0, [r4, #16]
 8004408:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800440c:	f104 0314 	add.w	r3, r4, #20
 8004410:	f019 091f 	ands.w	r9, r9, #31
 8004414:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004418:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800441c:	d02b      	beq.n	8004476 <__lshift+0xbe>
 800441e:	468a      	mov	sl, r1
 8004420:	2200      	movs	r2, #0
 8004422:	f1c9 0e20 	rsb	lr, r9, #32
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	fa00 f009 	lsl.w	r0, r0, r9
 800442c:	4310      	orrs	r0, r2
 800442e:	f84a 0b04 	str.w	r0, [sl], #4
 8004432:	f853 2b04 	ldr.w	r2, [r3], #4
 8004436:	459c      	cmp	ip, r3
 8004438:	fa22 f20e 	lsr.w	r2, r2, lr
 800443c:	d8f3      	bhi.n	8004426 <__lshift+0x6e>
 800443e:	ebac 0304 	sub.w	r3, ip, r4
 8004442:	3b15      	subs	r3, #21
 8004444:	f023 0303 	bic.w	r3, r3, #3
 8004448:	3304      	adds	r3, #4
 800444a:	f104 0015 	add.w	r0, r4, #21
 800444e:	4560      	cmp	r0, ip
 8004450:	bf88      	it	hi
 8004452:	2304      	movhi	r3, #4
 8004454:	50ca      	str	r2, [r1, r3]
 8004456:	b10a      	cbz	r2, 800445c <__lshift+0xa4>
 8004458:	f108 0602 	add.w	r6, r8, #2
 800445c:	3e01      	subs	r6, #1
 800445e:	4638      	mov	r0, r7
 8004460:	4621      	mov	r1, r4
 8004462:	612e      	str	r6, [r5, #16]
 8004464:	f7ff fde2 	bl	800402c <_Bfree>
 8004468:	4628      	mov	r0, r5
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004472:	3301      	adds	r3, #1
 8004474:	e7c5      	b.n	8004402 <__lshift+0x4a>
 8004476:	3904      	subs	r1, #4
 8004478:	f853 2b04 	ldr.w	r2, [r3], #4
 800447c:	459c      	cmp	ip, r3
 800447e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004482:	d8f9      	bhi.n	8004478 <__lshift+0xc0>
 8004484:	e7ea      	b.n	800445c <__lshift+0xa4>
 8004486:	bf00      	nop
 8004488:	08005292 	.word	0x08005292
 800448c:	080052a3 	.word	0x080052a3

08004490 <__mcmp>:
 8004490:	4603      	mov	r3, r0
 8004492:	690a      	ldr	r2, [r1, #16]
 8004494:	6900      	ldr	r0, [r0, #16]
 8004496:	b530      	push	{r4, r5, lr}
 8004498:	1a80      	subs	r0, r0, r2
 800449a:	d10e      	bne.n	80044ba <__mcmp+0x2a>
 800449c:	3314      	adds	r3, #20
 800449e:	3114      	adds	r1, #20
 80044a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80044a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80044a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044b0:	4295      	cmp	r5, r2
 80044b2:	d003      	beq.n	80044bc <__mcmp+0x2c>
 80044b4:	d205      	bcs.n	80044c2 <__mcmp+0x32>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d3f3      	bcc.n	80044a8 <__mcmp+0x18>
 80044c0:	e7fb      	b.n	80044ba <__mcmp+0x2a>
 80044c2:	2001      	movs	r0, #1
 80044c4:	e7f9      	b.n	80044ba <__mcmp+0x2a>
	...

080044c8 <__mdiff>:
 80044c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	4689      	mov	r9, r1
 80044ce:	4606      	mov	r6, r0
 80044d0:	4611      	mov	r1, r2
 80044d2:	4648      	mov	r0, r9
 80044d4:	4614      	mov	r4, r2
 80044d6:	f7ff ffdb 	bl	8004490 <__mcmp>
 80044da:	1e05      	subs	r5, r0, #0
 80044dc:	d112      	bne.n	8004504 <__mdiff+0x3c>
 80044de:	4629      	mov	r1, r5
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7ff fd63 	bl	8003fac <_Balloc>
 80044e6:	4602      	mov	r2, r0
 80044e8:	b928      	cbnz	r0, 80044f6 <__mdiff+0x2e>
 80044ea:	f240 2137 	movw	r1, #567	@ 0x237
 80044ee:	4b3e      	ldr	r3, [pc, #248]	@ (80045e8 <__mdiff+0x120>)
 80044f0:	483e      	ldr	r0, [pc, #248]	@ (80045ec <__mdiff+0x124>)
 80044f2:	f000 fb0d 	bl	8004b10 <__assert_func>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80044fc:	4610      	mov	r0, r2
 80044fe:	b003      	add	sp, #12
 8004500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004504:	bfbc      	itt	lt
 8004506:	464b      	movlt	r3, r9
 8004508:	46a1      	movlt	r9, r4
 800450a:	4630      	mov	r0, r6
 800450c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004510:	bfba      	itte	lt
 8004512:	461c      	movlt	r4, r3
 8004514:	2501      	movlt	r5, #1
 8004516:	2500      	movge	r5, #0
 8004518:	f7ff fd48 	bl	8003fac <_Balloc>
 800451c:	4602      	mov	r2, r0
 800451e:	b918      	cbnz	r0, 8004528 <__mdiff+0x60>
 8004520:	f240 2145 	movw	r1, #581	@ 0x245
 8004524:	4b30      	ldr	r3, [pc, #192]	@ (80045e8 <__mdiff+0x120>)
 8004526:	e7e3      	b.n	80044f0 <__mdiff+0x28>
 8004528:	f100 0b14 	add.w	fp, r0, #20
 800452c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004530:	f109 0310 	add.w	r3, r9, #16
 8004534:	60c5      	str	r5, [r0, #12]
 8004536:	f04f 0c00 	mov.w	ip, #0
 800453a:	f109 0514 	add.w	r5, r9, #20
 800453e:	46d9      	mov	r9, fp
 8004540:	6926      	ldr	r6, [r4, #16]
 8004542:	f104 0e14 	add.w	lr, r4, #20
 8004546:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800454a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004556:	f853 af04 	ldr.w	sl, [r3, #4]!
 800455a:	b281      	uxth	r1, r0
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	fa1f f38a 	uxth.w	r3, sl
 8004562:	1a5b      	subs	r3, r3, r1
 8004564:	0c00      	lsrs	r0, r0, #16
 8004566:	4463      	add	r3, ip
 8004568:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800456c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004570:	b29b      	uxth	r3, r3
 8004572:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004576:	4576      	cmp	r6, lr
 8004578:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800457c:	f849 3b04 	str.w	r3, [r9], #4
 8004580:	d8e6      	bhi.n	8004550 <__mdiff+0x88>
 8004582:	1b33      	subs	r3, r6, r4
 8004584:	3b15      	subs	r3, #21
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	3415      	adds	r4, #21
 800458c:	3304      	adds	r3, #4
 800458e:	42a6      	cmp	r6, r4
 8004590:	bf38      	it	cc
 8004592:	2304      	movcc	r3, #4
 8004594:	441d      	add	r5, r3
 8004596:	445b      	add	r3, fp
 8004598:	461e      	mov	r6, r3
 800459a:	462c      	mov	r4, r5
 800459c:	4544      	cmp	r4, r8
 800459e:	d30e      	bcc.n	80045be <__mdiff+0xf6>
 80045a0:	f108 0103 	add.w	r1, r8, #3
 80045a4:	1b49      	subs	r1, r1, r5
 80045a6:	f021 0103 	bic.w	r1, r1, #3
 80045aa:	3d03      	subs	r5, #3
 80045ac:	45a8      	cmp	r8, r5
 80045ae:	bf38      	it	cc
 80045b0:	2100      	movcc	r1, #0
 80045b2:	440b      	add	r3, r1
 80045b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80045b8:	b199      	cbz	r1, 80045e2 <__mdiff+0x11a>
 80045ba:	6117      	str	r7, [r2, #16]
 80045bc:	e79e      	b.n	80044fc <__mdiff+0x34>
 80045be:	46e6      	mov	lr, ip
 80045c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80045c4:	fa1f fc81 	uxth.w	ip, r1
 80045c8:	44f4      	add	ip, lr
 80045ca:	0c08      	lsrs	r0, r1, #16
 80045cc:	4471      	add	r1, lr
 80045ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80045d2:	b289      	uxth	r1, r1
 80045d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80045d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80045dc:	f846 1b04 	str.w	r1, [r6], #4
 80045e0:	e7dc      	b.n	800459c <__mdiff+0xd4>
 80045e2:	3f01      	subs	r7, #1
 80045e4:	e7e6      	b.n	80045b4 <__mdiff+0xec>
 80045e6:	bf00      	nop
 80045e8:	08005292 	.word	0x08005292
 80045ec:	080052a3 	.word	0x080052a3

080045f0 <__d2b>:
 80045f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80045f4:	2101      	movs	r1, #1
 80045f6:	4690      	mov	r8, r2
 80045f8:	4699      	mov	r9, r3
 80045fa:	9e08      	ldr	r6, [sp, #32]
 80045fc:	f7ff fcd6 	bl	8003fac <_Balloc>
 8004600:	4604      	mov	r4, r0
 8004602:	b930      	cbnz	r0, 8004612 <__d2b+0x22>
 8004604:	4602      	mov	r2, r0
 8004606:	f240 310f 	movw	r1, #783	@ 0x30f
 800460a:	4b23      	ldr	r3, [pc, #140]	@ (8004698 <__d2b+0xa8>)
 800460c:	4823      	ldr	r0, [pc, #140]	@ (800469c <__d2b+0xac>)
 800460e:	f000 fa7f 	bl	8004b10 <__assert_func>
 8004612:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004616:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800461a:	b10d      	cbz	r5, 8004620 <__d2b+0x30>
 800461c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f1b8 0300 	subs.w	r3, r8, #0
 8004626:	d024      	beq.n	8004672 <__d2b+0x82>
 8004628:	4668      	mov	r0, sp
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f7ff fd85 	bl	800413a <__lo0bits>
 8004630:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004634:	b1d8      	cbz	r0, 800466e <__d2b+0x7e>
 8004636:	f1c0 0320 	rsb	r3, r0, #32
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	430b      	orrs	r3, r1
 8004640:	40c2      	lsrs	r2, r0
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	9201      	str	r2, [sp, #4]
 8004646:	9b01      	ldr	r3, [sp, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2201      	moveq	r2, #1
 800464e:	2202      	movne	r2, #2
 8004650:	61a3      	str	r3, [r4, #24]
 8004652:	6122      	str	r2, [r4, #16]
 8004654:	b1ad      	cbz	r5, 8004682 <__d2b+0x92>
 8004656:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800465a:	4405      	add	r5, r0
 800465c:	6035      	str	r5, [r6, #0]
 800465e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004664:	6018      	str	r0, [r3, #0]
 8004666:	4620      	mov	r0, r4
 8004668:	b002      	add	sp, #8
 800466a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800466e:	6161      	str	r1, [r4, #20]
 8004670:	e7e9      	b.n	8004646 <__d2b+0x56>
 8004672:	a801      	add	r0, sp, #4
 8004674:	f7ff fd61 	bl	800413a <__lo0bits>
 8004678:	9b01      	ldr	r3, [sp, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	6163      	str	r3, [r4, #20]
 800467e:	3020      	adds	r0, #32
 8004680:	e7e7      	b.n	8004652 <__d2b+0x62>
 8004682:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004686:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800468a:	6030      	str	r0, [r6, #0]
 800468c:	6918      	ldr	r0, [r3, #16]
 800468e:	f7ff fd35 	bl	80040fc <__hi0bits>
 8004692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004696:	e7e4      	b.n	8004662 <__d2b+0x72>
 8004698:	08005292 	.word	0x08005292
 800469c:	080052a3 	.word	0x080052a3

080046a0 <__ssputs_r>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	461f      	mov	r7, r3
 80046a6:	688e      	ldr	r6, [r1, #8]
 80046a8:	4682      	mov	sl, r0
 80046aa:	42be      	cmp	r6, r7
 80046ac:	460c      	mov	r4, r1
 80046ae:	4690      	mov	r8, r2
 80046b0:	680b      	ldr	r3, [r1, #0]
 80046b2:	d82d      	bhi.n	8004710 <__ssputs_r+0x70>
 80046b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046bc:	d026      	beq.n	800470c <__ssputs_r+0x6c>
 80046be:	6965      	ldr	r5, [r4, #20]
 80046c0:	6909      	ldr	r1, [r1, #16]
 80046c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c6:	eba3 0901 	sub.w	r9, r3, r1
 80046ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ce:	1c7b      	adds	r3, r7, #1
 80046d0:	444b      	add	r3, r9
 80046d2:	106d      	asrs	r5, r5, #1
 80046d4:	429d      	cmp	r5, r3
 80046d6:	bf38      	it	cc
 80046d8:	461d      	movcc	r5, r3
 80046da:	0553      	lsls	r3, r2, #21
 80046dc:	d527      	bpl.n	800472e <__ssputs_r+0x8e>
 80046de:	4629      	mov	r1, r5
 80046e0:	f7ff fbd8 	bl	8003e94 <_malloc_r>
 80046e4:	4606      	mov	r6, r0
 80046e6:	b360      	cbz	r0, 8004742 <__ssputs_r+0xa2>
 80046e8:	464a      	mov	r2, r9
 80046ea:	6921      	ldr	r1, [r4, #16]
 80046ec:	f000 fa02 	bl	8004af4 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	444e      	add	r6, r9
 8004700:	6026      	str	r6, [r4, #0]
 8004702:	463e      	mov	r6, r7
 8004704:	6165      	str	r5, [r4, #20]
 8004706:	eba5 0509 	sub.w	r5, r5, r9
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x72>
 8004710:	463e      	mov	r6, r7
 8004712:	4632      	mov	r2, r6
 8004714:	4641      	mov	r1, r8
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	f000 f9c2 	bl	8004aa0 <memmove>
 800471c:	2000      	movs	r0, #0
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	4433      	add	r3, r6
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472e:	462a      	mov	r2, r5
 8004730:	f000 fa32 	bl	8004b98 <_realloc_r>
 8004734:	4606      	mov	r6, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d1e0      	bne.n	80046fc <__ssputs_r+0x5c>
 800473a:	4650      	mov	r0, sl
 800473c:	6921      	ldr	r1, [r4, #16]
 800473e:	f7ff fb37 	bl	8003db0 <_free_r>
 8004742:	230c      	movs	r3, #12
 8004744:	f8ca 3000 	str.w	r3, [sl]
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	e7e9      	b.n	800472a <__ssputs_r+0x8a>
	...

08004758 <_svfiprintf_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4698      	mov	r8, r3
 800475e:	898b      	ldrh	r3, [r1, #12]
 8004760:	4607      	mov	r7, r0
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	460d      	mov	r5, r1
 8004766:	4614      	mov	r4, r2
 8004768:	b09d      	sub	sp, #116	@ 0x74
 800476a:	d510      	bpl.n	800478e <_svfiprintf_r+0x36>
 800476c:	690b      	ldr	r3, [r1, #16]
 800476e:	b973      	cbnz	r3, 800478e <_svfiprintf_r+0x36>
 8004770:	2140      	movs	r1, #64	@ 0x40
 8004772:	f7ff fb8f 	bl	8003e94 <_malloc_r>
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	6128      	str	r0, [r5, #16]
 800477a:	b930      	cbnz	r0, 800478a <_svfiprintf_r+0x32>
 800477c:	230c      	movs	r3, #12
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	b01d      	add	sp, #116	@ 0x74
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	2340      	movs	r3, #64	@ 0x40
 800478c:	616b      	str	r3, [r5, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	9309      	str	r3, [sp, #36]	@ 0x24
 8004792:	2320      	movs	r3, #32
 8004794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004798:	2330      	movs	r3, #48	@ 0x30
 800479a:	f04f 0901 	mov.w	r9, #1
 800479e:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800493c <_svfiprintf_r+0x1e4>
 80047a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047aa:	4623      	mov	r3, r4
 80047ac:	469a      	mov	sl, r3
 80047ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b2:	b10a      	cbz	r2, 80047b8 <_svfiprintf_r+0x60>
 80047b4:	2a25      	cmp	r2, #37	@ 0x25
 80047b6:	d1f9      	bne.n	80047ac <_svfiprintf_r+0x54>
 80047b8:	ebba 0b04 	subs.w	fp, sl, r4
 80047bc:	d00b      	beq.n	80047d6 <_svfiprintf_r+0x7e>
 80047be:	465b      	mov	r3, fp
 80047c0:	4622      	mov	r2, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ff6b 	bl	80046a0 <__ssputs_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	f000 80a7 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d2:	445a      	add	r2, fp
 80047d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d6:	f89a 3000 	ldrb.w	r3, [sl]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 809f 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ea:	f10a 0a01 	add.w	sl, sl, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f8:	4654      	mov	r4, sl
 80047fa:	2205      	movs	r2, #5
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	484e      	ldr	r0, [pc, #312]	@ (800493c <_svfiprintf_r+0x1e4>)
 8004802:	f7fe fc6a 	bl	80030da <memchr>
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	b9d8      	cbnz	r0, 8004842 <_svfiprintf_r+0xea>
 800480a:	06d0      	lsls	r0, r2, #27
 800480c:	bf44      	itt	mi
 800480e:	2320      	movmi	r3, #32
 8004810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004814:	0711      	lsls	r1, r2, #28
 8004816:	bf44      	itt	mi
 8004818:	232b      	movmi	r3, #43	@ 0x2b
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481e:	f89a 3000 	ldrb.w	r3, [sl]
 8004822:	2b2a      	cmp	r3, #42	@ 0x2a
 8004824:	d015      	beq.n	8004852 <_svfiprintf_r+0xfa>
 8004826:	4654      	mov	r4, sl
 8004828:	2000      	movs	r0, #0
 800482a:	f04f 0c0a 	mov.w	ip, #10
 800482e:	9a07      	ldr	r2, [sp, #28]
 8004830:	4621      	mov	r1, r4
 8004832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004836:	3b30      	subs	r3, #48	@ 0x30
 8004838:	2b09      	cmp	r3, #9
 800483a:	d94b      	bls.n	80048d4 <_svfiprintf_r+0x17c>
 800483c:	b1b0      	cbz	r0, 800486c <_svfiprintf_r+0x114>
 800483e:	9207      	str	r2, [sp, #28]
 8004840:	e014      	b.n	800486c <_svfiprintf_r+0x114>
 8004842:	eba0 0308 	sub.w	r3, r0, r8
 8004846:	fa09 f303 	lsl.w	r3, r9, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	46a2      	mov	sl, r4
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	e7d2      	b.n	80047f8 <_svfiprintf_r+0xa0>
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	9103      	str	r1, [sp, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfbb      	ittet	lt
 800485e:	425b      	neglt	r3, r3
 8004860:	f042 0202 	orrlt.w	r2, r2, #2
 8004864:	9307      	strge	r3, [sp, #28]
 8004866:	9307      	strlt	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	9204      	strlt	r2, [sp, #16]
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004870:	d10a      	bne.n	8004888 <_svfiprintf_r+0x130>
 8004872:	7863      	ldrb	r3, [r4, #1]
 8004874:	2b2a      	cmp	r3, #42	@ 0x2a
 8004876:	d132      	bne.n	80048de <_svfiprintf_r+0x186>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	3402      	adds	r4, #2
 800487c:	1d1a      	adds	r2, r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	9203      	str	r2, [sp, #12]
 8004882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004940 <_svfiprintf_r+0x1e8>
 800488c:	2203      	movs	r2, #3
 800488e:	4650      	mov	r0, sl
 8004890:	7821      	ldrb	r1, [r4, #0]
 8004892:	f7fe fc22 	bl	80030da <memchr>
 8004896:	b138      	cbz	r0, 80048a8 <_svfiprintf_r+0x150>
 8004898:	2240      	movs	r2, #64	@ 0x40
 800489a:	9b04      	ldr	r3, [sp, #16]
 800489c:	eba0 000a 	sub.w	r0, r0, sl
 80048a0:	4082      	lsls	r2, r0
 80048a2:	4313      	orrs	r3, r2
 80048a4:	3401      	adds	r4, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	2206      	movs	r2, #6
 80048ae:	4825      	ldr	r0, [pc, #148]	@ (8004944 <_svfiprintf_r+0x1ec>)
 80048b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048b4:	f7fe fc11 	bl	80030da <memchr>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d036      	beq.n	800492a <_svfiprintf_r+0x1d2>
 80048bc:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <_svfiprintf_r+0x1f0>)
 80048be:	bb1b      	cbnz	r3, 8004908 <_svfiprintf_r+0x1b0>
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	3307      	adds	r3, #7
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	3308      	adds	r3, #8
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ce:	4433      	add	r3, r6
 80048d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d2:	e76a      	b.n	80047aa <_svfiprintf_r+0x52>
 80048d4:	460c      	mov	r4, r1
 80048d6:	2001      	movs	r0, #1
 80048d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048dc:	e7a8      	b.n	8004830 <_svfiprintf_r+0xd8>
 80048de:	2300      	movs	r3, #0
 80048e0:	f04f 0c0a 	mov.w	ip, #10
 80048e4:	4619      	mov	r1, r3
 80048e6:	3401      	adds	r4, #1
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	4620      	mov	r0, r4
 80048ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f0:	3a30      	subs	r2, #48	@ 0x30
 80048f2:	2a09      	cmp	r2, #9
 80048f4:	d903      	bls.n	80048fe <_svfiprintf_r+0x1a6>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c6      	beq.n	8004888 <_svfiprintf_r+0x130>
 80048fa:	9105      	str	r1, [sp, #20]
 80048fc:	e7c4      	b.n	8004888 <_svfiprintf_r+0x130>
 80048fe:	4604      	mov	r4, r0
 8004900:	2301      	movs	r3, #1
 8004902:	fb0c 2101 	mla	r1, ip, r1, r2
 8004906:	e7f0      	b.n	80048ea <_svfiprintf_r+0x192>
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462a      	mov	r2, r5
 800490e:	4638      	mov	r0, r7
 8004910:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <_svfiprintf_r+0x1f4>)
 8004912:	a904      	add	r1, sp, #16
 8004914:	f7fd fe7e 	bl	8002614 <_printf_float>
 8004918:	1c42      	adds	r2, r0, #1
 800491a:	4606      	mov	r6, r0
 800491c:	d1d6      	bne.n	80048cc <_svfiprintf_r+0x174>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	065b      	lsls	r3, r3, #25
 8004922:	f53f af2d 	bmi.w	8004780 <_svfiprintf_r+0x28>
 8004926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004928:	e72c      	b.n	8004784 <_svfiprintf_r+0x2c>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4638      	mov	r0, r7
 8004932:	4b06      	ldr	r3, [pc, #24]	@ (800494c <_svfiprintf_r+0x1f4>)
 8004934:	a904      	add	r1, sp, #16
 8004936:	f7fe f90b 	bl	8002b50 <_printf_i>
 800493a:	e7ed      	b.n	8004918 <_svfiprintf_r+0x1c0>
 800493c:	080052fc 	.word	0x080052fc
 8004940:	08005302 	.word	0x08005302
 8004944:	08005306 	.word	0x08005306
 8004948:	08002615 	.word	0x08002615
 800494c:	080046a1 	.word	0x080046a1

08004950 <__sflush_r>:
 8004950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	0716      	lsls	r6, r2, #28
 8004958:	4605      	mov	r5, r0
 800495a:	460c      	mov	r4, r1
 800495c:	d454      	bmi.n	8004a08 <__sflush_r+0xb8>
 800495e:	684b      	ldr	r3, [r1, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dc02      	bgt.n	800496a <__sflush_r+0x1a>
 8004964:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	dd48      	ble.n	80049fc <__sflush_r+0xac>
 800496a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800496c:	2e00      	cmp	r6, #0
 800496e:	d045      	beq.n	80049fc <__sflush_r+0xac>
 8004970:	2300      	movs	r3, #0
 8004972:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004976:	682f      	ldr	r7, [r5, #0]
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	d030      	beq.n	80049e0 <__sflush_r+0x90>
 800497e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	0759      	lsls	r1, r3, #29
 8004984:	d505      	bpl.n	8004992 <__sflush_r+0x42>
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	1ad2      	subs	r2, r2, r3
 800498a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800498c:	b10b      	cbz	r3, 8004992 <__sflush_r+0x42>
 800498e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004990:	1ad2      	subs	r2, r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	4628      	mov	r0, r5
 8004996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004998:	6a21      	ldr	r1, [r4, #32]
 800499a:	47b0      	blx	r6
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	d106      	bne.n	80049b0 <__sflush_r+0x60>
 80049a2:	6829      	ldr	r1, [r5, #0]
 80049a4:	291d      	cmp	r1, #29
 80049a6:	d82b      	bhi.n	8004a00 <__sflush_r+0xb0>
 80049a8:	4a28      	ldr	r2, [pc, #160]	@ (8004a4c <__sflush_r+0xfc>)
 80049aa:	40ca      	lsrs	r2, r1
 80049ac:	07d6      	lsls	r6, r2, #31
 80049ae:	d527      	bpl.n	8004a00 <__sflush_r+0xb0>
 80049b0:	2200      	movs	r2, #0
 80049b2:	6062      	str	r2, [r4, #4]
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	04d9      	lsls	r1, r3, #19
 80049b8:	6022      	str	r2, [r4, #0]
 80049ba:	d504      	bpl.n	80049c6 <__sflush_r+0x76>
 80049bc:	1c42      	adds	r2, r0, #1
 80049be:	d101      	bne.n	80049c4 <__sflush_r+0x74>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b903      	cbnz	r3, 80049c6 <__sflush_r+0x76>
 80049c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80049c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049c8:	602f      	str	r7, [r5, #0]
 80049ca:	b1b9      	cbz	r1, 80049fc <__sflush_r+0xac>
 80049cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049d0:	4299      	cmp	r1, r3
 80049d2:	d002      	beq.n	80049da <__sflush_r+0x8a>
 80049d4:	4628      	mov	r0, r5
 80049d6:	f7ff f9eb 	bl	8003db0 <_free_r>
 80049da:	2300      	movs	r3, #0
 80049dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80049de:	e00d      	b.n	80049fc <__sflush_r+0xac>
 80049e0:	2301      	movs	r3, #1
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	4602      	mov	r2, r0
 80049e8:	1c50      	adds	r0, r2, #1
 80049ea:	d1c9      	bne.n	8004980 <__sflush_r+0x30>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0c6      	beq.n	8004980 <__sflush_r+0x30>
 80049f2:	2b1d      	cmp	r3, #29
 80049f4:	d001      	beq.n	80049fa <__sflush_r+0xaa>
 80049f6:	2b16      	cmp	r3, #22
 80049f8:	d11d      	bne.n	8004a36 <__sflush_r+0xe6>
 80049fa:	602f      	str	r7, [r5, #0]
 80049fc:	2000      	movs	r0, #0
 80049fe:	e021      	b.n	8004a44 <__sflush_r+0xf4>
 8004a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a04:	b21b      	sxth	r3, r3
 8004a06:	e01a      	b.n	8004a3e <__sflush_r+0xee>
 8004a08:	690f      	ldr	r7, [r1, #16]
 8004a0a:	2f00      	cmp	r7, #0
 8004a0c:	d0f6      	beq.n	80049fc <__sflush_r+0xac>
 8004a0e:	0793      	lsls	r3, r2, #30
 8004a10:	bf18      	it	ne
 8004a12:	2300      	movne	r3, #0
 8004a14:	680e      	ldr	r6, [r1, #0]
 8004a16:	bf08      	it	eq
 8004a18:	694b      	ldreq	r3, [r1, #20]
 8004a1a:	1bf6      	subs	r6, r6, r7
 8004a1c:	600f      	str	r7, [r1, #0]
 8004a1e:	608b      	str	r3, [r1, #8]
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	ddeb      	ble.n	80049fc <__sflush_r+0xac>
 8004a24:	4633      	mov	r3, r6
 8004a26:	463a      	mov	r2, r7
 8004a28:	4628      	mov	r0, r5
 8004a2a:	6a21      	ldr	r1, [r4, #32]
 8004a2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004a30:	47e0      	blx	ip
 8004a32:	2800      	cmp	r0, #0
 8004a34:	dc07      	bgt.n	8004a46 <__sflush_r+0xf6>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a46:	4407      	add	r7, r0
 8004a48:	1a36      	subs	r6, r6, r0
 8004a4a:	e7e9      	b.n	8004a20 <__sflush_r+0xd0>
 8004a4c:	20400001 	.word	0x20400001

08004a50 <_fflush_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	690b      	ldr	r3, [r1, #16]
 8004a54:	4605      	mov	r5, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	b913      	cbnz	r3, 8004a60 <_fflush_r+0x10>
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	b118      	cbz	r0, 8004a6a <_fflush_r+0x1a>
 8004a62:	6a03      	ldr	r3, [r0, #32]
 8004a64:	b90b      	cbnz	r3, 8004a6a <_fflush_r+0x1a>
 8004a66:	f7fe fa1d 	bl	8002ea4 <__sinit>
 8004a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f3      	beq.n	8004a5a <_fflush_r+0xa>
 8004a72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a74:	07d0      	lsls	r0, r2, #31
 8004a76:	d404      	bmi.n	8004a82 <_fflush_r+0x32>
 8004a78:	0599      	lsls	r1, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_fflush_r+0x32>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7e:	f7fe fb2a 	bl	80030d6 <__retarget_lock_acquire_recursive>
 8004a82:	4628      	mov	r0, r5
 8004a84:	4621      	mov	r1, r4
 8004a86:	f7ff ff63 	bl	8004950 <__sflush_r>
 8004a8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	07da      	lsls	r2, r3, #31
 8004a90:	d4e4      	bmi.n	8004a5c <_fflush_r+0xc>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	059b      	lsls	r3, r3, #22
 8004a96:	d4e1      	bmi.n	8004a5c <_fflush_r+0xc>
 8004a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a9a:	f7fe fb1d 	bl	80030d8 <__retarget_lock_release_recursive>
 8004a9e:	e7dd      	b.n	8004a5c <_fflush_r+0xc>

08004aa0 <memmove>:
 8004aa0:	4288      	cmp	r0, r1
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	eb01 0402 	add.w	r4, r1, r2
 8004aa8:	d902      	bls.n	8004ab0 <memmove+0x10>
 8004aaa:	4284      	cmp	r4, r0
 8004aac:	4623      	mov	r3, r4
 8004aae:	d807      	bhi.n	8004ac0 <memmove+0x20>
 8004ab0:	1e43      	subs	r3, r0, #1
 8004ab2:	42a1      	cmp	r1, r4
 8004ab4:	d008      	beq.n	8004ac8 <memmove+0x28>
 8004ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004abe:	e7f8      	b.n	8004ab2 <memmove+0x12>
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	4402      	add	r2, r0
 8004ac4:	428a      	cmp	r2, r1
 8004ac6:	d100      	bne.n	8004aca <memmove+0x2a>
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ad2:	e7f7      	b.n	8004ac4 <memmove+0x24>

08004ad4 <_sbrk_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	4d05      	ldr	r5, [pc, #20]	@ (8004af0 <_sbrk_r+0x1c>)
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fc fad0 	bl	8001084 <_sbrk>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_sbrk_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_sbrk_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	2000037c 	.word	0x2000037c

08004af4 <memcpy>:
 8004af4:	440a      	add	r2, r1
 8004af6:	4291      	cmp	r1, r2
 8004af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004afc:	d100      	bne.n	8004b00 <memcpy+0xc>
 8004afe:	4770      	bx	lr
 8004b00:	b510      	push	{r4, lr}
 8004b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0c:	d1f9      	bne.n	8004b02 <memcpy+0xe>
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <__assert_func>:
 8004b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b12:	4614      	mov	r4, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <__assert_func+0x2c>)
 8004b18:	4605      	mov	r5, r0
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68d8      	ldr	r0, [r3, #12]
 8004b1e:	b14c      	cbz	r4, 8004b34 <__assert_func+0x24>
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <__assert_func+0x30>)
 8004b22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b26:	9100      	str	r1, [sp, #0]
 8004b28:	462b      	mov	r3, r5
 8004b2a:	4906      	ldr	r1, [pc, #24]	@ (8004b44 <__assert_func+0x34>)
 8004b2c:	f000 f870 	bl	8004c10 <fiprintf>
 8004b30:	f000 f880 	bl	8004c34 <abort>
 8004b34:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <__assert_func+0x38>)
 8004b36:	461c      	mov	r4, r3
 8004b38:	e7f3      	b.n	8004b22 <__assert_func+0x12>
 8004b3a:	bf00      	nop
 8004b3c:	20000018 	.word	0x20000018
 8004b40:	08005317 	.word	0x08005317
 8004b44:	08005324 	.word	0x08005324
 8004b48:	08005352 	.word	0x08005352

08004b4c <_calloc_r>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	fba1 5402 	umull	r5, r4, r1, r2
 8004b52:	b934      	cbnz	r4, 8004b62 <_calloc_r+0x16>
 8004b54:	4629      	mov	r1, r5
 8004b56:	f7ff f99d 	bl	8003e94 <_malloc_r>
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	b928      	cbnz	r0, 8004b6a <_calloc_r+0x1e>
 8004b5e:	4630      	mov	r0, r6
 8004b60:	bd70      	pop	{r4, r5, r6, pc}
 8004b62:	220c      	movs	r2, #12
 8004b64:	2600      	movs	r6, #0
 8004b66:	6002      	str	r2, [r0, #0]
 8004b68:	e7f9      	b.n	8004b5e <_calloc_r+0x12>
 8004b6a:	462a      	mov	r2, r5
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	f7fe fa34 	bl	8002fda <memset>
 8004b72:	e7f4      	b.n	8004b5e <_calloc_r+0x12>

08004b74 <__ascii_mbtowc>:
 8004b74:	b082      	sub	sp, #8
 8004b76:	b901      	cbnz	r1, 8004b7a <__ascii_mbtowc+0x6>
 8004b78:	a901      	add	r1, sp, #4
 8004b7a:	b142      	cbz	r2, 8004b8e <__ascii_mbtowc+0x1a>
 8004b7c:	b14b      	cbz	r3, 8004b92 <__ascii_mbtowc+0x1e>
 8004b7e:	7813      	ldrb	r3, [r2, #0]
 8004b80:	600b      	str	r3, [r1, #0]
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	1e10      	subs	r0, r2, #0
 8004b86:	bf18      	it	ne
 8004b88:	2001      	movne	r0, #1
 8004b8a:	b002      	add	sp, #8
 8004b8c:	4770      	bx	lr
 8004b8e:	4610      	mov	r0, r2
 8004b90:	e7fb      	b.n	8004b8a <__ascii_mbtowc+0x16>
 8004b92:	f06f 0001 	mvn.w	r0, #1
 8004b96:	e7f8      	b.n	8004b8a <__ascii_mbtowc+0x16>

08004b98 <_realloc_r>:
 8004b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	460d      	mov	r5, r1
 8004ba2:	b921      	cbnz	r1, 8004bae <_realloc_r+0x16>
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	f7ff b973 	b.w	8003e94 <_malloc_r>
 8004bae:	b92a      	cbnz	r2, 8004bbc <_realloc_r+0x24>
 8004bb0:	f7ff f8fe 	bl	8003db0 <_free_r>
 8004bb4:	4625      	mov	r5, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bbc:	f000 f841 	bl	8004c42 <_malloc_usable_size_r>
 8004bc0:	4284      	cmp	r4, r0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	d802      	bhi.n	8004bcc <_realloc_r+0x34>
 8004bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bca:	d8f4      	bhi.n	8004bb6 <_realloc_r+0x1e>
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f7ff f960 	bl	8003e94 <_malloc_r>
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	b908      	cbnz	r0, 8004bdc <_realloc_r+0x44>
 8004bd8:	4645      	mov	r5, r8
 8004bda:	e7ec      	b.n	8004bb6 <_realloc_r+0x1e>
 8004bdc:	42b4      	cmp	r4, r6
 8004bde:	4622      	mov	r2, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	bf28      	it	cs
 8004be4:	4632      	movcs	r2, r6
 8004be6:	f7ff ff85 	bl	8004af4 <memcpy>
 8004bea:	4629      	mov	r1, r5
 8004bec:	4638      	mov	r0, r7
 8004bee:	f7ff f8df 	bl	8003db0 <_free_r>
 8004bf2:	e7f1      	b.n	8004bd8 <_realloc_r+0x40>

08004bf4 <__ascii_wctomb>:
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	b141      	cbz	r1, 8004c0c <__ascii_wctomb+0x18>
 8004bfa:	2aff      	cmp	r2, #255	@ 0xff
 8004bfc:	d904      	bls.n	8004c08 <__ascii_wctomb+0x14>
 8004bfe:	228a      	movs	r2, #138	@ 0x8a
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	4770      	bx	lr
 8004c08:	2001      	movs	r0, #1
 8004c0a:	700a      	strb	r2, [r1, #0]
 8004c0c:	4770      	bx	lr
	...

08004c10 <fiprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	b503      	push	{r0, r1, lr}
 8004c14:	4601      	mov	r1, r0
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	4805      	ldr	r0, [pc, #20]	@ (8004c30 <fiprintf+0x20>)
 8004c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1e:	6800      	ldr	r0, [r0, #0]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	f000 f83d 	bl	8004ca0 <_vfiprintf_r>
 8004c26:	b002      	add	sp, #8
 8004c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c2c:	b003      	add	sp, #12
 8004c2e:	4770      	bx	lr
 8004c30:	20000018 	.word	0x20000018

08004c34 <abort>:
 8004c34:	2006      	movs	r0, #6
 8004c36:	b508      	push	{r3, lr}
 8004c38:	f000 fa06 	bl	8005048 <raise>
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	f7fc f9ac 	bl	8000f9a <_exit>

08004c42 <_malloc_usable_size_r>:
 8004c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c46:	1f18      	subs	r0, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfbc      	itt	lt
 8004c4c:	580b      	ldrlt	r3, [r1, r0]
 8004c4e:	18c0      	addlt	r0, r0, r3
 8004c50:	4770      	bx	lr

08004c52 <__sfputc_r>:
 8004c52:	6893      	ldr	r3, [r2, #8]
 8004c54:	b410      	push	{r4}
 8004c56:	3b01      	subs	r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	6093      	str	r3, [r2, #8]
 8004c5c:	da07      	bge.n	8004c6e <__sfputc_r+0x1c>
 8004c5e:	6994      	ldr	r4, [r2, #24]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	db01      	blt.n	8004c68 <__sfputc_r+0x16>
 8004c64:	290a      	cmp	r1, #10
 8004c66:	d102      	bne.n	8004c6e <__sfputc_r+0x1c>
 8004c68:	bc10      	pop	{r4}
 8004c6a:	f000 b931 	b.w	8004ed0 <__swbuf_r>
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	1c58      	adds	r0, r3, #1
 8004c72:	6010      	str	r0, [r2, #0]
 8004c74:	7019      	strb	r1, [r3, #0]
 8004c76:	4608      	mov	r0, r1
 8004c78:	bc10      	pop	{r4}
 8004c7a:	4770      	bx	lr

08004c7c <__sfputs_r>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460f      	mov	r7, r1
 8004c82:	4614      	mov	r4, r2
 8004c84:	18d5      	adds	r5, r2, r3
 8004c86:	42ac      	cmp	r4, r5
 8004c88:	d101      	bne.n	8004c8e <__sfputs_r+0x12>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e007      	b.n	8004c9e <__sfputs_r+0x22>
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4630      	mov	r0, r6
 8004c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c96:	f7ff ffdc 	bl	8004c52 <__sfputc_r>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	d1f3      	bne.n	8004c86 <__sfputs_r+0xa>
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ca0 <_vfiprintf_r>:
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	460d      	mov	r5, r1
 8004ca6:	4614      	mov	r4, r2
 8004ca8:	4698      	mov	r8, r3
 8004caa:	4606      	mov	r6, r0
 8004cac:	b09d      	sub	sp, #116	@ 0x74
 8004cae:	b118      	cbz	r0, 8004cb8 <_vfiprintf_r+0x18>
 8004cb0:	6a03      	ldr	r3, [r0, #32]
 8004cb2:	b90b      	cbnz	r3, 8004cb8 <_vfiprintf_r+0x18>
 8004cb4:	f7fe f8f6 	bl	8002ea4 <__sinit>
 8004cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cba:	07d9      	lsls	r1, r3, #31
 8004cbc:	d405      	bmi.n	8004cca <_vfiprintf_r+0x2a>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	059a      	lsls	r2, r3, #22
 8004cc2:	d402      	bmi.n	8004cca <_vfiprintf_r+0x2a>
 8004cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cc6:	f7fe fa06 	bl	80030d6 <__retarget_lock_acquire_recursive>
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	071b      	lsls	r3, r3, #28
 8004cce:	d501      	bpl.n	8004cd4 <_vfiprintf_r+0x34>
 8004cd0:	692b      	ldr	r3, [r5, #16]
 8004cd2:	b99b      	cbnz	r3, 8004cfc <_vfiprintf_r+0x5c>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f000 f938 	bl	8004f4c <__swsetup_r>
 8004cdc:	b170      	cbz	r0, 8004cfc <_vfiprintf_r+0x5c>
 8004cde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ce0:	07dc      	lsls	r4, r3, #31
 8004ce2:	d504      	bpl.n	8004cee <_vfiprintf_r+0x4e>
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	b01d      	add	sp, #116	@ 0x74
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	0598      	lsls	r0, r3, #22
 8004cf2:	d4f7      	bmi.n	8004ce4 <_vfiprintf_r+0x44>
 8004cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cf6:	f7fe f9ef 	bl	80030d8 <__retarget_lock_release_recursive>
 8004cfa:	e7f3      	b.n	8004ce4 <_vfiprintf_r+0x44>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d00:	2320      	movs	r3, #32
 8004d02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d06:	2330      	movs	r3, #48	@ 0x30
 8004d08:	f04f 0901 	mov.w	r9, #1
 8004d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ebc <_vfiprintf_r+0x21c>
 8004d14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d18:	4623      	mov	r3, r4
 8004d1a:	469a      	mov	sl, r3
 8004d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d20:	b10a      	cbz	r2, 8004d26 <_vfiprintf_r+0x86>
 8004d22:	2a25      	cmp	r2, #37	@ 0x25
 8004d24:	d1f9      	bne.n	8004d1a <_vfiprintf_r+0x7a>
 8004d26:	ebba 0b04 	subs.w	fp, sl, r4
 8004d2a:	d00b      	beq.n	8004d44 <_vfiprintf_r+0xa4>
 8004d2c:	465b      	mov	r3, fp
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7ff ffa2 	bl	8004c7c <__sfputs_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f000 80a7 	beq.w	8004e8c <_vfiprintf_r+0x1ec>
 8004d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d40:	445a      	add	r2, fp
 8004d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d44:	f89a 3000 	ldrb.w	r3, [sl]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 809f 	beq.w	8004e8c <_vfiprintf_r+0x1ec>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295
 8004d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d58:	f10a 0a01 	add.w	sl, sl, #1
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	9307      	str	r3, [sp, #28]
 8004d60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d64:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d66:	4654      	mov	r4, sl
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6e:	4853      	ldr	r0, [pc, #332]	@ (8004ebc <_vfiprintf_r+0x21c>)
 8004d70:	f7fe f9b3 	bl	80030da <memchr>
 8004d74:	9a04      	ldr	r2, [sp, #16]
 8004d76:	b9d8      	cbnz	r0, 8004db0 <_vfiprintf_r+0x110>
 8004d78:	06d1      	lsls	r1, r2, #27
 8004d7a:	bf44      	itt	mi
 8004d7c:	2320      	movmi	r3, #32
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d82:	0713      	lsls	r3, r2, #28
 8004d84:	bf44      	itt	mi
 8004d86:	232b      	movmi	r3, #43	@ 0x2b
 8004d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d92:	d015      	beq.n	8004dc0 <_vfiprintf_r+0x120>
 8004d94:	4654      	mov	r4, sl
 8004d96:	2000      	movs	r0, #0
 8004d98:	f04f 0c0a 	mov.w	ip, #10
 8004d9c:	9a07      	ldr	r2, [sp, #28]
 8004d9e:	4621      	mov	r1, r4
 8004da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da4:	3b30      	subs	r3, #48	@ 0x30
 8004da6:	2b09      	cmp	r3, #9
 8004da8:	d94b      	bls.n	8004e42 <_vfiprintf_r+0x1a2>
 8004daa:	b1b0      	cbz	r0, 8004dda <_vfiprintf_r+0x13a>
 8004dac:	9207      	str	r2, [sp, #28]
 8004dae:	e014      	b.n	8004dda <_vfiprintf_r+0x13a>
 8004db0:	eba0 0308 	sub.w	r3, r0, r8
 8004db4:	fa09 f303 	lsl.w	r3, r9, r3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	46a2      	mov	sl, r4
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	e7d2      	b.n	8004d66 <_vfiprintf_r+0xc6>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	1d19      	adds	r1, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	9103      	str	r1, [sp, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbb      	ittet	lt
 8004dcc:	425b      	neglt	r3, r3
 8004dce:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd2:	9307      	strge	r3, [sp, #28]
 8004dd4:	9307      	strlt	r3, [sp, #28]
 8004dd6:	bfb8      	it	lt
 8004dd8:	9204      	strlt	r2, [sp, #16]
 8004dda:	7823      	ldrb	r3, [r4, #0]
 8004ddc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dde:	d10a      	bne.n	8004df6 <_vfiprintf_r+0x156>
 8004de0:	7863      	ldrb	r3, [r4, #1]
 8004de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004de4:	d132      	bne.n	8004e4c <_vfiprintf_r+0x1ac>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	3402      	adds	r4, #2
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	9203      	str	r2, [sp, #12]
 8004df0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004df4:	9305      	str	r3, [sp, #20]
 8004df6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004ec0 <_vfiprintf_r+0x220>
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	4650      	mov	r0, sl
 8004dfe:	7821      	ldrb	r1, [r4, #0]
 8004e00:	f7fe f96b 	bl	80030da <memchr>
 8004e04:	b138      	cbz	r0, 8004e16 <_vfiprintf_r+0x176>
 8004e06:	2240      	movs	r2, #64	@ 0x40
 8004e08:	9b04      	ldr	r3, [sp, #16]
 8004e0a:	eba0 000a 	sub.w	r0, r0, sl
 8004e0e:	4082      	lsls	r2, r0
 8004e10:	4313      	orrs	r3, r2
 8004e12:	3401      	adds	r4, #1
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1a:	2206      	movs	r2, #6
 8004e1c:	4829      	ldr	r0, [pc, #164]	@ (8004ec4 <_vfiprintf_r+0x224>)
 8004e1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e22:	f7fe f95a 	bl	80030da <memchr>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d03f      	beq.n	8004eaa <_vfiprintf_r+0x20a>
 8004e2a:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <_vfiprintf_r+0x228>)
 8004e2c:	bb1b      	cbnz	r3, 8004e76 <_vfiprintf_r+0x1d6>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	3307      	adds	r3, #7
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	3308      	adds	r3, #8
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3c:	443b      	add	r3, r7
 8004e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e40:	e76a      	b.n	8004d18 <_vfiprintf_r+0x78>
 8004e42:	460c      	mov	r4, r1
 8004e44:	2001      	movs	r0, #1
 8004e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4a:	e7a8      	b.n	8004d9e <_vfiprintf_r+0xfe>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4619      	mov	r1, r3
 8004e54:	3401      	adds	r4, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e5e:	3a30      	subs	r2, #48	@ 0x30
 8004e60:	2a09      	cmp	r2, #9
 8004e62:	d903      	bls.n	8004e6c <_vfiprintf_r+0x1cc>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0c6      	beq.n	8004df6 <_vfiprintf_r+0x156>
 8004e68:	9105      	str	r1, [sp, #20]
 8004e6a:	e7c4      	b.n	8004df6 <_vfiprintf_r+0x156>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	2301      	movs	r3, #1
 8004e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e74:	e7f0      	b.n	8004e58 <_vfiprintf_r+0x1b8>
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <_vfiprintf_r+0x22c>)
 8004e80:	a904      	add	r1, sp, #16
 8004e82:	f7fd fbc7 	bl	8002614 <_printf_float>
 8004e86:	4607      	mov	r7, r0
 8004e88:	1c78      	adds	r0, r7, #1
 8004e8a:	d1d6      	bne.n	8004e3a <_vfiprintf_r+0x19a>
 8004e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e8e:	07d9      	lsls	r1, r3, #31
 8004e90:	d405      	bmi.n	8004e9e <_vfiprintf_r+0x1fe>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	059a      	lsls	r2, r3, #22
 8004e96:	d402      	bmi.n	8004e9e <_vfiprintf_r+0x1fe>
 8004e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e9a:	f7fe f91d 	bl	80030d8 <__retarget_lock_release_recursive>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	065b      	lsls	r3, r3, #25
 8004ea2:	f53f af1f 	bmi.w	8004ce4 <_vfiprintf_r+0x44>
 8004ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ea8:	e71e      	b.n	8004ce8 <_vfiprintf_r+0x48>
 8004eaa:	ab03      	add	r3, sp, #12
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <_vfiprintf_r+0x22c>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	f7fd fe4b 	bl	8002b50 <_printf_i>
 8004eba:	e7e4      	b.n	8004e86 <_vfiprintf_r+0x1e6>
 8004ebc:	080052fc 	.word	0x080052fc
 8004ec0:	08005302 	.word	0x08005302
 8004ec4:	08005306 	.word	0x08005306
 8004ec8:	08002615 	.word	0x08002615
 8004ecc:	08004c7d 	.word	0x08004c7d

08004ed0 <__swbuf_r>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	b118      	cbz	r0, 8004ee2 <__swbuf_r+0x12>
 8004eda:	6a03      	ldr	r3, [r0, #32]
 8004edc:	b90b      	cbnz	r3, 8004ee2 <__swbuf_r+0x12>
 8004ede:	f7fd ffe1 	bl	8002ea4 <__sinit>
 8004ee2:	69a3      	ldr	r3, [r4, #24]
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	071a      	lsls	r2, r3, #28
 8004eea:	d501      	bpl.n	8004ef0 <__swbuf_r+0x20>
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	b943      	cbnz	r3, 8004f02 <__swbuf_r+0x32>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f82a 	bl	8004f4c <__swsetup_r>
 8004ef8:	b118      	cbz	r0, 8004f02 <__swbuf_r+0x32>
 8004efa:	f04f 37ff 	mov.w	r7, #4294967295
 8004efe:	4638      	mov	r0, r7
 8004f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	6922      	ldr	r2, [r4, #16]
 8004f06:	b2f6      	uxtb	r6, r6
 8004f08:	1a98      	subs	r0, r3, r2
 8004f0a:	6963      	ldr	r3, [r4, #20]
 8004f0c:	4637      	mov	r7, r6
 8004f0e:	4283      	cmp	r3, r0
 8004f10:	dc05      	bgt.n	8004f1e <__swbuf_r+0x4e>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7ff fd9b 	bl	8004a50 <_fflush_r>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d1ed      	bne.n	8004efa <__swbuf_r+0x2a>
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60a3      	str	r3, [r4, #8]
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	701e      	strb	r6, [r3, #0]
 8004f2c:	6962      	ldr	r2, [r4, #20]
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d004      	beq.n	8004f3e <__swbuf_r+0x6e>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	07db      	lsls	r3, r3, #31
 8004f38:	d5e1      	bpl.n	8004efe <__swbuf_r+0x2e>
 8004f3a:	2e0a      	cmp	r6, #10
 8004f3c:	d1df      	bne.n	8004efe <__swbuf_r+0x2e>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff fd85 	bl	8004a50 <_fflush_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d0d9      	beq.n	8004efe <__swbuf_r+0x2e>
 8004f4a:	e7d6      	b.n	8004efa <__swbuf_r+0x2a>

08004f4c <__swsetup_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4b29      	ldr	r3, [pc, #164]	@ (8004ff4 <__swsetup_r+0xa8>)
 8004f50:	4605      	mov	r5, r0
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	460c      	mov	r4, r1
 8004f56:	b118      	cbz	r0, 8004f60 <__swsetup_r+0x14>
 8004f58:	6a03      	ldr	r3, [r0, #32]
 8004f5a:	b90b      	cbnz	r3, 8004f60 <__swsetup_r+0x14>
 8004f5c:	f7fd ffa2 	bl	8002ea4 <__sinit>
 8004f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f64:	0719      	lsls	r1, r3, #28
 8004f66:	d422      	bmi.n	8004fae <__swsetup_r+0x62>
 8004f68:	06da      	lsls	r2, r3, #27
 8004f6a:	d407      	bmi.n	8004f7c <__swsetup_r+0x30>
 8004f6c:	2209      	movs	r2, #9
 8004f6e:	602a      	str	r2, [r5, #0]
 8004f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	e033      	b.n	8004fe4 <__swsetup_r+0x98>
 8004f7c:	0758      	lsls	r0, r3, #29
 8004f7e:	d512      	bpl.n	8004fa6 <__swsetup_r+0x5a>
 8004f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f82:	b141      	cbz	r1, 8004f96 <__swsetup_r+0x4a>
 8004f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	d002      	beq.n	8004f92 <__swsetup_r+0x46>
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7fe ff0f 	bl	8003db0 <_free_r>
 8004f92:	2300      	movs	r3, #0
 8004f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6063      	str	r3, [r4, #4]
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f043 0308 	orr.w	r3, r3, #8
 8004fac:	81a3      	strh	r3, [r4, #12]
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	b94b      	cbnz	r3, 8004fc6 <__swsetup_r+0x7a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbc:	d003      	beq.n	8004fc6 <__swsetup_r+0x7a>
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 f882 	bl	80050ca <__smakebuf_r>
 8004fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fca:	f013 0201 	ands.w	r2, r3, #1
 8004fce:	d00a      	beq.n	8004fe6 <__swsetup_r+0x9a>
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	60a2      	str	r2, [r4, #8]
 8004fd4:	6962      	ldr	r2, [r4, #20]
 8004fd6:	4252      	negs	r2, r2
 8004fd8:	61a2      	str	r2, [r4, #24]
 8004fda:	6922      	ldr	r2, [r4, #16]
 8004fdc:	b942      	cbnz	r2, 8004ff0 <__swsetup_r+0xa4>
 8004fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fe2:	d1c5      	bne.n	8004f70 <__swsetup_r+0x24>
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	0799      	lsls	r1, r3, #30
 8004fe8:	bf58      	it	pl
 8004fea:	6962      	ldrpl	r2, [r4, #20]
 8004fec:	60a2      	str	r2, [r4, #8]
 8004fee:	e7f4      	b.n	8004fda <__swsetup_r+0x8e>
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e7f7      	b.n	8004fe4 <__swsetup_r+0x98>
 8004ff4:	20000018 	.word	0x20000018

08004ff8 <_raise_r>:
 8004ff8:	291f      	cmp	r1, #31
 8004ffa:	b538      	push	{r3, r4, r5, lr}
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	d904      	bls.n	800500c <_raise_r+0x14>
 8005002:	2316      	movs	r3, #22
 8005004:	6003      	str	r3, [r0, #0]
 8005006:	f04f 30ff 	mov.w	r0, #4294967295
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800500e:	b112      	cbz	r2, 8005016 <_raise_r+0x1e>
 8005010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005014:	b94b      	cbnz	r3, 800502a <_raise_r+0x32>
 8005016:	4628      	mov	r0, r5
 8005018:	f000 f830 	bl	800507c <_getpid_r>
 800501c:	4622      	mov	r2, r4
 800501e:	4601      	mov	r1, r0
 8005020:	4628      	mov	r0, r5
 8005022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005026:	f000 b817 	b.w	8005058 <_kill_r>
 800502a:	2b01      	cmp	r3, #1
 800502c:	d00a      	beq.n	8005044 <_raise_r+0x4c>
 800502e:	1c59      	adds	r1, r3, #1
 8005030:	d103      	bne.n	800503a <_raise_r+0x42>
 8005032:	2316      	movs	r3, #22
 8005034:	6003      	str	r3, [r0, #0]
 8005036:	2001      	movs	r0, #1
 8005038:	e7e7      	b.n	800500a <_raise_r+0x12>
 800503a:	2100      	movs	r1, #0
 800503c:	4620      	mov	r0, r4
 800503e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005042:	4798      	blx	r3
 8005044:	2000      	movs	r0, #0
 8005046:	e7e0      	b.n	800500a <_raise_r+0x12>

08005048 <raise>:
 8005048:	4b02      	ldr	r3, [pc, #8]	@ (8005054 <raise+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f7ff bfd3 	b.w	8004ff8 <_raise_r>
 8005052:	bf00      	nop
 8005054:	20000018 	.word	0x20000018

08005058 <_kill_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	2300      	movs	r3, #0
 800505c:	4d06      	ldr	r5, [pc, #24]	@ (8005078 <_kill_r+0x20>)
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	f7fb ff88 	bl	8000f7a <_kill>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d102      	bne.n	8005074 <_kill_r+0x1c>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	b103      	cbz	r3, 8005074 <_kill_r+0x1c>
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	bf00      	nop
 8005078:	2000037c 	.word	0x2000037c

0800507c <_getpid_r>:
 800507c:	f7fb bf76 	b.w	8000f6c <_getpid>

08005080 <__swhatbuf_r>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	460c      	mov	r4, r1
 8005084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005088:	4615      	mov	r5, r2
 800508a:	2900      	cmp	r1, #0
 800508c:	461e      	mov	r6, r3
 800508e:	b096      	sub	sp, #88	@ 0x58
 8005090:	da0c      	bge.n	80050ac <__swhatbuf_r+0x2c>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	2100      	movs	r1, #0
 8005096:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800509a:	bf14      	ite	ne
 800509c:	2340      	movne	r3, #64	@ 0x40
 800509e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050a2:	2000      	movs	r0, #0
 80050a4:	6031      	str	r1, [r6, #0]
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	b016      	add	sp, #88	@ 0x58
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	466a      	mov	r2, sp
 80050ae:	f000 f849 	bl	8005144 <_fstat_r>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	dbed      	blt.n	8005092 <__swhatbuf_r+0x12>
 80050b6:	9901      	ldr	r1, [sp, #4]
 80050b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050c0:	4259      	negs	r1, r3
 80050c2:	4159      	adcs	r1, r3
 80050c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050c8:	e7eb      	b.n	80050a2 <__swhatbuf_r+0x22>

080050ca <__smakebuf_r>:
 80050ca:	898b      	ldrh	r3, [r1, #12]
 80050cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ce:	079d      	lsls	r5, r3, #30
 80050d0:	4606      	mov	r6, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	d507      	bpl.n	80050e6 <__smakebuf_r+0x1c>
 80050d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	2301      	movs	r3, #1
 80050e0:	6163      	str	r3, [r4, #20]
 80050e2:	b003      	add	sp, #12
 80050e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e6:	466a      	mov	r2, sp
 80050e8:	ab01      	add	r3, sp, #4
 80050ea:	f7ff ffc9 	bl	8005080 <__swhatbuf_r>
 80050ee:	9f00      	ldr	r7, [sp, #0]
 80050f0:	4605      	mov	r5, r0
 80050f2:	4639      	mov	r1, r7
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7fe fecd 	bl	8003e94 <_malloc_r>
 80050fa:	b948      	cbnz	r0, 8005110 <__smakebuf_r+0x46>
 80050fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005100:	059a      	lsls	r2, r3, #22
 8005102:	d4ee      	bmi.n	80050e2 <__smakebuf_r+0x18>
 8005104:	f023 0303 	bic.w	r3, r3, #3
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	81a3      	strh	r3, [r4, #12]
 800510e:	e7e2      	b.n	80050d6 <__smakebuf_r+0xc>
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	6020      	str	r0, [r4, #0]
 8005120:	b15b      	cbz	r3, 800513a <__smakebuf_r+0x70>
 8005122:	4630      	mov	r0, r6
 8005124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005128:	f000 f81e 	bl	8005168 <_isatty_r>
 800512c:	b128      	cbz	r0, 800513a <__smakebuf_r+0x70>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	431d      	orrs	r5, r3
 800513e:	81a5      	strh	r5, [r4, #12]
 8005140:	e7cf      	b.n	80050e2 <__smakebuf_r+0x18>
	...

08005144 <_fstat_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	2300      	movs	r3, #0
 8005148:	4d06      	ldr	r5, [pc, #24]	@ (8005164 <_fstat_r+0x20>)
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	f7fb ff71 	bl	8001038 <_fstat>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	d102      	bne.n	8005160 <_fstat_r+0x1c>
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	b103      	cbz	r3, 8005160 <_fstat_r+0x1c>
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	bd38      	pop	{r3, r4, r5, pc}
 8005162:	bf00      	nop
 8005164:	2000037c 	.word	0x2000037c

08005168 <_isatty_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	2300      	movs	r3, #0
 800516c:	4d05      	ldr	r5, [pc, #20]	@ (8005184 <_isatty_r+0x1c>)
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fb ff6f 	bl	8001056 <_isatty>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_isatty_r+0x1a>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_isatty_r+0x1a>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	2000037c 	.word	0x2000037c

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
