
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b50  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa0  08009c60  08009c60  0000ac60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac00  0800ac00  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac00  0800ac00  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac08  0800ac08  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac0c  0800ac0c  0000bc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ac10  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001e0  0800adf0  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  0800adf0  0000c8b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdb2  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002309  00000000  00000000  00017fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0001a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008da  00000000  00000000  0001ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018784  00000000  00000000  0001b712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f605  00000000  00000000  00033e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b4c  00000000  00000000  0004349b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a0  00000000  00000000  000ca02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ce4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c48 	.word	0x08009c48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009c48 	.word	0x08009c48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_DQ_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2112      	movs	r1, #18
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011de:	f002 fa90 	bl	8003702 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011fa:	f002 f8e7 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80011fe:	2310      	movs	r3, #16
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001216:	f002 f8d9 	bl	80033cc <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C1_Init+0x50>)
 800126a:	f002 fa63 	bl	8003734 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f001 f8ed 	bl	8002452 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001fc 	.word	0x200001fc
 8001280:	40005400 	.word	0x40005400
 8001284:	00061a80 	.word	0x00061a80

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_I2C_MspInit+0x70>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d123      	bne.n	80012f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c0:	23c0      	movs	r3, #192	@ 0xc0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <HAL_I2C_MspInit+0x78>)
 80012d4:	f002 f87a 	bl	80033cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e2:	61d3      	str	r3, [r2, #28]
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00

08001304 <RELAY_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 初始化继电器控制引脚
void RELAY_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2110      	movs	r1, #16
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <RELAY_Init+0x14>)
 800130e:	f002 f9f8 	bl	8003702 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40010800 	.word	0x40010800

0800131c <RELAY_Control>:

// 控制继电器状态
void RELAY_Control(uint8_t state)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2110      	movs	r1, #16
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <RELAY_Control+0x28>)
 8001338:	f002 f9e3 	bl	8003702 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010800 	.word	0x40010800

08001348 <Delay_us>:

// 微秒级延时函数 (保持不变)
void Delay_us(uint16_t us)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  us *= 6;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	461a      	mov	r2, r3
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	80fb      	strh	r3, [r7, #6]
  while (us--)
 800135e:	e007      	b.n	8001370 <Delay_us+0x28>
  {
    __NOP();
 8001360:	bf00      	nop
    __NOP();
 8001362:	bf00      	nop
    __NOP();
 8001364:	bf00      	nop
    __NOP();
 8001366:	bf00      	nop
    __NOP();
 8001368:	bf00      	nop
    __NOP();
 800136a:	bf00      	nop
    __NOP();
 800136c:	bf00      	nop
    __NOP();
 800136e:	bf00      	nop
  while (us--)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	80fa      	strh	r2, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f2      	bne.n	8001360 <Delay_us+0x18>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <DS18B20_WriteBit>:

// 写1位数据 (保持不变)
void DS18B20_WriteBit(uint8_t bit)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2102      	movs	r1, #2
 8001396:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 8001398:	f002 f9b3 	bl	8003702 <HAL_GPIO_WritePin>
  Delay_us(1); // t_low1: 1-15us
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ffd3 	bl	8001348 <Delay_us>
  if (bit)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <DS18B20_WriteBit+0x2a>
  {
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 写1
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013ae:	f002 f9a8 	bl	8003702 <HAL_GPIO_WritePin>
  }
  else
  {
    // 保持低电平即可写0
  }
  Delay_us(60);                                               // t_slot: 60-120us
 80013b2:	203c      	movs	r0, #60	@ 0x3c
 80013b4:	f7ff ffc8 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 80013b8:	2201      	movs	r2, #1
 80013ba:	2102      	movs	r1, #2
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013be:	f002 f9a0 	bl	8003702 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_rec: >1us
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ffc0 	bl	8001348 <Delay_us>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800

080013d4 <DS18B20_ReadBit>:

// 读1位数据 (保持不变)
uint8_t DS18B20_ReadBit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013e4:	f002 f98d 	bl	8003702 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_low0: 1-15us
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ffad 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线，由从机拉低或保持高电平
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013f4:	f002 f985 	bl	8003702 <HAL_GPIO_WritePin>
  Delay_us(10);                                               // t_rdv: <15us (在15us内采样)
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ffa5 	bl	8001348 <Delay_us>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80013fe:	2102      	movs	r1, #2
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 8001402:	f002 f967 	bl	80036d4 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <DS18B20_ReadBit+0x3c>
  {
    bit = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  }
  Delay_us(50); // 等待时间片结束 (60-120us)
 8001410:	2032      	movs	r0, #50	@ 0x32
 8001412:	f7ff ff99 	bl	8001348 <Delay_us>
  return bit;
 8001416:	79fb      	ldrb	r3, [r7, #7]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40010800 	.word	0x40010800

08001424 <DS18B20_WriteByte>:

// 向DS18B20写入1字节 (保持不变)
void DS18B20_WriteByte(uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e00c      	b.n	800144e <DS18B20_WriteByte+0x2a>
  {
    DS18B20_WriteBit(data & 0x01);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffa3 	bl	8001388 <DS18B20_WriteBit>
    data >>= 1;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d9ef      	bls.n	8001434 <DS18B20_WriteByte+0x10>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <DS18B20_ReadByte>:

// 从DS18B20读取1字节 (保持不变)
uint8_t DS18B20_ReadByte(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	71bb      	strb	r3, [r7, #6]
 800146c:	e00e      	b.n	800148c <DS18B20_ReadByte+0x2e>
  {
    data >>= 1;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	71fb      	strb	r3, [r7, #7]
    if (DS18B20_ReadBit())
 8001474:	f7ff ffae 	bl	80013d4 <DS18B20_ReadBit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <DS18B20_ReadByte+0x28>
    {
      data |= 0x80;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001484:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	3301      	adds	r3, #1
 800148a:	71bb      	strb	r3, [r7, #6]
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9ed      	bls.n	800146e <DS18B20_ReadByte+0x10>
    }
  }
  return data;
 8001492:	79fb      	ldrb	r3, [r7, #7]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <DS18B20_Reset>:

// 复位DS18B20 (保持不变)
// 返回 0 表示成功检测到存在脉冲, 1 表示无设备响应
uint8_t DS18B20_Reset(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  uint8_t status;
  // 配置为推挽输出
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DS18B20_PIN;
 80014ae:	2302      	movs	r3, #2
 80014b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	481e      	ldr	r0, [pc, #120]	@ (800153c <DS18B20_Reset+0xa0>)
 80014c4:	f001 ff82 	bl	80033cc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	481b      	ldr	r0, [pc, #108]	@ (800153c <DS18B20_Reset+0xa0>)
 80014ce:	f002 f918 	bl	8003702 <HAL_GPIO_WritePin>
  Delay_us(480); // 至少480us
 80014d2:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80014d6:	f7ff ff37 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2102      	movs	r1, #2
 80014de:	4817      	ldr	r0, [pc, #92]	@ (800153c <DS18B20_Reset+0xa0>)
 80014e0:	f002 f90f 	bl	8003702 <HAL_GPIO_WritePin>

  // 配置为浮空输入
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 或 GPIO_PULLUP，取决于外部上拉
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4812      	ldr	r0, [pc, #72]	@ (800153c <DS18B20_Reset+0xa0>)
 80014f2:	f001 ff6b 	bl	80033cc <HAL_GPIO_Init>

  Delay_us(60);                                         // 等待15-60us后采样
 80014f6:	203c      	movs	r0, #60	@ 0x3c
 80014f8:	f7ff ff26 	bl	8001348 <Delay_us>
  status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN); // 读取存在脉冲 (低电平有效)
 80014fc:	2102      	movs	r1, #2
 80014fe:	480f      	ldr	r0, [pc, #60]	@ (800153c <DS18B20_Reset+0xa0>)
 8001500:	f002 f8e8 	bl	80036d4 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	75fb      	strb	r3, [r7, #23]
  Delay_us(420);                                        // 等待存在脉冲结束 (总共480us)
 8001508:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800150c:	f7ff ff1c 	bl	8001348 <Delay_us>

  // 恢复为推挽输出，准备后续通信
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <DS18B20_Reset+0xa0>)
 8001522:	f001 ff53 	bl	80033cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 8001526:	2201      	movs	r2, #1
 8001528:	2102      	movs	r1, #2
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <DS18B20_Reset+0xa0>)
 800152c:	f002 f8e9 	bl	8003702 <HAL_GPIO_WritePin>

  return status; // 0=成功, 1=失败
 8001530:	7dfb      	ldrb	r3, [r7, #23]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010800 	.word	0x40010800

08001540 <crc8>:

// --- 新增：CRC8校验函数 ---
uint8_t crc8(const uint8_t *addr, uint8_t len)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  while (len--)
 8001550:	e022      	b.n	8001598 <crc8+0x58>
  {
    uint8_t inbyte = *addr++;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800155c:	2308      	movs	r3, #8
 800155e:	737b      	strb	r3, [r7, #13]
 8001560:	e017      	b.n	8001592 <crc8+0x52>
    {
      uint8_t mix = (crc ^ inbyte) & 0x01;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	4053      	eors	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      if (mix)
 8001576:	7b3b      	ldrb	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <crc8+0x46>
        crc ^= 0x8C; // 校验多项式 X^8 + X^5 + X^4 + 1
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001582:	43db      	mvns	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
      inbyte >>= 1;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	3b01      	subs	r3, #1
 8001590:	737b      	strb	r3, [r7, #13]
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <crc8+0x22>
  while (len--)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	70fa      	strb	r2, [r7, #3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1d7      	bne.n	8001552 <crc8+0x12>
    }
  }
  return crc;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <DS18B20_Search>:

// --- 新增：1-Wire ROM搜索核心函数 ---
// 返回值: 1 = 找到设备, 0 = 未找到/搜索完成
// rom_code: 用于存储找到的ROM地址
uint8_t DS18B20_Search(uint8_t *rom_code)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint8_t search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  // 初始化搜索状态 (仅在首次搜索时)
  id_bit_number = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	733b      	strb	r3, [r7, #12]

  // 如果上一次搜索是最后一次，则重置状态开始新的搜索
  if (LastDeviceFlag)
 80015cc:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <DS18B20_Search+0x3a>
  {
    LastDiscrepancy = 0;
 80015d4:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80015da:	4b5e      	ldr	r3, [pc, #376]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <DS18B20_Search+0x1ac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    return 0; // 没有更多设备
 80015e6:	2300      	movs	r3, #0
 80015e8:	e0af      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 1. 发送复位脉冲
  if (DS18B20_Reset() != 0)
 80015ea:	f7ff ff57 	bl	800149c <DS18B20_Reset>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <DS18B20_Search+0x5a>
  {
    // 总线无响应，重置搜索状态并返回错误
    LastDiscrepancy = 0;
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015fa:	4b58      	ldr	r3, [pc, #352]	@ (800175c <DS18B20_Search+0x1ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001600:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e09f      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 2. 发送 ROM 搜索命令 (0xF0)
  DS18B20_WriteByte(0xF0);
 800160a:	20f0      	movs	r0, #240	@ 0xf0
 800160c:	f7ff ff0a 	bl	8001424 <DS18B20_WriteByte>

  // 3. 循环搜索 ROM 的每一位 (64位)
  do
  {
    // 读取两位 (bit 和 complement bit)
    id_bit = DS18B20_ReadBit();
 8001610:	f7ff fee0 	bl	80013d4 <DS18B20_ReadBit>
 8001614:	4603      	mov	r3, r0
 8001616:	727b      	strb	r3, [r7, #9]
    cmp_id_bit = DS18B20_ReadBit();
 8001618:	f7ff fedc 	bl	80013d4 <DS18B20_ReadBit>
 800161c:	4603      	mov	r3, r0
 800161e:	723b      	strb	r3, [r7, #8]

    // 检查冲突
    if ((id_bit == 1) && (cmp_id_bit == 1))
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <DS18B20_Search+0x7c>
 8001626:	7a3b      	ldrb	r3, [r7, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d061      	beq.n	80016f0 <DS18B20_Search+0x140>
      break;
    }
    else
    {
      // 设备响应了
      if (id_bit != cmp_id_bit)
 800162c:	7a7a      	ldrb	r2, [r7, #9]
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	d002      	beq.n	800163a <DS18B20_Search+0x8a>
      {
        // 所有设备在这一位上值相同，直接选择该位
        search_direction = id_bit;
 8001634:	7a7b      	ldrb	r3, [r7, #9]
 8001636:	72bb      	strb	r3, [r7, #10]
 8001638:	e026      	b.n	8001688 <DS18B20_Search+0xd8>
      }
      else
      {
        // 出现分歧 (Discrepancy)，即至少两个设备在这一位有不同值 (0和1)
        // 如果当前位 < 上次分歧位，选择上次确定的路径
        if (id_bit_number < LastDiscrepancy)
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <DS18B20_Search+0x1a8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	d20d      	bcs.n	8001660 <DS18B20_Search+0xb0>
        {
          search_direction = ((rom_code[rom_byte_number] & rom_byte_mask) > 0);
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	4013      	ands	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	72bb      	strb	r3, [r7, #10]
 800165e:	e008      	b.n	8001672 <DS18B20_Search+0xc2>
        }
        else
        {
          // 如果等于上次分歧位，选择1路径
          // 如果大于上次分歧位，选择0路径 (优先探索0分支)
          search_direction = (id_bit_number == LastDiscrepancy);
 8001660:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	429a      	cmp	r2, r3
 8001668:	bf0c      	ite	eq
 800166a:	2301      	moveq	r3, #1
 800166c:	2300      	movne	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	72bb      	strb	r3, [r7, #10]
        }

        // 如果选择0路径，记录下这个分歧点
        if (search_direction == 0)
 8001672:	7abb      	ldrb	r3, [r7, #10]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <DS18B20_Search+0xd8>
        {
          last_zero = id_bit_number;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	73bb      	strb	r3, [r7, #14]
          // 如果是家族码内的分歧，也记录
          if (last_zero < 9)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d802      	bhi.n	8001688 <DS18B20_Search+0xd8>
            LastFamilyDiscrepancy = last_zero;
 8001682:	4a36      	ldr	r2, [pc, #216]	@ (800175c <DS18B20_Search+0x1ac>)
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	7013      	strb	r3, [r2, #0]
        }
      }

      // 存储选择的位到 ROM code 中
      if (search_direction == 1)
 8001688:	7abb      	ldrb	r3, [r7, #10]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10b      	bne.n	80016a6 <DS18B20_Search+0xf6>
        rom_code[rom_byte_number] |= rom_byte_mask;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	430a      	orrs	r2, r1
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e00f      	b.n	80016c6 <DS18B20_Search+0x116>
      else
        rom_code[rom_byte_number] &= ~rom_byte_mask;
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	b259      	sxtb	r1, r3
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]

      // 发送选择的位，让不匹配的设备进入休眠
      DS18B20_WriteBit(search_direction);
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe5d 	bl	8001388 <DS18B20_WriteBit>

      // 移到下一位
      id_bit_number++;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
      rom_byte_mask <<= 1;
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	72fb      	strb	r3, [r7, #11]

      // 如果一个字节的8位都处理完了，移到下一个字节
      if (rom_byte_mask == 0)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <DS18B20_Search+0x13a>
      {
        rom_byte_number++;
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	3301      	adds	r3, #1
 80016e4:	737b      	strb	r3, [r7, #13]
        rom_byte_mask = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	72fb      	strb	r3, [r7, #11]
      }
    }
  } while (rom_byte_number < 8); // 处理完8个字节 (64位)
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d98f      	bls.n	8001610 <DS18B20_Search+0x60>

  // 4. 检查搜索结果
  if (id_bit_number >= 65)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	d90b      	bls.n	800170e <DS18B20_Search+0x15e>
  { // 成功完成64位搜索
    // 更新下次搜索的分歧点
    LastDiscrepancy = last_zero;
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	7013      	strb	r3, [r2, #0]

    // 检查是否是最后一个设备
    if (LastDiscrepancy == 0)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <DS18B20_Search+0x15a>
    {
      LastDeviceFlag = 1; // 本次是最后一个设备
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    }
    search_result = 1; // 成功找到一个设备
 800170a:	2301      	movs	r3, #1
 800170c:	733b      	strb	r3, [r7, #12]
  }

  // 如果搜索失败或CRC校验失败，重置状态
  if (search_result == 0 || rom_code[0] == 0x00 || crc8(rom_code, 7) != rom_code[7])
 800170e:	7b3b      	ldrb	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <DS18B20_Search+0x182>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <DS18B20_Search+0x182>
 800171c:	2107      	movs	r1, #7
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff0e 	bl	8001540 <crc8>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d00a      	beq.n	8001748 <DS18B20_Search+0x198>
  {
    LastDiscrepancy = 0;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <DS18B20_Search+0x1a4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <DS18B20_Search+0x1ac>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    search_result = 0; // 标记为失败
 8001744:	2300      	movs	r3, #0
 8001746:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 8001748:	7b3b      	ldrb	r3, [r7, #12]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000027b 	.word	0x2000027b
 8001758:	20000279 	.word	0x20000279
 800175c:	2000027a 	.word	0x2000027a

08001760 <DS18B20_ScanDevices>:

// --- 新增：扫描总线上的所有DS18B20设备 ---
void DS18B20_ScanDevices(void)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b0a7      	sub	sp, #156	@ 0x9c
 8001764:	af08      	add	r7, sp, #32
  uint8_t id[8];
  g_num_sensors = 0; // 重置计数器
 8001766:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

  // 重置搜索状态
  LastDiscrepancy = 0;
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <DS18B20_ScanDevices+0x168>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
  LastDeviceFlag = 0;
 8001772:	4b56      	ldr	r3, [pc, #344]	@ (80018cc <DS18B20_ScanDevices+0x16c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
  LastFamilyDiscrepancy = 0;
 8001778:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <DS18B20_ScanDevices+0x170>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]

  // 循环搜索，直到找不到更多设备
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 800177e:	e020      	b.n	80017c2 <DS18B20_ScanDevices+0x62>
  {
    // 检查是否是DS18B20家族码 (0x28)
    if (id[0] == 0x28)
 8001780:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001784:	2b28      	cmp	r3, #40	@ 0x28
 8001786:	d11c      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
    {
      // 检查CRC校验
      if (crc8(id, 7) == id[7])
 8001788:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800178c:	2107      	movs	r1, #7
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fed6 	bl	8001540 <crc8>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800179c:	429a      	cmp	r2, r3
 800179e:	d110      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
      {
        memcpy(g_ds18b20_roms[g_num_sensors], id, 8);
 80017a0:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017b0:	cb03      	ldmia	r3!, {r0, r1}
 80017b2:	6010      	str	r0, [r2, #0]
 80017b4:	6051      	str	r1, [r2, #4]
        g_num_sensors++;
 80017b6:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017c0:	701a      	strb	r2, [r3, #0]
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 80017c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fef2 	bl	80015b0 <DS18B20_Search>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <DS18B20_ScanDevices+0x7a>
 80017d2:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d9d2      	bls.n	8001780 <DS18B20_ScanDevices+0x20>
    }
    // 如果需要支持其他家族码，可以在这里添加判断
  }
  // 可以在这里通过串口打印找到的传感器数量和ROM地址，用于调试
  char dbg_msg[100];
  sprintf(dbg_msg, "Found %d DS18B20 sensors.\r\n", g_num_sensors);
 80017da:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	493c      	ldr	r1, [pc, #240]	@ (80018d8 <DS18B20_ScanDevices+0x178>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fe6a 	bl	80064c0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 100);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcad 	bl	8000150 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f107 0108 	add.w	r1, r7, #8
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	4836      	ldr	r0, [pc, #216]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 8001802:	f003 f893 	bl	800492c <HAL_UART_Transmit>
  for (int i = 0; i < g_num_sensors; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	677b      	str	r3, [r7, #116]	@ 0x74
 800180a:	e050      	b.n	80018ae <DS18B20_ScanDevices+0x14e>
  {
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800180c:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800180e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	79db      	ldrb	r3, [r3, #7]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001816:	469c      	mov	ip, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001818:	4a2e      	ldr	r2, [pc, #184]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800181a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	799b      	ldrb	r3, [r3, #6]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001822:	4619      	mov	r1, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	795b      	ldrb	r3, [r3, #5]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800182e:	461c      	mov	r4, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001830:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	791b      	ldrb	r3, [r3, #4]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800183a:	461d      	mov	r5, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 800183c:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800183e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	78db      	ldrb	r3, [r3, #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001846:	461e      	mov	r6, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001848:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800184a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	789b      	ldrb	r3, [r3, #2]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001852:	607b      	str	r3, [r7, #4]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001854:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	785b      	ldrb	r3, [r3, #1]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800185e:	603b      	str	r3, [r7, #0]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001860:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001864:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001868:	f107 0008 	add.w	r0, r7, #8
 800186c:	9306      	str	r3, [sp, #24]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	9205      	str	r2, [sp, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	9304      	str	r3, [sp, #16]
 8001876:	9603      	str	r6, [sp, #12]
 8001878:	9502      	str	r5, [sp, #8]
 800187a:	9401      	str	r4, [sp, #4]
 800187c:	9100      	str	r1, [sp, #0]
 800187e:	4663      	mov	r3, ip
 8001880:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <DS18B20_ScanDevices+0x180>)
 8001884:	f004 fe1c 	bl	80064c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 200);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc5f 	bl	8000150 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	23c8      	movs	r3, #200	@ 0xc8
 800189c:	480f      	ldr	r0, [pc, #60]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 800189e:	f003 f845 	bl	800492c <HAL_UART_Transmit>
    HAL_Delay(10); // 短暂延时避免串口发送过快
 80018a2:	200a      	movs	r0, #10
 80018a4:	f001 fbae 	bl	8003004 <HAL_Delay>
  for (int i = 0; i < g_num_sensors; i++)
 80018a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018aa:	3301      	adds	r3, #1
 80018ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b6:	4293      	cmp	r3, r2
 80018b8:	dba8      	blt.n	800180c <DS18B20_ScanDevices+0xac>
  }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	377c      	adds	r7, #124	@ 0x7c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	20000278 	.word	0x20000278
 80018c8:	20000279 	.word	0x20000279
 80018cc:	2000027b 	.word	0x2000027b
 80018d0:	2000027a 	.word	0x2000027a
 80018d4:	20000250 	.word	0x20000250
 80018d8:	08009c60 	.word	0x08009c60
 80018dc:	20000720 	.word	0x20000720
 80018e0:	08009c7c 	.word	0x08009c7c

080018e4 <DS18B20_Select>:

// --- 新增：选择指定ROM地址的设备 ---
void DS18B20_Select(const uint8_t *rom_code)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  DS18B20_WriteByte(0x55); // Match ROM command
 80018ec:	2055      	movs	r0, #85	@ 0x55
 80018ee:	f7ff fd99 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e009      	b.n	800190c <DS18B20_Select+0x28>
  {
    DS18B20_WriteByte(rom_code[i]);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fd8f 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d9f2      	bls.n	80018f8 <DS18B20_Select+0x14>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DS18B20_SkipRom>:

// --- 新增：向总线上所有设备发送命令 (使用 Skip ROM) ---
void DS18B20_SkipRom(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  DS18B20_WriteByte(0xCC); // Skip ROM command
 8001920:	20cc      	movs	r0, #204	@ 0xcc
 8001922:	f7ff fd7f 	bl	8001424 <DS18B20_WriteByte>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <DS18B20_GetTemp>:

// --- 修改：读取指定ROM地址的温度值 ---
// 返回值：读取到的温度，或特定错误值 (例如 -999.0)
float DS18B20_GetTemp(const uint8_t *rom_code)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t tempL, tempH;
  uint16_t temp;
  float result = -999.0; // 默认错误值
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <DS18B20_GetTemp+0x98>)
 8001936:	60fb      	str	r3, [r7, #12]

  // 1. 复位并选择指定设备
  if (DS18B20_Reset() != 0)
 8001938:	f7ff fdb0 	bl	800149c <DS18B20_Reset>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <DS18B20_GetTemp+0x1a>
    return result; // 复位失败
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	e039      	b.n	80019ba <DS18B20_GetTemp+0x8e>
  DS18B20_Select(rom_code);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffcc 	bl	80018e4 <DS18B20_Select>

  // 2. 发送读取暂存器命令 (0xBE)
  DS18B20_WriteByte(0xBE);
 800194c:	20be      	movs	r0, #190	@ 0xbe
 800194e:	f7ff fd69 	bl	8001424 <DS18B20_WriteByte>

  // 3. 读取暂存器内容 (前两个字节是温度)
  //    注意：实际应用中应读取全部9个字节并校验CRC
  tempL = DS18B20_ReadByte();
 8001952:	f7ff fd84 	bl	800145e <DS18B20_ReadByte>
 8001956:	4603      	mov	r3, r0
 8001958:	72fb      	strb	r3, [r7, #11]
  tempH = DS18B20_ReadByte();
 800195a:	f7ff fd80 	bl	800145e <DS18B20_ReadByte>
 800195e:	4603      	mov	r3, r0
 8001960:	72bb      	strb	r3, [r7, #10]
  //     // CRC校验失败
  //     return -998.0; // 返回不同的错误码
  // }

  // 4. 计算温度
  temp = (tempH << 8) | tempL;
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	b21b      	sxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	813b      	strh	r3, [r7, #8]

  // 处理负温度 (符号扩展)
  if (temp & 0x8000)
 8001974:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da11      	bge.n	80019a0 <DS18B20_GetTemp+0x74>
  {
    temp = ~temp + 1; // 取反加一
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	425b      	negs	r3, r3
 8001980:	813b      	strh	r3, [r7, #8]
    result = -(float)temp / 16.0;
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9a5 	bl	8000cd4 <__aeabi_ui2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001990:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff faa9 	bl	8000eec <__aeabi_fdiv>
 800199a:	4603      	mov	r3, r0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00b      	b.n	80019b8 <DS18B20_GetTemp+0x8c>
  }
  else
  {
    result = (float)temp / 16.0;
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f996 	bl	8000cd4 <__aeabi_ui2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa9c 	bl	8000eec <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    // 可能读取错误，可以返回特定错误值或上次有效值
    // return -997.0;
  }

  return result;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	c479c000 	.word	0xc479c000

080019c8 <DS18B20_StartConversionAll>:

// 启动所有连接设备的温度转换 ---
uint8_t DS18B20_StartConversionAll(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  if (DS18B20_Reset() != 0)
 80019cc:	f7ff fd66 	bl	800149c <DS18B20_Reset>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <DS18B20_StartConversionAll+0x12>
    return 1;              // 复位失败
 80019d6:	2301      	movs	r3, #1
 80019d8:	e005      	b.n	80019e6 <DS18B20_StartConversionAll+0x1e>
  DS18B20_SkipRom();       // 使用 Skip ROM 命令
 80019da:	f7ff ff9f 	bl	800191c <DS18B20_SkipRom>
  DS18B20_WriteByte(0x44); // 启动温度转换命令
 80019de:	2044      	movs	r0, #68	@ 0x44
 80019e0:	f7ff fd20 	bl	8001424 <DS18B20_WriteByte>
  return 0;                // 成功启动
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_UART_RxCpltCallback>:

// --- 新增：串口3接收中断回调函数 ---
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d137      	bne.n	8001a6e <HAL_UART_RxCpltCallback+0x82>
  {
    // 检查是否接收到换行符或回车符
    if (uart3_current_char == '\n' || uart3_current_char == '\r')
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d003      	beq.n	8001a0e <HAL_UART_RxCpltCallback+0x22>
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b0d      	cmp	r3, #13
 8001a0c:	d10c      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x3c>
    {
      uart3_rx_buffer[uart3_rx_index] = '\0'; // 添加字符串结束符
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_UART_RxCpltCallback+0x98>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]
      uart3_rx_complete = 1; // 标记接收完成
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_UART_RxCpltCallback+0x9c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
      uart3_rx_index = 0;    // 重置索引
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_UART_RxCpltCallback+0x78>
    }
    else if (uart3_rx_index >= UART3_RX_BUFFER_SIZE - 2) // 留一个位置给\0
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a2e:	d90c      	bls.n	8001a4a <HAL_UART_RxCpltCallback+0x5e>
    {
      uart3_rx_buffer[uart3_rx_index] = '\0'; // 添加字符串结束符
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_UART_RxCpltCallback+0x98>)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
      uart3_rx_complete = 1; // 标记接收完成
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_UART_RxCpltCallback+0x9c>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
      uart3_rx_index = 0;    // 重置索引
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e00c      	b.n	8001a64 <HAL_UART_RxCpltCallback+0x78>
    }
    else
    {
      // 存储接收到的字符
      uart3_rx_buffer[uart3_rx_index] = uart3_current_char;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a52:	7819      	ldrb	r1, [r3, #0]
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_UART_RxCpltCallback+0x98>)
 8001a56:	5499      	strb	r1, [r3, r2]
      uart3_rx_index++; // 移动到下一个位置
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <HAL_UART_RxCpltCallback+0x94>)
 8001a62:	701a      	strb	r2, [r3, #0]
    }
    
    // 重新启动接收中断，继续接收下一个字符
    HAL_UART_Receive_IT(&huart3, &uart3_current_char, 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	4905      	ldr	r1, [pc, #20]	@ (8001a7c <HAL_UART_RxCpltCallback+0x90>)
 8001a68:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <HAL_UART_RxCpltCallback+0xa0>)
 8001a6a:	f002 ffea 	bl	8004a42 <HAL_UART_Receive_IT>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40004800 	.word	0x40004800
 8001a7c:	200002bc 	.word	0x200002bc
 8001a80:	200002ba 	.word	0x200002ba
 8001a84:	20000288 	.word	0x20000288
 8001a88:	200002bb 	.word	0x200002bb
 8001a8c:	20000720 	.word	0x20000720

08001a90 <Parse_UART3_Command>:

// --- 新增：解析串口命令 ---
void Parse_UART3_Command(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0a0      	sub	sp, #128	@ 0x80
 8001a94:	af02      	add	r7, sp, #8
  if (!uart3_rx_complete) return;
 8001a96:	4b96      	ldr	r3, [pc, #600]	@ (8001cf0 <Parse_UART3_Command+0x260>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8123 	beq.w	8001ce6 <Parse_UART3_Command+0x256>
  
  char *command = (char *)uart3_rx_buffer;
 8001aa0:	4b94      	ldr	r3, [pc, #592]	@ (8001cf4 <Parse_UART3_Command+0x264>)
 8001aa2:	673b      	str	r3, [r7, #112]	@ 0x70
  char response[100];
  
  // 添加详细调试信息 - 显示缓冲区内容
  sprintf(response, "RX Complete! Buffer: [");
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4994      	ldr	r1, [pc, #592]	@ (8001cf8 <Parse_UART3_Command+0x268>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fd09 	bl	80064c0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fb4d 	bl	8000150 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	1d39      	adds	r1, r7, #4
 8001abc:	23c8      	movs	r3, #200	@ 0xc8
 8001abe:	488f      	ldr	r0, [pc, #572]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001ac0:	f002 ff34 	bl	800492c <HAL_UART_Transmit>
  
  for (int i = 0; i < uart3_rx_index; i++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ac8:	e017      	b.n	8001afa <Parse_UART3_Command+0x6a>
    sprintf(response, "%02X ", uart3_rx_buffer[i]);
 8001aca:	4a8a      	ldr	r2, [pc, #552]	@ (8001cf4 <Parse_UART3_Command+0x264>)
 8001acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	498a      	ldr	r1, [pc, #552]	@ (8001d00 <Parse_UART3_Command+0x270>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fcf1 	bl	80064c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fb35 	bl	8000150 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	1d39      	adds	r1, r7, #4
 8001aec:	23c8      	movs	r3, #200	@ 0xc8
 8001aee:	4883      	ldr	r0, [pc, #524]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001af0:	f002 ff1c 	bl	800492c <HAL_UART_Transmit>
  for (int i = 0; i < uart3_rx_index; i++) {
 8001af4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af6:	3301      	adds	r3, #1
 8001af8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001afa:	4b82      	ldr	r3, [pc, #520]	@ (8001d04 <Parse_UART3_Command+0x274>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b02:	4293      	cmp	r3, r2
 8001b04:	dbe1      	blt.n	8001aca <Parse_UART3_Command+0x3a>
  }
  
  sprintf(response, "] String: [%s] (len=%d, index=%d)\r\n", command, strlen(command), uart3_rx_index);
 8001b06:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b08:	f7fe fb22 	bl	8000150 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d04 <Parse_UART3_Command+0x274>)
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	1d38      	adds	r0, r7, #4
 8001b14:	9200      	str	r2, [sp, #0]
 8001b16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001b18:	497b      	ldr	r1, [pc, #492]	@ (8001d08 <Parse_UART3_Command+0x278>)
 8001b1a:	f004 fcd1 	bl	80064c0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb15 	bl	8000150 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	1d39      	adds	r1, r7, #4
 8001b2c:	23c8      	movs	r3, #200	@ 0xc8
 8001b2e:	4873      	ldr	r0, [pc, #460]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001b30:	f002 fefc 	bl	800492c <HAL_UART_Transmit>
  
  // 解析 "on" 命令
  if (strncmp(command, "on", 2) == 0)
 8001b34:	2202      	movs	r2, #2
 8001b36:	4975      	ldr	r1, [pc, #468]	@ (8001d0c <Parse_UART3_Command+0x27c>)
 8001b38:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b3a:	f004 fd3d 	bl	80065b8 <strncmp>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d152      	bne.n	8001bea <Parse_UART3_Command+0x15a>
  {
    uint32_t duration = atoi(command + 2); // 提取数字部分
 8001b44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b46:	3302      	adds	r3, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fd09 	bl	8005560 <atoi>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	66bb      	str	r3, [r7, #104]	@ 0x68
    sprintf(response, "Parsed duration: %lu\r\n", duration);
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001b56:	496e      	ldr	r1, [pc, #440]	@ (8001d10 <Parse_UART3_Command+0x280>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 fcb1 	bl	80064c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe faf5 	bl	8000150 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	1d39      	adds	r1, r7, #4
 8001b6c:	23c8      	movs	r3, #200	@ 0xc8
 8001b6e:	4863      	ldr	r0, [pc, #396]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001b70:	f002 fedc 	bl	800492c <HAL_UART_Transmit>
    
    if (duration > 0 && duration <= 9999) // 限制最大时间
 8001b74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d025      	beq.n	8001bc6 <Parse_UART3_Command+0x136>
 8001b7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d820      	bhi.n	8001bc6 <Parse_UART3_Command+0x136>
    {
      relay_timer_count = duration;
 8001b84:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <Parse_UART3_Command+0x284>)
 8001b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b88:	6013      	str	r3, [r2, #0]
      relay_timer_active = 1;
 8001b8a:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <Parse_UART3_Command+0x288>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
      relay_force_state = 1;
 8001b90:	4b62      	ldr	r3, [pc, #392]	@ (8001d1c <Parse_UART3_Command+0x28c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
      relay_temp_control = 0; // 禁用温度控制
 8001b96:	4b62      	ldr	r3, [pc, #392]	@ (8001d20 <Parse_UART3_Command+0x290>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
      RELAY_Control(1);       // 立即打开继电器
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fbbd 	bl	800131c <RELAY_Control>
      
      sprintf(response, "Relay ON for %lu seconds\r\n", duration);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001ba6:	495f      	ldr	r1, [pc, #380]	@ (8001d24 <Parse_UART3_Command+0x294>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fc89 	bl	80064c0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe facd 	bl	8000150 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	1d39      	adds	r1, r7, #4
 8001bbc:	23c8      	movs	r3, #200	@ 0xc8
 8001bbe:	484f      	ldr	r0, [pc, #316]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001bc0:	f002 feb4 	bl	800492c <HAL_UART_Transmit>
 8001bc4:	e08b      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
    else
    {
      sprintf(response, "Invalid duration: %s (parsed: %lu)\r\n", command, duration);
 8001bc6:	1d38      	adds	r0, r7, #4
 8001bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001bcc:	4956      	ldr	r1, [pc, #344]	@ (8001d28 <Parse_UART3_Command+0x298>)
 8001bce:	f004 fc77 	bl	80064c0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fabb 	bl	8000150 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	1d39      	adds	r1, r7, #4
 8001be0:	23c8      	movs	r3, #200	@ 0xc8
 8001be2:	4846      	ldr	r0, [pc, #280]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001be4:	f002 fea2 	bl	800492c <HAL_UART_Transmit>
 8001be8:	e079      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
  }
  // 解析 "off" 命令
  else if (strncmp(command, "off", 3) == 0)
 8001bea:	2203      	movs	r2, #3
 8001bec:	494f      	ldr	r1, [pc, #316]	@ (8001d2c <Parse_UART3_Command+0x29c>)
 8001bee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001bf0:	f004 fce2 	bl	80065b8 <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d141      	bne.n	8001c7e <Parse_UART3_Command+0x1ee>
  {
    uint32_t duration = atoi(command + 3); // 提取数字部分
 8001bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fcae 	bl	8005560 <atoi>
 8001c04:	4603      	mov	r3, r0
 8001c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (duration > 0 && duration <= 9999) // 限制最大时间
 8001c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d025      	beq.n	8001c5a <Parse_UART3_Command+0x1ca>
 8001c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d820      	bhi.n	8001c5a <Parse_UART3_Command+0x1ca>
    {
      relay_timer_count = duration;
 8001c18:	4a3e      	ldr	r2, [pc, #248]	@ (8001d14 <Parse_UART3_Command+0x284>)
 8001c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c1c:	6013      	str	r3, [r2, #0]
      relay_timer_active = 1;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <Parse_UART3_Command+0x288>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
      relay_force_state = 0;
 8001c24:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <Parse_UART3_Command+0x28c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
      relay_temp_control = 0; // 禁用温度控制
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <Parse_UART3_Command+0x290>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
      RELAY_Control(0);       // 立即关闭继电器
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fb73 	bl	800131c <RELAY_Control>
      
      sprintf(response, "Relay OFF for %lu seconds\r\n", duration);
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c3a:	493d      	ldr	r1, [pc, #244]	@ (8001d30 <Parse_UART3_Command+0x2a0>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fc3f 	bl	80064c0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fa83 	bl	8000150 <strlen>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	1d39      	adds	r1, r7, #4
 8001c50:	23c8      	movs	r3, #200	@ 0xc8
 8001c52:	482a      	ldr	r0, [pc, #168]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001c54:	f002 fe6a 	bl	800492c <HAL_UART_Transmit>
 8001c58:	e041      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
    else
    {
      sprintf(response, "Invalid duration: %s\r\n", command);
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001c5e:	4935      	ldr	r1, [pc, #212]	@ (8001d34 <Parse_UART3_Command+0x2a4>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fc2d 	bl	80064c0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fa71 	bl	8000150 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	1d39      	adds	r1, r7, #4
 8001c74:	23c8      	movs	r3, #200	@ 0xc8
 8001c76:	4821      	ldr	r0, [pc, #132]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001c78:	f002 fe58 	bl	800492c <HAL_UART_Transmit>
 8001c7c:	e02f      	b.n	8001cde <Parse_UART3_Command+0x24e>
    }
  }
  // 解析 "auto" 命令 - 恢复温度控制
  else if (strncmp(command, "auto", 4) == 0)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	492d      	ldr	r1, [pc, #180]	@ (8001d38 <Parse_UART3_Command+0x2a8>)
 8001c82:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001c84:	f004 fc98 	bl	80065b8 <strncmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <Parse_UART3_Command+0x22c>
  {
    relay_timer_active = 0;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <Parse_UART3_Command+0x288>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    relay_temp_control = 1; // 重新启用温度控制
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <Parse_UART3_Command+0x290>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
    sprintf(response, "Auto temperature control enabled\r\n");
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4927      	ldr	r1, [pc, #156]	@ (8001d3c <Parse_UART3_Command+0x2ac>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fc0e 	bl	80064c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fa52 	bl	8000150 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	23c8      	movs	r3, #200	@ 0xc8
 8001cb4:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001cb6:	f002 fe39 	bl	800492c <HAL_UART_Transmit>
 8001cba:	e010      	b.n	8001cde <Parse_UART3_Command+0x24e>
  }
  else
  {
    sprintf(response, "Unknown command: %s\r\n", command);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001cc0:	491f      	ldr	r1, [pc, #124]	@ (8001d40 <Parse_UART3_Command+0x2b0>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fbfc 	bl	80064c0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fa40 	bl	8000150 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	1d39      	adds	r1, r7, #4
 8001cd6:	23c8      	movs	r3, #200	@ 0xc8
 8001cd8:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <Parse_UART3_Command+0x26c>)
 8001cda:	f002 fe27 	bl	800492c <HAL_UART_Transmit>
  }
  
  uart3_rx_complete = 0; // 重置完成标志
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <Parse_UART3_Command+0x260>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e000      	b.n	8001ce8 <Parse_UART3_Command+0x258>
  if (!uart3_rx_complete) return;
 8001ce6:	bf00      	nop
}
 8001ce8:	3778      	adds	r7, #120	@ 0x78
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002bb 	.word	0x200002bb
 8001cf4:	20000288 	.word	0x20000288
 8001cf8:	08009cb0 	.word	0x08009cb0
 8001cfc:	20000720 	.word	0x20000720
 8001d00:	08009cc8 	.word	0x08009cc8
 8001d04:	200002ba 	.word	0x200002ba
 8001d08:	08009cd0 	.word	0x08009cd0
 8001d0c:	08009cf4 	.word	0x08009cf4
 8001d10:	08009cf8 	.word	0x08009cf8
 8001d14:	200002c0 	.word	0x200002c0
 8001d18:	200002c4 	.word	0x200002c4
 8001d1c:	200002c5 	.word	0x200002c5
 8001d20:	20000000 	.word	0x20000000
 8001d24:	08009d10 	.word	0x08009d10
 8001d28:	08009d2c 	.word	0x08009d2c
 8001d2c:	08009d54 	.word	0x08009d54
 8001d30:	08009d58 	.word	0x08009d58
 8001d34:	08009d74 	.word	0x08009d74
 8001d38:	08009d8c 	.word	0x08009d8c
 8001d3c:	08009d94 	.word	0x08009d94
 8001d40:	08009db8 	.word	0x08009db8

08001d44 <Update_Relay_Timer>:

// --- 新增：更新继电器定时器 ---
void Update_Relay_Timer(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	@ 0x38
 8001d48:	af00      	add	r7, sp, #0
  if (relay_timer_active && relay_timer_count > 0)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <Update_Relay_Timer+0x5c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d022      	beq.n	8001d98 <Update_Relay_Timer+0x54>
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01e      	beq.n	8001d98 <Update_Relay_Timer+0x54>
  {
    relay_timer_count--;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a10      	ldr	r2, [pc, #64]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d62:	6013      	str	r3, [r2, #0]
    
    // 定时器到期
    if (relay_timer_count == 0)
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <Update_Relay_Timer+0x60>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d115      	bne.n	8001d98 <Update_Relay_Timer+0x54>
    {
      relay_timer_active = 0;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <Update_Relay_Timer+0x5c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
      relay_temp_control = 1; // 重新启用温度控制
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <Update_Relay_Timer+0x64>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
      
      char response[50];
      sprintf(response, "Timer expired, auto control enabled\r\n");
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	490c      	ldr	r1, [pc, #48]	@ (8001dac <Update_Relay_Timer+0x68>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fb9f 	bl	80064c0 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 200);
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe f9e3 	bl	8000150 <strlen>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	1d39      	adds	r1, r7, #4
 8001d90:	23c8      	movs	r3, #200	@ 0xc8
 8001d92:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <Update_Relay_Timer+0x6c>)
 8001d94:	f002 fdca 	bl	800492c <HAL_UART_Transmit>
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	@ 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200002c4 	.word	0x200002c4
 8001da4:	200002c0 	.word	0x200002c0
 8001da8:	20000000 	.word	0x20000000
 8001dac:	08009dd0 	.word	0x08009dd0
 8001db0:	20000720 	.word	0x20000720

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b0d9      	sub	sp, #356	@ 0x164
 8001db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f001 f8c1 	bl	8002f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 fb03 	bl	80023c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f7ff f9db 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001dc6:	f000 ffb1 	bl	8002d2c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001dca:	f000 ffd9 	bl	8002d80 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001dce:	f7ff fa2d 	bl	800122c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */  RELAY_Init();
 8001dd2:	f7ff fa97 	bl	8001304 <RELAY_Init>
  OLED_Init();  // 初始化OLED
 8001dd6:	f000 fd3d 	bl	8002854 <OLED_Init>

  // --- 新增：初始化PA2/PA3为输入上拉 ---
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001dde:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	6053      	str	r3, [r2, #4]
 8001dea:	6093      	str	r3, [r2, #8]
 8001dec:	60d3      	str	r3, [r2, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001df2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001dfe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e06:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001e0a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e0e:	2201      	movs	r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e16:	4619      	mov	r1, r3
 8001e18:	489d      	ldr	r0, [pc, #628]	@ (8002090 <main+0x2dc>)
 8001e1a:	f001 fad7 	bl	80033cc <HAL_GPIO_Init>

  HAL_Delay(100); // 等待总线稳定
 8001e1e:	2064      	movs	r0, #100	@ 0x64
 8001e20:	f001 f8f0 	bl	8003004 <HAL_Delay>

  // 启动串口3接收中断
  HAL_UART_Receive_IT(&huart3, &uart3_current_char, 1);
 8001e24:	2201      	movs	r2, #1
 8001e26:	499b      	ldr	r1, [pc, #620]	@ (8002094 <main+0x2e0>)
 8001e28:	489b      	ldr	r0, [pc, #620]	@ (8002098 <main+0x2e4>)
 8001e2a:	f002 fe0a 	bl	8004a42 <HAL_UART_Receive_IT>

  // 在OLED上显示欢迎信息
  OLED_ShowString(0, 0, "DS18B20 Temperature", 8);
 8001e2e:	2308      	movs	r3, #8
 8001e30:	4a9a      	ldr	r2, [pc, #616]	@ (800209c <main+0x2e8>)
 8001e32:	2100      	movs	r1, #0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fcd7 	bl	80027e8 <OLED_ShowString>
  OLED_ShowString(0, 16, "System Initializing", 8);
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	4a98      	ldr	r2, [pc, #608]	@ (80020a0 <main+0x2ec>)
 8001e3e:	2110      	movs	r1, #16
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 fcd1 	bl	80027e8 <OLED_ShowString>
  OLED_Refresh();
 8001e46:	f000 fb27 	bl	8002498 <OLED_Refresh>
    HAL_Delay(1000); // 显示欢迎信息一段时间
 8001e4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e4e:	f001 f8d9 	bl	8003004 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)"DS18B20 Multi-Sensor Test\r\n", strlen("DS18B20 Multi-Sensor Test\r\n"), 100);
 8001e52:	2364      	movs	r3, #100	@ 0x64
 8001e54:	221b      	movs	r2, #27
 8001e56:	4993      	ldr	r1, [pc, #588]	@ (80020a4 <main+0x2f0>)
 8001e58:	4893      	ldr	r0, [pc, #588]	@ (80020a8 <main+0x2f4>)
 8001e5a:	f002 fd67 	bl	800492c <HAL_UART_Transmit>

  // --- 修改：扫描设备 ---
  DS18B20_ScanDevices();
 8001e5e:	f7ff fc7f 	bl	8001760 <DS18B20_ScanDevices>

    // 在OLED上显示传感器信息
  OLED_DisplaySensorInfo(g_num_sensors);
 8001e62:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <main+0x2f8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fde6 	bl	8002a38 <OLED_DisplaySensorInfo>
  HAL_Delay(2000);
 8001e6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e70:	f001 f8c8 	bl	8003004 <HAL_Delay>
  OLED_Clear(); // 清屏
 8001e74:	f000 fb60 	bl	8002538 <OLED_Clear>

  if (g_num_sensors == 0)
 8001e78:	4b8c      	ldr	r3, [pc, #560]	@ (80020ac <main+0x2f8>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <main+0xdc>
  {
    HAL_UART_Transmit(&huart1, (uint8_t *)"No DS18B20 sensors found!\r\n", strlen("No DS18B20 sensors found!\r\n"), 100);
 8001e80:	2364      	movs	r3, #100	@ 0x64
 8001e82:	221b      	movs	r2, #27
 8001e84:	498a      	ldr	r1, [pc, #552]	@ (80020b0 <main+0x2fc>)
 8001e86:	4888      	ldr	r0, [pc, #544]	@ (80020a8 <main+0x2f4>)
 8001e88:	f002 fd50 	bl	800492c <HAL_UART_Transmit>
    while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <main+0xd8>
  // float temperature;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */  
  uint32_t last_task_tick = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 处理串口3接收到的命令
    Parse_UART3_Command();
 8001e96:	f7ff fdfb 	bl	8001a90 <Parse_UART3_Command>
    
    // 更新继电器定时器（每秒调用一次）
    static uint32_t last_timer_update = 0;
    if (HAL_GetTick() - last_timer_update >= 1000) // 每1000ms更新一次
 8001e9a:	f001 f8a9 	bl	8002ff0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b84      	ldr	r3, [pc, #528]	@ (80020b4 <main+0x300>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eaa:	d306      	bcc.n	8001eba <main+0x106>
    {
      Update_Relay_Timer();
 8001eac:	f7ff ff4a 	bl	8001d44 <Update_Relay_Timer>
      last_timer_update = HAL_GetTick();
 8001eb0:	f001 f89e 	bl	8002ff0 <HAL_GetTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4a7f      	ldr	r2, [pc, #508]	@ (80020b4 <main+0x300>)
 8001eb8:	6013      	str	r3, [r2, #0]
    }

    // --- 非阻塞定时任务：每2秒采集温度和控制继电器 ---
    if (HAL_GetTick() - last_task_tick >= 2000) {
 8001eba:	f001 f899 	bl	8002ff0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001eca:	f0c0 811c 	bcc.w	8002106 <main+0x352>
      last_task_tick = HAL_GetTick();
 8001ece:	f001 f88f 	bl	8002ff0 <HAL_GetTick>
 8001ed2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
      // 1. 启动所有传感器的温度转换
      if (DS18B20_StartConversionAll() == 0)
 8001ed6:	f7ff fd77 	bl	80019c8 <DS18B20_StartConversionAll>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 80ff 	bne.w	80020e0 <main+0x32c>
      {     
        HAL_Delay(750); // 等待转换完成（可进一步优化为非阻塞）
 8001ee2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001ee6:	f001 f88d 	bl	8003004 <HAL_Delay>
        // 3. 依次读取每个传感器的温度
        for (uint8_t i = 0; i < g_num_sensors; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
 8001ef0:	e015      	b.n	8001f1e <main+0x16a>
        {
          float temperature = DS18B20_GetTemp(g_ds18b20_roms[i]);
 8001ef2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4a6f      	ldr	r2, [pc, #444]	@ (80020b8 <main+0x304>)
 8001efa:	4413      	add	r3, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fd15 	bl	800192c <DS18B20_GetTemp>
 8001f02:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
          temperatureArray[i] = temperature;
 8001f06:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8001f0a:	496c      	ldr	r1, [pc, #432]	@ (80020bc <main+0x308>)
 8001f0c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint8_t i = 0; i < g_num_sensors; i++)
 8001f14:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
 8001f1e:	4b63      	ldr	r3, [pc, #396]	@ (80020ac <main+0x2f8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f897 2153 	ldrb.w	r2, [r7, #339]	@ 0x153
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3e3      	bcc.n	8001ef2 <main+0x13e>
        }
        // 检查温度并控制继电器（仅在温度控制启用时）
        uint8_t relay_status = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
        if (relay_temp_control) 
 8001f30:	4b63      	ldr	r3, [pc, #396]	@ (80020c0 <main+0x30c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d037      	beq.n	8001fa8 <main+0x1f4>
        {
          for (uint8_t i = 0; i < g_num_sensors; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3151 	strb.w	r3, [r7, #337]	@ 0x151
 8001f3e:	e01f      	b.n	8001f80 <main+0x1cc>
          {
              if(temperatureArray[i] > temp_threshold)
 8001f40:	f897 3151 	ldrb.w	r3, [r7, #337]	@ 0x151
 8001f44:	4a5d      	ldr	r2, [pc, #372]	@ (80020bc <main+0x308>)
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80020c4 <main+0x310>)
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f8d3 	bl	80010fc <__aeabi_fcmpgt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <main+0x1c2>
              {
                RELAY_Control(1); // 温度超过阈值，打开继电器
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff f9dd 	bl	800131c <RELAY_Control>
                sprintf(relay_msg, "ON");
 8001f62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f66:	4958      	ldr	r1, [pc, #352]	@ (80020c8 <main+0x314>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 faa9 	bl	80064c0 <siprintf>
                relay_status = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
                break;
 8001f74:	e00a      	b.n	8001f8c <main+0x1d8>
          for (uint8_t i = 0; i < g_num_sensors; i++)
 8001f76:	f897 3151 	ldrb.w	r3, [r7, #337]	@ 0x151
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f887 3151 	strb.w	r3, [r7, #337]	@ 0x151
 8001f80:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <main+0x2f8>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f897 2151 	ldrb.w	r2, [r7, #337]	@ 0x151
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3d9      	bcc.n	8001f40 <main+0x18c>
              }
          }
          if (!relay_status) {
 8001f8c:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11a      	bne.n	8001fca <main+0x216>
            RELAY_Control(0); // 温度均低于阈值，关闭继电器
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff f9c1 	bl	800131c <RELAY_Control>
            sprintf(relay_msg, "OFF");
 8001f9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f9e:	494b      	ldr	r1, [pc, #300]	@ (80020cc <main+0x318>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fa8d 	bl	80064c0 <siprintf>
 8001fa6:	e010      	b.n	8001fca <main+0x216>
          }
        }
        else
        {
          relay_status = relay_force_state;
 8001fa8:	4b49      	ldr	r3, [pc, #292]	@ (80020d0 <main+0x31c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
          sprintf(relay_msg, relay_status ? "ON" : "OFF");
 8001fb0:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <main+0x208>
 8001fb8:	4a43      	ldr	r2, [pc, #268]	@ (80020c8 <main+0x314>)
 8001fba:	e000      	b.n	8001fbe <main+0x20a>
 8001fbc:	4a43      	ldr	r2, [pc, #268]	@ (80020cc <main+0x318>)
 8001fbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fa7b 	bl	80064c0 <siprintf>
        }
        // OLED显示温度和继电器状态，显示当前阈值
        OLED_DisplayTemperature(
 8001fca:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <main+0x308>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
            temperatureArray[0], 
            (g_num_sensors > 1) ? temperatureArray[1] : -999.0,
 8001fce:	4b37      	ldr	r3, [pc, #220]	@ (80020ac <main+0x2f8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
        OLED_DisplayTemperature(
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d902      	bls.n	8001fdc <main+0x228>
 8001fd6:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <main+0x308>)
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	e000      	b.n	8001fde <main+0x22a>
 8001fdc:	493d      	ldr	r1, [pc, #244]	@ (80020d4 <main+0x320>)
            (g_num_sensors > 2) ? temperatureArray[2] : -999.0,
 8001fde:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <main+0x2f8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
        OLED_DisplayTemperature(
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d902      	bls.n	8001fec <main+0x238>
 8001fe6:	4b35      	ldr	r3, [pc, #212]	@ (80020bc <main+0x308>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	e000      	b.n	8001fee <main+0x23a>
 8001fec:	4a39      	ldr	r2, [pc, #228]	@ (80020d4 <main+0x320>)
 8001fee:	4b35      	ldr	r3, [pc, #212]	@ (80020c4 <main+0x310>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f897 4152 	ldrb.w	r4, [r7, #338]	@ 0x152
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	f000 fc55 	bl	80028a8 <OLED_DisplayTemperature>
            relay_status,
            temp_threshold
        );
        // 格式化并发送到Lora
        strcpy(msg2, "");
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
        for (uint8_t i = 0; i < 3; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3150 	strb.w	r3, [r7, #336]	@ 0x150
 800200a:	e019      	b.n	8002040 <main+0x28c>
        {
            char temp_msg[50];
            sprintf(temp_msg, "%.2f;", temperatureArray[i]);
 800200c:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 8002010:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <main+0x308>)
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa06 	bl	8000428 <__aeabi_f2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4638      	mov	r0, r7
 8002022:	492d      	ldr	r1, [pc, #180]	@ (80020d8 <main+0x324>)
 8002024:	f004 fa4c 	bl	80064c0 <siprintf>
            strcat(msg2, temp_msg);
 8002028:	463a      	mov	r2, r7
 800202a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fab2 	bl	800659a <strcat>
        for (uint8_t i = 0; i < 3; i++)
 8002036:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 800203a:	3301      	adds	r3, #1
 800203c:	f887 3150 	strb.w	r3, [r7, #336]	@ 0x150
 8002040:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 8002044:	2b02      	cmp	r3, #2
 8002046:	d9e1      	bls.n	800200c <main+0x258>
        }
        strcat(msg2, relay_msg); // 继电器状态
 8002048:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800204c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f004 faa1 	bl	800659a <strcat>
        strcat(msg2, ";\r\n");
 8002058:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f877 	bl	8000150 <strlen>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800206a:	4413      	add	r3, r2
 800206c:	4a1b      	ldr	r2, [pc, #108]	@ (80020dc <main+0x328>)
 800206e:	6810      	ldr	r0, [r2, #0]
 8002070:	6018      	str	r0, [r3, #0]
        HAL_UART_Transmit(&huart3, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
 8002072:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f86a 	bl	8000150 <strlen>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8002084:	23c8      	movs	r3, #200	@ 0xc8
 8002086:	4804      	ldr	r0, [pc, #16]	@ (8002098 <main+0x2e4>)
 8002088:	f002 fc50 	bl	800492c <HAL_UART_Transmit>
 800208c:	e03b      	b.n	8002106 <main+0x352>
 800208e:	bf00      	nop
 8002090:	40010800 	.word	0x40010800
 8002094:	200002bc 	.word	0x200002bc
 8002098:	20000720 	.word	0x20000720
 800209c:	08009df8 	.word	0x08009df8
 80020a0:	08009e0c 	.word	0x08009e0c
 80020a4:	08009e20 	.word	0x08009e20
 80020a8:	200006d8 	.word	0x200006d8
 80020ac:	20000278 	.word	0x20000278
 80020b0:	08009e3c 	.word	0x08009e3c
 80020b4:	200002d0 	.word	0x200002d0
 80020b8:	20000250 	.word	0x20000250
 80020bc:	2000027c 	.word	0x2000027c
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004
 80020c8:	08009e58 	.word	0x08009e58
 80020cc:	08009e5c 	.word	0x08009e5c
 80020d0:	200002c5 	.word	0x200002c5
 80020d4:	c479c000 	.word	0xc479c000
 80020d8:	08009e60 	.word	0x08009e60
 80020dc:	08009e68 	.word	0x08009e68
      }
      else
      {
        sprintf(msg, "Failed to start conversion.\r\n");
 80020e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020e4:	49a5      	ldr	r1, [pc, #660]	@ (800237c <main+0x5c8>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 f9ea 	bl	80064c0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 80020ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f82d 	bl	8000150 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 80020fe:	2364      	movs	r3, #100	@ 0x64
 8002100:	489f      	ldr	r0, [pc, #636]	@ (8002380 <main+0x5cc>)
 8002102:	f002 fc13 	bl	800492c <HAL_UART_Transmit>
      }
    }

    // --- 按键扫描与阈值调节（实时） ---
    uint8_t key_pa2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002106:	2104      	movs	r1, #4
 8002108:	489e      	ldr	r0, [pc, #632]	@ (8002384 <main+0x5d0>)
 800210a:	f001 fae3 	bl	80036d4 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    uint8_t key_pa3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002114:	2108      	movs	r1, #8
 8002116:	489b      	ldr	r0, [pc, #620]	@ (8002384 <main+0x5d0>)
 8002118:	f001 fadc 	bl	80036d4 <HAL_GPIO_ReadPin>
 800211c:	4603      	mov	r3, r0
 800211e:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
    uint32_t now = HAL_GetTick();
 8002122:	f000 ff65 	bl	8002ff0 <HAL_GetTick>
 8002126:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
    // PA2: 阈值减1
    if (key_pa2 == 0 && key_pa2_last == 1 && (now - key_debounce_tick_pa2 > KEY_DEBOUNCE_MS)) {
 800212a:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800212e:	2b00      	cmp	r3, #0
 8002130:	d134      	bne.n	800219c <main+0x3e8>
 8002132:	4b95      	ldr	r3, [pc, #596]	@ (8002388 <main+0x5d4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d130      	bne.n	800219c <main+0x3e8>
 800213a:	4b94      	ldr	r3, [pc, #592]	@ (800238c <main+0x5d8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b1e      	cmp	r3, #30
 8002146:	d929      	bls.n	800219c <main+0x3e8>
      key_debounce_tick_pa2 = now;
 8002148:	4a90      	ldr	r2, [pc, #576]	@ (800238c <main+0x5d8>)
 800214a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800214e:	6013      	str	r3, [r2, #0]
      if (temp_threshold > TEMP_THRESHOLD_MIN) {
 8002150:	4b8f      	ldr	r3, [pc, #572]	@ (8002390 <main+0x5dc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe ffcf 	bl	80010fc <__aeabi_fcmpgt>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <main+0x3e8>
        temp_threshold -= TEMP_THRESHOLD_STEP;
 8002164:	4b8a      	ldr	r3, [pc, #552]	@ (8002390 <main+0x5dc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fcff 	bl	8000b70 <__aeabi_fsub>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b86      	ldr	r3, [pc, #536]	@ (8002390 <main+0x5dc>)
 8002178:	601a      	str	r2, [r3, #0]
        if (temp_threshold < TEMP_THRESHOLD_MIN) temp_threshold = TEMP_THRESHOLD_MIN;
 800217a:	4b85      	ldr	r3, [pc, #532]	@ (8002390 <main+0x5dc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe ff9c 	bl	80010c0 <__aeabi_fcmplt>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <main+0x3e2>
 800218e:	4b80      	ldr	r3, [pc, #512]	@ (8002390 <main+0x5dc>)
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
        // 不再单独刷新OLED，统一在主定时任务里刷新
        // OLED_ShowString(0, 48, "Threshold-", 8);
        // OLED_ShowNum(80, 48, (int)temp_threshold, 2, 8);
        // OLED_Refresh();
        HAL_Delay(200); // 简单消抖
 8002196:	20c8      	movs	r0, #200	@ 0xc8
 8002198:	f000 ff34 	bl	8003004 <HAL_Delay>
      }
    }
    key_pa2_last = key_pa2;
 800219c:	4a7a      	ldr	r2, [pc, #488]	@ (8002388 <main+0x5d4>)
 800219e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80021a2:	7013      	strb	r3, [r2, #0]
    // PA3: 阈值加1
    if (key_pa3 == 0 && key_pa3_last == 1 && (now - key_debounce_tick_pa3 > KEY_DEBOUNCE_MS)) {
 80021a4:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d131      	bne.n	8002210 <main+0x45c>
 80021ac:	4b79      	ldr	r3, [pc, #484]	@ (8002394 <main+0x5e0>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d12d      	bne.n	8002210 <main+0x45c>
 80021b4:	4b78      	ldr	r3, [pc, #480]	@ (8002398 <main+0x5e4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b1e      	cmp	r3, #30
 80021c0:	d926      	bls.n	8002210 <main+0x45c>
      key_debounce_tick_pa3 = now;
 80021c2:	4a75      	ldr	r2, [pc, #468]	@ (8002398 <main+0x5e4>)
 80021c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80021c8:	6013      	str	r3, [r2, #0]
      if (temp_threshold < TEMP_THRESHOLD_MAX) {
 80021ca:	4b71      	ldr	r3, [pc, #452]	@ (8002390 <main+0x5dc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4973      	ldr	r1, [pc, #460]	@ (800239c <main+0x5e8>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff75 	bl	80010c0 <__aeabi_fcmplt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d019      	beq.n	8002210 <main+0x45c>
        temp_threshold += TEMP_THRESHOLD_STEP;
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <main+0x5dc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fcc5 	bl	8000b74 <__addsf3>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b68      	ldr	r3, [pc, #416]	@ (8002390 <main+0x5dc>)
 80021f0:	601a      	str	r2, [r3, #0]
        if (temp_threshold > TEMP_THRESHOLD_MAX) temp_threshold = TEMP_THRESHOLD_MAX;
 80021f2:	4b67      	ldr	r3, [pc, #412]	@ (8002390 <main+0x5dc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4969      	ldr	r1, [pc, #420]	@ (800239c <main+0x5e8>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe ff7f 	bl	80010fc <__aeabi_fcmpgt>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <main+0x456>
 8002204:	4b62      	ldr	r3, [pc, #392]	@ (8002390 <main+0x5dc>)
 8002206:	4a65      	ldr	r2, [pc, #404]	@ (800239c <main+0x5e8>)
 8002208:	601a      	str	r2, [r3, #0]
        // 不再单独刷新OLED，统一在主定时任务里刷新
        // OLED_ShowString(0, 48, "Threshold+", 8);
        // OLED_ShowNum(80, 48, (int)temp_threshold, 2, 8);
        // OLED_Refresh();
        HAL_Delay(200); // 简单消抖
 800220a:	20c8      	movs	r0, #200	@ 0xc8
 800220c:	f000 fefa 	bl	8003004 <HAL_Delay>
      }
    }
    key_pa3_last = key_pa3;
 8002210:	4a60      	ldr	r2, [pc, #384]	@ (8002394 <main+0x5e0>)
 8002212:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 8002216:	7013      	strb	r3, [r2, #0]

    // 检查温度并控制继电器（仅在温度控制启用时）
    uint8_t relay_status = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    if (relay_temp_control) 
 800221e:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <main+0x5ec>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d037      	beq.n	8002296 <main+0x4e2>
    {
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
 800222c:	e01f      	b.n	800226e <main+0x4ba>
      {
          if(temperatureArray[i] > temp_threshold)
 800222e:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 8002232:	4a5c      	ldr	r2, [pc, #368]	@ (80023a4 <main+0x5f0>)
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	4a55      	ldr	r2, [pc, #340]	@ (8002390 <main+0x5dc>)
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe ff5c 	bl	80010fc <__aeabi_fcmpgt>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <main+0x4b0>
          {
            RELAY_Control(1); // 温度超过阈值，打开继电器
 800224a:	2001      	movs	r0, #1
 800224c:	f7ff f866 	bl	800131c <RELAY_Control>
            sprintf(relay_msg, "ON");
 8002250:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002254:	4954      	ldr	r1, [pc, #336]	@ (80023a8 <main+0x5f4>)
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f932 	bl	80064c0 <siprintf>
            relay_status = 1;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
            break;
 8002262:	e00a      	b.n	800227a <main+0x4c6>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8002264:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 8002268:	3301      	adds	r3, #1
 800226a:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
 800226e:	4b4f      	ldr	r3, [pc, #316]	@ (80023ac <main+0x5f8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	f897 214e 	ldrb.w	r2, [r7, #334]	@ 0x14e
 8002276:	429a      	cmp	r2, r3
 8002278:	d3d9      	bcc.n	800222e <main+0x47a>
          }
      }
      if (!relay_status) {
 800227a:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11a      	bne.n	80022b8 <main+0x504>
        RELAY_Control(0); // 温度均低于阈值，关闭继电器
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff f84a 	bl	800131c <RELAY_Control>
        sprintf(relay_msg, "OFF");
 8002288:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800228c:	4948      	ldr	r1, [pc, #288]	@ (80023b0 <main+0x5fc>)
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f916 	bl	80064c0 <siprintf>
 8002294:	e010      	b.n	80022b8 <main+0x504>
      }
    }
    else
    {
      // 使用强制状态
      relay_status = relay_force_state;
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <main+0x600>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
      sprintf(relay_msg, relay_status ? "ON" : "OFF");
 800229e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <main+0x4f6>
 80022a6:	4a40      	ldr	r2, [pc, #256]	@ (80023a8 <main+0x5f4>)
 80022a8:	e000      	b.n	80022ac <main+0x4f8>
 80022aa:	4a41      	ldr	r2, [pc, #260]	@ (80023b0 <main+0x5fc>)
 80022ac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f904 	bl	80064c0 <siprintf>
    }
    // OLED显示温度和继电器状态，显示当前阈值
    OLED_DisplayTemperature(
 80022b8:	4b3a      	ldr	r3, [pc, #232]	@ (80023a4 <main+0x5f0>)
 80022ba:	6818      	ldr	r0, [r3, #0]
        temperatureArray[0], 
        (g_num_sensors > 1) ? temperatureArray[1] : -999.0,
 80022bc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <main+0x5f8>)
 80022be:	781b      	ldrb	r3, [r3, #0]
    OLED_DisplayTemperature(
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d902      	bls.n	80022ca <main+0x516>
 80022c4:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <main+0x5f0>)
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	e000      	b.n	80022cc <main+0x518>
 80022ca:	493b      	ldr	r1, [pc, #236]	@ (80023b8 <main+0x604>)
        (g_num_sensors > 2) ? temperatureArray[2] : -999.0,
 80022cc:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <main+0x5f8>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
    OLED_DisplayTemperature(
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d902      	bls.n	80022da <main+0x526>
 80022d4:	4b33      	ldr	r3, [pc, #204]	@ (80023a4 <main+0x5f0>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	e000      	b.n	80022dc <main+0x528>
 80022da:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <main+0x604>)
 80022dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002390 <main+0x5dc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f897 414f 	ldrb.w	r4, [r7, #335]	@ 0x14f
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	4623      	mov	r3, r4
 80022e8:	f000 fade 	bl	80028a8 <OLED_DisplayTemperature>
        relay_status,
        temp_threshold
    );
    // 格式化并发送到Lora
    strcpy(msg2, "");
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
    for (uint8_t i = 0; i < 3; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
 80022f8:	e019      	b.n	800232e <main+0x57a>
    {
        char temp_msg[50];
        sprintf(temp_msg, "%.2f;", temperatureArray[i]);
 80022fa:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 80022fe:	4a29      	ldr	r2, [pc, #164]	@ (80023a4 <main+0x5f0>)
 8002300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f88f 	bl	8000428 <__aeabi_f2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4638      	mov	r0, r7
 8002310:	492a      	ldr	r1, [pc, #168]	@ (80023bc <main+0x608>)
 8002312:	f004 f8d5 	bl	80064c0 <siprintf>
        strcat(msg2, temp_msg);
 8002316:	463a      	mov	r2, r7
 8002318:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f004 f93b 	bl	800659a <strcat>
    for (uint8_t i = 0; i < 3; i++)
 8002324:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 8002328:	3301      	adds	r3, #1
 800232a:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
 800232e:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 8002332:	2b02      	cmp	r3, #2
 8002334:	d9e1      	bls.n	80022fa <main+0x546>
    }
    strcat(msg2, relay_msg); // 继电器状态
 8002336:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800233a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f004 f92a 	bl	800659a <strcat>
    strcat(msg2, ";\r\n");
 8002346:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800234a:	4618      	mov	r0, r3
 800234c:	f7fd ff00 	bl	8000150 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002358:	4413      	add	r3, r2
 800235a:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <main+0x60c>)
 800235c:	6810      	ldr	r0, [r2, #0]
 800235e:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
 8002360:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd fef3 	bl	8000150 <strlen>
 800236a:	4603      	mov	r3, r0
 800236c:	b29a      	uxth	r2, r3
 800236e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8002372:	23c8      	movs	r3, #200	@ 0xc8
 8002374:	4813      	ldr	r0, [pc, #76]	@ (80023c4 <main+0x610>)
 8002376:	f002 fad9 	bl	800492c <HAL_UART_Transmit>
  {
 800237a:	e58c      	b.n	8001e96 <main+0xe2>
 800237c:	08009e6c 	.word	0x08009e6c
 8002380:	200006d8 	.word	0x200006d8
 8002384:	40010800 	.word	0x40010800
 8002388:	20000008 	.word	0x20000008
 800238c:	200002c8 	.word	0x200002c8
 8002390:	20000004 	.word	0x20000004
 8002394:	20000009 	.word	0x20000009
 8002398:	200002cc 	.word	0x200002cc
 800239c:	42c60000 	.word	0x42c60000
 80023a0:	20000000 	.word	0x20000000
 80023a4:	2000027c 	.word	0x2000027c
 80023a8:	08009e58 	.word	0x08009e58
 80023ac:	20000278 	.word	0x20000278
 80023b0:	08009e5c 	.word	0x08009e5c
 80023b4:	200002c5 	.word	0x200002c5
 80023b8:	c479c000 	.word	0xc479c000
 80023bc:	08009e60 	.word	0x08009e60
 80023c0:	08009e68 	.word	0x08009e68
 80023c4:	20000720 	.word	0x20000720

080023c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b090      	sub	sp, #64	@ 0x40
 80023cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ce:	f107 0318 	add.w	r3, r7, #24
 80023d2:	2228      	movs	r2, #40	@ 0x28
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 f8d7 	bl	800658a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f8:	2301      	movs	r3, #1
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fc:	2302      	movs	r3, #2
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002400:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002406:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240c:	f107 0318 	add.w	r3, r7, #24
 8002410:	4618      	mov	r0, r3
 8002412:	f001 fe2b 	bl	800406c <HAL_RCC_OscConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800241c:	f000 f819 	bl	8002452 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002420:	230f      	movs	r3, #15
 8002422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002424:	2302      	movs	r3, #2
 8002426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800242c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f002 f898 	bl	8004570 <HAL_RCC_ClockConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002446:	f000 f804 	bl	8002452 <Error_Handler>
  }
}
 800244a:	bf00      	nop
 800244c:	3740      	adds	r7, #64	@ 0x40
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002456:	b672      	cpsid	i
}
 8002458:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245a:	bf00      	nop
 800245c:	e7fd      	b.n	800245a <Error_Handler+0x8>
	...

08002460 <OLED_Write_Byte>:
#define COM 0x00  // OLED指令
#define DAT 0x40  // OLED数据

// I2C写入数据
static void OLED_Write_Byte(uint8_t data, uint8_t mode)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af02      	add	r7, sp, #8
 8002466:	4603      	mov	r3, r0
 8002468:	460a      	mov	r2, r1
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	4613      	mov	r3, r2
 800246e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = mode;  // 写命令/数据控制字节
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	733b      	strb	r3, [r7, #12]
    buf[1] = data;  // 数据字节
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, buf, 2, 100);
 8002478:	f107 020c 	add.w	r2, r7, #12
 800247c:	2364      	movs	r3, #100	@ 0x64
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2302      	movs	r3, #2
 8002482:	2178      	movs	r1, #120	@ 0x78
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <OLED_Write_Byte+0x34>)
 8002486:	f001 fa99 	bl	80039bc <HAL_I2C_Master_Transmit>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200001fc 	.word	0x200001fc

08002498 <OLED_Refresh>:

// 更新显存到OLED
void OLED_Refresh(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0a4      	sub	sp, #144	@ 0x90
 800249c:	af02      	add	r7, sp, #8
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80024a4:	e03b      	b.n	800251e <OLED_Refresh+0x86>
    {
        OLED_Write_Byte(0xB0 + i, COM);    // 设置页地址(0~7)
 80024a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80024aa:	3b50      	subs	r3, #80	@ 0x50
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ffd5 	bl	8002460 <OLED_Write_Byte>
        OLED_Write_Byte(0x00, COM);        // 设置显示位置—列低地址
 80024b6:	2100      	movs	r1, #0
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff ffd1 	bl	8002460 <OLED_Write_Byte>
        OLED_Write_Byte(0x10, COM);        // 设置显示位置—列高地址
 80024be:	2100      	movs	r1, #0
 80024c0:	2010      	movs	r0, #16
 80024c2:	f7ff ffcd 	bl	8002460 <OLED_Write_Byte>
        
        // 一次发送一整行的数据(128字节)，提高效率
        uint8_t data[129];
        data[0] = DAT;  // 数据控制字节
 80024c6:	2340      	movs	r3, #64	@ 0x40
 80024c8:	713b      	strb	r3, [r7, #4]
        for (n = 0; n < 128; n++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80024d0:	e014      	b.n	80024fc <OLED_Refresh+0x64>
            data[n+1] = OLED_GRAM[n][i];
 80024d2:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 80024d6:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80024da:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80024de:	3301      	adds	r3, #1
 80024e0:	4813      	ldr	r0, [pc, #76]	@ (8002530 <OLED_Refresh+0x98>)
 80024e2:	00c9      	lsls	r1, r1, #3
 80024e4:	4401      	add	r1, r0
 80024e6:	440a      	add	r2, r1
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	3388      	adds	r3, #136	@ 0x88
 80024ec:	443b      	add	r3, r7
 80024ee:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (n = 0; n < 128; n++)
 80024f2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80024f6:	3301      	adds	r3, #1
 80024f8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80024fc:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8002500:	2b00      	cmp	r3, #0
 8002502:	dae6      	bge.n	80024d2 <OLED_Refresh+0x3a>
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, data, 129, 200);
 8002504:	1d3a      	adds	r2, r7, #4
 8002506:	23c8      	movs	r3, #200	@ 0xc8
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2381      	movs	r3, #129	@ 0x81
 800250c:	2178      	movs	r1, #120	@ 0x78
 800250e:	4809      	ldr	r0, [pc, #36]	@ (8002534 <OLED_Refresh+0x9c>)
 8002510:	f001 fa54 	bl	80039bc <HAL_I2C_Master_Transmit>
    for (i = 0; i < 8; i++)
 8002514:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002518:	3301      	adds	r3, #1
 800251a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800251e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002522:	2b07      	cmp	r3, #7
 8002524:	d9bf      	bls.n	80024a6 <OLED_Refresh+0xe>
    }
}
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	3788      	adds	r7, #136	@ 0x88
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200002d4 	.word	0x200002d4
 8002534:	200001fc 	.word	0x200001fc

08002538 <OLED_Clear>:
    OLED_Write_Byte(0xAE, COM); // 关闭屏幕
}

// 清屏函数
void OLED_Clear(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
 8002542:	e014      	b.n	800256e <OLED_Clear+0x36>
    {
        for (n = 0; n < 128; n++)
 8002544:	2300      	movs	r3, #0
 8002546:	71bb      	strb	r3, [r7, #6]
 8002548:	e00a      	b.n	8002560 <OLED_Clear+0x28>
        {
            OLED_GRAM[n][i] = 0;
 800254a:	79ba      	ldrb	r2, [r7, #6]
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	490c      	ldr	r1, [pc, #48]	@ (8002580 <OLED_Clear+0x48>)
 8002550:	00d2      	lsls	r2, r2, #3
 8002552:	440a      	add	r2, r1
 8002554:	4413      	add	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
        for (n = 0; n < 128; n++)
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	3301      	adds	r3, #1
 800255e:	71bb      	strb	r3, [r7, #6]
 8002560:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	daf0      	bge.n	800254a <OLED_Clear+0x12>
    for (i = 0; i < 8; i++)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3301      	adds	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b07      	cmp	r3, #7
 8002572:	d9e7      	bls.n	8002544 <OLED_Clear+0xc>
        }
    }
    OLED_Refresh(); // 更新显示
 8002574:	f7ff ff90 	bl	8002498 <OLED_Refresh>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200002d4 	.word	0x200002d4

08002584 <OLED_DrawPoint>:

// 画点
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	460b      	mov	r3, r1
 8002590:	71bb      	strb	r3, [r7, #6]
 8002592:	4613      	mov	r3, r2
 8002594:	717b      	strb	r3, [r7, #5]
    uint8_t pos, bx, temp = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
    if (x > 127 || y > 63) return; // 超出范围
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db3c      	blt.n	800261c <OLED_DrawPoint+0x98>
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a6:	d839      	bhi.n	800261c <OLED_DrawPoint+0x98>
    pos = y / 8;                   // 得到页地址
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	73bb      	strb	r3, [r7, #14]
    bx = y % 8;                    // 取得y在页内的位置
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	737b      	strb	r3, [r7, #13]
    temp = 1 << bx;                // 得到点在页内的位置对应的值
 80025b6:	7b7b      	ldrb	r3, [r7, #13]
 80025b8:	2201      	movs	r2, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	73fb      	strb	r3, [r7, #15]
    if (t) OLED_GRAM[x][pos] |= temp;  // 置1
 80025c0:	797b      	ldrb	r3, [r7, #5]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <OLED_DrawPoint+0x68>
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	4917      	ldr	r1, [pc, #92]	@ (8002628 <OLED_DrawPoint+0xa4>)
 80025cc:	00d2      	lsls	r2, r2, #3
 80025ce:	440a      	add	r2, r1
 80025d0:	4413      	add	r3, r2
 80025d2:	7818      	ldrb	r0, [r3, #0]
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	7bbb      	ldrb	r3, [r7, #14]
 80025d8:	7bf9      	ldrb	r1, [r7, #15]
 80025da:	4301      	orrs	r1, r0
 80025dc:	b2c8      	uxtb	r0, r1
 80025de:	4912      	ldr	r1, [pc, #72]	@ (8002628 <OLED_DrawPoint+0xa4>)
 80025e0:	00d2      	lsls	r2, r2, #3
 80025e2:	440a      	add	r2, r1
 80025e4:	4413      	add	r3, r2
 80025e6:	4602      	mov	r2, r0
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e018      	b.n	800261e <OLED_DrawPoint+0x9a>
    else OLED_GRAM[x][pos] &= ~temp;   // 清0
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	490d      	ldr	r1, [pc, #52]	@ (8002628 <OLED_DrawPoint+0xa4>)
 80025f2:	00d2      	lsls	r2, r2, #3
 80025f4:	440a      	add	r2, r1
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25a      	sxtb	r2, r3
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	43db      	mvns	r3, r3
 8002602:	b25b      	sxtb	r3, r3
 8002604:	4013      	ands	r3, r2
 8002606:	b259      	sxtb	r1, r3
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	7bbb      	ldrb	r3, [r7, #14]
 800260c:	b2c8      	uxtb	r0, r1
 800260e:	4906      	ldr	r1, [pc, #24]	@ (8002628 <OLED_DrawPoint+0xa4>)
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	440a      	add	r2, r1
 8002614:	4413      	add	r3, r2
 8002616:	4602      	mov	r2, r0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e000      	b.n	800261e <OLED_DrawPoint+0x9a>
    if (x > 127 || y > 63) return; // 超出范围
 800261c:	bf00      	nop
}
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200002d4 	.word	0x200002d4

0800262c <OLED_ShowChar>:
    OLED_Refresh();
}

// 在指定位置显示一个字符
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	4603      	mov	r3, r0
 8002640:	71bb      	strb	r3, [r7, #6]
 8002642:	460b      	mov	r3, r1
 8002644:	717b      	strb	r3, [r7, #5]
 8002646:	4613      	mov	r3, r2
 8002648:	713b      	strb	r3, [r7, #4]
    uint8_t i, j, c;
    c = chr - ' '; // 得到偏移后的值
 800264a:	797b      	ldrb	r3, [r7, #5]
 800264c:	3b20      	subs	r3, #32
 800264e:	737b      	strb	r3, [r7, #13]
    if (x > 128 - 1)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da04      	bge.n	8002662 <OLED_ShowChar+0x36>
    {
        x = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	71fb      	strb	r3, [r7, #7]
        y = y + 2;
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	3302      	adds	r3, #2
 8002660:	71bb      	strb	r3, [r7, #6]
    }
    if (size == 16)
 8002662:	793b      	ldrb	r3, [r7, #4]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d177      	bne.n	8002758 <OLED_ShowChar+0x12c>
    {
        for (i = 0; i < 8; i++)
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e032      	b.n	80026d4 <OLED_ShowChar+0xa8>
        {
            for (j = 0; j < 8; j++)
 800266e:	2300      	movs	r3, #0
 8002670:	73bb      	strb	r3, [r7, #14]
 8002672:	e029      	b.n	80026c8 <OLED_ShowChar+0x9c>
            {
                if (F8X16[c * 16 + i] & (0x80 >> j))
 8002674:	7b7b      	ldrb	r3, [r7, #13]
 8002676:	011a      	lsls	r2, r3, #4
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4413      	add	r3, r2
 800267c:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <OLED_ShowChar+0x1b4>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	4619      	mov	r1, r3
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	2280      	movs	r2, #128	@ 0x80
 8002686:	fa42 f303 	asr.w	r3, r2, r3
 800268a:	400b      	ands	r3, r1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <OLED_ShowChar+0x7e>
                    OLED_DrawPoint(x + j, y + i, 1);
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	4413      	add	r3, r2
 8002696:	b2d8      	uxtb	r0, r3
 8002698:	79ba      	ldrb	r2, [r7, #6]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	4413      	add	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7ff ff6e 	bl	8002584 <OLED_DrawPoint>
 80026a8:	e00b      	b.n	80026c2 <OLED_ShowChar+0x96>
                else
                    OLED_DrawPoint(x + j, y + i, 0);
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	4413      	add	r3, r2
 80026b0:	b2d8      	uxtb	r0, r3
 80026b2:	79ba      	ldrb	r2, [r7, #6]
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	4413      	add	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2200      	movs	r2, #0
 80026bc:	4619      	mov	r1, r3
 80026be:	f7ff ff61 	bl	8002584 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73bb      	strb	r3, [r7, #14]
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	2b07      	cmp	r3, #7
 80026cc:	d9d2      	bls.n	8002674 <OLED_ShowChar+0x48>
        for (i = 0; i < 8; i++)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3301      	adds	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b07      	cmp	r3, #7
 80026d8:	d9c9      	bls.n	800266e <OLED_ShowChar+0x42>
            }
        }
        for (i = 0; i < 8; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e037      	b.n	8002750 <OLED_ShowChar+0x124>
        {
            for (j = 0; j < 8; j++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	73bb      	strb	r3, [r7, #14]
 80026e4:	e02e      	b.n	8002744 <OLED_ShowChar+0x118>
            {
                if (F8X16[c * 16 + i + 8] & (0x80 >> j))
 80026e6:	7b7b      	ldrb	r3, [r7, #13]
 80026e8:	011a      	lsls	r2, r3, #4
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	4413      	add	r3, r2
 80026ee:	3308      	adds	r3, #8
 80026f0:	4a3b      	ldr	r2, [pc, #236]	@ (80027e0 <OLED_ShowChar+0x1b4>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	4619      	mov	r1, r3
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	2280      	movs	r2, #128	@ 0x80
 80026fa:	fa42 f303 	asr.w	r3, r2, r3
 80026fe:	400b      	ands	r3, r1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00e      	beq.n	8002722 <OLED_ShowChar+0xf6>
                    OLED_DrawPoint(x + j, y + i + 8, 1);
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	7bbb      	ldrb	r3, [r7, #14]
 8002708:	4413      	add	r3, r2
 800270a:	b2d8      	uxtb	r0, r3
 800270c:	79ba      	ldrb	r2, [r7, #6]
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	4413      	add	r3, r2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3308      	adds	r3, #8
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2201      	movs	r2, #1
 800271a:	4619      	mov	r1, r3
 800271c:	f7ff ff32 	bl	8002584 <OLED_DrawPoint>
 8002720:	e00d      	b.n	800273e <OLED_ShowChar+0x112>
                else
                    OLED_DrawPoint(x + j, y + i + 8, 0);
 8002722:	79fa      	ldrb	r2, [r7, #7]
 8002724:	7bbb      	ldrb	r3, [r7, #14]
 8002726:	4413      	add	r3, r2
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	79ba      	ldrb	r2, [r7, #6]
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	4413      	add	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3308      	adds	r3, #8
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2200      	movs	r2, #0
 8002738:	4619      	mov	r1, r3
 800273a:	f7ff ff23 	bl	8002584 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800273e:	7bbb      	ldrb	r3, [r7, #14]
 8002740:	3301      	adds	r3, #1
 8002742:	73bb      	strb	r3, [r7, #14]
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	2b07      	cmp	r3, #7
 8002748:	d9cd      	bls.n	80026e6 <OLED_ShowChar+0xba>
        for (i = 0; i < 8; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b07      	cmp	r3, #7
 8002754:	d9c4      	bls.n	80026e0 <OLED_ShowChar+0xb4>
                else
                    OLED_DrawPoint(x + i, y + j, 0);
            }
        }
    }
}
 8002756:	e03f      	b.n	80027d8 <OLED_ShowChar+0x1ac>
    else if (size == 8)
 8002758:	793b      	ldrb	r3, [r7, #4]
 800275a:	2b08      	cmp	r3, #8
 800275c:	d13c      	bne.n	80027d8 <OLED_ShowChar+0x1ac>
        for (i = 0; i < 6; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e036      	b.n	80027d2 <OLED_ShowChar+0x1a6>
            for (j = 0; j < 8; j++)
 8002764:	2300      	movs	r3, #0
 8002766:	73bb      	strb	r3, [r7, #14]
 8002768:	e02d      	b.n	80027c6 <OLED_ShowChar+0x19a>
                if (F6x8[c][i] & (1 << j))
 800276a:	7b7a      	ldrb	r2, [r7, #13]
 800276c:	7bf9      	ldrb	r1, [r7, #15]
 800276e:	481d      	ldr	r0, [pc, #116]	@ (80027e4 <OLED_ShowChar+0x1b8>)
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4403      	add	r3, r0
 800277a:	440b      	add	r3, r1
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	fa42 f303 	asr.w	r3, r2, r3
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <OLED_ShowChar+0x17c>
                    OLED_DrawPoint(x + i, y + j, 1);
 800278e:	79fa      	ldrb	r2, [r7, #7]
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	4413      	add	r3, r2
 8002794:	b2d8      	uxtb	r0, r3
 8002796:	79ba      	ldrb	r2, [r7, #6]
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	4413      	add	r3, r2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7ff feef 	bl	8002584 <OLED_DrawPoint>
 80027a6:	e00b      	b.n	80027c0 <OLED_ShowChar+0x194>
                    OLED_DrawPoint(x + i, y + j, 0);
 80027a8:	79fa      	ldrb	r2, [r7, #7]
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	4413      	add	r3, r2
 80027ae:	b2d8      	uxtb	r0, r3
 80027b0:	79ba      	ldrb	r2, [r7, #6]
 80027b2:	7bbb      	ldrb	r3, [r7, #14]
 80027b4:	4413      	add	r3, r2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7ff fee2 	bl	8002584 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 80027c0:	7bbb      	ldrb	r3, [r7, #14]
 80027c2:	3301      	adds	r3, #1
 80027c4:	73bb      	strb	r3, [r7, #14]
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	d9ce      	bls.n	800276a <OLED_ShowChar+0x13e>
        for (i = 0; i < 6; i++)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d9c5      	bls.n	8002764 <OLED_ShowChar+0x138>
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}
 80027e0:	0800a1bc 	.word	0x0800a1bc
 80027e4:	08009f94 	.word	0x08009f94

080027e8 <OLED_ShowString>:

// 显示字符串
void OLED_ShowString(uint8_t x, uint8_t y, const char *p, uint8_t size)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	603a      	str	r2, [r7, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	460b      	mov	r3, r1
 80027f8:	71bb      	strb	r3, [r7, #6]
 80027fa:	4613      	mov	r3, r2
 80027fc:	717b      	strb	r3, [r7, #5]
    while (*p != '\0')
 80027fe:	e020      	b.n	8002842 <OLED_ShowString+0x5a>
    {
        OLED_ShowChar(x, y, *p, size);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	797b      	ldrb	r3, [r7, #5]
 8002806:	79b9      	ldrb	r1, [r7, #6]
 8002808:	79f8      	ldrb	r0, [r7, #7]
 800280a:	f7ff ff0f 	bl	800262c <OLED_ShowChar>
        x += (size == 8) ? 6 : 8;
 800280e:	797b      	ldrb	r3, [r7, #5]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d101      	bne.n	8002818 <OLED_ShowString+0x30>
 8002814:	2206      	movs	r2, #6
 8002816:	e000      	b.n	800281a <OLED_ShowString+0x32>
 8002818:	2208      	movs	r2, #8
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4413      	add	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
        if (x > 122)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b7a      	cmp	r3, #122	@ 0x7a
 8002824:	d90a      	bls.n	800283c <OLED_ShowString+0x54>
        {
            x = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	71fb      	strb	r3, [r7, #7]
            y += (size == 8) ? 9 : 16;
 800282a:	797b      	ldrb	r3, [r7, #5]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d101      	bne.n	8002834 <OLED_ShowString+0x4c>
 8002830:	2209      	movs	r2, #9
 8002832:	e000      	b.n	8002836 <OLED_ShowString+0x4e>
 8002834:	2210      	movs	r2, #16
 8002836:	79bb      	ldrb	r3, [r7, #6]
 8002838:	4413      	add	r3, r2
 800283a:	71bb      	strb	r3, [r7, #6]
        }
        p++;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	603b      	str	r3, [r7, #0]
    while (*p != '\0')
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1da      	bne.n	8002800 <OLED_ShowString+0x18>
    }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <OLED_Init>:
    }
}

// 初始化OLED
void OLED_Init(void)
{
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
    // 初始化命令
    uint8_t CMD_Data[] = {
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <OLED_Init+0x50>)
 800285c:	463c      	mov	r4, r7
 800285e:	461d      	mov	r5, r3
 8002860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002864:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        0xAE, 0x00, 0x10, 0x40, 0x81, 0xCF, 0xA1, 0xC8, 0xA6,
        0xA8, 0x3f, 0xD3, 0x00, 0xD5, 0x80, 0xD9, 0xF1, 0xDA, 0x12,
        0xDB, 0x40, 0x20, 0x02, 0x8D, 0x14, 0xA4, 0xA6, 0xAF
    };
    
    HAL_Delay(100);  // 延时等待OLED稳定
 800286c:	2064      	movs	r0, #100	@ 0x64
 800286e:	f000 fbc9 	bl	8003004 <HAL_Delay>
    
    // 发送初始化命令
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 8002872:	2300      	movs	r3, #0
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e00b      	b.n	8002890 <OLED_Init+0x3c>
    {
        OLED_Write_Byte(CMD_Data[i], COM);
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	3320      	adds	r3, #32
 800287c:	443b      	add	r3, r7
 800287e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fdeb 	bl	8002460 <OLED_Write_Byte>
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 800288a:	7ffb      	ldrb	r3, [r7, #31]
 800288c:	3301      	adds	r3, #1
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	7ffb      	ldrb	r3, [r7, #31]
 8002892:	2b1b      	cmp	r3, #27
 8002894:	d9f0      	bls.n	8002878 <OLED_Init+0x24>
    }
    
    OLED_Clear();  // 清屏
 8002896:	f7ff fe4f 	bl	8002538 <OLED_Clear>
}
 800289a:	bf00      	nop
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bdb0      	pop	{r4, r5, r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08009e8c 	.word	0x08009e8c

080028a8 <OLED_DisplayTemperature>:
//     OLED_Refresh();  // 更新显示
// }

// 显示温度和继电器状态
void OLED_DisplayTemperature(float temp1, float temp2, float temp3, uint8_t relay_status, float temp_threshold)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
    // 不再全屏清空，改为分区域覆盖
    // 标题
    OLED_ShowString(0, 0, "Temperature Monitor   ", 8); // 末尾补空格覆盖
 80028b6:	2308      	movs	r3, #8
 80028b8:	4a53      	ldr	r2, [pc, #332]	@ (8002a08 <OLED_DisplayTemperature+0x160>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff ff93 	bl	80027e8 <OLED_ShowString>
    // 传感器1
    OLED_ShowString(0, 16, "Sensor1:      ", 8);
 80028c2:	2308      	movs	r3, #8
 80028c4:	4a51      	ldr	r2, [pc, #324]	@ (8002a0c <OLED_DisplayTemperature+0x164>)
 80028c6:	2110      	movs	r1, #16
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff ff8d 	bl	80027e8 <OLED_ShowString>
    if (temp1 > -900.0) {
 80028ce:	4950      	ldr	r1, [pc, #320]	@ (8002a10 <OLED_DisplayTemperature+0x168>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7fe fc13 	bl	80010fc <__aeabi_fcmpgt>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d011      	beq.n	8002900 <OLED_DisplayTemperature+0x58>
        sprintf(buffer, "%6.1fC", temp1);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7fd fda3 	bl	8000428 <__aeabi_f2d>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	f107 0014 	add.w	r0, r7, #20
 80028ea:	494a      	ldr	r1, [pc, #296]	@ (8002a14 <OLED_DisplayTemperature+0x16c>)
 80028ec:	f003 fde8 	bl	80064c0 <siprintf>
        OLED_ShowString(56, 16, buffer, 8);
 80028f0:	f107 0214 	add.w	r2, r7, #20
 80028f4:	2308      	movs	r3, #8
 80028f6:	2110      	movs	r1, #16
 80028f8:	2038      	movs	r0, #56	@ 0x38
 80028fa:	f7ff ff75 	bl	80027e8 <OLED_ShowString>
 80028fe:	e005      	b.n	800290c <OLED_DisplayTemperature+0x64>
    } else {
        OLED_ShowString(56, 16, " Error ", 8);
 8002900:	2308      	movs	r3, #8
 8002902:	4a45      	ldr	r2, [pc, #276]	@ (8002a18 <OLED_DisplayTemperature+0x170>)
 8002904:	2110      	movs	r1, #16
 8002906:	2038      	movs	r0, #56	@ 0x38
 8002908:	f7ff ff6e 	bl	80027e8 <OLED_ShowString>
    }
    // 传感器2
    OLED_ShowString(0, 26, "Sensor2:      ", 8);
 800290c:	2308      	movs	r3, #8
 800290e:	4a43      	ldr	r2, [pc, #268]	@ (8002a1c <OLED_DisplayTemperature+0x174>)
 8002910:	211a      	movs	r1, #26
 8002912:	2000      	movs	r0, #0
 8002914:	f7ff ff68 	bl	80027e8 <OLED_ShowString>
    if (temp2 > -900.0) {
 8002918:	493d      	ldr	r1, [pc, #244]	@ (8002a10 <OLED_DisplayTemperature+0x168>)
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f7fe fbee 	bl	80010fc <__aeabi_fcmpgt>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <OLED_DisplayTemperature+0xa2>
        sprintf(buffer, "%6.1fC", temp2);
 8002926:	68b8      	ldr	r0, [r7, #8]
 8002928:	f7fd fd7e 	bl	8000428 <__aeabi_f2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	f107 0014 	add.w	r0, r7, #20
 8002934:	4937      	ldr	r1, [pc, #220]	@ (8002a14 <OLED_DisplayTemperature+0x16c>)
 8002936:	f003 fdc3 	bl	80064c0 <siprintf>
        OLED_ShowString(56, 26, buffer, 8);
 800293a:	f107 0214 	add.w	r2, r7, #20
 800293e:	2308      	movs	r3, #8
 8002940:	211a      	movs	r1, #26
 8002942:	2038      	movs	r0, #56	@ 0x38
 8002944:	f7ff ff50 	bl	80027e8 <OLED_ShowString>
 8002948:	e005      	b.n	8002956 <OLED_DisplayTemperature+0xae>
    } else {
        OLED_ShowString(56, 26, " Error ", 8);
 800294a:	2308      	movs	r3, #8
 800294c:	4a32      	ldr	r2, [pc, #200]	@ (8002a18 <OLED_DisplayTemperature+0x170>)
 800294e:	211a      	movs	r1, #26
 8002950:	2038      	movs	r0, #56	@ 0x38
 8002952:	f7ff ff49 	bl	80027e8 <OLED_ShowString>
    }
    // 传感器3
    OLED_ShowString(0, 36, "Sensor3:      ", 8);
 8002956:	2308      	movs	r3, #8
 8002958:	4a31      	ldr	r2, [pc, #196]	@ (8002a20 <OLED_DisplayTemperature+0x178>)
 800295a:	2124      	movs	r1, #36	@ 0x24
 800295c:	2000      	movs	r0, #0
 800295e:	f7ff ff43 	bl	80027e8 <OLED_ShowString>
    if (temp3 > -900.0) {
 8002962:	492b      	ldr	r1, [pc, #172]	@ (8002a10 <OLED_DisplayTemperature+0x168>)
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7fe fbc9 	bl	80010fc <__aeabi_fcmpgt>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <OLED_DisplayTemperature+0xec>
        sprintf(buffer, "%6.1fC", temp3);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fd fd59 	bl	8000428 <__aeabi_f2d>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	f107 0014 	add.w	r0, r7, #20
 800297e:	4925      	ldr	r1, [pc, #148]	@ (8002a14 <OLED_DisplayTemperature+0x16c>)
 8002980:	f003 fd9e 	bl	80064c0 <siprintf>
        OLED_ShowString(56, 36, buffer, 8);
 8002984:	f107 0214 	add.w	r2, r7, #20
 8002988:	2308      	movs	r3, #8
 800298a:	2124      	movs	r1, #36	@ 0x24
 800298c:	2038      	movs	r0, #56	@ 0x38
 800298e:	f7ff ff2b 	bl	80027e8 <OLED_ShowString>
 8002992:	e005      	b.n	80029a0 <OLED_DisplayTemperature+0xf8>
    } else {
        OLED_ShowString(56, 36, " Error ", 8);
 8002994:	2308      	movs	r3, #8
 8002996:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <OLED_DisplayTemperature+0x170>)
 8002998:	2124      	movs	r1, #36	@ 0x24
 800299a:	2038      	movs	r0, #56	@ 0x38
 800299c:	f7ff ff24 	bl	80027e8 <OLED_ShowString>
    }
    // 继电器状态
    OLED_ShowString(0, 50, "Relay:   ", 8);
 80029a0:	2308      	movs	r3, #8
 80029a2:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <OLED_DisplayTemperature+0x17c>)
 80029a4:	2132      	movs	r1, #50	@ 0x32
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7ff ff1e 	bl	80027e8 <OLED_ShowString>
    if (relay_status) {
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <OLED_DisplayTemperature+0x118>
        OLED_ShowString(56, 50, "ON  ", 8);
 80029b2:	2308      	movs	r3, #8
 80029b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <OLED_DisplayTemperature+0x180>)
 80029b6:	2132      	movs	r1, #50	@ 0x32
 80029b8:	2038      	movs	r0, #56	@ 0x38
 80029ba:	f7ff ff15 	bl	80027e8 <OLED_ShowString>
 80029be:	e005      	b.n	80029cc <OLED_DisplayTemperature+0x124>
    } else {
        OLED_ShowString(56, 50, "OFF ", 8);
 80029c0:	2308      	movs	r3, #8
 80029c2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a2c <OLED_DisplayTemperature+0x184>)
 80029c4:	2132      	movs	r1, #50	@ 0x32
 80029c6:	2038      	movs	r0, #56	@ 0x38
 80029c8:	f7ff ff0e 	bl	80027e8 <OLED_ShowString>
    }
    // 温度阈值
    OLED_ShowString(80, 50, "TH:", 8);
 80029cc:	2308      	movs	r3, #8
 80029ce:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <OLED_DisplayTemperature+0x188>)
 80029d0:	2132      	movs	r1, #50	@ 0x32
 80029d2:	2050      	movs	r0, #80	@ 0x50
 80029d4:	f7ff ff08 	bl	80027e8 <OLED_ShowString>
    sprintf(buffer, "%4.1f", temp_threshold);
 80029d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029da:	f7fd fd25 	bl	8000428 <__aeabi_f2d>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	f107 0014 	add.w	r0, r7, #20
 80029e6:	4913      	ldr	r1, [pc, #76]	@ (8002a34 <OLED_DisplayTemperature+0x18c>)
 80029e8:	f003 fd6a 	bl	80064c0 <siprintf>
    OLED_ShowString(104, 50, buffer, 8);
 80029ec:	f107 0214 	add.w	r2, r7, #20
 80029f0:	2308      	movs	r3, #8
 80029f2:	2132      	movs	r1, #50	@ 0x32
 80029f4:	2068      	movs	r0, #104	@ 0x68
 80029f6:	f7ff fef7 	bl	80027e8 <OLED_ShowString>
    OLED_Refresh();
 80029fa:	f7ff fd4d 	bl	8002498 <OLED_Refresh>
}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	@ 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	08009ea8 	.word	0x08009ea8
 8002a0c:	08009ec0 	.word	0x08009ec0
 8002a10:	c4610000 	.word	0xc4610000
 8002a14:	08009ed0 	.word	0x08009ed0
 8002a18:	08009ed8 	.word	0x08009ed8
 8002a1c:	08009ee0 	.word	0x08009ee0
 8002a20:	08009ef0 	.word	0x08009ef0
 8002a24:	08009f00 	.word	0x08009f00
 8002a28:	08009f0c 	.word	0x08009f0c
 8002a2c:	08009f14 	.word	0x08009f14
 8002a30:	08009f1c 	.word	0x08009f1c
 8002a34:	08009f20 	.word	0x08009f20

08002a38 <OLED_DisplaySensorInfo>:

// 显示传感器信息
void OLED_DisplaySensorInfo(uint8_t num_sensors)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 8002a42:	f7ff fd79 	bl	8002538 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "DS18B20 Sensors", 8);
 8002a46:	2308      	movs	r3, #8
 8002a48:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab4 <OLED_DisplaySensorInfo+0x7c>)
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff fecb 	bl	80027e8 <OLED_ShowString>
    
    // 显示传感器数量
    sprintf(buffer, "Found: %d sensors", num_sensors);
 8002a52:	79fa      	ldrb	r2, [r7, #7]
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4917      	ldr	r1, [pc, #92]	@ (8002ab8 <OLED_DisplaySensorInfo+0x80>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fd30 	bl	80064c0 <siprintf>
    OLED_ShowString(0, 16, buffer, 8);
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	2308      	movs	r3, #8
 8002a66:	2110      	movs	r1, #16
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff febd 	bl	80027e8 <OLED_ShowString>
    
    if (num_sensors == 0) {
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10c      	bne.n	8002a8e <OLED_DisplaySensorInfo+0x56>
        OLED_ShowString(0, 30, "No sensors found!", 8);
 8002a74:	2308      	movs	r3, #8
 8002a76:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <OLED_DisplaySensorInfo+0x84>)
 8002a78:	211e      	movs	r1, #30
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7ff feb4 	bl	80027e8 <OLED_ShowString>
        OLED_ShowString(0, 40, "Check connections", 8);
 8002a80:	2308      	movs	r3, #8
 8002a82:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac0 <OLED_DisplaySensorInfo+0x88>)
 8002a84:	2128      	movs	r1, #40	@ 0x28
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7ff feae 	bl	80027e8 <OLED_ShowString>
 8002a8c:	e00b      	b.n	8002aa6 <OLED_DisplaySensorInfo+0x6e>
    } else {
        OLED_ShowString(0, 30, "System ready", 8);
 8002a8e:	2308      	movs	r3, #8
 8002a90:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <OLED_DisplaySensorInfo+0x8c>)
 8002a92:	211e      	movs	r1, #30
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff fea7 	bl	80027e8 <OLED_ShowString>
        OLED_ShowString(0, 40, "Monitoring...", 8);
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <OLED_DisplaySensorInfo+0x90>)
 8002a9e:	2128      	movs	r1, #40	@ 0x28
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff fea1 	bl	80027e8 <OLED_ShowString>
    }
    
    OLED_Refresh();  // 更新显示
 8002aa6:	f7ff fcf7 	bl	8002498 <OLED_Refresh>
 8002aaa:	bf00      	nop
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08009f28 	.word	0x08009f28
 8002ab8:	08009f38 	.word	0x08009f38
 8002abc:	08009f4c 	.word	0x08009f4c
 8002ac0:	08009f60 	.word	0x08009f60
 8002ac4:	08009f74 	.word	0x08009f74
 8002ac8:	08009f84 	.word	0x08009f84

08002acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_MspInit+0x5c>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <HAL_MspInit+0x5c>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6193      	str	r3, [r2, #24]
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_MspInit+0x5c>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_MspInit+0x5c>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4a0e      	ldr	r2, [pc, #56]	@ (8002b28 <HAL_MspInit+0x5c>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	61d3      	str	r3, [r2, #28]
 8002af6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <HAL_MspInit+0x5c>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002b02:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_MspInit+0x60>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <HAL_MspInit+0x60>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010000 	.word	0x40010000

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <NMI_Handler+0x4>

08002b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <HardFault_Handler+0x4>

08002b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <MemManage_Handler+0x4>

08002b48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <BusFault_Handler+0x4>

08002b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <UsageFault_Handler+0x4>

08002b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b80:	f000 fa24 	bl	8002fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <USART3_IRQHandler+0x10>)
 8002b8e:	f001 ff7d 	bl	8004a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000720 	.word	0x20000720

08002b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <_kill>:

int _kill(int pid, int sig)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bb4:	f003 fd5c 	bl	8006670 <__errno>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2216      	movs	r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
  return -1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_exit>:

void _exit (int status)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffe7 	bl	8002baa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <_exit+0x12>

08002be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e00a      	b.n	8002c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bf2:	f3af 8000 	nop.w
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	60ba      	str	r2, [r7, #8]
 8002bfe:	b2ca      	uxtb	r2, r1
 8002c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbf0      	blt.n	8002bf2 <_read+0x12>
  }

  return len;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e009      	b.n	8002c40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60ba      	str	r2, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf1      	blt.n	8002c2c <_write+0x12>
  }
  return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_close>:

int _close(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c78:	605a      	str	r2, [r3, #4]
  return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <_isatty>:

int _isatty(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f003 fcc4 	bl	8006670 <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20005000 	.word	0x20005000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	200006d4 	.word	0x200006d4
 8002d1c:	200008b8 	.word	0x200008b8

08002d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	@ (8002d7c <MX_USART1_UART_Init+0x50>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_USART1_UART_Init+0x4c>)
 8002d64:	f001 fd92 	bl	800488c <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d6e:	f7ff fb70 	bl	8002452 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200006d8 	.word	0x200006d8
 8002d7c:	40013800 	.word	0x40013800

08002d80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d84:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <MX_USART3_UART_Init+0x50>)
 8002d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db0:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db6:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <MX_USART3_UART_Init+0x4c>)
 8002db8:	f001 fd68 	bl	800488c <HAL_UART_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dc2:	f7ff fb46 	bl	8002452 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000720 	.word	0x20000720
 8002dd0:	40004800 	.word	0x40004800

08002dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3c      	ldr	r2, [pc, #240]	@ (8002ee0 <HAL_UART_MspInit+0x10c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d132      	bne.n	8002e5a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002df4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4a34      	ldr	r2, [pc, #208]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6193      	str	r3, [r2, #24]
 8002e18:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f107 0318 	add.w	r3, r7, #24
 8002e36:	4619      	mov	r1, r3
 8002e38:	482b      	ldr	r0, [pc, #172]	@ (8002ee8 <HAL_UART_MspInit+0x114>)
 8002e3a:	f000 fac7 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 0318 	add.w	r3, r7, #24
 8002e50:	4619      	mov	r1, r3
 8002e52:	4825      	ldr	r0, [pc, #148]	@ (8002ee8 <HAL_UART_MspInit+0x114>)
 8002e54:	f000 faba 	bl	80033cc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e58:	e03e      	b.n	8002ed8 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <HAL_UART_MspInit+0x118>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d139      	bne.n	8002ed8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e6e:	61d3      	str	r3, [r2, #28]
 8002e70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <HAL_UART_MspInit+0x110>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 0318 	add.w	r3, r7, #24
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4811      	ldr	r0, [pc, #68]	@ (8002ef0 <HAL_UART_MspInit+0x11c>)
 8002eaa:	f000 fa8f 	bl	80033cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002eae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebc:	f107 0318 	add.w	r3, r7, #24
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480b      	ldr	r0, [pc, #44]	@ (8002ef0 <HAL_UART_MspInit+0x11c>)
 8002ec4:	f000 fa82 	bl	80033cc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2027      	movs	r0, #39	@ 0x27
 8002ece:	f000 f994 	bl	80031fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ed2:	2027      	movs	r0, #39	@ 0x27
 8002ed4:	f000 f9ad 	bl	8003232 <HAL_NVIC_EnableIRQ>
}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	@ 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010800 	.word	0x40010800
 8002eec:	40004800 	.word	0x40004800
 8002ef0:	40010c00 	.word	0x40010c00

08002ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ef4:	f7ff ff14 	bl	8002d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef8:	480b      	ldr	r0, [pc, #44]	@ (8002f28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002efa:	490c      	ldr	r1, [pc, #48]	@ (8002f2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002efc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f00:	e002      	b.n	8002f08 <LoopCopyDataInit>

08002f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f06:	3304      	adds	r3, #4

08002f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f0c:	d3f9      	bcc.n	8002f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f10:	4c09      	ldr	r4, [pc, #36]	@ (8002f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f14:	e001      	b.n	8002f1a <LoopFillZerobss>

08002f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f18:	3204      	adds	r2, #4

08002f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f1c:	d3fb      	bcc.n	8002f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f1e:	f003 fbad 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f22:	f7fe ff47 	bl	8001db4 <main>
  bx lr
 8002f26:	4770      	bx	lr
  ldr r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f2c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f30:	0800ac10 	.word	0x0800ac10
  ldr r2, =_sbss
 8002f34:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002f38:	200008b8 	.word	0x200008b8

08002f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f3c:	e7fe      	b.n	8002f3c <ADC1_2_IRQHandler>
	...

08002f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f44:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <HAL_Init+0x28>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <HAL_Init+0x28>)
 8002f4a:	f043 0310 	orr.w	r3, r3, #16
 8002f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f50:	2003      	movs	r0, #3
 8002f52:	f000 f947 	bl	80031e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f56:	200f      	movs	r0, #15
 8002f58:	f000 f808 	bl	8002f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f5c:	f7ff fdb6 	bl	8002acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f74:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_InitTick+0x54>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_InitTick+0x58>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f95f 	bl	800324e <HAL_SYSTICK_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00e      	b.n	8002fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d80a      	bhi.n	8002fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f000 f927 	bl	80031fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fac:	4a06      	ldr	r2, [pc, #24]	@ (8002fc8 <HAL_InitTick+0x5c>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	2000000c 	.word	0x2000000c
 8002fc4:	20000014 	.word	0x20000014
 8002fc8:	20000010 	.word	0x20000010

08002fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_IncTick+0x1c>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_IncTick+0x20>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a03      	ldr	r2, [pc, #12]	@ (8002fec <HAL_IncTick+0x20>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	20000014 	.word	0x20000014
 8002fec:	20000768 	.word	0x20000768

08002ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff4:	4b02      	ldr	r3, [pc, #8]	@ (8003000 <HAL_GetTick+0x10>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	20000768 	.word	0x20000768

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff fff0 	bl	8002ff0 <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d005      	beq.n	800302a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <HAL_Delay+0x44>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800302a:	bf00      	nop
 800302c:	f7ff ffe0 	bl	8002ff0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8f7      	bhi.n	800302c <HAL_Delay+0x28>
  {
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000014 	.word	0x20000014

0800304c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307e:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60d3      	str	r3, [r2, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003098:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <__NVIC_GetPriorityGrouping+0x18>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0307 	and.w	r3, r3, #7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db0b      	blt.n	80030da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	4906      	ldr	r1, [pc, #24]	@ (80030e4 <__NVIC_EnableIRQ+0x34>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	@ (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	@ (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	@ 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b0:	d301      	bcc.n	80031b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b2:	2301      	movs	r3, #1
 80031b4:	e00f      	b.n	80031d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b6:	4a0a      	ldr	r2, [pc, #40]	@ (80031e0 <SysTick_Config+0x40>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031be:	210f      	movs	r1, #15
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	f7ff ff90 	bl	80030e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <SysTick_Config+0x40>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ce:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <SysTick_Config+0x40>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	e000e010 	.word	0xe000e010

080031e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ff2d 	bl	800304c <__NVIC_SetPriorityGrouping>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800320c:	f7ff ff42 	bl	8003094 <__NVIC_GetPriorityGrouping>
 8003210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff90 	bl	800313c <NVIC_EncodePriority>
 800321c:	4602      	mov	r2, r0
 800321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff5f 	bl	80030e8 <__NVIC_SetPriority>
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff35 	bl	80030b0 <__NVIC_EnableIRQ>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffa2 	bl	80031a0 <SysTick_Config>
 800325c:	4603      	mov	r3, r0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d008      	beq.n	8003290 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e020      	b.n	80032d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020e 	bic.w	r2, r2, #14
 800329e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d005      	beq.n	8003300 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e051      	b.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 020e 	bic.w	r2, r2, #14
 800330e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a22      	ldr	r2, [pc, #136]	@ (80033b0 <HAL_DMA_Abort_IT+0xd4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d029      	beq.n	800337e <HAL_DMA_Abort_IT+0xa2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a21      	ldr	r2, [pc, #132]	@ (80033b4 <HAL_DMA_Abort_IT+0xd8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_DMA_Abort_IT+0x9e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1f      	ldr	r2, [pc, #124]	@ (80033b8 <HAL_DMA_Abort_IT+0xdc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x98>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1e      	ldr	r2, [pc, #120]	@ (80033bc <HAL_DMA_Abort_IT+0xe0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d012      	beq.n	800336e <HAL_DMA_Abort_IT+0x92>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1c      	ldr	r2, [pc, #112]	@ (80033c0 <HAL_DMA_Abort_IT+0xe4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00a      	beq.n	8003368 <HAL_DMA_Abort_IT+0x8c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1b      	ldr	r2, [pc, #108]	@ (80033c4 <HAL_DMA_Abort_IT+0xe8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d102      	bne.n	8003362 <HAL_DMA_Abort_IT+0x86>
 800335c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003360:	e00e      	b.n	8003380 <HAL_DMA_Abort_IT+0xa4>
 8003362:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003366:	e00b      	b.n	8003380 <HAL_DMA_Abort_IT+0xa4>
 8003368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800336c:	e008      	b.n	8003380 <HAL_DMA_Abort_IT+0xa4>
 800336e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003372:	e005      	b.n	8003380 <HAL_DMA_Abort_IT+0xa4>
 8003374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003378:	e002      	b.n	8003380 <HAL_DMA_Abort_IT+0xa4>
 800337a:	2310      	movs	r3, #16
 800337c:	e000      	b.n	8003380 <HAL_DMA_Abort_IT+0xa4>
 800337e:	2301      	movs	r3, #1
 8003380:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <HAL_DMA_Abort_IT+0xec>)
 8003382:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
    } 
  }
  return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40020008 	.word	0x40020008
 80033b4:	4002001c 	.word	0x4002001c
 80033b8:	40020030 	.word	0x40020030
 80033bc:	40020044 	.word	0x40020044
 80033c0:	40020058 	.word	0x40020058
 80033c4:	4002006c 	.word	0x4002006c
 80033c8:	40020000 	.word	0x40020000

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b08b      	sub	sp, #44	@ 0x2c
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033de:	e169      	b.n	80036b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033e0:	2201      	movs	r2, #1
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f040 8158 	bne.w	80036ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a9a      	ldr	r2, [pc, #616]	@ (800366c <HAL_GPIO_Init+0x2a0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d05e      	beq.n	80034c6 <HAL_GPIO_Init+0xfa>
 8003408:	4a98      	ldr	r2, [pc, #608]	@ (800366c <HAL_GPIO_Init+0x2a0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d875      	bhi.n	80034fa <HAL_GPIO_Init+0x12e>
 800340e:	4a98      	ldr	r2, [pc, #608]	@ (8003670 <HAL_GPIO_Init+0x2a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d058      	beq.n	80034c6 <HAL_GPIO_Init+0xfa>
 8003414:	4a96      	ldr	r2, [pc, #600]	@ (8003670 <HAL_GPIO_Init+0x2a4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d86f      	bhi.n	80034fa <HAL_GPIO_Init+0x12e>
 800341a:	4a96      	ldr	r2, [pc, #600]	@ (8003674 <HAL_GPIO_Init+0x2a8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d052      	beq.n	80034c6 <HAL_GPIO_Init+0xfa>
 8003420:	4a94      	ldr	r2, [pc, #592]	@ (8003674 <HAL_GPIO_Init+0x2a8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d869      	bhi.n	80034fa <HAL_GPIO_Init+0x12e>
 8003426:	4a94      	ldr	r2, [pc, #592]	@ (8003678 <HAL_GPIO_Init+0x2ac>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04c      	beq.n	80034c6 <HAL_GPIO_Init+0xfa>
 800342c:	4a92      	ldr	r2, [pc, #584]	@ (8003678 <HAL_GPIO_Init+0x2ac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d863      	bhi.n	80034fa <HAL_GPIO_Init+0x12e>
 8003432:	4a92      	ldr	r2, [pc, #584]	@ (800367c <HAL_GPIO_Init+0x2b0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d046      	beq.n	80034c6 <HAL_GPIO_Init+0xfa>
 8003438:	4a90      	ldr	r2, [pc, #576]	@ (800367c <HAL_GPIO_Init+0x2b0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d85d      	bhi.n	80034fa <HAL_GPIO_Init+0x12e>
 800343e:	2b12      	cmp	r3, #18
 8003440:	d82a      	bhi.n	8003498 <HAL_GPIO_Init+0xcc>
 8003442:	2b12      	cmp	r3, #18
 8003444:	d859      	bhi.n	80034fa <HAL_GPIO_Init+0x12e>
 8003446:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <HAL_GPIO_Init+0x80>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	080034c7 	.word	0x080034c7
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080034b3 	.word	0x080034b3
 8003458:	080034f5 	.word	0x080034f5
 800345c:	080034fb 	.word	0x080034fb
 8003460:	080034fb 	.word	0x080034fb
 8003464:	080034fb 	.word	0x080034fb
 8003468:	080034fb 	.word	0x080034fb
 800346c:	080034fb 	.word	0x080034fb
 8003470:	080034fb 	.word	0x080034fb
 8003474:	080034fb 	.word	0x080034fb
 8003478:	080034fb 	.word	0x080034fb
 800347c:	080034fb 	.word	0x080034fb
 8003480:	080034fb 	.word	0x080034fb
 8003484:	080034fb 	.word	0x080034fb
 8003488:	080034fb 	.word	0x080034fb
 800348c:	080034fb 	.word	0x080034fb
 8003490:	080034a9 	.word	0x080034a9
 8003494:	080034bd 	.word	0x080034bd
 8003498:	4a79      	ldr	r2, [pc, #484]	@ (8003680 <HAL_GPIO_Init+0x2b4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800349e:	e02c      	b.n	80034fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	623b      	str	r3, [r7, #32]
          break;
 80034a6:	e029      	b.n	80034fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	3304      	adds	r3, #4
 80034ae:	623b      	str	r3, [r7, #32]
          break;
 80034b0:	e024      	b.n	80034fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	3308      	adds	r3, #8
 80034b8:	623b      	str	r3, [r7, #32]
          break;
 80034ba:	e01f      	b.n	80034fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	330c      	adds	r3, #12
 80034c2:	623b      	str	r3, [r7, #32]
          break;
 80034c4:	e01a      	b.n	80034fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034ce:	2304      	movs	r3, #4
 80034d0:	623b      	str	r3, [r7, #32]
          break;
 80034d2:	e013      	b.n	80034fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034dc:	2308      	movs	r3, #8
 80034de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	611a      	str	r2, [r3, #16]
          break;
 80034e6:	e009      	b.n	80034fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e8:	2308      	movs	r3, #8
 80034ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	615a      	str	r2, [r3, #20]
          break;
 80034f2:	e003      	b.n	80034fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034f4:	2300      	movs	r3, #0
 80034f6:	623b      	str	r3, [r7, #32]
          break;
 80034f8:	e000      	b.n	80034fc <HAL_GPIO_Init+0x130>
          break;
 80034fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2bff      	cmp	r3, #255	@ 0xff
 8003500:	d801      	bhi.n	8003506 <HAL_GPIO_Init+0x13a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	e001      	b.n	800350a <HAL_GPIO_Init+0x13e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2bff      	cmp	r3, #255	@ 0xff
 8003510:	d802      	bhi.n	8003518 <HAL_GPIO_Init+0x14c>
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	e002      	b.n	800351e <HAL_GPIO_Init+0x152>
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	3b08      	subs	r3, #8
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	210f      	movs	r1, #15
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	6a39      	ldr	r1, [r7, #32]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80b1 	beq.w	80036ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800354c:	4b4d      	ldr	r3, [pc, #308]	@ (8003684 <HAL_GPIO_Init+0x2b8>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	4a4c      	ldr	r2, [pc, #304]	@ (8003684 <HAL_GPIO_Init+0x2b8>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6193      	str	r3, [r2, #24]
 8003558:	4b4a      	ldr	r3, [pc, #296]	@ (8003684 <HAL_GPIO_Init+0x2b8>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003564:	4a48      	ldr	r2, [pc, #288]	@ (8003688 <HAL_GPIO_Init+0x2bc>)
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a40      	ldr	r2, [pc, #256]	@ (800368c <HAL_GPIO_Init+0x2c0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_GPIO_Init+0x1ec>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3f      	ldr	r2, [pc, #252]	@ (8003690 <HAL_GPIO_Init+0x2c4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00d      	beq.n	80035b4 <HAL_GPIO_Init+0x1e8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3e      	ldr	r2, [pc, #248]	@ (8003694 <HAL_GPIO_Init+0x2c8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <HAL_GPIO_Init+0x1e4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	@ (8003698 <HAL_GPIO_Init+0x2cc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_GPIO_Init+0x1e0>
 80035a8:	2303      	movs	r3, #3
 80035aa:	e006      	b.n	80035ba <HAL_GPIO_Init+0x1ee>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e004      	b.n	80035ba <HAL_GPIO_Init+0x1ee>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e002      	b.n	80035ba <HAL_GPIO_Init+0x1ee>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_GPIO_Init+0x1ee>
 80035b8:	2300      	movs	r3, #0
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	f002 0203 	and.w	r2, r2, #3
 80035c0:	0092      	lsls	r2, r2, #2
 80035c2:	4093      	lsls	r3, r2
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ca:	492f      	ldr	r1, [pc, #188]	@ (8003688 <HAL_GPIO_Init+0x2bc>)
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d006      	beq.n	80035f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035e4:	4b2d      	ldr	r3, [pc, #180]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	492c      	ldr	r1, [pc, #176]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]
 80035f0:	e006      	b.n	8003600 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f2:	4b2a      	ldr	r3, [pc, #168]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	4928      	ldr	r1, [pc, #160]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800360c:	4b23      	ldr	r3, [pc, #140]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	4922      	ldr	r1, [pc, #136]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	60cb      	str	r3, [r1, #12]
 8003618:	e006      	b.n	8003628 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	43db      	mvns	r3, r3
 8003622:	491e      	ldr	r1, [pc, #120]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 8003624:	4013      	ands	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4918      	ldr	r1, [pc, #96]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003642:	4b16      	ldr	r3, [pc, #88]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	43db      	mvns	r3, r3
 800364a:	4914      	ldr	r1, [pc, #80]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 800364c:	4013      	ands	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d021      	beq.n	80036a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800365c:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	490e      	ldr	r1, [pc, #56]	@ (800369c <HAL_GPIO_Init+0x2d0>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	e021      	b.n	80036ae <HAL_GPIO_Init+0x2e2>
 800366a:	bf00      	nop
 800366c:	10320000 	.word	0x10320000
 8003670:	10310000 	.word	0x10310000
 8003674:	10220000 	.word	0x10220000
 8003678:	10210000 	.word	0x10210000
 800367c:	10120000 	.word	0x10120000
 8003680:	10110000 	.word	0x10110000
 8003684:	40021000 	.word	0x40021000
 8003688:	40010000 	.word	0x40010000
 800368c:	40010800 	.word	0x40010800
 8003690:	40010c00 	.word	0x40010c00
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036a0:	4b0b      	ldr	r3, [pc, #44]	@ (80036d0 <HAL_GPIO_Init+0x304>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	4909      	ldr	r1, [pc, #36]	@ (80036d0 <HAL_GPIO_Init+0x304>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	3301      	adds	r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f47f ae8e 	bne.w	80033e0 <HAL_GPIO_Init+0x14>
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	372c      	adds	r7, #44	@ 0x2c
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	40010400 	.word	0x40010400

080036d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	e001      	b.n	80036f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]
 800370e:	4613      	mov	r3, r2
 8003710:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003712:	787b      	ldrb	r3, [r7, #1]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003718:	887a      	ldrh	r2, [r7, #2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800371e:	e003      	b.n	8003728 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	041a      	lsls	r2, r3, #16
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	611a      	str	r2, [r3, #16]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
	...

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e12b      	b.n	800399e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd fd94 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	@ 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003798:	f001 f832 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4a81      	ldr	r2, [pc, #516]	@ (80039a8 <HAL_I2C_Init+0x274>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d807      	bhi.n	80037b8 <HAL_I2C_Init+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a80      	ldr	r2, [pc, #512]	@ (80039ac <HAL_I2C_Init+0x278>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bf94      	ite	ls
 80037b0:	2301      	movls	r3, #1
 80037b2:	2300      	movhi	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e006      	b.n	80037c6 <HAL_I2C_Init+0x92>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a7d      	ldr	r2, [pc, #500]	@ (80039b0 <HAL_I2C_Init+0x27c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0e7      	b.n	800399e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a78      	ldr	r2, [pc, #480]	@ (80039b4 <HAL_I2C_Init+0x280>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	@ (80039a8 <HAL_I2C_Init+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d802      	bhi.n	8003808 <HAL_I2C_Init+0xd4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	e009      	b.n	800381c <HAL_I2C_Init+0xe8>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a69      	ldr	r2, [pc, #420]	@ (80039b8 <HAL_I2C_Init+0x284>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	3301      	adds	r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	430b      	orrs	r3, r1
 8003822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800382e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	495c      	ldr	r1, [pc, #368]	@ (80039a8 <HAL_I2C_Init+0x274>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d819      	bhi.n	8003870 <HAL_I2C_Init+0x13c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e59      	subs	r1, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fbb1 f3f3 	udiv	r3, r1, r3
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003850:	400b      	ands	r3, r1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_I2C_Init+0x138>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e59      	subs	r1, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fbb1 f3f3 	udiv	r3, r1, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	e051      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 800386c:	2304      	movs	r3, #4
 800386e:	e04f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_I2C_Init+0x168>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e012      	b.n	80038c2 <HAL_I2C_Init+0x18e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	0099      	lsls	r1, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Init+0x196>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e022      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10e      	bne.n	80038f0 <HAL_I2C_Init+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e58      	subs	r0, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	440b      	add	r3, r1
 80038e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6809      	ldr	r1, [r1, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800393e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6911      	ldr	r1, [r2, #16]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	000186a0 	.word	0x000186a0
 80039ac:	001e847f 	.word	0x001e847f
 80039b0:	003d08ff 	.word	0x003d08ff
 80039b4:	431bde83 	.word	0x431bde83
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	461a      	mov	r2, r3
 80039c8:	460b      	mov	r3, r1
 80039ca:	817b      	strh	r3, [r7, #10]
 80039cc:	4613      	mov	r3, r2
 80039ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff fb0e 	bl	8002ff0 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 80e0 	bne.w	8003ba4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2319      	movs	r3, #25
 80039ea:	2201      	movs	r2, #1
 80039ec:	4970      	ldr	r1, [pc, #448]	@ (8003bb0 <HAL_I2C_Master_Transmit+0x1f4>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f964 	bl	8003cbc <I2C_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0d3      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2C_Master_Transmit+0x50>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0cc      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d007      	beq.n	8003a32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	@ 0x21
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	893a      	ldrh	r2, [r7, #8]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a50      	ldr	r2, [pc, #320]	@ (8003bb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a74:	8979      	ldrh	r1, [r7, #10]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f89c 	bl	8003bb8 <I2C_MasterRequestWrite>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e08d      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aa0:	e066      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	6a39      	ldr	r1, [r7, #32]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa22 	bl	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d107      	bne.n	8003aca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06b      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_I2C_Master_Transmit+0x188>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d017      	beq.n	8003b44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6a39      	ldr	r1, [r7, #32]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fa19 	bl	8003f80 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d107      	bne.n	8003b6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e01a      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d194      	bne.n	8003aa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	00100002 	.word	0x00100002
 8003bb4:	ffff0000 	.word	0xffff0000

08003bb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d006      	beq.n	8003be2 <I2C_MasterRequestWrite+0x2a>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d003      	beq.n	8003be2 <I2C_MasterRequestWrite+0x2a>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003be0:	d108      	bne.n	8003bf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e00b      	b.n	8003c0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	2b12      	cmp	r3, #18
 8003bfa:	d107      	bne.n	8003c0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f84f 	bl	8003cbc <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c32:	d103      	bne.n	8003c3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e035      	b.n	8003cac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c48:	d108      	bne.n	8003c5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	e01b      	b.n	8003c94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	11db      	asrs	r3, r3, #7
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f063 030f 	orn	r3, r3, #15
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <I2C_MasterRequestWrite+0xfc>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f898 	bl	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e010      	b.n	8003cac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4907      	ldr	r1, [pc, #28]	@ (8003cb8 <I2C_MasterRequestWrite+0x100>)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f888 	bl	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	00010008 	.word	0x00010008
 8003cb8:	00010002 	.word	0x00010002

08003cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ccc:	e048      	b.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d044      	beq.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7ff f98b 	bl	8002ff0 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d139      	bne.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10d      	bne.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	e00c      	b.n	8003d2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d116      	bne.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e023      	b.n	8003da8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10d      	bne.n	8003d86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	e00c      	b.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d093      	beq.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dbe:	e071      	b.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d123      	bne.n	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003de8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	f043 0204 	orr.w	r2, r3, #4
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e067      	b.n	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d041      	beq.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7ff f8e6 	bl	8002ff0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d136      	bne.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10c      	bne.n	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e00b      	b.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e021      	b.n	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10c      	bne.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e00b      	b.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f af6d 	bne.w	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003efc:	e034      	b.n	8003f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f886 	bl	8004010 <I2C_IsAcknowledgeFailed>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e034      	b.n	8003f78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d028      	beq.n	8003f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7ff f86b 	bl	8002ff0 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11d      	bne.n	8003f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f36:	2b80      	cmp	r3, #128	@ 0x80
 8003f38:	d016      	beq.n	8003f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d1c3      	bne.n	8003efe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f8c:	e034      	b.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f83e 	bl	8004010 <I2C_IsAcknowledgeFailed>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e034      	b.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d028      	beq.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7ff f823 	bl	8002ff0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11d      	bne.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d016      	beq.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e007      	b.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b04      	cmp	r3, #4
 8004004:	d1c3      	bne.n	8003f8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004026:	d11b      	bne.n	8004060 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004030:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	f043 0204 	orr.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e272      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8087 	beq.w	800419a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800408c:	4b92      	ldr	r3, [pc, #584]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b04      	cmp	r3, #4
 8004096:	d00c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004098:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d112      	bne.n	80040ca <HAL_RCC_OscConfig+0x5e>
 80040a4:	4b8c      	ldr	r3, [pc, #560]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b0:	d10b      	bne.n	80040ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b2:	4b89      	ldr	r3, [pc, #548]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06c      	beq.n	8004198 <HAL_RCC_OscConfig+0x12c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d168      	bne.n	8004198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e24c      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d2:	d106      	bne.n	80040e2 <HAL_RCC_OscConfig+0x76>
 80040d4:	4b80      	ldr	r3, [pc, #512]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7f      	ldr	r2, [pc, #508]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e02e      	b.n	8004140 <HAL_RCC_OscConfig+0xd4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x98>
 80040ea:	4b7b      	ldr	r3, [pc, #492]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7a      	ldr	r2, [pc, #488]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b78      	ldr	r3, [pc, #480]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a77      	ldr	r2, [pc, #476]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xd4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0xbc>
 800410e:	4b72      	ldr	r3, [pc, #456]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a71      	ldr	r2, [pc, #452]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b6f      	ldr	r3, [pc, #444]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6e      	ldr	r2, [pc, #440]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xd4>
 8004128:	4b6b      	ldr	r3, [pc, #428]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6a      	ldr	r2, [pc, #424]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b68      	ldr	r3, [pc, #416]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a67      	ldr	r2, [pc, #412]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800413e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fe ff52 	bl	8002ff0 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fe ff4e 	bl	8002ff0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	@ 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e200      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b5d      	ldr	r3, [pc, #372]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xe4>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe ff3e 	bl	8002ff0 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fe ff3a 	bl	8002ff0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	@ 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1ec      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	4b53      	ldr	r3, [pc, #332]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x10c>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d063      	beq.n	800426e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a6:	4b4c      	ldr	r3, [pc, #304]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041b2:	4b49      	ldr	r3, [pc, #292]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d11c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x18c>
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	4b43      	ldr	r3, [pc, #268]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCC_OscConfig+0x176>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e1c0      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b3d      	ldr	r3, [pc, #244]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4939      	ldr	r1, [pc, #228]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	e03a      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <HAL_RCC_OscConfig+0x270>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fe fef3 	bl	8002ff0 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420e:	f7fe feef 	bl	8002ff0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1a1      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	4b2d      	ldr	r3, [pc, #180]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4927      	ldr	r1, [pc, #156]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b26      	ldr	r3, [pc, #152]	@ (80042dc <HAL_RCC_OscConfig+0x270>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe fed2 	bl	8002ff0 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004250:	f7fe fece 	bl	8002ff0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e180      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	4b1d      	ldr	r3, [pc, #116]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03a      	beq.n	80042f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d019      	beq.n	80042b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b17      	ldr	r3, [pc, #92]	@ (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fe feb2 	bl	8002ff0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fe feae 	bl	8002ff0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e160      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042ae:	2001      	movs	r0, #1
 80042b0:	f000 face 	bl	8004850 <RCC_Delay>
 80042b4:	e01c      	b.n	80042f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b6:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fe fe98 	bl	8002ff0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c2:	e00f      	b.n	80042e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fe fe94 	bl	8002ff0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d908      	bls.n	80042e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e146      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	42420000 	.word	0x42420000
 80042e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b92      	ldr	r3, [pc, #584]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e9      	bne.n	80042c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a6 	beq.w	800444a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004302:	4b8b      	ldr	r3, [pc, #556]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10d      	bne.n	800432a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4b88      	ldr	r3, [pc, #544]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4a87      	ldr	r2, [pc, #540]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004318:	61d3      	str	r3, [r2, #28]
 800431a:	4b85      	ldr	r3, [pc, #532]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b82      	ldr	r3, [pc, #520]	@ (8004534 <HAL_RCC_OscConfig+0x4c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d118      	bne.n	8004368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4b7f      	ldr	r3, [pc, #508]	@ (8004534 <HAL_RCC_OscConfig+0x4c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7e      	ldr	r2, [pc, #504]	@ (8004534 <HAL_RCC_OscConfig+0x4c8>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7fe fe55 	bl	8002ff0 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe fe51 	bl	8002ff0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b64      	cmp	r3, #100	@ 0x64
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e103      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	4b75      	ldr	r3, [pc, #468]	@ (8004534 <HAL_RCC_OscConfig+0x4c8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x312>
 8004370:	4b6f      	ldr	r3, [pc, #444]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a6e      	ldr	r2, [pc, #440]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e02d      	b.n	80043da <HAL_RCC_OscConfig+0x36e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x334>
 8004386:	4b6a      	ldr	r3, [pc, #424]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4a69      	ldr	r2, [pc, #420]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6213      	str	r3, [r2, #32]
 8004392:	4b67      	ldr	r3, [pc, #412]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4a66      	ldr	r2, [pc, #408]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	6213      	str	r3, [r2, #32]
 800439e:	e01c      	b.n	80043da <HAL_RCC_OscConfig+0x36e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d10c      	bne.n	80043c2 <HAL_RCC_OscConfig+0x356>
 80043a8:	4b61      	ldr	r3, [pc, #388]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a60      	ldr	r2, [pc, #384]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6213      	str	r3, [r2, #32]
 80043c0:	e00b      	b.n	80043da <HAL_RCC_OscConfig+0x36e>
 80043c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4a5a      	ldr	r2, [pc, #360]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	6213      	str	r3, [r2, #32]
 80043ce:	4b58      	ldr	r3, [pc, #352]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a57      	ldr	r2, [pc, #348]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d015      	beq.n	800440e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e2:	f7fe fe05 	bl	8002ff0 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fe fe01 	bl	8002ff0 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0b1      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	4b4b      	ldr	r3, [pc, #300]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ee      	beq.n	80043ea <HAL_RCC_OscConfig+0x37e>
 800440c:	e014      	b.n	8004438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fe fdef 	bl	8002ff0 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fe fdeb 	bl	8002ff0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e09b      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442c:	4b40      	ldr	r3, [pc, #256]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ee      	bne.n	8004416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d105      	bne.n	800444a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4b3c      	ldr	r3, [pc, #240]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a3b      	ldr	r2, [pc, #236]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8087 	beq.w	8004562 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004454:	4b36      	ldr	r3, [pc, #216]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b08      	cmp	r3, #8
 800445e:	d061      	beq.n	8004524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d146      	bne.n	80044f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <HAL_RCC_OscConfig+0x4cc>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fe fdbf 	bl	8002ff0 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004476:	f7fe fdbb 	bl	8002ff0 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e06d      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004488:	4b29      	ldr	r3, [pc, #164]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d108      	bne.n	80044b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800449e:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4921      	ldr	r1, [pc, #132]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a19      	ldr	r1, [r3, #32]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	430b      	orrs	r3, r1
 80044c2:	491b      	ldr	r1, [pc, #108]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004538 <HAL_RCC_OscConfig+0x4cc>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fe fd8f 	bl	8002ff0 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d6:	f7fe fd8b 	bl	8002ff0 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e03d      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x46a>
 80044f4:	e035      	b.n	8004562 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b10      	ldr	r3, [pc, #64]	@ (8004538 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe fd78 	bl	8002ff0 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fe fd74 	bl	8002ff0 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e026      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x498>
 8004522:	e01e      	b.n	8004562 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e019      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
 8004538:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_OscConfig+0x500>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	429a      	cmp	r2, r3
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000

08004570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0d0      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d910      	bls.n	80045b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b67      	ldr	r3, [pc, #412]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 0207 	bic.w	r2, r3, #7
 800459a:	4965      	ldr	r1, [pc, #404]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b63      	ldr	r3, [pc, #396]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0b8      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045cc:	4b59      	ldr	r3, [pc, #356]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4a58      	ldr	r2, [pc, #352]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e4:	4b53      	ldr	r3, [pc, #332]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a52      	ldr	r2, [pc, #328]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f0:	4b50      	ldr	r3, [pc, #320]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	494d      	ldr	r1, [pc, #308]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d040      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d115      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e07f      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b41      	ldr	r3, [pc, #260]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e073      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3d      	ldr	r3, [pc, #244]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e06b      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b39      	ldr	r3, [pc, #228]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4936      	ldr	r1, [pc, #216]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fe fcc6 	bl	8002ff0 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fe fcc2 	bl	8002ff0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e053      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2d      	ldr	r3, [pc, #180]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d210      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4922      	ldr	r1, [pc, #136]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e032      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046cc:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4916      	ldr	r1, [pc, #88]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ea:	4b12      	ldr	r3, [pc, #72]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	490e      	ldr	r1, [pc, #56]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046fe:	f000 f821 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8004702:	4602      	mov	r2, r0
 8004704:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	490a      	ldr	r1, [pc, #40]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	5ccb      	ldrb	r3, [r1, r3]
 8004712:	fa22 f303 	lsr.w	r3, r2, r3
 8004716:	4a09      	ldr	r2, [pc, #36]	@ (800473c <HAL_RCC_ClockConfig+0x1cc>)
 8004718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800471a:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <HAL_RCC_ClockConfig+0x1d0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fc24 	bl	8002f6c <HAL_InitTick>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	0800a7ac 	.word	0x0800a7ac
 800473c:	2000000c 	.word	0x2000000c
 8004740:	20000010 	.word	0x20000010

08004744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	2300      	movs	r3, #0
 8004758:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800475e:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b04      	cmp	r3, #4
 800476c:	d002      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x30>
 800476e:	2b08      	cmp	r3, #8
 8004770:	d003      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x36>
 8004772:	e027      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004774:	4b19      	ldr	r3, [pc, #100]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x98>)
 8004776:	613b      	str	r3, [r7, #16]
      break;
 8004778:	e027      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0c9b      	lsrs	r3, r3, #18
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004784:	5cd3      	ldrb	r3, [r2, r3]
 8004786:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d010      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004792:	4b11      	ldr	r3, [pc, #68]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	0c5b      	lsrs	r3, r3, #17
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	4a11      	ldr	r2, [pc, #68]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a0d      	ldr	r2, [pc, #52]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x98>)
 80047a6:	fb03 f202 	mul.w	r2, r3, r2
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e004      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0c      	ldr	r2, [pc, #48]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	613b      	str	r3, [r7, #16]
      break;
 80047c2:	e002      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x98>)
 80047c6:	613b      	str	r3, [r7, #16]
      break;
 80047c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ca:	693b      	ldr	r3, [r7, #16]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
 80047dc:	007a1200 	.word	0x007a1200
 80047e0:	0800a7c4 	.word	0x0800a7c4
 80047e4:	0800a7d4 	.word	0x0800a7d4
 80047e8:	003d0900 	.word	0x003d0900

080047ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b02      	ldr	r3, [pc, #8]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x10>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	2000000c 	.word	0x2000000c

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004804:	f7ff fff2 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	@ (8004824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000
 8004824:	0800a7bc 	.word	0x0800a7bc

08004828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800482c:	f7ff ffde 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	0adb      	lsrs	r3, r3, #11
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4903      	ldr	r1, [pc, #12]	@ (800484c <HAL_RCC_GetPCLK2Freq+0x24>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40021000 	.word	0x40021000
 800484c:	0800a7bc 	.word	0x0800a7bc

08004850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004858:	4b0a      	ldr	r3, [pc, #40]	@ (8004884 <RCC_Delay+0x34>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <RCC_Delay+0x38>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0a5b      	lsrs	r3, r3, #9
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800486c:	bf00      	nop
  }
  while (Delay --);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	60fa      	str	r2, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f9      	bne.n	800486c <RCC_Delay+0x1c>
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	2000000c 	.word	0x2000000c
 8004888:	10624dd3 	.word	0x10624dd3

0800488c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e042      	b.n	8004924 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fe fa8e 	bl	8002dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	@ 0x24
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fdb7 	bl	8005444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	@ 0x28
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b20      	cmp	r3, #32
 800494a:	d175      	bne.n	8004a38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_UART_Transmit+0x2c>
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e06e      	b.n	8004a3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2221      	movs	r2, #33	@ 0x21
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800496a:	f7fe fb41 	bl	8002ff0 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004984:	d108      	bne.n	8004998 <HAL_UART_Transmit+0x6c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e003      	b.n	80049a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049a0:	e02e      	b.n	8004a00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fb1c 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e03a      	b.n	8004a3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	3302      	adds	r3, #2
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e007      	b.n	80049f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	3301      	adds	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1cb      	bne.n	80049a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2140      	movs	r1, #64	@ 0x40
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fae8 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e006      	b.n	8004a3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d112      	bne.n	8004a82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Receive_IT+0x26>
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e00b      	b.n	8004a84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	461a      	mov	r2, r3
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fb0f 	bl	800509c <UART_Start_Receive_IT>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	e000      	b.n	8004a84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b0ba      	sub	sp, #232	@ 0xe8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_UART_IRQHandler+0x66>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fbec 	bl	80052c8 <UART_Receive_IT>
      return;
 8004af0:	e25b      	b.n	8004faa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80de 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x22c>
 8004afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80d1 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_UART_IRQHandler+0xae>
 8004b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_UART_IRQHandler+0xd2>
 8004b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0202 	orr.w	r2, r3, #2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_UART_IRQHandler+0xf6>
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d011      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x126>
 8004b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	f043 0208 	orr.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 81f2 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_UART_IRQHandler+0x14e>
 8004bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fb77 	bl	80052c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_UART_IRQHandler+0x17a>
 8004bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d04f      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa81 	bl	800510e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d041      	beq.n	8004c9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1d9      	bne.n	8004c1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d013      	beq.n	8004c96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c72:	4a7e      	ldr	r2, [pc, #504]	@ (8004e6c <HAL_UART_IRQHandler+0x3e0>)
 8004c74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fb2e 	bl	80032dc <HAL_DMA_Abort_IT>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d016      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	e00e      	b.n	8004cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f993 	bl	8004fc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	e00a      	b.n	8004cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f98f 	bl	8004fc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	e006      	b.n	8004cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f98b 	bl	8004fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cb2:	e175      	b.n	8004fa0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	bf00      	nop
    return;
 8004cb6:	e173      	b.n	8004fa0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	f040 814f 	bne.w	8004f60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8148 	beq.w	8004f60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8141 	beq.w	8004f60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80b6 	beq.w	8004e70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8145 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f080 813e 	bcs.w	8004fa4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f000 8088 	beq.w	8004e4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d68:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d74:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1d9      	bne.n	8004d3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3314      	adds	r3, #20
 8004d8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e1      	bne.n	8004d88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3314      	adds	r3, #20
 8004dca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004de8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e3      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e1c:	f023 0310 	bic.w	r3, r3, #16
 8004e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e2e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e30:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e3      	bne.n	8004e0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fa0d 	bl	8003266 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8b6 	bl	8004fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e68:	e09c      	b.n	8004fa4 <HAL_UART_IRQHandler+0x518>
 8004e6a:	bf00      	nop
 8004e6c:	080051d3 	.word	0x080051d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 808e 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8089 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004eba:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ebc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e3      	bne.n	8004e96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ef2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e3      	bne.n	8004ece <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f38:	61fa      	str	r2, [r7, #28]
 8004f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	617b      	str	r3, [r7, #20]
   return(result);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e3      	bne.n	8004f14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f83b 	bl	8004fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f5e:	e023      	b.n	8004fa8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_UART_IRQHandler+0x4f4>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f93e 	bl	80051fa <UART_Transmit_IT>
    return;
 8004f7e:	e014      	b.n	8004faa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <HAL_UART_IRQHandler+0x51e>
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f97d 	bl	8005298 <UART_EndTransmit_IT>
    return;
 8004f9e:	e004      	b.n	8004faa <HAL_UART_IRQHandler+0x51e>
    return;
 8004fa0:	bf00      	nop
 8004fa2:	e002      	b.n	8004faa <HAL_UART_IRQHandler+0x51e>
      return;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_UART_IRQHandler+0x51e>
      return;
 8004fa8:	bf00      	nop
  }
}
 8004faa:	37e8      	adds	r7, #232	@ 0xe8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffa:	e03b      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d037      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fd fff4 	bl	8002ff0 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <UART_WaitOnFlagUntilTimeout+0x30>
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e03a      	b.n	8005094 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d023      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x8a>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b80      	cmp	r3, #128	@ 0x80
 8005030:	d020      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b40      	cmp	r3, #64	@ 0x40
 8005036:	d01d      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b08      	cmp	r3, #8
 8005044:	d116      	bne.n	8005074 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f856 	bl	800510e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2208      	movs	r2, #8
 8005066:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e00f      	b.n	8005094 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	429a      	cmp	r2, r3
 8005090:	d0b4      	beq.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2222      	movs	r2, #34	@ 0x22
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0220 	orr.w	r2, r2, #32
 8005100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b095      	sub	sp, #84	@ 0x54
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005136:	643a      	str	r2, [r7, #64]	@ 0x40
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800513c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	61fb      	str	r3, [r7, #28]
   return(result);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800516a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	2b01      	cmp	r3, #1
 8005184:	d119      	bne.n	80051ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	60bb      	str	r3, [r7, #8]
   return(result);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0310 	bic.w	r3, r3, #16
 800519c:	647b      	str	r3, [r7, #68]	@ 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a6:	61ba      	str	r2, [r7, #24]
 80051a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	613b      	str	r3, [r7, #16]
   return(result);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051c8:	bf00      	nop
 80051ca:	3754      	adds	r7, #84	@ 0x54
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff fee8 	bl	8004fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b21      	cmp	r3, #33	@ 0x21
 800520c:	d13e      	bne.n	800528c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005216:	d114      	bne.n	8005242 <UART_Transmit_IT+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d110      	bne.n	8005242 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005234:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]
 8005240:	e008      	b.n	8005254 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	1c59      	adds	r1, r3, #1
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6211      	str	r1, [r2, #32]
 800524c:	781a      	ldrb	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4619      	mov	r1, r3
 8005262:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10f      	bne.n	8005288 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005276:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005286:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fe79 	bl	8004fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	@ 0x30
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b22      	cmp	r3, #34	@ 0x22
 80052da:	f040 80ae 	bne.w	800543a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e6:	d117      	bne.n	8005318 <UART_Receive_IT+0x50>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	b29a      	uxth	r2, r3
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	1c9a      	adds	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	629a      	str	r2, [r3, #40]	@ 0x28
 8005316:	e026      	b.n	8005366 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532a:	d007      	beq.n	800533c <UART_Receive_IT+0x74>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <UART_Receive_IT+0x82>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	e008      	b.n	800535c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005356:	b2da      	uxtb	r2, r3
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29b      	uxth	r3, r3
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4619      	mov	r1, r3
 8005374:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005376:	2b00      	cmp	r3, #0
 8005378:	d15d      	bne.n	8005436 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0220 	bic.w	r2, r2, #32
 8005388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d135      	bne.n	800542c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	613b      	str	r3, [r7, #16]
   return(result);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f023 0310 	bic.w	r3, r3, #16
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e6:	623a      	str	r2, [r7, #32]
 80053e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	69f9      	ldr	r1, [r7, #28]
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d10a      	bne.n	800541e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fdd5 	bl	8004fd4 <HAL_UARTEx_RxEventCallback>
 800542a:	e002      	b.n	8005432 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fc fadd 	bl	80019ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e002      	b.n	800543c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3730      	adds	r7, #48	@ 0x30
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800547e:	f023 030c 	bic.w	r3, r3, #12
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	430b      	orrs	r3, r1
 800548a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <UART_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7ff f9bc 	bl	8004828 <HAL_RCC_GetPCLK2Freq>
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	e002      	b.n	80054ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054b4:	f7ff f9a4 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 80054b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009a      	lsls	r2, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	4a22      	ldr	r2, [pc, #136]	@ (800555c <UART_SetConfig+0x118>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	0119      	lsls	r1, r3, #4
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009a      	lsls	r2, r3, #2
 80054e4:	441a      	add	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f0:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <UART_SetConfig+0x118>)
 80054f2:	fba3 0302 	umull	r0, r3, r3, r2
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2064      	movs	r0, #100	@ 0x64
 80054fa:	fb00 f303 	mul.w	r3, r0, r3
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	3332      	adds	r3, #50	@ 0x32
 8005504:	4a15      	ldr	r2, [pc, #84]	@ (800555c <UART_SetConfig+0x118>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005510:	4419      	add	r1, r3
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009a      	lsls	r2, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	fbb2 f2f3 	udiv	r2, r2, r3
 8005528:	4b0c      	ldr	r3, [pc, #48]	@ (800555c <UART_SetConfig+0x118>)
 800552a:	fba3 0302 	umull	r0, r3, r3, r2
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2064      	movs	r0, #100	@ 0x64
 8005532:	fb00 f303 	mul.w	r3, r0, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	3332      	adds	r3, #50	@ 0x32
 800553c:	4a07      	ldr	r2, [pc, #28]	@ (800555c <UART_SetConfig+0x118>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f003 020f 	and.w	r2, r3, #15
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	440a      	add	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40013800 	.word	0x40013800
 800555c:	51eb851f 	.word	0x51eb851f

08005560 <atoi>:
 8005560:	220a      	movs	r2, #10
 8005562:	2100      	movs	r1, #0
 8005564:	f000 b87c 	b.w	8005660 <strtol>

08005568 <_strtol_l.isra.0>:
 8005568:	2b24      	cmp	r3, #36	@ 0x24
 800556a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556e:	4686      	mov	lr, r0
 8005570:	4690      	mov	r8, r2
 8005572:	d801      	bhi.n	8005578 <_strtol_l.isra.0+0x10>
 8005574:	2b01      	cmp	r3, #1
 8005576:	d106      	bne.n	8005586 <_strtol_l.isra.0+0x1e>
 8005578:	f001 f87a 	bl	8006670 <__errno>
 800557c:	2316      	movs	r3, #22
 800557e:	6003      	str	r3, [r0, #0]
 8005580:	2000      	movs	r0, #0
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	460d      	mov	r5, r1
 8005588:	4833      	ldr	r0, [pc, #204]	@ (8005658 <_strtol_l.isra.0+0xf0>)
 800558a:	462a      	mov	r2, r5
 800558c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005590:	5d06      	ldrb	r6, [r0, r4]
 8005592:	f016 0608 	ands.w	r6, r6, #8
 8005596:	d1f8      	bne.n	800558a <_strtol_l.isra.0+0x22>
 8005598:	2c2d      	cmp	r4, #45	@ 0x2d
 800559a:	d110      	bne.n	80055be <_strtol_l.isra.0+0x56>
 800559c:	2601      	movs	r6, #1
 800559e:	782c      	ldrb	r4, [r5, #0]
 80055a0:	1c95      	adds	r5, r2, #2
 80055a2:	f033 0210 	bics.w	r2, r3, #16
 80055a6:	d115      	bne.n	80055d4 <_strtol_l.isra.0+0x6c>
 80055a8:	2c30      	cmp	r4, #48	@ 0x30
 80055aa:	d10d      	bne.n	80055c8 <_strtol_l.isra.0+0x60>
 80055ac:	782a      	ldrb	r2, [r5, #0]
 80055ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80055b2:	2a58      	cmp	r2, #88	@ 0x58
 80055b4:	d108      	bne.n	80055c8 <_strtol_l.isra.0+0x60>
 80055b6:	786c      	ldrb	r4, [r5, #1]
 80055b8:	3502      	adds	r5, #2
 80055ba:	2310      	movs	r3, #16
 80055bc:	e00a      	b.n	80055d4 <_strtol_l.isra.0+0x6c>
 80055be:	2c2b      	cmp	r4, #43	@ 0x2b
 80055c0:	bf04      	itt	eq
 80055c2:	782c      	ldrbeq	r4, [r5, #0]
 80055c4:	1c95      	addeq	r5, r2, #2
 80055c6:	e7ec      	b.n	80055a2 <_strtol_l.isra.0+0x3a>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f6      	bne.n	80055ba <_strtol_l.isra.0+0x52>
 80055cc:	2c30      	cmp	r4, #48	@ 0x30
 80055ce:	bf14      	ite	ne
 80055d0:	230a      	movne	r3, #10
 80055d2:	2308      	moveq	r3, #8
 80055d4:	2200      	movs	r2, #0
 80055d6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80055da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80055de:	fbbc f9f3 	udiv	r9, ip, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80055e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80055ec:	2f09      	cmp	r7, #9
 80055ee:	d80f      	bhi.n	8005610 <_strtol_l.isra.0+0xa8>
 80055f0:	463c      	mov	r4, r7
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	dd1b      	ble.n	800562e <_strtol_l.isra.0+0xc6>
 80055f6:	1c57      	adds	r7, r2, #1
 80055f8:	d007      	beq.n	800560a <_strtol_l.isra.0+0xa2>
 80055fa:	4581      	cmp	r9, r0
 80055fc:	d314      	bcc.n	8005628 <_strtol_l.isra.0+0xc0>
 80055fe:	d101      	bne.n	8005604 <_strtol_l.isra.0+0x9c>
 8005600:	45a2      	cmp	sl, r4
 8005602:	db11      	blt.n	8005628 <_strtol_l.isra.0+0xc0>
 8005604:	2201      	movs	r2, #1
 8005606:	fb00 4003 	mla	r0, r0, r3, r4
 800560a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800560e:	e7eb      	b.n	80055e8 <_strtol_l.isra.0+0x80>
 8005610:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005614:	2f19      	cmp	r7, #25
 8005616:	d801      	bhi.n	800561c <_strtol_l.isra.0+0xb4>
 8005618:	3c37      	subs	r4, #55	@ 0x37
 800561a:	e7ea      	b.n	80055f2 <_strtol_l.isra.0+0x8a>
 800561c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005620:	2f19      	cmp	r7, #25
 8005622:	d804      	bhi.n	800562e <_strtol_l.isra.0+0xc6>
 8005624:	3c57      	subs	r4, #87	@ 0x57
 8005626:	e7e4      	b.n	80055f2 <_strtol_l.isra.0+0x8a>
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	e7ed      	b.n	800560a <_strtol_l.isra.0+0xa2>
 800562e:	1c53      	adds	r3, r2, #1
 8005630:	d108      	bne.n	8005644 <_strtol_l.isra.0+0xdc>
 8005632:	2322      	movs	r3, #34	@ 0x22
 8005634:	4660      	mov	r0, ip
 8005636:	f8ce 3000 	str.w	r3, [lr]
 800563a:	f1b8 0f00 	cmp.w	r8, #0
 800563e:	d0a0      	beq.n	8005582 <_strtol_l.isra.0+0x1a>
 8005640:	1e69      	subs	r1, r5, #1
 8005642:	e006      	b.n	8005652 <_strtol_l.isra.0+0xea>
 8005644:	b106      	cbz	r6, 8005648 <_strtol_l.isra.0+0xe0>
 8005646:	4240      	negs	r0, r0
 8005648:	f1b8 0f00 	cmp.w	r8, #0
 800564c:	d099      	beq.n	8005582 <_strtol_l.isra.0+0x1a>
 800564e:	2a00      	cmp	r2, #0
 8005650:	d1f6      	bne.n	8005640 <_strtol_l.isra.0+0xd8>
 8005652:	f8c8 1000 	str.w	r1, [r8]
 8005656:	e794      	b.n	8005582 <_strtol_l.isra.0+0x1a>
 8005658:	0800a7d7 	.word	0x0800a7d7

0800565c <_strtol_r>:
 800565c:	f7ff bf84 	b.w	8005568 <_strtol_l.isra.0>

08005660 <strtol>:
 8005660:	4613      	mov	r3, r2
 8005662:	460a      	mov	r2, r1
 8005664:	4601      	mov	r1, r0
 8005666:	4802      	ldr	r0, [pc, #8]	@ (8005670 <strtol+0x10>)
 8005668:	6800      	ldr	r0, [r0, #0]
 800566a:	f7ff bf7d 	b.w	8005568 <_strtol_l.isra.0>
 800566e:	bf00      	nop
 8005670:	20000024 	.word	0x20000024

08005674 <__cvt>:
 8005674:	2b00      	cmp	r3, #0
 8005676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800567a:	461d      	mov	r5, r3
 800567c:	bfbb      	ittet	lt
 800567e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005682:	461d      	movlt	r5, r3
 8005684:	2300      	movge	r3, #0
 8005686:	232d      	movlt	r3, #45	@ 0x2d
 8005688:	b088      	sub	sp, #32
 800568a:	4614      	mov	r4, r2
 800568c:	bfb8      	it	lt
 800568e:	4614      	movlt	r4, r2
 8005690:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005692:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005694:	7013      	strb	r3, [r2, #0]
 8005696:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005698:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800569c:	f023 0820 	bic.w	r8, r3, #32
 80056a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056a4:	d005      	beq.n	80056b2 <__cvt+0x3e>
 80056a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056aa:	d100      	bne.n	80056ae <__cvt+0x3a>
 80056ac:	3601      	adds	r6, #1
 80056ae:	2302      	movs	r3, #2
 80056b0:	e000      	b.n	80056b4 <__cvt+0x40>
 80056b2:	2303      	movs	r3, #3
 80056b4:	aa07      	add	r2, sp, #28
 80056b6:	9204      	str	r2, [sp, #16]
 80056b8:	aa06      	add	r2, sp, #24
 80056ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056be:	e9cd 3600 	strd	r3, r6, [sp]
 80056c2:	4622      	mov	r2, r4
 80056c4:	462b      	mov	r3, r5
 80056c6:	f001 f89b 	bl	8006800 <_dtoa_r>
 80056ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056ce:	4607      	mov	r7, r0
 80056d0:	d119      	bne.n	8005706 <__cvt+0x92>
 80056d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80056d4:	07db      	lsls	r3, r3, #31
 80056d6:	d50e      	bpl.n	80056f6 <__cvt+0x82>
 80056d8:	eb00 0906 	add.w	r9, r0, r6
 80056dc:	2200      	movs	r2, #0
 80056de:	2300      	movs	r3, #0
 80056e0:	4620      	mov	r0, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	f7fb f960 	bl	80009a8 <__aeabi_dcmpeq>
 80056e8:	b108      	cbz	r0, 80056ee <__cvt+0x7a>
 80056ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80056ee:	2230      	movs	r2, #48	@ 0x30
 80056f0:	9b07      	ldr	r3, [sp, #28]
 80056f2:	454b      	cmp	r3, r9
 80056f4:	d31e      	bcc.n	8005734 <__cvt+0xc0>
 80056f6:	4638      	mov	r0, r7
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80056fc:	1bdb      	subs	r3, r3, r7
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	b008      	add	sp, #32
 8005702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005706:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800570a:	eb00 0906 	add.w	r9, r0, r6
 800570e:	d1e5      	bne.n	80056dc <__cvt+0x68>
 8005710:	7803      	ldrb	r3, [r0, #0]
 8005712:	2b30      	cmp	r3, #48	@ 0x30
 8005714:	d10a      	bne.n	800572c <__cvt+0xb8>
 8005716:	2200      	movs	r2, #0
 8005718:	2300      	movs	r3, #0
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fb f943 	bl	80009a8 <__aeabi_dcmpeq>
 8005722:	b918      	cbnz	r0, 800572c <__cvt+0xb8>
 8005724:	f1c6 0601 	rsb	r6, r6, #1
 8005728:	f8ca 6000 	str.w	r6, [sl]
 800572c:	f8da 3000 	ldr.w	r3, [sl]
 8005730:	4499      	add	r9, r3
 8005732:	e7d3      	b.n	80056dc <__cvt+0x68>
 8005734:	1c59      	adds	r1, r3, #1
 8005736:	9107      	str	r1, [sp, #28]
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e7d9      	b.n	80056f0 <__cvt+0x7c>

0800573c <__exponent>:
 800573c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800573e:	2900      	cmp	r1, #0
 8005740:	bfb6      	itet	lt
 8005742:	232d      	movlt	r3, #45	@ 0x2d
 8005744:	232b      	movge	r3, #43	@ 0x2b
 8005746:	4249      	neglt	r1, r1
 8005748:	2909      	cmp	r1, #9
 800574a:	7002      	strb	r2, [r0, #0]
 800574c:	7043      	strb	r3, [r0, #1]
 800574e:	dd29      	ble.n	80057a4 <__exponent+0x68>
 8005750:	f10d 0307 	add.w	r3, sp, #7
 8005754:	461d      	mov	r5, r3
 8005756:	270a      	movs	r7, #10
 8005758:	fbb1 f6f7 	udiv	r6, r1, r7
 800575c:	461a      	mov	r2, r3
 800575e:	fb07 1416 	mls	r4, r7, r6, r1
 8005762:	3430      	adds	r4, #48	@ 0x30
 8005764:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005768:	460c      	mov	r4, r1
 800576a:	2c63      	cmp	r4, #99	@ 0x63
 800576c:	4631      	mov	r1, r6
 800576e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005772:	dcf1      	bgt.n	8005758 <__exponent+0x1c>
 8005774:	3130      	adds	r1, #48	@ 0x30
 8005776:	1e94      	subs	r4, r2, #2
 8005778:	f803 1c01 	strb.w	r1, [r3, #-1]
 800577c:	4623      	mov	r3, r4
 800577e:	1c41      	adds	r1, r0, #1
 8005780:	42ab      	cmp	r3, r5
 8005782:	d30a      	bcc.n	800579a <__exponent+0x5e>
 8005784:	f10d 0309 	add.w	r3, sp, #9
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	42ac      	cmp	r4, r5
 800578c:	bf88      	it	hi
 800578e:	2300      	movhi	r3, #0
 8005790:	3302      	adds	r3, #2
 8005792:	4403      	add	r3, r0
 8005794:	1a18      	subs	r0, r3, r0
 8005796:	b003      	add	sp, #12
 8005798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800579e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057a2:	e7ed      	b.n	8005780 <__exponent+0x44>
 80057a4:	2330      	movs	r3, #48	@ 0x30
 80057a6:	3130      	adds	r1, #48	@ 0x30
 80057a8:	7083      	strb	r3, [r0, #2]
 80057aa:	70c1      	strb	r1, [r0, #3]
 80057ac:	1d03      	adds	r3, r0, #4
 80057ae:	e7f1      	b.n	8005794 <__exponent+0x58>

080057b0 <_printf_float>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	b091      	sub	sp, #68	@ 0x44
 80057b6:	460c      	mov	r4, r1
 80057b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80057bc:	4616      	mov	r6, r2
 80057be:	461f      	mov	r7, r3
 80057c0:	4605      	mov	r5, r0
 80057c2:	f000 ff0b 	bl	80065dc <_localeconv_r>
 80057c6:	6803      	ldr	r3, [r0, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	9308      	str	r3, [sp, #32]
 80057cc:	f7fa fcc0 	bl	8000150 <strlen>
 80057d0:	2300      	movs	r3, #0
 80057d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80057d4:	f8d8 3000 	ldr.w	r3, [r8]
 80057d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80057da:	3307      	adds	r3, #7
 80057dc:	f023 0307 	bic.w	r3, r3, #7
 80057e0:	f103 0208 	add.w	r2, r3, #8
 80057e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057e8:	f8d4 b000 	ldr.w	fp, [r4]
 80057ec:	f8c8 2000 	str.w	r2, [r8]
 80057f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800580a:	4b9c      	ldr	r3, [pc, #624]	@ (8005a7c <_printf_float+0x2cc>)
 800580c:	f7fb f8fe 	bl	8000a0c <__aeabi_dcmpun>
 8005810:	bb70      	cbnz	r0, 8005870 <_printf_float+0xc0>
 8005812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005816:	f04f 32ff 	mov.w	r2, #4294967295
 800581a:	4b98      	ldr	r3, [pc, #608]	@ (8005a7c <_printf_float+0x2cc>)
 800581c:	f7fb f8d8 	bl	80009d0 <__aeabi_dcmple>
 8005820:	bb30      	cbnz	r0, 8005870 <_printf_float+0xc0>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fb f8c7 	bl	80009bc <__aeabi_dcmplt>
 800582e:	b110      	cbz	r0, 8005836 <_printf_float+0x86>
 8005830:	232d      	movs	r3, #45	@ 0x2d
 8005832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005836:	4a92      	ldr	r2, [pc, #584]	@ (8005a80 <_printf_float+0x2d0>)
 8005838:	4b92      	ldr	r3, [pc, #584]	@ (8005a84 <_printf_float+0x2d4>)
 800583a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800583e:	bf8c      	ite	hi
 8005840:	4690      	movhi	r8, r2
 8005842:	4698      	movls	r8, r3
 8005844:	2303      	movs	r3, #3
 8005846:	f04f 0900 	mov.w	r9, #0
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	f02b 0304 	bic.w	r3, fp, #4
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	4633      	mov	r3, r6
 8005854:	4621      	mov	r1, r4
 8005856:	4628      	mov	r0, r5
 8005858:	9700      	str	r7, [sp, #0]
 800585a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800585c:	f000 f9d4 	bl	8005c08 <_printf_common>
 8005860:	3001      	adds	r0, #1
 8005862:	f040 8090 	bne.w	8005986 <_printf_float+0x1d6>
 8005866:	f04f 30ff 	mov.w	r0, #4294967295
 800586a:	b011      	add	sp, #68	@ 0x44
 800586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005870:	4642      	mov	r2, r8
 8005872:	464b      	mov	r3, r9
 8005874:	4640      	mov	r0, r8
 8005876:	4649      	mov	r1, r9
 8005878:	f7fb f8c8 	bl	8000a0c <__aeabi_dcmpun>
 800587c:	b148      	cbz	r0, 8005892 <_printf_float+0xe2>
 800587e:	464b      	mov	r3, r9
 8005880:	2b00      	cmp	r3, #0
 8005882:	bfb8      	it	lt
 8005884:	232d      	movlt	r3, #45	@ 0x2d
 8005886:	4a80      	ldr	r2, [pc, #512]	@ (8005a88 <_printf_float+0x2d8>)
 8005888:	bfb8      	it	lt
 800588a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800588e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a8c <_printf_float+0x2dc>)
 8005890:	e7d3      	b.n	800583a <_printf_float+0x8a>
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	d13f      	bne.n	800591c <_printf_float+0x16c>
 800589c:	2306      	movs	r3, #6
 800589e:	6063      	str	r3, [r4, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	9206      	str	r2, [sp, #24]
 80058aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80058ac:	e9cd a204 	strd	sl, r2, [sp, #16]
 80058b0:	aa0d      	add	r2, sp, #52	@ 0x34
 80058b2:	9203      	str	r2, [sp, #12]
 80058b4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80058b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80058bc:	6863      	ldr	r3, [r4, #4]
 80058be:	4642      	mov	r2, r8
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	4628      	mov	r0, r5
 80058c4:	464b      	mov	r3, r9
 80058c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80058c8:	f7ff fed4 	bl	8005674 <__cvt>
 80058cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058ce:	4680      	mov	r8, r0
 80058d0:	2947      	cmp	r1, #71	@ 0x47
 80058d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80058d4:	d128      	bne.n	8005928 <_printf_float+0x178>
 80058d6:	1cc8      	adds	r0, r1, #3
 80058d8:	db02      	blt.n	80058e0 <_printf_float+0x130>
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	4299      	cmp	r1, r3
 80058de:	dd40      	ble.n	8005962 <_printf_float+0x1b2>
 80058e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80058e4:	fa5f fa8a 	uxtb.w	sl, sl
 80058e8:	4652      	mov	r2, sl
 80058ea:	3901      	subs	r1, #1
 80058ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80058f2:	f7ff ff23 	bl	800573c <__exponent>
 80058f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058f8:	4681      	mov	r9, r0
 80058fa:	1813      	adds	r3, r2, r0
 80058fc:	2a01      	cmp	r2, #1
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	dc02      	bgt.n	8005908 <_printf_float+0x158>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	07d2      	lsls	r2, r2, #31
 8005906:	d501      	bpl.n	800590c <_printf_float+0x15c>
 8005908:	3301      	adds	r3, #1
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005910:	2b00      	cmp	r3, #0
 8005912:	d09e      	beq.n	8005852 <_printf_float+0xa2>
 8005914:	232d      	movs	r3, #45	@ 0x2d
 8005916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800591a:	e79a      	b.n	8005852 <_printf_float+0xa2>
 800591c:	2947      	cmp	r1, #71	@ 0x47
 800591e:	d1bf      	bne.n	80058a0 <_printf_float+0xf0>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1bd      	bne.n	80058a0 <_printf_float+0xf0>
 8005924:	2301      	movs	r3, #1
 8005926:	e7ba      	b.n	800589e <_printf_float+0xee>
 8005928:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800592c:	d9dc      	bls.n	80058e8 <_printf_float+0x138>
 800592e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005932:	d118      	bne.n	8005966 <_printf_float+0x1b6>
 8005934:	2900      	cmp	r1, #0
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	dd0b      	ble.n	8005952 <_printf_float+0x1a2>
 800593a:	6121      	str	r1, [r4, #16]
 800593c:	b913      	cbnz	r3, 8005944 <_printf_float+0x194>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	07d0      	lsls	r0, r2, #31
 8005942:	d502      	bpl.n	800594a <_printf_float+0x19a>
 8005944:	3301      	adds	r3, #1
 8005946:	440b      	add	r3, r1
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	f04f 0900 	mov.w	r9, #0
 800594e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005950:	e7dc      	b.n	800590c <_printf_float+0x15c>
 8005952:	b913      	cbnz	r3, 800595a <_printf_float+0x1aa>
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	07d2      	lsls	r2, r2, #31
 8005958:	d501      	bpl.n	800595e <_printf_float+0x1ae>
 800595a:	3302      	adds	r3, #2
 800595c:	e7f4      	b.n	8005948 <_printf_float+0x198>
 800595e:	2301      	movs	r3, #1
 8005960:	e7f2      	b.n	8005948 <_printf_float+0x198>
 8005962:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005968:	4299      	cmp	r1, r3
 800596a:	db05      	blt.n	8005978 <_printf_float+0x1c8>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	6121      	str	r1, [r4, #16]
 8005970:	07d8      	lsls	r0, r3, #31
 8005972:	d5ea      	bpl.n	800594a <_printf_float+0x19a>
 8005974:	1c4b      	adds	r3, r1, #1
 8005976:	e7e7      	b.n	8005948 <_printf_float+0x198>
 8005978:	2900      	cmp	r1, #0
 800597a:	bfcc      	ite	gt
 800597c:	2201      	movgt	r2, #1
 800597e:	f1c1 0202 	rsble	r2, r1, #2
 8005982:	4413      	add	r3, r2
 8005984:	e7e0      	b.n	8005948 <_printf_float+0x198>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	055a      	lsls	r2, r3, #21
 800598a:	d407      	bmi.n	800599c <_printf_float+0x1ec>
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	4642      	mov	r2, r8
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	d12b      	bne.n	80059f2 <_printf_float+0x242>
 800599a:	e764      	b.n	8005866 <_printf_float+0xb6>
 800599c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059a0:	f240 80dc 	bls.w	8005b5c <_printf_float+0x3ac>
 80059a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	f7fa fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d033      	beq.n	8005a1c <_printf_float+0x26c>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	4a35      	ldr	r2, [pc, #212]	@ (8005a90 <_printf_float+0x2e0>)
 80059bc:	47b8      	blx	r7
 80059be:	3001      	adds	r0, #1
 80059c0:	f43f af51 	beq.w	8005866 <_printf_float+0xb6>
 80059c4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80059c8:	4543      	cmp	r3, r8
 80059ca:	db02      	blt.n	80059d2 <_printf_float+0x222>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	07d8      	lsls	r0, r3, #31
 80059d0:	d50f      	bpl.n	80059f2 <_printf_float+0x242>
 80059d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f af42 	beq.w	8005866 <_printf_float+0xb6>
 80059e2:	f04f 0900 	mov.w	r9, #0
 80059e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80059ea:	f104 0a1a 	add.w	sl, r4, #26
 80059ee:	45c8      	cmp	r8, r9
 80059f0:	dc09      	bgt.n	8005a06 <_printf_float+0x256>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	079b      	lsls	r3, r3, #30
 80059f6:	f100 8102 	bmi.w	8005bfe <_printf_float+0x44e>
 80059fa:	68e0      	ldr	r0, [r4, #12]
 80059fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059fe:	4298      	cmp	r0, r3
 8005a00:	bfb8      	it	lt
 8005a02:	4618      	movlt	r0, r3
 8005a04:	e731      	b.n	800586a <_printf_float+0xba>
 8005a06:	2301      	movs	r3, #1
 8005a08:	4652      	mov	r2, sl
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f af28 	beq.w	8005866 <_printf_float+0xb6>
 8005a16:	f109 0901 	add.w	r9, r9, #1
 8005a1a:	e7e8      	b.n	80059ee <_printf_float+0x23e>
 8005a1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dc38      	bgt.n	8005a94 <_printf_float+0x2e4>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	4a19      	ldr	r2, [pc, #100]	@ (8005a90 <_printf_float+0x2e0>)
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f43f af1a 	beq.w	8005866 <_printf_float+0xb6>
 8005a32:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005a36:	ea59 0303 	orrs.w	r3, r9, r3
 8005a3a:	d102      	bne.n	8005a42 <_printf_float+0x292>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d5d7      	bpl.n	80059f2 <_printf_float+0x242>
 8005a42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f43f af0a 	beq.w	8005866 <_printf_float+0xb6>
 8005a52:	f04f 0a00 	mov.w	sl, #0
 8005a56:	f104 0b1a 	add.w	fp, r4, #26
 8005a5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	4553      	cmp	r3, sl
 8005a60:	dc01      	bgt.n	8005a66 <_printf_float+0x2b6>
 8005a62:	464b      	mov	r3, r9
 8005a64:	e793      	b.n	800598e <_printf_float+0x1de>
 8005a66:	2301      	movs	r3, #1
 8005a68:	465a      	mov	r2, fp
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f aef8 	beq.w	8005866 <_printf_float+0xb6>
 8005a76:	f10a 0a01 	add.w	sl, sl, #1
 8005a7a:	e7ee      	b.n	8005a5a <_printf_float+0x2aa>
 8005a7c:	7fefffff 	.word	0x7fefffff
 8005a80:	0800a8db 	.word	0x0800a8db
 8005a84:	0800a8d7 	.word	0x0800a8d7
 8005a88:	0800a8e3 	.word	0x0800a8e3
 8005a8c:	0800a8df 	.word	0x0800a8df
 8005a90:	0800a8e7 	.word	0x0800a8e7
 8005a94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a96:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005a9a:	4553      	cmp	r3, sl
 8005a9c:	bfa8      	it	ge
 8005a9e:	4653      	movge	r3, sl
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	dc36      	bgt.n	8005b14 <_printf_float+0x364>
 8005aa6:	f04f 0b00 	mov.w	fp, #0
 8005aaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aae:	f104 021a 	add.w	r2, r4, #26
 8005ab2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ab4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ab6:	eba3 0309 	sub.w	r3, r3, r9
 8005aba:	455b      	cmp	r3, fp
 8005abc:	dc31      	bgt.n	8005b22 <_printf_float+0x372>
 8005abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ac0:	459a      	cmp	sl, r3
 8005ac2:	dc3a      	bgt.n	8005b3a <_printf_float+0x38a>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07da      	lsls	r2, r3, #31
 8005ac8:	d437      	bmi.n	8005b3a <_printf_float+0x38a>
 8005aca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005acc:	ebaa 0903 	sub.w	r9, sl, r3
 8005ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ad2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ad6:	4599      	cmp	r9, r3
 8005ad8:	bfa8      	it	ge
 8005ada:	4699      	movge	r9, r3
 8005adc:	f1b9 0f00 	cmp.w	r9, #0
 8005ae0:	dc33      	bgt.n	8005b4a <_printf_float+0x39a>
 8005ae2:	f04f 0800 	mov.w	r8, #0
 8005ae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aea:	f104 0b1a 	add.w	fp, r4, #26
 8005aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005af0:	ebaa 0303 	sub.w	r3, sl, r3
 8005af4:	eba3 0309 	sub.w	r3, r3, r9
 8005af8:	4543      	cmp	r3, r8
 8005afa:	f77f af7a 	ble.w	80059f2 <_printf_float+0x242>
 8005afe:	2301      	movs	r3, #1
 8005b00:	465a      	mov	r2, fp
 8005b02:	4631      	mov	r1, r6
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f43f aeac 	beq.w	8005866 <_printf_float+0xb6>
 8005b0e:	f108 0801 	add.w	r8, r8, #1
 8005b12:	e7ec      	b.n	8005aee <_printf_float+0x33e>
 8005b14:	4642      	mov	r2, r8
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d1c2      	bne.n	8005aa6 <_printf_float+0x2f6>
 8005b20:	e6a1      	b.n	8005866 <_printf_float+0xb6>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f ae9a 	beq.w	8005866 <_printf_float+0xb6>
 8005b32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b34:	f10b 0b01 	add.w	fp, fp, #1
 8005b38:	e7bb      	b.n	8005ab2 <_printf_float+0x302>
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	d1c0      	bne.n	8005aca <_printf_float+0x31a>
 8005b48:	e68d      	b.n	8005866 <_printf_float+0xb6>
 8005b4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	4442      	add	r2, r8
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	d1c3      	bne.n	8005ae2 <_printf_float+0x332>
 8005b5a:	e684      	b.n	8005866 <_printf_float+0xb6>
 8005b5c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b60:	f1ba 0f01 	cmp.w	sl, #1
 8005b64:	dc01      	bgt.n	8005b6a <_printf_float+0x3ba>
 8005b66:	07db      	lsls	r3, r3, #31
 8005b68:	d536      	bpl.n	8005bd8 <_printf_float+0x428>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f ae76 	beq.w	8005866 <_printf_float+0xb6>
 8005b7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f ae6e 	beq.w	8005866 <_printf_float+0xb6>
 8005b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2300      	movs	r3, #0
 8005b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b96:	f7fa ff07 	bl	80009a8 <__aeabi_dcmpeq>
 8005b9a:	b9c0      	cbnz	r0, 8005bce <_printf_float+0x41e>
 8005b9c:	4653      	mov	r3, sl
 8005b9e:	f108 0201 	add.w	r2, r8, #1
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d10c      	bne.n	8005bc6 <_printf_float+0x416>
 8005bac:	e65b      	b.n	8005866 <_printf_float+0xb6>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	465a      	mov	r2, fp
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b8      	blx	r7
 8005bb8:	3001      	adds	r0, #1
 8005bba:	f43f ae54 	beq.w	8005866 <_printf_float+0xb6>
 8005bbe:	f108 0801 	add.w	r8, r8, #1
 8005bc2:	45d0      	cmp	r8, sl
 8005bc4:	dbf3      	blt.n	8005bae <_printf_float+0x3fe>
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bcc:	e6e0      	b.n	8005990 <_printf_float+0x1e0>
 8005bce:	f04f 0800 	mov.w	r8, #0
 8005bd2:	f104 0b1a 	add.w	fp, r4, #26
 8005bd6:	e7f4      	b.n	8005bc2 <_printf_float+0x412>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4642      	mov	r2, r8
 8005bdc:	e7e1      	b.n	8005ba2 <_printf_float+0x3f2>
 8005bde:	2301      	movs	r3, #1
 8005be0:	464a      	mov	r2, r9
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	f43f ae3c 	beq.w	8005866 <_printf_float+0xb6>
 8005bee:	f108 0801 	add.w	r8, r8, #1
 8005bf2:	68e3      	ldr	r3, [r4, #12]
 8005bf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005bf6:	1a5b      	subs	r3, r3, r1
 8005bf8:	4543      	cmp	r3, r8
 8005bfa:	dcf0      	bgt.n	8005bde <_printf_float+0x42e>
 8005bfc:	e6fd      	b.n	80059fa <_printf_float+0x24a>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	f104 0919 	add.w	r9, r4, #25
 8005c06:	e7f4      	b.n	8005bf2 <_printf_float+0x442>

08005c08 <_printf_common>:
 8005c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	4698      	mov	r8, r3
 8005c10:	688a      	ldr	r2, [r1, #8]
 8005c12:	690b      	ldr	r3, [r1, #16]
 8005c14:	4607      	mov	r7, r0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfb8      	it	lt
 8005c1a:	4613      	movlt	r3, r2
 8005c1c:	6033      	str	r3, [r6, #0]
 8005c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c22:	460c      	mov	r4, r1
 8005c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c28:	b10a      	cbz	r2, 8005c2e <_printf_common+0x26>
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	6033      	str	r3, [r6, #0]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	0699      	lsls	r1, r3, #26
 8005c32:	bf42      	ittt	mi
 8005c34:	6833      	ldrmi	r3, [r6, #0]
 8005c36:	3302      	addmi	r3, #2
 8005c38:	6033      	strmi	r3, [r6, #0]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	f015 0506 	ands.w	r5, r5, #6
 8005c40:	d106      	bne.n	8005c50 <_printf_common+0x48>
 8005c42:	f104 0a19 	add.w	sl, r4, #25
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	6832      	ldr	r2, [r6, #0]
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	dc2b      	bgt.n	8005ca8 <_printf_common+0xa0>
 8005c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	3b00      	subs	r3, #0
 8005c58:	bf18      	it	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	0692      	lsls	r2, r2, #26
 8005c5e:	d430      	bmi.n	8005cc2 <_printf_common+0xba>
 8005c60:	4641      	mov	r1, r8
 8005c62:	4638      	mov	r0, r7
 8005c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c68:	47c8      	blx	r9
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d023      	beq.n	8005cb6 <_printf_common+0xae>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	6922      	ldr	r2, [r4, #16]
 8005c72:	f003 0306 	and.w	r3, r3, #6
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	bf14      	ite	ne
 8005c7a:	2500      	movne	r5, #0
 8005c7c:	6833      	ldreq	r3, [r6, #0]
 8005c7e:	f04f 0600 	mov.w	r6, #0
 8005c82:	bf08      	it	eq
 8005c84:	68e5      	ldreq	r5, [r4, #12]
 8005c86:	f104 041a 	add.w	r4, r4, #26
 8005c8a:	bf08      	it	eq
 8005c8c:	1aed      	subeq	r5, r5, r3
 8005c8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c92:	bf08      	it	eq
 8005c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfc4      	itt	gt
 8005c9c:	1a9b      	subgt	r3, r3, r2
 8005c9e:	18ed      	addgt	r5, r5, r3
 8005ca0:	42b5      	cmp	r5, r6
 8005ca2:	d11a      	bne.n	8005cda <_printf_common+0xd2>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e008      	b.n	8005cba <_printf_common+0xb2>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4652      	mov	r2, sl
 8005cac:	4641      	mov	r1, r8
 8005cae:	4638      	mov	r0, r7
 8005cb0:	47c8      	blx	r9
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d103      	bne.n	8005cbe <_printf_common+0xb6>
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	e7c1      	b.n	8005c46 <_printf_common+0x3e>
 8005cc2:	2030      	movs	r0, #48	@ 0x30
 8005cc4:	18e1      	adds	r1, r4, r3
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cd0:	4422      	add	r2, r4
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cd8:	e7c2      	b.n	8005c60 <_printf_common+0x58>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4622      	mov	r2, r4
 8005cde:	4641      	mov	r1, r8
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	47c8      	blx	r9
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0e6      	beq.n	8005cb6 <_printf_common+0xae>
 8005ce8:	3601      	adds	r6, #1
 8005cea:	e7d9      	b.n	8005ca0 <_printf_common+0x98>

08005cec <_printf_i>:
 8005cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	7e0f      	ldrb	r7, [r1, #24]
 8005cf2:	4691      	mov	r9, r2
 8005cf4:	2f78      	cmp	r7, #120	@ 0x78
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	469a      	mov	sl, r3
 8005cfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d02:	d807      	bhi.n	8005d14 <_printf_i+0x28>
 8005d04:	2f62      	cmp	r7, #98	@ 0x62
 8005d06:	d80a      	bhi.n	8005d1e <_printf_i+0x32>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	f000 80d1 	beq.w	8005eb0 <_printf_i+0x1c4>
 8005d0e:	2f58      	cmp	r7, #88	@ 0x58
 8005d10:	f000 80b8 	beq.w	8005e84 <_printf_i+0x198>
 8005d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d1c:	e03a      	b.n	8005d94 <_printf_i+0xa8>
 8005d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d22:	2b15      	cmp	r3, #21
 8005d24:	d8f6      	bhi.n	8005d14 <_printf_i+0x28>
 8005d26:	a101      	add	r1, pc, #4	@ (adr r1, 8005d2c <_printf_i+0x40>)
 8005d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d15 	.word	0x08005d15
 8005d38:	08005d15 	.word	0x08005d15
 8005d3c:	08005d15 	.word	0x08005d15
 8005d40:	08005d15 	.word	0x08005d15
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d15 	.word	0x08005d15
 8005d4c:	08005d15 	.word	0x08005d15
 8005d50:	08005d15 	.word	0x08005d15
 8005d54:	08005d15 	.word	0x08005d15
 8005d58:	08005e97 	.word	0x08005e97
 8005d5c:	08005dc3 	.word	0x08005dc3
 8005d60:	08005e51 	.word	0x08005e51
 8005d64:	08005d15 	.word	0x08005d15
 8005d68:	08005d15 	.word	0x08005d15
 8005d6c:	08005eb9 	.word	0x08005eb9
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	08005dc3 	.word	0x08005dc3
 8005d78:	08005d15 	.word	0x08005d15
 8005d7c:	08005d15 	.word	0x08005d15
 8005d80:	08005e59 	.word	0x08005e59
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6032      	str	r2, [r6, #0]
 8005d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d94:	2301      	movs	r3, #1
 8005d96:	e09c      	b.n	8005ed2 <_printf_i+0x1e6>
 8005d98:	6833      	ldr	r3, [r6, #0]
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1d19      	adds	r1, r3, #4
 8005d9e:	6031      	str	r1, [r6, #0]
 8005da0:	0606      	lsls	r6, r0, #24
 8005da2:	d501      	bpl.n	8005da8 <_printf_i+0xbc>
 8005da4:	681d      	ldr	r5, [r3, #0]
 8005da6:	e003      	b.n	8005db0 <_printf_i+0xc4>
 8005da8:	0645      	lsls	r5, r0, #25
 8005daa:	d5fb      	bpl.n	8005da4 <_printf_i+0xb8>
 8005dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	da03      	bge.n	8005dbc <_printf_i+0xd0>
 8005db4:	232d      	movs	r3, #45	@ 0x2d
 8005db6:	426d      	negs	r5, r5
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dbc:	230a      	movs	r3, #10
 8005dbe:	4858      	ldr	r0, [pc, #352]	@ (8005f20 <_printf_i+0x234>)
 8005dc0:	e011      	b.n	8005de6 <_printf_i+0xfa>
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	0608      	lsls	r0, r1, #24
 8005dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dcc:	d402      	bmi.n	8005dd4 <_printf_i+0xe8>
 8005dce:	0649      	lsls	r1, r1, #25
 8005dd0:	bf48      	it	mi
 8005dd2:	b2ad      	uxthmi	r5, r5
 8005dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dd6:	6033      	str	r3, [r6, #0]
 8005dd8:	bf14      	ite	ne
 8005dda:	230a      	movne	r3, #10
 8005ddc:	2308      	moveq	r3, #8
 8005dde:	4850      	ldr	r0, [pc, #320]	@ (8005f20 <_printf_i+0x234>)
 8005de0:	2100      	movs	r1, #0
 8005de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005de6:	6866      	ldr	r6, [r4, #4]
 8005de8:	2e00      	cmp	r6, #0
 8005dea:	60a6      	str	r6, [r4, #8]
 8005dec:	db05      	blt.n	8005dfa <_printf_i+0x10e>
 8005dee:	6821      	ldr	r1, [r4, #0]
 8005df0:	432e      	orrs	r6, r5
 8005df2:	f021 0104 	bic.w	r1, r1, #4
 8005df6:	6021      	str	r1, [r4, #0]
 8005df8:	d04b      	beq.n	8005e92 <_printf_i+0x1a6>
 8005dfa:	4616      	mov	r6, r2
 8005dfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e00:	fb03 5711 	mls	r7, r3, r1, r5
 8005e04:	5dc7      	ldrb	r7, [r0, r7]
 8005e06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e0a:	462f      	mov	r7, r5
 8005e0c:	42bb      	cmp	r3, r7
 8005e0e:	460d      	mov	r5, r1
 8005e10:	d9f4      	bls.n	8005dfc <_printf_i+0x110>
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d10b      	bne.n	8005e2e <_printf_i+0x142>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	07df      	lsls	r7, r3, #31
 8005e1a:	d508      	bpl.n	8005e2e <_printf_i+0x142>
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	6861      	ldr	r1, [r4, #4]
 8005e20:	4299      	cmp	r1, r3
 8005e22:	bfde      	ittt	le
 8005e24:	2330      	movle	r3, #48	@ 0x30
 8005e26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e2e:	1b92      	subs	r2, r2, r6
 8005e30:	6122      	str	r2, [r4, #16]
 8005e32:	464b      	mov	r3, r9
 8005e34:	4621      	mov	r1, r4
 8005e36:	4640      	mov	r0, r8
 8005e38:	f8cd a000 	str.w	sl, [sp]
 8005e3c:	aa03      	add	r2, sp, #12
 8005e3e:	f7ff fee3 	bl	8005c08 <_printf_common>
 8005e42:	3001      	adds	r0, #1
 8005e44:	d14a      	bne.n	8005edc <_printf_i+0x1f0>
 8005e46:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4a:	b004      	add	sp, #16
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	f043 0320 	orr.w	r3, r3, #32
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	2778      	movs	r7, #120	@ 0x78
 8005e5a:	4832      	ldr	r0, [pc, #200]	@ (8005f24 <_printf_i+0x238>)
 8005e5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	6831      	ldr	r1, [r6, #0]
 8005e64:	061f      	lsls	r7, r3, #24
 8005e66:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e6a:	d402      	bmi.n	8005e72 <_printf_i+0x186>
 8005e6c:	065f      	lsls	r7, r3, #25
 8005e6e:	bf48      	it	mi
 8005e70:	b2ad      	uxthmi	r5, r5
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	07d9      	lsls	r1, r3, #31
 8005e76:	bf44      	itt	mi
 8005e78:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7c:	6023      	strmi	r3, [r4, #0]
 8005e7e:	b11d      	cbz	r5, 8005e88 <_printf_i+0x19c>
 8005e80:	2310      	movs	r3, #16
 8005e82:	e7ad      	b.n	8005de0 <_printf_i+0xf4>
 8005e84:	4826      	ldr	r0, [pc, #152]	@ (8005f20 <_printf_i+0x234>)
 8005e86:	e7e9      	b.n	8005e5c <_printf_i+0x170>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	f023 0320 	bic.w	r3, r3, #32
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	e7f6      	b.n	8005e80 <_printf_i+0x194>
 8005e92:	4616      	mov	r6, r2
 8005e94:	e7bd      	b.n	8005e12 <_printf_i+0x126>
 8005e96:	6833      	ldr	r3, [r6, #0]
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1d18      	adds	r0, r3, #4
 8005e9c:	6961      	ldr	r1, [r4, #20]
 8005e9e:	6030      	str	r0, [r6, #0]
 8005ea0:	062e      	lsls	r6, r5, #24
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	d501      	bpl.n	8005eaa <_printf_i+0x1be>
 8005ea6:	6019      	str	r1, [r3, #0]
 8005ea8:	e002      	b.n	8005eb0 <_printf_i+0x1c4>
 8005eaa:	0668      	lsls	r0, r5, #25
 8005eac:	d5fb      	bpl.n	8005ea6 <_printf_i+0x1ba>
 8005eae:	8019      	strh	r1, [r3, #0]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4616      	mov	r6, r2
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	e7bc      	b.n	8005e32 <_printf_i+0x146>
 8005eb8:	6833      	ldr	r3, [r6, #0]
 8005eba:	2100      	movs	r1, #0
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	6032      	str	r2, [r6, #0]
 8005ec0:	681e      	ldr	r6, [r3, #0]
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 fc00 	bl	80066ca <memchr>
 8005eca:	b108      	cbz	r0, 8005ed0 <_printf_i+0x1e4>
 8005ecc:	1b80      	subs	r0, r0, r6
 8005ece:	6060      	str	r0, [r4, #4]
 8005ed0:	6863      	ldr	r3, [r4, #4]
 8005ed2:	6123      	str	r3, [r4, #16]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eda:	e7aa      	b.n	8005e32 <_printf_i+0x146>
 8005edc:	4632      	mov	r2, r6
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	47d0      	blx	sl
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0ad      	beq.n	8005e46 <_printf_i+0x15a>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	079b      	lsls	r3, r3, #30
 8005eee:	d413      	bmi.n	8005f18 <_printf_i+0x22c>
 8005ef0:	68e0      	ldr	r0, [r4, #12]
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	bfb8      	it	lt
 8005ef8:	4618      	movlt	r0, r3
 8005efa:	e7a6      	b.n	8005e4a <_printf_i+0x15e>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4632      	mov	r2, r6
 8005f00:	4649      	mov	r1, r9
 8005f02:	4640      	mov	r0, r8
 8005f04:	47d0      	blx	sl
 8005f06:	3001      	adds	r0, #1
 8005f08:	d09d      	beq.n	8005e46 <_printf_i+0x15a>
 8005f0a:	3501      	adds	r5, #1
 8005f0c:	68e3      	ldr	r3, [r4, #12]
 8005f0e:	9903      	ldr	r1, [sp, #12]
 8005f10:	1a5b      	subs	r3, r3, r1
 8005f12:	42ab      	cmp	r3, r5
 8005f14:	dcf2      	bgt.n	8005efc <_printf_i+0x210>
 8005f16:	e7eb      	b.n	8005ef0 <_printf_i+0x204>
 8005f18:	2500      	movs	r5, #0
 8005f1a:	f104 0619 	add.w	r6, r4, #25
 8005f1e:	e7f5      	b.n	8005f0c <_printf_i+0x220>
 8005f20:	0800a8e9 	.word	0x0800a8e9
 8005f24:	0800a8fa 	.word	0x0800a8fa

08005f28 <_scanf_float>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	688b      	ldr	r3, [r1, #8]
 8005f32:	4691      	mov	r9, r2
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f3a:	bf82      	ittt	hi
 8005f3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f40:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005f48:	460a      	mov	r2, r1
 8005f4a:	f04f 0500 	mov.w	r5, #0
 8005f4e:	bf88      	it	hi
 8005f50:	608b      	strhi	r3, [r1, #8]
 8005f52:	680b      	ldr	r3, [r1, #0]
 8005f54:	4680      	mov	r8, r0
 8005f56:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005f5a:	f842 3b1c 	str.w	r3, [r2], #28
 8005f5e:	460c      	mov	r4, r1
 8005f60:	bf98      	it	ls
 8005f62:	f04f 0b00 	movls.w	fp, #0
 8005f66:	4616      	mov	r6, r2
 8005f68:	46aa      	mov	sl, r5
 8005f6a:	462f      	mov	r7, r5
 8005f6c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f70:	9201      	str	r2, [sp, #4]
 8005f72:	9502      	str	r5, [sp, #8]
 8005f74:	68a2      	ldr	r2, [r4, #8]
 8005f76:	b15a      	cbz	r2, 8005f90 <_scanf_float+0x68>
 8005f78:	f8d9 3000 	ldr.w	r3, [r9]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f80:	d862      	bhi.n	8006048 <_scanf_float+0x120>
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d83a      	bhi.n	8005ffc <_scanf_float+0xd4>
 8005f86:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005f8a:	b2c8      	uxtb	r0, r1
 8005f8c:	280e      	cmp	r0, #14
 8005f8e:	d938      	bls.n	8006002 <_scanf_float+0xda>
 8005f90:	b11f      	cbz	r7, 8005f9a <_scanf_float+0x72>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f9e:	f1ba 0f01 	cmp.w	sl, #1
 8005fa2:	f200 8114 	bhi.w	80061ce <_scanf_float+0x2a6>
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	429e      	cmp	r6, r3
 8005faa:	f200 8105 	bhi.w	80061b8 <_scanf_float+0x290>
 8005fae:	2001      	movs	r0, #1
 8005fb0:	b007      	add	sp, #28
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005fba:	2a0d      	cmp	r2, #13
 8005fbc:	d8e8      	bhi.n	8005f90 <_scanf_float+0x68>
 8005fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc4 <_scanf_float+0x9c>)
 8005fc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fc4:	0800610d 	.word	0x0800610d
 8005fc8:	08005f91 	.word	0x08005f91
 8005fcc:	08005f91 	.word	0x08005f91
 8005fd0:	08005f91 	.word	0x08005f91
 8005fd4:	08006169 	.word	0x08006169
 8005fd8:	08006143 	.word	0x08006143
 8005fdc:	08005f91 	.word	0x08005f91
 8005fe0:	08005f91 	.word	0x08005f91
 8005fe4:	0800611b 	.word	0x0800611b
 8005fe8:	08005f91 	.word	0x08005f91
 8005fec:	08005f91 	.word	0x08005f91
 8005ff0:	08005f91 	.word	0x08005f91
 8005ff4:	08005f91 	.word	0x08005f91
 8005ff8:	080060d7 	.word	0x080060d7
 8005ffc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006000:	e7db      	b.n	8005fba <_scanf_float+0x92>
 8006002:	290e      	cmp	r1, #14
 8006004:	d8c4      	bhi.n	8005f90 <_scanf_float+0x68>
 8006006:	a001      	add	r0, pc, #4	@ (adr r0, 800600c <_scanf_float+0xe4>)
 8006008:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800600c:	080060c7 	.word	0x080060c7
 8006010:	08005f91 	.word	0x08005f91
 8006014:	080060c7 	.word	0x080060c7
 8006018:	08006157 	.word	0x08006157
 800601c:	08005f91 	.word	0x08005f91
 8006020:	08006069 	.word	0x08006069
 8006024:	080060ad 	.word	0x080060ad
 8006028:	080060ad 	.word	0x080060ad
 800602c:	080060ad 	.word	0x080060ad
 8006030:	080060ad 	.word	0x080060ad
 8006034:	080060ad 	.word	0x080060ad
 8006038:	080060ad 	.word	0x080060ad
 800603c:	080060ad 	.word	0x080060ad
 8006040:	080060ad 	.word	0x080060ad
 8006044:	080060ad 	.word	0x080060ad
 8006048:	2b6e      	cmp	r3, #110	@ 0x6e
 800604a:	d809      	bhi.n	8006060 <_scanf_float+0x138>
 800604c:	2b60      	cmp	r3, #96	@ 0x60
 800604e:	d8b2      	bhi.n	8005fb6 <_scanf_float+0x8e>
 8006050:	2b54      	cmp	r3, #84	@ 0x54
 8006052:	d07b      	beq.n	800614c <_scanf_float+0x224>
 8006054:	2b59      	cmp	r3, #89	@ 0x59
 8006056:	d19b      	bne.n	8005f90 <_scanf_float+0x68>
 8006058:	2d07      	cmp	r5, #7
 800605a:	d199      	bne.n	8005f90 <_scanf_float+0x68>
 800605c:	2508      	movs	r5, #8
 800605e:	e02f      	b.n	80060c0 <_scanf_float+0x198>
 8006060:	2b74      	cmp	r3, #116	@ 0x74
 8006062:	d073      	beq.n	800614c <_scanf_float+0x224>
 8006064:	2b79      	cmp	r3, #121	@ 0x79
 8006066:	e7f6      	b.n	8006056 <_scanf_float+0x12e>
 8006068:	6821      	ldr	r1, [r4, #0]
 800606a:	05c8      	lsls	r0, r1, #23
 800606c:	d51e      	bpl.n	80060ac <_scanf_float+0x184>
 800606e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006072:	6021      	str	r1, [r4, #0]
 8006074:	3701      	adds	r7, #1
 8006076:	f1bb 0f00 	cmp.w	fp, #0
 800607a:	d003      	beq.n	8006084 <_scanf_float+0x15c>
 800607c:	3201      	adds	r2, #1
 800607e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006082:	60a2      	str	r2, [r4, #8]
 8006084:	68a3      	ldr	r3, [r4, #8]
 8006086:	3b01      	subs	r3, #1
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	3301      	adds	r3, #1
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006094:	3b01      	subs	r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	f8c9 3004 	str.w	r3, [r9, #4]
 800609c:	f340 8083 	ble.w	80061a6 <_scanf_float+0x27e>
 80060a0:	f8d9 3000 	ldr.w	r3, [r9]
 80060a4:	3301      	adds	r3, #1
 80060a6:	f8c9 3000 	str.w	r3, [r9]
 80060aa:	e763      	b.n	8005f74 <_scanf_float+0x4c>
 80060ac:	eb1a 0105 	adds.w	r1, sl, r5
 80060b0:	f47f af6e 	bne.w	8005f90 <_scanf_float+0x68>
 80060b4:	460d      	mov	r5, r1
 80060b6:	468a      	mov	sl, r1
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	f806 3b01 	strb.w	r3, [r6], #1
 80060c4:	e7de      	b.n	8006084 <_scanf_float+0x15c>
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	0610      	lsls	r0, r2, #24
 80060ca:	f57f af61 	bpl.w	8005f90 <_scanf_float+0x68>
 80060ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	e7f4      	b.n	80060c0 <_scanf_float+0x198>
 80060d6:	f1ba 0f00 	cmp.w	sl, #0
 80060da:	d10c      	bne.n	80060f6 <_scanf_float+0x1ce>
 80060dc:	b977      	cbnz	r7, 80060fc <_scanf_float+0x1d4>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80060e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80060e8:	d108      	bne.n	80060fc <_scanf_float+0x1d4>
 80060ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060ee:	f04f 0a01 	mov.w	sl, #1
 80060f2:	6022      	str	r2, [r4, #0]
 80060f4:	e7e4      	b.n	80060c0 <_scanf_float+0x198>
 80060f6:	f1ba 0f02 	cmp.w	sl, #2
 80060fa:	d051      	beq.n	80061a0 <_scanf_float+0x278>
 80060fc:	2d01      	cmp	r5, #1
 80060fe:	d002      	beq.n	8006106 <_scanf_float+0x1de>
 8006100:	2d04      	cmp	r5, #4
 8006102:	f47f af45 	bne.w	8005f90 <_scanf_float+0x68>
 8006106:	3501      	adds	r5, #1
 8006108:	b2ed      	uxtb	r5, r5
 800610a:	e7d9      	b.n	80060c0 <_scanf_float+0x198>
 800610c:	f1ba 0f01 	cmp.w	sl, #1
 8006110:	f47f af3e 	bne.w	8005f90 <_scanf_float+0x68>
 8006114:	f04f 0a02 	mov.w	sl, #2
 8006118:	e7d2      	b.n	80060c0 <_scanf_float+0x198>
 800611a:	b975      	cbnz	r5, 800613a <_scanf_float+0x212>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f47f af38 	bne.w	8005f92 <_scanf_float+0x6a>
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006128:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800612c:	f040 80ff 	bne.w	800632e <_scanf_float+0x406>
 8006130:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006134:	2501      	movs	r5, #1
 8006136:	6022      	str	r2, [r4, #0]
 8006138:	e7c2      	b.n	80060c0 <_scanf_float+0x198>
 800613a:	2d03      	cmp	r5, #3
 800613c:	d0e3      	beq.n	8006106 <_scanf_float+0x1de>
 800613e:	2d05      	cmp	r5, #5
 8006140:	e7df      	b.n	8006102 <_scanf_float+0x1da>
 8006142:	2d02      	cmp	r5, #2
 8006144:	f47f af24 	bne.w	8005f90 <_scanf_float+0x68>
 8006148:	2503      	movs	r5, #3
 800614a:	e7b9      	b.n	80060c0 <_scanf_float+0x198>
 800614c:	2d06      	cmp	r5, #6
 800614e:	f47f af1f 	bne.w	8005f90 <_scanf_float+0x68>
 8006152:	2507      	movs	r5, #7
 8006154:	e7b4      	b.n	80060c0 <_scanf_float+0x198>
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	0591      	lsls	r1, r2, #22
 800615a:	f57f af19 	bpl.w	8005f90 <_scanf_float+0x68>
 800615e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	9702      	str	r7, [sp, #8]
 8006166:	e7ab      	b.n	80060c0 <_scanf_float+0x198>
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800616e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006172:	d005      	beq.n	8006180 <_scanf_float+0x258>
 8006174:	0550      	lsls	r0, r2, #21
 8006176:	f57f af0b 	bpl.w	8005f90 <_scanf_float+0x68>
 800617a:	2f00      	cmp	r7, #0
 800617c:	f000 80d7 	beq.w	800632e <_scanf_float+0x406>
 8006180:	0591      	lsls	r1, r2, #22
 8006182:	bf58      	it	pl
 8006184:	9902      	ldrpl	r1, [sp, #8]
 8006186:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800618a:	bf58      	it	pl
 800618c:	1a79      	subpl	r1, r7, r1
 800618e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006192:	f04f 0700 	mov.w	r7, #0
 8006196:	bf58      	it	pl
 8006198:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	e78f      	b.n	80060c0 <_scanf_float+0x198>
 80061a0:	f04f 0a03 	mov.w	sl, #3
 80061a4:	e78c      	b.n	80060c0 <_scanf_float+0x198>
 80061a6:	4649      	mov	r1, r9
 80061a8:	4640      	mov	r0, r8
 80061aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80061ae:	4798      	blx	r3
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f43f aedf 	beq.w	8005f74 <_scanf_float+0x4c>
 80061b6:	e6eb      	b.n	8005f90 <_scanf_float+0x68>
 80061b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061bc:	464a      	mov	r2, r9
 80061be:	4640      	mov	r0, r8
 80061c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061c4:	4798      	blx	r3
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	6123      	str	r3, [r4, #16]
 80061cc:	e6eb      	b.n	8005fa6 <_scanf_float+0x7e>
 80061ce:	1e6b      	subs	r3, r5, #1
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d824      	bhi.n	800621e <_scanf_float+0x2f6>
 80061d4:	2d02      	cmp	r5, #2
 80061d6:	d836      	bhi.n	8006246 <_scanf_float+0x31e>
 80061d8:	9b01      	ldr	r3, [sp, #4]
 80061da:	429e      	cmp	r6, r3
 80061dc:	f67f aee7 	bls.w	8005fae <_scanf_float+0x86>
 80061e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061e4:	464a      	mov	r2, r9
 80061e6:	4640      	mov	r0, r8
 80061e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061ec:	4798      	blx	r3
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	e7f0      	b.n	80061d8 <_scanf_float+0x2b0>
 80061f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061fa:	464a      	mov	r2, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006202:	4798      	blx	r3
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	3b01      	subs	r3, #1
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800620e:	fa5f fa8a 	uxtb.w	sl, sl
 8006212:	f1ba 0f02 	cmp.w	sl, #2
 8006216:	d1ee      	bne.n	80061f6 <_scanf_float+0x2ce>
 8006218:	3d03      	subs	r5, #3
 800621a:	b2ed      	uxtb	r5, r5
 800621c:	1b76      	subs	r6, r6, r5
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	05da      	lsls	r2, r3, #23
 8006222:	d530      	bpl.n	8006286 <_scanf_float+0x35e>
 8006224:	055b      	lsls	r3, r3, #21
 8006226:	d511      	bpl.n	800624c <_scanf_float+0x324>
 8006228:	9b01      	ldr	r3, [sp, #4]
 800622a:	429e      	cmp	r6, r3
 800622c:	f67f aebf 	bls.w	8005fae <_scanf_float+0x86>
 8006230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006234:	464a      	mov	r2, r9
 8006236:	4640      	mov	r0, r8
 8006238:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800623c:	4798      	blx	r3
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	3b01      	subs	r3, #1
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	e7f0      	b.n	8006228 <_scanf_float+0x300>
 8006246:	46aa      	mov	sl, r5
 8006248:	46b3      	mov	fp, r6
 800624a:	e7de      	b.n	800620a <_scanf_float+0x2e2>
 800624c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	2965      	cmp	r1, #101	@ 0x65
 8006254:	f103 33ff 	add.w	r3, r3, #4294967295
 8006258:	f106 35ff 	add.w	r5, r6, #4294967295
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	d00c      	beq.n	800627a <_scanf_float+0x352>
 8006260:	2945      	cmp	r1, #69	@ 0x45
 8006262:	d00a      	beq.n	800627a <_scanf_float+0x352>
 8006264:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006268:	464a      	mov	r2, r9
 800626a:	4640      	mov	r0, r8
 800626c:	4798      	blx	r3
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006274:	3b01      	subs	r3, #1
 8006276:	1eb5      	subs	r5, r6, #2
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	464a      	mov	r2, r9
 800627c:	4640      	mov	r0, r8
 800627e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006282:	4798      	blx	r3
 8006284:	462e      	mov	r6, r5
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	f012 0210 	ands.w	r2, r2, #16
 800628c:	d001      	beq.n	8006292 <_scanf_float+0x36a>
 800628e:	2000      	movs	r0, #0
 8006290:	e68e      	b.n	8005fb0 <_scanf_float+0x88>
 8006292:	7032      	strb	r2, [r6, #0]
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800629a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629e:	d125      	bne.n	80062ec <_scanf_float+0x3c4>
 80062a0:	9b02      	ldr	r3, [sp, #8]
 80062a2:	429f      	cmp	r7, r3
 80062a4:	d00a      	beq.n	80062bc <_scanf_float+0x394>
 80062a6:	1bda      	subs	r2, r3, r7
 80062a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80062ac:	429e      	cmp	r6, r3
 80062ae:	bf28      	it	cs
 80062b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80062b4:	4630      	mov	r0, r6
 80062b6:	491f      	ldr	r1, [pc, #124]	@ (8006334 <_scanf_float+0x40c>)
 80062b8:	f000 f902 	bl	80064c0 <siprintf>
 80062bc:	2200      	movs	r2, #0
 80062be:	4640      	mov	r0, r8
 80062c0:	9901      	ldr	r1, [sp, #4]
 80062c2:	f002 fc09 	bl	8008ad8 <_strtod_r>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	6825      	ldr	r5, [r4, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f015 0f02 	tst.w	r5, #2
 80062d0:	4606      	mov	r6, r0
 80062d2:	460f      	mov	r7, r1
 80062d4:	f103 0204 	add.w	r2, r3, #4
 80062d8:	d015      	beq.n	8006306 <_scanf_float+0x3de>
 80062da:	9903      	ldr	r1, [sp, #12]
 80062dc:	600a      	str	r2, [r1, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	e9c3 6700 	strd	r6, r7, [r3]
 80062e4:	68e3      	ldr	r3, [r4, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60e3      	str	r3, [r4, #12]
 80062ea:	e7d0      	b.n	800628e <_scanf_float+0x366>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0e4      	beq.n	80062bc <_scanf_float+0x394>
 80062f2:	9905      	ldr	r1, [sp, #20]
 80062f4:	230a      	movs	r3, #10
 80062f6:	4640      	mov	r0, r8
 80062f8:	3101      	adds	r1, #1
 80062fa:	f7ff f9af 	bl	800565c <_strtol_r>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	9e05      	ldr	r6, [sp, #20]
 8006302:	1ac2      	subs	r2, r0, r3
 8006304:	e7d0      	b.n	80062a8 <_scanf_float+0x380>
 8006306:	076d      	lsls	r5, r5, #29
 8006308:	d4e7      	bmi.n	80062da <_scanf_float+0x3b2>
 800630a:	9d03      	ldr	r5, [sp, #12]
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	681d      	ldr	r5, [r3, #0]
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	f7fa fb7a 	bl	8000a0c <__aeabi_dcmpun>
 8006318:	b120      	cbz	r0, 8006324 <_scanf_float+0x3fc>
 800631a:	4807      	ldr	r0, [pc, #28]	@ (8006338 <_scanf_float+0x410>)
 800631c:	f000 f9e4 	bl	80066e8 <nanf>
 8006320:	6028      	str	r0, [r5, #0]
 8006322:	e7df      	b.n	80062e4 <_scanf_float+0x3bc>
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7fa fbce 	bl	8000ac8 <__aeabi_d2f>
 800632c:	e7f8      	b.n	8006320 <_scanf_float+0x3f8>
 800632e:	2700      	movs	r7, #0
 8006330:	e633      	b.n	8005f9a <_scanf_float+0x72>
 8006332:	bf00      	nop
 8006334:	0800a90b 	.word	0x0800a90b
 8006338:	0800aa4c 	.word	0x0800aa4c

0800633c <std>:
 800633c:	2300      	movs	r3, #0
 800633e:	b510      	push	{r4, lr}
 8006340:	4604      	mov	r4, r0
 8006342:	e9c0 3300 	strd	r3, r3, [r0]
 8006346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800634a:	6083      	str	r3, [r0, #8]
 800634c:	8181      	strh	r1, [r0, #12]
 800634e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006350:	81c2      	strh	r2, [r0, #14]
 8006352:	6183      	str	r3, [r0, #24]
 8006354:	4619      	mov	r1, r3
 8006356:	2208      	movs	r2, #8
 8006358:	305c      	adds	r0, #92	@ 0x5c
 800635a:	f000 f916 	bl	800658a <memset>
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <std+0x58>)
 8006360:	6224      	str	r4, [r4, #32]
 8006362:	6263      	str	r3, [r4, #36]	@ 0x24
 8006364:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <std+0x5c>)
 8006366:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006368:	4b0c      	ldr	r3, [pc, #48]	@ (800639c <std+0x60>)
 800636a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800636c:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <std+0x64>)
 800636e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006370:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <std+0x68>)
 8006372:	429c      	cmp	r4, r3
 8006374:	d006      	beq.n	8006384 <std+0x48>
 8006376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800637a:	4294      	cmp	r4, r2
 800637c:	d002      	beq.n	8006384 <std+0x48>
 800637e:	33d0      	adds	r3, #208	@ 0xd0
 8006380:	429c      	cmp	r4, r3
 8006382:	d105      	bne.n	8006390 <std+0x54>
 8006384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800638c:	f000 b99a 	b.w	80066c4 <__retarget_lock_init_recursive>
 8006390:	bd10      	pop	{r4, pc}
 8006392:	bf00      	nop
 8006394:	08006505 	.word	0x08006505
 8006398:	08006527 	.word	0x08006527
 800639c:	0800655f 	.word	0x0800655f
 80063a0:	08006583 	.word	0x08006583
 80063a4:	2000076c 	.word	0x2000076c

080063a8 <stdio_exit_handler>:
 80063a8:	4a02      	ldr	r2, [pc, #8]	@ (80063b4 <stdio_exit_handler+0xc>)
 80063aa:	4903      	ldr	r1, [pc, #12]	@ (80063b8 <stdio_exit_handler+0x10>)
 80063ac:	4803      	ldr	r0, [pc, #12]	@ (80063bc <stdio_exit_handler+0x14>)
 80063ae:	f000 b869 	b.w	8006484 <_fwalk_sglue>
 80063b2:	bf00      	nop
 80063b4:	20000018 	.word	0x20000018
 80063b8:	08008e95 	.word	0x08008e95
 80063bc:	20000028 	.word	0x20000028

080063c0 <cleanup_stdio>:
 80063c0:	6841      	ldr	r1, [r0, #4]
 80063c2:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <cleanup_stdio+0x34>)
 80063c4:	b510      	push	{r4, lr}
 80063c6:	4299      	cmp	r1, r3
 80063c8:	4604      	mov	r4, r0
 80063ca:	d001      	beq.n	80063d0 <cleanup_stdio+0x10>
 80063cc:	f002 fd62 	bl	8008e94 <_fflush_r>
 80063d0:	68a1      	ldr	r1, [r4, #8]
 80063d2:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <cleanup_stdio+0x38>)
 80063d4:	4299      	cmp	r1, r3
 80063d6:	d002      	beq.n	80063de <cleanup_stdio+0x1e>
 80063d8:	4620      	mov	r0, r4
 80063da:	f002 fd5b 	bl	8008e94 <_fflush_r>
 80063de:	68e1      	ldr	r1, [r4, #12]
 80063e0:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <cleanup_stdio+0x3c>)
 80063e2:	4299      	cmp	r1, r3
 80063e4:	d004      	beq.n	80063f0 <cleanup_stdio+0x30>
 80063e6:	4620      	mov	r0, r4
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ec:	f002 bd52 	b.w	8008e94 <_fflush_r>
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	bf00      	nop
 80063f4:	2000076c 	.word	0x2000076c
 80063f8:	200007d4 	.word	0x200007d4
 80063fc:	2000083c 	.word	0x2000083c

08006400 <global_stdio_init.part.0>:
 8006400:	b510      	push	{r4, lr}
 8006402:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <global_stdio_init.part.0+0x30>)
 8006404:	4c0b      	ldr	r4, [pc, #44]	@ (8006434 <global_stdio_init.part.0+0x34>)
 8006406:	4a0c      	ldr	r2, [pc, #48]	@ (8006438 <global_stdio_init.part.0+0x38>)
 8006408:	4620      	mov	r0, r4
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	2104      	movs	r1, #4
 800640e:	2200      	movs	r2, #0
 8006410:	f7ff ff94 	bl	800633c <std>
 8006414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006418:	2201      	movs	r2, #1
 800641a:	2109      	movs	r1, #9
 800641c:	f7ff ff8e 	bl	800633c <std>
 8006420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006424:	2202      	movs	r2, #2
 8006426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642a:	2112      	movs	r1, #18
 800642c:	f7ff bf86 	b.w	800633c <std>
 8006430:	200008a4 	.word	0x200008a4
 8006434:	2000076c 	.word	0x2000076c
 8006438:	080063a9 	.word	0x080063a9

0800643c <__sfp_lock_acquire>:
 800643c:	4801      	ldr	r0, [pc, #4]	@ (8006444 <__sfp_lock_acquire+0x8>)
 800643e:	f000 b942 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	200008ad 	.word	0x200008ad

08006448 <__sfp_lock_release>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__sfp_lock_release+0x8>)
 800644a:	f000 b93d 	b.w	80066c8 <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	200008ad 	.word	0x200008ad

08006454 <__sinit>:
 8006454:	b510      	push	{r4, lr}
 8006456:	4604      	mov	r4, r0
 8006458:	f7ff fff0 	bl	800643c <__sfp_lock_acquire>
 800645c:	6a23      	ldr	r3, [r4, #32]
 800645e:	b11b      	cbz	r3, 8006468 <__sinit+0x14>
 8006460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006464:	f7ff bff0 	b.w	8006448 <__sfp_lock_release>
 8006468:	4b04      	ldr	r3, [pc, #16]	@ (800647c <__sinit+0x28>)
 800646a:	6223      	str	r3, [r4, #32]
 800646c:	4b04      	ldr	r3, [pc, #16]	@ (8006480 <__sinit+0x2c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1f5      	bne.n	8006460 <__sinit+0xc>
 8006474:	f7ff ffc4 	bl	8006400 <global_stdio_init.part.0>
 8006478:	e7f2      	b.n	8006460 <__sinit+0xc>
 800647a:	bf00      	nop
 800647c:	080063c1 	.word	0x080063c1
 8006480:	200008a4 	.word	0x200008a4

08006484 <_fwalk_sglue>:
 8006484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006488:	4607      	mov	r7, r0
 800648a:	4688      	mov	r8, r1
 800648c:	4614      	mov	r4, r2
 800648e:	2600      	movs	r6, #0
 8006490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006494:	f1b9 0901 	subs.w	r9, r9, #1
 8006498:	d505      	bpl.n	80064a6 <_fwalk_sglue+0x22>
 800649a:	6824      	ldr	r4, [r4, #0]
 800649c:	2c00      	cmp	r4, #0
 800649e:	d1f7      	bne.n	8006490 <_fwalk_sglue+0xc>
 80064a0:	4630      	mov	r0, r6
 80064a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a6:	89ab      	ldrh	r3, [r5, #12]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d907      	bls.n	80064bc <_fwalk_sglue+0x38>
 80064ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b0:	3301      	adds	r3, #1
 80064b2:	d003      	beq.n	80064bc <_fwalk_sglue+0x38>
 80064b4:	4629      	mov	r1, r5
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	4306      	orrs	r6, r0
 80064bc:	3568      	adds	r5, #104	@ 0x68
 80064be:	e7e9      	b.n	8006494 <_fwalk_sglue+0x10>

080064c0 <siprintf>:
 80064c0:	b40e      	push	{r1, r2, r3}
 80064c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064c6:	b510      	push	{r4, lr}
 80064c8:	2400      	movs	r4, #0
 80064ca:	b09d      	sub	sp, #116	@ 0x74
 80064cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80064ce:	9002      	str	r0, [sp, #8]
 80064d0:	9006      	str	r0, [sp, #24]
 80064d2:	9107      	str	r1, [sp, #28]
 80064d4:	9104      	str	r1, [sp, #16]
 80064d6:	4809      	ldr	r0, [pc, #36]	@ (80064fc <siprintf+0x3c>)
 80064d8:	4909      	ldr	r1, [pc, #36]	@ (8006500 <siprintf+0x40>)
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	9105      	str	r1, [sp, #20]
 80064e0:	6800      	ldr	r0, [r0, #0]
 80064e2:	a902      	add	r1, sp, #8
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80064e8:	f002 fb58 	bl	8008b9c <_svfiprintf_r>
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	701c      	strb	r4, [r3, #0]
 80064f0:	b01d      	add	sp, #116	@ 0x74
 80064f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f6:	b003      	add	sp, #12
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000024 	.word	0x20000024
 8006500:	ffff0208 	.word	0xffff0208

08006504 <__sread>:
 8006504:	b510      	push	{r4, lr}
 8006506:	460c      	mov	r4, r1
 8006508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650c:	f000 f88c 	bl	8006628 <_read_r>
 8006510:	2800      	cmp	r0, #0
 8006512:	bfab      	itete	ge
 8006514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006516:	89a3      	ldrhlt	r3, [r4, #12]
 8006518:	181b      	addge	r3, r3, r0
 800651a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800651e:	bfac      	ite	ge
 8006520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006522:	81a3      	strhlt	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__swrite>:
 8006526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652a:	461f      	mov	r7, r3
 800652c:	898b      	ldrh	r3, [r1, #12]
 800652e:	4605      	mov	r5, r0
 8006530:	05db      	lsls	r3, r3, #23
 8006532:	460c      	mov	r4, r1
 8006534:	4616      	mov	r6, r2
 8006536:	d505      	bpl.n	8006544 <__swrite+0x1e>
 8006538:	2302      	movs	r3, #2
 800653a:	2200      	movs	r2, #0
 800653c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006540:	f000 f860 	bl	8006604 <_lseek_r>
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	4632      	mov	r2, r6
 8006548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	4628      	mov	r0, r5
 8006550:	463b      	mov	r3, r7
 8006552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800655a:	f000 b877 	b.w	800664c <_write_r>

0800655e <__sseek>:
 800655e:	b510      	push	{r4, lr}
 8006560:	460c      	mov	r4, r1
 8006562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006566:	f000 f84d 	bl	8006604 <_lseek_r>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	bf15      	itete	ne
 8006570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800657a:	81a3      	strheq	r3, [r4, #12]
 800657c:	bf18      	it	ne
 800657e:	81a3      	strhne	r3, [r4, #12]
 8006580:	bd10      	pop	{r4, pc}

08006582 <__sclose>:
 8006582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006586:	f000 b82d 	b.w	80065e4 <_close_r>

0800658a <memset>:
 800658a:	4603      	mov	r3, r0
 800658c:	4402      	add	r2, r0
 800658e:	4293      	cmp	r3, r2
 8006590:	d100      	bne.n	8006594 <memset+0xa>
 8006592:	4770      	bx	lr
 8006594:	f803 1b01 	strb.w	r1, [r3], #1
 8006598:	e7f9      	b.n	800658e <memset+0x4>

0800659a <strcat>:
 800659a:	4602      	mov	r2, r0
 800659c:	b510      	push	{r4, lr}
 800659e:	7814      	ldrb	r4, [r2, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	3201      	adds	r2, #1
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d1fa      	bne.n	800659e <strcat+0x4>
 80065a8:	3b01      	subs	r3, #1
 80065aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	d1f9      	bne.n	80065aa <strcat+0x10>
 80065b6:	bd10      	pop	{r4, pc}

080065b8 <strncmp>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	b16a      	cbz	r2, 80065d8 <strncmp+0x20>
 80065bc:	3901      	subs	r1, #1
 80065be:	1884      	adds	r4, r0, r2
 80065c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d103      	bne.n	80065d4 <strncmp+0x1c>
 80065cc:	42a0      	cmp	r0, r4
 80065ce:	d001      	beq.n	80065d4 <strncmp+0x1c>
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d1f5      	bne.n	80065c0 <strncmp+0x8>
 80065d4:	1ad0      	subs	r0, r2, r3
 80065d6:	bd10      	pop	{r4, pc}
 80065d8:	4610      	mov	r0, r2
 80065da:	e7fc      	b.n	80065d6 <strncmp+0x1e>

080065dc <_localeconv_r>:
 80065dc:	4800      	ldr	r0, [pc, #0]	@ (80065e0 <_localeconv_r+0x4>)
 80065de:	4770      	bx	lr
 80065e0:	20000164 	.word	0x20000164

080065e4 <_close_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	2300      	movs	r3, #0
 80065e8:	4d05      	ldr	r5, [pc, #20]	@ (8006600 <_close_r+0x1c>)
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f7fc fb2f 	bl	8002c52 <_close>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_close_r+0x1a>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_close_r+0x1a>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	200008a8 	.word	0x200008a8

08006604 <_lseek_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	2200      	movs	r2, #0
 800660e:	4d05      	ldr	r5, [pc, #20]	@ (8006624 <_lseek_r+0x20>)
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fc fb41 	bl	8002c9a <_lseek>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_lseek_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_lseek_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	200008a8 	.word	0x200008a8

08006628 <_read_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	4611      	mov	r1, r2
 8006630:	2200      	movs	r2, #0
 8006632:	4d05      	ldr	r5, [pc, #20]	@ (8006648 <_read_r+0x20>)
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fc fad2 	bl	8002be0 <_read>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_read_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_read_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	200008a8 	.word	0x200008a8

0800664c <_write_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	2200      	movs	r2, #0
 8006656:	4d05      	ldr	r5, [pc, #20]	@ (800666c <_write_r+0x20>)
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fc fadd 	bl	8002c1a <_write>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_write_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_write_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	200008a8 	.word	0x200008a8

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	@ (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000024 	.word	0x20000024

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	2600      	movs	r6, #0
 8006680:	4d0c      	ldr	r5, [pc, #48]	@ (80066b4 <__libc_init_array+0x38>)
 8006682:	4c0d      	ldr	r4, [pc, #52]	@ (80066b8 <__libc_init_array+0x3c>)
 8006684:	1b64      	subs	r4, r4, r5
 8006686:	10a4      	asrs	r4, r4, #2
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	f003 fadc 	bl	8009c48 <_init>
 8006690:	2600      	movs	r6, #0
 8006692:	4d0a      	ldr	r5, [pc, #40]	@ (80066bc <__libc_init_array+0x40>)
 8006694:	4c0a      	ldr	r4, [pc, #40]	@ (80066c0 <__libc_init_array+0x44>)
 8006696:	1b64      	subs	r4, r4, r5
 8006698:	10a4      	asrs	r4, r4, #2
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	0800ac08 	.word	0x0800ac08
 80066b8:	0800ac08 	.word	0x0800ac08
 80066bc:	0800ac08 	.word	0x0800ac08
 80066c0:	0800ac0c 	.word	0x0800ac0c

080066c4 <__retarget_lock_init_recursive>:
 80066c4:	4770      	bx	lr

080066c6 <__retarget_lock_acquire_recursive>:
 80066c6:	4770      	bx	lr

080066c8 <__retarget_lock_release_recursive>:
 80066c8:	4770      	bx	lr

080066ca <memchr>:
 80066ca:	4603      	mov	r3, r0
 80066cc:	b510      	push	{r4, lr}
 80066ce:	b2c9      	uxtb	r1, r1
 80066d0:	4402      	add	r2, r0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	d101      	bne.n	80066dc <memchr+0x12>
 80066d8:	2000      	movs	r0, #0
 80066da:	e003      	b.n	80066e4 <memchr+0x1a>
 80066dc:	7804      	ldrb	r4, [r0, #0]
 80066de:	3301      	adds	r3, #1
 80066e0:	428c      	cmp	r4, r1
 80066e2:	d1f6      	bne.n	80066d2 <memchr+0x8>
 80066e4:	bd10      	pop	{r4, pc}
	...

080066e8 <nanf>:
 80066e8:	4800      	ldr	r0, [pc, #0]	@ (80066ec <nanf+0x4>)
 80066ea:	4770      	bx	lr
 80066ec:	7fc00000 	.word	0x7fc00000

080066f0 <quorem>:
 80066f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	6903      	ldr	r3, [r0, #16]
 80066f6:	690c      	ldr	r4, [r1, #16]
 80066f8:	4607      	mov	r7, r0
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	db7e      	blt.n	80067fc <quorem+0x10c>
 80066fe:	3c01      	subs	r4, #1
 8006700:	00a3      	lsls	r3, r4, #2
 8006702:	f100 0514 	add.w	r5, r0, #20
 8006706:	f101 0814 	add.w	r8, r1, #20
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800671a:	3301      	adds	r3, #1
 800671c:	429a      	cmp	r2, r3
 800671e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006722:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006726:	d32e      	bcc.n	8006786 <quorem+0x96>
 8006728:	f04f 0a00 	mov.w	sl, #0
 800672c:	46c4      	mov	ip, r8
 800672e:	46ae      	mov	lr, r5
 8006730:	46d3      	mov	fp, sl
 8006732:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006736:	b298      	uxth	r0, r3
 8006738:	fb06 a000 	mla	r0, r6, r0, sl
 800673c:	0c1b      	lsrs	r3, r3, #16
 800673e:	0c02      	lsrs	r2, r0, #16
 8006740:	fb06 2303 	mla	r3, r6, r3, r2
 8006744:	f8de 2000 	ldr.w	r2, [lr]
 8006748:	b280      	uxth	r0, r0
 800674a:	b292      	uxth	r2, r2
 800674c:	1a12      	subs	r2, r2, r0
 800674e:	445a      	add	r2, fp
 8006750:	f8de 0000 	ldr.w	r0, [lr]
 8006754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006758:	b29b      	uxth	r3, r3
 800675a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800675e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006762:	b292      	uxth	r2, r2
 8006764:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006768:	45e1      	cmp	r9, ip
 800676a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800676e:	f84e 2b04 	str.w	r2, [lr], #4
 8006772:	d2de      	bcs.n	8006732 <quorem+0x42>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	58eb      	ldr	r3, [r5, r3]
 8006778:	b92b      	cbnz	r3, 8006786 <quorem+0x96>
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	3b04      	subs	r3, #4
 800677e:	429d      	cmp	r5, r3
 8006780:	461a      	mov	r2, r3
 8006782:	d32f      	bcc.n	80067e4 <quorem+0xf4>
 8006784:	613c      	str	r4, [r7, #16]
 8006786:	4638      	mov	r0, r7
 8006788:	f001 f9c8 	bl	8007b1c <__mcmp>
 800678c:	2800      	cmp	r0, #0
 800678e:	db25      	blt.n	80067dc <quorem+0xec>
 8006790:	4629      	mov	r1, r5
 8006792:	2000      	movs	r0, #0
 8006794:	f858 2b04 	ldr.w	r2, [r8], #4
 8006798:	f8d1 c000 	ldr.w	ip, [r1]
 800679c:	fa1f fe82 	uxth.w	lr, r2
 80067a0:	fa1f f38c 	uxth.w	r3, ip
 80067a4:	eba3 030e 	sub.w	r3, r3, lr
 80067a8:	4403      	add	r3, r0
 80067aa:	0c12      	lsrs	r2, r2, #16
 80067ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ba:	45c1      	cmp	r9, r8
 80067bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067c0:	f841 3b04 	str.w	r3, [r1], #4
 80067c4:	d2e6      	bcs.n	8006794 <quorem+0xa4>
 80067c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ce:	b922      	cbnz	r2, 80067da <quorem+0xea>
 80067d0:	3b04      	subs	r3, #4
 80067d2:	429d      	cmp	r5, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	d30b      	bcc.n	80067f0 <quorem+0x100>
 80067d8:	613c      	str	r4, [r7, #16]
 80067da:	3601      	adds	r6, #1
 80067dc:	4630      	mov	r0, r6
 80067de:	b003      	add	sp, #12
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	3b04      	subs	r3, #4
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d1cb      	bne.n	8006784 <quorem+0x94>
 80067ec:	3c01      	subs	r4, #1
 80067ee:	e7c6      	b.n	800677e <quorem+0x8e>
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	3b04      	subs	r3, #4
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1ef      	bne.n	80067d8 <quorem+0xe8>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	e7ea      	b.n	80067d2 <quorem+0xe2>
 80067fc:	2000      	movs	r0, #0
 80067fe:	e7ee      	b.n	80067de <quorem+0xee>

08006800 <_dtoa_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	4614      	mov	r4, r2
 8006806:	461d      	mov	r5, r3
 8006808:	69c7      	ldr	r7, [r0, #28]
 800680a:	b097      	sub	sp, #92	@ 0x5c
 800680c:	4681      	mov	r9, r0
 800680e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006812:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006814:	b97f      	cbnz	r7, 8006836 <_dtoa_r+0x36>
 8006816:	2010      	movs	r0, #16
 8006818:	f000 fe0e 	bl	8007438 <malloc>
 800681c:	4602      	mov	r2, r0
 800681e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006822:	b920      	cbnz	r0, 800682e <_dtoa_r+0x2e>
 8006824:	21ef      	movs	r1, #239	@ 0xef
 8006826:	4bac      	ldr	r3, [pc, #688]	@ (8006ad8 <_dtoa_r+0x2d8>)
 8006828:	48ac      	ldr	r0, [pc, #688]	@ (8006adc <_dtoa_r+0x2dc>)
 800682a:	f002 fb99 	bl	8008f60 <__assert_func>
 800682e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006832:	6007      	str	r7, [r0, #0]
 8006834:	60c7      	str	r7, [r0, #12]
 8006836:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	b159      	cbz	r1, 8006856 <_dtoa_r+0x56>
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	2301      	movs	r3, #1
 8006842:	4093      	lsls	r3, r2
 8006844:	604a      	str	r2, [r1, #4]
 8006846:	608b      	str	r3, [r1, #8]
 8006848:	4648      	mov	r0, r9
 800684a:	f000 feeb 	bl	8007624 <_Bfree>
 800684e:	2200      	movs	r2, #0
 8006850:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	1e2b      	subs	r3, r5, #0
 8006858:	bfaf      	iteee	ge
 800685a:	2300      	movge	r3, #0
 800685c:	2201      	movlt	r2, #1
 800685e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006862:	9307      	strlt	r3, [sp, #28]
 8006864:	bfa8      	it	ge
 8006866:	6033      	strge	r3, [r6, #0]
 8006868:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800686c:	4b9c      	ldr	r3, [pc, #624]	@ (8006ae0 <_dtoa_r+0x2e0>)
 800686e:	bfb8      	it	lt
 8006870:	6032      	strlt	r2, [r6, #0]
 8006872:	ea33 0308 	bics.w	r3, r3, r8
 8006876:	d112      	bne.n	800689e <_dtoa_r+0x9e>
 8006878:	f242 730f 	movw	r3, #9999	@ 0x270f
 800687c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006884:	4323      	orrs	r3, r4
 8006886:	f000 855e 	beq.w	8007346 <_dtoa_r+0xb46>
 800688a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800688c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ae4 <_dtoa_r+0x2e4>
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8560 	beq.w	8007356 <_dtoa_r+0xb56>
 8006896:	f10a 0303 	add.w	r3, sl, #3
 800689a:	f000 bd5a 	b.w	8007352 <_dtoa_r+0xb52>
 800689e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80068a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068aa:	2200      	movs	r2, #0
 80068ac:	2300      	movs	r3, #0
 80068ae:	f7fa f87b 	bl	80009a8 <__aeabi_dcmpeq>
 80068b2:	4607      	mov	r7, r0
 80068b4:	b158      	cbz	r0, 80068ce <_dtoa_r+0xce>
 80068b6:	2301      	movs	r3, #1
 80068b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068be:	b113      	cbz	r3, 80068c6 <_dtoa_r+0xc6>
 80068c0:	4b89      	ldr	r3, [pc, #548]	@ (8006ae8 <_dtoa_r+0x2e8>)
 80068c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006aec <_dtoa_r+0x2ec>
 80068ca:	f000 bd44 	b.w	8007356 <_dtoa_r+0xb56>
 80068ce:	ab14      	add	r3, sp, #80	@ 0x50
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	ab15      	add	r3, sp, #84	@ 0x54
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4648      	mov	r0, r9
 80068d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80068dc:	f001 fa36 	bl	8007d4c <__d2b>
 80068e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80068e4:	9003      	str	r0, [sp, #12]
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	d078      	beq.n	80069dc <_dtoa_r+0x1dc>
 80068ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006900:	9712      	str	r7, [sp, #72]	@ 0x48
 8006902:	4619      	mov	r1, r3
 8006904:	2200      	movs	r2, #0
 8006906:	4b7a      	ldr	r3, [pc, #488]	@ (8006af0 <_dtoa_r+0x2f0>)
 8006908:	f7f9 fc2e 	bl	8000168 <__aeabi_dsub>
 800690c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006ac0 <_dtoa_r+0x2c0>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f7f9 fde1 	bl	80004d8 <__aeabi_dmul>
 8006916:	a36c      	add	r3, pc, #432	@ (adr r3, 8006ac8 <_dtoa_r+0x2c8>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fc26 	bl	800016c <__adddf3>
 8006920:	4604      	mov	r4, r0
 8006922:	4630      	mov	r0, r6
 8006924:	460d      	mov	r5, r1
 8006926:	f7f9 fd6d 	bl	8000404 <__aeabi_i2d>
 800692a:	a369      	add	r3, pc, #420	@ (adr r3, 8006ad0 <_dtoa_r+0x2d0>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fdd2 	bl	80004d8 <__aeabi_dmul>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4620      	mov	r0, r4
 800693a:	4629      	mov	r1, r5
 800693c:	f7f9 fc16 	bl	800016c <__adddf3>
 8006940:	4604      	mov	r4, r0
 8006942:	460d      	mov	r5, r1
 8006944:	f7fa f878 	bl	8000a38 <__aeabi_d2iz>
 8006948:	2200      	movs	r2, #0
 800694a:	4607      	mov	r7, r0
 800694c:	2300      	movs	r3, #0
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7fa f833 	bl	80009bc <__aeabi_dcmplt>
 8006956:	b140      	cbz	r0, 800696a <_dtoa_r+0x16a>
 8006958:	4638      	mov	r0, r7
 800695a:	f7f9 fd53 	bl	8000404 <__aeabi_i2d>
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f7fa f821 	bl	80009a8 <__aeabi_dcmpeq>
 8006966:	b900      	cbnz	r0, 800696a <_dtoa_r+0x16a>
 8006968:	3f01      	subs	r7, #1
 800696a:	2f16      	cmp	r7, #22
 800696c:	d854      	bhi.n	8006a18 <_dtoa_r+0x218>
 800696e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006972:	4b60      	ldr	r3, [pc, #384]	@ (8006af4 <_dtoa_r+0x2f4>)
 8006974:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f7fa f81e 	bl	80009bc <__aeabi_dcmplt>
 8006980:	2800      	cmp	r0, #0
 8006982:	d04b      	beq.n	8006a1c <_dtoa_r+0x21c>
 8006984:	2300      	movs	r3, #0
 8006986:	3f01      	subs	r7, #1
 8006988:	930f      	str	r3, [sp, #60]	@ 0x3c
 800698a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800698c:	1b9b      	subs	r3, r3, r6
 800698e:	1e5a      	subs	r2, r3, #1
 8006990:	bf49      	itett	mi
 8006992:	f1c3 0301 	rsbmi	r3, r3, #1
 8006996:	2300      	movpl	r3, #0
 8006998:	9304      	strmi	r3, [sp, #16]
 800699a:	2300      	movmi	r3, #0
 800699c:	9209      	str	r2, [sp, #36]	@ 0x24
 800699e:	bf54      	ite	pl
 80069a0:	9304      	strpl	r3, [sp, #16]
 80069a2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80069a4:	2f00      	cmp	r7, #0
 80069a6:	db3b      	blt.n	8006a20 <_dtoa_r+0x220>
 80069a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069aa:	970e      	str	r7, [sp, #56]	@ 0x38
 80069ac:	443b      	add	r3, r7
 80069ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b0:	2300      	movs	r3, #0
 80069b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b6:	2b09      	cmp	r3, #9
 80069b8:	d865      	bhi.n	8006a86 <_dtoa_r+0x286>
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	bfc4      	itt	gt
 80069be:	3b04      	subgt	r3, #4
 80069c0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80069c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069c4:	bfc8      	it	gt
 80069c6:	2400      	movgt	r4, #0
 80069c8:	f1a3 0302 	sub.w	r3, r3, #2
 80069cc:	bfd8      	it	le
 80069ce:	2401      	movle	r4, #1
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d864      	bhi.n	8006a9e <_dtoa_r+0x29e>
 80069d4:	e8df f003 	tbb	[pc, r3]
 80069d8:	2c385553 	.word	0x2c385553
 80069dc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069e0:	441e      	add	r6, r3
 80069e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	bfc1      	itttt	gt
 80069ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069ee:	fa08 f803 	lslgt.w	r8, r8, r3
 80069f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069fa:	bfd6      	itet	le
 80069fc:	f1c3 0320 	rsble	r3, r3, #32
 8006a00:	ea48 0003 	orrgt.w	r0, r8, r3
 8006a04:	fa04 f003 	lslle.w	r0, r4, r3
 8006a08:	f7f9 fcec 	bl	80003e4 <__aeabi_ui2d>
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a12:	3e01      	subs	r6, #1
 8006a14:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a16:	e774      	b.n	8006902 <_dtoa_r+0x102>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e7b5      	b.n	8006988 <_dtoa_r+0x188>
 8006a1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006a1e:	e7b4      	b.n	800698a <_dtoa_r+0x18a>
 8006a20:	9b04      	ldr	r3, [sp, #16]
 8006a22:	1bdb      	subs	r3, r3, r7
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	427b      	negs	r3, r7
 8006a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a2e:	e7c1      	b.n	80069b4 <_dtoa_r+0x1b4>
 8006a30:	2301      	movs	r3, #1
 8006a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a36:	eb07 0b03 	add.w	fp, r7, r3
 8006a3a:	f10b 0301 	add.w	r3, fp, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	9308      	str	r3, [sp, #32]
 8006a42:	bfb8      	it	lt
 8006a44:	2301      	movlt	r3, #1
 8006a46:	e006      	b.n	8006a56 <_dtoa_r+0x256>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dd28      	ble.n	8006aa4 <_dtoa_r+0x2a4>
 8006a52:	469b      	mov	fp, r3
 8006a54:	9308      	str	r3, [sp, #32]
 8006a56:	2100      	movs	r1, #0
 8006a58:	2204      	movs	r2, #4
 8006a5a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a5e:	f102 0514 	add.w	r5, r2, #20
 8006a62:	429d      	cmp	r5, r3
 8006a64:	d926      	bls.n	8006ab4 <_dtoa_r+0x2b4>
 8006a66:	6041      	str	r1, [r0, #4]
 8006a68:	4648      	mov	r0, r9
 8006a6a:	f000 fd9b 	bl	80075a4 <_Balloc>
 8006a6e:	4682      	mov	sl, r0
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d143      	bne.n	8006afc <_dtoa_r+0x2fc>
 8006a74:	4602      	mov	r2, r0
 8006a76:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006af8 <_dtoa_r+0x2f8>)
 8006a7c:	e6d4      	b.n	8006828 <_dtoa_r+0x28>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e7e3      	b.n	8006a4a <_dtoa_r+0x24a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	e7d5      	b.n	8006a32 <_dtoa_r+0x232>
 8006a86:	2401      	movs	r4, #1
 8006a88:	2300      	movs	r3, #0
 8006a8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a8e:	f04f 3bff 	mov.w	fp, #4294967295
 8006a92:	2200      	movs	r2, #0
 8006a94:	2312      	movs	r3, #18
 8006a96:	f8cd b020 	str.w	fp, [sp, #32]
 8006a9a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a9c:	e7db      	b.n	8006a56 <_dtoa_r+0x256>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aa2:	e7f4      	b.n	8006a8e <_dtoa_r+0x28e>
 8006aa4:	f04f 0b01 	mov.w	fp, #1
 8006aa8:	465b      	mov	r3, fp
 8006aaa:	f8cd b020 	str.w	fp, [sp, #32]
 8006aae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006ab2:	e7d0      	b.n	8006a56 <_dtoa_r+0x256>
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	0052      	lsls	r2, r2, #1
 8006ab8:	e7d1      	b.n	8006a5e <_dtoa_r+0x25e>
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w
 8006ac0:	636f4361 	.word	0x636f4361
 8006ac4:	3fd287a7 	.word	0x3fd287a7
 8006ac8:	8b60c8b3 	.word	0x8b60c8b3
 8006acc:	3fc68a28 	.word	0x3fc68a28
 8006ad0:	509f79fb 	.word	0x509f79fb
 8006ad4:	3fd34413 	.word	0x3fd34413
 8006ad8:	0800a91d 	.word	0x0800a91d
 8006adc:	0800a934 	.word	0x0800a934
 8006ae0:	7ff00000 	.word	0x7ff00000
 8006ae4:	0800a919 	.word	0x0800a919
 8006ae8:	0800a8e8 	.word	0x0800a8e8
 8006aec:	0800a8e7 	.word	0x0800a8e7
 8006af0:	3ff80000 	.word	0x3ff80000
 8006af4:	0800aae8 	.word	0x0800aae8
 8006af8:	0800a98c 	.word	0x0800a98c
 8006afc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b00:	6018      	str	r0, [r3, #0]
 8006b02:	9b08      	ldr	r3, [sp, #32]
 8006b04:	2b0e      	cmp	r3, #14
 8006b06:	f200 80a1 	bhi.w	8006c4c <_dtoa_r+0x44c>
 8006b0a:	2c00      	cmp	r4, #0
 8006b0c:	f000 809e 	beq.w	8006c4c <_dtoa_r+0x44c>
 8006b10:	2f00      	cmp	r7, #0
 8006b12:	dd33      	ble.n	8006b7c <_dtoa_r+0x37c>
 8006b14:	4b9c      	ldr	r3, [pc, #624]	@ (8006d88 <_dtoa_r+0x588>)
 8006b16:	f007 020f 	and.w	r2, r7, #15
 8006b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1e:	05f8      	lsls	r0, r7, #23
 8006b20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b24:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006b28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b2c:	d516      	bpl.n	8006b5c <_dtoa_r+0x35c>
 8006b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b32:	4b96      	ldr	r3, [pc, #600]	@ (8006d8c <_dtoa_r+0x58c>)
 8006b34:	2603      	movs	r6, #3
 8006b36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b3a:	f7f9 fdf7 	bl	800072c <__aeabi_ddiv>
 8006b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b42:	f004 040f 	and.w	r4, r4, #15
 8006b46:	4d91      	ldr	r5, [pc, #580]	@ (8006d8c <_dtoa_r+0x58c>)
 8006b48:	b954      	cbnz	r4, 8006b60 <_dtoa_r+0x360>
 8006b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b52:	f7f9 fdeb 	bl	800072c <__aeabi_ddiv>
 8006b56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b5a:	e028      	b.n	8006bae <_dtoa_r+0x3ae>
 8006b5c:	2602      	movs	r6, #2
 8006b5e:	e7f2      	b.n	8006b46 <_dtoa_r+0x346>
 8006b60:	07e1      	lsls	r1, r4, #31
 8006b62:	d508      	bpl.n	8006b76 <_dtoa_r+0x376>
 8006b64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b6c:	f7f9 fcb4 	bl	80004d8 <__aeabi_dmul>
 8006b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b74:	3601      	adds	r6, #1
 8006b76:	1064      	asrs	r4, r4, #1
 8006b78:	3508      	adds	r5, #8
 8006b7a:	e7e5      	b.n	8006b48 <_dtoa_r+0x348>
 8006b7c:	f000 80af 	beq.w	8006cde <_dtoa_r+0x4de>
 8006b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b84:	427c      	negs	r4, r7
 8006b86:	4b80      	ldr	r3, [pc, #512]	@ (8006d88 <_dtoa_r+0x588>)
 8006b88:	f004 020f 	and.w	r2, r4, #15
 8006b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7f9 fca0 	bl	80004d8 <__aeabi_dmul>
 8006b98:	2602      	movs	r6, #2
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ba0:	4d7a      	ldr	r5, [pc, #488]	@ (8006d8c <_dtoa_r+0x58c>)
 8006ba2:	1124      	asrs	r4, r4, #4
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	f040 808f 	bne.w	8006cc8 <_dtoa_r+0x4c8>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1d3      	bne.n	8006b56 <_dtoa_r+0x356>
 8006bae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006bb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8094 	beq.w	8006ce2 <_dtoa_r+0x4e2>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4b73      	ldr	r3, [pc, #460]	@ (8006d90 <_dtoa_r+0x590>)
 8006bc2:	f7f9 fefb 	bl	80009bc <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f000 808b 	beq.w	8006ce2 <_dtoa_r+0x4e2>
 8006bcc:	9b08      	ldr	r3, [sp, #32]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8087 	beq.w	8006ce2 <_dtoa_r+0x4e2>
 8006bd4:	f1bb 0f00 	cmp.w	fp, #0
 8006bd8:	dd34      	ble.n	8006c44 <_dtoa_r+0x444>
 8006bda:	4620      	mov	r0, r4
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4629      	mov	r1, r5
 8006be0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d94 <_dtoa_r+0x594>)
 8006be2:	f7f9 fc79 	bl	80004d8 <__aeabi_dmul>
 8006be6:	465c      	mov	r4, fp
 8006be8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bec:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7f9 fc06 	bl	8000404 <__aeabi_i2d>
 8006bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bfc:	f7f9 fc6c 	bl	80004d8 <__aeabi_dmul>
 8006c00:	2200      	movs	r2, #0
 8006c02:	4b65      	ldr	r3, [pc, #404]	@ (8006d98 <_dtoa_r+0x598>)
 8006c04:	f7f9 fab2 	bl	800016c <__adddf3>
 8006c08:	4605      	mov	r5, r0
 8006c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c0e:	2c00      	cmp	r4, #0
 8006c10:	d16a      	bne.n	8006ce8 <_dtoa_r+0x4e8>
 8006c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c16:	2200      	movs	r2, #0
 8006c18:	4b60      	ldr	r3, [pc, #384]	@ (8006d9c <_dtoa_r+0x59c>)
 8006c1a:	f7f9 faa5 	bl	8000168 <__aeabi_dsub>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c26:	462a      	mov	r2, r5
 8006c28:	4633      	mov	r3, r6
 8006c2a:	f7f9 fee5 	bl	80009f8 <__aeabi_dcmpgt>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f040 8298 	bne.w	8007164 <_dtoa_r+0x964>
 8006c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c38:	462a      	mov	r2, r5
 8006c3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c3e:	f7f9 febd 	bl	80009bc <__aeabi_dcmplt>
 8006c42:	bb38      	cbnz	r0, 8006c94 <_dtoa_r+0x494>
 8006c44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f2c0 8157 	blt.w	8006f02 <_dtoa_r+0x702>
 8006c54:	2f0e      	cmp	r7, #14
 8006c56:	f300 8154 	bgt.w	8006f02 <_dtoa_r+0x702>
 8006c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d88 <_dtoa_r+0x588>)
 8006c5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f280 80e5 	bge.w	8006e3a <_dtoa_r+0x63a>
 8006c70:	9b08      	ldr	r3, [sp, #32]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f300 80e1 	bgt.w	8006e3a <_dtoa_r+0x63a>
 8006c78:	d10c      	bne.n	8006c94 <_dtoa_r+0x494>
 8006c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4b46      	ldr	r3, [pc, #280]	@ (8006d9c <_dtoa_r+0x59c>)
 8006c82:	f7f9 fc29 	bl	80004d8 <__aeabi_dmul>
 8006c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c8a:	f7f9 feab 	bl	80009e4 <__aeabi_dcmpge>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f000 8266 	beq.w	8007160 <_dtoa_r+0x960>
 8006c94:	2400      	movs	r4, #0
 8006c96:	4625      	mov	r5, r4
 8006c98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c9a:	4656      	mov	r6, sl
 8006c9c:	ea6f 0803 	mvn.w	r8, r3
 8006ca0:	2700      	movs	r7, #0
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	f000 fcbd 	bl	8007624 <_Bfree>
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	f000 80bd 	beq.w	8006e2a <_dtoa_r+0x62a>
 8006cb0:	b12f      	cbz	r7, 8006cbe <_dtoa_r+0x4be>
 8006cb2:	42af      	cmp	r7, r5
 8006cb4:	d003      	beq.n	8006cbe <_dtoa_r+0x4be>
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	4648      	mov	r0, r9
 8006cba:	f000 fcb3 	bl	8007624 <_Bfree>
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4648      	mov	r0, r9
 8006cc2:	f000 fcaf 	bl	8007624 <_Bfree>
 8006cc6:	e0b0      	b.n	8006e2a <_dtoa_r+0x62a>
 8006cc8:	07e2      	lsls	r2, r4, #31
 8006cca:	d505      	bpl.n	8006cd8 <_dtoa_r+0x4d8>
 8006ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cd0:	f7f9 fc02 	bl	80004d8 <__aeabi_dmul>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	1064      	asrs	r4, r4, #1
 8006cda:	3508      	adds	r5, #8
 8006cdc:	e762      	b.n	8006ba4 <_dtoa_r+0x3a4>
 8006cde:	2602      	movs	r6, #2
 8006ce0:	e765      	b.n	8006bae <_dtoa_r+0x3ae>
 8006ce2:	46b8      	mov	r8, r7
 8006ce4:	9c08      	ldr	r4, [sp, #32]
 8006ce6:	e784      	b.n	8006bf2 <_dtoa_r+0x3f2>
 8006ce8:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <_dtoa_r+0x588>)
 8006cea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cf4:	4454      	add	r4, sl
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	d054      	beq.n	8006da4 <_dtoa_r+0x5a4>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	4928      	ldr	r1, [pc, #160]	@ (8006da0 <_dtoa_r+0x5a0>)
 8006cfe:	f7f9 fd15 	bl	800072c <__aeabi_ddiv>
 8006d02:	4633      	mov	r3, r6
 8006d04:	462a      	mov	r2, r5
 8006d06:	f7f9 fa2f 	bl	8000168 <__aeabi_dsub>
 8006d0a:	4656      	mov	r6, sl
 8006d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d14:	f7f9 fe90 	bl	8000a38 <__aeabi_d2iz>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	f7f9 fb73 	bl	8000404 <__aeabi_i2d>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d26:	f7f9 fa1f 	bl	8000168 <__aeabi_dsub>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	3530      	adds	r5, #48	@ 0x30
 8006d30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d38:	f806 5b01 	strb.w	r5, [r6], #1
 8006d3c:	f7f9 fe3e 	bl	80009bc <__aeabi_dcmplt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d172      	bne.n	8006e2a <_dtoa_r+0x62a>
 8006d44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4911      	ldr	r1, [pc, #68]	@ (8006d90 <_dtoa_r+0x590>)
 8006d4c:	f7f9 fa0c 	bl	8000168 <__aeabi_dsub>
 8006d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d54:	f7f9 fe32 	bl	80009bc <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 80b4 	bne.w	8006ec6 <_dtoa_r+0x6c6>
 8006d5e:	42a6      	cmp	r6, r4
 8006d60:	f43f af70 	beq.w	8006c44 <_dtoa_r+0x444>
 8006d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <_dtoa_r+0x594>)
 8006d6c:	f7f9 fbb4 	bl	80004d8 <__aeabi_dmul>
 8006d70:	2200      	movs	r2, #0
 8006d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d7a:	4b06      	ldr	r3, [pc, #24]	@ (8006d94 <_dtoa_r+0x594>)
 8006d7c:	f7f9 fbac 	bl	80004d8 <__aeabi_dmul>
 8006d80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d84:	e7c4      	b.n	8006d10 <_dtoa_r+0x510>
 8006d86:	bf00      	nop
 8006d88:	0800aae8 	.word	0x0800aae8
 8006d8c:	0800aac0 	.word	0x0800aac0
 8006d90:	3ff00000 	.word	0x3ff00000
 8006d94:	40240000 	.word	0x40240000
 8006d98:	401c0000 	.word	0x401c0000
 8006d9c:	40140000 	.word	0x40140000
 8006da0:	3fe00000 	.word	0x3fe00000
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7f9 fb96 	bl	80004d8 <__aeabi_dmul>
 8006dac:	4656      	mov	r6, sl
 8006dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006db2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006db4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006db8:	f7f9 fe3e 	bl	8000a38 <__aeabi_d2iz>
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	f7f9 fb21 	bl	8000404 <__aeabi_i2d>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dca:	f7f9 f9cd 	bl	8000168 <__aeabi_dsub>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	3530      	adds	r5, #48	@ 0x30
 8006dd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006dd8:	42a6      	cmp	r6, r4
 8006dda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	d124      	bne.n	8006e2e <_dtoa_r+0x62e>
 8006de4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006de8:	4bae      	ldr	r3, [pc, #696]	@ (80070a4 <_dtoa_r+0x8a4>)
 8006dea:	f7f9 f9bf 	bl	800016c <__adddf3>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006df6:	f7f9 fdff 	bl	80009f8 <__aeabi_dcmpgt>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d163      	bne.n	8006ec6 <_dtoa_r+0x6c6>
 8006dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e02:	2000      	movs	r0, #0
 8006e04:	49a7      	ldr	r1, [pc, #668]	@ (80070a4 <_dtoa_r+0x8a4>)
 8006e06:	f7f9 f9af 	bl	8000168 <__aeabi_dsub>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e12:	f7f9 fdd3 	bl	80009bc <__aeabi_dcmplt>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f43f af14 	beq.w	8006c44 <_dtoa_r+0x444>
 8006e1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e1e:	1e73      	subs	r3, r6, #1
 8006e20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e26:	2b30      	cmp	r3, #48	@ 0x30
 8006e28:	d0f8      	beq.n	8006e1c <_dtoa_r+0x61c>
 8006e2a:	4647      	mov	r7, r8
 8006e2c:	e03b      	b.n	8006ea6 <_dtoa_r+0x6a6>
 8006e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80070a8 <_dtoa_r+0x8a8>)
 8006e30:	f7f9 fb52 	bl	80004d8 <__aeabi_dmul>
 8006e34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e38:	e7bc      	b.n	8006db4 <_dtoa_r+0x5b4>
 8006e3a:	4656      	mov	r6, sl
 8006e3c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	f7f9 fc70 	bl	800072c <__aeabi_ddiv>
 8006e4c:	f7f9 fdf4 	bl	8000a38 <__aeabi_d2iz>
 8006e50:	4680      	mov	r8, r0
 8006e52:	f7f9 fad7 	bl	8000404 <__aeabi_i2d>
 8006e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e5a:	f7f9 fb3d 	bl	80004d8 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4620      	mov	r0, r4
 8006e64:	4629      	mov	r1, r5
 8006e66:	f7f9 f97f 	bl	8000168 <__aeabi_dsub>
 8006e6a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e6e:	9d08      	ldr	r5, [sp, #32]
 8006e70:	f806 4b01 	strb.w	r4, [r6], #1
 8006e74:	eba6 040a 	sub.w	r4, r6, sl
 8006e78:	42a5      	cmp	r5, r4
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	d133      	bne.n	8006ee8 <_dtoa_r+0x6e8>
 8006e80:	f7f9 f974 	bl	800016c <__adddf3>
 8006e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	f7f9 fdb4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e90:	b9c0      	cbnz	r0, 8006ec4 <_dtoa_r+0x6c4>
 8006e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7f9 fd85 	bl	80009a8 <__aeabi_dcmpeq>
 8006e9e:	b110      	cbz	r0, 8006ea6 <_dtoa_r+0x6a6>
 8006ea0:	f018 0f01 	tst.w	r8, #1
 8006ea4:	d10e      	bne.n	8006ec4 <_dtoa_r+0x6c4>
 8006ea6:	4648      	mov	r0, r9
 8006ea8:	9903      	ldr	r1, [sp, #12]
 8006eaa:	f000 fbbb 	bl	8007624 <_Bfree>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	7033      	strb	r3, [r6, #0]
 8006eb2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006eb4:	3701      	adds	r7, #1
 8006eb6:	601f      	str	r7, [r3, #0]
 8006eb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 824b 	beq.w	8007356 <_dtoa_r+0xb56>
 8006ec0:	601e      	str	r6, [r3, #0]
 8006ec2:	e248      	b.n	8007356 <_dtoa_r+0xb56>
 8006ec4:	46b8      	mov	r8, r7
 8006ec6:	4633      	mov	r3, r6
 8006ec8:	461e      	mov	r6, r3
 8006eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ece:	2a39      	cmp	r2, #57	@ 0x39
 8006ed0:	d106      	bne.n	8006ee0 <_dtoa_r+0x6e0>
 8006ed2:	459a      	cmp	sl, r3
 8006ed4:	d1f8      	bne.n	8006ec8 <_dtoa_r+0x6c8>
 8006ed6:	2230      	movs	r2, #48	@ 0x30
 8006ed8:	f108 0801 	add.w	r8, r8, #1
 8006edc:	f88a 2000 	strb.w	r2, [sl]
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	3201      	adds	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e7a0      	b.n	8006e2a <_dtoa_r+0x62a>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4b6f      	ldr	r3, [pc, #444]	@ (80070a8 <_dtoa_r+0x8a8>)
 8006eec:	f7f9 faf4 	bl	80004d8 <__aeabi_dmul>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	460d      	mov	r5, r1
 8006ef8:	f7f9 fd56 	bl	80009a8 <__aeabi_dcmpeq>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d09f      	beq.n	8006e40 <_dtoa_r+0x640>
 8006f00:	e7d1      	b.n	8006ea6 <_dtoa_r+0x6a6>
 8006f02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	f000 80ea 	beq.w	80070de <_dtoa_r+0x8de>
 8006f0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f0c:	2a01      	cmp	r2, #1
 8006f0e:	f300 80cd 	bgt.w	80070ac <_dtoa_r+0x8ac>
 8006f12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	f000 80c1 	beq.w	800709c <_dtoa_r+0x89c>
 8006f1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f20:	9e04      	ldr	r6, [sp, #16]
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	2101      	movs	r1, #1
 8006f26:	441a      	add	r2, r3
 8006f28:	9204      	str	r2, [sp, #16]
 8006f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f2c:	4648      	mov	r0, r9
 8006f2e:	441a      	add	r2, r3
 8006f30:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f32:	f000 fc75 	bl	8007820 <__i2b>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b166      	cbz	r6, 8006f54 <_dtoa_r+0x754>
 8006f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dd09      	ble.n	8006f54 <_dtoa_r+0x754>
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	bfa8      	it	ge
 8006f44:	4633      	movge	r3, r6
 8006f46:	9a04      	ldr	r2, [sp, #16]
 8006f48:	1af6      	subs	r6, r6, r3
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	9204      	str	r2, [sp, #16]
 8006f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f56:	b30b      	cbz	r3, 8006f9c <_dtoa_r+0x79c>
 8006f58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80c6 	beq.w	80070ec <_dtoa_r+0x8ec>
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	f000 80c0 	beq.w	80070e6 <_dtoa_r+0x8e6>
 8006f66:	4629      	mov	r1, r5
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4648      	mov	r0, r9
 8006f6c:	f000 fd10 	bl	8007990 <__pow5mult>
 8006f70:	9a03      	ldr	r2, [sp, #12]
 8006f72:	4601      	mov	r1, r0
 8006f74:	4605      	mov	r5, r0
 8006f76:	4648      	mov	r0, r9
 8006f78:	f000 fc68 	bl	800784c <__multiply>
 8006f7c:	9903      	ldr	r1, [sp, #12]
 8006f7e:	4680      	mov	r8, r0
 8006f80:	4648      	mov	r0, r9
 8006f82:	f000 fb4f 	bl	8007624 <_Bfree>
 8006f86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f88:	1b1b      	subs	r3, r3, r4
 8006f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f8c:	f000 80b1 	beq.w	80070f2 <_dtoa_r+0x8f2>
 8006f90:	4641      	mov	r1, r8
 8006f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f94:	4648      	mov	r0, r9
 8006f96:	f000 fcfb 	bl	8007990 <__pow5mult>
 8006f9a:	9003      	str	r0, [sp, #12]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f000 fc3e 	bl	8007820 <__i2b>
 8006fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 81d8 	beq.w	800735e <_dtoa_r+0xb5e>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	4648      	mov	r0, r9
 8006fb4:	f000 fcec 	bl	8007990 <__pow5mult>
 8006fb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fba:	4604      	mov	r4, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	f300 809f 	bgt.w	8007100 <_dtoa_r+0x900>
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 8097 	bne.w	80070f8 <_dtoa_r+0x8f8>
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 8093 	bne.w	80070fc <_dtoa_r+0x8fc>
 8006fd6:	9b07      	ldr	r3, [sp, #28]
 8006fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fdc:	0d1b      	lsrs	r3, r3, #20
 8006fde:	051b      	lsls	r3, r3, #20
 8006fe0:	b133      	cbz	r3, 8006ff0 <_dtoa_r+0x7f0>
 8006fe2:	9b04      	ldr	r3, [sp, #16]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	9304      	str	r3, [sp, #16]
 8006fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fea:	3301      	adds	r3, #1
 8006fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fee:	2301      	movs	r3, #1
 8006ff0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 81b8 	beq.w	800736a <_dtoa_r+0xb6a>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007000:	6918      	ldr	r0, [r3, #16]
 8007002:	f000 fbc1 	bl	8007788 <__hi0bits>
 8007006:	f1c0 0020 	rsb	r0, r0, #32
 800700a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700c:	4418      	add	r0, r3
 800700e:	f010 001f 	ands.w	r0, r0, #31
 8007012:	f000 8082 	beq.w	800711a <_dtoa_r+0x91a>
 8007016:	f1c0 0320 	rsb	r3, r0, #32
 800701a:	2b04      	cmp	r3, #4
 800701c:	dd73      	ble.n	8007106 <_dtoa_r+0x906>
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	f1c0 001c 	rsb	r0, r0, #28
 8007024:	4403      	add	r3, r0
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800702a:	4406      	add	r6, r0
 800702c:	4403      	add	r3, r0
 800702e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007030:	9b04      	ldr	r3, [sp, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	dd05      	ble.n	8007042 <_dtoa_r+0x842>
 8007036:	461a      	mov	r2, r3
 8007038:	4648      	mov	r0, r9
 800703a:	9903      	ldr	r1, [sp, #12]
 800703c:	f000 fd02 	bl	8007a44 <__lshift>
 8007040:	9003      	str	r0, [sp, #12]
 8007042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	dd05      	ble.n	8007054 <_dtoa_r+0x854>
 8007048:	4621      	mov	r1, r4
 800704a:	461a      	mov	r2, r3
 800704c:	4648      	mov	r0, r9
 800704e:	f000 fcf9 	bl	8007a44 <__lshift>
 8007052:	4604      	mov	r4, r0
 8007054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d061      	beq.n	800711e <_dtoa_r+0x91e>
 800705a:	4621      	mov	r1, r4
 800705c:	9803      	ldr	r0, [sp, #12]
 800705e:	f000 fd5d 	bl	8007b1c <__mcmp>
 8007062:	2800      	cmp	r0, #0
 8007064:	da5b      	bge.n	800711e <_dtoa_r+0x91e>
 8007066:	2300      	movs	r3, #0
 8007068:	220a      	movs	r2, #10
 800706a:	4648      	mov	r0, r9
 800706c:	9903      	ldr	r1, [sp, #12]
 800706e:	f000 fafb 	bl	8007668 <__multadd>
 8007072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007074:	f107 38ff 	add.w	r8, r7, #4294967295
 8007078:	9003      	str	r0, [sp, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8177 	beq.w	800736e <_dtoa_r+0xb6e>
 8007080:	4629      	mov	r1, r5
 8007082:	2300      	movs	r3, #0
 8007084:	220a      	movs	r2, #10
 8007086:	4648      	mov	r0, r9
 8007088:	f000 faee 	bl	8007668 <__multadd>
 800708c:	f1bb 0f00 	cmp.w	fp, #0
 8007090:	4605      	mov	r5, r0
 8007092:	dc6f      	bgt.n	8007174 <_dtoa_r+0x974>
 8007094:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007096:	2b02      	cmp	r3, #2
 8007098:	dc49      	bgt.n	800712e <_dtoa_r+0x92e>
 800709a:	e06b      	b.n	8007174 <_dtoa_r+0x974>
 800709c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800709e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070a2:	e73c      	b.n	8006f1e <_dtoa_r+0x71e>
 80070a4:	3fe00000 	.word	0x3fe00000
 80070a8:	40240000 	.word	0x40240000
 80070ac:	9b08      	ldr	r3, [sp, #32]
 80070ae:	1e5c      	subs	r4, r3, #1
 80070b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	db09      	blt.n	80070ca <_dtoa_r+0x8ca>
 80070b6:	1b1c      	subs	r4, r3, r4
 80070b8:	9b08      	ldr	r3, [sp, #32]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f6bf af30 	bge.w	8006f20 <_dtoa_r+0x720>
 80070c0:	9b04      	ldr	r3, [sp, #16]
 80070c2:	9a08      	ldr	r2, [sp, #32]
 80070c4:	1a9e      	subs	r6, r3, r2
 80070c6:	2300      	movs	r3, #0
 80070c8:	e72b      	b.n	8006f22 <_dtoa_r+0x722>
 80070ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070ce:	1ae3      	subs	r3, r4, r3
 80070d0:	441a      	add	r2, r3
 80070d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80070d4:	9e04      	ldr	r6, [sp, #16]
 80070d6:	2400      	movs	r4, #0
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	920e      	str	r2, [sp, #56]	@ 0x38
 80070dc:	e721      	b.n	8006f22 <_dtoa_r+0x722>
 80070de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070e0:	9e04      	ldr	r6, [sp, #16]
 80070e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070e4:	e728      	b.n	8006f38 <_dtoa_r+0x738>
 80070e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070ea:	e751      	b.n	8006f90 <_dtoa_r+0x790>
 80070ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ee:	9903      	ldr	r1, [sp, #12]
 80070f0:	e750      	b.n	8006f94 <_dtoa_r+0x794>
 80070f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f6:	e751      	b.n	8006f9c <_dtoa_r+0x79c>
 80070f8:	2300      	movs	r3, #0
 80070fa:	e779      	b.n	8006ff0 <_dtoa_r+0x7f0>
 80070fc:	9b06      	ldr	r3, [sp, #24]
 80070fe:	e777      	b.n	8006ff0 <_dtoa_r+0x7f0>
 8007100:	2300      	movs	r3, #0
 8007102:	930a      	str	r3, [sp, #40]	@ 0x28
 8007104:	e779      	b.n	8006ffa <_dtoa_r+0x7fa>
 8007106:	d093      	beq.n	8007030 <_dtoa_r+0x830>
 8007108:	9a04      	ldr	r2, [sp, #16]
 800710a:	331c      	adds	r3, #28
 800710c:	441a      	add	r2, r3
 800710e:	9204      	str	r2, [sp, #16]
 8007110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007112:	441e      	add	r6, r3
 8007114:	441a      	add	r2, r3
 8007116:	9209      	str	r2, [sp, #36]	@ 0x24
 8007118:	e78a      	b.n	8007030 <_dtoa_r+0x830>
 800711a:	4603      	mov	r3, r0
 800711c:	e7f4      	b.n	8007108 <_dtoa_r+0x908>
 800711e:	9b08      	ldr	r3, [sp, #32]
 8007120:	46b8      	mov	r8, r7
 8007122:	2b00      	cmp	r3, #0
 8007124:	dc20      	bgt.n	8007168 <_dtoa_r+0x968>
 8007126:	469b      	mov	fp, r3
 8007128:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800712a:	2b02      	cmp	r3, #2
 800712c:	dd1e      	ble.n	800716c <_dtoa_r+0x96c>
 800712e:	f1bb 0f00 	cmp.w	fp, #0
 8007132:	f47f adb1 	bne.w	8006c98 <_dtoa_r+0x498>
 8007136:	4621      	mov	r1, r4
 8007138:	465b      	mov	r3, fp
 800713a:	2205      	movs	r2, #5
 800713c:	4648      	mov	r0, r9
 800713e:	f000 fa93 	bl	8007668 <__multadd>
 8007142:	4601      	mov	r1, r0
 8007144:	4604      	mov	r4, r0
 8007146:	9803      	ldr	r0, [sp, #12]
 8007148:	f000 fce8 	bl	8007b1c <__mcmp>
 800714c:	2800      	cmp	r0, #0
 800714e:	f77f ada3 	ble.w	8006c98 <_dtoa_r+0x498>
 8007152:	4656      	mov	r6, sl
 8007154:	2331      	movs	r3, #49	@ 0x31
 8007156:	f108 0801 	add.w	r8, r8, #1
 800715a:	f806 3b01 	strb.w	r3, [r6], #1
 800715e:	e59f      	b.n	8006ca0 <_dtoa_r+0x4a0>
 8007160:	46b8      	mov	r8, r7
 8007162:	9c08      	ldr	r4, [sp, #32]
 8007164:	4625      	mov	r5, r4
 8007166:	e7f4      	b.n	8007152 <_dtoa_r+0x952>
 8007168:	f8dd b020 	ldr.w	fp, [sp, #32]
 800716c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 8101 	beq.w	8007376 <_dtoa_r+0xb76>
 8007174:	2e00      	cmp	r6, #0
 8007176:	dd05      	ble.n	8007184 <_dtoa_r+0x984>
 8007178:	4629      	mov	r1, r5
 800717a:	4632      	mov	r2, r6
 800717c:	4648      	mov	r0, r9
 800717e:	f000 fc61 	bl	8007a44 <__lshift>
 8007182:	4605      	mov	r5, r0
 8007184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d05c      	beq.n	8007244 <_dtoa_r+0xa44>
 800718a:	4648      	mov	r0, r9
 800718c:	6869      	ldr	r1, [r5, #4]
 800718e:	f000 fa09 	bl	80075a4 <_Balloc>
 8007192:	4606      	mov	r6, r0
 8007194:	b928      	cbnz	r0, 80071a2 <_dtoa_r+0x9a2>
 8007196:	4602      	mov	r2, r0
 8007198:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800719c:	4b80      	ldr	r3, [pc, #512]	@ (80073a0 <_dtoa_r+0xba0>)
 800719e:	f7ff bb43 	b.w	8006828 <_dtoa_r+0x28>
 80071a2:	692a      	ldr	r2, [r5, #16]
 80071a4:	f105 010c 	add.w	r1, r5, #12
 80071a8:	3202      	adds	r2, #2
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	300c      	adds	r0, #12
 80071ae:	f001 fec3 	bl	8008f38 <memcpy>
 80071b2:	2201      	movs	r2, #1
 80071b4:	4631      	mov	r1, r6
 80071b6:	4648      	mov	r0, r9
 80071b8:	f000 fc44 	bl	8007a44 <__lshift>
 80071bc:	462f      	mov	r7, r5
 80071be:	4605      	mov	r5, r0
 80071c0:	f10a 0301 	add.w	r3, sl, #1
 80071c4:	9304      	str	r3, [sp, #16]
 80071c6:	eb0a 030b 	add.w	r3, sl, fp
 80071ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80071cc:	9b06      	ldr	r3, [sp, #24]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	4621      	mov	r1, r4
 80071d8:	9803      	ldr	r0, [sp, #12]
 80071da:	f103 3bff 	add.w	fp, r3, #4294967295
 80071de:	f7ff fa87 	bl	80066f0 <quorem>
 80071e2:	4603      	mov	r3, r0
 80071e4:	4639      	mov	r1, r7
 80071e6:	3330      	adds	r3, #48	@ 0x30
 80071e8:	9006      	str	r0, [sp, #24]
 80071ea:	9803      	ldr	r0, [sp, #12]
 80071ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ee:	f000 fc95 	bl	8007b1c <__mcmp>
 80071f2:	462a      	mov	r2, r5
 80071f4:	9008      	str	r0, [sp, #32]
 80071f6:	4621      	mov	r1, r4
 80071f8:	4648      	mov	r0, r9
 80071fa:	f000 fcab 	bl	8007b54 <__mdiff>
 80071fe:	68c2      	ldr	r2, [r0, #12]
 8007200:	4606      	mov	r6, r0
 8007202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007204:	bb02      	cbnz	r2, 8007248 <_dtoa_r+0xa48>
 8007206:	4601      	mov	r1, r0
 8007208:	9803      	ldr	r0, [sp, #12]
 800720a:	f000 fc87 	bl	8007b1c <__mcmp>
 800720e:	4602      	mov	r2, r0
 8007210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007212:	4631      	mov	r1, r6
 8007214:	4648      	mov	r0, r9
 8007216:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800721a:	f000 fa03 	bl	8007624 <_Bfree>
 800721e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007222:	9e04      	ldr	r6, [sp, #16]
 8007224:	ea42 0103 	orr.w	r1, r2, r3
 8007228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722a:	4319      	orrs	r1, r3
 800722c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800722e:	d10d      	bne.n	800724c <_dtoa_r+0xa4c>
 8007230:	2b39      	cmp	r3, #57	@ 0x39
 8007232:	d027      	beq.n	8007284 <_dtoa_r+0xa84>
 8007234:	9a08      	ldr	r2, [sp, #32]
 8007236:	2a00      	cmp	r2, #0
 8007238:	dd01      	ble.n	800723e <_dtoa_r+0xa3e>
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	3331      	adds	r3, #49	@ 0x31
 800723e:	f88b 3000 	strb.w	r3, [fp]
 8007242:	e52e      	b.n	8006ca2 <_dtoa_r+0x4a2>
 8007244:	4628      	mov	r0, r5
 8007246:	e7b9      	b.n	80071bc <_dtoa_r+0x9bc>
 8007248:	2201      	movs	r2, #1
 800724a:	e7e2      	b.n	8007212 <_dtoa_r+0xa12>
 800724c:	9908      	ldr	r1, [sp, #32]
 800724e:	2900      	cmp	r1, #0
 8007250:	db04      	blt.n	800725c <_dtoa_r+0xa5c>
 8007252:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007254:	4301      	orrs	r1, r0
 8007256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007258:	4301      	orrs	r1, r0
 800725a:	d120      	bne.n	800729e <_dtoa_r+0xa9e>
 800725c:	2a00      	cmp	r2, #0
 800725e:	ddee      	ble.n	800723e <_dtoa_r+0xa3e>
 8007260:	2201      	movs	r2, #1
 8007262:	9903      	ldr	r1, [sp, #12]
 8007264:	4648      	mov	r0, r9
 8007266:	9304      	str	r3, [sp, #16]
 8007268:	f000 fbec 	bl	8007a44 <__lshift>
 800726c:	4621      	mov	r1, r4
 800726e:	9003      	str	r0, [sp, #12]
 8007270:	f000 fc54 	bl	8007b1c <__mcmp>
 8007274:	2800      	cmp	r0, #0
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	dc02      	bgt.n	8007280 <_dtoa_r+0xa80>
 800727a:	d1e0      	bne.n	800723e <_dtoa_r+0xa3e>
 800727c:	07da      	lsls	r2, r3, #31
 800727e:	d5de      	bpl.n	800723e <_dtoa_r+0xa3e>
 8007280:	2b39      	cmp	r3, #57	@ 0x39
 8007282:	d1da      	bne.n	800723a <_dtoa_r+0xa3a>
 8007284:	2339      	movs	r3, #57	@ 0x39
 8007286:	f88b 3000 	strb.w	r3, [fp]
 800728a:	4633      	mov	r3, r6
 800728c:	461e      	mov	r6, r3
 800728e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007292:	3b01      	subs	r3, #1
 8007294:	2a39      	cmp	r2, #57	@ 0x39
 8007296:	d04e      	beq.n	8007336 <_dtoa_r+0xb36>
 8007298:	3201      	adds	r2, #1
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e501      	b.n	8006ca2 <_dtoa_r+0x4a2>
 800729e:	2a00      	cmp	r2, #0
 80072a0:	dd03      	ble.n	80072aa <_dtoa_r+0xaaa>
 80072a2:	2b39      	cmp	r3, #57	@ 0x39
 80072a4:	d0ee      	beq.n	8007284 <_dtoa_r+0xa84>
 80072a6:	3301      	adds	r3, #1
 80072a8:	e7c9      	b.n	800723e <_dtoa_r+0xa3e>
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072b2:	428a      	cmp	r2, r1
 80072b4:	d028      	beq.n	8007308 <_dtoa_r+0xb08>
 80072b6:	2300      	movs	r3, #0
 80072b8:	220a      	movs	r2, #10
 80072ba:	9903      	ldr	r1, [sp, #12]
 80072bc:	4648      	mov	r0, r9
 80072be:	f000 f9d3 	bl	8007668 <__multadd>
 80072c2:	42af      	cmp	r7, r5
 80072c4:	9003      	str	r0, [sp, #12]
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	f04f 020a 	mov.w	r2, #10
 80072ce:	4639      	mov	r1, r7
 80072d0:	4648      	mov	r0, r9
 80072d2:	d107      	bne.n	80072e4 <_dtoa_r+0xae4>
 80072d4:	f000 f9c8 	bl	8007668 <__multadd>
 80072d8:	4607      	mov	r7, r0
 80072da:	4605      	mov	r5, r0
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	3301      	adds	r3, #1
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	e777      	b.n	80071d4 <_dtoa_r+0x9d4>
 80072e4:	f000 f9c0 	bl	8007668 <__multadd>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4607      	mov	r7, r0
 80072ec:	2300      	movs	r3, #0
 80072ee:	220a      	movs	r2, #10
 80072f0:	4648      	mov	r0, r9
 80072f2:	f000 f9b9 	bl	8007668 <__multadd>
 80072f6:	4605      	mov	r5, r0
 80072f8:	e7f0      	b.n	80072dc <_dtoa_r+0xadc>
 80072fa:	f1bb 0f00 	cmp.w	fp, #0
 80072fe:	bfcc      	ite	gt
 8007300:	465e      	movgt	r6, fp
 8007302:	2601      	movle	r6, #1
 8007304:	2700      	movs	r7, #0
 8007306:	4456      	add	r6, sl
 8007308:	2201      	movs	r2, #1
 800730a:	9903      	ldr	r1, [sp, #12]
 800730c:	4648      	mov	r0, r9
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	f000 fb98 	bl	8007a44 <__lshift>
 8007314:	4621      	mov	r1, r4
 8007316:	9003      	str	r0, [sp, #12]
 8007318:	f000 fc00 	bl	8007b1c <__mcmp>
 800731c:	2800      	cmp	r0, #0
 800731e:	dcb4      	bgt.n	800728a <_dtoa_r+0xa8a>
 8007320:	d102      	bne.n	8007328 <_dtoa_r+0xb28>
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	07db      	lsls	r3, r3, #31
 8007326:	d4b0      	bmi.n	800728a <_dtoa_r+0xa8a>
 8007328:	4633      	mov	r3, r6
 800732a:	461e      	mov	r6, r3
 800732c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007330:	2a30      	cmp	r2, #48	@ 0x30
 8007332:	d0fa      	beq.n	800732a <_dtoa_r+0xb2a>
 8007334:	e4b5      	b.n	8006ca2 <_dtoa_r+0x4a2>
 8007336:	459a      	cmp	sl, r3
 8007338:	d1a8      	bne.n	800728c <_dtoa_r+0xa8c>
 800733a:	2331      	movs	r3, #49	@ 0x31
 800733c:	f108 0801 	add.w	r8, r8, #1
 8007340:	f88a 3000 	strb.w	r3, [sl]
 8007344:	e4ad      	b.n	8006ca2 <_dtoa_r+0x4a2>
 8007346:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007348:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80073a4 <_dtoa_r+0xba4>
 800734c:	b11b      	cbz	r3, 8007356 <_dtoa_r+0xb56>
 800734e:	f10a 0308 	add.w	r3, sl, #8
 8007352:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4650      	mov	r0, sl
 8007358:	b017      	add	sp, #92	@ 0x5c
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007360:	2b01      	cmp	r3, #1
 8007362:	f77f ae2e 	ble.w	8006fc2 <_dtoa_r+0x7c2>
 8007366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007368:	930a      	str	r3, [sp, #40]	@ 0x28
 800736a:	2001      	movs	r0, #1
 800736c:	e64d      	b.n	800700a <_dtoa_r+0x80a>
 800736e:	f1bb 0f00 	cmp.w	fp, #0
 8007372:	f77f aed9 	ble.w	8007128 <_dtoa_r+0x928>
 8007376:	4656      	mov	r6, sl
 8007378:	4621      	mov	r1, r4
 800737a:	9803      	ldr	r0, [sp, #12]
 800737c:	f7ff f9b8 	bl	80066f0 <quorem>
 8007380:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007384:	f806 3b01 	strb.w	r3, [r6], #1
 8007388:	eba6 020a 	sub.w	r2, r6, sl
 800738c:	4593      	cmp	fp, r2
 800738e:	ddb4      	ble.n	80072fa <_dtoa_r+0xafa>
 8007390:	2300      	movs	r3, #0
 8007392:	220a      	movs	r2, #10
 8007394:	4648      	mov	r0, r9
 8007396:	9903      	ldr	r1, [sp, #12]
 8007398:	f000 f966 	bl	8007668 <__multadd>
 800739c:	9003      	str	r0, [sp, #12]
 800739e:	e7eb      	b.n	8007378 <_dtoa_r+0xb78>
 80073a0:	0800a98c 	.word	0x0800a98c
 80073a4:	0800a910 	.word	0x0800a910

080073a8 <_free_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4605      	mov	r5, r0
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d040      	beq.n	8007432 <_free_r+0x8a>
 80073b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b4:	1f0c      	subs	r4, r1, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfb8      	it	lt
 80073ba:	18e4      	addlt	r4, r4, r3
 80073bc:	f000 f8e6 	bl	800758c <__malloc_lock>
 80073c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007434 <_free_r+0x8c>)
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x2c>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	4628      	mov	r0, r5
 80073cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d0:	f000 b8e2 	b.w	8007598 <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x42>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	1821      	adds	r1, r4, r0
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1809      	addeq	r1, r1, r0
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x1e>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x4c>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x42>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1850      	adds	r0, r2, r1
 80073f8:	42a0      	cmp	r0, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x6c>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	4401      	add	r1, r0
 8007400:	1850      	adds	r0, r2, r1
 8007402:	4283      	cmp	r3, r0
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x22>
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4408      	add	r0, r1
 800740e:	6010      	str	r0, [r2, #0]
 8007410:	6053      	str	r3, [r2, #4]
 8007412:	e7da      	b.n	80073ca <_free_r+0x22>
 8007414:	d902      	bls.n	800741c <_free_r+0x74>
 8007416:	230c      	movs	r3, #12
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x22>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	1821      	adds	r1, r4, r0
 8007420:	428b      	cmp	r3, r1
 8007422:	bf01      	itttt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	1809      	addeq	r1, r1, r0
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	6063      	str	r3, [r4, #4]
 800742e:	6054      	str	r4, [r2, #4]
 8007430:	e7cb      	b.n	80073ca <_free_r+0x22>
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	200008b4 	.word	0x200008b4

08007438 <malloc>:
 8007438:	4b02      	ldr	r3, [pc, #8]	@ (8007444 <malloc+0xc>)
 800743a:	4601      	mov	r1, r0
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	f000 b825 	b.w	800748c <_malloc_r>
 8007442:	bf00      	nop
 8007444:	20000024 	.word	0x20000024

08007448 <sbrk_aligned>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	4e0f      	ldr	r6, [pc, #60]	@ (8007488 <sbrk_aligned+0x40>)
 800744c:	460c      	mov	r4, r1
 800744e:	6831      	ldr	r1, [r6, #0]
 8007450:	4605      	mov	r5, r0
 8007452:	b911      	cbnz	r1, 800745a <sbrk_aligned+0x12>
 8007454:	f001 fd60 	bl	8008f18 <_sbrk_r>
 8007458:	6030      	str	r0, [r6, #0]
 800745a:	4621      	mov	r1, r4
 800745c:	4628      	mov	r0, r5
 800745e:	f001 fd5b 	bl	8008f18 <_sbrk_r>
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	d103      	bne.n	800746e <sbrk_aligned+0x26>
 8007466:	f04f 34ff 	mov.w	r4, #4294967295
 800746a:	4620      	mov	r0, r4
 800746c:	bd70      	pop	{r4, r5, r6, pc}
 800746e:	1cc4      	adds	r4, r0, #3
 8007470:	f024 0403 	bic.w	r4, r4, #3
 8007474:	42a0      	cmp	r0, r4
 8007476:	d0f8      	beq.n	800746a <sbrk_aligned+0x22>
 8007478:	1a21      	subs	r1, r4, r0
 800747a:	4628      	mov	r0, r5
 800747c:	f001 fd4c 	bl	8008f18 <_sbrk_r>
 8007480:	3001      	adds	r0, #1
 8007482:	d1f2      	bne.n	800746a <sbrk_aligned+0x22>
 8007484:	e7ef      	b.n	8007466 <sbrk_aligned+0x1e>
 8007486:	bf00      	nop
 8007488:	200008b0 	.word	0x200008b0

0800748c <_malloc_r>:
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	1ccd      	adds	r5, r1, #3
 8007492:	f025 0503 	bic.w	r5, r5, #3
 8007496:	3508      	adds	r5, #8
 8007498:	2d0c      	cmp	r5, #12
 800749a:	bf38      	it	cc
 800749c:	250c      	movcc	r5, #12
 800749e:	2d00      	cmp	r5, #0
 80074a0:	4606      	mov	r6, r0
 80074a2:	db01      	blt.n	80074a8 <_malloc_r+0x1c>
 80074a4:	42a9      	cmp	r1, r5
 80074a6:	d904      	bls.n	80074b2 <_malloc_r+0x26>
 80074a8:	230c      	movs	r3, #12
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	2000      	movs	r0, #0
 80074ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007588 <_malloc_r+0xfc>
 80074b6:	f000 f869 	bl	800758c <__malloc_lock>
 80074ba:	f8d8 3000 	ldr.w	r3, [r8]
 80074be:	461c      	mov	r4, r3
 80074c0:	bb44      	cbnz	r4, 8007514 <_malloc_r+0x88>
 80074c2:	4629      	mov	r1, r5
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff ffbf 	bl	8007448 <sbrk_aligned>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	4604      	mov	r4, r0
 80074ce:	d158      	bne.n	8007582 <_malloc_r+0xf6>
 80074d0:	f8d8 4000 	ldr.w	r4, [r8]
 80074d4:	4627      	mov	r7, r4
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	d143      	bne.n	8007562 <_malloc_r+0xd6>
 80074da:	2c00      	cmp	r4, #0
 80074dc:	d04b      	beq.n	8007576 <_malloc_r+0xea>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	4639      	mov	r1, r7
 80074e2:	4630      	mov	r0, r6
 80074e4:	eb04 0903 	add.w	r9, r4, r3
 80074e8:	f001 fd16 	bl	8008f18 <_sbrk_r>
 80074ec:	4581      	cmp	r9, r0
 80074ee:	d142      	bne.n	8007576 <_malloc_r+0xea>
 80074f0:	6821      	ldr	r1, [r4, #0]
 80074f2:	4630      	mov	r0, r6
 80074f4:	1a6d      	subs	r5, r5, r1
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7ff ffa6 	bl	8007448 <sbrk_aligned>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d03a      	beq.n	8007576 <_malloc_r+0xea>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	442b      	add	r3, r5
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	f8d8 3000 	ldr.w	r3, [r8]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	bb62      	cbnz	r2, 8007568 <_malloc_r+0xdc>
 800750e:	f8c8 7000 	str.w	r7, [r8]
 8007512:	e00f      	b.n	8007534 <_malloc_r+0xa8>
 8007514:	6822      	ldr	r2, [r4, #0]
 8007516:	1b52      	subs	r2, r2, r5
 8007518:	d420      	bmi.n	800755c <_malloc_r+0xd0>
 800751a:	2a0b      	cmp	r2, #11
 800751c:	d917      	bls.n	800754e <_malloc_r+0xc2>
 800751e:	1961      	adds	r1, r4, r5
 8007520:	42a3      	cmp	r3, r4
 8007522:	6025      	str	r5, [r4, #0]
 8007524:	bf18      	it	ne
 8007526:	6059      	strne	r1, [r3, #4]
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	bf08      	it	eq
 800752c:	f8c8 1000 	streq.w	r1, [r8]
 8007530:	5162      	str	r2, [r4, r5]
 8007532:	604b      	str	r3, [r1, #4]
 8007534:	4630      	mov	r0, r6
 8007536:	f000 f82f 	bl	8007598 <__malloc_unlock>
 800753a:	f104 000b 	add.w	r0, r4, #11
 800753e:	1d23      	adds	r3, r4, #4
 8007540:	f020 0007 	bic.w	r0, r0, #7
 8007544:	1ac2      	subs	r2, r0, r3
 8007546:	bf1c      	itt	ne
 8007548:	1a1b      	subne	r3, r3, r0
 800754a:	50a3      	strne	r3, [r4, r2]
 800754c:	e7af      	b.n	80074ae <_malloc_r+0x22>
 800754e:	6862      	ldr	r2, [r4, #4]
 8007550:	42a3      	cmp	r3, r4
 8007552:	bf0c      	ite	eq
 8007554:	f8c8 2000 	streq.w	r2, [r8]
 8007558:	605a      	strne	r2, [r3, #4]
 800755a:	e7eb      	b.n	8007534 <_malloc_r+0xa8>
 800755c:	4623      	mov	r3, r4
 800755e:	6864      	ldr	r4, [r4, #4]
 8007560:	e7ae      	b.n	80074c0 <_malloc_r+0x34>
 8007562:	463c      	mov	r4, r7
 8007564:	687f      	ldr	r7, [r7, #4]
 8007566:	e7b6      	b.n	80074d6 <_malloc_r+0x4a>
 8007568:	461a      	mov	r2, r3
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	42a3      	cmp	r3, r4
 800756e:	d1fb      	bne.n	8007568 <_malloc_r+0xdc>
 8007570:	2300      	movs	r3, #0
 8007572:	6053      	str	r3, [r2, #4]
 8007574:	e7de      	b.n	8007534 <_malloc_r+0xa8>
 8007576:	230c      	movs	r3, #12
 8007578:	4630      	mov	r0, r6
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	f000 f80c 	bl	8007598 <__malloc_unlock>
 8007580:	e794      	b.n	80074ac <_malloc_r+0x20>
 8007582:	6005      	str	r5, [r0, #0]
 8007584:	e7d6      	b.n	8007534 <_malloc_r+0xa8>
 8007586:	bf00      	nop
 8007588:	200008b4 	.word	0x200008b4

0800758c <__malloc_lock>:
 800758c:	4801      	ldr	r0, [pc, #4]	@ (8007594 <__malloc_lock+0x8>)
 800758e:	f7ff b89a 	b.w	80066c6 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	200008ac 	.word	0x200008ac

08007598 <__malloc_unlock>:
 8007598:	4801      	ldr	r0, [pc, #4]	@ (80075a0 <__malloc_unlock+0x8>)
 800759a:	f7ff b895 	b.w	80066c8 <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	200008ac 	.word	0x200008ac

080075a4 <_Balloc>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	69c6      	ldr	r6, [r0, #28]
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	b976      	cbnz	r6, 80075cc <_Balloc+0x28>
 80075ae:	2010      	movs	r0, #16
 80075b0:	f7ff ff42 	bl	8007438 <malloc>
 80075b4:	4602      	mov	r2, r0
 80075b6:	61e0      	str	r0, [r4, #28]
 80075b8:	b920      	cbnz	r0, 80075c4 <_Balloc+0x20>
 80075ba:	216b      	movs	r1, #107	@ 0x6b
 80075bc:	4b17      	ldr	r3, [pc, #92]	@ (800761c <_Balloc+0x78>)
 80075be:	4818      	ldr	r0, [pc, #96]	@ (8007620 <_Balloc+0x7c>)
 80075c0:	f001 fcce 	bl	8008f60 <__assert_func>
 80075c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c8:	6006      	str	r6, [r0, #0]
 80075ca:	60c6      	str	r6, [r0, #12]
 80075cc:	69e6      	ldr	r6, [r4, #28]
 80075ce:	68f3      	ldr	r3, [r6, #12]
 80075d0:	b183      	cbz	r3, 80075f4 <_Balloc+0x50>
 80075d2:	69e3      	ldr	r3, [r4, #28]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075da:	b9b8      	cbnz	r0, 800760c <_Balloc+0x68>
 80075dc:	2101      	movs	r1, #1
 80075de:	fa01 f605 	lsl.w	r6, r1, r5
 80075e2:	1d72      	adds	r2, r6, #5
 80075e4:	4620      	mov	r0, r4
 80075e6:	0092      	lsls	r2, r2, #2
 80075e8:	f001 fcd8 	bl	8008f9c <_calloc_r>
 80075ec:	b160      	cbz	r0, 8007608 <_Balloc+0x64>
 80075ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075f2:	e00e      	b.n	8007612 <_Balloc+0x6e>
 80075f4:	2221      	movs	r2, #33	@ 0x21
 80075f6:	2104      	movs	r1, #4
 80075f8:	4620      	mov	r0, r4
 80075fa:	f001 fccf 	bl	8008f9c <_calloc_r>
 80075fe:	69e3      	ldr	r3, [r4, #28]
 8007600:	60f0      	str	r0, [r6, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e4      	bne.n	80075d2 <_Balloc+0x2e>
 8007608:	2000      	movs	r0, #0
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	6802      	ldr	r2, [r0, #0]
 800760e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007612:	2300      	movs	r3, #0
 8007614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007618:	e7f7      	b.n	800760a <_Balloc+0x66>
 800761a:	bf00      	nop
 800761c:	0800a91d 	.word	0x0800a91d
 8007620:	0800a99d 	.word	0x0800a99d

08007624 <_Bfree>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	69c6      	ldr	r6, [r0, #28]
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	b976      	cbnz	r6, 800764c <_Bfree+0x28>
 800762e:	2010      	movs	r0, #16
 8007630:	f7ff ff02 	bl	8007438 <malloc>
 8007634:	4602      	mov	r2, r0
 8007636:	61e8      	str	r0, [r5, #28]
 8007638:	b920      	cbnz	r0, 8007644 <_Bfree+0x20>
 800763a:	218f      	movs	r1, #143	@ 0x8f
 800763c:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <_Bfree+0x3c>)
 800763e:	4809      	ldr	r0, [pc, #36]	@ (8007664 <_Bfree+0x40>)
 8007640:	f001 fc8e 	bl	8008f60 <__assert_func>
 8007644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007648:	6006      	str	r6, [r0, #0]
 800764a:	60c6      	str	r6, [r0, #12]
 800764c:	b13c      	cbz	r4, 800765e <_Bfree+0x3a>
 800764e:	69eb      	ldr	r3, [r5, #28]
 8007650:	6862      	ldr	r2, [r4, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007658:	6021      	str	r1, [r4, #0]
 800765a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	0800a91d 	.word	0x0800a91d
 8007664:	0800a99d 	.word	0x0800a99d

08007668 <__multadd>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	4607      	mov	r7, r0
 800766e:	460c      	mov	r4, r1
 8007670:	461e      	mov	r6, r3
 8007672:	2000      	movs	r0, #0
 8007674:	690d      	ldr	r5, [r1, #16]
 8007676:	f101 0c14 	add.w	ip, r1, #20
 800767a:	f8dc 3000 	ldr.w	r3, [ip]
 800767e:	3001      	adds	r0, #1
 8007680:	b299      	uxth	r1, r3
 8007682:	fb02 6101 	mla	r1, r2, r1, r6
 8007686:	0c1e      	lsrs	r6, r3, #16
 8007688:	0c0b      	lsrs	r3, r1, #16
 800768a:	fb02 3306 	mla	r3, r2, r6, r3
 800768e:	b289      	uxth	r1, r1
 8007690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007694:	4285      	cmp	r5, r0
 8007696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800769a:	f84c 1b04 	str.w	r1, [ip], #4
 800769e:	dcec      	bgt.n	800767a <__multadd+0x12>
 80076a0:	b30e      	cbz	r6, 80076e6 <__multadd+0x7e>
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	42ab      	cmp	r3, r5
 80076a6:	dc19      	bgt.n	80076dc <__multadd+0x74>
 80076a8:	6861      	ldr	r1, [r4, #4]
 80076aa:	4638      	mov	r0, r7
 80076ac:	3101      	adds	r1, #1
 80076ae:	f7ff ff79 	bl	80075a4 <_Balloc>
 80076b2:	4680      	mov	r8, r0
 80076b4:	b928      	cbnz	r0, 80076c2 <__multadd+0x5a>
 80076b6:	4602      	mov	r2, r0
 80076b8:	21ba      	movs	r1, #186	@ 0xba
 80076ba:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <__multadd+0x84>)
 80076bc:	480c      	ldr	r0, [pc, #48]	@ (80076f0 <__multadd+0x88>)
 80076be:	f001 fc4f 	bl	8008f60 <__assert_func>
 80076c2:	6922      	ldr	r2, [r4, #16]
 80076c4:	f104 010c 	add.w	r1, r4, #12
 80076c8:	3202      	adds	r2, #2
 80076ca:	0092      	lsls	r2, r2, #2
 80076cc:	300c      	adds	r0, #12
 80076ce:	f001 fc33 	bl	8008f38 <memcpy>
 80076d2:	4621      	mov	r1, r4
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff ffa5 	bl	8007624 <_Bfree>
 80076da:	4644      	mov	r4, r8
 80076dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076e0:	3501      	adds	r5, #1
 80076e2:	615e      	str	r6, [r3, #20]
 80076e4:	6125      	str	r5, [r4, #16]
 80076e6:	4620      	mov	r0, r4
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	0800a98c 	.word	0x0800a98c
 80076f0:	0800a99d 	.word	0x0800a99d

080076f4 <__s2b>:
 80076f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f8:	4615      	mov	r5, r2
 80076fa:	2209      	movs	r2, #9
 80076fc:	461f      	mov	r7, r3
 80076fe:	3308      	adds	r3, #8
 8007700:	460c      	mov	r4, r1
 8007702:	fb93 f3f2 	sdiv	r3, r3, r2
 8007706:	4606      	mov	r6, r0
 8007708:	2201      	movs	r2, #1
 800770a:	2100      	movs	r1, #0
 800770c:	429a      	cmp	r2, r3
 800770e:	db09      	blt.n	8007724 <__s2b+0x30>
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff ff47 	bl	80075a4 <_Balloc>
 8007716:	b940      	cbnz	r0, 800772a <__s2b+0x36>
 8007718:	4602      	mov	r2, r0
 800771a:	21d3      	movs	r1, #211	@ 0xd3
 800771c:	4b18      	ldr	r3, [pc, #96]	@ (8007780 <__s2b+0x8c>)
 800771e:	4819      	ldr	r0, [pc, #100]	@ (8007784 <__s2b+0x90>)
 8007720:	f001 fc1e 	bl	8008f60 <__assert_func>
 8007724:	0052      	lsls	r2, r2, #1
 8007726:	3101      	adds	r1, #1
 8007728:	e7f0      	b.n	800770c <__s2b+0x18>
 800772a:	9b08      	ldr	r3, [sp, #32]
 800772c:	2d09      	cmp	r5, #9
 800772e:	6143      	str	r3, [r0, #20]
 8007730:	f04f 0301 	mov.w	r3, #1
 8007734:	6103      	str	r3, [r0, #16]
 8007736:	dd16      	ble.n	8007766 <__s2b+0x72>
 8007738:	f104 0909 	add.w	r9, r4, #9
 800773c:	46c8      	mov	r8, r9
 800773e:	442c      	add	r4, r5
 8007740:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007744:	4601      	mov	r1, r0
 8007746:	220a      	movs	r2, #10
 8007748:	4630      	mov	r0, r6
 800774a:	3b30      	subs	r3, #48	@ 0x30
 800774c:	f7ff ff8c 	bl	8007668 <__multadd>
 8007750:	45a0      	cmp	r8, r4
 8007752:	d1f5      	bne.n	8007740 <__s2b+0x4c>
 8007754:	f1a5 0408 	sub.w	r4, r5, #8
 8007758:	444c      	add	r4, r9
 800775a:	1b2d      	subs	r5, r5, r4
 800775c:	1963      	adds	r3, r4, r5
 800775e:	42bb      	cmp	r3, r7
 8007760:	db04      	blt.n	800776c <__s2b+0x78>
 8007762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007766:	2509      	movs	r5, #9
 8007768:	340a      	adds	r4, #10
 800776a:	e7f6      	b.n	800775a <__s2b+0x66>
 800776c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007770:	4601      	mov	r1, r0
 8007772:	220a      	movs	r2, #10
 8007774:	4630      	mov	r0, r6
 8007776:	3b30      	subs	r3, #48	@ 0x30
 8007778:	f7ff ff76 	bl	8007668 <__multadd>
 800777c:	e7ee      	b.n	800775c <__s2b+0x68>
 800777e:	bf00      	nop
 8007780:	0800a98c 	.word	0x0800a98c
 8007784:	0800a99d 	.word	0x0800a99d

08007788 <__hi0bits>:
 8007788:	4603      	mov	r3, r0
 800778a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800778e:	bf3a      	itte	cc
 8007790:	0403      	lslcc	r3, r0, #16
 8007792:	2010      	movcc	r0, #16
 8007794:	2000      	movcs	r0, #0
 8007796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800779a:	bf3c      	itt	cc
 800779c:	021b      	lslcc	r3, r3, #8
 800779e:	3008      	addcc	r0, #8
 80077a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077a4:	bf3c      	itt	cc
 80077a6:	011b      	lslcc	r3, r3, #4
 80077a8:	3004      	addcc	r0, #4
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	bf3c      	itt	cc
 80077b0:	009b      	lslcc	r3, r3, #2
 80077b2:	3002      	addcc	r0, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	db05      	blt.n	80077c4 <__hi0bits+0x3c>
 80077b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077bc:	f100 0001 	add.w	r0, r0, #1
 80077c0:	bf08      	it	eq
 80077c2:	2020      	moveq	r0, #32
 80077c4:	4770      	bx	lr

080077c6 <__lo0bits>:
 80077c6:	6803      	ldr	r3, [r0, #0]
 80077c8:	4602      	mov	r2, r0
 80077ca:	f013 0007 	ands.w	r0, r3, #7
 80077ce:	d00b      	beq.n	80077e8 <__lo0bits+0x22>
 80077d0:	07d9      	lsls	r1, r3, #31
 80077d2:	d421      	bmi.n	8007818 <__lo0bits+0x52>
 80077d4:	0798      	lsls	r0, r3, #30
 80077d6:	bf49      	itett	mi
 80077d8:	085b      	lsrmi	r3, r3, #1
 80077da:	089b      	lsrpl	r3, r3, #2
 80077dc:	2001      	movmi	r0, #1
 80077de:	6013      	strmi	r3, [r2, #0]
 80077e0:	bf5c      	itt	pl
 80077e2:	2002      	movpl	r0, #2
 80077e4:	6013      	strpl	r3, [r2, #0]
 80077e6:	4770      	bx	lr
 80077e8:	b299      	uxth	r1, r3
 80077ea:	b909      	cbnz	r1, 80077f0 <__lo0bits+0x2a>
 80077ec:	2010      	movs	r0, #16
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	b2d9      	uxtb	r1, r3
 80077f2:	b909      	cbnz	r1, 80077f8 <__lo0bits+0x32>
 80077f4:	3008      	adds	r0, #8
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	0719      	lsls	r1, r3, #28
 80077fa:	bf04      	itt	eq
 80077fc:	091b      	lsreq	r3, r3, #4
 80077fe:	3004      	addeq	r0, #4
 8007800:	0799      	lsls	r1, r3, #30
 8007802:	bf04      	itt	eq
 8007804:	089b      	lsreq	r3, r3, #2
 8007806:	3002      	addeq	r0, #2
 8007808:	07d9      	lsls	r1, r3, #31
 800780a:	d403      	bmi.n	8007814 <__lo0bits+0x4e>
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	f100 0001 	add.w	r0, r0, #1
 8007812:	d003      	beq.n	800781c <__lo0bits+0x56>
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	4770      	bx	lr
 8007818:	2000      	movs	r0, #0
 800781a:	4770      	bx	lr
 800781c:	2020      	movs	r0, #32
 800781e:	4770      	bx	lr

08007820 <__i2b>:
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	2101      	movs	r1, #1
 8007826:	f7ff febd 	bl	80075a4 <_Balloc>
 800782a:	4602      	mov	r2, r0
 800782c:	b928      	cbnz	r0, 800783a <__i2b+0x1a>
 800782e:	f240 1145 	movw	r1, #325	@ 0x145
 8007832:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <__i2b+0x24>)
 8007834:	4804      	ldr	r0, [pc, #16]	@ (8007848 <__i2b+0x28>)
 8007836:	f001 fb93 	bl	8008f60 <__assert_func>
 800783a:	2301      	movs	r3, #1
 800783c:	6144      	str	r4, [r0, #20]
 800783e:	6103      	str	r3, [r0, #16]
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop
 8007844:	0800a98c 	.word	0x0800a98c
 8007848:	0800a99d 	.word	0x0800a99d

0800784c <__multiply>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	4617      	mov	r7, r2
 8007852:	690a      	ldr	r2, [r1, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4689      	mov	r9, r1
 8007858:	429a      	cmp	r2, r3
 800785a:	bfa2      	ittt	ge
 800785c:	463b      	movge	r3, r7
 800785e:	460f      	movge	r7, r1
 8007860:	4699      	movge	r9, r3
 8007862:	693d      	ldr	r5, [r7, #16]
 8007864:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	eb05 060a 	add.w	r6, r5, sl
 8007870:	42b3      	cmp	r3, r6
 8007872:	b085      	sub	sp, #20
 8007874:	bfb8      	it	lt
 8007876:	3101      	addlt	r1, #1
 8007878:	f7ff fe94 	bl	80075a4 <_Balloc>
 800787c:	b930      	cbnz	r0, 800788c <__multiply+0x40>
 800787e:	4602      	mov	r2, r0
 8007880:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007884:	4b40      	ldr	r3, [pc, #256]	@ (8007988 <__multiply+0x13c>)
 8007886:	4841      	ldr	r0, [pc, #260]	@ (800798c <__multiply+0x140>)
 8007888:	f001 fb6a 	bl	8008f60 <__assert_func>
 800788c:	f100 0414 	add.w	r4, r0, #20
 8007890:	4623      	mov	r3, r4
 8007892:	2200      	movs	r2, #0
 8007894:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007898:	4573      	cmp	r3, lr
 800789a:	d320      	bcc.n	80078de <__multiply+0x92>
 800789c:	f107 0814 	add.w	r8, r7, #20
 80078a0:	f109 0114 	add.w	r1, r9, #20
 80078a4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80078a8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	1beb      	subs	r3, r5, r7
 80078b0:	3b15      	subs	r3, #21
 80078b2:	f023 0303 	bic.w	r3, r3, #3
 80078b6:	3304      	adds	r3, #4
 80078b8:	3715      	adds	r7, #21
 80078ba:	42bd      	cmp	r5, r7
 80078bc:	bf38      	it	cc
 80078be:	2304      	movcc	r3, #4
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	9103      	str	r1, [sp, #12]
 80078c6:	428b      	cmp	r3, r1
 80078c8:	d80c      	bhi.n	80078e4 <__multiply+0x98>
 80078ca:	2e00      	cmp	r6, #0
 80078cc:	dd03      	ble.n	80078d6 <__multiply+0x8a>
 80078ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d055      	beq.n	8007982 <__multiply+0x136>
 80078d6:	6106      	str	r6, [r0, #16]
 80078d8:	b005      	add	sp, #20
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	f843 2b04 	str.w	r2, [r3], #4
 80078e2:	e7d9      	b.n	8007898 <__multiply+0x4c>
 80078e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80078e8:	f1ba 0f00 	cmp.w	sl, #0
 80078ec:	d01f      	beq.n	800792e <__multiply+0xe2>
 80078ee:	46c4      	mov	ip, r8
 80078f0:	46a1      	mov	r9, r4
 80078f2:	2700      	movs	r7, #0
 80078f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078f8:	f8d9 3000 	ldr.w	r3, [r9]
 80078fc:	fa1f fb82 	uxth.w	fp, r2
 8007900:	b29b      	uxth	r3, r3
 8007902:	fb0a 330b 	mla	r3, sl, fp, r3
 8007906:	443b      	add	r3, r7
 8007908:	f8d9 7000 	ldr.w	r7, [r9]
 800790c:	0c12      	lsrs	r2, r2, #16
 800790e:	0c3f      	lsrs	r7, r7, #16
 8007910:	fb0a 7202 	mla	r2, sl, r2, r7
 8007914:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007918:	b29b      	uxth	r3, r3
 800791a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800791e:	4565      	cmp	r5, ip
 8007920:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007924:	f849 3b04 	str.w	r3, [r9], #4
 8007928:	d8e4      	bhi.n	80078f4 <__multiply+0xa8>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	50e7      	str	r7, [r4, r3]
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	3104      	adds	r1, #4
 8007932:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007936:	f1b9 0f00 	cmp.w	r9, #0
 800793a:	d020      	beq.n	800797e <__multiply+0x132>
 800793c:	4647      	mov	r7, r8
 800793e:	46a4      	mov	ip, r4
 8007940:	f04f 0a00 	mov.w	sl, #0
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	f8b7 b000 	ldrh.w	fp, [r7]
 800794a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800794e:	b29b      	uxth	r3, r3
 8007950:	fb09 220b 	mla	r2, r9, fp, r2
 8007954:	4452      	add	r2, sl
 8007956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800795a:	f84c 3b04 	str.w	r3, [ip], #4
 800795e:	f857 3b04 	ldr.w	r3, [r7], #4
 8007962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007966:	f8bc 3000 	ldrh.w	r3, [ip]
 800796a:	42bd      	cmp	r5, r7
 800796c:	fb09 330a 	mla	r3, r9, sl, r3
 8007970:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007978:	d8e5      	bhi.n	8007946 <__multiply+0xfa>
 800797a:	9a01      	ldr	r2, [sp, #4]
 800797c:	50a3      	str	r3, [r4, r2]
 800797e:	3404      	adds	r4, #4
 8007980:	e79f      	b.n	80078c2 <__multiply+0x76>
 8007982:	3e01      	subs	r6, #1
 8007984:	e7a1      	b.n	80078ca <__multiply+0x7e>
 8007986:	bf00      	nop
 8007988:	0800a98c 	.word	0x0800a98c
 800798c:	0800a99d 	.word	0x0800a99d

08007990 <__pow5mult>:
 8007990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007994:	4615      	mov	r5, r2
 8007996:	f012 0203 	ands.w	r2, r2, #3
 800799a:	4607      	mov	r7, r0
 800799c:	460e      	mov	r6, r1
 800799e:	d007      	beq.n	80079b0 <__pow5mult+0x20>
 80079a0:	4c25      	ldr	r4, [pc, #148]	@ (8007a38 <__pow5mult+0xa8>)
 80079a2:	3a01      	subs	r2, #1
 80079a4:	2300      	movs	r3, #0
 80079a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079aa:	f7ff fe5d 	bl	8007668 <__multadd>
 80079ae:	4606      	mov	r6, r0
 80079b0:	10ad      	asrs	r5, r5, #2
 80079b2:	d03d      	beq.n	8007a30 <__pow5mult+0xa0>
 80079b4:	69fc      	ldr	r4, [r7, #28]
 80079b6:	b97c      	cbnz	r4, 80079d8 <__pow5mult+0x48>
 80079b8:	2010      	movs	r0, #16
 80079ba:	f7ff fd3d 	bl	8007438 <malloc>
 80079be:	4602      	mov	r2, r0
 80079c0:	61f8      	str	r0, [r7, #28]
 80079c2:	b928      	cbnz	r0, 80079d0 <__pow5mult+0x40>
 80079c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079c8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a3c <__pow5mult+0xac>)
 80079ca:	481d      	ldr	r0, [pc, #116]	@ (8007a40 <__pow5mult+0xb0>)
 80079cc:	f001 fac8 	bl	8008f60 <__assert_func>
 80079d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079d4:	6004      	str	r4, [r0, #0]
 80079d6:	60c4      	str	r4, [r0, #12]
 80079d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80079dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079e0:	b94c      	cbnz	r4, 80079f6 <__pow5mult+0x66>
 80079e2:	f240 2171 	movw	r1, #625	@ 0x271
 80079e6:	4638      	mov	r0, r7
 80079e8:	f7ff ff1a 	bl	8007820 <__i2b>
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80079f4:	6003      	str	r3, [r0, #0]
 80079f6:	f04f 0900 	mov.w	r9, #0
 80079fa:	07eb      	lsls	r3, r5, #31
 80079fc:	d50a      	bpl.n	8007a14 <__pow5mult+0x84>
 80079fe:	4631      	mov	r1, r6
 8007a00:	4622      	mov	r2, r4
 8007a02:	4638      	mov	r0, r7
 8007a04:	f7ff ff22 	bl	800784c <__multiply>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7ff fe09 	bl	8007624 <_Bfree>
 8007a12:	4646      	mov	r6, r8
 8007a14:	106d      	asrs	r5, r5, #1
 8007a16:	d00b      	beq.n	8007a30 <__pow5mult+0xa0>
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	b938      	cbnz	r0, 8007a2c <__pow5mult+0x9c>
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ff13 	bl	800784c <__multiply>
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	f8c0 9000 	str.w	r9, [r0]
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e7e4      	b.n	80079fa <__pow5mult+0x6a>
 8007a30:	4630      	mov	r0, r6
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	bf00      	nop
 8007a38:	0800aab0 	.word	0x0800aab0
 8007a3c:	0800a91d 	.word	0x0800a91d
 8007a40:	0800a99d 	.word	0x0800a99d

08007a44 <__lshift>:
 8007a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	4691      	mov	r9, r2
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	6849      	ldr	r1, [r1, #4]
 8007a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a56:	68a3      	ldr	r3, [r4, #8]
 8007a58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a5c:	f108 0601 	add.w	r6, r8, #1
 8007a60:	42b3      	cmp	r3, r6
 8007a62:	db0b      	blt.n	8007a7c <__lshift+0x38>
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff fd9d 	bl	80075a4 <_Balloc>
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	b948      	cbnz	r0, 8007a82 <__lshift+0x3e>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a74:	4b27      	ldr	r3, [pc, #156]	@ (8007b14 <__lshift+0xd0>)
 8007a76:	4828      	ldr	r0, [pc, #160]	@ (8007b18 <__lshift+0xd4>)
 8007a78:	f001 fa72 	bl	8008f60 <__assert_func>
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	e7ee      	b.n	8007a60 <__lshift+0x1c>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f100 0114 	add.w	r1, r0, #20
 8007a88:	f100 0210 	add.w	r2, r0, #16
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	4553      	cmp	r3, sl
 8007a90:	db33      	blt.n	8007afa <__lshift+0xb6>
 8007a92:	6920      	ldr	r0, [r4, #16]
 8007a94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a98:	f104 0314 	add.w	r3, r4, #20
 8007a9c:	f019 091f 	ands.w	r9, r9, #31
 8007aa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007aa8:	d02b      	beq.n	8007b02 <__lshift+0xbe>
 8007aaa:	468a      	mov	sl, r1
 8007aac:	2200      	movs	r2, #0
 8007aae:	f1c9 0e20 	rsb	lr, r9, #32
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ab8:	4310      	orrs	r0, r2
 8007aba:	f84a 0b04 	str.w	r0, [sl], #4
 8007abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac2:	459c      	cmp	ip, r3
 8007ac4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ac8:	d8f3      	bhi.n	8007ab2 <__lshift+0x6e>
 8007aca:	ebac 0304 	sub.w	r3, ip, r4
 8007ace:	3b15      	subs	r3, #21
 8007ad0:	f023 0303 	bic.w	r3, r3, #3
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	f104 0015 	add.w	r0, r4, #21
 8007ada:	4560      	cmp	r0, ip
 8007adc:	bf88      	it	hi
 8007ade:	2304      	movhi	r3, #4
 8007ae0:	50ca      	str	r2, [r1, r3]
 8007ae2:	b10a      	cbz	r2, 8007ae8 <__lshift+0xa4>
 8007ae4:	f108 0602 	add.w	r6, r8, #2
 8007ae8:	3e01      	subs	r6, #1
 8007aea:	4638      	mov	r0, r7
 8007aec:	4621      	mov	r1, r4
 8007aee:	612e      	str	r6, [r5, #16]
 8007af0:	f7ff fd98 	bl	8007624 <_Bfree>
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007afe:	3301      	adds	r3, #1
 8007b00:	e7c5      	b.n	8007a8e <__lshift+0x4a>
 8007b02:	3904      	subs	r1, #4
 8007b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b08:	459c      	cmp	ip, r3
 8007b0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b0e:	d8f9      	bhi.n	8007b04 <__lshift+0xc0>
 8007b10:	e7ea      	b.n	8007ae8 <__lshift+0xa4>
 8007b12:	bf00      	nop
 8007b14:	0800a98c 	.word	0x0800a98c
 8007b18:	0800a99d 	.word	0x0800a99d

08007b1c <__mcmp>:
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	690a      	ldr	r2, [r1, #16]
 8007b20:	6900      	ldr	r0, [r0, #16]
 8007b22:	b530      	push	{r4, r5, lr}
 8007b24:	1a80      	subs	r0, r0, r2
 8007b26:	d10e      	bne.n	8007b46 <__mcmp+0x2a>
 8007b28:	3314      	adds	r3, #20
 8007b2a:	3114      	adds	r1, #20
 8007b2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b3c:	4295      	cmp	r5, r2
 8007b3e:	d003      	beq.n	8007b48 <__mcmp+0x2c>
 8007b40:	d205      	bcs.n	8007b4e <__mcmp+0x32>
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	bd30      	pop	{r4, r5, pc}
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	d3f3      	bcc.n	8007b34 <__mcmp+0x18>
 8007b4c:	e7fb      	b.n	8007b46 <__mcmp+0x2a>
 8007b4e:	2001      	movs	r0, #1
 8007b50:	e7f9      	b.n	8007b46 <__mcmp+0x2a>
	...

08007b54 <__mdiff>:
 8007b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b58:	4689      	mov	r9, r1
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4648      	mov	r0, r9
 8007b60:	4614      	mov	r4, r2
 8007b62:	f7ff ffdb 	bl	8007b1c <__mcmp>
 8007b66:	1e05      	subs	r5, r0, #0
 8007b68:	d112      	bne.n	8007b90 <__mdiff+0x3c>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff fd19 	bl	80075a4 <_Balloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__mdiff+0x2e>
 8007b76:	f240 2137 	movw	r1, #567	@ 0x237
 8007b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c74 <__mdiff+0x120>)
 8007b7c:	483e      	ldr	r0, [pc, #248]	@ (8007c78 <__mdiff+0x124>)
 8007b7e:	f001 f9ef 	bl	8008f60 <__assert_func>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b88:	4610      	mov	r0, r2
 8007b8a:	b003      	add	sp, #12
 8007b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	bfbc      	itt	lt
 8007b92:	464b      	movlt	r3, r9
 8007b94:	46a1      	movlt	r9, r4
 8007b96:	4630      	mov	r0, r6
 8007b98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b9c:	bfba      	itte	lt
 8007b9e:	461c      	movlt	r4, r3
 8007ba0:	2501      	movlt	r5, #1
 8007ba2:	2500      	movge	r5, #0
 8007ba4:	f7ff fcfe 	bl	80075a4 <_Balloc>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	b918      	cbnz	r0, 8007bb4 <__mdiff+0x60>
 8007bac:	f240 2145 	movw	r1, #581	@ 0x245
 8007bb0:	4b30      	ldr	r3, [pc, #192]	@ (8007c74 <__mdiff+0x120>)
 8007bb2:	e7e3      	b.n	8007b7c <__mdiff+0x28>
 8007bb4:	f100 0b14 	add.w	fp, r0, #20
 8007bb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007bbc:	f109 0310 	add.w	r3, r9, #16
 8007bc0:	60c5      	str	r5, [r0, #12]
 8007bc2:	f04f 0c00 	mov.w	ip, #0
 8007bc6:	f109 0514 	add.w	r5, r9, #20
 8007bca:	46d9      	mov	r9, fp
 8007bcc:	6926      	ldr	r6, [r4, #16]
 8007bce:	f104 0e14 	add.w	lr, r4, #20
 8007bd2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007bd6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007be2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007be6:	b281      	uxth	r1, r0
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	fa1f f38a 	uxth.w	r3, sl
 8007bee:	1a5b      	subs	r3, r3, r1
 8007bf0:	0c00      	lsrs	r0, r0, #16
 8007bf2:	4463      	add	r3, ip
 8007bf4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007bf8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c02:	4576      	cmp	r6, lr
 8007c04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c08:	f849 3b04 	str.w	r3, [r9], #4
 8007c0c:	d8e6      	bhi.n	8007bdc <__mdiff+0x88>
 8007c0e:	1b33      	subs	r3, r6, r4
 8007c10:	3b15      	subs	r3, #21
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	3415      	adds	r4, #21
 8007c18:	3304      	adds	r3, #4
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	bf38      	it	cc
 8007c1e:	2304      	movcc	r3, #4
 8007c20:	441d      	add	r5, r3
 8007c22:	445b      	add	r3, fp
 8007c24:	461e      	mov	r6, r3
 8007c26:	462c      	mov	r4, r5
 8007c28:	4544      	cmp	r4, r8
 8007c2a:	d30e      	bcc.n	8007c4a <__mdiff+0xf6>
 8007c2c:	f108 0103 	add.w	r1, r8, #3
 8007c30:	1b49      	subs	r1, r1, r5
 8007c32:	f021 0103 	bic.w	r1, r1, #3
 8007c36:	3d03      	subs	r5, #3
 8007c38:	45a8      	cmp	r8, r5
 8007c3a:	bf38      	it	cc
 8007c3c:	2100      	movcc	r1, #0
 8007c3e:	440b      	add	r3, r1
 8007c40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c44:	b199      	cbz	r1, 8007c6e <__mdiff+0x11a>
 8007c46:	6117      	str	r7, [r2, #16]
 8007c48:	e79e      	b.n	8007b88 <__mdiff+0x34>
 8007c4a:	46e6      	mov	lr, ip
 8007c4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c50:	fa1f fc81 	uxth.w	ip, r1
 8007c54:	44f4      	add	ip, lr
 8007c56:	0c08      	lsrs	r0, r1, #16
 8007c58:	4471      	add	r1, lr
 8007c5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c5e:	b289      	uxth	r1, r1
 8007c60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c68:	f846 1b04 	str.w	r1, [r6], #4
 8007c6c:	e7dc      	b.n	8007c28 <__mdiff+0xd4>
 8007c6e:	3f01      	subs	r7, #1
 8007c70:	e7e6      	b.n	8007c40 <__mdiff+0xec>
 8007c72:	bf00      	nop
 8007c74:	0800a98c 	.word	0x0800a98c
 8007c78:	0800a99d 	.word	0x0800a99d

08007c7c <__ulp>:
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb8 <__ulp+0x3c>)
 8007c7e:	400b      	ands	r3, r1
 8007c80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dc08      	bgt.n	8007c9a <__ulp+0x1e>
 8007c88:	425b      	negs	r3, r3
 8007c8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007c8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c92:	da04      	bge.n	8007c9e <__ulp+0x22>
 8007c94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007c98:	4113      	asrs	r3, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	e008      	b.n	8007cb0 <__ulp+0x34>
 8007c9e:	f1a2 0314 	sub.w	r3, r2, #20
 8007ca2:	2b1e      	cmp	r3, #30
 8007ca4:	bfd6      	itet	le
 8007ca6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007caa:	2201      	movgt	r2, #1
 8007cac:	40da      	lsrle	r2, r3
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	7ff00000 	.word	0x7ff00000

08007cbc <__b2d>:
 8007cbc:	6902      	ldr	r2, [r0, #16]
 8007cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc0:	f100 0614 	add.w	r6, r0, #20
 8007cc4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007cc8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007ccc:	4f1e      	ldr	r7, [pc, #120]	@ (8007d48 <__b2d+0x8c>)
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff fd5a 	bl	8007788 <__hi0bits>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f1c0 0020 	rsb	r0, r0, #32
 8007cda:	2b0a      	cmp	r3, #10
 8007cdc:	f1a2 0504 	sub.w	r5, r2, #4
 8007ce0:	6008      	str	r0, [r1, #0]
 8007ce2:	dc12      	bgt.n	8007d0a <__b2d+0x4e>
 8007ce4:	42ae      	cmp	r6, r5
 8007ce6:	bf2c      	ite	cs
 8007ce8:	2200      	movcs	r2, #0
 8007cea:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007cee:	f1c3 0c0b 	rsb	ip, r3, #11
 8007cf2:	3315      	adds	r3, #21
 8007cf4:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007cf8:	fa04 f303 	lsl.w	r3, r4, r3
 8007cfc:	fa22 f20c 	lsr.w	r2, r2, ip
 8007d00:	ea4e 0107 	orr.w	r1, lr, r7
 8007d04:	431a      	orrs	r2, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d0a:	42ae      	cmp	r6, r5
 8007d0c:	bf36      	itet	cc
 8007d0e:	f1a2 0508 	subcc.w	r5, r2, #8
 8007d12:	2200      	movcs	r2, #0
 8007d14:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007d18:	3b0b      	subs	r3, #11
 8007d1a:	d012      	beq.n	8007d42 <__b2d+0x86>
 8007d1c:	f1c3 0720 	rsb	r7, r3, #32
 8007d20:	fa22 f107 	lsr.w	r1, r2, r7
 8007d24:	409c      	lsls	r4, r3
 8007d26:	430c      	orrs	r4, r1
 8007d28:	42b5      	cmp	r5, r6
 8007d2a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007d2e:	bf94      	ite	ls
 8007d30:	2400      	movls	r4, #0
 8007d32:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007d36:	409a      	lsls	r2, r3
 8007d38:	40fc      	lsrs	r4, r7
 8007d3a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007d3e:	4322      	orrs	r2, r4
 8007d40:	e7e1      	b.n	8007d06 <__b2d+0x4a>
 8007d42:	ea44 0107 	orr.w	r1, r4, r7
 8007d46:	e7de      	b.n	8007d06 <__b2d+0x4a>
 8007d48:	3ff00000 	.word	0x3ff00000

08007d4c <__d2b>:
 8007d4c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007d50:	2101      	movs	r1, #1
 8007d52:	4690      	mov	r8, r2
 8007d54:	4699      	mov	r9, r3
 8007d56:	9e08      	ldr	r6, [sp, #32]
 8007d58:	f7ff fc24 	bl	80075a4 <_Balloc>
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	b930      	cbnz	r0, 8007d6e <__d2b+0x22>
 8007d60:	4602      	mov	r2, r0
 8007d62:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d66:	4b23      	ldr	r3, [pc, #140]	@ (8007df4 <__d2b+0xa8>)
 8007d68:	4823      	ldr	r0, [pc, #140]	@ (8007df8 <__d2b+0xac>)
 8007d6a:	f001 f8f9 	bl	8008f60 <__assert_func>
 8007d6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d76:	b10d      	cbz	r5, 8007d7c <__d2b+0x30>
 8007d78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	f1b8 0300 	subs.w	r3, r8, #0
 8007d82:	d024      	beq.n	8007dce <__d2b+0x82>
 8007d84:	4668      	mov	r0, sp
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	f7ff fd1d 	bl	80077c6 <__lo0bits>
 8007d8c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d90:	b1d8      	cbz	r0, 8007dca <__d2b+0x7e>
 8007d92:	f1c0 0320 	rsb	r3, r0, #32
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	40c2      	lsrs	r2, r0
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bf0c      	ite	eq
 8007da8:	2201      	moveq	r2, #1
 8007daa:	2202      	movne	r2, #2
 8007dac:	61a3      	str	r3, [r4, #24]
 8007dae:	6122      	str	r2, [r4, #16]
 8007db0:	b1ad      	cbz	r5, 8007dde <__d2b+0x92>
 8007db2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007db6:	4405      	add	r5, r0
 8007db8:	6035      	str	r5, [r6, #0]
 8007dba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc0:	6018      	str	r0, [r3, #0]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	b002      	add	sp, #8
 8007dc6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007dca:	6161      	str	r1, [r4, #20]
 8007dcc:	e7e9      	b.n	8007da2 <__d2b+0x56>
 8007dce:	a801      	add	r0, sp, #4
 8007dd0:	f7ff fcf9 	bl	80077c6 <__lo0bits>
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	6163      	str	r3, [r4, #20]
 8007dda:	3020      	adds	r0, #32
 8007ddc:	e7e7      	b.n	8007dae <__d2b+0x62>
 8007dde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007de2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007de6:	6030      	str	r0, [r6, #0]
 8007de8:	6918      	ldr	r0, [r3, #16]
 8007dea:	f7ff fccd 	bl	8007788 <__hi0bits>
 8007dee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007df2:	e7e4      	b.n	8007dbe <__d2b+0x72>
 8007df4:	0800a98c 	.word	0x0800a98c
 8007df8:	0800a99d 	.word	0x0800a99d

08007dfc <__ratio>:
 8007dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e00:	b085      	sub	sp, #20
 8007e02:	e9cd 1000 	strd	r1, r0, [sp]
 8007e06:	a902      	add	r1, sp, #8
 8007e08:	f7ff ff58 	bl	8007cbc <__b2d>
 8007e0c:	468b      	mov	fp, r1
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	9800      	ldr	r0, [sp, #0]
 8007e14:	a903      	add	r1, sp, #12
 8007e16:	f7ff ff51 	bl	8007cbc <__b2d>
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	4689      	mov	r9, r1
 8007e20:	6919      	ldr	r1, [r3, #16]
 8007e22:	9b00      	ldr	r3, [sp, #0]
 8007e24:	4604      	mov	r4, r0
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	4630      	mov	r0, r6
 8007e2a:	1ac9      	subs	r1, r1, r3
 8007e2c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfcd      	iteet	gt
 8007e3a:	463a      	movgt	r2, r7
 8007e3c:	462a      	movle	r2, r5
 8007e3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e42:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007e46:	bfd8      	it	le
 8007e48:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	4622      	mov	r2, r4
 8007e50:	4659      	mov	r1, fp
 8007e52:	f7f8 fc6b 	bl	800072c <__aeabi_ddiv>
 8007e56:	b005      	add	sp, #20
 8007e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e5c <__copybits>:
 8007e5c:	3901      	subs	r1, #1
 8007e5e:	b570      	push	{r4, r5, r6, lr}
 8007e60:	1149      	asrs	r1, r1, #5
 8007e62:	6914      	ldr	r4, [r2, #16]
 8007e64:	3101      	adds	r1, #1
 8007e66:	f102 0314 	add.w	r3, r2, #20
 8007e6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e72:	1f05      	subs	r5, r0, #4
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	d30c      	bcc.n	8007e92 <__copybits+0x36>
 8007e78:	1aa3      	subs	r3, r4, r2
 8007e7a:	3b11      	subs	r3, #17
 8007e7c:	f023 0303 	bic.w	r3, r3, #3
 8007e80:	3211      	adds	r2, #17
 8007e82:	42a2      	cmp	r2, r4
 8007e84:	bf88      	it	hi
 8007e86:	2300      	movhi	r3, #0
 8007e88:	4418      	add	r0, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4288      	cmp	r0, r1
 8007e8e:	d305      	bcc.n	8007e9c <__copybits+0x40>
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e96:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e9a:	e7eb      	b.n	8007e74 <__copybits+0x18>
 8007e9c:	f840 3b04 	str.w	r3, [r0], #4
 8007ea0:	e7f4      	b.n	8007e8c <__copybits+0x30>

08007ea2 <__any_on>:
 8007ea2:	f100 0214 	add.w	r2, r0, #20
 8007ea6:	6900      	ldr	r0, [r0, #16]
 8007ea8:	114b      	asrs	r3, r1, #5
 8007eaa:	4298      	cmp	r0, r3
 8007eac:	b510      	push	{r4, lr}
 8007eae:	db11      	blt.n	8007ed4 <__any_on+0x32>
 8007eb0:	dd0a      	ble.n	8007ec8 <__any_on+0x26>
 8007eb2:	f011 011f 	ands.w	r1, r1, #31
 8007eb6:	d007      	beq.n	8007ec8 <__any_on+0x26>
 8007eb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ebc:	fa24 f001 	lsr.w	r0, r4, r1
 8007ec0:	fa00 f101 	lsl.w	r1, r0, r1
 8007ec4:	428c      	cmp	r4, r1
 8007ec6:	d10b      	bne.n	8007ee0 <__any_on+0x3e>
 8007ec8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d803      	bhi.n	8007ed8 <__any_on+0x36>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	bd10      	pop	{r4, pc}
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	e7f7      	b.n	8007ec8 <__any_on+0x26>
 8007ed8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d0f5      	beq.n	8007ecc <__any_on+0x2a>
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	e7f6      	b.n	8007ed2 <__any_on+0x30>

08007ee4 <sulp>:
 8007ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	460f      	mov	r7, r1
 8007eea:	4690      	mov	r8, r2
 8007eec:	f7ff fec6 	bl	8007c7c <__ulp>
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	460d      	mov	r5, r1
 8007ef4:	f1b8 0f00 	cmp.w	r8, #0
 8007ef8:	d011      	beq.n	8007f1e <sulp+0x3a>
 8007efa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007efe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dd0b      	ble.n	8007f1e <sulp+0x3a>
 8007f06:	2400      	movs	r4, #0
 8007f08:	051b      	lsls	r3, r3, #20
 8007f0a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007f0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007f12:	4622      	mov	r2, r4
 8007f14:	462b      	mov	r3, r5
 8007f16:	f7f8 fadf 	bl	80004d8 <__aeabi_dmul>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007f28 <_strtod_l>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	b09f      	sub	sp, #124	@ 0x7c
 8007f2e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f30:	2200      	movs	r2, #0
 8007f32:	460c      	mov	r4, r1
 8007f34:	921a      	str	r2, [sp, #104]	@ 0x68
 8007f36:	f04f 0a00 	mov.w	sl, #0
 8007f3a:	f04f 0b00 	mov.w	fp, #0
 8007f3e:	460a      	mov	r2, r1
 8007f40:	9005      	str	r0, [sp, #20]
 8007f42:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f44:	7811      	ldrb	r1, [r2, #0]
 8007f46:	292b      	cmp	r1, #43	@ 0x2b
 8007f48:	d048      	beq.n	8007fdc <_strtod_l+0xb4>
 8007f4a:	d836      	bhi.n	8007fba <_strtod_l+0x92>
 8007f4c:	290d      	cmp	r1, #13
 8007f4e:	d830      	bhi.n	8007fb2 <_strtod_l+0x8a>
 8007f50:	2908      	cmp	r1, #8
 8007f52:	d830      	bhi.n	8007fb6 <_strtod_l+0x8e>
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d039      	beq.n	8007fcc <_strtod_l+0xa4>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007f5e:	782a      	ldrb	r2, [r5, #0]
 8007f60:	2a30      	cmp	r2, #48	@ 0x30
 8007f62:	f040 80b0 	bne.w	80080c6 <_strtod_l+0x19e>
 8007f66:	786a      	ldrb	r2, [r5, #1]
 8007f68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f6c:	2a58      	cmp	r2, #88	@ 0x58
 8007f6e:	d16c      	bne.n	800804a <_strtod_l+0x122>
 8007f70:	9302      	str	r3, [sp, #8]
 8007f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f74:	4a8f      	ldr	r2, [pc, #572]	@ (80081b4 <_strtod_l+0x28c>)
 8007f76:	9301      	str	r3, [sp, #4]
 8007f78:	ab1a      	add	r3, sp, #104	@ 0x68
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	9805      	ldr	r0, [sp, #20]
 8007f7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f80:	a919      	add	r1, sp, #100	@ 0x64
 8007f82:	f001 f887 	bl	8009094 <__gethex>
 8007f86:	f010 060f 	ands.w	r6, r0, #15
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	d005      	beq.n	8007f9a <_strtod_l+0x72>
 8007f8e:	2e06      	cmp	r6, #6
 8007f90:	d126      	bne.n	8007fe0 <_strtod_l+0xb8>
 8007f92:	2300      	movs	r3, #0
 8007f94:	3501      	adds	r5, #1
 8007f96:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f98:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 8582 	bne.w	8008aa6 <_strtod_l+0xb7e>
 8007fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fa4:	b1bb      	cbz	r3, 8007fd6 <_strtod_l+0xae>
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007fac:	b01f      	add	sp, #124	@ 0x7c
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	2920      	cmp	r1, #32
 8007fb4:	d1d0      	bne.n	8007f58 <_strtod_l+0x30>
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	e7c3      	b.n	8007f42 <_strtod_l+0x1a>
 8007fba:	292d      	cmp	r1, #45	@ 0x2d
 8007fbc:	d1cc      	bne.n	8007f58 <_strtod_l+0x30>
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	910e      	str	r1, [sp, #56]	@ 0x38
 8007fc2:	1c51      	adds	r1, r2, #1
 8007fc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007fc6:	7852      	ldrb	r2, [r2, #1]
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	d1c7      	bne.n	8007f5c <_strtod_l+0x34>
 8007fcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fce:	9419      	str	r4, [sp, #100]	@ 0x64
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8566 	bne.w	8008aa2 <_strtod_l+0xb7a>
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	4659      	mov	r1, fp
 8007fda:	e7e7      	b.n	8007fac <_strtod_l+0x84>
 8007fdc:	2100      	movs	r1, #0
 8007fde:	e7ef      	b.n	8007fc0 <_strtod_l+0x98>
 8007fe0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007fe2:	b13a      	cbz	r2, 8007ff4 <_strtod_l+0xcc>
 8007fe4:	2135      	movs	r1, #53	@ 0x35
 8007fe6:	a81c      	add	r0, sp, #112	@ 0x70
 8007fe8:	f7ff ff38 	bl	8007e5c <__copybits>
 8007fec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fee:	9805      	ldr	r0, [sp, #20]
 8007ff0:	f7ff fb18 	bl	8007624 <_Bfree>
 8007ff4:	3e01      	subs	r6, #1
 8007ff6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007ff8:	2e04      	cmp	r6, #4
 8007ffa:	d806      	bhi.n	800800a <_strtod_l+0xe2>
 8007ffc:	e8df f006 	tbb	[pc, r6]
 8008000:	201d0314 	.word	0x201d0314
 8008004:	14          	.byte	0x14
 8008005:	00          	.byte	0x00
 8008006:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800800a:	05e1      	lsls	r1, r4, #23
 800800c:	bf48      	it	mi
 800800e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008012:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008016:	0d1b      	lsrs	r3, r3, #20
 8008018:	051b      	lsls	r3, r3, #20
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1bd      	bne.n	8007f9a <_strtod_l+0x72>
 800801e:	f7fe fb27 	bl	8006670 <__errno>
 8008022:	2322      	movs	r3, #34	@ 0x22
 8008024:	6003      	str	r3, [r0, #0]
 8008026:	e7b8      	b.n	8007f9a <_strtod_l+0x72>
 8008028:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800802c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008030:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008034:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008038:	e7e7      	b.n	800800a <_strtod_l+0xe2>
 800803a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80081b8 <_strtod_l+0x290>
 800803e:	e7e4      	b.n	800800a <_strtod_l+0xe2>
 8008040:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008044:	f04f 3aff 	mov.w	sl, #4294967295
 8008048:	e7df      	b.n	800800a <_strtod_l+0xe2>
 800804a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b30      	cmp	r3, #48	@ 0x30
 8008054:	d0f9      	beq.n	800804a <_strtod_l+0x122>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d09f      	beq.n	8007f9a <_strtod_l+0x72>
 800805a:	2301      	movs	r3, #1
 800805c:	2700      	movs	r7, #0
 800805e:	220a      	movs	r2, #10
 8008060:	46b9      	mov	r9, r7
 8008062:	9308      	str	r3, [sp, #32]
 8008064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008066:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008068:	930c      	str	r3, [sp, #48]	@ 0x30
 800806a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800806c:	7805      	ldrb	r5, [r0, #0]
 800806e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008072:	b2d9      	uxtb	r1, r3
 8008074:	2909      	cmp	r1, #9
 8008076:	d928      	bls.n	80080ca <_strtod_l+0x1a2>
 8008078:	2201      	movs	r2, #1
 800807a:	4950      	ldr	r1, [pc, #320]	@ (80081bc <_strtod_l+0x294>)
 800807c:	f7fe fa9c 	bl	80065b8 <strncmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	d032      	beq.n	80080ea <_strtod_l+0x1c2>
 8008084:	2000      	movs	r0, #0
 8008086:	462a      	mov	r2, r5
 8008088:	4603      	mov	r3, r0
 800808a:	464d      	mov	r5, r9
 800808c:	900a      	str	r0, [sp, #40]	@ 0x28
 800808e:	2a65      	cmp	r2, #101	@ 0x65
 8008090:	d001      	beq.n	8008096 <_strtod_l+0x16e>
 8008092:	2a45      	cmp	r2, #69	@ 0x45
 8008094:	d114      	bne.n	80080c0 <_strtod_l+0x198>
 8008096:	b91d      	cbnz	r5, 80080a0 <_strtod_l+0x178>
 8008098:	9a08      	ldr	r2, [sp, #32]
 800809a:	4302      	orrs	r2, r0
 800809c:	d096      	beq.n	8007fcc <_strtod_l+0xa4>
 800809e:	2500      	movs	r5, #0
 80080a0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80080a2:	1c62      	adds	r2, r4, #1
 80080a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80080a6:	7862      	ldrb	r2, [r4, #1]
 80080a8:	2a2b      	cmp	r2, #43	@ 0x2b
 80080aa:	d07a      	beq.n	80081a2 <_strtod_l+0x27a>
 80080ac:	2a2d      	cmp	r2, #45	@ 0x2d
 80080ae:	d07e      	beq.n	80081ae <_strtod_l+0x286>
 80080b0:	f04f 0c00 	mov.w	ip, #0
 80080b4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80080b8:	2909      	cmp	r1, #9
 80080ba:	f240 8085 	bls.w	80081c8 <_strtod_l+0x2a0>
 80080be:	9419      	str	r4, [sp, #100]	@ 0x64
 80080c0:	f04f 0800 	mov.w	r8, #0
 80080c4:	e0a5      	b.n	8008212 <_strtod_l+0x2ea>
 80080c6:	2300      	movs	r3, #0
 80080c8:	e7c8      	b.n	800805c <_strtod_l+0x134>
 80080ca:	f1b9 0f08 	cmp.w	r9, #8
 80080ce:	bfd8      	it	le
 80080d0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80080d2:	f100 0001 	add.w	r0, r0, #1
 80080d6:	bfd6      	itet	le
 80080d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80080dc:	fb02 3707 	mlagt	r7, r2, r7, r3
 80080e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80080e2:	f109 0901 	add.w	r9, r9, #1
 80080e6:	9019      	str	r0, [sp, #100]	@ 0x64
 80080e8:	e7bf      	b.n	800806a <_strtod_l+0x142>
 80080ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80080f0:	785a      	ldrb	r2, [r3, #1]
 80080f2:	f1b9 0f00 	cmp.w	r9, #0
 80080f6:	d03b      	beq.n	8008170 <_strtod_l+0x248>
 80080f8:	464d      	mov	r5, r9
 80080fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80080fc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008100:	2b09      	cmp	r3, #9
 8008102:	d912      	bls.n	800812a <_strtod_l+0x202>
 8008104:	2301      	movs	r3, #1
 8008106:	e7c2      	b.n	800808e <_strtod_l+0x166>
 8008108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800810a:	3001      	adds	r0, #1
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008110:	785a      	ldrb	r2, [r3, #1]
 8008112:	2a30      	cmp	r2, #48	@ 0x30
 8008114:	d0f8      	beq.n	8008108 <_strtod_l+0x1e0>
 8008116:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800811a:	2b08      	cmp	r3, #8
 800811c:	f200 84c8 	bhi.w	8008ab0 <_strtod_l+0xb88>
 8008120:	900a      	str	r0, [sp, #40]	@ 0x28
 8008122:	2000      	movs	r0, #0
 8008124:	4605      	mov	r5, r0
 8008126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008128:	930c      	str	r3, [sp, #48]	@ 0x30
 800812a:	3a30      	subs	r2, #48	@ 0x30
 800812c:	f100 0301 	add.w	r3, r0, #1
 8008130:	d018      	beq.n	8008164 <_strtod_l+0x23c>
 8008132:	462e      	mov	r6, r5
 8008134:	f04f 0e0a 	mov.w	lr, #10
 8008138:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800813a:	4419      	add	r1, r3
 800813c:	910a      	str	r1, [sp, #40]	@ 0x28
 800813e:	1c71      	adds	r1, r6, #1
 8008140:	eba1 0c05 	sub.w	ip, r1, r5
 8008144:	4563      	cmp	r3, ip
 8008146:	dc15      	bgt.n	8008174 <_strtod_l+0x24c>
 8008148:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800814c:	182b      	adds	r3, r5, r0
 800814e:	2b08      	cmp	r3, #8
 8008150:	f105 0501 	add.w	r5, r5, #1
 8008154:	4405      	add	r5, r0
 8008156:	dc1a      	bgt.n	800818e <_strtod_l+0x266>
 8008158:	230a      	movs	r3, #10
 800815a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800815c:	fb03 2301 	mla	r3, r3, r1, r2
 8008160:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008162:	2300      	movs	r3, #0
 8008164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008166:	4618      	mov	r0, r3
 8008168:	1c51      	adds	r1, r2, #1
 800816a:	9119      	str	r1, [sp, #100]	@ 0x64
 800816c:	7852      	ldrb	r2, [r2, #1]
 800816e:	e7c5      	b.n	80080fc <_strtod_l+0x1d4>
 8008170:	4648      	mov	r0, r9
 8008172:	e7ce      	b.n	8008112 <_strtod_l+0x1ea>
 8008174:	2e08      	cmp	r6, #8
 8008176:	dc05      	bgt.n	8008184 <_strtod_l+0x25c>
 8008178:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800817a:	fb0e f606 	mul.w	r6, lr, r6
 800817e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008180:	460e      	mov	r6, r1
 8008182:	e7dc      	b.n	800813e <_strtod_l+0x216>
 8008184:	2910      	cmp	r1, #16
 8008186:	bfd8      	it	le
 8008188:	fb0e f707 	mulle.w	r7, lr, r7
 800818c:	e7f8      	b.n	8008180 <_strtod_l+0x258>
 800818e:	2b0f      	cmp	r3, #15
 8008190:	bfdc      	itt	le
 8008192:	230a      	movle	r3, #10
 8008194:	fb03 2707 	mlale	r7, r3, r7, r2
 8008198:	e7e3      	b.n	8008162 <_strtod_l+0x23a>
 800819a:	2300      	movs	r3, #0
 800819c:	930a      	str	r3, [sp, #40]	@ 0x28
 800819e:	2301      	movs	r3, #1
 80081a0:	e77a      	b.n	8008098 <_strtod_l+0x170>
 80081a2:	f04f 0c00 	mov.w	ip, #0
 80081a6:	1ca2      	adds	r2, r4, #2
 80081a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80081aa:	78a2      	ldrb	r2, [r4, #2]
 80081ac:	e782      	b.n	80080b4 <_strtod_l+0x18c>
 80081ae:	f04f 0c01 	mov.w	ip, #1
 80081b2:	e7f8      	b.n	80081a6 <_strtod_l+0x27e>
 80081b4:	0800abc4 	.word	0x0800abc4
 80081b8:	7ff00000 	.word	0x7ff00000
 80081bc:	0800a9f6 	.word	0x0800a9f6
 80081c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081c2:	1c51      	adds	r1, r2, #1
 80081c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80081c6:	7852      	ldrb	r2, [r2, #1]
 80081c8:	2a30      	cmp	r2, #48	@ 0x30
 80081ca:	d0f9      	beq.n	80081c0 <_strtod_l+0x298>
 80081cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80081d0:	2908      	cmp	r1, #8
 80081d2:	f63f af75 	bhi.w	80080c0 <_strtod_l+0x198>
 80081d6:	f04f 080a 	mov.w	r8, #10
 80081da:	3a30      	subs	r2, #48	@ 0x30
 80081dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80081e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081e4:	1c56      	adds	r6, r2, #1
 80081e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80081e8:	7852      	ldrb	r2, [r2, #1]
 80081ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80081ee:	f1be 0f09 	cmp.w	lr, #9
 80081f2:	d939      	bls.n	8008268 <_strtod_l+0x340>
 80081f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80081f6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80081fa:	1a76      	subs	r6, r6, r1
 80081fc:	2e08      	cmp	r6, #8
 80081fe:	dc03      	bgt.n	8008208 <_strtod_l+0x2e0>
 8008200:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008202:	4588      	cmp	r8, r1
 8008204:	bfa8      	it	ge
 8008206:	4688      	movge	r8, r1
 8008208:	f1bc 0f00 	cmp.w	ip, #0
 800820c:	d001      	beq.n	8008212 <_strtod_l+0x2ea>
 800820e:	f1c8 0800 	rsb	r8, r8, #0
 8008212:	2d00      	cmp	r5, #0
 8008214:	d14e      	bne.n	80082b4 <_strtod_l+0x38c>
 8008216:	9908      	ldr	r1, [sp, #32]
 8008218:	4308      	orrs	r0, r1
 800821a:	f47f aebe 	bne.w	8007f9a <_strtod_l+0x72>
 800821e:	2b00      	cmp	r3, #0
 8008220:	f47f aed4 	bne.w	8007fcc <_strtod_l+0xa4>
 8008224:	2a69      	cmp	r2, #105	@ 0x69
 8008226:	d028      	beq.n	800827a <_strtod_l+0x352>
 8008228:	dc25      	bgt.n	8008276 <_strtod_l+0x34e>
 800822a:	2a49      	cmp	r2, #73	@ 0x49
 800822c:	d025      	beq.n	800827a <_strtod_l+0x352>
 800822e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008230:	f47f aecc 	bne.w	8007fcc <_strtod_l+0xa4>
 8008234:	4999      	ldr	r1, [pc, #612]	@ (800849c <_strtod_l+0x574>)
 8008236:	a819      	add	r0, sp, #100	@ 0x64
 8008238:	f001 f94e 	bl	80094d8 <__match>
 800823c:	2800      	cmp	r0, #0
 800823e:	f43f aec5 	beq.w	8007fcc <_strtod_l+0xa4>
 8008242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b28      	cmp	r3, #40	@ 0x28
 8008248:	d12e      	bne.n	80082a8 <_strtod_l+0x380>
 800824a:	4995      	ldr	r1, [pc, #596]	@ (80084a0 <_strtod_l+0x578>)
 800824c:	aa1c      	add	r2, sp, #112	@ 0x70
 800824e:	a819      	add	r0, sp, #100	@ 0x64
 8008250:	f001 f956 	bl	8009500 <__hexnan>
 8008254:	2805      	cmp	r0, #5
 8008256:	d127      	bne.n	80082a8 <_strtod_l+0x380>
 8008258:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800825a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800825e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008262:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008266:	e698      	b.n	8007f9a <_strtod_l+0x72>
 8008268:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800826a:	fb08 2101 	mla	r1, r8, r1, r2
 800826e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008272:	9209      	str	r2, [sp, #36]	@ 0x24
 8008274:	e7b5      	b.n	80081e2 <_strtod_l+0x2ba>
 8008276:	2a6e      	cmp	r2, #110	@ 0x6e
 8008278:	e7da      	b.n	8008230 <_strtod_l+0x308>
 800827a:	498a      	ldr	r1, [pc, #552]	@ (80084a4 <_strtod_l+0x57c>)
 800827c:	a819      	add	r0, sp, #100	@ 0x64
 800827e:	f001 f92b 	bl	80094d8 <__match>
 8008282:	2800      	cmp	r0, #0
 8008284:	f43f aea2 	beq.w	8007fcc <_strtod_l+0xa4>
 8008288:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800828a:	4987      	ldr	r1, [pc, #540]	@ (80084a8 <_strtod_l+0x580>)
 800828c:	3b01      	subs	r3, #1
 800828e:	a819      	add	r0, sp, #100	@ 0x64
 8008290:	9319      	str	r3, [sp, #100]	@ 0x64
 8008292:	f001 f921 	bl	80094d8 <__match>
 8008296:	b910      	cbnz	r0, 800829e <_strtod_l+0x376>
 8008298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800829a:	3301      	adds	r3, #1
 800829c:	9319      	str	r3, [sp, #100]	@ 0x64
 800829e:	f04f 0a00 	mov.w	sl, #0
 80082a2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80084ac <_strtod_l+0x584>
 80082a6:	e678      	b.n	8007f9a <_strtod_l+0x72>
 80082a8:	4881      	ldr	r0, [pc, #516]	@ (80084b0 <_strtod_l+0x588>)
 80082aa:	f000 fe53 	bl	8008f54 <nan>
 80082ae:	4682      	mov	sl, r0
 80082b0:	468b      	mov	fp, r1
 80082b2:	e672      	b.n	8007f9a <_strtod_l+0x72>
 80082b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	bf08      	it	eq
 80082bc:	46a9      	moveq	r9, r5
 80082be:	eba8 0303 	sub.w	r3, r8, r3
 80082c2:	2d10      	cmp	r5, #16
 80082c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80082c6:	462c      	mov	r4, r5
 80082c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ca:	bfa8      	it	ge
 80082cc:	2410      	movge	r4, #16
 80082ce:	f7f8 f889 	bl	80003e4 <__aeabi_ui2d>
 80082d2:	2d09      	cmp	r5, #9
 80082d4:	4682      	mov	sl, r0
 80082d6:	468b      	mov	fp, r1
 80082d8:	dc11      	bgt.n	80082fe <_strtod_l+0x3d6>
 80082da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f43f ae5c 	beq.w	8007f9a <_strtod_l+0x72>
 80082e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e4:	dd76      	ble.n	80083d4 <_strtod_l+0x4ac>
 80082e6:	2b16      	cmp	r3, #22
 80082e8:	dc5d      	bgt.n	80083a6 <_strtod_l+0x47e>
 80082ea:	4972      	ldr	r1, [pc, #456]	@ (80084b4 <_strtod_l+0x58c>)
 80082ec:	4652      	mov	r2, sl
 80082ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082f2:	465b      	mov	r3, fp
 80082f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f8:	f7f8 f8ee 	bl	80004d8 <__aeabi_dmul>
 80082fc:	e7d7      	b.n	80082ae <_strtod_l+0x386>
 80082fe:	4b6d      	ldr	r3, [pc, #436]	@ (80084b4 <_strtod_l+0x58c>)
 8008300:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008304:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008308:	f7f8 f8e6 	bl	80004d8 <__aeabi_dmul>
 800830c:	4682      	mov	sl, r0
 800830e:	4638      	mov	r0, r7
 8008310:	468b      	mov	fp, r1
 8008312:	f7f8 f867 	bl	80003e4 <__aeabi_ui2d>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f7 ff25 	bl	800016c <__adddf3>
 8008322:	2d0f      	cmp	r5, #15
 8008324:	4682      	mov	sl, r0
 8008326:	468b      	mov	fp, r1
 8008328:	ddd7      	ble.n	80082da <_strtod_l+0x3b2>
 800832a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832c:	1b2c      	subs	r4, r5, r4
 800832e:	441c      	add	r4, r3
 8008330:	2c00      	cmp	r4, #0
 8008332:	f340 8093 	ble.w	800845c <_strtod_l+0x534>
 8008336:	f014 030f 	ands.w	r3, r4, #15
 800833a:	d00a      	beq.n	8008352 <_strtod_l+0x42a>
 800833c:	495d      	ldr	r1, [pc, #372]	@ (80084b4 <_strtod_l+0x58c>)
 800833e:	4652      	mov	r2, sl
 8008340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008348:	465b      	mov	r3, fp
 800834a:	f7f8 f8c5 	bl	80004d8 <__aeabi_dmul>
 800834e:	4682      	mov	sl, r0
 8008350:	468b      	mov	fp, r1
 8008352:	f034 040f 	bics.w	r4, r4, #15
 8008356:	d073      	beq.n	8008440 <_strtod_l+0x518>
 8008358:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800835c:	dd49      	ble.n	80083f2 <_strtod_l+0x4ca>
 800835e:	2400      	movs	r4, #0
 8008360:	46a0      	mov	r8, r4
 8008362:	46a1      	mov	r9, r4
 8008364:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008366:	2322      	movs	r3, #34	@ 0x22
 8008368:	f04f 0a00 	mov.w	sl, #0
 800836c:	9a05      	ldr	r2, [sp, #20]
 800836e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80084ac <_strtod_l+0x584>
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008376:	2b00      	cmp	r3, #0
 8008378:	f43f ae0f 	beq.w	8007f9a <_strtod_l+0x72>
 800837c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800837e:	9805      	ldr	r0, [sp, #20]
 8008380:	f7ff f950 	bl	8007624 <_Bfree>
 8008384:	4649      	mov	r1, r9
 8008386:	9805      	ldr	r0, [sp, #20]
 8008388:	f7ff f94c 	bl	8007624 <_Bfree>
 800838c:	4641      	mov	r1, r8
 800838e:	9805      	ldr	r0, [sp, #20]
 8008390:	f7ff f948 	bl	8007624 <_Bfree>
 8008394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008396:	9805      	ldr	r0, [sp, #20]
 8008398:	f7ff f944 	bl	8007624 <_Bfree>
 800839c:	4621      	mov	r1, r4
 800839e:	9805      	ldr	r0, [sp, #20]
 80083a0:	f7ff f940 	bl	8007624 <_Bfree>
 80083a4:	e5f9      	b.n	8007f9a <_strtod_l+0x72>
 80083a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80083ac:	4293      	cmp	r3, r2
 80083ae:	dbbc      	blt.n	800832a <_strtod_l+0x402>
 80083b0:	4c40      	ldr	r4, [pc, #256]	@ (80084b4 <_strtod_l+0x58c>)
 80083b2:	f1c5 050f 	rsb	r5, r5, #15
 80083b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083ba:	4652      	mov	r2, sl
 80083bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c0:	465b      	mov	r3, fp
 80083c2:	f7f8 f889 	bl	80004d8 <__aeabi_dmul>
 80083c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c8:	1b5d      	subs	r5, r3, r5
 80083ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083d2:	e791      	b.n	80082f8 <_strtod_l+0x3d0>
 80083d4:	3316      	adds	r3, #22
 80083d6:	dba8      	blt.n	800832a <_strtod_l+0x402>
 80083d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083da:	4650      	mov	r0, sl
 80083dc:	eba3 0808 	sub.w	r8, r3, r8
 80083e0:	4b34      	ldr	r3, [pc, #208]	@ (80084b4 <_strtod_l+0x58c>)
 80083e2:	4659      	mov	r1, fp
 80083e4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80083e8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80083ec:	f7f8 f99e 	bl	800072c <__aeabi_ddiv>
 80083f0:	e75d      	b.n	80082ae <_strtod_l+0x386>
 80083f2:	2300      	movs	r3, #0
 80083f4:	4650      	mov	r0, sl
 80083f6:	4659      	mov	r1, fp
 80083f8:	461e      	mov	r6, r3
 80083fa:	4f2f      	ldr	r7, [pc, #188]	@ (80084b8 <_strtod_l+0x590>)
 80083fc:	1124      	asrs	r4, r4, #4
 80083fe:	2c01      	cmp	r4, #1
 8008400:	dc21      	bgt.n	8008446 <_strtod_l+0x51e>
 8008402:	b10b      	cbz	r3, 8008408 <_strtod_l+0x4e0>
 8008404:	4682      	mov	sl, r0
 8008406:	468b      	mov	fp, r1
 8008408:	492b      	ldr	r1, [pc, #172]	@ (80084b8 <_strtod_l+0x590>)
 800840a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800840e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008412:	4652      	mov	r2, sl
 8008414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008418:	465b      	mov	r3, fp
 800841a:	f7f8 f85d 	bl	80004d8 <__aeabi_dmul>
 800841e:	4b23      	ldr	r3, [pc, #140]	@ (80084ac <_strtod_l+0x584>)
 8008420:	460a      	mov	r2, r1
 8008422:	400b      	ands	r3, r1
 8008424:	4925      	ldr	r1, [pc, #148]	@ (80084bc <_strtod_l+0x594>)
 8008426:	4682      	mov	sl, r0
 8008428:	428b      	cmp	r3, r1
 800842a:	d898      	bhi.n	800835e <_strtod_l+0x436>
 800842c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008430:	428b      	cmp	r3, r1
 8008432:	bf86      	itte	hi
 8008434:	f04f 3aff 	movhi.w	sl, #4294967295
 8008438:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80084c0 <_strtod_l+0x598>
 800843c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008440:	2300      	movs	r3, #0
 8008442:	9308      	str	r3, [sp, #32]
 8008444:	e076      	b.n	8008534 <_strtod_l+0x60c>
 8008446:	07e2      	lsls	r2, r4, #31
 8008448:	d504      	bpl.n	8008454 <_strtod_l+0x52c>
 800844a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844e:	f7f8 f843 	bl	80004d8 <__aeabi_dmul>
 8008452:	2301      	movs	r3, #1
 8008454:	3601      	adds	r6, #1
 8008456:	1064      	asrs	r4, r4, #1
 8008458:	3708      	adds	r7, #8
 800845a:	e7d0      	b.n	80083fe <_strtod_l+0x4d6>
 800845c:	d0f0      	beq.n	8008440 <_strtod_l+0x518>
 800845e:	4264      	negs	r4, r4
 8008460:	f014 020f 	ands.w	r2, r4, #15
 8008464:	d00a      	beq.n	800847c <_strtod_l+0x554>
 8008466:	4b13      	ldr	r3, [pc, #76]	@ (80084b4 <_strtod_l+0x58c>)
 8008468:	4650      	mov	r0, sl
 800846a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800846e:	4659      	mov	r1, fp
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f7f8 f95a 	bl	800072c <__aeabi_ddiv>
 8008478:	4682      	mov	sl, r0
 800847a:	468b      	mov	fp, r1
 800847c:	1124      	asrs	r4, r4, #4
 800847e:	d0df      	beq.n	8008440 <_strtod_l+0x518>
 8008480:	2c1f      	cmp	r4, #31
 8008482:	dd1f      	ble.n	80084c4 <_strtod_l+0x59c>
 8008484:	2400      	movs	r4, #0
 8008486:	46a0      	mov	r8, r4
 8008488:	46a1      	mov	r9, r4
 800848a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800848c:	2322      	movs	r3, #34	@ 0x22
 800848e:	9a05      	ldr	r2, [sp, #20]
 8008490:	f04f 0a00 	mov.w	sl, #0
 8008494:	f04f 0b00 	mov.w	fp, #0
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	e76b      	b.n	8008374 <_strtod_l+0x44c>
 800849c:	0800a8e4 	.word	0x0800a8e4
 80084a0:	0800abb0 	.word	0x0800abb0
 80084a4:	0800a8dc 	.word	0x0800a8dc
 80084a8:	0800a913 	.word	0x0800a913
 80084ac:	7ff00000 	.word	0x7ff00000
 80084b0:	0800aa4c 	.word	0x0800aa4c
 80084b4:	0800aae8 	.word	0x0800aae8
 80084b8:	0800aac0 	.word	0x0800aac0
 80084bc:	7ca00000 	.word	0x7ca00000
 80084c0:	7fefffff 	.word	0x7fefffff
 80084c4:	f014 0310 	ands.w	r3, r4, #16
 80084c8:	bf18      	it	ne
 80084ca:	236a      	movne	r3, #106	@ 0x6a
 80084cc:	4650      	mov	r0, sl
 80084ce:	9308      	str	r3, [sp, #32]
 80084d0:	4659      	mov	r1, fp
 80084d2:	2300      	movs	r3, #0
 80084d4:	4e77      	ldr	r6, [pc, #476]	@ (80086b4 <_strtod_l+0x78c>)
 80084d6:	07e7      	lsls	r7, r4, #31
 80084d8:	d504      	bpl.n	80084e4 <_strtod_l+0x5bc>
 80084da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084de:	f7f7 fffb 	bl	80004d8 <__aeabi_dmul>
 80084e2:	2301      	movs	r3, #1
 80084e4:	1064      	asrs	r4, r4, #1
 80084e6:	f106 0608 	add.w	r6, r6, #8
 80084ea:	d1f4      	bne.n	80084d6 <_strtod_l+0x5ae>
 80084ec:	b10b      	cbz	r3, 80084f2 <_strtod_l+0x5ca>
 80084ee:	4682      	mov	sl, r0
 80084f0:	468b      	mov	fp, r1
 80084f2:	9b08      	ldr	r3, [sp, #32]
 80084f4:	b1b3      	cbz	r3, 8008524 <_strtod_l+0x5fc>
 80084f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80084fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80084fe:	2b00      	cmp	r3, #0
 8008500:	4659      	mov	r1, fp
 8008502:	dd0f      	ble.n	8008524 <_strtod_l+0x5fc>
 8008504:	2b1f      	cmp	r3, #31
 8008506:	dd58      	ble.n	80085ba <_strtod_l+0x692>
 8008508:	2b34      	cmp	r3, #52	@ 0x34
 800850a:	bfd8      	it	le
 800850c:	f04f 33ff 	movle.w	r3, #4294967295
 8008510:	f04f 0a00 	mov.w	sl, #0
 8008514:	bfcf      	iteee	gt
 8008516:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800851a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800851e:	4093      	lslle	r3, r2
 8008520:	ea03 0b01 	andle.w	fp, r3, r1
 8008524:	2200      	movs	r2, #0
 8008526:	2300      	movs	r3, #0
 8008528:	4650      	mov	r0, sl
 800852a:	4659      	mov	r1, fp
 800852c:	f7f8 fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008530:	2800      	cmp	r0, #0
 8008532:	d1a7      	bne.n	8008484 <_strtod_l+0x55c>
 8008534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008536:	464a      	mov	r2, r9
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800853c:	462b      	mov	r3, r5
 800853e:	9805      	ldr	r0, [sp, #20]
 8008540:	f7ff f8d8 	bl	80076f4 <__s2b>
 8008544:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008546:	2800      	cmp	r0, #0
 8008548:	f43f af09 	beq.w	800835e <_strtod_l+0x436>
 800854c:	2400      	movs	r4, #0
 800854e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008552:	2a00      	cmp	r2, #0
 8008554:	eba3 0308 	sub.w	r3, r3, r8
 8008558:	bfa8      	it	ge
 800855a:	2300      	movge	r3, #0
 800855c:	46a0      	mov	r8, r4
 800855e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008560:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008564:	9316      	str	r3, [sp, #88]	@ 0x58
 8008566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008568:	9805      	ldr	r0, [sp, #20]
 800856a:	6859      	ldr	r1, [r3, #4]
 800856c:	f7ff f81a 	bl	80075a4 <_Balloc>
 8008570:	4681      	mov	r9, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f aef7 	beq.w	8008366 <_strtod_l+0x43e>
 8008578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800857a:	300c      	adds	r0, #12
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	f103 010c 	add.w	r1, r3, #12
 8008582:	3202      	adds	r2, #2
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	f000 fcd7 	bl	8008f38 <memcpy>
 800858a:	ab1c      	add	r3, sp, #112	@ 0x70
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4652      	mov	r2, sl
 8008594:	465b      	mov	r3, fp
 8008596:	9805      	ldr	r0, [sp, #20]
 8008598:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800859c:	f7ff fbd6 	bl	8007d4c <__d2b>
 80085a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f43f aedf 	beq.w	8008366 <_strtod_l+0x43e>
 80085a8:	2101      	movs	r1, #1
 80085aa:	9805      	ldr	r0, [sp, #20]
 80085ac:	f7ff f938 	bl	8007820 <__i2b>
 80085b0:	4680      	mov	r8, r0
 80085b2:	b948      	cbnz	r0, 80085c8 <_strtod_l+0x6a0>
 80085b4:	f04f 0800 	mov.w	r8, #0
 80085b8:	e6d5      	b.n	8008366 <_strtod_l+0x43e>
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	fa02 f303 	lsl.w	r3, r2, r3
 80085c2:	ea03 0a0a 	and.w	sl, r3, sl
 80085c6:	e7ad      	b.n	8008524 <_strtod_l+0x5fc>
 80085c8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80085ca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	bfab      	itete	ge
 80085d0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80085d2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80085d4:	18ef      	addge	r7, r5, r3
 80085d6:	1b5e      	sublt	r6, r3, r5
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	bfa8      	it	ge
 80085dc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80085de:	eba5 0503 	sub.w	r5, r5, r3
 80085e2:	4415      	add	r5, r2
 80085e4:	4b34      	ldr	r3, [pc, #208]	@ (80086b8 <_strtod_l+0x790>)
 80085e6:	f105 35ff 	add.w	r5, r5, #4294967295
 80085ea:	bfb8      	it	lt
 80085ec:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80085ee:	429d      	cmp	r5, r3
 80085f0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80085f4:	da50      	bge.n	8008698 <_strtod_l+0x770>
 80085f6:	1b5b      	subs	r3, r3, r5
 80085f8:	2b1f      	cmp	r3, #31
 80085fa:	f04f 0101 	mov.w	r1, #1
 80085fe:	eba2 0203 	sub.w	r2, r2, r3
 8008602:	dc3d      	bgt.n	8008680 <_strtod_l+0x758>
 8008604:	fa01 f303 	lsl.w	r3, r1, r3
 8008608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800860a:	2300      	movs	r3, #0
 800860c:	9310      	str	r3, [sp, #64]	@ 0x40
 800860e:	18bd      	adds	r5, r7, r2
 8008610:	9b08      	ldr	r3, [sp, #32]
 8008612:	42af      	cmp	r7, r5
 8008614:	4416      	add	r6, r2
 8008616:	441e      	add	r6, r3
 8008618:	463b      	mov	r3, r7
 800861a:	bfa8      	it	ge
 800861c:	462b      	movge	r3, r5
 800861e:	42b3      	cmp	r3, r6
 8008620:	bfa8      	it	ge
 8008622:	4633      	movge	r3, r6
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfc2      	ittt	gt
 8008628:	1aed      	subgt	r5, r5, r3
 800862a:	1af6      	subgt	r6, r6, r3
 800862c:	1aff      	subgt	r7, r7, r3
 800862e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008630:	2b00      	cmp	r3, #0
 8008632:	dd16      	ble.n	8008662 <_strtod_l+0x73a>
 8008634:	4641      	mov	r1, r8
 8008636:	461a      	mov	r2, r3
 8008638:	9805      	ldr	r0, [sp, #20]
 800863a:	f7ff f9a9 	bl	8007990 <__pow5mult>
 800863e:	4680      	mov	r8, r0
 8008640:	2800      	cmp	r0, #0
 8008642:	d0b7      	beq.n	80085b4 <_strtod_l+0x68c>
 8008644:	4601      	mov	r1, r0
 8008646:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008648:	9805      	ldr	r0, [sp, #20]
 800864a:	f7ff f8ff 	bl	800784c <__multiply>
 800864e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008650:	2800      	cmp	r0, #0
 8008652:	f43f ae88 	beq.w	8008366 <_strtod_l+0x43e>
 8008656:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	f7fe ffe3 	bl	8007624 <_Bfree>
 800865e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008660:	931a      	str	r3, [sp, #104]	@ 0x68
 8008662:	2d00      	cmp	r5, #0
 8008664:	dc1d      	bgt.n	80086a2 <_strtod_l+0x77a>
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd27      	ble.n	80086bc <_strtod_l+0x794>
 800866c:	4649      	mov	r1, r9
 800866e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008670:	9805      	ldr	r0, [sp, #20]
 8008672:	f7ff f98d 	bl	8007990 <__pow5mult>
 8008676:	4681      	mov	r9, r0
 8008678:	bb00      	cbnz	r0, 80086bc <_strtod_l+0x794>
 800867a:	f04f 0900 	mov.w	r9, #0
 800867e:	e672      	b.n	8008366 <_strtod_l+0x43e>
 8008680:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008684:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008688:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800868c:	35e2      	adds	r5, #226	@ 0xe2
 800868e:	fa01 f305 	lsl.w	r3, r1, r5
 8008692:	9310      	str	r3, [sp, #64]	@ 0x40
 8008694:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008696:	e7ba      	b.n	800860e <_strtod_l+0x6e6>
 8008698:	2300      	movs	r3, #0
 800869a:	9310      	str	r3, [sp, #64]	@ 0x40
 800869c:	2301      	movs	r3, #1
 800869e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086a0:	e7b5      	b.n	800860e <_strtod_l+0x6e6>
 80086a2:	462a      	mov	r2, r5
 80086a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086a6:	9805      	ldr	r0, [sp, #20]
 80086a8:	f7ff f9cc 	bl	8007a44 <__lshift>
 80086ac:	901a      	str	r0, [sp, #104]	@ 0x68
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d1d9      	bne.n	8008666 <_strtod_l+0x73e>
 80086b2:	e658      	b.n	8008366 <_strtod_l+0x43e>
 80086b4:	0800abd8 	.word	0x0800abd8
 80086b8:	fffffc02 	.word	0xfffffc02
 80086bc:	2e00      	cmp	r6, #0
 80086be:	dd07      	ble.n	80086d0 <_strtod_l+0x7a8>
 80086c0:	4649      	mov	r1, r9
 80086c2:	4632      	mov	r2, r6
 80086c4:	9805      	ldr	r0, [sp, #20]
 80086c6:	f7ff f9bd 	bl	8007a44 <__lshift>
 80086ca:	4681      	mov	r9, r0
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d0d4      	beq.n	800867a <_strtod_l+0x752>
 80086d0:	2f00      	cmp	r7, #0
 80086d2:	dd08      	ble.n	80086e6 <_strtod_l+0x7be>
 80086d4:	4641      	mov	r1, r8
 80086d6:	463a      	mov	r2, r7
 80086d8:	9805      	ldr	r0, [sp, #20]
 80086da:	f7ff f9b3 	bl	8007a44 <__lshift>
 80086de:	4680      	mov	r8, r0
 80086e0:	2800      	cmp	r0, #0
 80086e2:	f43f ae40 	beq.w	8008366 <_strtod_l+0x43e>
 80086e6:	464a      	mov	r2, r9
 80086e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086ea:	9805      	ldr	r0, [sp, #20]
 80086ec:	f7ff fa32 	bl	8007b54 <__mdiff>
 80086f0:	4604      	mov	r4, r0
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f43f ae37 	beq.w	8008366 <_strtod_l+0x43e>
 80086f8:	68c3      	ldr	r3, [r0, #12]
 80086fa:	4641      	mov	r1, r8
 80086fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086fe:	2300      	movs	r3, #0
 8008700:	60c3      	str	r3, [r0, #12]
 8008702:	f7ff fa0b 	bl	8007b1c <__mcmp>
 8008706:	2800      	cmp	r0, #0
 8008708:	da3d      	bge.n	8008786 <_strtod_l+0x85e>
 800870a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870c:	ea53 030a 	orrs.w	r3, r3, sl
 8008710:	d163      	bne.n	80087da <_strtod_l+0x8b2>
 8008712:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008716:	2b00      	cmp	r3, #0
 8008718:	d15f      	bne.n	80087da <_strtod_l+0x8b2>
 800871a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800871e:	0d1b      	lsrs	r3, r3, #20
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008726:	d958      	bls.n	80087da <_strtod_l+0x8b2>
 8008728:	6963      	ldr	r3, [r4, #20]
 800872a:	b913      	cbnz	r3, 8008732 <_strtod_l+0x80a>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	2b01      	cmp	r3, #1
 8008730:	dd53      	ble.n	80087da <_strtod_l+0x8b2>
 8008732:	4621      	mov	r1, r4
 8008734:	2201      	movs	r2, #1
 8008736:	9805      	ldr	r0, [sp, #20]
 8008738:	f7ff f984 	bl	8007a44 <__lshift>
 800873c:	4641      	mov	r1, r8
 800873e:	4604      	mov	r4, r0
 8008740:	f7ff f9ec 	bl	8007b1c <__mcmp>
 8008744:	2800      	cmp	r0, #0
 8008746:	dd48      	ble.n	80087da <_strtod_l+0x8b2>
 8008748:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800874c:	9a08      	ldr	r2, [sp, #32]
 800874e:	0d1b      	lsrs	r3, r3, #20
 8008750:	051b      	lsls	r3, r3, #20
 8008752:	2a00      	cmp	r2, #0
 8008754:	d062      	beq.n	800881c <_strtod_l+0x8f4>
 8008756:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800875a:	d85f      	bhi.n	800881c <_strtod_l+0x8f4>
 800875c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008760:	f67f ae94 	bls.w	800848c <_strtod_l+0x564>
 8008764:	4650      	mov	r0, sl
 8008766:	4659      	mov	r1, fp
 8008768:	4ba3      	ldr	r3, [pc, #652]	@ (80089f8 <_strtod_l+0xad0>)
 800876a:	2200      	movs	r2, #0
 800876c:	f7f7 feb4 	bl	80004d8 <__aeabi_dmul>
 8008770:	4ba2      	ldr	r3, [pc, #648]	@ (80089fc <_strtod_l+0xad4>)
 8008772:	4682      	mov	sl, r0
 8008774:	400b      	ands	r3, r1
 8008776:	468b      	mov	fp, r1
 8008778:	2b00      	cmp	r3, #0
 800877a:	f47f adff 	bne.w	800837c <_strtod_l+0x454>
 800877e:	2322      	movs	r3, #34	@ 0x22
 8008780:	9a05      	ldr	r2, [sp, #20]
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	e5fa      	b.n	800837c <_strtod_l+0x454>
 8008786:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800878a:	d165      	bne.n	8008858 <_strtod_l+0x930>
 800878c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800878e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008792:	b35a      	cbz	r2, 80087ec <_strtod_l+0x8c4>
 8008794:	4a9a      	ldr	r2, [pc, #616]	@ (8008a00 <_strtod_l+0xad8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d12b      	bne.n	80087f2 <_strtod_l+0x8ca>
 800879a:	9b08      	ldr	r3, [sp, #32]
 800879c:	4651      	mov	r1, sl
 800879e:	b303      	cbz	r3, 80087e2 <_strtod_l+0x8ba>
 80087a0:	465a      	mov	r2, fp
 80087a2:	4b96      	ldr	r3, [pc, #600]	@ (80089fc <_strtod_l+0xad4>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295
 80087ae:	d81b      	bhi.n	80087e8 <_strtod_l+0x8c0>
 80087b0:	0d1b      	lsrs	r3, r3, #20
 80087b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	4299      	cmp	r1, r3
 80087bc:	d119      	bne.n	80087f2 <_strtod_l+0x8ca>
 80087be:	4b91      	ldr	r3, [pc, #580]	@ (8008a04 <_strtod_l+0xadc>)
 80087c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d102      	bne.n	80087cc <_strtod_l+0x8a4>
 80087c6:	3101      	adds	r1, #1
 80087c8:	f43f adcd 	beq.w	8008366 <_strtod_l+0x43e>
 80087cc:	f04f 0a00 	mov.w	sl, #0
 80087d0:	4b8a      	ldr	r3, [pc, #552]	@ (80089fc <_strtod_l+0xad4>)
 80087d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087d4:	401a      	ands	r2, r3
 80087d6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1c1      	bne.n	8008764 <_strtod_l+0x83c>
 80087e0:	e5cc      	b.n	800837c <_strtod_l+0x454>
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	e7e8      	b.n	80087ba <_strtod_l+0x892>
 80087e8:	4613      	mov	r3, r2
 80087ea:	e7e6      	b.n	80087ba <_strtod_l+0x892>
 80087ec:	ea53 030a 	orrs.w	r3, r3, sl
 80087f0:	d0aa      	beq.n	8008748 <_strtod_l+0x820>
 80087f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087f4:	b1db      	cbz	r3, 800882e <_strtod_l+0x906>
 80087f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087f8:	4213      	tst	r3, r2
 80087fa:	d0ee      	beq.n	80087da <_strtod_l+0x8b2>
 80087fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087fe:	4650      	mov	r0, sl
 8008800:	4659      	mov	r1, fp
 8008802:	9a08      	ldr	r2, [sp, #32]
 8008804:	b1bb      	cbz	r3, 8008836 <_strtod_l+0x90e>
 8008806:	f7ff fb6d 	bl	8007ee4 <sulp>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008812:	f7f7 fcab 	bl	800016c <__adddf3>
 8008816:	4682      	mov	sl, r0
 8008818:	468b      	mov	fp, r1
 800881a:	e7de      	b.n	80087da <_strtod_l+0x8b2>
 800881c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008820:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008824:	f04f 3aff 	mov.w	sl, #4294967295
 8008828:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800882c:	e7d5      	b.n	80087da <_strtod_l+0x8b2>
 800882e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008830:	ea13 0f0a 	tst.w	r3, sl
 8008834:	e7e1      	b.n	80087fa <_strtod_l+0x8d2>
 8008836:	f7ff fb55 	bl	8007ee4 <sulp>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008842:	f7f7 fc91 	bl	8000168 <__aeabi_dsub>
 8008846:	2200      	movs	r2, #0
 8008848:	2300      	movs	r3, #0
 800884a:	4682      	mov	sl, r0
 800884c:	468b      	mov	fp, r1
 800884e:	f7f8 f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8008852:	2800      	cmp	r0, #0
 8008854:	d0c1      	beq.n	80087da <_strtod_l+0x8b2>
 8008856:	e619      	b.n	800848c <_strtod_l+0x564>
 8008858:	4641      	mov	r1, r8
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff face 	bl	8007dfc <__ratio>
 8008860:	2200      	movs	r2, #0
 8008862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	f7f8 f8b1 	bl	80009d0 <__aeabi_dcmple>
 800886e:	2800      	cmp	r0, #0
 8008870:	d06d      	beq.n	800894e <_strtod_l+0xa26>
 8008872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d178      	bne.n	800896a <_strtod_l+0xa42>
 8008878:	f1ba 0f00 	cmp.w	sl, #0
 800887c:	d156      	bne.n	800892c <_strtod_l+0xa04>
 800887e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008884:	2b00      	cmp	r3, #0
 8008886:	d158      	bne.n	800893a <_strtod_l+0xa12>
 8008888:	2200      	movs	r2, #0
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	4b5e      	ldr	r3, [pc, #376]	@ (8008a08 <_strtod_l+0xae0>)
 8008890:	f7f8 f894 	bl	80009bc <__aeabi_dcmplt>
 8008894:	2800      	cmp	r0, #0
 8008896:	d157      	bne.n	8008948 <_strtod_l+0xa20>
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	2200      	movs	r2, #0
 800889e:	4b5b      	ldr	r3, [pc, #364]	@ (8008a0c <_strtod_l+0xae4>)
 80088a0:	f7f7 fe1a 	bl	80004d8 <__aeabi_dmul>
 80088a4:	4606      	mov	r6, r0
 80088a6:	460f      	mov	r7, r1
 80088a8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80088ac:	9606      	str	r6, [sp, #24]
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088b4:	4d51      	ldr	r5, [pc, #324]	@ (80089fc <_strtod_l+0xad4>)
 80088b6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80088ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088bc:	401d      	ands	r5, r3
 80088be:	4b54      	ldr	r3, [pc, #336]	@ (8008a10 <_strtod_l+0xae8>)
 80088c0:	429d      	cmp	r5, r3
 80088c2:	f040 80ab 	bne.w	8008a1c <_strtod_l+0xaf4>
 80088c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c8:	4650      	mov	r0, sl
 80088ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80088ce:	4659      	mov	r1, fp
 80088d0:	f7ff f9d4 	bl	8007c7c <__ulp>
 80088d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088d8:	f7f7 fdfe 	bl	80004d8 <__aeabi_dmul>
 80088dc:	4652      	mov	r2, sl
 80088de:	465b      	mov	r3, fp
 80088e0:	f7f7 fc44 	bl	800016c <__adddf3>
 80088e4:	460b      	mov	r3, r1
 80088e6:	4945      	ldr	r1, [pc, #276]	@ (80089fc <_strtod_l+0xad4>)
 80088e8:	4a4a      	ldr	r2, [pc, #296]	@ (8008a14 <_strtod_l+0xaec>)
 80088ea:	4019      	ands	r1, r3
 80088ec:	4291      	cmp	r1, r2
 80088ee:	4682      	mov	sl, r0
 80088f0:	d942      	bls.n	8008978 <_strtod_l+0xa50>
 80088f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088f4:	4b43      	ldr	r3, [pc, #268]	@ (8008a04 <_strtod_l+0xadc>)
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d103      	bne.n	8008902 <_strtod_l+0x9da>
 80088fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088fc:	3301      	adds	r3, #1
 80088fe:	f43f ad32 	beq.w	8008366 <_strtod_l+0x43e>
 8008902:	f04f 3aff 	mov.w	sl, #4294967295
 8008906:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8008a04 <_strtod_l+0xadc>
 800890a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800890c:	9805      	ldr	r0, [sp, #20]
 800890e:	f7fe fe89 	bl	8007624 <_Bfree>
 8008912:	4649      	mov	r1, r9
 8008914:	9805      	ldr	r0, [sp, #20]
 8008916:	f7fe fe85 	bl	8007624 <_Bfree>
 800891a:	4641      	mov	r1, r8
 800891c:	9805      	ldr	r0, [sp, #20]
 800891e:	f7fe fe81 	bl	8007624 <_Bfree>
 8008922:	4621      	mov	r1, r4
 8008924:	9805      	ldr	r0, [sp, #20]
 8008926:	f7fe fe7d 	bl	8007624 <_Bfree>
 800892a:	e61c      	b.n	8008566 <_strtod_l+0x63e>
 800892c:	f1ba 0f01 	cmp.w	sl, #1
 8008930:	d103      	bne.n	800893a <_strtod_l+0xa12>
 8008932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	f43f ada9 	beq.w	800848c <_strtod_l+0x564>
 800893a:	2200      	movs	r2, #0
 800893c:	4b36      	ldr	r3, [pc, #216]	@ (8008a18 <_strtod_l+0xaf0>)
 800893e:	2600      	movs	r6, #0
 8008940:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008944:	4f30      	ldr	r7, [pc, #192]	@ (8008a08 <_strtod_l+0xae0>)
 8008946:	e7b3      	b.n	80088b0 <_strtod_l+0x988>
 8008948:	2600      	movs	r6, #0
 800894a:	4f30      	ldr	r7, [pc, #192]	@ (8008a0c <_strtod_l+0xae4>)
 800894c:	e7ac      	b.n	80088a8 <_strtod_l+0x980>
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	4b2e      	ldr	r3, [pc, #184]	@ (8008a0c <_strtod_l+0xae4>)
 8008954:	2200      	movs	r2, #0
 8008956:	f7f7 fdbf 	bl	80004d8 <__aeabi_dmul>
 800895a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0a1      	beq.n	80088a8 <_strtod_l+0x980>
 8008964:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008968:	e7a2      	b.n	80088b0 <_strtod_l+0x988>
 800896a:	2200      	movs	r2, #0
 800896c:	4b26      	ldr	r3, [pc, #152]	@ (8008a08 <_strtod_l+0xae0>)
 800896e:	4616      	mov	r6, r2
 8008970:	461f      	mov	r7, r3
 8008972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008976:	e79b      	b.n	80088b0 <_strtod_l+0x988>
 8008978:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1c1      	bne.n	800890a <_strtod_l+0x9e2>
 8008986:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800898a:	0d1b      	lsrs	r3, r3, #20
 800898c:	051b      	lsls	r3, r3, #20
 800898e:	429d      	cmp	r5, r3
 8008990:	d1bb      	bne.n	800890a <_strtod_l+0x9e2>
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f8 fbbb 	bl	8001110 <__aeabi_d2lz>
 800899a:	f7f7 fd6f 	bl	800047c <__aeabi_l2d>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 fbdf 	bl	8000168 <__aeabi_dsub>
 80089aa:	460b      	mov	r3, r1
 80089ac:	4602      	mov	r2, r0
 80089ae:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80089b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b8:	ea46 060a 	orr.w	r6, r6, sl
 80089bc:	431e      	orrs	r6, r3
 80089be:	d06a      	beq.n	8008a96 <_strtod_l+0xb6e>
 80089c0:	a309      	add	r3, pc, #36	@ (adr r3, 80089e8 <_strtod_l+0xac0>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f7 fff9 	bl	80009bc <__aeabi_dcmplt>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f47f acd6 	bne.w	800837c <_strtod_l+0x454>
 80089d0:	a307      	add	r3, pc, #28	@ (adr r3, 80089f0 <_strtod_l+0xac8>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089da:	f7f8 f80d 	bl	80009f8 <__aeabi_dcmpgt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d093      	beq.n	800890a <_strtod_l+0x9e2>
 80089e2:	e4cb      	b.n	800837c <_strtod_l+0x454>
 80089e4:	f3af 8000 	nop.w
 80089e8:	94a03595 	.word	0x94a03595
 80089ec:	3fdfffff 	.word	0x3fdfffff
 80089f0:	35afe535 	.word	0x35afe535
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	39500000 	.word	0x39500000
 80089fc:	7ff00000 	.word	0x7ff00000
 8008a00:	000fffff 	.word	0x000fffff
 8008a04:	7fefffff 	.word	0x7fefffff
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	3fe00000 	.word	0x3fe00000
 8008a10:	7fe00000 	.word	0x7fe00000
 8008a14:	7c9fffff 	.word	0x7c9fffff
 8008a18:	bff00000 	.word	0xbff00000
 8008a1c:	9b08      	ldr	r3, [sp, #32]
 8008a1e:	b323      	cbz	r3, 8008a6a <_strtod_l+0xb42>
 8008a20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008a24:	d821      	bhi.n	8008a6a <_strtod_l+0xb42>
 8008a26:	a328      	add	r3, pc, #160	@ (adr r3, 8008ac8 <_strtod_l+0xba0>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f7f7 ffce 	bl	80009d0 <__aeabi_dcmple>
 8008a34:	b1a0      	cbz	r0, 8008a60 <_strtod_l+0xb38>
 8008a36:	4639      	mov	r1, r7
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7f8 f825 	bl	8000a88 <__aeabi_d2uiz>
 8008a3e:	2801      	cmp	r0, #1
 8008a40:	bf38      	it	cc
 8008a42:	2001      	movcc	r0, #1
 8008a44:	f7f7 fcce 	bl	80003e4 <__aeabi_ui2d>
 8008a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	b9fb      	cbnz	r3, 8008a90 <_strtod_l+0xb68>
 8008a50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a54:	9014      	str	r0, [sp, #80]	@ 0x50
 8008a56:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008a5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008a66:	1b5b      	subs	r3, r3, r5
 8008a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008a72:	f7ff f903 	bl	8007c7c <__ulp>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	4659      	mov	r1, fp
 8008a7e:	f7f7 fd2b 	bl	80004d8 <__aeabi_dmul>
 8008a82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a86:	f7f7 fb71 	bl	800016c <__adddf3>
 8008a8a:	4682      	mov	sl, r0
 8008a8c:	468b      	mov	fp, r1
 8008a8e:	e775      	b.n	800897c <_strtod_l+0xa54>
 8008a90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a94:	e7e0      	b.n	8008a58 <_strtod_l+0xb30>
 8008a96:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ad0 <_strtod_l+0xba8>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 ff8e 	bl	80009bc <__aeabi_dcmplt>
 8008aa0:	e79d      	b.n	80089de <_strtod_l+0xab6>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008aa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aa8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	f7ff ba79 	b.w	8007fa2 <_strtod_l+0x7a>
 8008ab0:	2a65      	cmp	r2, #101	@ 0x65
 8008ab2:	f43f ab72 	beq.w	800819a <_strtod_l+0x272>
 8008ab6:	2a45      	cmp	r2, #69	@ 0x45
 8008ab8:	f43f ab6f 	beq.w	800819a <_strtod_l+0x272>
 8008abc:	2301      	movs	r3, #1
 8008abe:	f7ff bbaa 	b.w	8008216 <_strtod_l+0x2ee>
 8008ac2:	bf00      	nop
 8008ac4:	f3af 8000 	nop.w
 8008ac8:	ffc00000 	.word	0xffc00000
 8008acc:	41dfffff 	.word	0x41dfffff
 8008ad0:	94a03595 	.word	0x94a03595
 8008ad4:	3fcfffff 	.word	0x3fcfffff

08008ad8 <_strtod_r>:
 8008ad8:	4b01      	ldr	r3, [pc, #4]	@ (8008ae0 <_strtod_r+0x8>)
 8008ada:	f7ff ba25 	b.w	8007f28 <_strtod_l>
 8008ade:	bf00      	nop
 8008ae0:	20000074 	.word	0x20000074

08008ae4 <__ssputs_r>:
 8008ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	461f      	mov	r7, r3
 8008aea:	688e      	ldr	r6, [r1, #8]
 8008aec:	4682      	mov	sl, r0
 8008aee:	42be      	cmp	r6, r7
 8008af0:	460c      	mov	r4, r1
 8008af2:	4690      	mov	r8, r2
 8008af4:	680b      	ldr	r3, [r1, #0]
 8008af6:	d82d      	bhi.n	8008b54 <__ssputs_r+0x70>
 8008af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008afc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b00:	d026      	beq.n	8008b50 <__ssputs_r+0x6c>
 8008b02:	6965      	ldr	r5, [r4, #20]
 8008b04:	6909      	ldr	r1, [r1, #16]
 8008b06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b0a:	eba3 0901 	sub.w	r9, r3, r1
 8008b0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b12:	1c7b      	adds	r3, r7, #1
 8008b14:	444b      	add	r3, r9
 8008b16:	106d      	asrs	r5, r5, #1
 8008b18:	429d      	cmp	r5, r3
 8008b1a:	bf38      	it	cc
 8008b1c:	461d      	movcc	r5, r3
 8008b1e:	0553      	lsls	r3, r2, #21
 8008b20:	d527      	bpl.n	8008b72 <__ssputs_r+0x8e>
 8008b22:	4629      	mov	r1, r5
 8008b24:	f7fe fcb2 	bl	800748c <_malloc_r>
 8008b28:	4606      	mov	r6, r0
 8008b2a:	b360      	cbz	r0, 8008b86 <__ssputs_r+0xa2>
 8008b2c:	464a      	mov	r2, r9
 8008b2e:	6921      	ldr	r1, [r4, #16]
 8008b30:	f000 fa02 	bl	8008f38 <memcpy>
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	6126      	str	r6, [r4, #16]
 8008b42:	444e      	add	r6, r9
 8008b44:	6026      	str	r6, [r4, #0]
 8008b46:	463e      	mov	r6, r7
 8008b48:	6165      	str	r5, [r4, #20]
 8008b4a:	eba5 0509 	sub.w	r5, r5, r9
 8008b4e:	60a5      	str	r5, [r4, #8]
 8008b50:	42be      	cmp	r6, r7
 8008b52:	d900      	bls.n	8008b56 <__ssputs_r+0x72>
 8008b54:	463e      	mov	r6, r7
 8008b56:	4632      	mov	r2, r6
 8008b58:	4641      	mov	r1, r8
 8008b5a:	6820      	ldr	r0, [r4, #0]
 8008b5c:	f000 f9c2 	bl	8008ee4 <memmove>
 8008b60:	2000      	movs	r0, #0
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	4433      	add	r3, r6
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	462a      	mov	r2, r5
 8008b74:	f000 fd71 	bl	800965a <_realloc_r>
 8008b78:	4606      	mov	r6, r0
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d1e0      	bne.n	8008b40 <__ssputs_r+0x5c>
 8008b7e:	4650      	mov	r0, sl
 8008b80:	6921      	ldr	r1, [r4, #16]
 8008b82:	f7fe fc11 	bl	80073a8 <_free_r>
 8008b86:	230c      	movs	r3, #12
 8008b88:	f8ca 3000 	str.w	r3, [sl]
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	e7e9      	b.n	8008b6e <__ssputs_r+0x8a>
	...

08008b9c <_svfiprintf_r>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	4698      	mov	r8, r3
 8008ba2:	898b      	ldrh	r3, [r1, #12]
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	061b      	lsls	r3, r3, #24
 8008ba8:	460d      	mov	r5, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	b09d      	sub	sp, #116	@ 0x74
 8008bae:	d510      	bpl.n	8008bd2 <_svfiprintf_r+0x36>
 8008bb0:	690b      	ldr	r3, [r1, #16]
 8008bb2:	b973      	cbnz	r3, 8008bd2 <_svfiprintf_r+0x36>
 8008bb4:	2140      	movs	r1, #64	@ 0x40
 8008bb6:	f7fe fc69 	bl	800748c <_malloc_r>
 8008bba:	6028      	str	r0, [r5, #0]
 8008bbc:	6128      	str	r0, [r5, #16]
 8008bbe:	b930      	cbnz	r0, 8008bce <_svfiprintf_r+0x32>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	b01d      	add	sp, #116	@ 0x74
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	2340      	movs	r3, #64	@ 0x40
 8008bd0:	616b      	str	r3, [r5, #20]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd6:	2320      	movs	r3, #32
 8008bd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bdc:	2330      	movs	r3, #48	@ 0x30
 8008bde:	f04f 0901 	mov.w	r9, #1
 8008be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008d80 <_svfiprintf_r+0x1e4>
 8008bea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bee:	4623      	mov	r3, r4
 8008bf0:	469a      	mov	sl, r3
 8008bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf6:	b10a      	cbz	r2, 8008bfc <_svfiprintf_r+0x60>
 8008bf8:	2a25      	cmp	r2, #37	@ 0x25
 8008bfa:	d1f9      	bne.n	8008bf0 <_svfiprintf_r+0x54>
 8008bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8008c00:	d00b      	beq.n	8008c1a <_svfiprintf_r+0x7e>
 8008c02:	465b      	mov	r3, fp
 8008c04:	4622      	mov	r2, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff ff6b 	bl	8008ae4 <__ssputs_r>
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f000 80a7 	beq.w	8008d62 <_svfiprintf_r+0x1c6>
 8008c14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c16:	445a      	add	r2, fp
 8008c18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 809f 	beq.w	8008d62 <_svfiprintf_r+0x1c6>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c2e:	f10a 0a01 	add.w	sl, sl, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9307      	str	r3, [sp, #28]
 8008c36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c3c:	4654      	mov	r4, sl
 8008c3e:	2205      	movs	r2, #5
 8008c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c44:	484e      	ldr	r0, [pc, #312]	@ (8008d80 <_svfiprintf_r+0x1e4>)
 8008c46:	f7fd fd40 	bl	80066ca <memchr>
 8008c4a:	9a04      	ldr	r2, [sp, #16]
 8008c4c:	b9d8      	cbnz	r0, 8008c86 <_svfiprintf_r+0xea>
 8008c4e:	06d0      	lsls	r0, r2, #27
 8008c50:	bf44      	itt	mi
 8008c52:	2320      	movmi	r3, #32
 8008c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c58:	0711      	lsls	r1, r2, #28
 8008c5a:	bf44      	itt	mi
 8008c5c:	232b      	movmi	r3, #43	@ 0x2b
 8008c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c62:	f89a 3000 	ldrb.w	r3, [sl]
 8008c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c68:	d015      	beq.n	8008c96 <_svfiprintf_r+0xfa>
 8008c6a:	4654      	mov	r4, sl
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f04f 0c0a 	mov.w	ip, #10
 8008c72:	9a07      	ldr	r2, [sp, #28]
 8008c74:	4621      	mov	r1, r4
 8008c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c7a:	3b30      	subs	r3, #48	@ 0x30
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d94b      	bls.n	8008d18 <_svfiprintf_r+0x17c>
 8008c80:	b1b0      	cbz	r0, 8008cb0 <_svfiprintf_r+0x114>
 8008c82:	9207      	str	r2, [sp, #28]
 8008c84:	e014      	b.n	8008cb0 <_svfiprintf_r+0x114>
 8008c86:	eba0 0308 	sub.w	r3, r0, r8
 8008c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	46a2      	mov	sl, r4
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	e7d2      	b.n	8008c3c <_svfiprintf_r+0xa0>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	1d19      	adds	r1, r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	9103      	str	r1, [sp, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfbb      	ittet	lt
 8008ca2:	425b      	neglt	r3, r3
 8008ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca8:	9307      	strge	r3, [sp, #28]
 8008caa:	9307      	strlt	r3, [sp, #28]
 8008cac:	bfb8      	it	lt
 8008cae:	9204      	strlt	r2, [sp, #16]
 8008cb0:	7823      	ldrb	r3, [r4, #0]
 8008cb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cb4:	d10a      	bne.n	8008ccc <_svfiprintf_r+0x130>
 8008cb6:	7863      	ldrb	r3, [r4, #1]
 8008cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cba:	d132      	bne.n	8008d22 <_svfiprintf_r+0x186>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	3402      	adds	r4, #2
 8008cc0:	1d1a      	adds	r2, r3, #4
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	9203      	str	r2, [sp, #12]
 8008cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008d84 <_svfiprintf_r+0x1e8>
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	7821      	ldrb	r1, [r4, #0]
 8008cd6:	f7fd fcf8 	bl	80066ca <memchr>
 8008cda:	b138      	cbz	r0, 8008cec <_svfiprintf_r+0x150>
 8008cdc:	2240      	movs	r2, #64	@ 0x40
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	eba0 000a 	sub.w	r0, r0, sl
 8008ce4:	4082      	lsls	r2, r0
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	3401      	adds	r4, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf0:	2206      	movs	r2, #6
 8008cf2:	4825      	ldr	r0, [pc, #148]	@ (8008d88 <_svfiprintf_r+0x1ec>)
 8008cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cf8:	f7fd fce7 	bl	80066ca <memchr>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d036      	beq.n	8008d6e <_svfiprintf_r+0x1d2>
 8008d00:	4b22      	ldr	r3, [pc, #136]	@ (8008d8c <_svfiprintf_r+0x1f0>)
 8008d02:	bb1b      	cbnz	r3, 8008d4c <_svfiprintf_r+0x1b0>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	3307      	adds	r3, #7
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d12:	4433      	add	r3, r6
 8008d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d16:	e76a      	b.n	8008bee <_svfiprintf_r+0x52>
 8008d18:	460c      	mov	r4, r1
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d20:	e7a8      	b.n	8008c74 <_svfiprintf_r+0xd8>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f04f 0c0a 	mov.w	ip, #10
 8008d28:	4619      	mov	r1, r3
 8008d2a:	3401      	adds	r4, #1
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d34:	3a30      	subs	r2, #48	@ 0x30
 8008d36:	2a09      	cmp	r2, #9
 8008d38:	d903      	bls.n	8008d42 <_svfiprintf_r+0x1a6>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0c6      	beq.n	8008ccc <_svfiprintf_r+0x130>
 8008d3e:	9105      	str	r1, [sp, #20]
 8008d40:	e7c4      	b.n	8008ccc <_svfiprintf_r+0x130>
 8008d42:	4604      	mov	r4, r0
 8008d44:	2301      	movs	r3, #1
 8008d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d4a:	e7f0      	b.n	8008d2e <_svfiprintf_r+0x192>
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4638      	mov	r0, r7
 8008d54:	4b0e      	ldr	r3, [pc, #56]	@ (8008d90 <_svfiprintf_r+0x1f4>)
 8008d56:	a904      	add	r1, sp, #16
 8008d58:	f7fc fd2a 	bl	80057b0 <_printf_float>
 8008d5c:	1c42      	adds	r2, r0, #1
 8008d5e:	4606      	mov	r6, r0
 8008d60:	d1d6      	bne.n	8008d10 <_svfiprintf_r+0x174>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	065b      	lsls	r3, r3, #25
 8008d66:	f53f af2d 	bmi.w	8008bc4 <_svfiprintf_r+0x28>
 8008d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d6c:	e72c      	b.n	8008bc8 <_svfiprintf_r+0x2c>
 8008d6e:	ab03      	add	r3, sp, #12
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	462a      	mov	r2, r5
 8008d74:	4638      	mov	r0, r7
 8008d76:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <_svfiprintf_r+0x1f4>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	f7fc ffb7 	bl	8005cec <_printf_i>
 8008d7e:	e7ed      	b.n	8008d5c <_svfiprintf_r+0x1c0>
 8008d80:	0800a9f8 	.word	0x0800a9f8
 8008d84:	0800a9fe 	.word	0x0800a9fe
 8008d88:	0800aa02 	.word	0x0800aa02
 8008d8c:	080057b1 	.word	0x080057b1
 8008d90:	08008ae5 	.word	0x08008ae5

08008d94 <__sflush_r>:
 8008d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	0716      	lsls	r6, r2, #28
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	d454      	bmi.n	8008e4c <__sflush_r+0xb8>
 8008da2:	684b      	ldr	r3, [r1, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc02      	bgt.n	8008dae <__sflush_r+0x1a>
 8008da8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dd48      	ble.n	8008e40 <__sflush_r+0xac>
 8008dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	d045      	beq.n	8008e40 <__sflush_r+0xac>
 8008db4:	2300      	movs	r3, #0
 8008db6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dba:	682f      	ldr	r7, [r5, #0]
 8008dbc:	6a21      	ldr	r1, [r4, #32]
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	d030      	beq.n	8008e24 <__sflush_r+0x90>
 8008dc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	0759      	lsls	r1, r3, #29
 8008dc8:	d505      	bpl.n	8008dd6 <__sflush_r+0x42>
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dd0:	b10b      	cbz	r3, 8008dd6 <__sflush_r+0x42>
 8008dd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4628      	mov	r0, r5
 8008dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	47b0      	blx	r6
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	d106      	bne.n	8008df4 <__sflush_r+0x60>
 8008de6:	6829      	ldr	r1, [r5, #0]
 8008de8:	291d      	cmp	r1, #29
 8008dea:	d82b      	bhi.n	8008e44 <__sflush_r+0xb0>
 8008dec:	4a28      	ldr	r2, [pc, #160]	@ (8008e90 <__sflush_r+0xfc>)
 8008dee:	40ca      	lsrs	r2, r1
 8008df0:	07d6      	lsls	r6, r2, #31
 8008df2:	d527      	bpl.n	8008e44 <__sflush_r+0xb0>
 8008df4:	2200      	movs	r2, #0
 8008df6:	6062      	str	r2, [r4, #4]
 8008df8:	6922      	ldr	r2, [r4, #16]
 8008dfa:	04d9      	lsls	r1, r3, #19
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	d504      	bpl.n	8008e0a <__sflush_r+0x76>
 8008e00:	1c42      	adds	r2, r0, #1
 8008e02:	d101      	bne.n	8008e08 <__sflush_r+0x74>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b903      	cbnz	r3, 8008e0a <__sflush_r+0x76>
 8008e08:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e0c:	602f      	str	r7, [r5, #0]
 8008e0e:	b1b9      	cbz	r1, 8008e40 <__sflush_r+0xac>
 8008e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e14:	4299      	cmp	r1, r3
 8008e16:	d002      	beq.n	8008e1e <__sflush_r+0x8a>
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f7fe fac5 	bl	80073a8 <_free_r>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e22:	e00d      	b.n	8008e40 <__sflush_r+0xac>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b0      	blx	r6
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	1c50      	adds	r0, r2, #1
 8008e2e:	d1c9      	bne.n	8008dc4 <__sflush_r+0x30>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0c6      	beq.n	8008dc4 <__sflush_r+0x30>
 8008e36:	2b1d      	cmp	r3, #29
 8008e38:	d001      	beq.n	8008e3e <__sflush_r+0xaa>
 8008e3a:	2b16      	cmp	r3, #22
 8008e3c:	d11d      	bne.n	8008e7a <__sflush_r+0xe6>
 8008e3e:	602f      	str	r7, [r5, #0]
 8008e40:	2000      	movs	r0, #0
 8008e42:	e021      	b.n	8008e88 <__sflush_r+0xf4>
 8008e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e48:	b21b      	sxth	r3, r3
 8008e4a:	e01a      	b.n	8008e82 <__sflush_r+0xee>
 8008e4c:	690f      	ldr	r7, [r1, #16]
 8008e4e:	2f00      	cmp	r7, #0
 8008e50:	d0f6      	beq.n	8008e40 <__sflush_r+0xac>
 8008e52:	0793      	lsls	r3, r2, #30
 8008e54:	bf18      	it	ne
 8008e56:	2300      	movne	r3, #0
 8008e58:	680e      	ldr	r6, [r1, #0]
 8008e5a:	bf08      	it	eq
 8008e5c:	694b      	ldreq	r3, [r1, #20]
 8008e5e:	1bf6      	subs	r6, r6, r7
 8008e60:	600f      	str	r7, [r1, #0]
 8008e62:	608b      	str	r3, [r1, #8]
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	ddeb      	ble.n	8008e40 <__sflush_r+0xac>
 8008e68:	4633      	mov	r3, r6
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	6a21      	ldr	r1, [r4, #32]
 8008e70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008e74:	47e0      	blx	ip
 8008e76:	2800      	cmp	r0, #0
 8008e78:	dc07      	bgt.n	8008e8a <__sflush_r+0xf6>
 8008e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e82:	f04f 30ff 	mov.w	r0, #4294967295
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8a:	4407      	add	r7, r0
 8008e8c:	1a36      	subs	r6, r6, r0
 8008e8e:	e7e9      	b.n	8008e64 <__sflush_r+0xd0>
 8008e90:	20400001 	.word	0x20400001

08008e94 <_fflush_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	b913      	cbnz	r3, 8008ea4 <_fflush_r+0x10>
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	b118      	cbz	r0, 8008eae <_fflush_r+0x1a>
 8008ea6:	6a03      	ldr	r3, [r0, #32]
 8008ea8:	b90b      	cbnz	r3, 8008eae <_fflush_r+0x1a>
 8008eaa:	f7fd fad3 	bl	8006454 <__sinit>
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f3      	beq.n	8008e9e <_fflush_r+0xa>
 8008eb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008eb8:	07d0      	lsls	r0, r2, #31
 8008eba:	d404      	bmi.n	8008ec6 <_fflush_r+0x32>
 8008ebc:	0599      	lsls	r1, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_fflush_r+0x32>
 8008ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ec2:	f7fd fc00 	bl	80066c6 <__retarget_lock_acquire_recursive>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	4621      	mov	r1, r4
 8008eca:	f7ff ff63 	bl	8008d94 <__sflush_r>
 8008ece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	07da      	lsls	r2, r3, #31
 8008ed4:	d4e4      	bmi.n	8008ea0 <_fflush_r+0xc>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	059b      	lsls	r3, r3, #22
 8008eda:	d4e1      	bmi.n	8008ea0 <_fflush_r+0xc>
 8008edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ede:	f7fd fbf3 	bl	80066c8 <__retarget_lock_release_recursive>
 8008ee2:	e7dd      	b.n	8008ea0 <_fflush_r+0xc>

08008ee4 <memmove>:
 8008ee4:	4288      	cmp	r0, r1
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	eb01 0402 	add.w	r4, r1, r2
 8008eec:	d902      	bls.n	8008ef4 <memmove+0x10>
 8008eee:	4284      	cmp	r4, r0
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	d807      	bhi.n	8008f04 <memmove+0x20>
 8008ef4:	1e43      	subs	r3, r0, #1
 8008ef6:	42a1      	cmp	r1, r4
 8008ef8:	d008      	beq.n	8008f0c <memmove+0x28>
 8008efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f02:	e7f8      	b.n	8008ef6 <memmove+0x12>
 8008f04:	4601      	mov	r1, r0
 8008f06:	4402      	add	r2, r0
 8008f08:	428a      	cmp	r2, r1
 8008f0a:	d100      	bne.n	8008f0e <memmove+0x2a>
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f16:	e7f7      	b.n	8008f08 <memmove+0x24>

08008f18 <_sbrk_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4d05      	ldr	r5, [pc, #20]	@ (8008f34 <_sbrk_r+0x1c>)
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f9 fec6 	bl	8002cb4 <_sbrk>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_sbrk_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_sbrk_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	200008a8 	.word	0x200008a8

08008f38 <memcpy>:
 8008f38:	440a      	add	r2, r1
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f40:	d100      	bne.n	8008f44 <memcpy+0xc>
 8008f42:	4770      	bx	lr
 8008f44:	b510      	push	{r4, lr}
 8008f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f4a:	4291      	cmp	r1, r2
 8008f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f50:	d1f9      	bne.n	8008f46 <memcpy+0xe>
 8008f52:	bd10      	pop	{r4, pc}

08008f54 <nan>:
 8008f54:	2000      	movs	r0, #0
 8008f56:	4901      	ldr	r1, [pc, #4]	@ (8008f5c <nan+0x8>)
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	7ff80000 	.word	0x7ff80000

08008f60 <__assert_func>:
 8008f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f62:	4614      	mov	r4, r2
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b09      	ldr	r3, [pc, #36]	@ (8008f8c <__assert_func+0x2c>)
 8008f68:	4605      	mov	r5, r0
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68d8      	ldr	r0, [r3, #12]
 8008f6e:	b14c      	cbz	r4, 8008f84 <__assert_func+0x24>
 8008f70:	4b07      	ldr	r3, [pc, #28]	@ (8008f90 <__assert_func+0x30>)
 8008f72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f76:	9100      	str	r1, [sp, #0]
 8008f78:	462b      	mov	r3, r5
 8008f7a:	4906      	ldr	r1, [pc, #24]	@ (8008f94 <__assert_func+0x34>)
 8008f7c:	f000 fba8 	bl	80096d0 <fiprintf>
 8008f80:	f000 fbb8 	bl	80096f4 <abort>
 8008f84:	4b04      	ldr	r3, [pc, #16]	@ (8008f98 <__assert_func+0x38>)
 8008f86:	461c      	mov	r4, r3
 8008f88:	e7f3      	b.n	8008f72 <__assert_func+0x12>
 8008f8a:	bf00      	nop
 8008f8c:	20000024 	.word	0x20000024
 8008f90:	0800aa11 	.word	0x0800aa11
 8008f94:	0800aa1e 	.word	0x0800aa1e
 8008f98:	0800aa4c 	.word	0x0800aa4c

08008f9c <_calloc_r>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	fba1 5402 	umull	r5, r4, r1, r2
 8008fa2:	b934      	cbnz	r4, 8008fb2 <_calloc_r+0x16>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f7fe fa71 	bl	800748c <_malloc_r>
 8008faa:	4606      	mov	r6, r0
 8008fac:	b928      	cbnz	r0, 8008fba <_calloc_r+0x1e>
 8008fae:	4630      	mov	r0, r6
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	220c      	movs	r2, #12
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	6002      	str	r2, [r0, #0]
 8008fb8:	e7f9      	b.n	8008fae <_calloc_r+0x12>
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	f7fd fae4 	bl	800658a <memset>
 8008fc2:	e7f4      	b.n	8008fae <_calloc_r+0x12>

08008fc4 <rshift>:
 8008fc4:	6903      	ldr	r3, [r0, #16]
 8008fc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fce:	f100 0414 	add.w	r4, r0, #20
 8008fd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fd6:	dd46      	ble.n	8009066 <rshift+0xa2>
 8008fd8:	f011 011f 	ands.w	r1, r1, #31
 8008fdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fe4:	d10c      	bne.n	8009000 <rshift+0x3c>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f100 0710 	add.w	r7, r0, #16
 8008fec:	42b1      	cmp	r1, r6
 8008fee:	d335      	bcc.n	800905c <rshift+0x98>
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	1eea      	subs	r2, r5, #3
 8008ff6:	4296      	cmp	r6, r2
 8008ff8:	bf38      	it	cc
 8008ffa:	2300      	movcc	r3, #0
 8008ffc:	4423      	add	r3, r4
 8008ffe:	e015      	b.n	800902c <rshift+0x68>
 8009000:	46a1      	mov	r9, r4
 8009002:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009006:	f1c1 0820 	rsb	r8, r1, #32
 800900a:	40cf      	lsrs	r7, r1
 800900c:	f105 0e04 	add.w	lr, r5, #4
 8009010:	4576      	cmp	r6, lr
 8009012:	46f4      	mov	ip, lr
 8009014:	d816      	bhi.n	8009044 <rshift+0x80>
 8009016:	1a9a      	subs	r2, r3, r2
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	3a04      	subs	r2, #4
 800901c:	3501      	adds	r5, #1
 800901e:	42ae      	cmp	r6, r5
 8009020:	bf38      	it	cc
 8009022:	2200      	movcc	r2, #0
 8009024:	18a3      	adds	r3, r4, r2
 8009026:	50a7      	str	r7, [r4, r2]
 8009028:	b107      	cbz	r7, 800902c <rshift+0x68>
 800902a:	3304      	adds	r3, #4
 800902c:	42a3      	cmp	r3, r4
 800902e:	eba3 0204 	sub.w	r2, r3, r4
 8009032:	bf08      	it	eq
 8009034:	2300      	moveq	r3, #0
 8009036:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800903a:	6102      	str	r2, [r0, #16]
 800903c:	bf08      	it	eq
 800903e:	6143      	streq	r3, [r0, #20]
 8009040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009044:	f8dc c000 	ldr.w	ip, [ip]
 8009048:	fa0c fc08 	lsl.w	ip, ip, r8
 800904c:	ea4c 0707 	orr.w	r7, ip, r7
 8009050:	f849 7b04 	str.w	r7, [r9], #4
 8009054:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009058:	40cf      	lsrs	r7, r1
 800905a:	e7d9      	b.n	8009010 <rshift+0x4c>
 800905c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009060:	f847 cf04 	str.w	ip, [r7, #4]!
 8009064:	e7c2      	b.n	8008fec <rshift+0x28>
 8009066:	4623      	mov	r3, r4
 8009068:	e7e0      	b.n	800902c <rshift+0x68>

0800906a <__hexdig_fun>:
 800906a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d802      	bhi.n	8009078 <__hexdig_fun+0xe>
 8009072:	3820      	subs	r0, #32
 8009074:	b2c0      	uxtb	r0, r0
 8009076:	4770      	bx	lr
 8009078:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800907c:	2b05      	cmp	r3, #5
 800907e:	d801      	bhi.n	8009084 <__hexdig_fun+0x1a>
 8009080:	3847      	subs	r0, #71	@ 0x47
 8009082:	e7f7      	b.n	8009074 <__hexdig_fun+0xa>
 8009084:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009088:	2b05      	cmp	r3, #5
 800908a:	d801      	bhi.n	8009090 <__hexdig_fun+0x26>
 800908c:	3827      	subs	r0, #39	@ 0x27
 800908e:	e7f1      	b.n	8009074 <__hexdig_fun+0xa>
 8009090:	2000      	movs	r0, #0
 8009092:	4770      	bx	lr

08009094 <__gethex>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	468a      	mov	sl, r1
 800909a:	4690      	mov	r8, r2
 800909c:	b085      	sub	sp, #20
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	680b      	ldr	r3, [r1, #0]
 80090a2:	9001      	str	r0, [sp, #4]
 80090a4:	1c9c      	adds	r4, r3, #2
 80090a6:	46a1      	mov	r9, r4
 80090a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80090ac:	2830      	cmp	r0, #48	@ 0x30
 80090ae:	d0fa      	beq.n	80090a6 <__gethex+0x12>
 80090b0:	eba9 0303 	sub.w	r3, r9, r3
 80090b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80090b8:	f7ff ffd7 	bl	800906a <__hexdig_fun>
 80090bc:	4605      	mov	r5, r0
 80090be:	2800      	cmp	r0, #0
 80090c0:	d168      	bne.n	8009194 <__gethex+0x100>
 80090c2:	2201      	movs	r2, #1
 80090c4:	4648      	mov	r0, r9
 80090c6:	499f      	ldr	r1, [pc, #636]	@ (8009344 <__gethex+0x2b0>)
 80090c8:	f7fd fa76 	bl	80065b8 <strncmp>
 80090cc:	4607      	mov	r7, r0
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d167      	bne.n	80091a2 <__gethex+0x10e>
 80090d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80090d6:	4626      	mov	r6, r4
 80090d8:	f7ff ffc7 	bl	800906a <__hexdig_fun>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d062      	beq.n	80091a6 <__gethex+0x112>
 80090e0:	4623      	mov	r3, r4
 80090e2:	7818      	ldrb	r0, [r3, #0]
 80090e4:	4699      	mov	r9, r3
 80090e6:	2830      	cmp	r0, #48	@ 0x30
 80090e8:	f103 0301 	add.w	r3, r3, #1
 80090ec:	d0f9      	beq.n	80090e2 <__gethex+0x4e>
 80090ee:	f7ff ffbc 	bl	800906a <__hexdig_fun>
 80090f2:	fab0 f580 	clz	r5, r0
 80090f6:	f04f 0b01 	mov.w	fp, #1
 80090fa:	096d      	lsrs	r5, r5, #5
 80090fc:	464a      	mov	r2, r9
 80090fe:	4616      	mov	r6, r2
 8009100:	7830      	ldrb	r0, [r6, #0]
 8009102:	3201      	adds	r2, #1
 8009104:	f7ff ffb1 	bl	800906a <__hexdig_fun>
 8009108:	2800      	cmp	r0, #0
 800910a:	d1f8      	bne.n	80090fe <__gethex+0x6a>
 800910c:	2201      	movs	r2, #1
 800910e:	4630      	mov	r0, r6
 8009110:	498c      	ldr	r1, [pc, #560]	@ (8009344 <__gethex+0x2b0>)
 8009112:	f7fd fa51 	bl	80065b8 <strncmp>
 8009116:	2800      	cmp	r0, #0
 8009118:	d13f      	bne.n	800919a <__gethex+0x106>
 800911a:	b944      	cbnz	r4, 800912e <__gethex+0x9a>
 800911c:	1c74      	adds	r4, r6, #1
 800911e:	4622      	mov	r2, r4
 8009120:	4616      	mov	r6, r2
 8009122:	7830      	ldrb	r0, [r6, #0]
 8009124:	3201      	adds	r2, #1
 8009126:	f7ff ffa0 	bl	800906a <__hexdig_fun>
 800912a:	2800      	cmp	r0, #0
 800912c:	d1f8      	bne.n	8009120 <__gethex+0x8c>
 800912e:	1ba4      	subs	r4, r4, r6
 8009130:	00a7      	lsls	r7, r4, #2
 8009132:	7833      	ldrb	r3, [r6, #0]
 8009134:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009138:	2b50      	cmp	r3, #80	@ 0x50
 800913a:	d13e      	bne.n	80091ba <__gethex+0x126>
 800913c:	7873      	ldrb	r3, [r6, #1]
 800913e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009140:	d033      	beq.n	80091aa <__gethex+0x116>
 8009142:	2b2d      	cmp	r3, #45	@ 0x2d
 8009144:	d034      	beq.n	80091b0 <__gethex+0x11c>
 8009146:	2400      	movs	r4, #0
 8009148:	1c71      	adds	r1, r6, #1
 800914a:	7808      	ldrb	r0, [r1, #0]
 800914c:	f7ff ff8d 	bl	800906a <__hexdig_fun>
 8009150:	1e43      	subs	r3, r0, #1
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b18      	cmp	r3, #24
 8009156:	d830      	bhi.n	80091ba <__gethex+0x126>
 8009158:	f1a0 0210 	sub.w	r2, r0, #16
 800915c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009160:	f7ff ff83 	bl	800906a <__hexdig_fun>
 8009164:	f100 3cff 	add.w	ip, r0, #4294967295
 8009168:	fa5f fc8c 	uxtb.w	ip, ip
 800916c:	f1bc 0f18 	cmp.w	ip, #24
 8009170:	f04f 030a 	mov.w	r3, #10
 8009174:	d91e      	bls.n	80091b4 <__gethex+0x120>
 8009176:	b104      	cbz	r4, 800917a <__gethex+0xe6>
 8009178:	4252      	negs	r2, r2
 800917a:	4417      	add	r7, r2
 800917c:	f8ca 1000 	str.w	r1, [sl]
 8009180:	b1ed      	cbz	r5, 80091be <__gethex+0x12a>
 8009182:	f1bb 0f00 	cmp.w	fp, #0
 8009186:	bf0c      	ite	eq
 8009188:	2506      	moveq	r5, #6
 800918a:	2500      	movne	r5, #0
 800918c:	4628      	mov	r0, r5
 800918e:	b005      	add	sp, #20
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	2500      	movs	r5, #0
 8009196:	462c      	mov	r4, r5
 8009198:	e7b0      	b.n	80090fc <__gethex+0x68>
 800919a:	2c00      	cmp	r4, #0
 800919c:	d1c7      	bne.n	800912e <__gethex+0x9a>
 800919e:	4627      	mov	r7, r4
 80091a0:	e7c7      	b.n	8009132 <__gethex+0x9e>
 80091a2:	464e      	mov	r6, r9
 80091a4:	462f      	mov	r7, r5
 80091a6:	2501      	movs	r5, #1
 80091a8:	e7c3      	b.n	8009132 <__gethex+0x9e>
 80091aa:	2400      	movs	r4, #0
 80091ac:	1cb1      	adds	r1, r6, #2
 80091ae:	e7cc      	b.n	800914a <__gethex+0xb6>
 80091b0:	2401      	movs	r4, #1
 80091b2:	e7fb      	b.n	80091ac <__gethex+0x118>
 80091b4:	fb03 0002 	mla	r0, r3, r2, r0
 80091b8:	e7ce      	b.n	8009158 <__gethex+0xc4>
 80091ba:	4631      	mov	r1, r6
 80091bc:	e7de      	b.n	800917c <__gethex+0xe8>
 80091be:	4629      	mov	r1, r5
 80091c0:	eba6 0309 	sub.w	r3, r6, r9
 80091c4:	3b01      	subs	r3, #1
 80091c6:	2b07      	cmp	r3, #7
 80091c8:	dc0a      	bgt.n	80091e0 <__gethex+0x14c>
 80091ca:	9801      	ldr	r0, [sp, #4]
 80091cc:	f7fe f9ea 	bl	80075a4 <_Balloc>
 80091d0:	4604      	mov	r4, r0
 80091d2:	b940      	cbnz	r0, 80091e6 <__gethex+0x152>
 80091d4:	4602      	mov	r2, r0
 80091d6:	21e4      	movs	r1, #228	@ 0xe4
 80091d8:	4b5b      	ldr	r3, [pc, #364]	@ (8009348 <__gethex+0x2b4>)
 80091da:	485c      	ldr	r0, [pc, #368]	@ (800934c <__gethex+0x2b8>)
 80091dc:	f7ff fec0 	bl	8008f60 <__assert_func>
 80091e0:	3101      	adds	r1, #1
 80091e2:	105b      	asrs	r3, r3, #1
 80091e4:	e7ef      	b.n	80091c6 <__gethex+0x132>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f100 0a14 	add.w	sl, r0, #20
 80091ec:	4655      	mov	r5, sl
 80091ee:	469b      	mov	fp, r3
 80091f0:	45b1      	cmp	r9, r6
 80091f2:	d337      	bcc.n	8009264 <__gethex+0x1d0>
 80091f4:	f845 bb04 	str.w	fp, [r5], #4
 80091f8:	eba5 050a 	sub.w	r5, r5, sl
 80091fc:	10ad      	asrs	r5, r5, #2
 80091fe:	6125      	str	r5, [r4, #16]
 8009200:	4658      	mov	r0, fp
 8009202:	f7fe fac1 	bl	8007788 <__hi0bits>
 8009206:	016d      	lsls	r5, r5, #5
 8009208:	f8d8 6000 	ldr.w	r6, [r8]
 800920c:	1a2d      	subs	r5, r5, r0
 800920e:	42b5      	cmp	r5, r6
 8009210:	dd54      	ble.n	80092bc <__gethex+0x228>
 8009212:	1bad      	subs	r5, r5, r6
 8009214:	4629      	mov	r1, r5
 8009216:	4620      	mov	r0, r4
 8009218:	f7fe fe43 	bl	8007ea2 <__any_on>
 800921c:	4681      	mov	r9, r0
 800921e:	b178      	cbz	r0, 8009240 <__gethex+0x1ac>
 8009220:	f04f 0901 	mov.w	r9, #1
 8009224:	1e6b      	subs	r3, r5, #1
 8009226:	1159      	asrs	r1, r3, #5
 8009228:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800922c:	f003 021f 	and.w	r2, r3, #31
 8009230:	fa09 f202 	lsl.w	r2, r9, r2
 8009234:	420a      	tst	r2, r1
 8009236:	d003      	beq.n	8009240 <__gethex+0x1ac>
 8009238:	454b      	cmp	r3, r9
 800923a:	dc36      	bgt.n	80092aa <__gethex+0x216>
 800923c:	f04f 0902 	mov.w	r9, #2
 8009240:	4629      	mov	r1, r5
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff febe 	bl	8008fc4 <rshift>
 8009248:	442f      	add	r7, r5
 800924a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800924e:	42bb      	cmp	r3, r7
 8009250:	da42      	bge.n	80092d8 <__gethex+0x244>
 8009252:	4621      	mov	r1, r4
 8009254:	9801      	ldr	r0, [sp, #4]
 8009256:	f7fe f9e5 	bl	8007624 <_Bfree>
 800925a:	2300      	movs	r3, #0
 800925c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925e:	25a3      	movs	r5, #163	@ 0xa3
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	e793      	b.n	800918c <__gethex+0xf8>
 8009264:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009268:	2a2e      	cmp	r2, #46	@ 0x2e
 800926a:	d012      	beq.n	8009292 <__gethex+0x1fe>
 800926c:	2b20      	cmp	r3, #32
 800926e:	d104      	bne.n	800927a <__gethex+0x1e6>
 8009270:	f845 bb04 	str.w	fp, [r5], #4
 8009274:	f04f 0b00 	mov.w	fp, #0
 8009278:	465b      	mov	r3, fp
 800927a:	7830      	ldrb	r0, [r6, #0]
 800927c:	9303      	str	r3, [sp, #12]
 800927e:	f7ff fef4 	bl	800906a <__hexdig_fun>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	f000 000f 	and.w	r0, r0, #15
 8009288:	4098      	lsls	r0, r3
 800928a:	ea4b 0b00 	orr.w	fp, fp, r0
 800928e:	3304      	adds	r3, #4
 8009290:	e7ae      	b.n	80091f0 <__gethex+0x15c>
 8009292:	45b1      	cmp	r9, r6
 8009294:	d8ea      	bhi.n	800926c <__gethex+0x1d8>
 8009296:	2201      	movs	r2, #1
 8009298:	4630      	mov	r0, r6
 800929a:	492a      	ldr	r1, [pc, #168]	@ (8009344 <__gethex+0x2b0>)
 800929c:	9303      	str	r3, [sp, #12]
 800929e:	f7fd f98b 	bl	80065b8 <strncmp>
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d1e1      	bne.n	800926c <__gethex+0x1d8>
 80092a8:	e7a2      	b.n	80091f0 <__gethex+0x15c>
 80092aa:	4620      	mov	r0, r4
 80092ac:	1ea9      	subs	r1, r5, #2
 80092ae:	f7fe fdf8 	bl	8007ea2 <__any_on>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d0c2      	beq.n	800923c <__gethex+0x1a8>
 80092b6:	f04f 0903 	mov.w	r9, #3
 80092ba:	e7c1      	b.n	8009240 <__gethex+0x1ac>
 80092bc:	da09      	bge.n	80092d2 <__gethex+0x23e>
 80092be:	1b75      	subs	r5, r6, r5
 80092c0:	4621      	mov	r1, r4
 80092c2:	462a      	mov	r2, r5
 80092c4:	9801      	ldr	r0, [sp, #4]
 80092c6:	f7fe fbbd 	bl	8007a44 <__lshift>
 80092ca:	4604      	mov	r4, r0
 80092cc:	1b7f      	subs	r7, r7, r5
 80092ce:	f100 0a14 	add.w	sl, r0, #20
 80092d2:	f04f 0900 	mov.w	r9, #0
 80092d6:	e7b8      	b.n	800924a <__gethex+0x1b6>
 80092d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092dc:	42bd      	cmp	r5, r7
 80092de:	dd6f      	ble.n	80093c0 <__gethex+0x32c>
 80092e0:	1bed      	subs	r5, r5, r7
 80092e2:	42ae      	cmp	r6, r5
 80092e4:	dc34      	bgt.n	8009350 <__gethex+0x2bc>
 80092e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d022      	beq.n	8009334 <__gethex+0x2a0>
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d024      	beq.n	800933c <__gethex+0x2a8>
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d115      	bne.n	8009322 <__gethex+0x28e>
 80092f6:	42ae      	cmp	r6, r5
 80092f8:	d113      	bne.n	8009322 <__gethex+0x28e>
 80092fa:	2e01      	cmp	r6, #1
 80092fc:	d10b      	bne.n	8009316 <__gethex+0x282>
 80092fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009302:	9a02      	ldr	r2, [sp, #8]
 8009304:	2562      	movs	r5, #98	@ 0x62
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	2301      	movs	r3, #1
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	f8ca 3000 	str.w	r3, [sl]
 8009310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009312:	601c      	str	r4, [r3, #0]
 8009314:	e73a      	b.n	800918c <__gethex+0xf8>
 8009316:	4620      	mov	r0, r4
 8009318:	1e71      	subs	r1, r6, #1
 800931a:	f7fe fdc2 	bl	8007ea2 <__any_on>
 800931e:	2800      	cmp	r0, #0
 8009320:	d1ed      	bne.n	80092fe <__gethex+0x26a>
 8009322:	4621      	mov	r1, r4
 8009324:	9801      	ldr	r0, [sp, #4]
 8009326:	f7fe f97d 	bl	8007624 <_Bfree>
 800932a:	2300      	movs	r3, #0
 800932c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800932e:	2550      	movs	r5, #80	@ 0x50
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	e72b      	b.n	800918c <__gethex+0xf8>
 8009334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1f3      	bne.n	8009322 <__gethex+0x28e>
 800933a:	e7e0      	b.n	80092fe <__gethex+0x26a>
 800933c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1dd      	bne.n	80092fe <__gethex+0x26a>
 8009342:	e7ee      	b.n	8009322 <__gethex+0x28e>
 8009344:	0800a9f6 	.word	0x0800a9f6
 8009348:	0800a98c 	.word	0x0800a98c
 800934c:	0800aa4d 	.word	0x0800aa4d
 8009350:	1e6f      	subs	r7, r5, #1
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	d130      	bne.n	80093ba <__gethex+0x326>
 8009358:	b127      	cbz	r7, 8009364 <__gethex+0x2d0>
 800935a:	4639      	mov	r1, r7
 800935c:	4620      	mov	r0, r4
 800935e:	f7fe fda0 	bl	8007ea2 <__any_on>
 8009362:	4681      	mov	r9, r0
 8009364:	2301      	movs	r3, #1
 8009366:	4629      	mov	r1, r5
 8009368:	1b76      	subs	r6, r6, r5
 800936a:	2502      	movs	r5, #2
 800936c:	117a      	asrs	r2, r7, #5
 800936e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009372:	f007 071f 	and.w	r7, r7, #31
 8009376:	40bb      	lsls	r3, r7
 8009378:	4213      	tst	r3, r2
 800937a:	4620      	mov	r0, r4
 800937c:	bf18      	it	ne
 800937e:	f049 0902 	orrne.w	r9, r9, #2
 8009382:	f7ff fe1f 	bl	8008fc4 <rshift>
 8009386:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800938a:	f1b9 0f00 	cmp.w	r9, #0
 800938e:	d047      	beq.n	8009420 <__gethex+0x38c>
 8009390:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d015      	beq.n	80093c4 <__gethex+0x330>
 8009398:	2b03      	cmp	r3, #3
 800939a:	d017      	beq.n	80093cc <__gethex+0x338>
 800939c:	2b01      	cmp	r3, #1
 800939e:	d109      	bne.n	80093b4 <__gethex+0x320>
 80093a0:	f019 0f02 	tst.w	r9, #2
 80093a4:	d006      	beq.n	80093b4 <__gethex+0x320>
 80093a6:	f8da 3000 	ldr.w	r3, [sl]
 80093aa:	ea49 0903 	orr.w	r9, r9, r3
 80093ae:	f019 0f01 	tst.w	r9, #1
 80093b2:	d10e      	bne.n	80093d2 <__gethex+0x33e>
 80093b4:	f045 0510 	orr.w	r5, r5, #16
 80093b8:	e032      	b.n	8009420 <__gethex+0x38c>
 80093ba:	f04f 0901 	mov.w	r9, #1
 80093be:	e7d1      	b.n	8009364 <__gethex+0x2d0>
 80093c0:	2501      	movs	r5, #1
 80093c2:	e7e2      	b.n	800938a <__gethex+0x2f6>
 80093c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c6:	f1c3 0301 	rsb	r3, r3, #1
 80093ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f0      	beq.n	80093b4 <__gethex+0x320>
 80093d2:	f04f 0c00 	mov.w	ip, #0
 80093d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093da:	f104 0314 	add.w	r3, r4, #20
 80093de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093f0:	d01b      	beq.n	800942a <__gethex+0x396>
 80093f2:	3201      	adds	r2, #1
 80093f4:	6002      	str	r2, [r0, #0]
 80093f6:	2d02      	cmp	r5, #2
 80093f8:	f104 0314 	add.w	r3, r4, #20
 80093fc:	d13c      	bne.n	8009478 <__gethex+0x3e4>
 80093fe:	f8d8 2000 	ldr.w	r2, [r8]
 8009402:	3a01      	subs	r2, #1
 8009404:	42b2      	cmp	r2, r6
 8009406:	d109      	bne.n	800941c <__gethex+0x388>
 8009408:	2201      	movs	r2, #1
 800940a:	1171      	asrs	r1, r6, #5
 800940c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009410:	f006 061f 	and.w	r6, r6, #31
 8009414:	fa02 f606 	lsl.w	r6, r2, r6
 8009418:	421e      	tst	r6, r3
 800941a:	d13a      	bne.n	8009492 <__gethex+0x3fe>
 800941c:	f045 0520 	orr.w	r5, r5, #32
 8009420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009422:	601c      	str	r4, [r3, #0]
 8009424:	9b02      	ldr	r3, [sp, #8]
 8009426:	601f      	str	r7, [r3, #0]
 8009428:	e6b0      	b.n	800918c <__gethex+0xf8>
 800942a:	4299      	cmp	r1, r3
 800942c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009430:	d8d9      	bhi.n	80093e6 <__gethex+0x352>
 8009432:	68a3      	ldr	r3, [r4, #8]
 8009434:	459b      	cmp	fp, r3
 8009436:	db17      	blt.n	8009468 <__gethex+0x3d4>
 8009438:	6861      	ldr	r1, [r4, #4]
 800943a:	9801      	ldr	r0, [sp, #4]
 800943c:	3101      	adds	r1, #1
 800943e:	f7fe f8b1 	bl	80075a4 <_Balloc>
 8009442:	4681      	mov	r9, r0
 8009444:	b918      	cbnz	r0, 800944e <__gethex+0x3ba>
 8009446:	4602      	mov	r2, r0
 8009448:	2184      	movs	r1, #132	@ 0x84
 800944a:	4b19      	ldr	r3, [pc, #100]	@ (80094b0 <__gethex+0x41c>)
 800944c:	e6c5      	b.n	80091da <__gethex+0x146>
 800944e:	6922      	ldr	r2, [r4, #16]
 8009450:	f104 010c 	add.w	r1, r4, #12
 8009454:	3202      	adds	r2, #2
 8009456:	0092      	lsls	r2, r2, #2
 8009458:	300c      	adds	r0, #12
 800945a:	f7ff fd6d 	bl	8008f38 <memcpy>
 800945e:	4621      	mov	r1, r4
 8009460:	9801      	ldr	r0, [sp, #4]
 8009462:	f7fe f8df 	bl	8007624 <_Bfree>
 8009466:	464c      	mov	r4, r9
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	6122      	str	r2, [r4, #16]
 800946e:	2201      	movs	r2, #1
 8009470:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009474:	615a      	str	r2, [r3, #20]
 8009476:	e7be      	b.n	80093f6 <__gethex+0x362>
 8009478:	6922      	ldr	r2, [r4, #16]
 800947a:	455a      	cmp	r2, fp
 800947c:	dd0b      	ble.n	8009496 <__gethex+0x402>
 800947e:	2101      	movs	r1, #1
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff fd9f 	bl	8008fc4 <rshift>
 8009486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800948a:	3701      	adds	r7, #1
 800948c:	42bb      	cmp	r3, r7
 800948e:	f6ff aee0 	blt.w	8009252 <__gethex+0x1be>
 8009492:	2501      	movs	r5, #1
 8009494:	e7c2      	b.n	800941c <__gethex+0x388>
 8009496:	f016 061f 	ands.w	r6, r6, #31
 800949a:	d0fa      	beq.n	8009492 <__gethex+0x3fe>
 800949c:	4453      	add	r3, sl
 800949e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80094a2:	f7fe f971 	bl	8007788 <__hi0bits>
 80094a6:	f1c6 0620 	rsb	r6, r6, #32
 80094aa:	42b0      	cmp	r0, r6
 80094ac:	dbe7      	blt.n	800947e <__gethex+0x3ea>
 80094ae:	e7f0      	b.n	8009492 <__gethex+0x3fe>
 80094b0:	0800a98c 	.word	0x0800a98c

080094b4 <L_shift>:
 80094b4:	f1c2 0208 	rsb	r2, r2, #8
 80094b8:	0092      	lsls	r2, r2, #2
 80094ba:	b570      	push	{r4, r5, r6, lr}
 80094bc:	f1c2 0620 	rsb	r6, r2, #32
 80094c0:	6843      	ldr	r3, [r0, #4]
 80094c2:	6804      	ldr	r4, [r0, #0]
 80094c4:	fa03 f506 	lsl.w	r5, r3, r6
 80094c8:	432c      	orrs	r4, r5
 80094ca:	40d3      	lsrs	r3, r2
 80094cc:	6004      	str	r4, [r0, #0]
 80094ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80094d2:	4288      	cmp	r0, r1
 80094d4:	d3f4      	bcc.n	80094c0 <L_shift+0xc>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}

080094d8 <__match>:
 80094d8:	b530      	push	{r4, r5, lr}
 80094da:	6803      	ldr	r3, [r0, #0]
 80094dc:	3301      	adds	r3, #1
 80094de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094e2:	b914      	cbnz	r4, 80094ea <__match+0x12>
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	2001      	movs	r0, #1
 80094e8:	bd30      	pop	{r4, r5, pc}
 80094ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80094f2:	2d19      	cmp	r5, #25
 80094f4:	bf98      	it	ls
 80094f6:	3220      	addls	r2, #32
 80094f8:	42a2      	cmp	r2, r4
 80094fa:	d0f0      	beq.n	80094de <__match+0x6>
 80094fc:	2000      	movs	r0, #0
 80094fe:	e7f3      	b.n	80094e8 <__match+0x10>

08009500 <__hexnan>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	2500      	movs	r5, #0
 8009506:	680b      	ldr	r3, [r1, #0]
 8009508:	4682      	mov	sl, r0
 800950a:	115e      	asrs	r6, r3, #5
 800950c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009510:	f013 031f 	ands.w	r3, r3, #31
 8009514:	bf18      	it	ne
 8009516:	3604      	addne	r6, #4
 8009518:	1f37      	subs	r7, r6, #4
 800951a:	4690      	mov	r8, r2
 800951c:	46b9      	mov	r9, r7
 800951e:	463c      	mov	r4, r7
 8009520:	46ab      	mov	fp, r5
 8009522:	b087      	sub	sp, #28
 8009524:	6801      	ldr	r1, [r0, #0]
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	f846 5c04 	str.w	r5, [r6, #-4]
 800952c:	9502      	str	r5, [sp, #8]
 800952e:	784a      	ldrb	r2, [r1, #1]
 8009530:	1c4b      	adds	r3, r1, #1
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	b342      	cbz	r2, 8009588 <__hexnan+0x88>
 8009536:	4610      	mov	r0, r2
 8009538:	9105      	str	r1, [sp, #20]
 800953a:	9204      	str	r2, [sp, #16]
 800953c:	f7ff fd95 	bl	800906a <__hexdig_fun>
 8009540:	2800      	cmp	r0, #0
 8009542:	d151      	bne.n	80095e8 <__hexnan+0xe8>
 8009544:	9a04      	ldr	r2, [sp, #16]
 8009546:	9905      	ldr	r1, [sp, #20]
 8009548:	2a20      	cmp	r2, #32
 800954a:	d818      	bhi.n	800957e <__hexnan+0x7e>
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	459b      	cmp	fp, r3
 8009550:	dd13      	ble.n	800957a <__hexnan+0x7a>
 8009552:	454c      	cmp	r4, r9
 8009554:	d206      	bcs.n	8009564 <__hexnan+0x64>
 8009556:	2d07      	cmp	r5, #7
 8009558:	dc04      	bgt.n	8009564 <__hexnan+0x64>
 800955a:	462a      	mov	r2, r5
 800955c:	4649      	mov	r1, r9
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff ffa8 	bl	80094b4 <L_shift>
 8009564:	4544      	cmp	r4, r8
 8009566:	d952      	bls.n	800960e <__hexnan+0x10e>
 8009568:	2300      	movs	r3, #0
 800956a:	f1a4 0904 	sub.w	r9, r4, #4
 800956e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009572:	461d      	mov	r5, r3
 8009574:	464c      	mov	r4, r9
 8009576:	f8cd b008 	str.w	fp, [sp, #8]
 800957a:	9903      	ldr	r1, [sp, #12]
 800957c:	e7d7      	b.n	800952e <__hexnan+0x2e>
 800957e:	2a29      	cmp	r2, #41	@ 0x29
 8009580:	d157      	bne.n	8009632 <__hexnan+0x132>
 8009582:	3102      	adds	r1, #2
 8009584:	f8ca 1000 	str.w	r1, [sl]
 8009588:	f1bb 0f00 	cmp.w	fp, #0
 800958c:	d051      	beq.n	8009632 <__hexnan+0x132>
 800958e:	454c      	cmp	r4, r9
 8009590:	d206      	bcs.n	80095a0 <__hexnan+0xa0>
 8009592:	2d07      	cmp	r5, #7
 8009594:	dc04      	bgt.n	80095a0 <__hexnan+0xa0>
 8009596:	462a      	mov	r2, r5
 8009598:	4649      	mov	r1, r9
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff ff8a 	bl	80094b4 <L_shift>
 80095a0:	4544      	cmp	r4, r8
 80095a2:	d936      	bls.n	8009612 <__hexnan+0x112>
 80095a4:	4623      	mov	r3, r4
 80095a6:	f1a8 0204 	sub.w	r2, r8, #4
 80095aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80095ae:	429f      	cmp	r7, r3
 80095b0:	f842 1f04 	str.w	r1, [r2, #4]!
 80095b4:	d2f9      	bcs.n	80095aa <__hexnan+0xaa>
 80095b6:	1b3b      	subs	r3, r7, r4
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	3304      	adds	r3, #4
 80095be:	3401      	adds	r4, #1
 80095c0:	3e03      	subs	r6, #3
 80095c2:	42b4      	cmp	r4, r6
 80095c4:	bf88      	it	hi
 80095c6:	2304      	movhi	r3, #4
 80095c8:	2200      	movs	r2, #0
 80095ca:	4443      	add	r3, r8
 80095cc:	f843 2b04 	str.w	r2, [r3], #4
 80095d0:	429f      	cmp	r7, r3
 80095d2:	d2fb      	bcs.n	80095cc <__hexnan+0xcc>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	b91b      	cbnz	r3, 80095e0 <__hexnan+0xe0>
 80095d8:	4547      	cmp	r7, r8
 80095da:	d128      	bne.n	800962e <__hexnan+0x12e>
 80095dc:	2301      	movs	r3, #1
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	2005      	movs	r0, #5
 80095e2:	b007      	add	sp, #28
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	3501      	adds	r5, #1
 80095ea:	2d08      	cmp	r5, #8
 80095ec:	f10b 0b01 	add.w	fp, fp, #1
 80095f0:	dd06      	ble.n	8009600 <__hexnan+0x100>
 80095f2:	4544      	cmp	r4, r8
 80095f4:	d9c1      	bls.n	800957a <__hexnan+0x7a>
 80095f6:	2300      	movs	r3, #0
 80095f8:	2501      	movs	r5, #1
 80095fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80095fe:	3c04      	subs	r4, #4
 8009600:	6822      	ldr	r2, [r4, #0]
 8009602:	f000 000f 	and.w	r0, r0, #15
 8009606:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800960a:	6020      	str	r0, [r4, #0]
 800960c:	e7b5      	b.n	800957a <__hexnan+0x7a>
 800960e:	2508      	movs	r5, #8
 8009610:	e7b3      	b.n	800957a <__hexnan+0x7a>
 8009612:	9b01      	ldr	r3, [sp, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0dd      	beq.n	80095d4 <__hexnan+0xd4>
 8009618:	f04f 32ff 	mov.w	r2, #4294967295
 800961c:	f1c3 0320 	rsb	r3, r3, #32
 8009620:	40da      	lsrs	r2, r3
 8009622:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009626:	4013      	ands	r3, r2
 8009628:	f846 3c04 	str.w	r3, [r6, #-4]
 800962c:	e7d2      	b.n	80095d4 <__hexnan+0xd4>
 800962e:	3f04      	subs	r7, #4
 8009630:	e7d0      	b.n	80095d4 <__hexnan+0xd4>
 8009632:	2004      	movs	r0, #4
 8009634:	e7d5      	b.n	80095e2 <__hexnan+0xe2>

08009636 <__ascii_mbtowc>:
 8009636:	b082      	sub	sp, #8
 8009638:	b901      	cbnz	r1, 800963c <__ascii_mbtowc+0x6>
 800963a:	a901      	add	r1, sp, #4
 800963c:	b142      	cbz	r2, 8009650 <__ascii_mbtowc+0x1a>
 800963e:	b14b      	cbz	r3, 8009654 <__ascii_mbtowc+0x1e>
 8009640:	7813      	ldrb	r3, [r2, #0]
 8009642:	600b      	str	r3, [r1, #0]
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	1e10      	subs	r0, r2, #0
 8009648:	bf18      	it	ne
 800964a:	2001      	movne	r0, #1
 800964c:	b002      	add	sp, #8
 800964e:	4770      	bx	lr
 8009650:	4610      	mov	r0, r2
 8009652:	e7fb      	b.n	800964c <__ascii_mbtowc+0x16>
 8009654:	f06f 0001 	mvn.w	r0, #1
 8009658:	e7f8      	b.n	800964c <__ascii_mbtowc+0x16>

0800965a <_realloc_r>:
 800965a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965e:	4607      	mov	r7, r0
 8009660:	4614      	mov	r4, r2
 8009662:	460d      	mov	r5, r1
 8009664:	b921      	cbnz	r1, 8009670 <_realloc_r+0x16>
 8009666:	4611      	mov	r1, r2
 8009668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800966c:	f7fd bf0e 	b.w	800748c <_malloc_r>
 8009670:	b92a      	cbnz	r2, 800967e <_realloc_r+0x24>
 8009672:	f7fd fe99 	bl	80073a8 <_free_r>
 8009676:	4625      	mov	r5, r4
 8009678:	4628      	mov	r0, r5
 800967a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967e:	f000 f840 	bl	8009702 <_malloc_usable_size_r>
 8009682:	4284      	cmp	r4, r0
 8009684:	4606      	mov	r6, r0
 8009686:	d802      	bhi.n	800968e <_realloc_r+0x34>
 8009688:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800968c:	d8f4      	bhi.n	8009678 <_realloc_r+0x1e>
 800968e:	4621      	mov	r1, r4
 8009690:	4638      	mov	r0, r7
 8009692:	f7fd fefb 	bl	800748c <_malloc_r>
 8009696:	4680      	mov	r8, r0
 8009698:	b908      	cbnz	r0, 800969e <_realloc_r+0x44>
 800969a:	4645      	mov	r5, r8
 800969c:	e7ec      	b.n	8009678 <_realloc_r+0x1e>
 800969e:	42b4      	cmp	r4, r6
 80096a0:	4622      	mov	r2, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	bf28      	it	cs
 80096a6:	4632      	movcs	r2, r6
 80096a8:	f7ff fc46 	bl	8008f38 <memcpy>
 80096ac:	4629      	mov	r1, r5
 80096ae:	4638      	mov	r0, r7
 80096b0:	f7fd fe7a 	bl	80073a8 <_free_r>
 80096b4:	e7f1      	b.n	800969a <_realloc_r+0x40>

080096b6 <__ascii_wctomb>:
 80096b6:	4603      	mov	r3, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	b141      	cbz	r1, 80096ce <__ascii_wctomb+0x18>
 80096bc:	2aff      	cmp	r2, #255	@ 0xff
 80096be:	d904      	bls.n	80096ca <__ascii_wctomb+0x14>
 80096c0:	228a      	movs	r2, #138	@ 0x8a
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	4770      	bx	lr
 80096ca:	2001      	movs	r0, #1
 80096cc:	700a      	strb	r2, [r1, #0]
 80096ce:	4770      	bx	lr

080096d0 <fiprintf>:
 80096d0:	b40e      	push	{r1, r2, r3}
 80096d2:	b503      	push	{r0, r1, lr}
 80096d4:	4601      	mov	r1, r0
 80096d6:	ab03      	add	r3, sp, #12
 80096d8:	4805      	ldr	r0, [pc, #20]	@ (80096f0 <fiprintf+0x20>)
 80096da:	f853 2b04 	ldr.w	r2, [r3], #4
 80096de:	6800      	ldr	r0, [r0, #0]
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	f000 f83d 	bl	8009760 <_vfiprintf_r>
 80096e6:	b002      	add	sp, #8
 80096e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ec:	b003      	add	sp, #12
 80096ee:	4770      	bx	lr
 80096f0:	20000024 	.word	0x20000024

080096f4 <abort>:
 80096f4:	2006      	movs	r0, #6
 80096f6:	b508      	push	{r3, lr}
 80096f8:	f000 fa06 	bl	8009b08 <raise>
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7f9 fa64 	bl	8002bca <_exit>

08009702 <_malloc_usable_size_r>:
 8009702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009706:	1f18      	subs	r0, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbc      	itt	lt
 800970c:	580b      	ldrlt	r3, [r1, r0]
 800970e:	18c0      	addlt	r0, r0, r3
 8009710:	4770      	bx	lr

08009712 <__sfputc_r>:
 8009712:	6893      	ldr	r3, [r2, #8]
 8009714:	b410      	push	{r4}
 8009716:	3b01      	subs	r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	6093      	str	r3, [r2, #8]
 800971c:	da07      	bge.n	800972e <__sfputc_r+0x1c>
 800971e:	6994      	ldr	r4, [r2, #24]
 8009720:	42a3      	cmp	r3, r4
 8009722:	db01      	blt.n	8009728 <__sfputc_r+0x16>
 8009724:	290a      	cmp	r1, #10
 8009726:	d102      	bne.n	800972e <__sfputc_r+0x1c>
 8009728:	bc10      	pop	{r4}
 800972a:	f000 b931 	b.w	8009990 <__swbuf_r>
 800972e:	6813      	ldr	r3, [r2, #0]
 8009730:	1c58      	adds	r0, r3, #1
 8009732:	6010      	str	r0, [r2, #0]
 8009734:	7019      	strb	r1, [r3, #0]
 8009736:	4608      	mov	r0, r1
 8009738:	bc10      	pop	{r4}
 800973a:	4770      	bx	lr

0800973c <__sfputs_r>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	4614      	mov	r4, r2
 8009744:	18d5      	adds	r5, r2, r3
 8009746:	42ac      	cmp	r4, r5
 8009748:	d101      	bne.n	800974e <__sfputs_r+0x12>
 800974a:	2000      	movs	r0, #0
 800974c:	e007      	b.n	800975e <__sfputs_r+0x22>
 800974e:	463a      	mov	r2, r7
 8009750:	4630      	mov	r0, r6
 8009752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009756:	f7ff ffdc 	bl	8009712 <__sfputc_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d1f3      	bne.n	8009746 <__sfputs_r+0xa>
 800975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009760 <_vfiprintf_r>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	460d      	mov	r5, r1
 8009766:	4614      	mov	r4, r2
 8009768:	4698      	mov	r8, r3
 800976a:	4606      	mov	r6, r0
 800976c:	b09d      	sub	sp, #116	@ 0x74
 800976e:	b118      	cbz	r0, 8009778 <_vfiprintf_r+0x18>
 8009770:	6a03      	ldr	r3, [r0, #32]
 8009772:	b90b      	cbnz	r3, 8009778 <_vfiprintf_r+0x18>
 8009774:	f7fc fe6e 	bl	8006454 <__sinit>
 8009778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800977a:	07d9      	lsls	r1, r3, #31
 800977c:	d405      	bmi.n	800978a <_vfiprintf_r+0x2a>
 800977e:	89ab      	ldrh	r3, [r5, #12]
 8009780:	059a      	lsls	r2, r3, #22
 8009782:	d402      	bmi.n	800978a <_vfiprintf_r+0x2a>
 8009784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009786:	f7fc ff9e 	bl	80066c6 <__retarget_lock_acquire_recursive>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	071b      	lsls	r3, r3, #28
 800978e:	d501      	bpl.n	8009794 <_vfiprintf_r+0x34>
 8009790:	692b      	ldr	r3, [r5, #16]
 8009792:	b99b      	cbnz	r3, 80097bc <_vfiprintf_r+0x5c>
 8009794:	4629      	mov	r1, r5
 8009796:	4630      	mov	r0, r6
 8009798:	f000 f938 	bl	8009a0c <__swsetup_r>
 800979c:	b170      	cbz	r0, 80097bc <_vfiprintf_r+0x5c>
 800979e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097a0:	07dc      	lsls	r4, r3, #31
 80097a2:	d504      	bpl.n	80097ae <_vfiprintf_r+0x4e>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	b01d      	add	sp, #116	@ 0x74
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	89ab      	ldrh	r3, [r5, #12]
 80097b0:	0598      	lsls	r0, r3, #22
 80097b2:	d4f7      	bmi.n	80097a4 <_vfiprintf_r+0x44>
 80097b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097b6:	f7fc ff87 	bl	80066c8 <__retarget_lock_release_recursive>
 80097ba:	e7f3      	b.n	80097a4 <_vfiprintf_r+0x44>
 80097bc:	2300      	movs	r3, #0
 80097be:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c0:	2320      	movs	r3, #32
 80097c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097c6:	2330      	movs	r3, #48	@ 0x30
 80097c8:	f04f 0901 	mov.w	r9, #1
 80097cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800997c <_vfiprintf_r+0x21c>
 80097d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097d8:	4623      	mov	r3, r4
 80097da:	469a      	mov	sl, r3
 80097dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e0:	b10a      	cbz	r2, 80097e6 <_vfiprintf_r+0x86>
 80097e2:	2a25      	cmp	r2, #37	@ 0x25
 80097e4:	d1f9      	bne.n	80097da <_vfiprintf_r+0x7a>
 80097e6:	ebba 0b04 	subs.w	fp, sl, r4
 80097ea:	d00b      	beq.n	8009804 <_vfiprintf_r+0xa4>
 80097ec:	465b      	mov	r3, fp
 80097ee:	4622      	mov	r2, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ffa2 	bl	800973c <__sfputs_r>
 80097f8:	3001      	adds	r0, #1
 80097fa:	f000 80a7 	beq.w	800994c <_vfiprintf_r+0x1ec>
 80097fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009800:	445a      	add	r2, fp
 8009802:	9209      	str	r2, [sp, #36]	@ 0x24
 8009804:	f89a 3000 	ldrb.w	r3, [sl]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 809f 	beq.w	800994c <_vfiprintf_r+0x1ec>
 800980e:	2300      	movs	r3, #0
 8009810:	f04f 32ff 	mov.w	r2, #4294967295
 8009814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009818:	f10a 0a01 	add.w	sl, sl, #1
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009824:	931a      	str	r3, [sp, #104]	@ 0x68
 8009826:	4654      	mov	r4, sl
 8009828:	2205      	movs	r2, #5
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4853      	ldr	r0, [pc, #332]	@ (800997c <_vfiprintf_r+0x21c>)
 8009830:	f7fc ff4b 	bl	80066ca <memchr>
 8009834:	9a04      	ldr	r2, [sp, #16]
 8009836:	b9d8      	cbnz	r0, 8009870 <_vfiprintf_r+0x110>
 8009838:	06d1      	lsls	r1, r2, #27
 800983a:	bf44      	itt	mi
 800983c:	2320      	movmi	r3, #32
 800983e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009842:	0713      	lsls	r3, r2, #28
 8009844:	bf44      	itt	mi
 8009846:	232b      	movmi	r3, #43	@ 0x2b
 8009848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984c:	f89a 3000 	ldrb.w	r3, [sl]
 8009850:	2b2a      	cmp	r3, #42	@ 0x2a
 8009852:	d015      	beq.n	8009880 <_vfiprintf_r+0x120>
 8009854:	4654      	mov	r4, sl
 8009856:	2000      	movs	r0, #0
 8009858:	f04f 0c0a 	mov.w	ip, #10
 800985c:	9a07      	ldr	r2, [sp, #28]
 800985e:	4621      	mov	r1, r4
 8009860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009864:	3b30      	subs	r3, #48	@ 0x30
 8009866:	2b09      	cmp	r3, #9
 8009868:	d94b      	bls.n	8009902 <_vfiprintf_r+0x1a2>
 800986a:	b1b0      	cbz	r0, 800989a <_vfiprintf_r+0x13a>
 800986c:	9207      	str	r2, [sp, #28]
 800986e:	e014      	b.n	800989a <_vfiprintf_r+0x13a>
 8009870:	eba0 0308 	sub.w	r3, r0, r8
 8009874:	fa09 f303 	lsl.w	r3, r9, r3
 8009878:	4313      	orrs	r3, r2
 800987a:	46a2      	mov	sl, r4
 800987c:	9304      	str	r3, [sp, #16]
 800987e:	e7d2      	b.n	8009826 <_vfiprintf_r+0xc6>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	1d19      	adds	r1, r3, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	9103      	str	r1, [sp, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfbb      	ittet	lt
 800988c:	425b      	neglt	r3, r3
 800988e:	f042 0202 	orrlt.w	r2, r2, #2
 8009892:	9307      	strge	r3, [sp, #28]
 8009894:	9307      	strlt	r3, [sp, #28]
 8009896:	bfb8      	it	lt
 8009898:	9204      	strlt	r2, [sp, #16]
 800989a:	7823      	ldrb	r3, [r4, #0]
 800989c:	2b2e      	cmp	r3, #46	@ 0x2e
 800989e:	d10a      	bne.n	80098b6 <_vfiprintf_r+0x156>
 80098a0:	7863      	ldrb	r3, [r4, #1]
 80098a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a4:	d132      	bne.n	800990c <_vfiprintf_r+0x1ac>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	3402      	adds	r4, #2
 80098aa:	1d1a      	adds	r2, r3, #4
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	9203      	str	r2, [sp, #12]
 80098b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009980 <_vfiprintf_r+0x220>
 80098ba:	2203      	movs	r2, #3
 80098bc:	4650      	mov	r0, sl
 80098be:	7821      	ldrb	r1, [r4, #0]
 80098c0:	f7fc ff03 	bl	80066ca <memchr>
 80098c4:	b138      	cbz	r0, 80098d6 <_vfiprintf_r+0x176>
 80098c6:	2240      	movs	r2, #64	@ 0x40
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	eba0 000a 	sub.w	r0, r0, sl
 80098ce:	4082      	lsls	r2, r0
 80098d0:	4313      	orrs	r3, r2
 80098d2:	3401      	adds	r4, #1
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098da:	2206      	movs	r2, #6
 80098dc:	4829      	ldr	r0, [pc, #164]	@ (8009984 <_vfiprintf_r+0x224>)
 80098de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098e2:	f7fc fef2 	bl	80066ca <memchr>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d03f      	beq.n	800996a <_vfiprintf_r+0x20a>
 80098ea:	4b27      	ldr	r3, [pc, #156]	@ (8009988 <_vfiprintf_r+0x228>)
 80098ec:	bb1b      	cbnz	r3, 8009936 <_vfiprintf_r+0x1d6>
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	3307      	adds	r3, #7
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	3308      	adds	r3, #8
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fc:	443b      	add	r3, r7
 80098fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009900:	e76a      	b.n	80097d8 <_vfiprintf_r+0x78>
 8009902:	460c      	mov	r4, r1
 8009904:	2001      	movs	r0, #1
 8009906:	fb0c 3202 	mla	r2, ip, r2, r3
 800990a:	e7a8      	b.n	800985e <_vfiprintf_r+0xfe>
 800990c:	2300      	movs	r3, #0
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4619      	mov	r1, r3
 8009914:	3401      	adds	r4, #1
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	4620      	mov	r0, r4
 800991a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991e:	3a30      	subs	r2, #48	@ 0x30
 8009920:	2a09      	cmp	r2, #9
 8009922:	d903      	bls.n	800992c <_vfiprintf_r+0x1cc>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0c6      	beq.n	80098b6 <_vfiprintf_r+0x156>
 8009928:	9105      	str	r1, [sp, #20]
 800992a:	e7c4      	b.n	80098b6 <_vfiprintf_r+0x156>
 800992c:	4604      	mov	r4, r0
 800992e:	2301      	movs	r3, #1
 8009930:	fb0c 2101 	mla	r1, ip, r1, r2
 8009934:	e7f0      	b.n	8009918 <_vfiprintf_r+0x1b8>
 8009936:	ab03      	add	r3, sp, #12
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	462a      	mov	r2, r5
 800993c:	4630      	mov	r0, r6
 800993e:	4b13      	ldr	r3, [pc, #76]	@ (800998c <_vfiprintf_r+0x22c>)
 8009940:	a904      	add	r1, sp, #16
 8009942:	f7fb ff35 	bl	80057b0 <_printf_float>
 8009946:	4607      	mov	r7, r0
 8009948:	1c78      	adds	r0, r7, #1
 800994a:	d1d6      	bne.n	80098fa <_vfiprintf_r+0x19a>
 800994c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800994e:	07d9      	lsls	r1, r3, #31
 8009950:	d405      	bmi.n	800995e <_vfiprintf_r+0x1fe>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	059a      	lsls	r2, r3, #22
 8009956:	d402      	bmi.n	800995e <_vfiprintf_r+0x1fe>
 8009958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800995a:	f7fc feb5 	bl	80066c8 <__retarget_lock_release_recursive>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	065b      	lsls	r3, r3, #25
 8009962:	f53f af1f 	bmi.w	80097a4 <_vfiprintf_r+0x44>
 8009966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009968:	e71e      	b.n	80097a8 <_vfiprintf_r+0x48>
 800996a:	ab03      	add	r3, sp, #12
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	462a      	mov	r2, r5
 8009970:	4630      	mov	r0, r6
 8009972:	4b06      	ldr	r3, [pc, #24]	@ (800998c <_vfiprintf_r+0x22c>)
 8009974:	a904      	add	r1, sp, #16
 8009976:	f7fc f9b9 	bl	8005cec <_printf_i>
 800997a:	e7e4      	b.n	8009946 <_vfiprintf_r+0x1e6>
 800997c:	0800a9f8 	.word	0x0800a9f8
 8009980:	0800a9fe 	.word	0x0800a9fe
 8009984:	0800aa02 	.word	0x0800aa02
 8009988:	080057b1 	.word	0x080057b1
 800998c:	0800973d 	.word	0x0800973d

08009990 <__swbuf_r>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	460e      	mov	r6, r1
 8009994:	4614      	mov	r4, r2
 8009996:	4605      	mov	r5, r0
 8009998:	b118      	cbz	r0, 80099a2 <__swbuf_r+0x12>
 800999a:	6a03      	ldr	r3, [r0, #32]
 800999c:	b90b      	cbnz	r3, 80099a2 <__swbuf_r+0x12>
 800999e:	f7fc fd59 	bl	8006454 <__sinit>
 80099a2:	69a3      	ldr	r3, [r4, #24]
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	071a      	lsls	r2, r3, #28
 80099aa:	d501      	bpl.n	80099b0 <__swbuf_r+0x20>
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	b943      	cbnz	r3, 80099c2 <__swbuf_r+0x32>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4628      	mov	r0, r5
 80099b4:	f000 f82a 	bl	8009a0c <__swsetup_r>
 80099b8:	b118      	cbz	r0, 80099c2 <__swbuf_r+0x32>
 80099ba:	f04f 37ff 	mov.w	r7, #4294967295
 80099be:	4638      	mov	r0, r7
 80099c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	b2f6      	uxtb	r6, r6
 80099c8:	1a98      	subs	r0, r3, r2
 80099ca:	6963      	ldr	r3, [r4, #20]
 80099cc:	4637      	mov	r7, r6
 80099ce:	4283      	cmp	r3, r0
 80099d0:	dc05      	bgt.n	80099de <__swbuf_r+0x4e>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4628      	mov	r0, r5
 80099d6:	f7ff fa5d 	bl	8008e94 <_fflush_r>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d1ed      	bne.n	80099ba <__swbuf_r+0x2a>
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	60a3      	str	r3, [r4, #8]
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	6022      	str	r2, [r4, #0]
 80099ea:	701e      	strb	r6, [r3, #0]
 80099ec:	6962      	ldr	r2, [r4, #20]
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d004      	beq.n	80099fe <__swbuf_r+0x6e>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	07db      	lsls	r3, r3, #31
 80099f8:	d5e1      	bpl.n	80099be <__swbuf_r+0x2e>
 80099fa:	2e0a      	cmp	r6, #10
 80099fc:	d1df      	bne.n	80099be <__swbuf_r+0x2e>
 80099fe:	4621      	mov	r1, r4
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7ff fa47 	bl	8008e94 <_fflush_r>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d0d9      	beq.n	80099be <__swbuf_r+0x2e>
 8009a0a:	e7d6      	b.n	80099ba <__swbuf_r+0x2a>

08009a0c <__swsetup_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4b29      	ldr	r3, [pc, #164]	@ (8009ab4 <__swsetup_r+0xa8>)
 8009a10:	4605      	mov	r5, r0
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	460c      	mov	r4, r1
 8009a16:	b118      	cbz	r0, 8009a20 <__swsetup_r+0x14>
 8009a18:	6a03      	ldr	r3, [r0, #32]
 8009a1a:	b90b      	cbnz	r3, 8009a20 <__swsetup_r+0x14>
 8009a1c:	f7fc fd1a 	bl	8006454 <__sinit>
 8009a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a24:	0719      	lsls	r1, r3, #28
 8009a26:	d422      	bmi.n	8009a6e <__swsetup_r+0x62>
 8009a28:	06da      	lsls	r2, r3, #27
 8009a2a:	d407      	bmi.n	8009a3c <__swsetup_r+0x30>
 8009a2c:	2209      	movs	r2, #9
 8009a2e:	602a      	str	r2, [r5, #0]
 8009a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e033      	b.n	8009aa4 <__swsetup_r+0x98>
 8009a3c:	0758      	lsls	r0, r3, #29
 8009a3e:	d512      	bpl.n	8009a66 <__swsetup_r+0x5a>
 8009a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a42:	b141      	cbz	r1, 8009a56 <__swsetup_r+0x4a>
 8009a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	d002      	beq.n	8009a52 <__swsetup_r+0x46>
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7fd fcab 	bl	80073a8 <_free_r>
 8009a52:	2300      	movs	r3, #0
 8009a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0308 	orr.w	r3, r3, #8
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	b94b      	cbnz	r3, 8009a86 <__swsetup_r+0x7a>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a7c:	d003      	beq.n	8009a86 <__swsetup_r+0x7a>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 f882 	bl	8009b8a <__smakebuf_r>
 8009a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8a:	f013 0201 	ands.w	r2, r3, #1
 8009a8e:	d00a      	beq.n	8009aa6 <__swsetup_r+0x9a>
 8009a90:	2200      	movs	r2, #0
 8009a92:	60a2      	str	r2, [r4, #8]
 8009a94:	6962      	ldr	r2, [r4, #20]
 8009a96:	4252      	negs	r2, r2
 8009a98:	61a2      	str	r2, [r4, #24]
 8009a9a:	6922      	ldr	r2, [r4, #16]
 8009a9c:	b942      	cbnz	r2, 8009ab0 <__swsetup_r+0xa4>
 8009a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009aa2:	d1c5      	bne.n	8009a30 <__swsetup_r+0x24>
 8009aa4:	bd38      	pop	{r3, r4, r5, pc}
 8009aa6:	0799      	lsls	r1, r3, #30
 8009aa8:	bf58      	it	pl
 8009aaa:	6962      	ldrpl	r2, [r4, #20]
 8009aac:	60a2      	str	r2, [r4, #8]
 8009aae:	e7f4      	b.n	8009a9a <__swsetup_r+0x8e>
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e7f7      	b.n	8009aa4 <__swsetup_r+0x98>
 8009ab4:	20000024 	.word	0x20000024

08009ab8 <_raise_r>:
 8009ab8:	291f      	cmp	r1, #31
 8009aba:	b538      	push	{r3, r4, r5, lr}
 8009abc:	4605      	mov	r5, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	d904      	bls.n	8009acc <_raise_r+0x14>
 8009ac2:	2316      	movs	r3, #22
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ace:	b112      	cbz	r2, 8009ad6 <_raise_r+0x1e>
 8009ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ad4:	b94b      	cbnz	r3, 8009aea <_raise_r+0x32>
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 f830 	bl	8009b3c <_getpid_r>
 8009adc:	4622      	mov	r2, r4
 8009ade:	4601      	mov	r1, r0
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ae6:	f000 b817 	b.w	8009b18 <_kill_r>
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d00a      	beq.n	8009b04 <_raise_r+0x4c>
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	d103      	bne.n	8009afa <_raise_r+0x42>
 8009af2:	2316      	movs	r3, #22
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	2001      	movs	r0, #1
 8009af8:	e7e7      	b.n	8009aca <_raise_r+0x12>
 8009afa:	2100      	movs	r1, #0
 8009afc:	4620      	mov	r0, r4
 8009afe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b02:	4798      	blx	r3
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7e0      	b.n	8009aca <_raise_r+0x12>

08009b08 <raise>:
 8009b08:	4b02      	ldr	r3, [pc, #8]	@ (8009b14 <raise+0xc>)
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f7ff bfd3 	b.w	8009ab8 <_raise_r>
 8009b12:	bf00      	nop
 8009b14:	20000024 	.word	0x20000024

08009b18 <_kill_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4d06      	ldr	r5, [pc, #24]	@ (8009b38 <_kill_r+0x20>)
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	4611      	mov	r1, r2
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	f7f9 f840 	bl	8002baa <_kill>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d102      	bne.n	8009b34 <_kill_r+0x1c>
 8009b2e:	682b      	ldr	r3, [r5, #0]
 8009b30:	b103      	cbz	r3, 8009b34 <_kill_r+0x1c>
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	200008a8 	.word	0x200008a8

08009b3c <_getpid_r>:
 8009b3c:	f7f9 b82e 	b.w	8002b9c <_getpid>

08009b40 <__swhatbuf_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	4615      	mov	r5, r2
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	461e      	mov	r6, r3
 8009b4e:	b096      	sub	sp, #88	@ 0x58
 8009b50:	da0c      	bge.n	8009b6c <__swhatbuf_r+0x2c>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	2100      	movs	r1, #0
 8009b56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b5a:	bf14      	ite	ne
 8009b5c:	2340      	movne	r3, #64	@ 0x40
 8009b5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b62:	2000      	movs	r0, #0
 8009b64:	6031      	str	r1, [r6, #0]
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	b016      	add	sp, #88	@ 0x58
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	466a      	mov	r2, sp
 8009b6e:	f000 f849 	bl	8009c04 <_fstat_r>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	dbed      	blt.n	8009b52 <__swhatbuf_r+0x12>
 8009b76:	9901      	ldr	r1, [sp, #4]
 8009b78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b80:	4259      	negs	r1, r3
 8009b82:	4159      	adcs	r1, r3
 8009b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b88:	e7eb      	b.n	8009b62 <__swhatbuf_r+0x22>

08009b8a <__smakebuf_r>:
 8009b8a:	898b      	ldrh	r3, [r1, #12]
 8009b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b8e:	079d      	lsls	r5, r3, #30
 8009b90:	4606      	mov	r6, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	d507      	bpl.n	8009ba6 <__smakebuf_r+0x1c>
 8009b96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	6163      	str	r3, [r4, #20]
 8009ba2:	b003      	add	sp, #12
 8009ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba6:	466a      	mov	r2, sp
 8009ba8:	ab01      	add	r3, sp, #4
 8009baa:	f7ff ffc9 	bl	8009b40 <__swhatbuf_r>
 8009bae:	9f00      	ldr	r7, [sp, #0]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7fd fc69 	bl	800748c <_malloc_r>
 8009bba:	b948      	cbnz	r0, 8009bd0 <__smakebuf_r+0x46>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	059a      	lsls	r2, r3, #22
 8009bc2:	d4ee      	bmi.n	8009ba2 <__smakebuf_r+0x18>
 8009bc4:	f023 0303 	bic.w	r3, r3, #3
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	e7e2      	b.n	8009b96 <__smakebuf_r+0xc>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	6020      	str	r0, [r4, #0]
 8009be0:	b15b      	cbz	r3, 8009bfa <__smakebuf_r+0x70>
 8009be2:	4630      	mov	r0, r6
 8009be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be8:	f000 f81e 	bl	8009c28 <_isatty_r>
 8009bec:	b128      	cbz	r0, 8009bfa <__smakebuf_r+0x70>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f023 0303 	bic.w	r3, r3, #3
 8009bf4:	f043 0301 	orr.w	r3, r3, #1
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	431d      	orrs	r5, r3
 8009bfe:	81a5      	strh	r5, [r4, #12]
 8009c00:	e7cf      	b.n	8009ba2 <__smakebuf_r+0x18>
	...

08009c04 <_fstat_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	2300      	movs	r3, #0
 8009c08:	4d06      	ldr	r5, [pc, #24]	@ (8009c24 <_fstat_r+0x20>)
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	f7f9 f829 	bl	8002c68 <_fstat>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d102      	bne.n	8009c20 <_fstat_r+0x1c>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b103      	cbz	r3, 8009c20 <_fstat_r+0x1c>
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	bd38      	pop	{r3, r4, r5, pc}
 8009c22:	bf00      	nop
 8009c24:	200008a8 	.word	0x200008a8

08009c28 <_isatty_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	4d05      	ldr	r5, [pc, #20]	@ (8009c44 <_isatty_r+0x1c>)
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f9 f827 	bl	8002c86 <_isatty>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_isatty_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_isatty_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	200008a8 	.word	0x200008a8

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
