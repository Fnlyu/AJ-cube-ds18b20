
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  08008b60  08008b60  00009b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099fc  080099fc  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080099fc  080099fc  0000a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a04  08009a04  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a04  08009a04  0000aa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a08  08009a08  0000aa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009a0c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200001d4  08009be0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08009be0  0000b85c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad6c  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  00015f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00017f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085c  00000000  00000000  000189e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d4  00000000  00000000  0001923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4fa  00000000  00000000  00031810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867be  00000000  00000000  0003fd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c64c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  000c650c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ca6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b44 	.word	0x08008b44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008b44 	.word	0x08008b44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_DQ_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2112      	movs	r1, #18
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011de:	f001 fe62 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011fa:	f001 fcb9 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80011fe:	2310      	movs	r3, #16
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001216:	f001 fcab 	bl	8002b70 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C1_Init+0x50>)
 800126a:	f001 fe35 	bl	8002ed8 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 fdd3 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f0 	.word	0x200001f0
 8001280:	40005400 	.word	0x40005400
 8001284:	00061a80 	.word	0x00061a80

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_I2C_MspInit+0x70>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d123      	bne.n	80012f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c0:	23c0      	movs	r3, #192	@ 0xc0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <HAL_I2C_MspInit+0x78>)
 80012d4:	f001 fc4c 	bl	8002b70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e2:	61d3      	str	r3, [r2, #28]
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00

08001304 <RELAY_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 初始化继电器控制引脚
void RELAY_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2110      	movs	r1, #16
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <RELAY_Init+0x14>)
 800130e:	f001 fdca 	bl	8002ea6 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40010800 	.word	0x40010800

0800131c <RELAY_Control>:

// 控制继电器状态
void RELAY_Control(uint8_t state)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2110      	movs	r1, #16
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <RELAY_Control+0x28>)
 8001338:	f001 fdb5 	bl	8002ea6 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010800 	.word	0x40010800

08001348 <Delay_us>:

// 微秒级延时函数 (保持不变)
void Delay_us(uint16_t us)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  us *= 6;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	461a      	mov	r2, r3
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	80fb      	strh	r3, [r7, #6]
  while (us--)
 800135e:	e007      	b.n	8001370 <Delay_us+0x28>
  {
    __NOP();
 8001360:	bf00      	nop
    __NOP();
 8001362:	bf00      	nop
    __NOP();
 8001364:	bf00      	nop
    __NOP();
 8001366:	bf00      	nop
    __NOP();
 8001368:	bf00      	nop
    __NOP();
 800136a:	bf00      	nop
    __NOP();
 800136c:	bf00      	nop
    __NOP();
 800136e:	bf00      	nop
  while (us--)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	80fa      	strh	r2, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f2      	bne.n	8001360 <Delay_us+0x18>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <DS18B20_WriteBit>:

// 写1位数据 (保持不变)
void DS18B20_WriteBit(uint8_t bit)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2102      	movs	r1, #2
 8001396:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 8001398:	f001 fd85 	bl	8002ea6 <HAL_GPIO_WritePin>
  Delay_us(1); // t_low1: 1-15us
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ffd3 	bl	8001348 <Delay_us>
  if (bit)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <DS18B20_WriteBit+0x2a>
  {
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 写1
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013ae:	f001 fd7a 	bl	8002ea6 <HAL_GPIO_WritePin>
  }
  else
  {
    // 保持低电平即可写0
  }
  Delay_us(60);                                               // t_slot: 60-120us
 80013b2:	203c      	movs	r0, #60	@ 0x3c
 80013b4:	f7ff ffc8 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 80013b8:	2201      	movs	r2, #1
 80013ba:	2102      	movs	r1, #2
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013be:	f001 fd72 	bl	8002ea6 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_rec: >1us
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ffc0 	bl	8001348 <Delay_us>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800

080013d4 <DS18B20_ReadBit>:

// 读1位数据 (保持不变)
uint8_t DS18B20_ReadBit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013e4:	f001 fd5f 	bl	8002ea6 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_low0: 1-15us
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ffad 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线，由从机拉低或保持高电平
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013f4:	f001 fd57 	bl	8002ea6 <HAL_GPIO_WritePin>
  Delay_us(10);                                               // t_rdv: <15us (在15us内采样)
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ffa5 	bl	8001348 <Delay_us>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80013fe:	2102      	movs	r1, #2
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 8001402:	f001 fd39 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <DS18B20_ReadBit+0x3c>
  {
    bit = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  }
  Delay_us(50); // 等待时间片结束 (60-120us)
 8001410:	2032      	movs	r0, #50	@ 0x32
 8001412:	f7ff ff99 	bl	8001348 <Delay_us>
  return bit;
 8001416:	79fb      	ldrb	r3, [r7, #7]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40010800 	.word	0x40010800

08001424 <DS18B20_WriteByte>:

// 向DS18B20写入1字节 (保持不变)
void DS18B20_WriteByte(uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e00c      	b.n	800144e <DS18B20_WriteByte+0x2a>
  {
    DS18B20_WriteBit(data & 0x01);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffa3 	bl	8001388 <DS18B20_WriteBit>
    data >>= 1;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d9ef      	bls.n	8001434 <DS18B20_WriteByte+0x10>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <DS18B20_ReadByte>:

// 从DS18B20读取1字节 (保持不变)
uint8_t DS18B20_ReadByte(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	71bb      	strb	r3, [r7, #6]
 800146c:	e00e      	b.n	800148c <DS18B20_ReadByte+0x2e>
  {
    data >>= 1;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	71fb      	strb	r3, [r7, #7]
    if (DS18B20_ReadBit())
 8001474:	f7ff ffae 	bl	80013d4 <DS18B20_ReadBit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <DS18B20_ReadByte+0x28>
    {
      data |= 0x80;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001484:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	3301      	adds	r3, #1
 800148a:	71bb      	strb	r3, [r7, #6]
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9ed      	bls.n	800146e <DS18B20_ReadByte+0x10>
    }
  }
  return data;
 8001492:	79fb      	ldrb	r3, [r7, #7]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <DS18B20_Reset>:

// 复位DS18B20 (保持不变)
// 返回 0 表示成功检测到存在脉冲, 1 表示无设备响应
uint8_t DS18B20_Reset(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  uint8_t status;
  // 配置为推挽输出
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DS18B20_PIN;
 80014ae:	2302      	movs	r3, #2
 80014b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	481e      	ldr	r0, [pc, #120]	@ (800153c <DS18B20_Reset+0xa0>)
 80014c4:	f001 fb54 	bl	8002b70 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	481b      	ldr	r0, [pc, #108]	@ (800153c <DS18B20_Reset+0xa0>)
 80014ce:	f001 fcea 	bl	8002ea6 <HAL_GPIO_WritePin>
  Delay_us(480); // 至少480us
 80014d2:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80014d6:	f7ff ff37 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2102      	movs	r1, #2
 80014de:	4817      	ldr	r0, [pc, #92]	@ (800153c <DS18B20_Reset+0xa0>)
 80014e0:	f001 fce1 	bl	8002ea6 <HAL_GPIO_WritePin>

  // 配置为浮空输入
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 或 GPIO_PULLUP，取决于外部上拉
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4812      	ldr	r0, [pc, #72]	@ (800153c <DS18B20_Reset+0xa0>)
 80014f2:	f001 fb3d 	bl	8002b70 <HAL_GPIO_Init>

  Delay_us(60);                                         // 等待15-60us后采样
 80014f6:	203c      	movs	r0, #60	@ 0x3c
 80014f8:	f7ff ff26 	bl	8001348 <Delay_us>
  status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN); // 读取存在脉冲 (低电平有效)
 80014fc:	2102      	movs	r1, #2
 80014fe:	480f      	ldr	r0, [pc, #60]	@ (800153c <DS18B20_Reset+0xa0>)
 8001500:	f001 fcba 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	75fb      	strb	r3, [r7, #23]
  Delay_us(420);                                        // 等待存在脉冲结束 (总共480us)
 8001508:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800150c:	f7ff ff1c 	bl	8001348 <Delay_us>

  // 恢复为推挽输出，准备后续通信
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <DS18B20_Reset+0xa0>)
 8001522:	f001 fb25 	bl	8002b70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 8001526:	2201      	movs	r2, #1
 8001528:	2102      	movs	r1, #2
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <DS18B20_Reset+0xa0>)
 800152c:	f001 fcbb 	bl	8002ea6 <HAL_GPIO_WritePin>

  return status; // 0=成功, 1=失败
 8001530:	7dfb      	ldrb	r3, [r7, #23]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010800 	.word	0x40010800

08001540 <crc8>:

// --- 新增：CRC8校验函数 ---
uint8_t crc8(const uint8_t *addr, uint8_t len)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  while (len--)
 8001550:	e022      	b.n	8001598 <crc8+0x58>
  {
    uint8_t inbyte = *addr++;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800155c:	2308      	movs	r3, #8
 800155e:	737b      	strb	r3, [r7, #13]
 8001560:	e017      	b.n	8001592 <crc8+0x52>
    {
      uint8_t mix = (crc ^ inbyte) & 0x01;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	4053      	eors	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      if (mix)
 8001576:	7b3b      	ldrb	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <crc8+0x46>
        crc ^= 0x8C; // 校验多项式 X^8 + X^5 + X^4 + 1
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001582:	43db      	mvns	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
      inbyte >>= 1;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	3b01      	subs	r3, #1
 8001590:	737b      	strb	r3, [r7, #13]
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <crc8+0x22>
  while (len--)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	70fa      	strb	r2, [r7, #3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1d7      	bne.n	8001552 <crc8+0x12>
    }
  }
  return crc;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <DS18B20_Search>:

// --- 新增：1-Wire ROM搜索核心函数 ---
// 返回值: 1 = 找到设备, 0 = 未找到/搜索完成
// rom_code: 用于存储找到的ROM地址
uint8_t DS18B20_Search(uint8_t *rom_code)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint8_t search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  // 初始化搜索状态 (仅在首次搜索时)
  id_bit_number = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	733b      	strb	r3, [r7, #12]

  // 如果上一次搜索是最后一次，则重置状态开始新的搜索
  if (LastDeviceFlag)
 80015cc:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <DS18B20_Search+0x3a>
  {
    LastDiscrepancy = 0;
 80015d4:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80015da:	4b5e      	ldr	r3, [pc, #376]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <DS18B20_Search+0x1ac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    return 0; // 没有更多设备
 80015e6:	2300      	movs	r3, #0
 80015e8:	e0af      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 1. 发送复位脉冲
  if (DS18B20_Reset() != 0)
 80015ea:	f7ff ff57 	bl	800149c <DS18B20_Reset>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <DS18B20_Search+0x5a>
  {
    // 总线无响应，重置搜索状态并返回错误
    LastDiscrepancy = 0;
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015fa:	4b58      	ldr	r3, [pc, #352]	@ (800175c <DS18B20_Search+0x1ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001600:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e09f      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 2. 发送 ROM 搜索命令 (0xF0)
  DS18B20_WriteByte(0xF0);
 800160a:	20f0      	movs	r0, #240	@ 0xf0
 800160c:	f7ff ff0a 	bl	8001424 <DS18B20_WriteByte>

  // 3. 循环搜索 ROM 的每一位 (64位)
  do
  {
    // 读取两位 (bit 和 complement bit)
    id_bit = DS18B20_ReadBit();
 8001610:	f7ff fee0 	bl	80013d4 <DS18B20_ReadBit>
 8001614:	4603      	mov	r3, r0
 8001616:	727b      	strb	r3, [r7, #9]
    cmp_id_bit = DS18B20_ReadBit();
 8001618:	f7ff fedc 	bl	80013d4 <DS18B20_ReadBit>
 800161c:	4603      	mov	r3, r0
 800161e:	723b      	strb	r3, [r7, #8]

    // 检查冲突
    if ((id_bit == 1) && (cmp_id_bit == 1))
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <DS18B20_Search+0x7c>
 8001626:	7a3b      	ldrb	r3, [r7, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d061      	beq.n	80016f0 <DS18B20_Search+0x140>
      break;
    }
    else
    {
      // 设备响应了
      if (id_bit != cmp_id_bit)
 800162c:	7a7a      	ldrb	r2, [r7, #9]
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	d002      	beq.n	800163a <DS18B20_Search+0x8a>
      {
        // 所有设备在这一位上值相同，直接选择该位
        search_direction = id_bit;
 8001634:	7a7b      	ldrb	r3, [r7, #9]
 8001636:	72bb      	strb	r3, [r7, #10]
 8001638:	e026      	b.n	8001688 <DS18B20_Search+0xd8>
      }
      else
      {
        // 出现分歧 (Discrepancy)，即至少两个设备在这一位有不同值 (0和1)
        // 如果当前位 < 上次分歧位，选择上次确定的路径
        if (id_bit_number < LastDiscrepancy)
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <DS18B20_Search+0x1a8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	d20d      	bcs.n	8001660 <DS18B20_Search+0xb0>
        {
          search_direction = ((rom_code[rom_byte_number] & rom_byte_mask) > 0);
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	4013      	ands	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	72bb      	strb	r3, [r7, #10]
 800165e:	e008      	b.n	8001672 <DS18B20_Search+0xc2>
        }
        else
        {
          // 如果等于上次分歧位，选择1路径
          // 如果大于上次分歧位，选择0路径 (优先探索0分支)
          search_direction = (id_bit_number == LastDiscrepancy);
 8001660:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	429a      	cmp	r2, r3
 8001668:	bf0c      	ite	eq
 800166a:	2301      	moveq	r3, #1
 800166c:	2300      	movne	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	72bb      	strb	r3, [r7, #10]
        }

        // 如果选择0路径，记录下这个分歧点
        if (search_direction == 0)
 8001672:	7abb      	ldrb	r3, [r7, #10]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <DS18B20_Search+0xd8>
        {
          last_zero = id_bit_number;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	73bb      	strb	r3, [r7, #14]
          // 如果是家族码内的分歧，也记录
          if (last_zero < 9)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d802      	bhi.n	8001688 <DS18B20_Search+0xd8>
            LastFamilyDiscrepancy = last_zero;
 8001682:	4a36      	ldr	r2, [pc, #216]	@ (800175c <DS18B20_Search+0x1ac>)
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	7013      	strb	r3, [r2, #0]
        }
      }

      // 存储选择的位到 ROM code 中
      if (search_direction == 1)
 8001688:	7abb      	ldrb	r3, [r7, #10]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10b      	bne.n	80016a6 <DS18B20_Search+0xf6>
        rom_code[rom_byte_number] |= rom_byte_mask;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	430a      	orrs	r2, r1
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e00f      	b.n	80016c6 <DS18B20_Search+0x116>
      else
        rom_code[rom_byte_number] &= ~rom_byte_mask;
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	b259      	sxtb	r1, r3
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]

      // 发送选择的位，让不匹配的设备进入休眠
      DS18B20_WriteBit(search_direction);
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe5d 	bl	8001388 <DS18B20_WriteBit>

      // 移到下一位
      id_bit_number++;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
      rom_byte_mask <<= 1;
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	72fb      	strb	r3, [r7, #11]

      // 如果一个字节的8位都处理完了，移到下一个字节
      if (rom_byte_mask == 0)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <DS18B20_Search+0x13a>
      {
        rom_byte_number++;
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	3301      	adds	r3, #1
 80016e4:	737b      	strb	r3, [r7, #13]
        rom_byte_mask = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	72fb      	strb	r3, [r7, #11]
      }
    }
  } while (rom_byte_number < 8); // 处理完8个字节 (64位)
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d98f      	bls.n	8001610 <DS18B20_Search+0x60>

  // 4. 检查搜索结果
  if (id_bit_number >= 65)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	d90b      	bls.n	800170e <DS18B20_Search+0x15e>
  { // 成功完成64位搜索
    // 更新下次搜索的分歧点
    LastDiscrepancy = last_zero;
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	7013      	strb	r3, [r2, #0]

    // 检查是否是最后一个设备
    if (LastDiscrepancy == 0)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <DS18B20_Search+0x15a>
    {
      LastDeviceFlag = 1; // 本次是最后一个设备
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    }
    search_result = 1; // 成功找到一个设备
 800170a:	2301      	movs	r3, #1
 800170c:	733b      	strb	r3, [r7, #12]
  }

  // 如果搜索失败或CRC校验失败，重置状态
  if (search_result == 0 || rom_code[0] == 0x00 || crc8(rom_code, 7) != rom_code[7])
 800170e:	7b3b      	ldrb	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <DS18B20_Search+0x182>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <DS18B20_Search+0x182>
 800171c:	2107      	movs	r1, #7
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff0e 	bl	8001540 <crc8>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d00a      	beq.n	8001748 <DS18B20_Search+0x198>
  {
    LastDiscrepancy = 0;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <DS18B20_Search+0x1a4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <DS18B20_Search+0x1ac>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    search_result = 0; // 标记为失败
 8001744:	2300      	movs	r3, #0
 8001746:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 8001748:	7b3b      	ldrb	r3, [r7, #12]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000026f 	.word	0x2000026f
 8001758:	2000026d 	.word	0x2000026d
 800175c:	2000026e 	.word	0x2000026e

08001760 <DS18B20_ScanDevices>:

// --- 新增：扫描总线上的所有DS18B20设备 ---
void DS18B20_ScanDevices(void)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b0a7      	sub	sp, #156	@ 0x9c
 8001764:	af08      	add	r7, sp, #32
  uint8_t id[8];
  g_num_sensors = 0; // 重置计数器
 8001766:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

  // 重置搜索状态
  LastDiscrepancy = 0;
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <DS18B20_ScanDevices+0x168>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
  LastDeviceFlag = 0;
 8001772:	4b56      	ldr	r3, [pc, #344]	@ (80018cc <DS18B20_ScanDevices+0x16c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
  LastFamilyDiscrepancy = 0;
 8001778:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <DS18B20_ScanDevices+0x170>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]

  // 循环搜索，直到找不到更多设备
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 800177e:	e020      	b.n	80017c2 <DS18B20_ScanDevices+0x62>
  {
    // 检查是否是DS18B20家族码 (0x28)
    if (id[0] == 0x28)
 8001780:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001784:	2b28      	cmp	r3, #40	@ 0x28
 8001786:	d11c      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
    {
      // 检查CRC校验
      if (crc8(id, 7) == id[7])
 8001788:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800178c:	2107      	movs	r1, #7
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fed6 	bl	8001540 <crc8>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800179c:	429a      	cmp	r2, r3
 800179e:	d110      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
      {
        memcpy(g_ds18b20_roms[g_num_sensors], id, 8);
 80017a0:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017b0:	cb03      	ldmia	r3!, {r0, r1}
 80017b2:	6010      	str	r0, [r2, #0]
 80017b4:	6051      	str	r1, [r2, #4]
        g_num_sensors++;
 80017b6:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017c0:	701a      	strb	r2, [r3, #0]
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 80017c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fef2 	bl	80015b0 <DS18B20_Search>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <DS18B20_ScanDevices+0x7a>
 80017d2:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d9d2      	bls.n	8001780 <DS18B20_ScanDevices+0x20>
    }
    // 如果需要支持其他家族码，可以在这里添加判断
  }
  // 可以在这里通过串口打印找到的传感器数量和ROM地址，用于调试
  char dbg_msg[100];
  sprintf(dbg_msg, "Found %d DS18B20 sensors.\r\n", g_num_sensors);
 80017da:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	493c      	ldr	r1, [pc, #240]	@ (80018d8 <DS18B20_ScanDevices+0x178>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fd6c 	bl	80052c4 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 100);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcad 	bl	8000150 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f107 0108 	add.w	r1, r7, #8
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	4836      	ldr	r0, [pc, #216]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 8001802:	f002 fc65 	bl	80040d0 <HAL_UART_Transmit>
  for (int i = 0; i < g_num_sensors; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	677b      	str	r3, [r7, #116]	@ 0x74
 800180a:	e050      	b.n	80018ae <DS18B20_ScanDevices+0x14e>
  {
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800180c:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800180e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	79db      	ldrb	r3, [r3, #7]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001816:	469c      	mov	ip, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001818:	4a2e      	ldr	r2, [pc, #184]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800181a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	799b      	ldrb	r3, [r3, #6]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001822:	4619      	mov	r1, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	795b      	ldrb	r3, [r3, #5]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800182e:	461c      	mov	r4, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001830:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	791b      	ldrb	r3, [r3, #4]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800183a:	461d      	mov	r5, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 800183c:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800183e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	78db      	ldrb	r3, [r3, #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001846:	461e      	mov	r6, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001848:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800184a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	789b      	ldrb	r3, [r3, #2]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001852:	607b      	str	r3, [r7, #4]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001854:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	785b      	ldrb	r3, [r3, #1]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800185e:	603b      	str	r3, [r7, #0]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001860:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001864:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001868:	f107 0008 	add.w	r0, r7, #8
 800186c:	9306      	str	r3, [sp, #24]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	9205      	str	r2, [sp, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	9304      	str	r3, [sp, #16]
 8001876:	9603      	str	r6, [sp, #12]
 8001878:	9502      	str	r5, [sp, #8]
 800187a:	9401      	str	r4, [sp, #4]
 800187c:	9100      	str	r1, [sp, #0]
 800187e:	4663      	mov	r3, ip
 8001880:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <DS18B20_ScanDevices+0x180>)
 8001884:	f003 fd1e 	bl	80052c4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 200);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc5f 	bl	8000150 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	23c8      	movs	r3, #200	@ 0xc8
 800189c:	480f      	ldr	r0, [pc, #60]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 800189e:	f002 fc17 	bl	80040d0 <HAL_UART_Transmit>
    HAL_Delay(10); // 短暂延时避免串口发送过快
 80018a2:	200a      	movs	r0, #10
 80018a4:	f001 f85c 	bl	8002960 <HAL_Delay>
  for (int i = 0; i < g_num_sensors; i++)
 80018a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018aa:	3301      	adds	r3, #1
 80018ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b6:	4293      	cmp	r3, r2
 80018b8:	dba8      	blt.n	800180c <DS18B20_ScanDevices+0xac>
  }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	377c      	adds	r7, #124	@ 0x7c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	2000026c 	.word	0x2000026c
 80018c8:	2000026d 	.word	0x2000026d
 80018cc:	2000026f 	.word	0x2000026f
 80018d0:	2000026e 	.word	0x2000026e
 80018d4:	20000244 	.word	0x20000244
 80018d8:	08008b60 	.word	0x08008b60
 80018dc:	200006c4 	.word	0x200006c4
 80018e0:	08008b7c 	.word	0x08008b7c

080018e4 <DS18B20_Select>:

// --- 新增：选择指定ROM地址的设备 ---
void DS18B20_Select(const uint8_t *rom_code)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  DS18B20_WriteByte(0x55); // Match ROM command
 80018ec:	2055      	movs	r0, #85	@ 0x55
 80018ee:	f7ff fd99 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e009      	b.n	800190c <DS18B20_Select+0x28>
  {
    DS18B20_WriteByte(rom_code[i]);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fd8f 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d9f2      	bls.n	80018f8 <DS18B20_Select+0x14>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DS18B20_SkipRom>:

// --- 新增：向总线上所有设备发送命令 (使用 Skip ROM) ---
void DS18B20_SkipRom(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  DS18B20_WriteByte(0xCC); // Skip ROM command
 8001920:	20cc      	movs	r0, #204	@ 0xcc
 8001922:	f7ff fd7f 	bl	8001424 <DS18B20_WriteByte>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <DS18B20_GetTemp>:

// --- 修改：读取指定ROM地址的温度值 ---
// 返回值：读取到的温度，或特定错误值 (例如 -999.0)
float DS18B20_GetTemp(const uint8_t *rom_code)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t tempL, tempH;
  uint16_t temp;
  float result = -999.0; // 默认错误值
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <DS18B20_GetTemp+0x98>)
 8001936:	60fb      	str	r3, [r7, #12]

  // 1. 复位并选择指定设备
  if (DS18B20_Reset() != 0)
 8001938:	f7ff fdb0 	bl	800149c <DS18B20_Reset>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <DS18B20_GetTemp+0x1a>
    return result; // 复位失败
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	e039      	b.n	80019ba <DS18B20_GetTemp+0x8e>
  DS18B20_Select(rom_code);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffcc 	bl	80018e4 <DS18B20_Select>

  // 2. 发送读取暂存器命令 (0xBE)
  DS18B20_WriteByte(0xBE);
 800194c:	20be      	movs	r0, #190	@ 0xbe
 800194e:	f7ff fd69 	bl	8001424 <DS18B20_WriteByte>

  // 3. 读取暂存器内容 (前两个字节是温度)
  //    注意：实际应用中应读取全部9个字节并校验CRC
  tempL = DS18B20_ReadByte();
 8001952:	f7ff fd84 	bl	800145e <DS18B20_ReadByte>
 8001956:	4603      	mov	r3, r0
 8001958:	72fb      	strb	r3, [r7, #11]
  tempH = DS18B20_ReadByte();
 800195a:	f7ff fd80 	bl	800145e <DS18B20_ReadByte>
 800195e:	4603      	mov	r3, r0
 8001960:	72bb      	strb	r3, [r7, #10]
  //     // CRC校验失败
  //     return -998.0; // 返回不同的错误码
  // }

  // 4. 计算温度
  temp = (tempH << 8) | tempL;
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	b21b      	sxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	813b      	strh	r3, [r7, #8]

  // 处理负温度 (符号扩展)
  if (temp & 0x8000)
 8001974:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da11      	bge.n	80019a0 <DS18B20_GetTemp+0x74>
  {
    temp = ~temp + 1; // 取反加一
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	425b      	negs	r3, r3
 8001980:	813b      	strh	r3, [r7, #8]
    result = -(float)temp / 16.0;
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9a5 	bl	8000cd4 <__aeabi_ui2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001990:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff faa9 	bl	8000eec <__aeabi_fdiv>
 800199a:	4603      	mov	r3, r0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00b      	b.n	80019b8 <DS18B20_GetTemp+0x8c>
  }
  else
  {
    result = (float)temp / 16.0;
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f996 	bl	8000cd4 <__aeabi_ui2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa9c 	bl	8000eec <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    // 可能读取错误，可以返回特定错误值或上次有效值
    // return -997.0;
  }

  return result;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	c479c000 	.word	0xc479c000

080019c8 <DS18B20_StartConversionAll>:

// --- 新增：启动所有连接设备的温度转换 ---
uint8_t DS18B20_StartConversionAll(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  if (DS18B20_Reset() != 0)
 80019cc:	f7ff fd66 	bl	800149c <DS18B20_Reset>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <DS18B20_StartConversionAll+0x12>
    return 1;              // 复位失败
 80019d6:	2301      	movs	r3, #1
 80019d8:	e005      	b.n	80019e6 <DS18B20_StartConversionAll+0x1e>
  DS18B20_SkipRom();       // 使用 Skip ROM 命令
 80019da:	f7ff ff9f 	bl	800191c <DS18B20_SkipRom>
  DS18B20_WriteByte(0x44); // 启动温度转换命令
 80019de:	2044      	movs	r0, #68	@ 0x44
 80019e0:	f7ff fd20 	bl	8001424 <DS18B20_WriteByte>
  return 0;                // 成功启动
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b0df      	sub	sp, #380	@ 0x17c
 80019f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f000 ff53 	bl	800289c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f9cd 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f7ff fbbf 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019fe:	f000 fe4b 	bl	8002698 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a02:	f000 fe73 	bl	80026ec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001a06:	f7ff fc11 	bl	800122c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  RELAY_Init();
 8001a0a:	f7ff fc7b 	bl	8001304 <RELAY_Init>
    OLED_Init();  // 初始化OLED
 8001a0e:	f000 fc07 	bl	8002220 <OLED_Init>

  HAL_Delay(100); // 等待总线稳定
 8001a12:	2064      	movs	r0, #100	@ 0x64
 8001a14:	f000 ffa4 	bl	8002960 <HAL_Delay>

    // 在OLED上显示欢迎信息
  OLED_ShowString(0, 0, "DS18B20 Temperature", 8);
 8001a18:	2308      	movs	r3, #8
 8001a1a:	4aca      	ldr	r2, [pc, #808]	@ (8001d44 <main+0x358>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 fbc8 	bl	80021b4 <OLED_ShowString>
  OLED_ShowString(0, 16, "System Initializing", 8);
 8001a24:	2308      	movs	r3, #8
 8001a26:	4ac8      	ldr	r2, [pc, #800]	@ (8001d48 <main+0x35c>)
 8001a28:	2110      	movs	r1, #16
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 fbc2 	bl	80021b4 <OLED_ShowString>
  OLED_Refresh();
 8001a30:	f000 fa18 	bl	8001e64 <OLED_Refresh>
    HAL_Delay(1000); // 显示欢迎信息一段时间
 8001a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a38:	f000 ff92 	bl	8002960 <HAL_Delay>

  HAL_UART_Transmit(&huart3, (uint8_t *)"DS18B20 Multi-Sensor Test\r\n", strlen("DS18B20 Multi-Sensor Test\r\n"), 100);
 8001a3c:	2364      	movs	r3, #100	@ 0x64
 8001a3e:	221b      	movs	r2, #27
 8001a40:	49c2      	ldr	r1, [pc, #776]	@ (8001d4c <main+0x360>)
 8001a42:	48c3      	ldr	r0, [pc, #780]	@ (8001d50 <main+0x364>)
 8001a44:	f002 fb44 	bl	80040d0 <HAL_UART_Transmit>

  // --- 修改：扫描设备 ---
  DS18B20_ScanDevices();
 8001a48:	f7ff fe8a 	bl	8001760 <DS18B20_ScanDevices>

    // 在OLED上显示传感器信息
  OLED_DisplaySensorInfo(g_num_sensors);
 8001a4c:	4bc1      	ldr	r3, [pc, #772]	@ (8001d54 <main+0x368>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fcb1 	bl	80023b8 <OLED_DisplaySensorInfo>
  HAL_Delay(2000);
 8001a56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a5a:	f000 ff81 	bl	8002960 <HAL_Delay>

  if (g_num_sensors == 0)
 8001a5e:	4bbd      	ldr	r3, [pc, #756]	@ (8001d54 <main+0x368>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <main+0x8a>
  {
    HAL_UART_Transmit(&huart3, (uint8_t *)"No DS18B20 sensors found!\r\n", strlen("No DS18B20 sensors found!\r\n"), 100);
 8001a66:	2364      	movs	r3, #100	@ 0x64
 8001a68:	221b      	movs	r2, #27
 8001a6a:	49bb      	ldr	r1, [pc, #748]	@ (8001d58 <main+0x36c>)
 8001a6c:	48b8      	ldr	r0, [pc, #736]	@ (8001d50 <main+0x364>)
 8001a6e:	f002 fb2f 	bl	80040d0 <HAL_UART_Transmit>
    while (1)
 8001a72:	bf00      	nop
 8001a74:	e7fd      	b.n	8001a72 <main+0x86>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1. 启动所有传感器的温度转换
    if (DS18B20_StartConversionAll() == 0)
 8001a76:	f7ff ffa7 	bl	80019c8 <DS18B20_StartConversionAll>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 8148 	bne.w	8001d12 <main+0x326>
    {
      // 2. 等待转换完成 (标准精度约750ms)
      //    注意：如果设置了不同精度，等待时间需要调整
      HAL_Delay(750);
 8001a82:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001a86:	f000 ff6b 	bl	8002960 <HAL_Delay>

      // 3. 依次读取每个传感器的温度
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001a90:	e0a3      	b.n	8001bda <main+0x1ee>
      {
        temperature = DS18B20_GetTemp(g_ds18b20_roms[i]);
 8001a92:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4ab0      	ldr	r2, [pc, #704]	@ (8001d5c <main+0x370>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff45 	bl	800192c <DS18B20_GetTemp>
 8001aa2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
        // 保存温度值到数组中
        temperatureArray[i] = temperature;
 8001aa6:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001aaa:	49ad      	ldr	r1, [pc, #692]	@ (8001d60 <main+0x374>)
 8001aac:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        
        // 格式化ROM地址用于显示
        char rom_str[25];
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ab4:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ab8:	4aa8      	ldr	r2, [pc, #672]	@ (8001d5c <main+0x370>)
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	79db      	ldrb	r3, [r3, #7]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ac0:	469c      	mov	ip, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ac2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ac6:	4aa5      	ldr	r2, [pc, #660]	@ (8001d5c <main+0x370>)
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	799b      	ldrb	r3, [r3, #6]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ace:	469e      	mov	lr, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ad0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8001d5c <main+0x370>)
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	795b      	ldrb	r3, [r3, #5]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001adc:	4619      	mov	r1, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ade:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ae2:	4a9e      	ldr	r2, [pc, #632]	@ (8001d5c <main+0x370>)
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	791b      	ldrb	r3, [r3, #4]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001aea:	461c      	mov	r4, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001aec:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001af0:	4a9a      	ldr	r2, [pc, #616]	@ (8001d5c <main+0x370>)
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	78db      	ldrb	r3, [r3, #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001af8:	461d      	mov	r5, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001afa:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001afe:	4a97      	ldr	r2, [pc, #604]	@ (8001d5c <main+0x370>)
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	789b      	ldrb	r3, [r3, #2]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001b06:	461e      	mov	r6, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001b08:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001b0c:	4a93      	ldr	r2, [pc, #588]	@ (8001d5c <main+0x370>)
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	785b      	ldrb	r3, [r3, #1]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001b14:	607b      	str	r3, [r7, #4]
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001b16:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001b1a:	4a90      	ldr	r2, [pc, #576]	@ (8001d5c <main+0x370>)
 8001b1c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001b20:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b24:	9305      	str	r3, [sp, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	9304      	str	r3, [sp, #16]
 8001b2a:	9603      	str	r6, [sp, #12]
 8001b2c:	9502      	str	r5, [sp, #8]
 8001b2e:	9401      	str	r4, [sp, #4]
 8001b30:	9100      	str	r1, [sp, #0]
 8001b32:	4673      	mov	r3, lr
 8001b34:	4662      	mov	r2, ip
 8001b36:	498b      	ldr	r1, [pc, #556]	@ (8001d64 <main+0x378>)
 8001b38:	f003 fbc4 	bl	80052c4 <siprintf>

        if (temperature > -900.0)
 8001b3c:	498a      	ldr	r1, [pc, #552]	@ (8001d68 <main+0x37c>)
 8001b3e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b42:	f7ff fadb 	bl	80010fc <__aeabi_fcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01e      	beq.n	8001b8a <main+0x19e>
        { // 检查是否为有效温度值
          sprintf(msg, "Sensor %d [%s]: %.2f C\r\n", i, rom_str, temperature);
 8001b4c:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001b50:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b54:	f7fe fc68 	bl	8000428 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001b60:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001b64:	e9cd 2300 	strd	r2, r3, [sp]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	497f      	ldr	r1, [pc, #508]	@ (8001d6c <main+0x380>)
 8001b6e:	f003 fba9 	bl	80052c4 <siprintf>
          sprintf(msg2, "%.2f;",temperature);
 8001b72:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b76:	f7fe fc57 	bl	8000428 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001b82:	497b      	ldr	r1, [pc, #492]	@ (8001d70 <main+0x384>)
 8001b84:	f003 fb9e 	bl	80052c4 <siprintf>
 8001b88:	e012      	b.n	8001bb0 <main+0x1c4>
        }
        else
        {
          sprintf(msg, "Sensor %d [%s]: Read Error (Code: %.1f)\r\n", i, rom_str, temperature);
 8001b8a:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001b8e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b92:	f7fe fc49 	bl	8000428 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001b9e:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001ba2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4622      	mov	r2, r4
 8001baa:	4972      	ldr	r1, [pc, #456]	@ (8001d74 <main+0x388>)
 8001bac:	f003 fb8a 	bl	80052c4 <siprintf>
        }
        HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200);
 8001bb0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe facb 	bl	8000150 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8001bc2:	23c8      	movs	r3, #200	@ 0xc8
 8001bc4:	4862      	ldr	r0, [pc, #392]	@ (8001d50 <main+0x364>)
 8001bc6:	f002 fa83 	bl	80040d0 <HAL_UART_Transmit>
        HAL_Delay(50); // 短暂延时，避免串口拥堵
 8001bca:	2032      	movs	r0, #50	@ 0x32
 8001bcc:	f000 fec8 	bl	8002960 <HAL_Delay>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001bd0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001bda:	4b5e      	ldr	r3, [pc, #376]	@ (8001d54 <main+0x368>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8001be2:	429a      	cmp	r2, r3
 8001be4:	f4ff af55 	bcc.w	8001a92 <main+0xa6>
      }
      
      // 检查温度并控制继电器
      uint8_t relay_status = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8001bf4:	e01d      	b.n	8001c32 <main+0x246>
      {
          if(temperatureArray[i] > TEMP_THRESHOLD)
 8001bf6:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8001bfa:	4a59      	ldr	r2, [pc, #356]	@ (8001d60 <main+0x374>)
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	495d      	ldr	r1, [pc, #372]	@ (8001d78 <main+0x38c>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa7a 	bl	80010fc <__aeabi_fcmpgt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <main+0x23c>
          {
            RELAY_Control(1); // 温度超过阈值，打开继电器
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fb84 	bl	800131c <RELAY_Control>
            sprintf(relay_msg, "ON");
 8001c14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c18:	4958      	ldr	r1, [pc, #352]	@ (8001d7c <main+0x390>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fb52 	bl	80052c4 <siprintf>
            relay_status = 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
            break;
 8001c26:	e00a      	b.n	8001c3e <main+0x252>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001c28:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8001c32:	4b48      	ldr	r3, [pc, #288]	@ (8001d54 <main+0x368>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	f897 215d 	ldrb.w	r2, [r7, #349]	@ 0x15d
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3db      	bcc.n	8001bf6 <main+0x20a>
          }
      }
      
      if (!relay_status) {
 8001c3e:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <main+0x26c>
        RELAY_Control(0); // 温度均低于阈值，关闭继电器
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff fb68 	bl	800131c <RELAY_Control>
        sprintf(relay_msg, "OFF");
 8001c4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c50:	494b      	ldr	r1, [pc, #300]	@ (8001d80 <main+0x394>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fb36 	bl	80052c4 <siprintf>
      }
      
      // OLED显示温度和继电器状态
      OLED_DisplayTemperature(
 8001c58:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <main+0x374>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
          temperatureArray[0], 
          (g_num_sensors > 1) ? temperatureArray[1] : -999.0, 
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d54 <main+0x368>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
      OLED_DisplayTemperature(
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d902      	bls.n	8001c6a <main+0x27e>
 8001c64:	4b3e      	ldr	r3, [pc, #248]	@ (8001d60 <main+0x374>)
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	e000      	b.n	8001c6c <main+0x280>
 8001c6a:	4946      	ldr	r1, [pc, #280]	@ (8001d84 <main+0x398>)
 8001c6c:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 8001c70:	4b41      	ldr	r3, [pc, #260]	@ (8001d78 <main+0x38c>)
 8001c72:	f000 faff 	bl	8002274 <OLED_DisplayTemperature>
          relay_status,
          TEMP_THRESHOLD
      );
      
      // 格式化并发送到Lora
      strcpy(msg2, "");
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8001c82:	e01b      	b.n	8001cbc <main+0x2d0>
      {
          char temp_msg[50];
          sprintf(temp_msg, "%.2f;", temperatureArray[i]);
 8001c84:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8001c88:	4a35      	ldr	r2, [pc, #212]	@ (8001d60 <main+0x374>)
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fbca 	bl	8000428 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	f107 000c 	add.w	r0, r7, #12
 8001c9c:	4934      	ldr	r1, [pc, #208]	@ (8001d70 <main+0x384>)
 8001c9e:	f003 fb11 	bl	80052c4 <siprintf>
          strcat(msg2, temp_msg);
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fb76 	bl	800539e <strcat>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001cb2:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <main+0x368>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3dd      	bcc.n	8001c84 <main+0x298>
      }
      strcat(msg2, relay_msg); // 继电器状态
 8001cc8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001ccc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fb63 	bl	800539e <strcat>
      strcat(msg2, "\r\n");
 8001cd8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fa37 	bl	8000150 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cea:	4413      	add	r3, r2
 8001cec:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <main+0x39c>)
 8001cee:	8811      	ldrh	r1, [r2, #0]
 8001cf0:	7892      	ldrb	r2, [r2, #2]
 8001cf2:	8019      	strh	r1, [r3, #0]
 8001cf4:	709a      	strb	r2, [r3, #2]
      HAL_UART_Transmit(&huart1, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
 8001cf6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa28 	bl	8000150 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001d08:	23c8      	movs	r3, #200	@ 0xc8
 8001d0a:	4820      	ldr	r0, [pc, #128]	@ (8001d8c <main+0x3a0>)
 8001d0c:	f002 f9e0 	bl	80040d0 <HAL_UART_Transmit>
 8001d10:	e012      	b.n	8001d38 <main+0x34c>
    }
    else
    {
      sprintf(msg, "Failed to start conversion.\r\n");
 8001d12:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d16:	491e      	ldr	r1, [pc, #120]	@ (8001d90 <main+0x3a4>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fad3 	bl	80052c4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001d1e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fa14 	bl	8000150 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8001d30:	2364      	movs	r3, #100	@ 0x64
 8001d32:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <main+0x364>)
 8001d34:	f002 f9cc 	bl	80040d0 <HAL_UART_Transmit>
    }

    HAL_Delay(2000); // 每隔一段时间读取一次
 8001d38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d3c:	f000 fe10 	bl	8002960 <HAL_Delay>
    if (DS18B20_StartConversionAll() == 0)
 8001d40:	e699      	b.n	8001a76 <main+0x8a>
 8001d42:	bf00      	nop
 8001d44:	08008bb0 	.word	0x08008bb0
 8001d48:	08008bc4 	.word	0x08008bc4
 8001d4c:	08008bd8 	.word	0x08008bd8
 8001d50:	200006c4 	.word	0x200006c4
 8001d54:	2000026c 	.word	0x2000026c
 8001d58:	08008bf4 	.word	0x08008bf4
 8001d5c:	20000244 	.word	0x20000244
 8001d60:	20000270 	.word	0x20000270
 8001d64:	08008c10 	.word	0x08008c10
 8001d68:	c4610000 	.word	0xc4610000
 8001d6c:	08008c38 	.word	0x08008c38
 8001d70:	08008c54 	.word	0x08008c54
 8001d74:	08008c5c 	.word	0x08008c5c
 8001d78:	41f00000 	.word	0x41f00000
 8001d7c:	08008c88 	.word	0x08008c88
 8001d80:	08008c8c 	.word	0x08008c8c
 8001d84:	c479c000 	.word	0xc479c000
 8001d88:	08008c90 	.word	0x08008c90
 8001d8c:	2000067c 	.word	0x2000067c
 8001d90:	08008c94 	.word	0x08008c94

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b090      	sub	sp, #64	@ 0x40
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	2228      	movs	r2, #40	@ 0x28
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 faf3 	bl	800538e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dd2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 fd17 	bl	8003810 <HAL_RCC_OscConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001de8:	f000 f819 	bl	8001e1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dec:	230f      	movs	r3, #15
 8001dee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df0:	2302      	movs	r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2102      	movs	r1, #2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 ff84 	bl	8003d14 <HAL_RCC_ClockConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e12:	f000 f804 	bl	8001e1e <Error_Handler>
  }
}
 8001e16:	bf00      	nop
 8001e18:	3740      	adds	r7, #64	@ 0x40
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e22:	b672      	cpsid	i
}
 8001e24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e26:	bf00      	nop
 8001e28:	e7fd      	b.n	8001e26 <Error_Handler+0x8>
	...

08001e2c <OLED_Write_Byte>:
#define COM 0x00  // OLED指令
#define DAT 0x40  // OLED数据

// I2C写入数据
static void OLED_Write_Byte(uint8_t data, uint8_t mode)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	4603      	mov	r3, r0
 8001e34:	460a      	mov	r2, r1
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = mode;  // 写命令/数据控制字节
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	733b      	strb	r3, [r7, #12]
    buf[1] = data;  // 数据字节
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, buf, 2, 100);
 8001e44:	f107 020c 	add.w	r2, r7, #12
 8001e48:	2364      	movs	r3, #100	@ 0x64
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	2178      	movs	r1, #120	@ 0x78
 8001e50:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <OLED_Write_Byte+0x34>)
 8001e52:	f001 f985 	bl	8003160 <HAL_I2C_Master_Transmit>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200001f0 	.word	0x200001f0

08001e64 <OLED_Refresh>:

// 更新显存到OLED
void OLED_Refresh(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0a4      	sub	sp, #144	@ 0x90
 8001e68:	af02      	add	r7, sp, #8
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e70:	e03b      	b.n	8001eea <OLED_Refresh+0x86>
    {
        OLED_Write_Byte(0xB0 + i, COM);    // 设置页地址(0~7)
 8001e72:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e76:	3b50      	subs	r3, #80	@ 0x50
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffd5 	bl	8001e2c <OLED_Write_Byte>
        OLED_Write_Byte(0x00, COM);        // 设置显示位置—列低地址
 8001e82:	2100      	movs	r1, #0
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff ffd1 	bl	8001e2c <OLED_Write_Byte>
        OLED_Write_Byte(0x10, COM);        // 设置显示位置—列高地址
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2010      	movs	r0, #16
 8001e8e:	f7ff ffcd 	bl	8001e2c <OLED_Write_Byte>
        
        // 一次发送一整行的数据(128字节)，提高效率
        uint8_t data[129];
        data[0] = DAT;  // 数据控制字节
 8001e92:	2340      	movs	r3, #64	@ 0x40
 8001e94:	713b      	strb	r3, [r7, #4]
        for (n = 0; n < 128; n++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001e9c:	e014      	b.n	8001ec8 <OLED_Refresh+0x64>
            data[n+1] = OLED_GRAM[n][i];
 8001e9e:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 8001ea2:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001ea6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001eaa:	3301      	adds	r3, #1
 8001eac:	4813      	ldr	r0, [pc, #76]	@ (8001efc <OLED_Refresh+0x98>)
 8001eae:	00c9      	lsls	r1, r1, #3
 8001eb0:	4401      	add	r1, r0
 8001eb2:	440a      	add	r2, r1
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	3388      	adds	r3, #136	@ 0x88
 8001eb8:	443b      	add	r3, r7
 8001eba:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (n = 0; n < 128; n++)
 8001ebe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001ec8:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	dae6      	bge.n	8001e9e <OLED_Refresh+0x3a>
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, data, 129, 200);
 8001ed0:	1d3a      	adds	r2, r7, #4
 8001ed2:	23c8      	movs	r3, #200	@ 0xc8
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2381      	movs	r3, #129	@ 0x81
 8001ed8:	2178      	movs	r1, #120	@ 0x78
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <OLED_Refresh+0x9c>)
 8001edc:	f001 f940 	bl	8003160 <HAL_I2C_Master_Transmit>
    for (i = 0; i < 8; i++)
 8001ee0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001eea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001eee:	2b07      	cmp	r3, #7
 8001ef0:	d9bf      	bls.n	8001e72 <OLED_Refresh+0xe>
    }
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	3788      	adds	r7, #136	@ 0x88
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000278 	.word	0x20000278
 8001f00:	200001f0 	.word	0x200001f0

08001f04 <OLED_Clear>:
    OLED_Write_Byte(0xAE, COM); // 关闭屏幕
}

// 清屏函数
void OLED_Clear(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e014      	b.n	8001f3a <OLED_Clear+0x36>
    {
        for (n = 0; n < 128; n++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	71bb      	strb	r3, [r7, #6]
 8001f14:	e00a      	b.n	8001f2c <OLED_Clear+0x28>
        {
            OLED_GRAM[n][i] = 0;
 8001f16:	79ba      	ldrb	r2, [r7, #6]
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	490c      	ldr	r1, [pc, #48]	@ (8001f4c <OLED_Clear+0x48>)
 8001f1c:	00d2      	lsls	r2, r2, #3
 8001f1e:	440a      	add	r2, r1
 8001f20:	4413      	add	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
        for (n = 0; n < 128; n++)
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	71bb      	strb	r3, [r7, #6]
 8001f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	daf0      	bge.n	8001f16 <OLED_Clear+0x12>
    for (i = 0; i < 8; i++)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	3301      	adds	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b07      	cmp	r3, #7
 8001f3e:	d9e7      	bls.n	8001f10 <OLED_Clear+0xc>
        }
    }
    OLED_Refresh(); // 更新显示
 8001f40:	f7ff ff90 	bl	8001e64 <OLED_Refresh>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000278 	.word	0x20000278

08001f50 <OLED_DrawPoint>:

// 画点
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	71bb      	strb	r3, [r7, #6]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	717b      	strb	r3, [r7, #5]
    uint8_t pos, bx, temp = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
    if (x > 127 || y > 63) return; // 超出范围
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db3c      	blt.n	8001fe8 <OLED_DrawPoint+0x98>
 8001f6e:	79bb      	ldrb	r3, [r7, #6]
 8001f70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f72:	d839      	bhi.n	8001fe8 <OLED_DrawPoint+0x98>
    pos = y / 8;                   // 得到页地址
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	73bb      	strb	r3, [r7, #14]
    bx = y % 8;                    // 取得y在页内的位置
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	737b      	strb	r3, [r7, #13]
    temp = 1 << bx;                // 得到点在页内的位置对应的值
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	2201      	movs	r2, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]
    if (t) OLED_GRAM[x][pos] |= temp;  // 置1
 8001f8c:	797b      	ldrb	r3, [r7, #5]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d012      	beq.n	8001fb8 <OLED_DrawPoint+0x68>
 8001f92:	79fa      	ldrb	r2, [r7, #7]
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	4917      	ldr	r1, [pc, #92]	@ (8001ff4 <OLED_DrawPoint+0xa4>)
 8001f98:	00d2      	lsls	r2, r2, #3
 8001f9a:	440a      	add	r2, r1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	7818      	ldrb	r0, [r3, #0]
 8001fa0:	79fa      	ldrb	r2, [r7, #7]
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	7bf9      	ldrb	r1, [r7, #15]
 8001fa6:	4301      	orrs	r1, r0
 8001fa8:	b2c8      	uxtb	r0, r1
 8001faa:	4912      	ldr	r1, [pc, #72]	@ (8001ff4 <OLED_DrawPoint+0xa4>)
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	440a      	add	r2, r1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e018      	b.n	8001fea <OLED_DrawPoint+0x9a>
    else OLED_GRAM[x][pos] &= ~temp;   // 清0
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	7bbb      	ldrb	r3, [r7, #14]
 8001fbc:	490d      	ldr	r1, [pc, #52]	@ (8001ff4 <OLED_DrawPoint+0xa4>)
 8001fbe:	00d2      	lsls	r2, r2, #3
 8001fc0:	440a      	add	r2, r1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25a      	sxtb	r2, r3
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b259      	sxtb	r1, r3
 8001fd4:	79fa      	ldrb	r2, [r7, #7]
 8001fd6:	7bbb      	ldrb	r3, [r7, #14]
 8001fd8:	b2c8      	uxtb	r0, r1
 8001fda:	4906      	ldr	r1, [pc, #24]	@ (8001ff4 <OLED_DrawPoint+0xa4>)
 8001fdc:	00d2      	lsls	r2, r2, #3
 8001fde:	440a      	add	r2, r1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e000      	b.n	8001fea <OLED_DrawPoint+0x9a>
    if (x > 127 || y > 63) return; // 超出范围
 8001fe8:	bf00      	nop
}
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000278 	.word	0x20000278

08001ff8 <OLED_ShowChar>:
    OLED_Refresh();
}

// 在指定位置显示一个字符
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4623      	mov	r3, r4
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	4603      	mov	r3, r0
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	460b      	mov	r3, r1
 8002010:	717b      	strb	r3, [r7, #5]
 8002012:	4613      	mov	r3, r2
 8002014:	713b      	strb	r3, [r7, #4]
    uint8_t i, j, c;
    c = chr - ' '; // 得到偏移后的值
 8002016:	797b      	ldrb	r3, [r7, #5]
 8002018:	3b20      	subs	r3, #32
 800201a:	737b      	strb	r3, [r7, #13]
    if (x > 128 - 1)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	da04      	bge.n	800202e <OLED_ShowChar+0x36>
    {
        x = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	71fb      	strb	r3, [r7, #7]
        y = y + 2;
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	3302      	adds	r3, #2
 800202c:	71bb      	strb	r3, [r7, #6]
    }
    if (size == 16)
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d177      	bne.n	8002124 <OLED_ShowChar+0x12c>
    {
        for (i = 0; i < 8; i++)
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e032      	b.n	80020a0 <OLED_ShowChar+0xa8>
        {
            for (j = 0; j < 8; j++)
 800203a:	2300      	movs	r3, #0
 800203c:	73bb      	strb	r3, [r7, #14]
 800203e:	e029      	b.n	8002094 <OLED_ShowChar+0x9c>
            {
                if (F8X16[c * 16 + i] & (0x80 >> j))
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	011a      	lsls	r2, r3, #4
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	4413      	add	r3, r2
 8002048:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <OLED_ShowChar+0x1b4>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	4619      	mov	r1, r3
 800204e:	7bbb      	ldrb	r3, [r7, #14]
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	fa42 f303 	asr.w	r3, r2, r3
 8002056:	400b      	ands	r3, r1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00c      	beq.n	8002076 <OLED_ShowChar+0x7e>
                    OLED_DrawPoint(x + j, y + i, 1);
 800205c:	79fa      	ldrb	r2, [r7, #7]
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	4413      	add	r3, r2
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	4413      	add	r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2201      	movs	r2, #1
 800206e:	4619      	mov	r1, r3
 8002070:	f7ff ff6e 	bl	8001f50 <OLED_DrawPoint>
 8002074:	e00b      	b.n	800208e <OLED_ShowChar+0x96>
                else
                    OLED_DrawPoint(x + j, y + i, 0);
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	4413      	add	r3, r2
 800207c:	b2d8      	uxtb	r0, r3
 800207e:	79ba      	ldrb	r2, [r7, #6]
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	4413      	add	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2200      	movs	r2, #0
 8002088:	4619      	mov	r1, r3
 800208a:	f7ff ff61 	bl	8001f50 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	3301      	adds	r3, #1
 8002092:	73bb      	strb	r3, [r7, #14]
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	2b07      	cmp	r3, #7
 8002098:	d9d2      	bls.n	8002040 <OLED_ShowChar+0x48>
        for (i = 0; i < 8; i++)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	d9c9      	bls.n	800203a <OLED_ShowChar+0x42>
            }
        }
        for (i = 0; i < 8; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e037      	b.n	800211c <OLED_ShowChar+0x124>
        {
            for (j = 0; j < 8; j++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	73bb      	strb	r3, [r7, #14]
 80020b0:	e02e      	b.n	8002110 <OLED_ShowChar+0x118>
            {
                if (F8X16[c * 16 + i + 8] & (0x80 >> j))
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	011a      	lsls	r2, r3, #4
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	4413      	add	r3, r2
 80020ba:	3308      	adds	r3, #8
 80020bc:	4a3b      	ldr	r2, [pc, #236]	@ (80021ac <OLED_ShowChar+0x1b4>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	4619      	mov	r1, r3
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	fa42 f303 	asr.w	r3, r2, r3
 80020ca:	400b      	ands	r3, r1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <OLED_ShowChar+0xf6>
                    OLED_DrawPoint(x + j, y + i + 8, 1);
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	7bbb      	ldrb	r3, [r7, #14]
 80020d4:	4413      	add	r3, r2
 80020d6:	b2d8      	uxtb	r0, r3
 80020d8:	79ba      	ldrb	r2, [r7, #6]
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	4413      	add	r3, r2
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3308      	adds	r3, #8
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2201      	movs	r2, #1
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7ff ff32 	bl	8001f50 <OLED_DrawPoint>
 80020ec:	e00d      	b.n	800210a <OLED_ShowChar+0x112>
                else
                    OLED_DrawPoint(x + j, y + i + 8, 0);
 80020ee:	79fa      	ldrb	r2, [r7, #7]
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	4413      	add	r3, r2
 80020f4:	b2d8      	uxtb	r0, r3
 80020f6:	79ba      	ldrb	r2, [r7, #6]
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3308      	adds	r3, #8
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff ff23 	bl	8001f50 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	3301      	adds	r3, #1
 800210e:	73bb      	strb	r3, [r7, #14]
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	2b07      	cmp	r3, #7
 8002114:	d9cd      	bls.n	80020b2 <OLED_ShowChar+0xba>
        for (i = 0; i < 8; i++)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d9c4      	bls.n	80020ac <OLED_ShowChar+0xb4>
                else
                    OLED_DrawPoint(x + i, y + j, 0);
            }
        }
    }
}
 8002122:	e03f      	b.n	80021a4 <OLED_ShowChar+0x1ac>
    else if (size == 8)
 8002124:	793b      	ldrb	r3, [r7, #4]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d13c      	bne.n	80021a4 <OLED_ShowChar+0x1ac>
        for (i = 0; i < 6; i++)
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e036      	b.n	800219e <OLED_ShowChar+0x1a6>
            for (j = 0; j < 8; j++)
 8002130:	2300      	movs	r3, #0
 8002132:	73bb      	strb	r3, [r7, #14]
 8002134:	e02d      	b.n	8002192 <OLED_ShowChar+0x19a>
                if (F6x8[c][i] & (1 << j))
 8002136:	7b7a      	ldrb	r2, [r7, #13]
 8002138:	7bf9      	ldrb	r1, [r7, #15]
 800213a:	481d      	ldr	r0, [pc, #116]	@ (80021b0 <OLED_ShowChar+0x1b8>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4403      	add	r3, r0
 8002146:	440b      	add	r3, r1
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	fa42 f303 	asr.w	r3, r2, r3
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <OLED_ShowChar+0x17c>
                    OLED_DrawPoint(x + i, y + j, 1);
 800215a:	79fa      	ldrb	r2, [r7, #7]
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	4413      	add	r3, r2
 8002160:	b2d8      	uxtb	r0, r3
 8002162:	79ba      	ldrb	r2, [r7, #6]
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	4413      	add	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2201      	movs	r2, #1
 800216c:	4619      	mov	r1, r3
 800216e:	f7ff feef 	bl	8001f50 <OLED_DrawPoint>
 8002172:	e00b      	b.n	800218c <OLED_ShowChar+0x194>
                    OLED_DrawPoint(x + i, y + j, 0);
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4413      	add	r3, r2
 800217a:	b2d8      	uxtb	r0, r3
 800217c:	79ba      	ldrb	r2, [r7, #6]
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	4413      	add	r3, r2
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2200      	movs	r2, #0
 8002186:	4619      	mov	r1, r3
 8002188:	f7ff fee2 	bl	8001f50 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800218c:	7bbb      	ldrb	r3, [r7, #14]
 800218e:	3301      	adds	r3, #1
 8002190:	73bb      	strb	r3, [r7, #14]
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	2b07      	cmp	r3, #7
 8002196:	d9ce      	bls.n	8002136 <OLED_ShowChar+0x13e>
        for (i = 0; i < 6; i++)
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	3301      	adds	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d9c5      	bls.n	8002130 <OLED_ShowChar+0x138>
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	08008fbc 	.word	0x08008fbc
 80021b0:	08008d94 	.word	0x08008d94

080021b4 <OLED_ShowString>:

// 显示字符串
void OLED_ShowString(uint8_t x, uint8_t y, const char *p, uint8_t size)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	603a      	str	r2, [r7, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	460b      	mov	r3, r1
 80021c4:	71bb      	strb	r3, [r7, #6]
 80021c6:	4613      	mov	r3, r2
 80021c8:	717b      	strb	r3, [r7, #5]
    while (*p != '\0')
 80021ca:	e020      	b.n	800220e <OLED_ShowString+0x5a>
    {
        OLED_ShowChar(x, y, *p, size);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	797b      	ldrb	r3, [r7, #5]
 80021d2:	79b9      	ldrb	r1, [r7, #6]
 80021d4:	79f8      	ldrb	r0, [r7, #7]
 80021d6:	f7ff ff0f 	bl	8001ff8 <OLED_ShowChar>
        x += (size == 8) ? 6 : 8;
 80021da:	797b      	ldrb	r3, [r7, #5]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d101      	bne.n	80021e4 <OLED_ShowString+0x30>
 80021e0:	2206      	movs	r2, #6
 80021e2:	e000      	b.n	80021e6 <OLED_ShowString+0x32>
 80021e4:	2208      	movs	r2, #8
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4413      	add	r3, r2
 80021ea:	71fb      	strb	r3, [r7, #7]
        if (x > 122)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b7a      	cmp	r3, #122	@ 0x7a
 80021f0:	d90a      	bls.n	8002208 <OLED_ShowString+0x54>
        {
            x = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
            y += (size == 8) ? 9 : 16;
 80021f6:	797b      	ldrb	r3, [r7, #5]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d101      	bne.n	8002200 <OLED_ShowString+0x4c>
 80021fc:	2209      	movs	r2, #9
 80021fe:	e000      	b.n	8002202 <OLED_ShowString+0x4e>
 8002200:	2210      	movs	r2, #16
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	4413      	add	r3, r2
 8002206:	71bb      	strb	r3, [r7, #6]
        }
        p++;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	603b      	str	r3, [r7, #0]
    while (*p != '\0')
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1da      	bne.n	80021cc <OLED_ShowString+0x18>
    }
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <OLED_Init>:
    }
}

// 初始化OLED
void OLED_Init(void)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
    // 初始化命令
    uint8_t CMD_Data[] = {
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <OLED_Init+0x50>)
 8002228:	463c      	mov	r4, r7
 800222a:	461d      	mov	r5, r3
 800222c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800222e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002230:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        0xAE, 0x00, 0x10, 0x40, 0x81, 0xCF, 0xA1, 0xC8, 0xA6,
        0xA8, 0x3f, 0xD3, 0x00, 0xD5, 0x80, 0xD9, 0xF1, 0xDA, 0x12,
        0xDB, 0x40, 0x20, 0x02, 0x8D, 0x14, 0xA4, 0xA6, 0xAF
    };
    
    HAL_Delay(100);  // 延时等待OLED稳定
 8002238:	2064      	movs	r0, #100	@ 0x64
 800223a:	f000 fb91 	bl	8002960 <HAL_Delay>
    
    // 发送初始化命令
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 800223e:	2300      	movs	r3, #0
 8002240:	77fb      	strb	r3, [r7, #31]
 8002242:	e00b      	b.n	800225c <OLED_Init+0x3c>
    {
        OLED_Write_Byte(CMD_Data[i], COM);
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	3320      	adds	r3, #32
 8002248:	443b      	add	r3, r7
 800224a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fdeb 	bl	8001e2c <OLED_Write_Byte>
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	3301      	adds	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	7ffb      	ldrb	r3, [r7, #31]
 800225e:	2b1b      	cmp	r3, #27
 8002260:	d9f0      	bls.n	8002244 <OLED_Init+0x24>
    }
    
    OLED_Clear();  // 清屏
 8002262:	f7ff fe4f 	bl	8001f04 <OLED_Clear>
}
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bdb0      	pop	{r4, r5, r7, pc}
 800226e:	bf00      	nop
 8002270:	08008cb4 	.word	0x08008cb4

08002274 <OLED_DisplayTemperature>:

// 显示温度和继电器状态
void OLED_DisplayTemperature(float temp1, float temp2, uint8_t relay_status, float temp_threshold)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 8002284:	f7ff fe3e 	bl	8001f04 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "Temperature Monitor", 8);
 8002288:	2308      	movs	r3, #8
 800228a:	4a41      	ldr	r2, [pc, #260]	@ (8002390 <OLED_DisplayTemperature+0x11c>)
 800228c:	2100      	movs	r1, #0
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff ff90 	bl	80021b4 <OLED_ShowString>
    OLED_ShowString(0, 16, "Sensor1:", 8);
 8002294:	2308      	movs	r3, #8
 8002296:	4a3f      	ldr	r2, [pc, #252]	@ (8002394 <OLED_DisplayTemperature+0x120>)
 8002298:	2110      	movs	r1, #16
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff ff8a 	bl	80021b4 <OLED_ShowString>
    
    // 显示传感器1温度
    if (temp1 > -900.0) {
 80022a0:	493d      	ldr	r1, [pc, #244]	@ (8002398 <OLED_DisplayTemperature+0x124>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7fe ff2a 	bl	80010fc <__aeabi_fcmpgt>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <OLED_DisplayTemperature+0x5e>
        sprintf(buffer, "%.1fC", temp1);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7fe f8ba 	bl	8000428 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	f107 0014 	add.w	r0, r7, #20
 80022bc:	4937      	ldr	r1, [pc, #220]	@ (800239c <OLED_DisplayTemperature+0x128>)
 80022be:	f003 f801 	bl	80052c4 <siprintf>
        OLED_ShowString(56, 16, buffer, 8);
 80022c2:	f107 0214 	add.w	r2, r7, #20
 80022c6:	2308      	movs	r3, #8
 80022c8:	2110      	movs	r1, #16
 80022ca:	2038      	movs	r0, #56	@ 0x38
 80022cc:	f7ff ff72 	bl	80021b4 <OLED_ShowString>
 80022d0:	e005      	b.n	80022de <OLED_DisplayTemperature+0x6a>
    } else {
        OLED_ShowString(56, 16, "Error", 8);
 80022d2:	2308      	movs	r3, #8
 80022d4:	4a32      	ldr	r2, [pc, #200]	@ (80023a0 <OLED_DisplayTemperature+0x12c>)
 80022d6:	2110      	movs	r1, #16
 80022d8:	2038      	movs	r0, #56	@ 0x38
 80022da:	f7ff ff6b 	bl	80021b4 <OLED_ShowString>
    }
    
    // 显示传感器2温度
    OLED_ShowString(0, 26, "Sensor2:", 8);
 80022de:	2308      	movs	r3, #8
 80022e0:	4a30      	ldr	r2, [pc, #192]	@ (80023a4 <OLED_DisplayTemperature+0x130>)
 80022e2:	211a      	movs	r1, #26
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff ff65 	bl	80021b4 <OLED_ShowString>
    if (temp2 > -900.0) {
 80022ea:	492b      	ldr	r1, [pc, #172]	@ (8002398 <OLED_DisplayTemperature+0x124>)
 80022ec:	68b8      	ldr	r0, [r7, #8]
 80022ee:	f7fe ff05 	bl	80010fc <__aeabi_fcmpgt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d011      	beq.n	800231c <OLED_DisplayTemperature+0xa8>
        sprintf(buffer, "%.1fC", temp2);
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f7fe f895 	bl	8000428 <__aeabi_f2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	f107 0014 	add.w	r0, r7, #20
 8002306:	4925      	ldr	r1, [pc, #148]	@ (800239c <OLED_DisplayTemperature+0x128>)
 8002308:	f002 ffdc 	bl	80052c4 <siprintf>
        OLED_ShowString(56, 26, buffer, 8);
 800230c:	f107 0214 	add.w	r2, r7, #20
 8002310:	2308      	movs	r3, #8
 8002312:	211a      	movs	r1, #26
 8002314:	2038      	movs	r0, #56	@ 0x38
 8002316:	f7ff ff4d 	bl	80021b4 <OLED_ShowString>
 800231a:	e005      	b.n	8002328 <OLED_DisplayTemperature+0xb4>
    } else {
        OLED_ShowString(56, 26, "Error", 8);
 800231c:	2308      	movs	r3, #8
 800231e:	4a20      	ldr	r2, [pc, #128]	@ (80023a0 <OLED_DisplayTemperature+0x12c>)
 8002320:	211a      	movs	r1, #26
 8002322:	2038      	movs	r0, #56	@ 0x38
 8002324:	f7ff ff46 	bl	80021b4 <OLED_ShowString>
    }
    
    // 显示继电器状态
    OLED_ShowString(0, 40, "Relay:", 8);
 8002328:	2308      	movs	r3, #8
 800232a:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <OLED_DisplayTemperature+0x134>)
 800232c:	2128      	movs	r1, #40	@ 0x28
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff40 	bl	80021b4 <OLED_ShowString>
    if (relay_status) {
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <OLED_DisplayTemperature+0xd4>
        OLED_ShowString(56, 40, "ON ", 8);
 800233a:	2308      	movs	r3, #8
 800233c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <OLED_DisplayTemperature+0x138>)
 800233e:	2128      	movs	r1, #40	@ 0x28
 8002340:	2038      	movs	r0, #56	@ 0x38
 8002342:	f7ff ff37 	bl	80021b4 <OLED_ShowString>
 8002346:	e005      	b.n	8002354 <OLED_DisplayTemperature+0xe0>
    } else {
        OLED_ShowString(56, 40, "OFF", 8);
 8002348:	2308      	movs	r3, #8
 800234a:	4a19      	ldr	r2, [pc, #100]	@ (80023b0 <OLED_DisplayTemperature+0x13c>)
 800234c:	2128      	movs	r1, #40	@ 0x28
 800234e:	2038      	movs	r0, #56	@ 0x38
 8002350:	f7ff ff30 	bl	80021b4 <OLED_ShowString>
    }
    
    // 显示温度阈值
    OLED_ShowString(0, 50, "Threshold:", 8);
 8002354:	2308      	movs	r3, #8
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <OLED_DisplayTemperature+0x140>)
 8002358:	2132      	movs	r1, #50	@ 0x32
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff ff2a 	bl	80021b4 <OLED_ShowString>
    sprintf(buffer, "%.1fC", temp_threshold);
 8002360:	6838      	ldr	r0, [r7, #0]
 8002362:	f7fe f861 	bl	8000428 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	f107 0014 	add.w	r0, r7, #20
 800236e:	490b      	ldr	r1, [pc, #44]	@ (800239c <OLED_DisplayTemperature+0x128>)
 8002370:	f002 ffa8 	bl	80052c4 <siprintf>
    OLED_ShowString(56, 50, buffer, 8);
 8002374:	f107 0214 	add.w	r2, r7, #20
 8002378:	2308      	movs	r3, #8
 800237a:	2132      	movs	r1, #50	@ 0x32
 800237c:	2038      	movs	r0, #56	@ 0x38
 800237e:	f7ff ff19 	bl	80021b4 <OLED_ShowString>
    
    OLED_Refresh();  // 更新显示
 8002382:	f7ff fd6f 	bl	8001e64 <OLED_Refresh>
}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	@ 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	08008cd0 	.word	0x08008cd0
 8002394:	08008ce4 	.word	0x08008ce4
 8002398:	c4610000 	.word	0xc4610000
 800239c:	08008cf0 	.word	0x08008cf0
 80023a0:	08008cf8 	.word	0x08008cf8
 80023a4:	08008d00 	.word	0x08008d00
 80023a8:	08008d0c 	.word	0x08008d0c
 80023ac:	08008d14 	.word	0x08008d14
 80023b0:	08008d18 	.word	0x08008d18
 80023b4:	08008d1c 	.word	0x08008d1c

080023b8 <OLED_DisplaySensorInfo>:

// 显示传感器信息
void OLED_DisplaySensorInfo(uint8_t num_sensors)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 80023c2:	f7ff fd9f 	bl	8001f04 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "DS18B20 Sensors", 8);
 80023c6:	2308      	movs	r3, #8
 80023c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <OLED_DisplaySensorInfo+0x7c>)
 80023ca:	2100      	movs	r1, #0
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fef1 	bl	80021b4 <OLED_ShowString>
    
    // 显示传感器数量
    sprintf(buffer, "Found: %d sensors", num_sensors);
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4917      	ldr	r1, [pc, #92]	@ (8002438 <OLED_DisplaySensorInfo+0x80>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 ff72 	bl	80052c4 <siprintf>
    OLED_ShowString(0, 16, buffer, 8);
 80023e0:	f107 020c 	add.w	r2, r7, #12
 80023e4:	2308      	movs	r3, #8
 80023e6:	2110      	movs	r1, #16
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff fee3 	bl	80021b4 <OLED_ShowString>
    
    if (num_sensors == 0) {
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <OLED_DisplaySensorInfo+0x56>
        OLED_ShowString(0, 30, "No sensors found!", 8);
 80023f4:	2308      	movs	r3, #8
 80023f6:	4a11      	ldr	r2, [pc, #68]	@ (800243c <OLED_DisplaySensorInfo+0x84>)
 80023f8:	211e      	movs	r1, #30
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff feda 	bl	80021b4 <OLED_ShowString>
        OLED_ShowString(0, 40, "Check connections", 8);
 8002400:	2308      	movs	r3, #8
 8002402:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <OLED_DisplaySensorInfo+0x88>)
 8002404:	2128      	movs	r1, #40	@ 0x28
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fed4 	bl	80021b4 <OLED_ShowString>
 800240c:	e00b      	b.n	8002426 <OLED_DisplaySensorInfo+0x6e>
    } else {
        OLED_ShowString(0, 30, "System ready", 8);
 800240e:	2308      	movs	r3, #8
 8002410:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <OLED_DisplaySensorInfo+0x8c>)
 8002412:	211e      	movs	r1, #30
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fecd 	bl	80021b4 <OLED_ShowString>
        OLED_ShowString(0, 40, "Monitoring...", 8);
 800241a:	2308      	movs	r3, #8
 800241c:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <OLED_DisplaySensorInfo+0x90>)
 800241e:	2128      	movs	r1, #40	@ 0x28
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff fec7 	bl	80021b4 <OLED_ShowString>
    }
    
    OLED_Refresh();  // 更新显示
 8002426:	f7ff fd1d 	bl	8001e64 <OLED_Refresh>
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	08008d28 	.word	0x08008d28
 8002438:	08008d38 	.word	0x08008d38
 800243c:	08008d4c 	.word	0x08008d4c
 8002440:	08008d60 	.word	0x08008d60
 8002444:	08008d74 	.word	0x08008d74
 8002448:	08008d84 	.word	0x08008d84

0800244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_MspInit+0x5c>)
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <HAL_MspInit+0x5c>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6193      	str	r3, [r2, #24]
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_MspInit+0x5c>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_MspInit+0x5c>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4a0e      	ldr	r2, [pc, #56]	@ (80024a8 <HAL_MspInit+0x5c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	61d3      	str	r3, [r2, #28]
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_MspInit+0x5c>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_MspInit+0x60>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <HAL_MspInit+0x60>)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000

080024b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <NMI_Handler+0x4>

080024b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <MemManage_Handler+0x4>

080024c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002500:	f000 fa12 	bl	8002928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <_kill>:

int _kill(int pid, int sig)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002520:	f002 ff96 	bl	8005450 <__errno>
 8002524:	4603      	mov	r3, r0
 8002526:	2216      	movs	r2, #22
 8002528:	601a      	str	r2, [r3, #0]
  return -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_exit>:

void _exit (int status)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800253e:	f04f 31ff 	mov.w	r1, #4294967295
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffe7 	bl	8002516 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <_exit+0x12>

0800254c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e00a      	b.n	8002574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255e:	f3af 8000 	nop.w
 8002562:	4601      	mov	r1, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	b2ca      	uxtb	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	dbf0      	blt.n	800255e <_read+0x12>
  }

  return len;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e009      	b.n	80025ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60ba      	str	r2, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbf1      	blt.n	8002598 <_write+0x12>
  }
  return len;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_close>:

int _close(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e4:	605a      	str	r2, [r3, #4]
  return 0;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <_isatty>:

int _isatty(int file)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
	...

08002620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <_sbrk+0x5c>)
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <_sbrk+0x60>)
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <_sbrk+0x64>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <_sbrk+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002650:	f002 fefe 	bl	8005450 <__errno>
 8002654:	4603      	mov	r3, r0
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	e009      	b.n	8002674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <_sbrk+0x64>)
 8002670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20005000 	.word	0x20005000
 8002680:	00000400 	.word	0x00000400
 8002684:	20000678 	.word	0x20000678
 8002688:	20000860 	.word	0x20000860

0800268c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 800269e:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <MX_USART1_UART_Init+0x50>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ce:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026d0:	f001 fcae 	bl	8004030 <HAL_UART_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026da:	f7ff fba0 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000067c 	.word	0x2000067c
 80026e8:	40013800 	.word	0x40013800

080026ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	@ (800273c <MX_USART3_UART_Init+0x50>)
 80026f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 80026f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800270a:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 8002712:	220c      	movs	r2, #12
 8002714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002722:	4805      	ldr	r0, [pc, #20]	@ (8002738 <MX_USART3_UART_Init+0x4c>)
 8002724:	f001 fc84 	bl	8004030 <HAL_UART_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800272e:	f7ff fb76 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200006c4 	.word	0x200006c4
 800273c:	40004800 	.word	0x40004800

08002740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a38      	ldr	r2, [pc, #224]	@ (800283c <HAL_UART_MspInit+0xfc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d132      	bne.n	80027c6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002760:	4b37      	ldr	r3, [pc, #220]	@ (8002840 <HAL_UART_MspInit+0x100>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <HAL_UART_MspInit+0x100>)
 8002766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b34      	ldr	r3, [pc, #208]	@ (8002840 <HAL_UART_MspInit+0x100>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b31      	ldr	r3, [pc, #196]	@ (8002840 <HAL_UART_MspInit+0x100>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a30      	ldr	r2, [pc, #192]	@ (8002840 <HAL_UART_MspInit+0x100>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b2e      	ldr	r3, [pc, #184]	@ (8002840 <HAL_UART_MspInit+0x100>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0318 	add.w	r3, r7, #24
 80027a2:	4619      	mov	r1, r3
 80027a4:	4827      	ldr	r0, [pc, #156]	@ (8002844 <HAL_UART_MspInit+0x104>)
 80027a6:	f000 f9e3 	bl	8002b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	4619      	mov	r1, r3
 80027be:	4821      	ldr	r0, [pc, #132]	@ (8002844 <HAL_UART_MspInit+0x104>)
 80027c0:	f000 f9d6 	bl	8002b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027c4:	e036      	b.n	8002834 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_UART_MspInit+0x108>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d131      	bne.n	8002834 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_UART_MspInit+0x100>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_UART_MspInit+0x100>)
 80027d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <HAL_UART_MspInit+0x100>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e8:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_UART_MspInit+0x100>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <HAL_UART_MspInit+0x100>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_UART_MspInit+0x100>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0318 	add.w	r3, r7, #24
 8002812:	4619      	mov	r1, r3
 8002814:	480d      	ldr	r0, [pc, #52]	@ (800284c <HAL_UART_MspInit+0x10c>)
 8002816:	f000 f9ab 	bl	8002b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800281a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800281e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0318 	add.w	r3, r7, #24
 800282c:	4619      	mov	r1, r3
 800282e:	4807      	ldr	r0, [pc, #28]	@ (800284c <HAL_UART_MspInit+0x10c>)
 8002830:	f000 f99e 	bl	8002b70 <HAL_GPIO_Init>
}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	@ 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40013800 	.word	0x40013800
 8002840:	40021000 	.word	0x40021000
 8002844:	40010800 	.word	0x40010800
 8002848:	40004800 	.word	0x40004800
 800284c:	40010c00 	.word	0x40010c00

08002850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002850:	f7ff ff1c 	bl	800268c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002854:	480b      	ldr	r0, [pc, #44]	@ (8002884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002856:	490c      	ldr	r1, [pc, #48]	@ (8002888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002858:	4a0c      	ldr	r2, [pc, #48]	@ (800288c <LoopFillZerobss+0x16>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a09      	ldr	r2, [pc, #36]	@ (8002890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800286c:	4c09      	ldr	r4, [pc, #36]	@ (8002894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800287a:	f002 fdef 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800287e:	f7ff f8b5 	bl	80019ec <main>
  bx lr
 8002882:	4770      	bx	lr
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800288c:	08009a0c 	.word	0x08009a0c
  ldr r2, =_sbss
 8002890:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002894:	2000085c 	.word	0x2000085c

08002898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC1_2_IRQHandler>
	...

0800289c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <HAL_Init+0x28>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_Init+0x28>)
 80028a6:	f043 0310 	orr.w	r3, r3, #16
 80028aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f000 f92b 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b2:	200f      	movs	r0, #15
 80028b4:	f000 f808 	bl	80028c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b8:	f7ff fdc8 	bl	800244c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40022000 	.word	0x40022000

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d0:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_InitTick+0x54>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <HAL_InitTick+0x58>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028de:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f935 	bl	8002b56 <HAL_SYSTICK_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00e      	b.n	8002914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d80a      	bhi.n	8002912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fc:	2200      	movs	r2, #0
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f000 f90b 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002908:	4a06      	ldr	r2, [pc, #24]	@ (8002924 <HAL_InitTick+0x5c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000000 	.word	0x20000000
 8002920:	20000008 	.word	0x20000008
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_IncTick+0x1c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_IncTick+0x20>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4413      	add	r3, r2
 8002938:	4a03      	ldr	r2, [pc, #12]	@ (8002948 <HAL_IncTick+0x20>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000008 	.word	0x20000008
 8002948:	2000070c 	.word	0x2000070c

0800294c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b02      	ldr	r3, [pc, #8]	@ (800295c <HAL_GetTick+0x10>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	2000070c 	.word	0x2000070c

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fff0 	bl	800294c <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d005      	beq.n	8002986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_Delay+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002986:	bf00      	nop
 8002988:	f7ff ffe0 	bl	800294c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d8f7      	bhi.n	8002988 <HAL_Delay+0x28>
  {
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000008 	.word	0x20000008

080029a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029da:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	60d3      	str	r3, [r2, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <__NVIC_GetPriorityGrouping+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	@ (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	@ (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	@ 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff90 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff49 	bl	80029a8 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff5e 	bl	80029f0 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff90 	bl	8002a60 <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5f 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffb0 	bl	8002ac4 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b08b      	sub	sp, #44	@ 0x2c
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b82:	e169      	b.n	8002e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b84:	2201      	movs	r2, #1
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	f040 8158 	bne.w	8002e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a9a      	ldr	r2, [pc, #616]	@ (8002e10 <HAL_GPIO_Init+0x2a0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d05e      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bac:	4a98      	ldr	r2, [pc, #608]	@ (8002e10 <HAL_GPIO_Init+0x2a0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d875      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bb2:	4a98      	ldr	r2, [pc, #608]	@ (8002e14 <HAL_GPIO_Init+0x2a4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d058      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bb8:	4a96      	ldr	r2, [pc, #600]	@ (8002e14 <HAL_GPIO_Init+0x2a4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d86f      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bbe:	4a96      	ldr	r2, [pc, #600]	@ (8002e18 <HAL_GPIO_Init+0x2a8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d052      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bc4:	4a94      	ldr	r2, [pc, #592]	@ (8002e18 <HAL_GPIO_Init+0x2a8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d869      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bca:	4a94      	ldr	r2, [pc, #592]	@ (8002e1c <HAL_GPIO_Init+0x2ac>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d04c      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bd0:	4a92      	ldr	r2, [pc, #584]	@ (8002e1c <HAL_GPIO_Init+0x2ac>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d863      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bd6:	4a92      	ldr	r2, [pc, #584]	@ (8002e20 <HAL_GPIO_Init+0x2b0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d046      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bdc:	4a90      	ldr	r2, [pc, #576]	@ (8002e20 <HAL_GPIO_Init+0x2b0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d85d      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002be2:	2b12      	cmp	r3, #18
 8002be4:	d82a      	bhi.n	8002c3c <HAL_GPIO_Init+0xcc>
 8002be6:	2b12      	cmp	r3, #18
 8002be8:	d859      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bea:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <HAL_GPIO_Init+0x80>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c6b 	.word	0x08002c6b
 8002bf4:	08002c45 	.word	0x08002c45
 8002bf8:	08002c57 	.word	0x08002c57
 8002bfc:	08002c99 	.word	0x08002c99
 8002c00:	08002c9f 	.word	0x08002c9f
 8002c04:	08002c9f 	.word	0x08002c9f
 8002c08:	08002c9f 	.word	0x08002c9f
 8002c0c:	08002c9f 	.word	0x08002c9f
 8002c10:	08002c9f 	.word	0x08002c9f
 8002c14:	08002c9f 	.word	0x08002c9f
 8002c18:	08002c9f 	.word	0x08002c9f
 8002c1c:	08002c9f 	.word	0x08002c9f
 8002c20:	08002c9f 	.word	0x08002c9f
 8002c24:	08002c9f 	.word	0x08002c9f
 8002c28:	08002c9f 	.word	0x08002c9f
 8002c2c:	08002c9f 	.word	0x08002c9f
 8002c30:	08002c9f 	.word	0x08002c9f
 8002c34:	08002c4d 	.word	0x08002c4d
 8002c38:	08002c61 	.word	0x08002c61
 8002c3c:	4a79      	ldr	r2, [pc, #484]	@ (8002e24 <HAL_GPIO_Init+0x2b4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c42:	e02c      	b.n	8002c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	623b      	str	r3, [r7, #32]
          break;
 8002c4a:	e029      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	623b      	str	r3, [r7, #32]
          break;
 8002c54:	e024      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	623b      	str	r3, [r7, #32]
          break;
 8002c5e:	e01f      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	330c      	adds	r3, #12
 8002c66:	623b      	str	r3, [r7, #32]
          break;
 8002c68:	e01a      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c72:	2304      	movs	r3, #4
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e013      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c80:	2308      	movs	r3, #8
 8002c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	611a      	str	r2, [r3, #16]
          break;
 8002c8a:	e009      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	615a      	str	r2, [r3, #20]
          break;
 8002c96:	e003      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
          break;
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          break;
 8002c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2bff      	cmp	r3, #255	@ 0xff
 8002ca4:	d801      	bhi.n	8002caa <HAL_GPIO_Init+0x13a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_Init+0x13e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2bff      	cmp	r3, #255	@ 0xff
 8002cb4:	d802      	bhi.n	8002cbc <HAL_GPIO_Init+0x14c>
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0x152>
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	3b08      	subs	r3, #8
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	210f      	movs	r1, #15
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80b1 	beq.w	8002e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d08:	4a48      	ldr	r2, [pc, #288]	@ (8002e2c <HAL_GPIO_Init+0x2bc>)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a40      	ldr	r2, [pc, #256]	@ (8002e30 <HAL_GPIO_Init+0x2c0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <HAL_GPIO_Init+0x1ec>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3f      	ldr	r2, [pc, #252]	@ (8002e34 <HAL_GPIO_Init+0x2c4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00d      	beq.n	8002d58 <HAL_GPIO_Init+0x1e8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <HAL_GPIO_Init+0x1e4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	@ (8002e3c <HAL_GPIO_Init+0x2cc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_GPIO_Init+0x1e0>
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e006      	b.n	8002d5e <HAL_GPIO_Init+0x1ee>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e004      	b.n	8002d5e <HAL_GPIO_Init+0x1ee>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e002      	b.n	8002d5e <HAL_GPIO_Init+0x1ee>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_GPIO_Init+0x1ee>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d60:	f002 0203 	and.w	r2, r2, #3
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	4093      	lsls	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d6e:	492f      	ldr	r1, [pc, #188]	@ (8002e2c <HAL_GPIO_Init+0x2bc>)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d88:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	492c      	ldr	r1, [pc, #176]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d96:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4928      	ldr	r1, [pc, #160]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002db0:	4b23      	ldr	r3, [pc, #140]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4922      	ldr	r1, [pc, #136]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60cb      	str	r3, [r1, #12]
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	491e      	ldr	r1, [pc, #120]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	4918      	ldr	r1, [pc, #96]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de6:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4914      	ldr	r1, [pc, #80]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d021      	beq.n	8002e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e00:	4b0f      	ldr	r3, [pc, #60]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_GPIO_Init+0x2d0>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e021      	b.n	8002e52 <HAL_GPIO_Init+0x2e2>
 8002e0e:	bf00      	nop
 8002e10:	10320000 	.word	0x10320000
 8002e14:	10310000 	.word	0x10310000
 8002e18:	10220000 	.word	0x10220000
 8002e1c:	10210000 	.word	0x10210000
 8002e20:	10120000 	.word	0x10120000
 8002e24:	10110000 	.word	0x10110000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40010800 	.word	0x40010800
 8002e34:	40010c00 	.word	0x40010c00
 8002e38:	40011000 	.word	0x40011000
 8002e3c:	40011400 	.word	0x40011400
 8002e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	4909      	ldr	r1, [pc, #36]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	3301      	adds	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f47f ae8e 	bne.w	8002b84 <HAL_GPIO_Init+0x14>
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	372c      	adds	r7, #44	@ 0x2c
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e001      	b.n	8002e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ec2:	e003      	b.n	8002ecc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	041a      	lsls	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	611a      	str	r2, [r3, #16]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12b      	b.n	8003142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f9c2 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f001 f832 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a81      	ldr	r2, [pc, #516]	@ (800314c <HAL_I2C_Init+0x274>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	@ (8003150 <HAL_I2C_Init+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003154 <HAL_I2C_Init+0x27c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e7      	b.n	8003142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a78      	ldr	r2, [pc, #480]	@ (8003158 <HAL_I2C_Init+0x280>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800314c <HAL_I2C_Init+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <HAL_I2C_Init+0xd4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	e009      	b.n	8002fc0 <HAL_I2C_Init+0xe8>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	4a69      	ldr	r2, [pc, #420]	@ (800315c <HAL_I2C_Init+0x284>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	495c      	ldr	r1, [pc, #368]	@ (800314c <HAL_I2C_Init+0x274>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d819      	bhi.n	8003014 <HAL_I2C_Init+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_I2C_Init+0x138>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e59      	subs	r1, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb1 f3f3 	udiv	r3, r1, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	e051      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003010:	2304      	movs	r3, #4
 8003012:	e04f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <HAL_I2C_Init+0x168>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e012      	b.n	8003066 <HAL_I2C_Init+0x18e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x196>
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_I2C_Init+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e58      	subs	r0, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	fbb0 f3f3 	udiv	r3, r0, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6809      	ldr	r1, [r1, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6911      	ldr	r1, [r2, #16]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	000186a0 	.word	0x000186a0
 8003150:	001e847f 	.word	0x001e847f
 8003154:	003d08ff 	.word	0x003d08ff
 8003158:	431bde83 	.word	0x431bde83
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff fbea 	bl	800294c <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 80e0 	bne.w	8003348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	4970      	ldr	r1, [pc, #448]	@ (8003354 <HAL_I2C_Master_Transmit+0x1f4>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f964 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
 80031a0:	e0d3      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2C_Master_Transmit+0x50>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0cc      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d007      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2221      	movs	r2, #33	@ 0x21
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2210      	movs	r2, #16
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	893a      	ldrh	r2, [r7, #8]
 8003206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a50      	ldr	r2, [pc, #320]	@ (8003358 <HAL_I2C_Master_Transmit+0x1f8>)
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003218:	8979      	ldrh	r1, [r7, #10]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f89c 	bl	800335c <I2C_MasterRequestWrite>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e08d      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003244:	e066      	b.n	8003314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fa22 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06b      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d11b      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x188>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6a39      	ldr	r1, [r7, #32]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fa19 	bl	8003724 <I2C_WaitOnBTFFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d107      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e01a      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d194      	bne.n	8003246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	00100002 	.word	0x00100002
 8003358:	ffff0000 	.word	0xffff0000

0800335c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d006      	beq.n	8003386 <I2C_MasterRequestWrite+0x2a>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d003      	beq.n	8003386 <I2C_MasterRequestWrite+0x2a>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003384:	d108      	bne.n	8003398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00b      	b.n	80033b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339c:	2b12      	cmp	r3, #18
 800339e:	d107      	bne.n	80033b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f84f 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d6:	d103      	bne.n	80033e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e035      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ec:	d108      	bne.n	8003400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e01b      	b.n	8003438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	11db      	asrs	r3, r3, #7
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0306 	and.w	r3, r3, #6
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f063 030f 	orn	r3, r3, #15
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	490e      	ldr	r1, [pc, #56]	@ (8003458 <I2C_MasterRequestWrite+0xfc>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f898 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e010      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4907      	ldr	r1, [pc, #28]	@ (800345c <I2C_MasterRequestWrite+0x100>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f888 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00010008 	.word	0x00010008
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	e048      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d044      	beq.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7ff fa67 	bl	800294c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d139      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10d      	bne.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	e00c      	b.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	43da      	mvns	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d116      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e023      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10d      	bne.n	800352a <I2C_WaitOnFlagUntilTimeout+0xca>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	e00c      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	43da      	mvns	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d093      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003562:	e071      	b.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	d123      	bne.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e067      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d041      	beq.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c4:	f7ff f9c2 	bl	800294c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d302      	bcc.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d136      	bne.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e00b      	b.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	43da      	mvns	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e021      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	0c1b      	lsrs	r3, r3, #16
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10c      	bne.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e00b      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f af6d 	bne.w	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	e034      	b.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f886 	bl	80037b4 <I2C_IsAcknowledgeFailed>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e034      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d028      	beq.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7ff f947 	bl	800294c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036da:	2b80      	cmp	r3, #128	@ 0x80
 80036dc:	d016      	beq.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e007      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003716:	2b80      	cmp	r3, #128	@ 0x80
 8003718:	d1c3      	bne.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	e034      	b.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f83e 	bl	80037b4 <I2C_IsAcknowledgeFailed>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e034      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d028      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7ff f8ff 	bl	800294c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11d      	bne.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d016      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e007      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d1c3      	bne.n	8003732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ca:	d11b      	bne.n	8003804 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	f043 0204 	orr.w	r2, r3, #4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e272      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8087 	beq.w	800393e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003830:	4b92      	ldr	r3, [pc, #584]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00c      	beq.n	8003856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800383c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d112      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
 8003848:	4b8c      	ldr	r3, [pc, #560]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b89      	ldr	r3, [pc, #548]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06c      	beq.n	800393c <HAL_RCC_OscConfig+0x12c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d168      	bne.n	800393c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e24c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x76>
 8003878:	4b80      	ldr	r3, [pc, #512]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7f      	ldr	r2, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e02e      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7a      	ldr	r2, [pc, #488]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b78      	ldr	r3, [pc, #480]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a77      	ldr	r2, [pc, #476]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0xbc>
 80038b2:	4b72      	ldr	r3, [pc, #456]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a71      	ldr	r2, [pc, #452]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6f      	ldr	r3, [pc, #444]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038cc:	4b6b      	ldr	r3, [pc, #428]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b68      	ldr	r3, [pc, #416]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a67      	ldr	r2, [pc, #412]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7ff f82e 	bl	800294c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7ff f82a 	bl	800294c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e200      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5d      	ldr	r3, [pc, #372]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe4>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7ff f81a 	bl	800294c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7ff f816 	bl	800294c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1ec      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x10c>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003956:	4b49      	ldr	r3, [pc, #292]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
 8003962:	4b46      	ldr	r3, [pc, #280]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c0      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4939      	ldr	r1, [pc, #228]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fe ffcf 	bl	800294c <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fe ffcb 	bl	800294c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1a1      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4927      	ldr	r1, [pc, #156]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe ffae 	bl	800294c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fe ffaa 	bl	800294c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e180      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03a      	beq.n	8003a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d019      	beq.n	8003a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fe ff8e 	bl	800294c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe ff8a 	bl	800294c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e160      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f000 face 	bl	8003ff4 <RCC_Delay>
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7fe ff74 	bl	800294c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe ff70 	bl	800294c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e146      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	42420000 	.word	0x42420000
 8003a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b92      	ldr	r3, [pc, #584]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e9      	bne.n	8003a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a6 	beq.w	8003bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b88      	ldr	r3, [pc, #544]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a87      	ldr	r2, [pc, #540]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	61d3      	str	r3, [r2, #28]
 8003abe:	4b85      	ldr	r3, [pc, #532]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe ff31 	bl	800294c <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fe ff2d 	bl	800294c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	@ 0x64
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e103      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b75      	ldr	r3, [pc, #468]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b14:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e02d      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x334>
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a69      	ldr	r2, [pc, #420]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6213      	str	r3, [r2, #32]
 8003b36:	4b67      	ldr	r3, [pc, #412]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a66      	ldr	r2, [pc, #408]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x356>
 8003b4c:	4b61      	ldr	r3, [pc, #388]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4a60      	ldr	r2, [pc, #384]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b66:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	4b58      	ldr	r3, [pc, #352]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a57      	ldr	r2, [pc, #348]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fee1 	bl	800294c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fedd 	bl	800294c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0b1      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x37e>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fecb 	bl	800294c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe fec7 	bl	800294c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e09b      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b40      	ldr	r3, [pc, #256]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8087 	beq.w	8003d06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf8:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d061      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d146      	bne.n	8003c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b33      	ldr	r3, [pc, #204]	@ (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe fe9b 	bl	800294c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fe fe97 	bl	800294c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e06d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2c:	4b29      	ldr	r3, [pc, #164]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c42:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4921      	ldr	r1, [pc, #132]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c54:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a19      	ldr	r1, [r3, #32]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	491b      	ldr	r1, [pc, #108]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fe fe6b 	bl	800294c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fe fe67 	bl	800294c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e03d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c8c:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
 8003c98:	e035      	b.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fe54 	bl	800294c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fe50 	bl	800294c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e026      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x498>
 8003cc6:	e01e      	b.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e019      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_RCC_OscConfig+0x500>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d0      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b67      	ldr	r3, [pc, #412]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4965      	ldr	r1, [pc, #404]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b8      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d70:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a58      	ldr	r2, [pc, #352]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	4b53      	ldr	r3, [pc, #332]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a52      	ldr	r2, [pc, #328]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b50      	ldr	r3, [pc, #320]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	494d      	ldr	r1, [pc, #308]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d040      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b41      	ldr	r3, [pc, #260]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e073      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b39      	ldr	r3, [pc, #228]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4936      	ldr	r1, [pc, #216]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fe fda2 	bl	800294c <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fe fd9e 	bl	800294c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e053      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b27      	ldr	r3, [pc, #156]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d210      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b24      	ldr	r3, [pc, #144]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4922      	ldr	r1, [pc, #136]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e032      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4916      	ldr	r1, [pc, #88]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	490e      	ldr	r1, [pc, #56]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea2:	f000 f821 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490a      	ldr	r1, [pc, #40]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	4a09      	ldr	r2, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fd00 	bl	80028c8 <HAL_InitTick>

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	080095ac 	.word	0x080095ac
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x30>
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x36>
 8003f16:	e027      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f18:	4b19      	ldr	r3, [pc, #100]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1a:	613b      	str	r3, [r7, #16]
      break;
 8003f1c:	e027      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0c9b      	lsrs	r3, r3, #18
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	4a17      	ldr	r2, [pc, #92]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f36:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0c5b      	lsrs	r3, r3, #17
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	4a11      	ldr	r2, [pc, #68]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	fb03 f202 	mul.w	r2, r3, r2
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e004      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	613b      	str	r3, [r7, #16]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6a:	613b      	str	r3, [r7, #16]
      break;
 8003f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6e:	693b      	ldr	r3, [r7, #16]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	007a1200 	.word	0x007a1200
 8003f84:	080095c4 	.word	0x080095c4
 8003f88:	080095d4 	.word	0x080095d4
 8003f8c:	003d0900 	.word	0x003d0900

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b02      	ldr	r3, [pc, #8]	@ (8003fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff2 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	080095bc 	.word	0x080095bc

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd0:	f7ff ffde 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0adb      	lsrs	r3, r3, #11
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	@ (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	080095bc 	.word	0x080095bc

08003ff4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <RCC_Delay+0x34>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <RCC_Delay+0x38>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0a5b      	lsrs	r3, r3, #9
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004010:	bf00      	nop
  }
  while (Delay --);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1e5a      	subs	r2, r3, #1
 8004016:	60fa      	str	r2, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f9      	bne.n	8004010 <RCC_Delay+0x1c>
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	20000000 	.word	0x20000000
 800402c:	10624dd3 	.word	0x10624dd3

08004030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e042      	b.n	80040c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fe fb72 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	@ 0x24
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f971 	bl	800435c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	@ 0x28
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d175      	bne.n	80041dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Transmit+0x2c>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e06e      	b.n	80041de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	@ 0x21
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fe fc1d 	bl	800294c <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x6c>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004144:	e02e      	b.n	80041a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2180      	movs	r1, #128	@ 0x80
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f848 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e03a      	b.n	80041de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3302      	adds	r3, #2
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e007      	b.n	8004196 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	3301      	adds	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1cb      	bne.n	8004146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2140      	movs	r1, #64	@ 0x40
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f814 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e006      	b.n	80041de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4613      	mov	r3, r2
 80041f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	e03b      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d037      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004200:	f7fe fba4 	bl	800294c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <UART_WaitOnFlagUntilTimeout+0x30>
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e03a      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d023      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b80      	cmp	r3, #128	@ 0x80
 800422c:	d020      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d01d      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b08      	cmp	r3, #8
 8004240:	d116      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f81d 	bl	8004298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2208      	movs	r2, #8
 8004262:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e00f      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d0b4      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b095      	sub	sp, #84	@ 0x54
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	2b01      	cmp	r3, #1
 800430e:	d119      	bne.n	8004344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	647b      	str	r3, [r7, #68]	@ 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004330:	61ba      	str	r2, [r7, #24]
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004352:	bf00      	nop
 8004354:	3754      	adds	r7, #84	@ 0x54
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004396:	f023 030c 	bic.w	r3, r3, #12
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2c      	ldr	r2, [pc, #176]	@ (8004470 <UART_SetConfig+0x114>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d103      	bne.n	80043cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043c4:	f7ff fe02 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	e002      	b.n	80043d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043cc:	f7ff fdea 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 80043d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	4a22      	ldr	r2, [pc, #136]	@ (8004474 <UART_SetConfig+0x118>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	0119      	lsls	r1, r3, #4
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009a      	lsls	r2, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fbb2 f2f3 	udiv	r2, r2, r3
 8004408:	4b1a      	ldr	r3, [pc, #104]	@ (8004474 <UART_SetConfig+0x118>)
 800440a:	fba3 0302 	umull	r0, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2064      	movs	r0, #100	@ 0x64
 8004412:	fb00 f303 	mul.w	r3, r0, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	3332      	adds	r3, #50	@ 0x32
 800441c:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <UART_SetConfig+0x118>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004428:	4419      	add	r1, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <UART_SetConfig+0x118>)
 8004442:	fba3 0302 	umull	r0, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2064      	movs	r0, #100	@ 0x64
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	@ 0x32
 8004454:	4a07      	ldr	r2, [pc, #28]	@ (8004474 <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 020f 	and.w	r2, r3, #15
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	440a      	add	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40013800 	.word	0x40013800
 8004474:	51eb851f 	.word	0x51eb851f

08004478 <__cvt>:
 8004478:	2b00      	cmp	r3, #0
 800447a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800447e:	461d      	mov	r5, r3
 8004480:	bfbb      	ittet	lt
 8004482:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004486:	461d      	movlt	r5, r3
 8004488:	2300      	movge	r3, #0
 800448a:	232d      	movlt	r3, #45	@ 0x2d
 800448c:	b088      	sub	sp, #32
 800448e:	4614      	mov	r4, r2
 8004490:	bfb8      	it	lt
 8004492:	4614      	movlt	r4, r2
 8004494:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004496:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004498:	7013      	strb	r3, [r2, #0]
 800449a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800449c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80044a0:	f023 0820 	bic.w	r8, r3, #32
 80044a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044a8:	d005      	beq.n	80044b6 <__cvt+0x3e>
 80044aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80044ae:	d100      	bne.n	80044b2 <__cvt+0x3a>
 80044b0:	3601      	adds	r6, #1
 80044b2:	2302      	movs	r3, #2
 80044b4:	e000      	b.n	80044b8 <__cvt+0x40>
 80044b6:	2303      	movs	r3, #3
 80044b8:	aa07      	add	r2, sp, #28
 80044ba:	9204      	str	r2, [sp, #16]
 80044bc:	aa06      	add	r2, sp, #24
 80044be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044c2:	e9cd 3600 	strd	r3, r6, [sp]
 80044c6:	4622      	mov	r2, r4
 80044c8:	462b      	mov	r3, r5
 80044ca:	f001 f889 	bl	80055e0 <_dtoa_r>
 80044ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80044d2:	4607      	mov	r7, r0
 80044d4:	d119      	bne.n	800450a <__cvt+0x92>
 80044d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80044d8:	07db      	lsls	r3, r3, #31
 80044da:	d50e      	bpl.n	80044fa <__cvt+0x82>
 80044dc:	eb00 0906 	add.w	r9, r0, r6
 80044e0:	2200      	movs	r2, #0
 80044e2:	2300      	movs	r3, #0
 80044e4:	4620      	mov	r0, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	f7fc fa5e 	bl	80009a8 <__aeabi_dcmpeq>
 80044ec:	b108      	cbz	r0, 80044f2 <__cvt+0x7a>
 80044ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80044f2:	2230      	movs	r2, #48	@ 0x30
 80044f4:	9b07      	ldr	r3, [sp, #28]
 80044f6:	454b      	cmp	r3, r9
 80044f8:	d31e      	bcc.n	8004538 <__cvt+0xc0>
 80044fa:	4638      	mov	r0, r7
 80044fc:	9b07      	ldr	r3, [sp, #28]
 80044fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004500:	1bdb      	subs	r3, r3, r7
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	b008      	add	sp, #32
 8004506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800450e:	eb00 0906 	add.w	r9, r0, r6
 8004512:	d1e5      	bne.n	80044e0 <__cvt+0x68>
 8004514:	7803      	ldrb	r3, [r0, #0]
 8004516:	2b30      	cmp	r3, #48	@ 0x30
 8004518:	d10a      	bne.n	8004530 <__cvt+0xb8>
 800451a:	2200      	movs	r2, #0
 800451c:	2300      	movs	r3, #0
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fc fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8004526:	b918      	cbnz	r0, 8004530 <__cvt+0xb8>
 8004528:	f1c6 0601 	rsb	r6, r6, #1
 800452c:	f8ca 6000 	str.w	r6, [sl]
 8004530:	f8da 3000 	ldr.w	r3, [sl]
 8004534:	4499      	add	r9, r3
 8004536:	e7d3      	b.n	80044e0 <__cvt+0x68>
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	9107      	str	r1, [sp, #28]
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e7d9      	b.n	80044f4 <__cvt+0x7c>

08004540 <__exponent>:
 8004540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004542:	2900      	cmp	r1, #0
 8004544:	bfb6      	itet	lt
 8004546:	232d      	movlt	r3, #45	@ 0x2d
 8004548:	232b      	movge	r3, #43	@ 0x2b
 800454a:	4249      	neglt	r1, r1
 800454c:	2909      	cmp	r1, #9
 800454e:	7002      	strb	r2, [r0, #0]
 8004550:	7043      	strb	r3, [r0, #1]
 8004552:	dd29      	ble.n	80045a8 <__exponent+0x68>
 8004554:	f10d 0307 	add.w	r3, sp, #7
 8004558:	461d      	mov	r5, r3
 800455a:	270a      	movs	r7, #10
 800455c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004560:	461a      	mov	r2, r3
 8004562:	fb07 1416 	mls	r4, r7, r6, r1
 8004566:	3430      	adds	r4, #48	@ 0x30
 8004568:	f802 4c01 	strb.w	r4, [r2, #-1]
 800456c:	460c      	mov	r4, r1
 800456e:	2c63      	cmp	r4, #99	@ 0x63
 8004570:	4631      	mov	r1, r6
 8004572:	f103 33ff 	add.w	r3, r3, #4294967295
 8004576:	dcf1      	bgt.n	800455c <__exponent+0x1c>
 8004578:	3130      	adds	r1, #48	@ 0x30
 800457a:	1e94      	subs	r4, r2, #2
 800457c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004580:	4623      	mov	r3, r4
 8004582:	1c41      	adds	r1, r0, #1
 8004584:	42ab      	cmp	r3, r5
 8004586:	d30a      	bcc.n	800459e <__exponent+0x5e>
 8004588:	f10d 0309 	add.w	r3, sp, #9
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	42ac      	cmp	r4, r5
 8004590:	bf88      	it	hi
 8004592:	2300      	movhi	r3, #0
 8004594:	3302      	adds	r3, #2
 8004596:	4403      	add	r3, r0
 8004598:	1a18      	subs	r0, r3, r0
 800459a:	b003      	add	sp, #12
 800459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80045a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80045a6:	e7ed      	b.n	8004584 <__exponent+0x44>
 80045a8:	2330      	movs	r3, #48	@ 0x30
 80045aa:	3130      	adds	r1, #48	@ 0x30
 80045ac:	7083      	strb	r3, [r0, #2]
 80045ae:	70c1      	strb	r1, [r0, #3]
 80045b0:	1d03      	adds	r3, r0, #4
 80045b2:	e7f1      	b.n	8004598 <__exponent+0x58>

080045b4 <_printf_float>:
 80045b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b8:	b091      	sub	sp, #68	@ 0x44
 80045ba:	460c      	mov	r4, r1
 80045bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80045c0:	4616      	mov	r6, r2
 80045c2:	461f      	mov	r7, r3
 80045c4:	4605      	mov	r5, r0
 80045c6:	f000 fef9 	bl	80053bc <_localeconv_r>
 80045ca:	6803      	ldr	r3, [r0, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	9308      	str	r3, [sp, #32]
 80045d0:	f7fb fdbe 	bl	8000150 <strlen>
 80045d4:	2300      	movs	r3, #0
 80045d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80045d8:	f8d8 3000 	ldr.w	r3, [r8]
 80045dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80045de:	3307      	adds	r3, #7
 80045e0:	f023 0307 	bic.w	r3, r3, #7
 80045e4:	f103 0208 	add.w	r2, r3, #8
 80045e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045ec:	f8d4 b000 	ldr.w	fp, [r4]
 80045f0:	f8c8 2000 	str.w	r2, [r8]
 80045f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80045fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004602:	f04f 32ff 	mov.w	r2, #4294967295
 8004606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800460a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800460e:	4b9c      	ldr	r3, [pc, #624]	@ (8004880 <_printf_float+0x2cc>)
 8004610:	f7fc f9fc 	bl	8000a0c <__aeabi_dcmpun>
 8004614:	bb70      	cbnz	r0, 8004674 <_printf_float+0xc0>
 8004616:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800461a:	f04f 32ff 	mov.w	r2, #4294967295
 800461e:	4b98      	ldr	r3, [pc, #608]	@ (8004880 <_printf_float+0x2cc>)
 8004620:	f7fc f9d6 	bl	80009d0 <__aeabi_dcmple>
 8004624:	bb30      	cbnz	r0, 8004674 <_printf_float+0xc0>
 8004626:	2200      	movs	r2, #0
 8004628:	2300      	movs	r3, #0
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fc f9c5 	bl	80009bc <__aeabi_dcmplt>
 8004632:	b110      	cbz	r0, 800463a <_printf_float+0x86>
 8004634:	232d      	movs	r3, #45	@ 0x2d
 8004636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800463a:	4a92      	ldr	r2, [pc, #584]	@ (8004884 <_printf_float+0x2d0>)
 800463c:	4b92      	ldr	r3, [pc, #584]	@ (8004888 <_printf_float+0x2d4>)
 800463e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004642:	bf8c      	ite	hi
 8004644:	4690      	movhi	r8, r2
 8004646:	4698      	movls	r8, r3
 8004648:	2303      	movs	r3, #3
 800464a:	f04f 0900 	mov.w	r9, #0
 800464e:	6123      	str	r3, [r4, #16]
 8004650:	f02b 0304 	bic.w	r3, fp, #4
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	4633      	mov	r3, r6
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	9700      	str	r7, [sp, #0]
 800465e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004660:	f000 f9d4 	bl	8004a0c <_printf_common>
 8004664:	3001      	adds	r0, #1
 8004666:	f040 8090 	bne.w	800478a <_printf_float+0x1d6>
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	b011      	add	sp, #68	@ 0x44
 8004670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	4640      	mov	r0, r8
 800467a:	4649      	mov	r1, r9
 800467c:	f7fc f9c6 	bl	8000a0c <__aeabi_dcmpun>
 8004680:	b148      	cbz	r0, 8004696 <_printf_float+0xe2>
 8004682:	464b      	mov	r3, r9
 8004684:	2b00      	cmp	r3, #0
 8004686:	bfb8      	it	lt
 8004688:	232d      	movlt	r3, #45	@ 0x2d
 800468a:	4a80      	ldr	r2, [pc, #512]	@ (800488c <_printf_float+0x2d8>)
 800468c:	bfb8      	it	lt
 800468e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004692:	4b7f      	ldr	r3, [pc, #508]	@ (8004890 <_printf_float+0x2dc>)
 8004694:	e7d3      	b.n	800463e <_printf_float+0x8a>
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	d13f      	bne.n	8004720 <_printf_float+0x16c>
 80046a0:	2306      	movs	r3, #6
 80046a2:	6063      	str	r3, [r4, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	9206      	str	r2, [sp, #24]
 80046ae:	aa0e      	add	r2, sp, #56	@ 0x38
 80046b0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80046b4:	aa0d      	add	r2, sp, #52	@ 0x34
 80046b6:	9203      	str	r2, [sp, #12]
 80046b8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80046bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046c0:	6863      	ldr	r3, [r4, #4]
 80046c2:	4642      	mov	r2, r8
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4628      	mov	r0, r5
 80046c8:	464b      	mov	r3, r9
 80046ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80046cc:	f7ff fed4 	bl	8004478 <__cvt>
 80046d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80046d2:	4680      	mov	r8, r0
 80046d4:	2947      	cmp	r1, #71	@ 0x47
 80046d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80046d8:	d128      	bne.n	800472c <_printf_float+0x178>
 80046da:	1cc8      	adds	r0, r1, #3
 80046dc:	db02      	blt.n	80046e4 <_printf_float+0x130>
 80046de:	6863      	ldr	r3, [r4, #4]
 80046e0:	4299      	cmp	r1, r3
 80046e2:	dd40      	ble.n	8004766 <_printf_float+0x1b2>
 80046e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80046e8:	fa5f fa8a 	uxtb.w	sl, sl
 80046ec:	4652      	mov	r2, sl
 80046ee:	3901      	subs	r1, #1
 80046f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80046f4:	910d      	str	r1, [sp, #52]	@ 0x34
 80046f6:	f7ff ff23 	bl	8004540 <__exponent>
 80046fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046fc:	4681      	mov	r9, r0
 80046fe:	1813      	adds	r3, r2, r0
 8004700:	2a01      	cmp	r2, #1
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	dc02      	bgt.n	800470c <_printf_float+0x158>
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	07d2      	lsls	r2, r2, #31
 800470a:	d501      	bpl.n	8004710 <_printf_float+0x15c>
 800470c:	3301      	adds	r3, #1
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004714:	2b00      	cmp	r3, #0
 8004716:	d09e      	beq.n	8004656 <_printf_float+0xa2>
 8004718:	232d      	movs	r3, #45	@ 0x2d
 800471a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800471e:	e79a      	b.n	8004656 <_printf_float+0xa2>
 8004720:	2947      	cmp	r1, #71	@ 0x47
 8004722:	d1bf      	bne.n	80046a4 <_printf_float+0xf0>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1bd      	bne.n	80046a4 <_printf_float+0xf0>
 8004728:	2301      	movs	r3, #1
 800472a:	e7ba      	b.n	80046a2 <_printf_float+0xee>
 800472c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004730:	d9dc      	bls.n	80046ec <_printf_float+0x138>
 8004732:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004736:	d118      	bne.n	800476a <_printf_float+0x1b6>
 8004738:	2900      	cmp	r1, #0
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	dd0b      	ble.n	8004756 <_printf_float+0x1a2>
 800473e:	6121      	str	r1, [r4, #16]
 8004740:	b913      	cbnz	r3, 8004748 <_printf_float+0x194>
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	07d0      	lsls	r0, r2, #31
 8004746:	d502      	bpl.n	800474e <_printf_float+0x19a>
 8004748:	3301      	adds	r3, #1
 800474a:	440b      	add	r3, r1
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	f04f 0900 	mov.w	r9, #0
 8004752:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004754:	e7dc      	b.n	8004710 <_printf_float+0x15c>
 8004756:	b913      	cbnz	r3, 800475e <_printf_float+0x1aa>
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	07d2      	lsls	r2, r2, #31
 800475c:	d501      	bpl.n	8004762 <_printf_float+0x1ae>
 800475e:	3302      	adds	r3, #2
 8004760:	e7f4      	b.n	800474c <_printf_float+0x198>
 8004762:	2301      	movs	r3, #1
 8004764:	e7f2      	b.n	800474c <_printf_float+0x198>
 8004766:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800476a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800476c:	4299      	cmp	r1, r3
 800476e:	db05      	blt.n	800477c <_printf_float+0x1c8>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	6121      	str	r1, [r4, #16]
 8004774:	07d8      	lsls	r0, r3, #31
 8004776:	d5ea      	bpl.n	800474e <_printf_float+0x19a>
 8004778:	1c4b      	adds	r3, r1, #1
 800477a:	e7e7      	b.n	800474c <_printf_float+0x198>
 800477c:	2900      	cmp	r1, #0
 800477e:	bfcc      	ite	gt
 8004780:	2201      	movgt	r2, #1
 8004782:	f1c1 0202 	rsble	r2, r1, #2
 8004786:	4413      	add	r3, r2
 8004788:	e7e0      	b.n	800474c <_printf_float+0x198>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	055a      	lsls	r2, r3, #21
 800478e:	d407      	bmi.n	80047a0 <_printf_float+0x1ec>
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	4642      	mov	r2, r8
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	d12b      	bne.n	80047f6 <_printf_float+0x242>
 800479e:	e764      	b.n	800466a <_printf_float+0xb6>
 80047a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047a4:	f240 80dc 	bls.w	8004960 <_printf_float+0x3ac>
 80047a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047ac:	2200      	movs	r2, #0
 80047ae:	2300      	movs	r3, #0
 80047b0:	f7fc f8fa 	bl	80009a8 <__aeabi_dcmpeq>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d033      	beq.n	8004820 <_printf_float+0x26c>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4631      	mov	r1, r6
 80047bc:	4628      	mov	r0, r5
 80047be:	4a35      	ldr	r2, [pc, #212]	@ (8004894 <_printf_float+0x2e0>)
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	f43f af51 	beq.w	800466a <_printf_float+0xb6>
 80047c8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80047cc:	4543      	cmp	r3, r8
 80047ce:	db02      	blt.n	80047d6 <_printf_float+0x222>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	07d8      	lsls	r0, r3, #31
 80047d4:	d50f      	bpl.n	80047f6 <_printf_float+0x242>
 80047d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f af42 	beq.w	800466a <_printf_float+0xb6>
 80047e6:	f04f 0900 	mov.w	r9, #0
 80047ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80047ee:	f104 0a1a 	add.w	sl, r4, #26
 80047f2:	45c8      	cmp	r8, r9
 80047f4:	dc09      	bgt.n	800480a <_printf_float+0x256>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	079b      	lsls	r3, r3, #30
 80047fa:	f100 8102 	bmi.w	8004a02 <_printf_float+0x44e>
 80047fe:	68e0      	ldr	r0, [r4, #12]
 8004800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004802:	4298      	cmp	r0, r3
 8004804:	bfb8      	it	lt
 8004806:	4618      	movlt	r0, r3
 8004808:	e731      	b.n	800466e <_printf_float+0xba>
 800480a:	2301      	movs	r3, #1
 800480c:	4652      	mov	r2, sl
 800480e:	4631      	mov	r1, r6
 8004810:	4628      	mov	r0, r5
 8004812:	47b8      	blx	r7
 8004814:	3001      	adds	r0, #1
 8004816:	f43f af28 	beq.w	800466a <_printf_float+0xb6>
 800481a:	f109 0901 	add.w	r9, r9, #1
 800481e:	e7e8      	b.n	80047f2 <_printf_float+0x23e>
 8004820:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	dc38      	bgt.n	8004898 <_printf_float+0x2e4>
 8004826:	2301      	movs	r3, #1
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <_printf_float+0x2e0>)
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f af1a 	beq.w	800466a <_printf_float+0xb6>
 8004836:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800483a:	ea59 0303 	orrs.w	r3, r9, r3
 800483e:	d102      	bne.n	8004846 <_printf_float+0x292>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07d9      	lsls	r1, r3, #31
 8004844:	d5d7      	bpl.n	80047f6 <_printf_float+0x242>
 8004846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f af0a 	beq.w	800466a <_printf_float+0xb6>
 8004856:	f04f 0a00 	mov.w	sl, #0
 800485a:	f104 0b1a 	add.w	fp, r4, #26
 800485e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004860:	425b      	negs	r3, r3
 8004862:	4553      	cmp	r3, sl
 8004864:	dc01      	bgt.n	800486a <_printf_float+0x2b6>
 8004866:	464b      	mov	r3, r9
 8004868:	e793      	b.n	8004792 <_printf_float+0x1de>
 800486a:	2301      	movs	r3, #1
 800486c:	465a      	mov	r2, fp
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	f43f aef8 	beq.w	800466a <_printf_float+0xb6>
 800487a:	f10a 0a01 	add.w	sl, sl, #1
 800487e:	e7ee      	b.n	800485e <_printf_float+0x2aa>
 8004880:	7fefffff 	.word	0x7fefffff
 8004884:	080095da 	.word	0x080095da
 8004888:	080095d6 	.word	0x080095d6
 800488c:	080095e2 	.word	0x080095e2
 8004890:	080095de 	.word	0x080095de
 8004894:	080095e6 	.word	0x080095e6
 8004898:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800489a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800489e:	4553      	cmp	r3, sl
 80048a0:	bfa8      	it	ge
 80048a2:	4653      	movge	r3, sl
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	4699      	mov	r9, r3
 80048a8:	dc36      	bgt.n	8004918 <_printf_float+0x364>
 80048aa:	f04f 0b00 	mov.w	fp, #0
 80048ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048b2:	f104 021a 	add.w	r2, r4, #26
 80048b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ba:	eba3 0309 	sub.w	r3, r3, r9
 80048be:	455b      	cmp	r3, fp
 80048c0:	dc31      	bgt.n	8004926 <_printf_float+0x372>
 80048c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048c4:	459a      	cmp	sl, r3
 80048c6:	dc3a      	bgt.n	800493e <_printf_float+0x38a>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	07da      	lsls	r2, r3, #31
 80048cc:	d437      	bmi.n	800493e <_printf_float+0x38a>
 80048ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048d0:	ebaa 0903 	sub.w	r9, sl, r3
 80048d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048d6:	ebaa 0303 	sub.w	r3, sl, r3
 80048da:	4599      	cmp	r9, r3
 80048dc:	bfa8      	it	ge
 80048de:	4699      	movge	r9, r3
 80048e0:	f1b9 0f00 	cmp.w	r9, #0
 80048e4:	dc33      	bgt.n	800494e <_printf_float+0x39a>
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048ee:	f104 0b1a 	add.w	fp, r4, #26
 80048f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048f4:	ebaa 0303 	sub.w	r3, sl, r3
 80048f8:	eba3 0309 	sub.w	r3, r3, r9
 80048fc:	4543      	cmp	r3, r8
 80048fe:	f77f af7a 	ble.w	80047f6 <_printf_float+0x242>
 8004902:	2301      	movs	r3, #1
 8004904:	465a      	mov	r2, fp
 8004906:	4631      	mov	r1, r6
 8004908:	4628      	mov	r0, r5
 800490a:	47b8      	blx	r7
 800490c:	3001      	adds	r0, #1
 800490e:	f43f aeac 	beq.w	800466a <_printf_float+0xb6>
 8004912:	f108 0801 	add.w	r8, r8, #1
 8004916:	e7ec      	b.n	80048f2 <_printf_float+0x33e>
 8004918:	4642      	mov	r2, r8
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	d1c2      	bne.n	80048aa <_printf_float+0x2f6>
 8004924:	e6a1      	b.n	800466a <_printf_float+0xb6>
 8004926:	2301      	movs	r3, #1
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	920a      	str	r2, [sp, #40]	@ 0x28
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f ae9a 	beq.w	800466a <_printf_float+0xb6>
 8004936:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004938:	f10b 0b01 	add.w	fp, fp, #1
 800493c:	e7bb      	b.n	80048b6 <_printf_float+0x302>
 800493e:	4631      	mov	r1, r6
 8004940:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004944:	4628      	mov	r0, r5
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	d1c0      	bne.n	80048ce <_printf_float+0x31a>
 800494c:	e68d      	b.n	800466a <_printf_float+0xb6>
 800494e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004950:	464b      	mov	r3, r9
 8004952:	4631      	mov	r1, r6
 8004954:	4628      	mov	r0, r5
 8004956:	4442      	add	r2, r8
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	d1c3      	bne.n	80048e6 <_printf_float+0x332>
 800495e:	e684      	b.n	800466a <_printf_float+0xb6>
 8004960:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004964:	f1ba 0f01 	cmp.w	sl, #1
 8004968:	dc01      	bgt.n	800496e <_printf_float+0x3ba>
 800496a:	07db      	lsls	r3, r3, #31
 800496c:	d536      	bpl.n	80049dc <_printf_float+0x428>
 800496e:	2301      	movs	r3, #1
 8004970:	4642      	mov	r2, r8
 8004972:	4631      	mov	r1, r6
 8004974:	4628      	mov	r0, r5
 8004976:	47b8      	blx	r7
 8004978:	3001      	adds	r0, #1
 800497a:	f43f ae76 	beq.w	800466a <_printf_float+0xb6>
 800497e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004982:	4631      	mov	r1, r6
 8004984:	4628      	mov	r0, r5
 8004986:	47b8      	blx	r7
 8004988:	3001      	adds	r0, #1
 800498a:	f43f ae6e 	beq.w	800466a <_printf_float+0xb6>
 800498e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004992:	2200      	movs	r2, #0
 8004994:	2300      	movs	r3, #0
 8004996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800499a:	f7fc f805 	bl	80009a8 <__aeabi_dcmpeq>
 800499e:	b9c0      	cbnz	r0, 80049d2 <_printf_float+0x41e>
 80049a0:	4653      	mov	r3, sl
 80049a2:	f108 0201 	add.w	r2, r8, #1
 80049a6:	4631      	mov	r1, r6
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b8      	blx	r7
 80049ac:	3001      	adds	r0, #1
 80049ae:	d10c      	bne.n	80049ca <_printf_float+0x416>
 80049b0:	e65b      	b.n	800466a <_printf_float+0xb6>
 80049b2:	2301      	movs	r3, #1
 80049b4:	465a      	mov	r2, fp
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	f43f ae54 	beq.w	800466a <_printf_float+0xb6>
 80049c2:	f108 0801 	add.w	r8, r8, #1
 80049c6:	45d0      	cmp	r8, sl
 80049c8:	dbf3      	blt.n	80049b2 <_printf_float+0x3fe>
 80049ca:	464b      	mov	r3, r9
 80049cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80049d0:	e6e0      	b.n	8004794 <_printf_float+0x1e0>
 80049d2:	f04f 0800 	mov.w	r8, #0
 80049d6:	f104 0b1a 	add.w	fp, r4, #26
 80049da:	e7f4      	b.n	80049c6 <_printf_float+0x412>
 80049dc:	2301      	movs	r3, #1
 80049de:	4642      	mov	r2, r8
 80049e0:	e7e1      	b.n	80049a6 <_printf_float+0x3f2>
 80049e2:	2301      	movs	r3, #1
 80049e4:	464a      	mov	r2, r9
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f ae3c 	beq.w	800466a <_printf_float+0xb6>
 80049f2:	f108 0801 	add.w	r8, r8, #1
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80049fa:	1a5b      	subs	r3, r3, r1
 80049fc:	4543      	cmp	r3, r8
 80049fe:	dcf0      	bgt.n	80049e2 <_printf_float+0x42e>
 8004a00:	e6fd      	b.n	80047fe <_printf_float+0x24a>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	f104 0919 	add.w	r9, r4, #25
 8004a0a:	e7f4      	b.n	80049f6 <_printf_float+0x442>

08004a0c <_printf_common>:
 8004a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a10:	4616      	mov	r6, r2
 8004a12:	4698      	mov	r8, r3
 8004a14:	688a      	ldr	r2, [r1, #8]
 8004a16:	690b      	ldr	r3, [r1, #16]
 8004a18:	4607      	mov	r7, r0
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	bfb8      	it	lt
 8004a1e:	4613      	movlt	r3, r2
 8004a20:	6033      	str	r3, [r6, #0]
 8004a22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a26:	460c      	mov	r4, r1
 8004a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a2c:	b10a      	cbz	r2, 8004a32 <_printf_common+0x26>
 8004a2e:	3301      	adds	r3, #1
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	6833      	ldrmi	r3, [r6, #0]
 8004a3a:	3302      	addmi	r3, #2
 8004a3c:	6033      	strmi	r3, [r6, #0]
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	f015 0506 	ands.w	r5, r5, #6
 8004a44:	d106      	bne.n	8004a54 <_printf_common+0x48>
 8004a46:	f104 0a19 	add.w	sl, r4, #25
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	6832      	ldr	r2, [r6, #0]
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dc2b      	bgt.n	8004aac <_printf_common+0xa0>
 8004a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	3b00      	subs	r3, #0
 8004a5c:	bf18      	it	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	0692      	lsls	r2, r2, #26
 8004a62:	d430      	bmi.n	8004ac6 <_printf_common+0xba>
 8004a64:	4641      	mov	r1, r8
 8004a66:	4638      	mov	r0, r7
 8004a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a6c:	47c8      	blx	r9
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d023      	beq.n	8004aba <_printf_common+0xae>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	6922      	ldr	r2, [r4, #16]
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf14      	ite	ne
 8004a7e:	2500      	movne	r5, #0
 8004a80:	6833      	ldreq	r3, [r6, #0]
 8004a82:	f04f 0600 	mov.w	r6, #0
 8004a86:	bf08      	it	eq
 8004a88:	68e5      	ldreq	r5, [r4, #12]
 8004a8a:	f104 041a 	add.w	r4, r4, #26
 8004a8e:	bf08      	it	eq
 8004a90:	1aed      	subeq	r5, r5, r3
 8004a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a96:	bf08      	it	eq
 8004a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bfc4      	itt	gt
 8004aa0:	1a9b      	subgt	r3, r3, r2
 8004aa2:	18ed      	addgt	r5, r5, r3
 8004aa4:	42b5      	cmp	r5, r6
 8004aa6:	d11a      	bne.n	8004ade <_printf_common+0xd2>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e008      	b.n	8004abe <_printf_common+0xb2>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4652      	mov	r2, sl
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c8      	blx	r9
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d103      	bne.n	8004ac2 <_printf_common+0xb6>
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295
 8004abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	e7c1      	b.n	8004a4a <_printf_common+0x3e>
 8004ac6:	2030      	movs	r0, #48	@ 0x30
 8004ac8:	18e1      	adds	r1, r4, r3
 8004aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ad4:	4422      	add	r2, r4
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004adc:	e7c2      	b.n	8004a64 <_printf_common+0x58>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	47c8      	blx	r9
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0e6      	beq.n	8004aba <_printf_common+0xae>
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7d9      	b.n	8004aa4 <_printf_common+0x98>

08004af0 <_printf_i>:
 8004af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	7e0f      	ldrb	r7, [r1, #24]
 8004af6:	4691      	mov	r9, r2
 8004af8:	2f78      	cmp	r7, #120	@ 0x78
 8004afa:	4680      	mov	r8, r0
 8004afc:	460c      	mov	r4, r1
 8004afe:	469a      	mov	sl, r3
 8004b00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b06:	d807      	bhi.n	8004b18 <_printf_i+0x28>
 8004b08:	2f62      	cmp	r7, #98	@ 0x62
 8004b0a:	d80a      	bhi.n	8004b22 <_printf_i+0x32>
 8004b0c:	2f00      	cmp	r7, #0
 8004b0e:	f000 80d1 	beq.w	8004cb4 <_printf_i+0x1c4>
 8004b12:	2f58      	cmp	r7, #88	@ 0x58
 8004b14:	f000 80b8 	beq.w	8004c88 <_printf_i+0x198>
 8004b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b20:	e03a      	b.n	8004b98 <_printf_i+0xa8>
 8004b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b26:	2b15      	cmp	r3, #21
 8004b28:	d8f6      	bhi.n	8004b18 <_printf_i+0x28>
 8004b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b30 <_printf_i+0x40>)
 8004b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004b9d 	.word	0x08004b9d
 8004b38:	08004b19 	.word	0x08004b19
 8004b3c:	08004b19 	.word	0x08004b19
 8004b40:	08004b19 	.word	0x08004b19
 8004b44:	08004b19 	.word	0x08004b19
 8004b48:	08004b9d 	.word	0x08004b9d
 8004b4c:	08004b19 	.word	0x08004b19
 8004b50:	08004b19 	.word	0x08004b19
 8004b54:	08004b19 	.word	0x08004b19
 8004b58:	08004b19 	.word	0x08004b19
 8004b5c:	08004c9b 	.word	0x08004c9b
 8004b60:	08004bc7 	.word	0x08004bc7
 8004b64:	08004c55 	.word	0x08004c55
 8004b68:	08004b19 	.word	0x08004b19
 8004b6c:	08004b19 	.word	0x08004b19
 8004b70:	08004cbd 	.word	0x08004cbd
 8004b74:	08004b19 	.word	0x08004b19
 8004b78:	08004bc7 	.word	0x08004bc7
 8004b7c:	08004b19 	.word	0x08004b19
 8004b80:	08004b19 	.word	0x08004b19
 8004b84:	08004c5d 	.word	0x08004c5d
 8004b88:	6833      	ldr	r3, [r6, #0]
 8004b8a:	1d1a      	adds	r2, r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6032      	str	r2, [r6, #0]
 8004b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e09c      	b.n	8004cd6 <_printf_i+0x1e6>
 8004b9c:	6833      	ldr	r3, [r6, #0]
 8004b9e:	6820      	ldr	r0, [r4, #0]
 8004ba0:	1d19      	adds	r1, r3, #4
 8004ba2:	6031      	str	r1, [r6, #0]
 8004ba4:	0606      	lsls	r6, r0, #24
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0xbc>
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	e003      	b.n	8004bb4 <_printf_i+0xc4>
 8004bac:	0645      	lsls	r5, r0, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0xb8>
 8004bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	da03      	bge.n	8004bc0 <_printf_i+0xd0>
 8004bb8:	232d      	movs	r3, #45	@ 0x2d
 8004bba:	426d      	negs	r5, r5
 8004bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc0:	230a      	movs	r3, #10
 8004bc2:	4858      	ldr	r0, [pc, #352]	@ (8004d24 <_printf_i+0x234>)
 8004bc4:	e011      	b.n	8004bea <_printf_i+0xfa>
 8004bc6:	6821      	ldr	r1, [r4, #0]
 8004bc8:	6833      	ldr	r3, [r6, #0]
 8004bca:	0608      	lsls	r0, r1, #24
 8004bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bd0:	d402      	bmi.n	8004bd8 <_printf_i+0xe8>
 8004bd2:	0649      	lsls	r1, r1, #25
 8004bd4:	bf48      	it	mi
 8004bd6:	b2ad      	uxthmi	r5, r5
 8004bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bda:	6033      	str	r3, [r6, #0]
 8004bdc:	bf14      	ite	ne
 8004bde:	230a      	movne	r3, #10
 8004be0:	2308      	moveq	r3, #8
 8004be2:	4850      	ldr	r0, [pc, #320]	@ (8004d24 <_printf_i+0x234>)
 8004be4:	2100      	movs	r1, #0
 8004be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bea:	6866      	ldr	r6, [r4, #4]
 8004bec:	2e00      	cmp	r6, #0
 8004bee:	60a6      	str	r6, [r4, #8]
 8004bf0:	db05      	blt.n	8004bfe <_printf_i+0x10e>
 8004bf2:	6821      	ldr	r1, [r4, #0]
 8004bf4:	432e      	orrs	r6, r5
 8004bf6:	f021 0104 	bic.w	r1, r1, #4
 8004bfa:	6021      	str	r1, [r4, #0]
 8004bfc:	d04b      	beq.n	8004c96 <_printf_i+0x1a6>
 8004bfe:	4616      	mov	r6, r2
 8004c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c04:	fb03 5711 	mls	r7, r3, r1, r5
 8004c08:	5dc7      	ldrb	r7, [r0, r7]
 8004c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c0e:	462f      	mov	r7, r5
 8004c10:	42bb      	cmp	r3, r7
 8004c12:	460d      	mov	r5, r1
 8004c14:	d9f4      	bls.n	8004c00 <_printf_i+0x110>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d10b      	bne.n	8004c32 <_printf_i+0x142>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	07df      	lsls	r7, r3, #31
 8004c1e:	d508      	bpl.n	8004c32 <_printf_i+0x142>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	6861      	ldr	r1, [r4, #4]
 8004c24:	4299      	cmp	r1, r3
 8004c26:	bfde      	ittt	le
 8004c28:	2330      	movle	r3, #48	@ 0x30
 8004c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c32:	1b92      	subs	r2, r2, r6
 8004c34:	6122      	str	r2, [r4, #16]
 8004c36:	464b      	mov	r3, r9
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	f8cd a000 	str.w	sl, [sp]
 8004c40:	aa03      	add	r2, sp, #12
 8004c42:	f7ff fee3 	bl	8004a0c <_printf_common>
 8004c46:	3001      	adds	r0, #1
 8004c48:	d14a      	bne.n	8004ce0 <_printf_i+0x1f0>
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	b004      	add	sp, #16
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f043 0320 	orr.w	r3, r3, #32
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	2778      	movs	r7, #120	@ 0x78
 8004c5e:	4832      	ldr	r0, [pc, #200]	@ (8004d28 <_printf_i+0x238>)
 8004c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	6831      	ldr	r1, [r6, #0]
 8004c68:	061f      	lsls	r7, r3, #24
 8004c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c6e:	d402      	bmi.n	8004c76 <_printf_i+0x186>
 8004c70:	065f      	lsls	r7, r3, #25
 8004c72:	bf48      	it	mi
 8004c74:	b2ad      	uxthmi	r5, r5
 8004c76:	6031      	str	r1, [r6, #0]
 8004c78:	07d9      	lsls	r1, r3, #31
 8004c7a:	bf44      	itt	mi
 8004c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c80:	6023      	strmi	r3, [r4, #0]
 8004c82:	b11d      	cbz	r5, 8004c8c <_printf_i+0x19c>
 8004c84:	2310      	movs	r3, #16
 8004c86:	e7ad      	b.n	8004be4 <_printf_i+0xf4>
 8004c88:	4826      	ldr	r0, [pc, #152]	@ (8004d24 <_printf_i+0x234>)
 8004c8a:	e7e9      	b.n	8004c60 <_printf_i+0x170>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	f023 0320 	bic.w	r3, r3, #32
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	e7f6      	b.n	8004c84 <_printf_i+0x194>
 8004c96:	4616      	mov	r6, r2
 8004c98:	e7bd      	b.n	8004c16 <_printf_i+0x126>
 8004c9a:	6833      	ldr	r3, [r6, #0]
 8004c9c:	6825      	ldr	r5, [r4, #0]
 8004c9e:	1d18      	adds	r0, r3, #4
 8004ca0:	6961      	ldr	r1, [r4, #20]
 8004ca2:	6030      	str	r0, [r6, #0]
 8004ca4:	062e      	lsls	r6, r5, #24
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	d501      	bpl.n	8004cae <_printf_i+0x1be>
 8004caa:	6019      	str	r1, [r3, #0]
 8004cac:	e002      	b.n	8004cb4 <_printf_i+0x1c4>
 8004cae:	0668      	lsls	r0, r5, #25
 8004cb0:	d5fb      	bpl.n	8004caa <_printf_i+0x1ba>
 8004cb2:	8019      	strh	r1, [r3, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4616      	mov	r6, r2
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	e7bc      	b.n	8004c36 <_printf_i+0x146>
 8004cbc:	6833      	ldr	r3, [r6, #0]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	1d1a      	adds	r2, r3, #4
 8004cc2:	6032      	str	r2, [r6, #0]
 8004cc4:	681e      	ldr	r6, [r3, #0]
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 fbee 	bl	80054aa <memchr>
 8004cce:	b108      	cbz	r0, 8004cd4 <_printf_i+0x1e4>
 8004cd0:	1b80      	subs	r0, r0, r6
 8004cd2:	6060      	str	r0, [r4, #4]
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cde:	e7aa      	b.n	8004c36 <_printf_i+0x146>
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	47d0      	blx	sl
 8004cea:	3001      	adds	r0, #1
 8004cec:	d0ad      	beq.n	8004c4a <_printf_i+0x15a>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	079b      	lsls	r3, r3, #30
 8004cf2:	d413      	bmi.n	8004d1c <_printf_i+0x22c>
 8004cf4:	68e0      	ldr	r0, [r4, #12]
 8004cf6:	9b03      	ldr	r3, [sp, #12]
 8004cf8:	4298      	cmp	r0, r3
 8004cfa:	bfb8      	it	lt
 8004cfc:	4618      	movlt	r0, r3
 8004cfe:	e7a6      	b.n	8004c4e <_printf_i+0x15e>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4632      	mov	r2, r6
 8004d04:	4649      	mov	r1, r9
 8004d06:	4640      	mov	r0, r8
 8004d08:	47d0      	blx	sl
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d09d      	beq.n	8004c4a <_printf_i+0x15a>
 8004d0e:	3501      	adds	r5, #1
 8004d10:	68e3      	ldr	r3, [r4, #12]
 8004d12:	9903      	ldr	r1, [sp, #12]
 8004d14:	1a5b      	subs	r3, r3, r1
 8004d16:	42ab      	cmp	r3, r5
 8004d18:	dcf2      	bgt.n	8004d00 <_printf_i+0x210>
 8004d1a:	e7eb      	b.n	8004cf4 <_printf_i+0x204>
 8004d1c:	2500      	movs	r5, #0
 8004d1e:	f104 0619 	add.w	r6, r4, #25
 8004d22:	e7f5      	b.n	8004d10 <_printf_i+0x220>
 8004d24:	080095e8 	.word	0x080095e8
 8004d28:	080095f9 	.word	0x080095f9

08004d2c <_scanf_float>:
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	b087      	sub	sp, #28
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	688b      	ldr	r3, [r1, #8]
 8004d36:	4691      	mov	r9, r2
 8004d38:	1e5a      	subs	r2, r3, #1
 8004d3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004d3e:	bf82      	ittt	hi
 8004d40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004d44:	eb03 0b05 	addhi.w	fp, r3, r5
 8004d48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	f04f 0500 	mov.w	r5, #0
 8004d52:	bf88      	it	hi
 8004d54:	608b      	strhi	r3, [r1, #8]
 8004d56:	680b      	ldr	r3, [r1, #0]
 8004d58:	4680      	mov	r8, r0
 8004d5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004d5e:	f842 3b1c 	str.w	r3, [r2], #28
 8004d62:	460c      	mov	r4, r1
 8004d64:	bf98      	it	ls
 8004d66:	f04f 0b00 	movls.w	fp, #0
 8004d6a:	4616      	mov	r6, r2
 8004d6c:	46aa      	mov	sl, r5
 8004d6e:	462f      	mov	r7, r5
 8004d70:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d74:	9201      	str	r2, [sp, #4]
 8004d76:	9502      	str	r5, [sp, #8]
 8004d78:	68a2      	ldr	r2, [r4, #8]
 8004d7a:	b15a      	cbz	r2, 8004d94 <_scanf_float+0x68>
 8004d7c:	f8d9 3000 	ldr.w	r3, [r9]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b4e      	cmp	r3, #78	@ 0x4e
 8004d84:	d862      	bhi.n	8004e4c <_scanf_float+0x120>
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	d83a      	bhi.n	8004e00 <_scanf_float+0xd4>
 8004d8a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004d8e:	b2c8      	uxtb	r0, r1
 8004d90:	280e      	cmp	r0, #14
 8004d92:	d938      	bls.n	8004e06 <_scanf_float+0xda>
 8004d94:	b11f      	cbz	r7, 8004d9e <_scanf_float+0x72>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004da2:	f1ba 0f01 	cmp.w	sl, #1
 8004da6:	f200 8114 	bhi.w	8004fd2 <_scanf_float+0x2a6>
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	429e      	cmp	r6, r3
 8004dae:	f200 8105 	bhi.w	8004fbc <_scanf_float+0x290>
 8004db2:	2001      	movs	r0, #1
 8004db4:	b007      	add	sp, #28
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004dbe:	2a0d      	cmp	r2, #13
 8004dc0:	d8e8      	bhi.n	8004d94 <_scanf_float+0x68>
 8004dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8004dc8 <_scanf_float+0x9c>)
 8004dc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004dc8:	08004f11 	.word	0x08004f11
 8004dcc:	08004d95 	.word	0x08004d95
 8004dd0:	08004d95 	.word	0x08004d95
 8004dd4:	08004d95 	.word	0x08004d95
 8004dd8:	08004f6d 	.word	0x08004f6d
 8004ddc:	08004f47 	.word	0x08004f47
 8004de0:	08004d95 	.word	0x08004d95
 8004de4:	08004d95 	.word	0x08004d95
 8004de8:	08004f1f 	.word	0x08004f1f
 8004dec:	08004d95 	.word	0x08004d95
 8004df0:	08004d95 	.word	0x08004d95
 8004df4:	08004d95 	.word	0x08004d95
 8004df8:	08004d95 	.word	0x08004d95
 8004dfc:	08004edb 	.word	0x08004edb
 8004e00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004e04:	e7db      	b.n	8004dbe <_scanf_float+0x92>
 8004e06:	290e      	cmp	r1, #14
 8004e08:	d8c4      	bhi.n	8004d94 <_scanf_float+0x68>
 8004e0a:	a001      	add	r0, pc, #4	@ (adr r0, 8004e10 <_scanf_float+0xe4>)
 8004e0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e10:	08004ecb 	.word	0x08004ecb
 8004e14:	08004d95 	.word	0x08004d95
 8004e18:	08004ecb 	.word	0x08004ecb
 8004e1c:	08004f5b 	.word	0x08004f5b
 8004e20:	08004d95 	.word	0x08004d95
 8004e24:	08004e6d 	.word	0x08004e6d
 8004e28:	08004eb1 	.word	0x08004eb1
 8004e2c:	08004eb1 	.word	0x08004eb1
 8004e30:	08004eb1 	.word	0x08004eb1
 8004e34:	08004eb1 	.word	0x08004eb1
 8004e38:	08004eb1 	.word	0x08004eb1
 8004e3c:	08004eb1 	.word	0x08004eb1
 8004e40:	08004eb1 	.word	0x08004eb1
 8004e44:	08004eb1 	.word	0x08004eb1
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004e4e:	d809      	bhi.n	8004e64 <_scanf_float+0x138>
 8004e50:	2b60      	cmp	r3, #96	@ 0x60
 8004e52:	d8b2      	bhi.n	8004dba <_scanf_float+0x8e>
 8004e54:	2b54      	cmp	r3, #84	@ 0x54
 8004e56:	d07b      	beq.n	8004f50 <_scanf_float+0x224>
 8004e58:	2b59      	cmp	r3, #89	@ 0x59
 8004e5a:	d19b      	bne.n	8004d94 <_scanf_float+0x68>
 8004e5c:	2d07      	cmp	r5, #7
 8004e5e:	d199      	bne.n	8004d94 <_scanf_float+0x68>
 8004e60:	2508      	movs	r5, #8
 8004e62:	e02f      	b.n	8004ec4 <_scanf_float+0x198>
 8004e64:	2b74      	cmp	r3, #116	@ 0x74
 8004e66:	d073      	beq.n	8004f50 <_scanf_float+0x224>
 8004e68:	2b79      	cmp	r3, #121	@ 0x79
 8004e6a:	e7f6      	b.n	8004e5a <_scanf_float+0x12e>
 8004e6c:	6821      	ldr	r1, [r4, #0]
 8004e6e:	05c8      	lsls	r0, r1, #23
 8004e70:	d51e      	bpl.n	8004eb0 <_scanf_float+0x184>
 8004e72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004e76:	6021      	str	r1, [r4, #0]
 8004e78:	3701      	adds	r7, #1
 8004e7a:	f1bb 0f00 	cmp.w	fp, #0
 8004e7e:	d003      	beq.n	8004e88 <_scanf_float+0x15c>
 8004e80:	3201      	adds	r2, #1
 8004e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e86:	60a2      	str	r2, [r4, #8]
 8004e88:	68a3      	ldr	r3, [r4, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60a3      	str	r3, [r4, #8]
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	3301      	adds	r3, #1
 8004e92:	6123      	str	r3, [r4, #16]
 8004e94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f8c9 3004 	str.w	r3, [r9, #4]
 8004ea0:	f340 8083 	ble.w	8004faa <_scanf_float+0x27e>
 8004ea4:	f8d9 3000 	ldr.w	r3, [r9]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f8c9 3000 	str.w	r3, [r9]
 8004eae:	e763      	b.n	8004d78 <_scanf_float+0x4c>
 8004eb0:	eb1a 0105 	adds.w	r1, sl, r5
 8004eb4:	f47f af6e 	bne.w	8004d94 <_scanf_float+0x68>
 8004eb8:	460d      	mov	r5, r1
 8004eba:	468a      	mov	sl, r1
 8004ebc:	6822      	ldr	r2, [r4, #0]
 8004ebe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8004ec8:	e7de      	b.n	8004e88 <_scanf_float+0x15c>
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	0610      	lsls	r0, r2, #24
 8004ece:	f57f af61 	bpl.w	8004d94 <_scanf_float+0x68>
 8004ed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ed6:	6022      	str	r2, [r4, #0]
 8004ed8:	e7f4      	b.n	8004ec4 <_scanf_float+0x198>
 8004eda:	f1ba 0f00 	cmp.w	sl, #0
 8004ede:	d10c      	bne.n	8004efa <_scanf_float+0x1ce>
 8004ee0:	b977      	cbnz	r7, 8004f00 <_scanf_float+0x1d4>
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ee8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004eec:	d108      	bne.n	8004f00 <_scanf_float+0x1d4>
 8004eee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ef2:	f04f 0a01 	mov.w	sl, #1
 8004ef6:	6022      	str	r2, [r4, #0]
 8004ef8:	e7e4      	b.n	8004ec4 <_scanf_float+0x198>
 8004efa:	f1ba 0f02 	cmp.w	sl, #2
 8004efe:	d051      	beq.n	8004fa4 <_scanf_float+0x278>
 8004f00:	2d01      	cmp	r5, #1
 8004f02:	d002      	beq.n	8004f0a <_scanf_float+0x1de>
 8004f04:	2d04      	cmp	r5, #4
 8004f06:	f47f af45 	bne.w	8004d94 <_scanf_float+0x68>
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	b2ed      	uxtb	r5, r5
 8004f0e:	e7d9      	b.n	8004ec4 <_scanf_float+0x198>
 8004f10:	f1ba 0f01 	cmp.w	sl, #1
 8004f14:	f47f af3e 	bne.w	8004d94 <_scanf_float+0x68>
 8004f18:	f04f 0a02 	mov.w	sl, #2
 8004f1c:	e7d2      	b.n	8004ec4 <_scanf_float+0x198>
 8004f1e:	b975      	cbnz	r5, 8004f3e <_scanf_float+0x212>
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	f47f af38 	bne.w	8004d96 <_scanf_float+0x6a>
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f30:	f040 80ff 	bne.w	8005132 <_scanf_float+0x406>
 8004f34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f38:	2501      	movs	r5, #1
 8004f3a:	6022      	str	r2, [r4, #0]
 8004f3c:	e7c2      	b.n	8004ec4 <_scanf_float+0x198>
 8004f3e:	2d03      	cmp	r5, #3
 8004f40:	d0e3      	beq.n	8004f0a <_scanf_float+0x1de>
 8004f42:	2d05      	cmp	r5, #5
 8004f44:	e7df      	b.n	8004f06 <_scanf_float+0x1da>
 8004f46:	2d02      	cmp	r5, #2
 8004f48:	f47f af24 	bne.w	8004d94 <_scanf_float+0x68>
 8004f4c:	2503      	movs	r5, #3
 8004f4e:	e7b9      	b.n	8004ec4 <_scanf_float+0x198>
 8004f50:	2d06      	cmp	r5, #6
 8004f52:	f47f af1f 	bne.w	8004d94 <_scanf_float+0x68>
 8004f56:	2507      	movs	r5, #7
 8004f58:	e7b4      	b.n	8004ec4 <_scanf_float+0x198>
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	0591      	lsls	r1, r2, #22
 8004f5e:	f57f af19 	bpl.w	8004d94 <_scanf_float+0x68>
 8004f62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004f66:	6022      	str	r2, [r4, #0]
 8004f68:	9702      	str	r7, [sp, #8]
 8004f6a:	e7ab      	b.n	8004ec4 <_scanf_float+0x198>
 8004f6c:	6822      	ldr	r2, [r4, #0]
 8004f6e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004f72:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004f76:	d005      	beq.n	8004f84 <_scanf_float+0x258>
 8004f78:	0550      	lsls	r0, r2, #21
 8004f7a:	f57f af0b 	bpl.w	8004d94 <_scanf_float+0x68>
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	f000 80d7 	beq.w	8005132 <_scanf_float+0x406>
 8004f84:	0591      	lsls	r1, r2, #22
 8004f86:	bf58      	it	pl
 8004f88:	9902      	ldrpl	r1, [sp, #8]
 8004f8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f8e:	bf58      	it	pl
 8004f90:	1a79      	subpl	r1, r7, r1
 8004f92:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004f96:	f04f 0700 	mov.w	r7, #0
 8004f9a:	bf58      	it	pl
 8004f9c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fa0:	6022      	str	r2, [r4, #0]
 8004fa2:	e78f      	b.n	8004ec4 <_scanf_float+0x198>
 8004fa4:	f04f 0a03 	mov.w	sl, #3
 8004fa8:	e78c      	b.n	8004ec4 <_scanf_float+0x198>
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004fb2:	4798      	blx	r3
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f43f aedf 	beq.w	8004d78 <_scanf_float+0x4c>
 8004fba:	e6eb      	b.n	8004d94 <_scanf_float+0x68>
 8004fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fc0:	464a      	mov	r2, r9
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fc8:	4798      	blx	r3
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	e6eb      	b.n	8004daa <_scanf_float+0x7e>
 8004fd2:	1e6b      	subs	r3, r5, #1
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d824      	bhi.n	8005022 <_scanf_float+0x2f6>
 8004fd8:	2d02      	cmp	r5, #2
 8004fda:	d836      	bhi.n	800504a <_scanf_float+0x31e>
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	429e      	cmp	r6, r3
 8004fe0:	f67f aee7 	bls.w	8004db2 <_scanf_float+0x86>
 8004fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fe8:	464a      	mov	r2, r9
 8004fea:	4640      	mov	r0, r8
 8004fec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ff0:	4798      	blx	r3
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	e7f0      	b.n	8004fdc <_scanf_float+0x2b0>
 8004ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ffe:	464a      	mov	r2, r9
 8005000:	4640      	mov	r0, r8
 8005002:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005006:	4798      	blx	r3
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	3b01      	subs	r3, #1
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005012:	fa5f fa8a 	uxtb.w	sl, sl
 8005016:	f1ba 0f02 	cmp.w	sl, #2
 800501a:	d1ee      	bne.n	8004ffa <_scanf_float+0x2ce>
 800501c:	3d03      	subs	r5, #3
 800501e:	b2ed      	uxtb	r5, r5
 8005020:	1b76      	subs	r6, r6, r5
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	05da      	lsls	r2, r3, #23
 8005026:	d530      	bpl.n	800508a <_scanf_float+0x35e>
 8005028:	055b      	lsls	r3, r3, #21
 800502a:	d511      	bpl.n	8005050 <_scanf_float+0x324>
 800502c:	9b01      	ldr	r3, [sp, #4]
 800502e:	429e      	cmp	r6, r3
 8005030:	f67f aebf 	bls.w	8004db2 <_scanf_float+0x86>
 8005034:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005038:	464a      	mov	r2, r9
 800503a:	4640      	mov	r0, r8
 800503c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005040:	4798      	blx	r3
 8005042:	6923      	ldr	r3, [r4, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	e7f0      	b.n	800502c <_scanf_float+0x300>
 800504a:	46aa      	mov	sl, r5
 800504c:	46b3      	mov	fp, r6
 800504e:	e7de      	b.n	800500e <_scanf_float+0x2e2>
 8005050:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	2965      	cmp	r1, #101	@ 0x65
 8005058:	f103 33ff 	add.w	r3, r3, #4294967295
 800505c:	f106 35ff 	add.w	r5, r6, #4294967295
 8005060:	6123      	str	r3, [r4, #16]
 8005062:	d00c      	beq.n	800507e <_scanf_float+0x352>
 8005064:	2945      	cmp	r1, #69	@ 0x45
 8005066:	d00a      	beq.n	800507e <_scanf_float+0x352>
 8005068:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800506c:	464a      	mov	r2, r9
 800506e:	4640      	mov	r0, r8
 8005070:	4798      	blx	r3
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005078:	3b01      	subs	r3, #1
 800507a:	1eb5      	subs	r5, r6, #2
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	464a      	mov	r2, r9
 8005080:	4640      	mov	r0, r8
 8005082:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005086:	4798      	blx	r3
 8005088:	462e      	mov	r6, r5
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	f012 0210 	ands.w	r2, r2, #16
 8005090:	d001      	beq.n	8005096 <_scanf_float+0x36a>
 8005092:	2000      	movs	r0, #0
 8005094:	e68e      	b.n	8004db4 <_scanf_float+0x88>
 8005096:	7032      	strb	r2, [r6, #0]
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a2:	d125      	bne.n	80050f0 <_scanf_float+0x3c4>
 80050a4:	9b02      	ldr	r3, [sp, #8]
 80050a6:	429f      	cmp	r7, r3
 80050a8:	d00a      	beq.n	80050c0 <_scanf_float+0x394>
 80050aa:	1bda      	subs	r2, r3, r7
 80050ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80050b0:	429e      	cmp	r6, r3
 80050b2:	bf28      	it	cs
 80050b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80050b8:	4630      	mov	r0, r6
 80050ba:	491f      	ldr	r1, [pc, #124]	@ (8005138 <_scanf_float+0x40c>)
 80050bc:	f000 f902 	bl	80052c4 <siprintf>
 80050c0:	2200      	movs	r2, #0
 80050c2:	4640      	mov	r0, r8
 80050c4:	9901      	ldr	r1, [sp, #4]
 80050c6:	f002 fbf7 	bl	80078b8 <_strtod_r>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f015 0f02 	tst.w	r5, #2
 80050d4:	4606      	mov	r6, r0
 80050d6:	460f      	mov	r7, r1
 80050d8:	f103 0204 	add.w	r2, r3, #4
 80050dc:	d015      	beq.n	800510a <_scanf_float+0x3de>
 80050de:	9903      	ldr	r1, [sp, #12]
 80050e0:	600a      	str	r2, [r1, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	e9c3 6700 	strd	r6, r7, [r3]
 80050e8:	68e3      	ldr	r3, [r4, #12]
 80050ea:	3301      	adds	r3, #1
 80050ec:	60e3      	str	r3, [r4, #12]
 80050ee:	e7d0      	b.n	8005092 <_scanf_float+0x366>
 80050f0:	9b04      	ldr	r3, [sp, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0e4      	beq.n	80050c0 <_scanf_float+0x394>
 80050f6:	9905      	ldr	r1, [sp, #20]
 80050f8:	230a      	movs	r3, #10
 80050fa:	4640      	mov	r0, r8
 80050fc:	3101      	adds	r1, #1
 80050fe:	f002 fc5b 	bl	80079b8 <_strtol_r>
 8005102:	9b04      	ldr	r3, [sp, #16]
 8005104:	9e05      	ldr	r6, [sp, #20]
 8005106:	1ac2      	subs	r2, r0, r3
 8005108:	e7d0      	b.n	80050ac <_scanf_float+0x380>
 800510a:	076d      	lsls	r5, r5, #29
 800510c:	d4e7      	bmi.n	80050de <_scanf_float+0x3b2>
 800510e:	9d03      	ldr	r5, [sp, #12]
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	681d      	ldr	r5, [r3, #0]
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	f7fb fc78 	bl	8000a0c <__aeabi_dcmpun>
 800511c:	b120      	cbz	r0, 8005128 <_scanf_float+0x3fc>
 800511e:	4807      	ldr	r0, [pc, #28]	@ (800513c <_scanf_float+0x410>)
 8005120:	f000 f9d2 	bl	80054c8 <nanf>
 8005124:	6028      	str	r0, [r5, #0]
 8005126:	e7df      	b.n	80050e8 <_scanf_float+0x3bc>
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	f7fb fccc 	bl	8000ac8 <__aeabi_d2f>
 8005130:	e7f8      	b.n	8005124 <_scanf_float+0x3f8>
 8005132:	2700      	movs	r7, #0
 8005134:	e633      	b.n	8004d9e <_scanf_float+0x72>
 8005136:	bf00      	nop
 8005138:	0800960a 	.word	0x0800960a
 800513c:	0800974b 	.word	0x0800974b

08005140 <std>:
 8005140:	2300      	movs	r3, #0
 8005142:	b510      	push	{r4, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	e9c0 3300 	strd	r3, r3, [r0]
 800514a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800514e:	6083      	str	r3, [r0, #8]
 8005150:	8181      	strh	r1, [r0, #12]
 8005152:	6643      	str	r3, [r0, #100]	@ 0x64
 8005154:	81c2      	strh	r2, [r0, #14]
 8005156:	6183      	str	r3, [r0, #24]
 8005158:	4619      	mov	r1, r3
 800515a:	2208      	movs	r2, #8
 800515c:	305c      	adds	r0, #92	@ 0x5c
 800515e:	f000 f916 	bl	800538e <memset>
 8005162:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <std+0x58>)
 8005164:	6224      	str	r4, [r4, #32]
 8005166:	6263      	str	r3, [r4, #36]	@ 0x24
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <std+0x5c>)
 800516a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800516c:	4b0c      	ldr	r3, [pc, #48]	@ (80051a0 <std+0x60>)
 800516e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005170:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <std+0x64>)
 8005172:	6323      	str	r3, [r4, #48]	@ 0x30
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <std+0x68>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d006      	beq.n	8005188 <std+0x48>
 800517a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800517e:	4294      	cmp	r4, r2
 8005180:	d002      	beq.n	8005188 <std+0x48>
 8005182:	33d0      	adds	r3, #208	@ 0xd0
 8005184:	429c      	cmp	r4, r3
 8005186:	d105      	bne.n	8005194 <std+0x54>
 8005188:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005190:	f000 b988 	b.w	80054a4 <__retarget_lock_init_recursive>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	bf00      	nop
 8005198:	08005309 	.word	0x08005309
 800519c:	0800532b 	.word	0x0800532b
 80051a0:	08005363 	.word	0x08005363
 80051a4:	08005387 	.word	0x08005387
 80051a8:	20000710 	.word	0x20000710

080051ac <stdio_exit_handler>:
 80051ac:	4a02      	ldr	r2, [pc, #8]	@ (80051b8 <stdio_exit_handler+0xc>)
 80051ae:	4903      	ldr	r1, [pc, #12]	@ (80051bc <stdio_exit_handler+0x10>)
 80051b0:	4803      	ldr	r0, [pc, #12]	@ (80051c0 <stdio_exit_handler+0x14>)
 80051b2:	f000 b869 	b.w	8005288 <_fwalk_sglue>
 80051b6:	bf00      	nop
 80051b8:	2000000c 	.word	0x2000000c
 80051bc:	08007d6d 	.word	0x08007d6d
 80051c0:	2000001c 	.word	0x2000001c

080051c4 <cleanup_stdio>:
 80051c4:	6841      	ldr	r1, [r0, #4]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <cleanup_stdio+0x34>)
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4299      	cmp	r1, r3
 80051cc:	4604      	mov	r4, r0
 80051ce:	d001      	beq.n	80051d4 <cleanup_stdio+0x10>
 80051d0:	f002 fdcc 	bl	8007d6c <_fflush_r>
 80051d4:	68a1      	ldr	r1, [r4, #8]
 80051d6:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <cleanup_stdio+0x38>)
 80051d8:	4299      	cmp	r1, r3
 80051da:	d002      	beq.n	80051e2 <cleanup_stdio+0x1e>
 80051dc:	4620      	mov	r0, r4
 80051de:	f002 fdc5 	bl	8007d6c <_fflush_r>
 80051e2:	68e1      	ldr	r1, [r4, #12]
 80051e4:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <cleanup_stdio+0x3c>)
 80051e6:	4299      	cmp	r1, r3
 80051e8:	d004      	beq.n	80051f4 <cleanup_stdio+0x30>
 80051ea:	4620      	mov	r0, r4
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	f002 bdbc 	b.w	8007d6c <_fflush_r>
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	bf00      	nop
 80051f8:	20000710 	.word	0x20000710
 80051fc:	20000778 	.word	0x20000778
 8005200:	200007e0 	.word	0x200007e0

08005204 <global_stdio_init.part.0>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <global_stdio_init.part.0+0x30>)
 8005208:	4c0b      	ldr	r4, [pc, #44]	@ (8005238 <global_stdio_init.part.0+0x34>)
 800520a:	4a0c      	ldr	r2, [pc, #48]	@ (800523c <global_stdio_init.part.0+0x38>)
 800520c:	4620      	mov	r0, r4
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	2104      	movs	r1, #4
 8005212:	2200      	movs	r2, #0
 8005214:	f7ff ff94 	bl	8005140 <std>
 8005218:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800521c:	2201      	movs	r2, #1
 800521e:	2109      	movs	r1, #9
 8005220:	f7ff ff8e 	bl	8005140 <std>
 8005224:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005228:	2202      	movs	r2, #2
 800522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522e:	2112      	movs	r1, #18
 8005230:	f7ff bf86 	b.w	8005140 <std>
 8005234:	20000848 	.word	0x20000848
 8005238:	20000710 	.word	0x20000710
 800523c:	080051ad 	.word	0x080051ad

08005240 <__sfp_lock_acquire>:
 8005240:	4801      	ldr	r0, [pc, #4]	@ (8005248 <__sfp_lock_acquire+0x8>)
 8005242:	f000 b930 	b.w	80054a6 <__retarget_lock_acquire_recursive>
 8005246:	bf00      	nop
 8005248:	20000851 	.word	0x20000851

0800524c <__sfp_lock_release>:
 800524c:	4801      	ldr	r0, [pc, #4]	@ (8005254 <__sfp_lock_release+0x8>)
 800524e:	f000 b92b 	b.w	80054a8 <__retarget_lock_release_recursive>
 8005252:	bf00      	nop
 8005254:	20000851 	.word	0x20000851

08005258 <__sinit>:
 8005258:	b510      	push	{r4, lr}
 800525a:	4604      	mov	r4, r0
 800525c:	f7ff fff0 	bl	8005240 <__sfp_lock_acquire>
 8005260:	6a23      	ldr	r3, [r4, #32]
 8005262:	b11b      	cbz	r3, 800526c <__sinit+0x14>
 8005264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005268:	f7ff bff0 	b.w	800524c <__sfp_lock_release>
 800526c:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <__sinit+0x28>)
 800526e:	6223      	str	r3, [r4, #32]
 8005270:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <__sinit+0x2c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f5      	bne.n	8005264 <__sinit+0xc>
 8005278:	f7ff ffc4 	bl	8005204 <global_stdio_init.part.0>
 800527c:	e7f2      	b.n	8005264 <__sinit+0xc>
 800527e:	bf00      	nop
 8005280:	080051c5 	.word	0x080051c5
 8005284:	20000848 	.word	0x20000848

08005288 <_fwalk_sglue>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	4607      	mov	r7, r0
 800528e:	4688      	mov	r8, r1
 8005290:	4614      	mov	r4, r2
 8005292:	2600      	movs	r6, #0
 8005294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005298:	f1b9 0901 	subs.w	r9, r9, #1
 800529c:	d505      	bpl.n	80052aa <_fwalk_sglue+0x22>
 800529e:	6824      	ldr	r4, [r4, #0]
 80052a0:	2c00      	cmp	r4, #0
 80052a2:	d1f7      	bne.n	8005294 <_fwalk_sglue+0xc>
 80052a4:	4630      	mov	r0, r6
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	89ab      	ldrh	r3, [r5, #12]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d907      	bls.n	80052c0 <_fwalk_sglue+0x38>
 80052b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d003      	beq.n	80052c0 <_fwalk_sglue+0x38>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4638      	mov	r0, r7
 80052bc:	47c0      	blx	r8
 80052be:	4306      	orrs	r6, r0
 80052c0:	3568      	adds	r5, #104	@ 0x68
 80052c2:	e7e9      	b.n	8005298 <_fwalk_sglue+0x10>

080052c4 <siprintf>:
 80052c4:	b40e      	push	{r1, r2, r3}
 80052c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052ca:	b510      	push	{r4, lr}
 80052cc:	2400      	movs	r4, #0
 80052ce:	b09d      	sub	sp, #116	@ 0x74
 80052d0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80052d2:	9002      	str	r0, [sp, #8]
 80052d4:	9006      	str	r0, [sp, #24]
 80052d6:	9107      	str	r1, [sp, #28]
 80052d8:	9104      	str	r1, [sp, #16]
 80052da:	4809      	ldr	r0, [pc, #36]	@ (8005300 <siprintf+0x3c>)
 80052dc:	4909      	ldr	r1, [pc, #36]	@ (8005304 <siprintf+0x40>)
 80052de:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e2:	9105      	str	r1, [sp, #20]
 80052e4:	6800      	ldr	r0, [r0, #0]
 80052e6:	a902      	add	r1, sp, #8
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80052ec:	f002 fbc2 	bl	8007a74 <_svfiprintf_r>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	701c      	strb	r4, [r3, #0]
 80052f4:	b01d      	add	sp, #116	@ 0x74
 80052f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fa:	b003      	add	sp, #12
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000018 	.word	0x20000018
 8005304:	ffff0208 	.word	0xffff0208

08005308 <__sread>:
 8005308:	b510      	push	{r4, lr}
 800530a:	460c      	mov	r4, r1
 800530c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005310:	f000 f87a 	bl	8005408 <_read_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	bfab      	itete	ge
 8005318:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800531a:	89a3      	ldrhlt	r3, [r4, #12]
 800531c:	181b      	addge	r3, r3, r0
 800531e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005322:	bfac      	ite	ge
 8005324:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005326:	81a3      	strhlt	r3, [r4, #12]
 8005328:	bd10      	pop	{r4, pc}

0800532a <__swrite>:
 800532a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532e:	461f      	mov	r7, r3
 8005330:	898b      	ldrh	r3, [r1, #12]
 8005332:	4605      	mov	r5, r0
 8005334:	05db      	lsls	r3, r3, #23
 8005336:	460c      	mov	r4, r1
 8005338:	4616      	mov	r6, r2
 800533a:	d505      	bpl.n	8005348 <__swrite+0x1e>
 800533c:	2302      	movs	r3, #2
 800533e:	2200      	movs	r2, #0
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	f000 f84e 	bl	80053e4 <_lseek_r>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	4632      	mov	r2, r6
 800534c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	4628      	mov	r0, r5
 8005354:	463b      	mov	r3, r7
 8005356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800535a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800535e:	f000 b865 	b.w	800542c <_write_r>

08005362 <__sseek>:
 8005362:	b510      	push	{r4, lr}
 8005364:	460c      	mov	r4, r1
 8005366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536a:	f000 f83b 	bl	80053e4 <_lseek_r>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	bf15      	itete	ne
 8005374:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005376:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800537a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800537e:	81a3      	strheq	r3, [r4, #12]
 8005380:	bf18      	it	ne
 8005382:	81a3      	strhne	r3, [r4, #12]
 8005384:	bd10      	pop	{r4, pc}

08005386 <__sclose>:
 8005386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538a:	f000 b81b 	b.w	80053c4 <_close_r>

0800538e <memset>:
 800538e:	4603      	mov	r3, r0
 8005390:	4402      	add	r2, r0
 8005392:	4293      	cmp	r3, r2
 8005394:	d100      	bne.n	8005398 <memset+0xa>
 8005396:	4770      	bx	lr
 8005398:	f803 1b01 	strb.w	r1, [r3], #1
 800539c:	e7f9      	b.n	8005392 <memset+0x4>

0800539e <strcat>:
 800539e:	4602      	mov	r2, r0
 80053a0:	b510      	push	{r4, lr}
 80053a2:	7814      	ldrb	r4, [r2, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	3201      	adds	r2, #1
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d1fa      	bne.n	80053a2 <strcat+0x4>
 80053ac:	3b01      	subs	r3, #1
 80053ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	d1f9      	bne.n	80053ae <strcat+0x10>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <_localeconv_r>:
 80053bc:	4800      	ldr	r0, [pc, #0]	@ (80053c0 <_localeconv_r+0x4>)
 80053be:	4770      	bx	lr
 80053c0:	20000158 	.word	0x20000158

080053c4 <_close_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	2300      	movs	r3, #0
 80053c8:	4d05      	ldr	r5, [pc, #20]	@ (80053e0 <_close_r+0x1c>)
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fd f8f5 	bl	80025be <_close>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_close_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_close_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	2000084c 	.word	0x2000084c

080053e4 <_lseek_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	2200      	movs	r2, #0
 80053ee:	4d05      	ldr	r5, [pc, #20]	@ (8005404 <_lseek_r+0x20>)
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fd f907 	bl	8002606 <_lseek>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_lseek_r+0x1e>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_lseek_r+0x1e>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	2000084c 	.word	0x2000084c

08005408 <_read_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	2200      	movs	r2, #0
 8005412:	4d05      	ldr	r5, [pc, #20]	@ (8005428 <_read_r+0x20>)
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f7fd f898 	bl	800254c <_read>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_read_r+0x1e>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_read_r+0x1e>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	2000084c 	.word	0x2000084c

0800542c <_write_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	2200      	movs	r2, #0
 8005436:	4d05      	ldr	r5, [pc, #20]	@ (800544c <_write_r+0x20>)
 8005438:	602a      	str	r2, [r5, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f7fd f8a3 	bl	8002586 <_write>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_write_r+0x1e>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_write_r+0x1e>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	2000084c 	.word	0x2000084c

08005450 <__errno>:
 8005450:	4b01      	ldr	r3, [pc, #4]	@ (8005458 <__errno+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000018 	.word	0x20000018

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	2600      	movs	r6, #0
 8005460:	4d0c      	ldr	r5, [pc, #48]	@ (8005494 <__libc_init_array+0x38>)
 8005462:	4c0d      	ldr	r4, [pc, #52]	@ (8005498 <__libc_init_array+0x3c>)
 8005464:	1b64      	subs	r4, r4, r5
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	42a6      	cmp	r6, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	f003 fb6a 	bl	8008b44 <_init>
 8005470:	2600      	movs	r6, #0
 8005472:	4d0a      	ldr	r5, [pc, #40]	@ (800549c <__libc_init_array+0x40>)
 8005474:	4c0a      	ldr	r4, [pc, #40]	@ (80054a0 <__libc_init_array+0x44>)
 8005476:	1b64      	subs	r4, r4, r5
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	42a6      	cmp	r6, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f855 3b04 	ldr.w	r3, [r5], #4
 8005484:	4798      	blx	r3
 8005486:	3601      	adds	r6, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f855 3b04 	ldr.w	r3, [r5], #4
 800548e:	4798      	blx	r3
 8005490:	3601      	adds	r6, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	08009a04 	.word	0x08009a04
 8005498:	08009a04 	.word	0x08009a04
 800549c:	08009a04 	.word	0x08009a04
 80054a0:	08009a08 	.word	0x08009a08

080054a4 <__retarget_lock_init_recursive>:
 80054a4:	4770      	bx	lr

080054a6 <__retarget_lock_acquire_recursive>:
 80054a6:	4770      	bx	lr

080054a8 <__retarget_lock_release_recursive>:
 80054a8:	4770      	bx	lr

080054aa <memchr>:
 80054aa:	4603      	mov	r3, r0
 80054ac:	b510      	push	{r4, lr}
 80054ae:	b2c9      	uxtb	r1, r1
 80054b0:	4402      	add	r2, r0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	d101      	bne.n	80054bc <memchr+0x12>
 80054b8:	2000      	movs	r0, #0
 80054ba:	e003      	b.n	80054c4 <memchr+0x1a>
 80054bc:	7804      	ldrb	r4, [r0, #0]
 80054be:	3301      	adds	r3, #1
 80054c0:	428c      	cmp	r4, r1
 80054c2:	d1f6      	bne.n	80054b2 <memchr+0x8>
 80054c4:	bd10      	pop	{r4, pc}
	...

080054c8 <nanf>:
 80054c8:	4800      	ldr	r0, [pc, #0]	@ (80054cc <nanf+0x4>)
 80054ca:	4770      	bx	lr
 80054cc:	7fc00000 	.word	0x7fc00000

080054d0 <quorem>:
 80054d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	6903      	ldr	r3, [r0, #16]
 80054d6:	690c      	ldr	r4, [r1, #16]
 80054d8:	4607      	mov	r7, r0
 80054da:	42a3      	cmp	r3, r4
 80054dc:	db7e      	blt.n	80055dc <quorem+0x10c>
 80054de:	3c01      	subs	r4, #1
 80054e0:	00a3      	lsls	r3, r4, #2
 80054e2:	f100 0514 	add.w	r5, r0, #20
 80054e6:	f101 0814 	add.w	r8, r1, #20
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054fa:	3301      	adds	r3, #1
 80054fc:	429a      	cmp	r2, r3
 80054fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005502:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005506:	d32e      	bcc.n	8005566 <quorem+0x96>
 8005508:	f04f 0a00 	mov.w	sl, #0
 800550c:	46c4      	mov	ip, r8
 800550e:	46ae      	mov	lr, r5
 8005510:	46d3      	mov	fp, sl
 8005512:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005516:	b298      	uxth	r0, r3
 8005518:	fb06 a000 	mla	r0, r6, r0, sl
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	0c02      	lsrs	r2, r0, #16
 8005520:	fb06 2303 	mla	r3, r6, r3, r2
 8005524:	f8de 2000 	ldr.w	r2, [lr]
 8005528:	b280      	uxth	r0, r0
 800552a:	b292      	uxth	r2, r2
 800552c:	1a12      	subs	r2, r2, r0
 800552e:	445a      	add	r2, fp
 8005530:	f8de 0000 	ldr.w	r0, [lr]
 8005534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005538:	b29b      	uxth	r3, r3
 800553a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800553e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005542:	b292      	uxth	r2, r2
 8005544:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005548:	45e1      	cmp	r9, ip
 800554a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800554e:	f84e 2b04 	str.w	r2, [lr], #4
 8005552:	d2de      	bcs.n	8005512 <quorem+0x42>
 8005554:	9b00      	ldr	r3, [sp, #0]
 8005556:	58eb      	ldr	r3, [r5, r3]
 8005558:	b92b      	cbnz	r3, 8005566 <quorem+0x96>
 800555a:	9b01      	ldr	r3, [sp, #4]
 800555c:	3b04      	subs	r3, #4
 800555e:	429d      	cmp	r5, r3
 8005560:	461a      	mov	r2, r3
 8005562:	d32f      	bcc.n	80055c4 <quorem+0xf4>
 8005564:	613c      	str	r4, [r7, #16]
 8005566:	4638      	mov	r0, r7
 8005568:	f001 f9c8 	bl	80068fc <__mcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	db25      	blt.n	80055bc <quorem+0xec>
 8005570:	4629      	mov	r1, r5
 8005572:	2000      	movs	r0, #0
 8005574:	f858 2b04 	ldr.w	r2, [r8], #4
 8005578:	f8d1 c000 	ldr.w	ip, [r1]
 800557c:	fa1f fe82 	uxth.w	lr, r2
 8005580:	fa1f f38c 	uxth.w	r3, ip
 8005584:	eba3 030e 	sub.w	r3, r3, lr
 8005588:	4403      	add	r3, r0
 800558a:	0c12      	lsrs	r2, r2, #16
 800558c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005590:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800559a:	45c1      	cmp	r9, r8
 800559c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055a0:	f841 3b04 	str.w	r3, [r1], #4
 80055a4:	d2e6      	bcs.n	8005574 <quorem+0xa4>
 80055a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ae:	b922      	cbnz	r2, 80055ba <quorem+0xea>
 80055b0:	3b04      	subs	r3, #4
 80055b2:	429d      	cmp	r5, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	d30b      	bcc.n	80055d0 <quorem+0x100>
 80055b8:	613c      	str	r4, [r7, #16]
 80055ba:	3601      	adds	r6, #1
 80055bc:	4630      	mov	r0, r6
 80055be:	b003      	add	sp, #12
 80055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	3b04      	subs	r3, #4
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	d1cb      	bne.n	8005564 <quorem+0x94>
 80055cc:	3c01      	subs	r4, #1
 80055ce:	e7c6      	b.n	800555e <quorem+0x8e>
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	3b04      	subs	r3, #4
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	d1ef      	bne.n	80055b8 <quorem+0xe8>
 80055d8:	3c01      	subs	r4, #1
 80055da:	e7ea      	b.n	80055b2 <quorem+0xe2>
 80055dc:	2000      	movs	r0, #0
 80055de:	e7ee      	b.n	80055be <quorem+0xee>

080055e0 <_dtoa_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4614      	mov	r4, r2
 80055e6:	461d      	mov	r5, r3
 80055e8:	69c7      	ldr	r7, [r0, #28]
 80055ea:	b097      	sub	sp, #92	@ 0x5c
 80055ec:	4681      	mov	r9, r0
 80055ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80055f2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80055f4:	b97f      	cbnz	r7, 8005616 <_dtoa_r+0x36>
 80055f6:	2010      	movs	r0, #16
 80055f8:	f000 fe0e 	bl	8006218 <malloc>
 80055fc:	4602      	mov	r2, r0
 80055fe:	f8c9 001c 	str.w	r0, [r9, #28]
 8005602:	b920      	cbnz	r0, 800560e <_dtoa_r+0x2e>
 8005604:	21ef      	movs	r1, #239	@ 0xef
 8005606:	4bac      	ldr	r3, [pc, #688]	@ (80058b8 <_dtoa_r+0x2d8>)
 8005608:	48ac      	ldr	r0, [pc, #688]	@ (80058bc <_dtoa_r+0x2dc>)
 800560a:	f002 fc27 	bl	8007e5c <__assert_func>
 800560e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005612:	6007      	str	r7, [r0, #0]
 8005614:	60c7      	str	r7, [r0, #12]
 8005616:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	b159      	cbz	r1, 8005636 <_dtoa_r+0x56>
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	2301      	movs	r3, #1
 8005622:	4093      	lsls	r3, r2
 8005624:	604a      	str	r2, [r1, #4]
 8005626:	608b      	str	r3, [r1, #8]
 8005628:	4648      	mov	r0, r9
 800562a:	f000 feeb 	bl	8006404 <_Bfree>
 800562e:	2200      	movs	r2, #0
 8005630:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	1e2b      	subs	r3, r5, #0
 8005638:	bfaf      	iteee	ge
 800563a:	2300      	movge	r3, #0
 800563c:	2201      	movlt	r2, #1
 800563e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005642:	9307      	strlt	r3, [sp, #28]
 8005644:	bfa8      	it	ge
 8005646:	6033      	strge	r3, [r6, #0]
 8005648:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800564c:	4b9c      	ldr	r3, [pc, #624]	@ (80058c0 <_dtoa_r+0x2e0>)
 800564e:	bfb8      	it	lt
 8005650:	6032      	strlt	r2, [r6, #0]
 8005652:	ea33 0308 	bics.w	r3, r3, r8
 8005656:	d112      	bne.n	800567e <_dtoa_r+0x9e>
 8005658:	f242 730f 	movw	r3, #9999	@ 0x270f
 800565c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005664:	4323      	orrs	r3, r4
 8005666:	f000 855e 	beq.w	8006126 <_dtoa_r+0xb46>
 800566a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800566c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80058c4 <_dtoa_r+0x2e4>
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8560 	beq.w	8006136 <_dtoa_r+0xb56>
 8005676:	f10a 0303 	add.w	r3, sl, #3
 800567a:	f000 bd5a 	b.w	8006132 <_dtoa_r+0xb52>
 800567e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005682:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	f7fb f98b 	bl	80009a8 <__aeabi_dcmpeq>
 8005692:	4607      	mov	r7, r0
 8005694:	b158      	cbz	r0, 80056ae <_dtoa_r+0xce>
 8005696:	2301      	movs	r3, #1
 8005698:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800569e:	b113      	cbz	r3, 80056a6 <_dtoa_r+0xc6>
 80056a0:	4b89      	ldr	r3, [pc, #548]	@ (80058c8 <_dtoa_r+0x2e8>)
 80056a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80058cc <_dtoa_r+0x2ec>
 80056aa:	f000 bd44 	b.w	8006136 <_dtoa_r+0xb56>
 80056ae:	ab14      	add	r3, sp, #80	@ 0x50
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	ab15      	add	r3, sp, #84	@ 0x54
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4648      	mov	r0, r9
 80056b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80056bc:	f001 fa36 	bl	8006b2c <__d2b>
 80056c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80056c4:	9003      	str	r0, [sp, #12]
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d078      	beq.n	80057bc <_dtoa_r+0x1dc>
 80056ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80056d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056e0:	9712      	str	r7, [sp, #72]	@ 0x48
 80056e2:	4619      	mov	r1, r3
 80056e4:	2200      	movs	r2, #0
 80056e6:	4b7a      	ldr	r3, [pc, #488]	@ (80058d0 <_dtoa_r+0x2f0>)
 80056e8:	f7fa fd3e 	bl	8000168 <__aeabi_dsub>
 80056ec:	a36c      	add	r3, pc, #432	@ (adr r3, 80058a0 <_dtoa_r+0x2c0>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f7fa fef1 	bl	80004d8 <__aeabi_dmul>
 80056f6:	a36c      	add	r3, pc, #432	@ (adr r3, 80058a8 <_dtoa_r+0x2c8>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa fd36 	bl	800016c <__adddf3>
 8005700:	4604      	mov	r4, r0
 8005702:	4630      	mov	r0, r6
 8005704:	460d      	mov	r5, r1
 8005706:	f7fa fe7d 	bl	8000404 <__aeabi_i2d>
 800570a:	a369      	add	r3, pc, #420	@ (adr r3, 80058b0 <_dtoa_r+0x2d0>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fee2 	bl	80004d8 <__aeabi_dmul>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	f7fa fd26 	bl	800016c <__adddf3>
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	f7fb f988 	bl	8000a38 <__aeabi_d2iz>
 8005728:	2200      	movs	r2, #0
 800572a:	4607      	mov	r7, r0
 800572c:	2300      	movs	r3, #0
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fb f943 	bl	80009bc <__aeabi_dcmplt>
 8005736:	b140      	cbz	r0, 800574a <_dtoa_r+0x16a>
 8005738:	4638      	mov	r0, r7
 800573a:	f7fa fe63 	bl	8000404 <__aeabi_i2d>
 800573e:	4622      	mov	r2, r4
 8005740:	462b      	mov	r3, r5
 8005742:	f7fb f931 	bl	80009a8 <__aeabi_dcmpeq>
 8005746:	b900      	cbnz	r0, 800574a <_dtoa_r+0x16a>
 8005748:	3f01      	subs	r7, #1
 800574a:	2f16      	cmp	r7, #22
 800574c:	d854      	bhi.n	80057f8 <_dtoa_r+0x218>
 800574e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005752:	4b60      	ldr	r3, [pc, #384]	@ (80058d4 <_dtoa_r+0x2f4>)
 8005754:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fb f92e 	bl	80009bc <__aeabi_dcmplt>
 8005760:	2800      	cmp	r0, #0
 8005762:	d04b      	beq.n	80057fc <_dtoa_r+0x21c>
 8005764:	2300      	movs	r3, #0
 8005766:	3f01      	subs	r7, #1
 8005768:	930f      	str	r3, [sp, #60]	@ 0x3c
 800576a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800576c:	1b9b      	subs	r3, r3, r6
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	bf49      	itett	mi
 8005772:	f1c3 0301 	rsbmi	r3, r3, #1
 8005776:	2300      	movpl	r3, #0
 8005778:	9304      	strmi	r3, [sp, #16]
 800577a:	2300      	movmi	r3, #0
 800577c:	9209      	str	r2, [sp, #36]	@ 0x24
 800577e:	bf54      	ite	pl
 8005780:	9304      	strpl	r3, [sp, #16]
 8005782:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005784:	2f00      	cmp	r7, #0
 8005786:	db3b      	blt.n	8005800 <_dtoa_r+0x220>
 8005788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578a:	970e      	str	r7, [sp, #56]	@ 0x38
 800578c:	443b      	add	r3, r7
 800578e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005790:	2300      	movs	r3, #0
 8005792:	930a      	str	r3, [sp, #40]	@ 0x28
 8005794:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005796:	2b09      	cmp	r3, #9
 8005798:	d865      	bhi.n	8005866 <_dtoa_r+0x286>
 800579a:	2b05      	cmp	r3, #5
 800579c:	bfc4      	itt	gt
 800579e:	3b04      	subgt	r3, #4
 80057a0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80057a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057a4:	bfc8      	it	gt
 80057a6:	2400      	movgt	r4, #0
 80057a8:	f1a3 0302 	sub.w	r3, r3, #2
 80057ac:	bfd8      	it	le
 80057ae:	2401      	movle	r4, #1
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d864      	bhi.n	800587e <_dtoa_r+0x29e>
 80057b4:	e8df f003 	tbb	[pc, r3]
 80057b8:	2c385553 	.word	0x2c385553
 80057bc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057c0:	441e      	add	r6, r3
 80057c2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	bfc1      	itttt	gt
 80057ca:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057ce:	fa08 f803 	lslgt.w	r8, r8, r3
 80057d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057da:	bfd6      	itet	le
 80057dc:	f1c3 0320 	rsble	r3, r3, #32
 80057e0:	ea48 0003 	orrgt.w	r0, r8, r3
 80057e4:	fa04 f003 	lslle.w	r0, r4, r3
 80057e8:	f7fa fdfc 	bl	80003e4 <__aeabi_ui2d>
 80057ec:	2201      	movs	r2, #1
 80057ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80057f2:	3e01      	subs	r6, #1
 80057f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80057f6:	e774      	b.n	80056e2 <_dtoa_r+0x102>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e7b5      	b.n	8005768 <_dtoa_r+0x188>
 80057fc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80057fe:	e7b4      	b.n	800576a <_dtoa_r+0x18a>
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	1bdb      	subs	r3, r3, r7
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	427b      	negs	r3, r7
 8005808:	930a      	str	r3, [sp, #40]	@ 0x28
 800580a:	2300      	movs	r3, #0
 800580c:	930e      	str	r3, [sp, #56]	@ 0x38
 800580e:	e7c1      	b.n	8005794 <_dtoa_r+0x1b4>
 8005810:	2301      	movs	r3, #1
 8005812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005814:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005816:	eb07 0b03 	add.w	fp, r7, r3
 800581a:	f10b 0301 	add.w	r3, fp, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	9308      	str	r3, [sp, #32]
 8005822:	bfb8      	it	lt
 8005824:	2301      	movlt	r3, #1
 8005826:	e006      	b.n	8005836 <_dtoa_r+0x256>
 8005828:	2301      	movs	r3, #1
 800582a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800582c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800582e:	2b00      	cmp	r3, #0
 8005830:	dd28      	ble.n	8005884 <_dtoa_r+0x2a4>
 8005832:	469b      	mov	fp, r3
 8005834:	9308      	str	r3, [sp, #32]
 8005836:	2100      	movs	r1, #0
 8005838:	2204      	movs	r2, #4
 800583a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800583e:	f102 0514 	add.w	r5, r2, #20
 8005842:	429d      	cmp	r5, r3
 8005844:	d926      	bls.n	8005894 <_dtoa_r+0x2b4>
 8005846:	6041      	str	r1, [r0, #4]
 8005848:	4648      	mov	r0, r9
 800584a:	f000 fd9b 	bl	8006384 <_Balloc>
 800584e:	4682      	mov	sl, r0
 8005850:	2800      	cmp	r0, #0
 8005852:	d143      	bne.n	80058dc <_dtoa_r+0x2fc>
 8005854:	4602      	mov	r2, r0
 8005856:	f240 11af 	movw	r1, #431	@ 0x1af
 800585a:	4b1f      	ldr	r3, [pc, #124]	@ (80058d8 <_dtoa_r+0x2f8>)
 800585c:	e6d4      	b.n	8005608 <_dtoa_r+0x28>
 800585e:	2300      	movs	r3, #0
 8005860:	e7e3      	b.n	800582a <_dtoa_r+0x24a>
 8005862:	2300      	movs	r3, #0
 8005864:	e7d5      	b.n	8005812 <_dtoa_r+0x232>
 8005866:	2401      	movs	r4, #1
 8005868:	2300      	movs	r3, #0
 800586a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800586c:	9320      	str	r3, [sp, #128]	@ 0x80
 800586e:	f04f 3bff 	mov.w	fp, #4294967295
 8005872:	2200      	movs	r2, #0
 8005874:	2312      	movs	r3, #18
 8005876:	f8cd b020 	str.w	fp, [sp, #32]
 800587a:	9221      	str	r2, [sp, #132]	@ 0x84
 800587c:	e7db      	b.n	8005836 <_dtoa_r+0x256>
 800587e:	2301      	movs	r3, #1
 8005880:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005882:	e7f4      	b.n	800586e <_dtoa_r+0x28e>
 8005884:	f04f 0b01 	mov.w	fp, #1
 8005888:	465b      	mov	r3, fp
 800588a:	f8cd b020 	str.w	fp, [sp, #32]
 800588e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005892:	e7d0      	b.n	8005836 <_dtoa_r+0x256>
 8005894:	3101      	adds	r1, #1
 8005896:	0052      	lsls	r2, r2, #1
 8005898:	e7d1      	b.n	800583e <_dtoa_r+0x25e>
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w
 80058a0:	636f4361 	.word	0x636f4361
 80058a4:	3fd287a7 	.word	0x3fd287a7
 80058a8:	8b60c8b3 	.word	0x8b60c8b3
 80058ac:	3fc68a28 	.word	0x3fc68a28
 80058b0:	509f79fb 	.word	0x509f79fb
 80058b4:	3fd34413 	.word	0x3fd34413
 80058b8:	0800961c 	.word	0x0800961c
 80058bc:	08009633 	.word	0x08009633
 80058c0:	7ff00000 	.word	0x7ff00000
 80058c4:	08009618 	.word	0x08009618
 80058c8:	080095e7 	.word	0x080095e7
 80058cc:	080095e6 	.word	0x080095e6
 80058d0:	3ff80000 	.word	0x3ff80000
 80058d4:	080097e0 	.word	0x080097e0
 80058d8:	0800968b 	.word	0x0800968b
 80058dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058e0:	6018      	str	r0, [r3, #0]
 80058e2:	9b08      	ldr	r3, [sp, #32]
 80058e4:	2b0e      	cmp	r3, #14
 80058e6:	f200 80a1 	bhi.w	8005a2c <_dtoa_r+0x44c>
 80058ea:	2c00      	cmp	r4, #0
 80058ec:	f000 809e 	beq.w	8005a2c <_dtoa_r+0x44c>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	dd33      	ble.n	800595c <_dtoa_r+0x37c>
 80058f4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b68 <_dtoa_r+0x588>)
 80058f6:	f007 020f 	and.w	r2, r7, #15
 80058fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058fe:	05f8      	lsls	r0, r7, #23
 8005900:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005904:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800590c:	d516      	bpl.n	800593c <_dtoa_r+0x35c>
 800590e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005912:	4b96      	ldr	r3, [pc, #600]	@ (8005b6c <_dtoa_r+0x58c>)
 8005914:	2603      	movs	r6, #3
 8005916:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800591a:	f7fa ff07 	bl	800072c <__aeabi_ddiv>
 800591e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005922:	f004 040f 	and.w	r4, r4, #15
 8005926:	4d91      	ldr	r5, [pc, #580]	@ (8005b6c <_dtoa_r+0x58c>)
 8005928:	b954      	cbnz	r4, 8005940 <_dtoa_r+0x360>
 800592a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800592e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005932:	f7fa fefb 	bl	800072c <__aeabi_ddiv>
 8005936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800593a:	e028      	b.n	800598e <_dtoa_r+0x3ae>
 800593c:	2602      	movs	r6, #2
 800593e:	e7f2      	b.n	8005926 <_dtoa_r+0x346>
 8005940:	07e1      	lsls	r1, r4, #31
 8005942:	d508      	bpl.n	8005956 <_dtoa_r+0x376>
 8005944:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800594c:	f7fa fdc4 	bl	80004d8 <__aeabi_dmul>
 8005950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005954:	3601      	adds	r6, #1
 8005956:	1064      	asrs	r4, r4, #1
 8005958:	3508      	adds	r5, #8
 800595a:	e7e5      	b.n	8005928 <_dtoa_r+0x348>
 800595c:	f000 80af 	beq.w	8005abe <_dtoa_r+0x4de>
 8005960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005964:	427c      	negs	r4, r7
 8005966:	4b80      	ldr	r3, [pc, #512]	@ (8005b68 <_dtoa_r+0x588>)
 8005968:	f004 020f 	and.w	r2, r4, #15
 800596c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fdb0 	bl	80004d8 <__aeabi_dmul>
 8005978:	2602      	movs	r6, #2
 800597a:	2300      	movs	r3, #0
 800597c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005980:	4d7a      	ldr	r5, [pc, #488]	@ (8005b6c <_dtoa_r+0x58c>)
 8005982:	1124      	asrs	r4, r4, #4
 8005984:	2c00      	cmp	r4, #0
 8005986:	f040 808f 	bne.w	8005aa8 <_dtoa_r+0x4c8>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1d3      	bne.n	8005936 <_dtoa_r+0x356>
 800598e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8094 	beq.w	8005ac2 <_dtoa_r+0x4e2>
 800599a:	2200      	movs	r2, #0
 800599c:	4620      	mov	r0, r4
 800599e:	4629      	mov	r1, r5
 80059a0:	4b73      	ldr	r3, [pc, #460]	@ (8005b70 <_dtoa_r+0x590>)
 80059a2:	f7fb f80b 	bl	80009bc <__aeabi_dcmplt>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f000 808b 	beq.w	8005ac2 <_dtoa_r+0x4e2>
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <_dtoa_r+0x4e2>
 80059b4:	f1bb 0f00 	cmp.w	fp, #0
 80059b8:	dd34      	ble.n	8005a24 <_dtoa_r+0x444>
 80059ba:	4620      	mov	r0, r4
 80059bc:	2200      	movs	r2, #0
 80059be:	4629      	mov	r1, r5
 80059c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b74 <_dtoa_r+0x594>)
 80059c2:	f7fa fd89 	bl	80004d8 <__aeabi_dmul>
 80059c6:	465c      	mov	r4, fp
 80059c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059cc:	f107 38ff 	add.w	r8, r7, #4294967295
 80059d0:	3601      	adds	r6, #1
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7fa fd16 	bl	8000404 <__aeabi_i2d>
 80059d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059dc:	f7fa fd7c 	bl	80004d8 <__aeabi_dmul>
 80059e0:	2200      	movs	r2, #0
 80059e2:	4b65      	ldr	r3, [pc, #404]	@ (8005b78 <_dtoa_r+0x598>)
 80059e4:	f7fa fbc2 	bl	800016c <__adddf3>
 80059e8:	4605      	mov	r5, r0
 80059ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80059ee:	2c00      	cmp	r4, #0
 80059f0:	d16a      	bne.n	8005ac8 <_dtoa_r+0x4e8>
 80059f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059f6:	2200      	movs	r2, #0
 80059f8:	4b60      	ldr	r3, [pc, #384]	@ (8005b7c <_dtoa_r+0x59c>)
 80059fa:	f7fa fbb5 	bl	8000168 <__aeabi_dsub>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a06:	462a      	mov	r2, r5
 8005a08:	4633      	mov	r3, r6
 8005a0a:	f7fa fff5 	bl	80009f8 <__aeabi_dcmpgt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f040 8298 	bne.w	8005f44 <_dtoa_r+0x964>
 8005a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a1e:	f7fa ffcd 	bl	80009bc <__aeabi_dcmplt>
 8005a22:	bb38      	cbnz	r0, 8005a74 <_dtoa_r+0x494>
 8005a24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f2c0 8157 	blt.w	8005ce2 <_dtoa_r+0x702>
 8005a34:	2f0e      	cmp	r7, #14
 8005a36:	f300 8154 	bgt.w	8005ce2 <_dtoa_r+0x702>
 8005a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b68 <_dtoa_r+0x588>)
 8005a3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f280 80e5 	bge.w	8005c1a <_dtoa_r+0x63a>
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f300 80e1 	bgt.w	8005c1a <_dtoa_r+0x63a>
 8005a58:	d10c      	bne.n	8005a74 <_dtoa_r+0x494>
 8005a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4b46      	ldr	r3, [pc, #280]	@ (8005b7c <_dtoa_r+0x59c>)
 8005a62:	f7fa fd39 	bl	80004d8 <__aeabi_dmul>
 8005a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a6a:	f7fa ffbb 	bl	80009e4 <__aeabi_dcmpge>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f000 8266 	beq.w	8005f40 <_dtoa_r+0x960>
 8005a74:	2400      	movs	r4, #0
 8005a76:	4625      	mov	r5, r4
 8005a78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a7a:	4656      	mov	r6, sl
 8005a7c:	ea6f 0803 	mvn.w	r8, r3
 8005a80:	2700      	movs	r7, #0
 8005a82:	4621      	mov	r1, r4
 8005a84:	4648      	mov	r0, r9
 8005a86:	f000 fcbd 	bl	8006404 <_Bfree>
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	f000 80bd 	beq.w	8005c0a <_dtoa_r+0x62a>
 8005a90:	b12f      	cbz	r7, 8005a9e <_dtoa_r+0x4be>
 8005a92:	42af      	cmp	r7, r5
 8005a94:	d003      	beq.n	8005a9e <_dtoa_r+0x4be>
 8005a96:	4639      	mov	r1, r7
 8005a98:	4648      	mov	r0, r9
 8005a9a:	f000 fcb3 	bl	8006404 <_Bfree>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	f000 fcaf 	bl	8006404 <_Bfree>
 8005aa6:	e0b0      	b.n	8005c0a <_dtoa_r+0x62a>
 8005aa8:	07e2      	lsls	r2, r4, #31
 8005aaa:	d505      	bpl.n	8005ab8 <_dtoa_r+0x4d8>
 8005aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ab0:	f7fa fd12 	bl	80004d8 <__aeabi_dmul>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	1064      	asrs	r4, r4, #1
 8005aba:	3508      	adds	r5, #8
 8005abc:	e762      	b.n	8005984 <_dtoa_r+0x3a4>
 8005abe:	2602      	movs	r6, #2
 8005ac0:	e765      	b.n	800598e <_dtoa_r+0x3ae>
 8005ac2:	46b8      	mov	r8, r7
 8005ac4:	9c08      	ldr	r4, [sp, #32]
 8005ac6:	e784      	b.n	80059d2 <_dtoa_r+0x3f2>
 8005ac8:	4b27      	ldr	r3, [pc, #156]	@ (8005b68 <_dtoa_r+0x588>)
 8005aca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005acc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ad0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ad4:	4454      	add	r4, sl
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d054      	beq.n	8005b84 <_dtoa_r+0x5a4>
 8005ada:	2000      	movs	r0, #0
 8005adc:	4928      	ldr	r1, [pc, #160]	@ (8005b80 <_dtoa_r+0x5a0>)
 8005ade:	f7fa fe25 	bl	800072c <__aeabi_ddiv>
 8005ae2:	4633      	mov	r3, r6
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	f7fa fb3f 	bl	8000168 <__aeabi_dsub>
 8005aea:	4656      	mov	r6, sl
 8005aec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af4:	f7fa ffa0 	bl	8000a38 <__aeabi_d2iz>
 8005af8:	4605      	mov	r5, r0
 8005afa:	f7fa fc83 	bl	8000404 <__aeabi_i2d>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b06:	f7fa fb2f 	bl	8000168 <__aeabi_dsub>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	3530      	adds	r5, #48	@ 0x30
 8005b10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b18:	f806 5b01 	strb.w	r5, [r6], #1
 8005b1c:	f7fa ff4e 	bl	80009bc <__aeabi_dcmplt>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d172      	bne.n	8005c0a <_dtoa_r+0x62a>
 8005b24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4911      	ldr	r1, [pc, #68]	@ (8005b70 <_dtoa_r+0x590>)
 8005b2c:	f7fa fb1c 	bl	8000168 <__aeabi_dsub>
 8005b30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b34:	f7fa ff42 	bl	80009bc <__aeabi_dcmplt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f040 80b4 	bne.w	8005ca6 <_dtoa_r+0x6c6>
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	f43f af70 	beq.w	8005a24 <_dtoa_r+0x444>
 8005b44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <_dtoa_r+0x594>)
 8005b4c:	f7fa fcc4 	bl	80004d8 <__aeabi_dmul>
 8005b50:	2200      	movs	r2, #0
 8005b52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <_dtoa_r+0x594>)
 8005b5c:	f7fa fcbc 	bl	80004d8 <__aeabi_dmul>
 8005b60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b64:	e7c4      	b.n	8005af0 <_dtoa_r+0x510>
 8005b66:	bf00      	nop
 8005b68:	080097e0 	.word	0x080097e0
 8005b6c:	080097b8 	.word	0x080097b8
 8005b70:	3ff00000 	.word	0x3ff00000
 8005b74:	40240000 	.word	0x40240000
 8005b78:	401c0000 	.word	0x401c0000
 8005b7c:	40140000 	.word	0x40140000
 8005b80:	3fe00000 	.word	0x3fe00000
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	f7fa fca6 	bl	80004d8 <__aeabi_dmul>
 8005b8c:	4656      	mov	r6, sl
 8005b8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b92:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b98:	f7fa ff4e 	bl	8000a38 <__aeabi_d2iz>
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	f7fa fc31 	bl	8000404 <__aeabi_i2d>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005baa:	f7fa fadd 	bl	8000168 <__aeabi_dsub>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	3530      	adds	r5, #48	@ 0x30
 8005bb4:	f806 5b01 	strb.w	r5, [r6], #1
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	d124      	bne.n	8005c0e <_dtoa_r+0x62e>
 8005bc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bc8:	4bae      	ldr	r3, [pc, #696]	@ (8005e84 <_dtoa_r+0x8a4>)
 8005bca:	f7fa facf 	bl	800016c <__adddf3>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd6:	f7fa ff0f 	bl	80009f8 <__aeabi_dcmpgt>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d163      	bne.n	8005ca6 <_dtoa_r+0x6c6>
 8005bde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005be2:	2000      	movs	r0, #0
 8005be4:	49a7      	ldr	r1, [pc, #668]	@ (8005e84 <_dtoa_r+0x8a4>)
 8005be6:	f7fa fabf 	bl	8000168 <__aeabi_dsub>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf2:	f7fa fee3 	bl	80009bc <__aeabi_dcmplt>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f43f af14 	beq.w	8005a24 <_dtoa_r+0x444>
 8005bfc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005bfe:	1e73      	subs	r3, r6, #1
 8005c00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c06:	2b30      	cmp	r3, #48	@ 0x30
 8005c08:	d0f8      	beq.n	8005bfc <_dtoa_r+0x61c>
 8005c0a:	4647      	mov	r7, r8
 8005c0c:	e03b      	b.n	8005c86 <_dtoa_r+0x6a6>
 8005c0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005e88 <_dtoa_r+0x8a8>)
 8005c10:	f7fa fc62 	bl	80004d8 <__aeabi_dmul>
 8005c14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c18:	e7bc      	b.n	8005b94 <_dtoa_r+0x5b4>
 8005c1a:	4656      	mov	r6, sl
 8005c1c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c24:	4620      	mov	r0, r4
 8005c26:	4629      	mov	r1, r5
 8005c28:	f7fa fd80 	bl	800072c <__aeabi_ddiv>
 8005c2c:	f7fa ff04 	bl	8000a38 <__aeabi_d2iz>
 8005c30:	4680      	mov	r8, r0
 8005c32:	f7fa fbe7 	bl	8000404 <__aeabi_i2d>
 8005c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c3a:	f7fa fc4d 	bl	80004d8 <__aeabi_dmul>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fa fa8f 	bl	8000168 <__aeabi_dsub>
 8005c4a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c4e:	9d08      	ldr	r5, [sp, #32]
 8005c50:	f806 4b01 	strb.w	r4, [r6], #1
 8005c54:	eba6 040a 	sub.w	r4, r6, sl
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	d133      	bne.n	8005cc8 <_dtoa_r+0x6e8>
 8005c60:	f7fa fa84 	bl	800016c <__adddf3>
 8005c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c68:	4604      	mov	r4, r0
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	f7fa fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c70:	b9c0      	cbnz	r0, 8005ca4 <_dtoa_r+0x6c4>
 8005c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c76:	4620      	mov	r0, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f7fa fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8005c7e:	b110      	cbz	r0, 8005c86 <_dtoa_r+0x6a6>
 8005c80:	f018 0f01 	tst.w	r8, #1
 8005c84:	d10e      	bne.n	8005ca4 <_dtoa_r+0x6c4>
 8005c86:	4648      	mov	r0, r9
 8005c88:	9903      	ldr	r1, [sp, #12]
 8005c8a:	f000 fbbb 	bl	8006404 <_Bfree>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	7033      	strb	r3, [r6, #0]
 8005c92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c94:	3701      	adds	r7, #1
 8005c96:	601f      	str	r7, [r3, #0]
 8005c98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 824b 	beq.w	8006136 <_dtoa_r+0xb56>
 8005ca0:	601e      	str	r6, [r3, #0]
 8005ca2:	e248      	b.n	8006136 <_dtoa_r+0xb56>
 8005ca4:	46b8      	mov	r8, r7
 8005ca6:	4633      	mov	r3, r6
 8005ca8:	461e      	mov	r6, r3
 8005caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cae:	2a39      	cmp	r2, #57	@ 0x39
 8005cb0:	d106      	bne.n	8005cc0 <_dtoa_r+0x6e0>
 8005cb2:	459a      	cmp	sl, r3
 8005cb4:	d1f8      	bne.n	8005ca8 <_dtoa_r+0x6c8>
 8005cb6:	2230      	movs	r2, #48	@ 0x30
 8005cb8:	f108 0801 	add.w	r8, r8, #1
 8005cbc:	f88a 2000 	strb.w	r2, [sl]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	3201      	adds	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e7a0      	b.n	8005c0a <_dtoa_r+0x62a>
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4b6f      	ldr	r3, [pc, #444]	@ (8005e88 <_dtoa_r+0x8a8>)
 8005ccc:	f7fa fc04 	bl	80004d8 <__aeabi_dmul>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	f7fa fe66 	bl	80009a8 <__aeabi_dcmpeq>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d09f      	beq.n	8005c20 <_dtoa_r+0x640>
 8005ce0:	e7d1      	b.n	8005c86 <_dtoa_r+0x6a6>
 8005ce2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	f000 80ea 	beq.w	8005ebe <_dtoa_r+0x8de>
 8005cea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cec:	2a01      	cmp	r2, #1
 8005cee:	f300 80cd 	bgt.w	8005e8c <_dtoa_r+0x8ac>
 8005cf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	f000 80c1 	beq.w	8005e7c <_dtoa_r+0x89c>
 8005cfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005cfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d00:	9e04      	ldr	r6, [sp, #16]
 8005d02:	9a04      	ldr	r2, [sp, #16]
 8005d04:	2101      	movs	r1, #1
 8005d06:	441a      	add	r2, r3
 8005d08:	9204      	str	r2, [sp, #16]
 8005d0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	441a      	add	r2, r3
 8005d10:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d12:	f000 fc75 	bl	8006600 <__i2b>
 8005d16:	4605      	mov	r5, r0
 8005d18:	b166      	cbz	r6, 8005d34 <_dtoa_r+0x754>
 8005d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dd09      	ble.n	8005d34 <_dtoa_r+0x754>
 8005d20:	42b3      	cmp	r3, r6
 8005d22:	bfa8      	it	ge
 8005d24:	4633      	movge	r3, r6
 8005d26:	9a04      	ldr	r2, [sp, #16]
 8005d28:	1af6      	subs	r6, r6, r3
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	9204      	str	r2, [sp, #16]
 8005d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d36:	b30b      	cbz	r3, 8005d7c <_dtoa_r+0x79c>
 8005d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80c6 	beq.w	8005ecc <_dtoa_r+0x8ec>
 8005d40:	2c00      	cmp	r4, #0
 8005d42:	f000 80c0 	beq.w	8005ec6 <_dtoa_r+0x8e6>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4648      	mov	r0, r9
 8005d4c:	f000 fd10 	bl	8006770 <__pow5mult>
 8005d50:	9a03      	ldr	r2, [sp, #12]
 8005d52:	4601      	mov	r1, r0
 8005d54:	4605      	mov	r5, r0
 8005d56:	4648      	mov	r0, r9
 8005d58:	f000 fc68 	bl	800662c <__multiply>
 8005d5c:	9903      	ldr	r1, [sp, #12]
 8005d5e:	4680      	mov	r8, r0
 8005d60:	4648      	mov	r0, r9
 8005d62:	f000 fb4f 	bl	8006404 <_Bfree>
 8005d66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d68:	1b1b      	subs	r3, r3, r4
 8005d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d6c:	f000 80b1 	beq.w	8005ed2 <_dtoa_r+0x8f2>
 8005d70:	4641      	mov	r1, r8
 8005d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d74:	4648      	mov	r0, r9
 8005d76:	f000 fcfb 	bl	8006770 <__pow5mult>
 8005d7a:	9003      	str	r0, [sp, #12]
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	4648      	mov	r0, r9
 8005d80:	f000 fc3e 	bl	8006600 <__i2b>
 8005d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d86:	4604      	mov	r4, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 81d8 	beq.w	800613e <_dtoa_r+0xb5e>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4601      	mov	r1, r0
 8005d92:	4648      	mov	r0, r9
 8005d94:	f000 fcec 	bl	8006770 <__pow5mult>
 8005d98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f300 809f 	bgt.w	8005ee0 <_dtoa_r+0x900>
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 8097 	bne.w	8005ed8 <_dtoa_r+0x8f8>
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f040 8093 	bne.w	8005edc <_dtoa_r+0x8fc>
 8005db6:	9b07      	ldr	r3, [sp, #28]
 8005db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dbc:	0d1b      	lsrs	r3, r3, #20
 8005dbe:	051b      	lsls	r3, r3, #20
 8005dc0:	b133      	cbz	r3, 8005dd0 <_dtoa_r+0x7f0>
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dca:	3301      	adds	r3, #1
 8005dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dce:	2301      	movs	r3, #1
 8005dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 81b8 	beq.w	800614a <_dtoa_r+0xb6a>
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005de0:	6918      	ldr	r0, [r3, #16]
 8005de2:	f000 fbc1 	bl	8006568 <__hi0bits>
 8005de6:	f1c0 0020 	rsb	r0, r0, #32
 8005dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dec:	4418      	add	r0, r3
 8005dee:	f010 001f 	ands.w	r0, r0, #31
 8005df2:	f000 8082 	beq.w	8005efa <_dtoa_r+0x91a>
 8005df6:	f1c0 0320 	rsb	r3, r0, #32
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	dd73      	ble.n	8005ee6 <_dtoa_r+0x906>
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	f1c0 001c 	rsb	r0, r0, #28
 8005e04:	4403      	add	r3, r0
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	4406      	add	r6, r0
 8005e0c:	4403      	add	r3, r0
 8005e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x842>
 8005e16:	461a      	mov	r2, r3
 8005e18:	4648      	mov	r0, r9
 8005e1a:	9903      	ldr	r1, [sp, #12]
 8005e1c:	f000 fd02 	bl	8006824 <__lshift>
 8005e20:	9003      	str	r0, [sp, #12]
 8005e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd05      	ble.n	8005e34 <_dtoa_r+0x854>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4648      	mov	r0, r9
 8005e2e:	f000 fcf9 	bl	8006824 <__lshift>
 8005e32:	4604      	mov	r4, r0
 8005e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d061      	beq.n	8005efe <_dtoa_r+0x91e>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	9803      	ldr	r0, [sp, #12]
 8005e3e:	f000 fd5d 	bl	80068fc <__mcmp>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	da5b      	bge.n	8005efe <_dtoa_r+0x91e>
 8005e46:	2300      	movs	r3, #0
 8005e48:	220a      	movs	r2, #10
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	9903      	ldr	r1, [sp, #12]
 8005e4e:	f000 fafb 	bl	8006448 <__multadd>
 8005e52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e54:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e58:	9003      	str	r0, [sp, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8177 	beq.w	800614e <_dtoa_r+0xb6e>
 8005e60:	4629      	mov	r1, r5
 8005e62:	2300      	movs	r3, #0
 8005e64:	220a      	movs	r2, #10
 8005e66:	4648      	mov	r0, r9
 8005e68:	f000 faee 	bl	8006448 <__multadd>
 8005e6c:	f1bb 0f00 	cmp.w	fp, #0
 8005e70:	4605      	mov	r5, r0
 8005e72:	dc6f      	bgt.n	8005f54 <_dtoa_r+0x974>
 8005e74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	dc49      	bgt.n	8005f0e <_dtoa_r+0x92e>
 8005e7a:	e06b      	b.n	8005f54 <_dtoa_r+0x974>
 8005e7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e82:	e73c      	b.n	8005cfe <_dtoa_r+0x71e>
 8005e84:	3fe00000 	.word	0x3fe00000
 8005e88:	40240000 	.word	0x40240000
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	1e5c      	subs	r4, r3, #1
 8005e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	db09      	blt.n	8005eaa <_dtoa_r+0x8ca>
 8005e96:	1b1c      	subs	r4, r3, r4
 8005e98:	9b08      	ldr	r3, [sp, #32]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f6bf af30 	bge.w	8005d00 <_dtoa_r+0x720>
 8005ea0:	9b04      	ldr	r3, [sp, #16]
 8005ea2:	9a08      	ldr	r2, [sp, #32]
 8005ea4:	1a9e      	subs	r6, r3, r2
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e72b      	b.n	8005d02 <_dtoa_r+0x722>
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005eae:	1ae3      	subs	r3, r4, r3
 8005eb0:	441a      	add	r2, r3
 8005eb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005eb4:	9e04      	ldr	r6, [sp, #16]
 8005eb6:	2400      	movs	r4, #0
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ebc:	e721      	b.n	8005d02 <_dtoa_r+0x722>
 8005ebe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ec0:	9e04      	ldr	r6, [sp, #16]
 8005ec2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ec4:	e728      	b.n	8005d18 <_dtoa_r+0x738>
 8005ec6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005eca:	e751      	b.n	8005d70 <_dtoa_r+0x790>
 8005ecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ece:	9903      	ldr	r1, [sp, #12]
 8005ed0:	e750      	b.n	8005d74 <_dtoa_r+0x794>
 8005ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ed6:	e751      	b.n	8005d7c <_dtoa_r+0x79c>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e779      	b.n	8005dd0 <_dtoa_r+0x7f0>
 8005edc:	9b06      	ldr	r3, [sp, #24]
 8005ede:	e777      	b.n	8005dd0 <_dtoa_r+0x7f0>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ee4:	e779      	b.n	8005dda <_dtoa_r+0x7fa>
 8005ee6:	d093      	beq.n	8005e10 <_dtoa_r+0x830>
 8005ee8:	9a04      	ldr	r2, [sp, #16]
 8005eea:	331c      	adds	r3, #28
 8005eec:	441a      	add	r2, r3
 8005eee:	9204      	str	r2, [sp, #16]
 8005ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef2:	441e      	add	r6, r3
 8005ef4:	441a      	add	r2, r3
 8005ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ef8:	e78a      	b.n	8005e10 <_dtoa_r+0x830>
 8005efa:	4603      	mov	r3, r0
 8005efc:	e7f4      	b.n	8005ee8 <_dtoa_r+0x908>
 8005efe:	9b08      	ldr	r3, [sp, #32]
 8005f00:	46b8      	mov	r8, r7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dc20      	bgt.n	8005f48 <_dtoa_r+0x968>
 8005f06:	469b      	mov	fp, r3
 8005f08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	dd1e      	ble.n	8005f4c <_dtoa_r+0x96c>
 8005f0e:	f1bb 0f00 	cmp.w	fp, #0
 8005f12:	f47f adb1 	bne.w	8005a78 <_dtoa_r+0x498>
 8005f16:	4621      	mov	r1, r4
 8005f18:	465b      	mov	r3, fp
 8005f1a:	2205      	movs	r2, #5
 8005f1c:	4648      	mov	r0, r9
 8005f1e:	f000 fa93 	bl	8006448 <__multadd>
 8005f22:	4601      	mov	r1, r0
 8005f24:	4604      	mov	r4, r0
 8005f26:	9803      	ldr	r0, [sp, #12]
 8005f28:	f000 fce8 	bl	80068fc <__mcmp>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f77f ada3 	ble.w	8005a78 <_dtoa_r+0x498>
 8005f32:	4656      	mov	r6, sl
 8005f34:	2331      	movs	r3, #49	@ 0x31
 8005f36:	f108 0801 	add.w	r8, r8, #1
 8005f3a:	f806 3b01 	strb.w	r3, [r6], #1
 8005f3e:	e59f      	b.n	8005a80 <_dtoa_r+0x4a0>
 8005f40:	46b8      	mov	r8, r7
 8005f42:	9c08      	ldr	r4, [sp, #32]
 8005f44:	4625      	mov	r5, r4
 8005f46:	e7f4      	b.n	8005f32 <_dtoa_r+0x952>
 8005f48:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8101 	beq.w	8006156 <_dtoa_r+0xb76>
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	dd05      	ble.n	8005f64 <_dtoa_r+0x984>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4648      	mov	r0, r9
 8005f5e:	f000 fc61 	bl	8006824 <__lshift>
 8005f62:	4605      	mov	r5, r0
 8005f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d05c      	beq.n	8006024 <_dtoa_r+0xa44>
 8005f6a:	4648      	mov	r0, r9
 8005f6c:	6869      	ldr	r1, [r5, #4]
 8005f6e:	f000 fa09 	bl	8006384 <_Balloc>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b928      	cbnz	r0, 8005f82 <_dtoa_r+0x9a2>
 8005f76:	4602      	mov	r2, r0
 8005f78:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f7c:	4b80      	ldr	r3, [pc, #512]	@ (8006180 <_dtoa_r+0xba0>)
 8005f7e:	f7ff bb43 	b.w	8005608 <_dtoa_r+0x28>
 8005f82:	692a      	ldr	r2, [r5, #16]
 8005f84:	f105 010c 	add.w	r1, r5, #12
 8005f88:	3202      	adds	r2, #2
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	300c      	adds	r0, #12
 8005f8e:	f001 ff51 	bl	8007e34 <memcpy>
 8005f92:	2201      	movs	r2, #1
 8005f94:	4631      	mov	r1, r6
 8005f96:	4648      	mov	r0, r9
 8005f98:	f000 fc44 	bl	8006824 <__lshift>
 8005f9c:	462f      	mov	r7, r5
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	f10a 0301 	add.w	r3, sl, #1
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	eb0a 030b 	add.w	r3, sl, fp
 8005faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fac:	9b06      	ldr	r3, [sp, #24]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb4:	9b04      	ldr	r3, [sp, #16]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	9803      	ldr	r0, [sp, #12]
 8005fba:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fbe:	f7ff fa87 	bl	80054d0 <quorem>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	3330      	adds	r3, #48	@ 0x30
 8005fc8:	9006      	str	r0, [sp, #24]
 8005fca:	9803      	ldr	r0, [sp, #12]
 8005fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fce:	f000 fc95 	bl	80068fc <__mcmp>
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	9008      	str	r0, [sp, #32]
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f000 fcab 	bl	8006934 <__mdiff>
 8005fde:	68c2      	ldr	r2, [r0, #12]
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fe4:	bb02      	cbnz	r2, 8006028 <_dtoa_r+0xa48>
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	9803      	ldr	r0, [sp, #12]
 8005fea:	f000 fc87 	bl	80068fc <__mcmp>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4648      	mov	r0, r9
 8005ff6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005ffa:	f000 fa03 	bl	8006404 <_Bfree>
 8005ffe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006000:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006002:	9e04      	ldr	r6, [sp, #16]
 8006004:	ea42 0103 	orr.w	r1, r2, r3
 8006008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800600a:	4319      	orrs	r1, r3
 800600c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800600e:	d10d      	bne.n	800602c <_dtoa_r+0xa4c>
 8006010:	2b39      	cmp	r3, #57	@ 0x39
 8006012:	d027      	beq.n	8006064 <_dtoa_r+0xa84>
 8006014:	9a08      	ldr	r2, [sp, #32]
 8006016:	2a00      	cmp	r2, #0
 8006018:	dd01      	ble.n	800601e <_dtoa_r+0xa3e>
 800601a:	9b06      	ldr	r3, [sp, #24]
 800601c:	3331      	adds	r3, #49	@ 0x31
 800601e:	f88b 3000 	strb.w	r3, [fp]
 8006022:	e52e      	b.n	8005a82 <_dtoa_r+0x4a2>
 8006024:	4628      	mov	r0, r5
 8006026:	e7b9      	b.n	8005f9c <_dtoa_r+0x9bc>
 8006028:	2201      	movs	r2, #1
 800602a:	e7e2      	b.n	8005ff2 <_dtoa_r+0xa12>
 800602c:	9908      	ldr	r1, [sp, #32]
 800602e:	2900      	cmp	r1, #0
 8006030:	db04      	blt.n	800603c <_dtoa_r+0xa5c>
 8006032:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006034:	4301      	orrs	r1, r0
 8006036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006038:	4301      	orrs	r1, r0
 800603a:	d120      	bne.n	800607e <_dtoa_r+0xa9e>
 800603c:	2a00      	cmp	r2, #0
 800603e:	ddee      	ble.n	800601e <_dtoa_r+0xa3e>
 8006040:	2201      	movs	r2, #1
 8006042:	9903      	ldr	r1, [sp, #12]
 8006044:	4648      	mov	r0, r9
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	f000 fbec 	bl	8006824 <__lshift>
 800604c:	4621      	mov	r1, r4
 800604e:	9003      	str	r0, [sp, #12]
 8006050:	f000 fc54 	bl	80068fc <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	dc02      	bgt.n	8006060 <_dtoa_r+0xa80>
 800605a:	d1e0      	bne.n	800601e <_dtoa_r+0xa3e>
 800605c:	07da      	lsls	r2, r3, #31
 800605e:	d5de      	bpl.n	800601e <_dtoa_r+0xa3e>
 8006060:	2b39      	cmp	r3, #57	@ 0x39
 8006062:	d1da      	bne.n	800601a <_dtoa_r+0xa3a>
 8006064:	2339      	movs	r3, #57	@ 0x39
 8006066:	f88b 3000 	strb.w	r3, [fp]
 800606a:	4633      	mov	r3, r6
 800606c:	461e      	mov	r6, r3
 800606e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006072:	3b01      	subs	r3, #1
 8006074:	2a39      	cmp	r2, #57	@ 0x39
 8006076:	d04e      	beq.n	8006116 <_dtoa_r+0xb36>
 8006078:	3201      	adds	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e501      	b.n	8005a82 <_dtoa_r+0x4a2>
 800607e:	2a00      	cmp	r2, #0
 8006080:	dd03      	ble.n	800608a <_dtoa_r+0xaaa>
 8006082:	2b39      	cmp	r3, #57	@ 0x39
 8006084:	d0ee      	beq.n	8006064 <_dtoa_r+0xa84>
 8006086:	3301      	adds	r3, #1
 8006088:	e7c9      	b.n	800601e <_dtoa_r+0xa3e>
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800608e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006092:	428a      	cmp	r2, r1
 8006094:	d028      	beq.n	80060e8 <_dtoa_r+0xb08>
 8006096:	2300      	movs	r3, #0
 8006098:	220a      	movs	r2, #10
 800609a:	9903      	ldr	r1, [sp, #12]
 800609c:	4648      	mov	r0, r9
 800609e:	f000 f9d3 	bl	8006448 <__multadd>
 80060a2:	42af      	cmp	r7, r5
 80060a4:	9003      	str	r0, [sp, #12]
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	f04f 020a 	mov.w	r2, #10
 80060ae:	4639      	mov	r1, r7
 80060b0:	4648      	mov	r0, r9
 80060b2:	d107      	bne.n	80060c4 <_dtoa_r+0xae4>
 80060b4:	f000 f9c8 	bl	8006448 <__multadd>
 80060b8:	4607      	mov	r7, r0
 80060ba:	4605      	mov	r5, r0
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	3301      	adds	r3, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	e777      	b.n	8005fb4 <_dtoa_r+0x9d4>
 80060c4:	f000 f9c0 	bl	8006448 <__multadd>
 80060c8:	4629      	mov	r1, r5
 80060ca:	4607      	mov	r7, r0
 80060cc:	2300      	movs	r3, #0
 80060ce:	220a      	movs	r2, #10
 80060d0:	4648      	mov	r0, r9
 80060d2:	f000 f9b9 	bl	8006448 <__multadd>
 80060d6:	4605      	mov	r5, r0
 80060d8:	e7f0      	b.n	80060bc <_dtoa_r+0xadc>
 80060da:	f1bb 0f00 	cmp.w	fp, #0
 80060de:	bfcc      	ite	gt
 80060e0:	465e      	movgt	r6, fp
 80060e2:	2601      	movle	r6, #1
 80060e4:	2700      	movs	r7, #0
 80060e6:	4456      	add	r6, sl
 80060e8:	2201      	movs	r2, #1
 80060ea:	9903      	ldr	r1, [sp, #12]
 80060ec:	4648      	mov	r0, r9
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	f000 fb98 	bl	8006824 <__lshift>
 80060f4:	4621      	mov	r1, r4
 80060f6:	9003      	str	r0, [sp, #12]
 80060f8:	f000 fc00 	bl	80068fc <__mcmp>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	dcb4      	bgt.n	800606a <_dtoa_r+0xa8a>
 8006100:	d102      	bne.n	8006108 <_dtoa_r+0xb28>
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	07db      	lsls	r3, r3, #31
 8006106:	d4b0      	bmi.n	800606a <_dtoa_r+0xa8a>
 8006108:	4633      	mov	r3, r6
 800610a:	461e      	mov	r6, r3
 800610c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006110:	2a30      	cmp	r2, #48	@ 0x30
 8006112:	d0fa      	beq.n	800610a <_dtoa_r+0xb2a>
 8006114:	e4b5      	b.n	8005a82 <_dtoa_r+0x4a2>
 8006116:	459a      	cmp	sl, r3
 8006118:	d1a8      	bne.n	800606c <_dtoa_r+0xa8c>
 800611a:	2331      	movs	r3, #49	@ 0x31
 800611c:	f108 0801 	add.w	r8, r8, #1
 8006120:	f88a 3000 	strb.w	r3, [sl]
 8006124:	e4ad      	b.n	8005a82 <_dtoa_r+0x4a2>
 8006126:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006128:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006184 <_dtoa_r+0xba4>
 800612c:	b11b      	cbz	r3, 8006136 <_dtoa_r+0xb56>
 800612e:	f10a 0308 	add.w	r3, sl, #8
 8006132:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4650      	mov	r0, sl
 8006138:	b017      	add	sp, #92	@ 0x5c
 800613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006140:	2b01      	cmp	r3, #1
 8006142:	f77f ae2e 	ble.w	8005da2 <_dtoa_r+0x7c2>
 8006146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006148:	930a      	str	r3, [sp, #40]	@ 0x28
 800614a:	2001      	movs	r0, #1
 800614c:	e64d      	b.n	8005dea <_dtoa_r+0x80a>
 800614e:	f1bb 0f00 	cmp.w	fp, #0
 8006152:	f77f aed9 	ble.w	8005f08 <_dtoa_r+0x928>
 8006156:	4656      	mov	r6, sl
 8006158:	4621      	mov	r1, r4
 800615a:	9803      	ldr	r0, [sp, #12]
 800615c:	f7ff f9b8 	bl	80054d0 <quorem>
 8006160:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006164:	f806 3b01 	strb.w	r3, [r6], #1
 8006168:	eba6 020a 	sub.w	r2, r6, sl
 800616c:	4593      	cmp	fp, r2
 800616e:	ddb4      	ble.n	80060da <_dtoa_r+0xafa>
 8006170:	2300      	movs	r3, #0
 8006172:	220a      	movs	r2, #10
 8006174:	4648      	mov	r0, r9
 8006176:	9903      	ldr	r1, [sp, #12]
 8006178:	f000 f966 	bl	8006448 <__multadd>
 800617c:	9003      	str	r0, [sp, #12]
 800617e:	e7eb      	b.n	8006158 <_dtoa_r+0xb78>
 8006180:	0800968b 	.word	0x0800968b
 8006184:	0800960f 	.word	0x0800960f

08006188 <_free_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4605      	mov	r5, r0
 800618c:	2900      	cmp	r1, #0
 800618e:	d040      	beq.n	8006212 <_free_r+0x8a>
 8006190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006194:	1f0c      	subs	r4, r1, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfb8      	it	lt
 800619a:	18e4      	addlt	r4, r4, r3
 800619c:	f000 f8e6 	bl	800636c <__malloc_lock>
 80061a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006214 <_free_r+0x8c>)
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	b933      	cbnz	r3, 80061b4 <_free_r+0x2c>
 80061a6:	6063      	str	r3, [r4, #4]
 80061a8:	6014      	str	r4, [r2, #0]
 80061aa:	4628      	mov	r0, r5
 80061ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b0:	f000 b8e2 	b.w	8006378 <__malloc_unlock>
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d908      	bls.n	80061ca <_free_r+0x42>
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	1821      	adds	r1, r4, r0
 80061bc:	428b      	cmp	r3, r1
 80061be:	bf01      	itttt	eq
 80061c0:	6819      	ldreq	r1, [r3, #0]
 80061c2:	685b      	ldreq	r3, [r3, #4]
 80061c4:	1809      	addeq	r1, r1, r0
 80061c6:	6021      	streq	r1, [r4, #0]
 80061c8:	e7ed      	b.n	80061a6 <_free_r+0x1e>
 80061ca:	461a      	mov	r2, r3
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b10b      	cbz	r3, 80061d4 <_free_r+0x4c>
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d9fa      	bls.n	80061ca <_free_r+0x42>
 80061d4:	6811      	ldr	r1, [r2, #0]
 80061d6:	1850      	adds	r0, r2, r1
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d10b      	bne.n	80061f4 <_free_r+0x6c>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	4401      	add	r1, r0
 80061e0:	1850      	adds	r0, r2, r1
 80061e2:	4283      	cmp	r3, r0
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	d1e0      	bne.n	80061aa <_free_r+0x22>
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4408      	add	r0, r1
 80061ee:	6010      	str	r0, [r2, #0]
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	e7da      	b.n	80061aa <_free_r+0x22>
 80061f4:	d902      	bls.n	80061fc <_free_r+0x74>
 80061f6:	230c      	movs	r3, #12
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	e7d6      	b.n	80061aa <_free_r+0x22>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	1821      	adds	r1, r4, r0
 8006200:	428b      	cmp	r3, r1
 8006202:	bf01      	itttt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	1809      	addeq	r1, r1, r0
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	6054      	str	r4, [r2, #4]
 8006210:	e7cb      	b.n	80061aa <_free_r+0x22>
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20000858 	.word	0x20000858

08006218 <malloc>:
 8006218:	4b02      	ldr	r3, [pc, #8]	@ (8006224 <malloc+0xc>)
 800621a:	4601      	mov	r1, r0
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	f000 b825 	b.w	800626c <_malloc_r>
 8006222:	bf00      	nop
 8006224:	20000018 	.word	0x20000018

08006228 <sbrk_aligned>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0f      	ldr	r6, [pc, #60]	@ (8006268 <sbrk_aligned+0x40>)
 800622c:	460c      	mov	r4, r1
 800622e:	6831      	ldr	r1, [r6, #0]
 8006230:	4605      	mov	r5, r0
 8006232:	b911      	cbnz	r1, 800623a <sbrk_aligned+0x12>
 8006234:	f001 fdee 	bl	8007e14 <_sbrk_r>
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f001 fde9 	bl	8007e14 <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d103      	bne.n	800624e <sbrk_aligned+0x26>
 8006246:	f04f 34ff 	mov.w	r4, #4294967295
 800624a:	4620      	mov	r0, r4
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	1cc4      	adds	r4, r0, #3
 8006250:	f024 0403 	bic.w	r4, r4, #3
 8006254:	42a0      	cmp	r0, r4
 8006256:	d0f8      	beq.n	800624a <sbrk_aligned+0x22>
 8006258:	1a21      	subs	r1, r4, r0
 800625a:	4628      	mov	r0, r5
 800625c:	f001 fdda 	bl	8007e14 <_sbrk_r>
 8006260:	3001      	adds	r0, #1
 8006262:	d1f2      	bne.n	800624a <sbrk_aligned+0x22>
 8006264:	e7ef      	b.n	8006246 <sbrk_aligned+0x1e>
 8006266:	bf00      	nop
 8006268:	20000854 	.word	0x20000854

0800626c <_malloc_r>:
 800626c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006270:	1ccd      	adds	r5, r1, #3
 8006272:	f025 0503 	bic.w	r5, r5, #3
 8006276:	3508      	adds	r5, #8
 8006278:	2d0c      	cmp	r5, #12
 800627a:	bf38      	it	cc
 800627c:	250c      	movcc	r5, #12
 800627e:	2d00      	cmp	r5, #0
 8006280:	4606      	mov	r6, r0
 8006282:	db01      	blt.n	8006288 <_malloc_r+0x1c>
 8006284:	42a9      	cmp	r1, r5
 8006286:	d904      	bls.n	8006292 <_malloc_r+0x26>
 8006288:	230c      	movs	r3, #12
 800628a:	6033      	str	r3, [r6, #0]
 800628c:	2000      	movs	r0, #0
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006368 <_malloc_r+0xfc>
 8006296:	f000 f869 	bl	800636c <__malloc_lock>
 800629a:	f8d8 3000 	ldr.w	r3, [r8]
 800629e:	461c      	mov	r4, r3
 80062a0:	bb44      	cbnz	r4, 80062f4 <_malloc_r+0x88>
 80062a2:	4629      	mov	r1, r5
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7ff ffbf 	bl	8006228 <sbrk_aligned>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	4604      	mov	r4, r0
 80062ae:	d158      	bne.n	8006362 <_malloc_r+0xf6>
 80062b0:	f8d8 4000 	ldr.w	r4, [r8]
 80062b4:	4627      	mov	r7, r4
 80062b6:	2f00      	cmp	r7, #0
 80062b8:	d143      	bne.n	8006342 <_malloc_r+0xd6>
 80062ba:	2c00      	cmp	r4, #0
 80062bc:	d04b      	beq.n	8006356 <_malloc_r+0xea>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	4639      	mov	r1, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	eb04 0903 	add.w	r9, r4, r3
 80062c8:	f001 fda4 	bl	8007e14 <_sbrk_r>
 80062cc:	4581      	cmp	r9, r0
 80062ce:	d142      	bne.n	8006356 <_malloc_r+0xea>
 80062d0:	6821      	ldr	r1, [r4, #0]
 80062d2:	4630      	mov	r0, r6
 80062d4:	1a6d      	subs	r5, r5, r1
 80062d6:	4629      	mov	r1, r5
 80062d8:	f7ff ffa6 	bl	8006228 <sbrk_aligned>
 80062dc:	3001      	adds	r0, #1
 80062de:	d03a      	beq.n	8006356 <_malloc_r+0xea>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	442b      	add	r3, r5
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	bb62      	cbnz	r2, 8006348 <_malloc_r+0xdc>
 80062ee:	f8c8 7000 	str.w	r7, [r8]
 80062f2:	e00f      	b.n	8006314 <_malloc_r+0xa8>
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	1b52      	subs	r2, r2, r5
 80062f8:	d420      	bmi.n	800633c <_malloc_r+0xd0>
 80062fa:	2a0b      	cmp	r2, #11
 80062fc:	d917      	bls.n	800632e <_malloc_r+0xc2>
 80062fe:	1961      	adds	r1, r4, r5
 8006300:	42a3      	cmp	r3, r4
 8006302:	6025      	str	r5, [r4, #0]
 8006304:	bf18      	it	ne
 8006306:	6059      	strne	r1, [r3, #4]
 8006308:	6863      	ldr	r3, [r4, #4]
 800630a:	bf08      	it	eq
 800630c:	f8c8 1000 	streq.w	r1, [r8]
 8006310:	5162      	str	r2, [r4, r5]
 8006312:	604b      	str	r3, [r1, #4]
 8006314:	4630      	mov	r0, r6
 8006316:	f000 f82f 	bl	8006378 <__malloc_unlock>
 800631a:	f104 000b 	add.w	r0, r4, #11
 800631e:	1d23      	adds	r3, r4, #4
 8006320:	f020 0007 	bic.w	r0, r0, #7
 8006324:	1ac2      	subs	r2, r0, r3
 8006326:	bf1c      	itt	ne
 8006328:	1a1b      	subne	r3, r3, r0
 800632a:	50a3      	strne	r3, [r4, r2]
 800632c:	e7af      	b.n	800628e <_malloc_r+0x22>
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	42a3      	cmp	r3, r4
 8006332:	bf0c      	ite	eq
 8006334:	f8c8 2000 	streq.w	r2, [r8]
 8006338:	605a      	strne	r2, [r3, #4]
 800633a:	e7eb      	b.n	8006314 <_malloc_r+0xa8>
 800633c:	4623      	mov	r3, r4
 800633e:	6864      	ldr	r4, [r4, #4]
 8006340:	e7ae      	b.n	80062a0 <_malloc_r+0x34>
 8006342:	463c      	mov	r4, r7
 8006344:	687f      	ldr	r7, [r7, #4]
 8006346:	e7b6      	b.n	80062b6 <_malloc_r+0x4a>
 8006348:	461a      	mov	r2, r3
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	42a3      	cmp	r3, r4
 800634e:	d1fb      	bne.n	8006348 <_malloc_r+0xdc>
 8006350:	2300      	movs	r3, #0
 8006352:	6053      	str	r3, [r2, #4]
 8006354:	e7de      	b.n	8006314 <_malloc_r+0xa8>
 8006356:	230c      	movs	r3, #12
 8006358:	4630      	mov	r0, r6
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	f000 f80c 	bl	8006378 <__malloc_unlock>
 8006360:	e794      	b.n	800628c <_malloc_r+0x20>
 8006362:	6005      	str	r5, [r0, #0]
 8006364:	e7d6      	b.n	8006314 <_malloc_r+0xa8>
 8006366:	bf00      	nop
 8006368:	20000858 	.word	0x20000858

0800636c <__malloc_lock>:
 800636c:	4801      	ldr	r0, [pc, #4]	@ (8006374 <__malloc_lock+0x8>)
 800636e:	f7ff b89a 	b.w	80054a6 <__retarget_lock_acquire_recursive>
 8006372:	bf00      	nop
 8006374:	20000850 	.word	0x20000850

08006378 <__malloc_unlock>:
 8006378:	4801      	ldr	r0, [pc, #4]	@ (8006380 <__malloc_unlock+0x8>)
 800637a:	f7ff b895 	b.w	80054a8 <__retarget_lock_release_recursive>
 800637e:	bf00      	nop
 8006380:	20000850 	.word	0x20000850

08006384 <_Balloc>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	69c6      	ldr	r6, [r0, #28]
 8006388:	4604      	mov	r4, r0
 800638a:	460d      	mov	r5, r1
 800638c:	b976      	cbnz	r6, 80063ac <_Balloc+0x28>
 800638e:	2010      	movs	r0, #16
 8006390:	f7ff ff42 	bl	8006218 <malloc>
 8006394:	4602      	mov	r2, r0
 8006396:	61e0      	str	r0, [r4, #28]
 8006398:	b920      	cbnz	r0, 80063a4 <_Balloc+0x20>
 800639a:	216b      	movs	r1, #107	@ 0x6b
 800639c:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <_Balloc+0x78>)
 800639e:	4818      	ldr	r0, [pc, #96]	@ (8006400 <_Balloc+0x7c>)
 80063a0:	f001 fd5c 	bl	8007e5c <__assert_func>
 80063a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a8:	6006      	str	r6, [r0, #0]
 80063aa:	60c6      	str	r6, [r0, #12]
 80063ac:	69e6      	ldr	r6, [r4, #28]
 80063ae:	68f3      	ldr	r3, [r6, #12]
 80063b0:	b183      	cbz	r3, 80063d4 <_Balloc+0x50>
 80063b2:	69e3      	ldr	r3, [r4, #28]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ba:	b9b8      	cbnz	r0, 80063ec <_Balloc+0x68>
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f605 	lsl.w	r6, r1, r5
 80063c2:	1d72      	adds	r2, r6, #5
 80063c4:	4620      	mov	r0, r4
 80063c6:	0092      	lsls	r2, r2, #2
 80063c8:	f001 fd66 	bl	8007e98 <_calloc_r>
 80063cc:	b160      	cbz	r0, 80063e8 <_Balloc+0x64>
 80063ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063d2:	e00e      	b.n	80063f2 <_Balloc+0x6e>
 80063d4:	2221      	movs	r2, #33	@ 0x21
 80063d6:	2104      	movs	r1, #4
 80063d8:	4620      	mov	r0, r4
 80063da:	f001 fd5d 	bl	8007e98 <_calloc_r>
 80063de:	69e3      	ldr	r3, [r4, #28]
 80063e0:	60f0      	str	r0, [r6, #12]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e4      	bne.n	80063b2 <_Balloc+0x2e>
 80063e8:	2000      	movs	r0, #0
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	6802      	ldr	r2, [r0, #0]
 80063ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063f2:	2300      	movs	r3, #0
 80063f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063f8:	e7f7      	b.n	80063ea <_Balloc+0x66>
 80063fa:	bf00      	nop
 80063fc:	0800961c 	.word	0x0800961c
 8006400:	0800969c 	.word	0x0800969c

08006404 <_Bfree>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	69c6      	ldr	r6, [r0, #28]
 8006408:	4605      	mov	r5, r0
 800640a:	460c      	mov	r4, r1
 800640c:	b976      	cbnz	r6, 800642c <_Bfree+0x28>
 800640e:	2010      	movs	r0, #16
 8006410:	f7ff ff02 	bl	8006218 <malloc>
 8006414:	4602      	mov	r2, r0
 8006416:	61e8      	str	r0, [r5, #28]
 8006418:	b920      	cbnz	r0, 8006424 <_Bfree+0x20>
 800641a:	218f      	movs	r1, #143	@ 0x8f
 800641c:	4b08      	ldr	r3, [pc, #32]	@ (8006440 <_Bfree+0x3c>)
 800641e:	4809      	ldr	r0, [pc, #36]	@ (8006444 <_Bfree+0x40>)
 8006420:	f001 fd1c 	bl	8007e5c <__assert_func>
 8006424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006428:	6006      	str	r6, [r0, #0]
 800642a:	60c6      	str	r6, [r0, #12]
 800642c:	b13c      	cbz	r4, 800643e <_Bfree+0x3a>
 800642e:	69eb      	ldr	r3, [r5, #28]
 8006430:	6862      	ldr	r2, [r4, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006438:	6021      	str	r1, [r4, #0]
 800643a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	0800961c 	.word	0x0800961c
 8006444:	0800969c 	.word	0x0800969c

08006448 <__multadd>:
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	4607      	mov	r7, r0
 800644e:	460c      	mov	r4, r1
 8006450:	461e      	mov	r6, r3
 8006452:	2000      	movs	r0, #0
 8006454:	690d      	ldr	r5, [r1, #16]
 8006456:	f101 0c14 	add.w	ip, r1, #20
 800645a:	f8dc 3000 	ldr.w	r3, [ip]
 800645e:	3001      	adds	r0, #1
 8006460:	b299      	uxth	r1, r3
 8006462:	fb02 6101 	mla	r1, r2, r1, r6
 8006466:	0c1e      	lsrs	r6, r3, #16
 8006468:	0c0b      	lsrs	r3, r1, #16
 800646a:	fb02 3306 	mla	r3, r2, r6, r3
 800646e:	b289      	uxth	r1, r1
 8006470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006474:	4285      	cmp	r5, r0
 8006476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800647a:	f84c 1b04 	str.w	r1, [ip], #4
 800647e:	dcec      	bgt.n	800645a <__multadd+0x12>
 8006480:	b30e      	cbz	r6, 80064c6 <__multadd+0x7e>
 8006482:	68a3      	ldr	r3, [r4, #8]
 8006484:	42ab      	cmp	r3, r5
 8006486:	dc19      	bgt.n	80064bc <__multadd+0x74>
 8006488:	6861      	ldr	r1, [r4, #4]
 800648a:	4638      	mov	r0, r7
 800648c:	3101      	adds	r1, #1
 800648e:	f7ff ff79 	bl	8006384 <_Balloc>
 8006492:	4680      	mov	r8, r0
 8006494:	b928      	cbnz	r0, 80064a2 <__multadd+0x5a>
 8006496:	4602      	mov	r2, r0
 8006498:	21ba      	movs	r1, #186	@ 0xba
 800649a:	4b0c      	ldr	r3, [pc, #48]	@ (80064cc <__multadd+0x84>)
 800649c:	480c      	ldr	r0, [pc, #48]	@ (80064d0 <__multadd+0x88>)
 800649e:	f001 fcdd 	bl	8007e5c <__assert_func>
 80064a2:	6922      	ldr	r2, [r4, #16]
 80064a4:	f104 010c 	add.w	r1, r4, #12
 80064a8:	3202      	adds	r2, #2
 80064aa:	0092      	lsls	r2, r2, #2
 80064ac:	300c      	adds	r0, #12
 80064ae:	f001 fcc1 	bl	8007e34 <memcpy>
 80064b2:	4621      	mov	r1, r4
 80064b4:	4638      	mov	r0, r7
 80064b6:	f7ff ffa5 	bl	8006404 <_Bfree>
 80064ba:	4644      	mov	r4, r8
 80064bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064c0:	3501      	adds	r5, #1
 80064c2:	615e      	str	r6, [r3, #20]
 80064c4:	6125      	str	r5, [r4, #16]
 80064c6:	4620      	mov	r0, r4
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	0800968b 	.word	0x0800968b
 80064d0:	0800969c 	.word	0x0800969c

080064d4 <__s2b>:
 80064d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d8:	4615      	mov	r5, r2
 80064da:	2209      	movs	r2, #9
 80064dc:	461f      	mov	r7, r3
 80064de:	3308      	adds	r3, #8
 80064e0:	460c      	mov	r4, r1
 80064e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e6:	4606      	mov	r6, r0
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	429a      	cmp	r2, r3
 80064ee:	db09      	blt.n	8006504 <__s2b+0x30>
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7ff ff47 	bl	8006384 <_Balloc>
 80064f6:	b940      	cbnz	r0, 800650a <__s2b+0x36>
 80064f8:	4602      	mov	r2, r0
 80064fa:	21d3      	movs	r1, #211	@ 0xd3
 80064fc:	4b18      	ldr	r3, [pc, #96]	@ (8006560 <__s2b+0x8c>)
 80064fe:	4819      	ldr	r0, [pc, #100]	@ (8006564 <__s2b+0x90>)
 8006500:	f001 fcac 	bl	8007e5c <__assert_func>
 8006504:	0052      	lsls	r2, r2, #1
 8006506:	3101      	adds	r1, #1
 8006508:	e7f0      	b.n	80064ec <__s2b+0x18>
 800650a:	9b08      	ldr	r3, [sp, #32]
 800650c:	2d09      	cmp	r5, #9
 800650e:	6143      	str	r3, [r0, #20]
 8006510:	f04f 0301 	mov.w	r3, #1
 8006514:	6103      	str	r3, [r0, #16]
 8006516:	dd16      	ble.n	8006546 <__s2b+0x72>
 8006518:	f104 0909 	add.w	r9, r4, #9
 800651c:	46c8      	mov	r8, r9
 800651e:	442c      	add	r4, r5
 8006520:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006524:	4601      	mov	r1, r0
 8006526:	220a      	movs	r2, #10
 8006528:	4630      	mov	r0, r6
 800652a:	3b30      	subs	r3, #48	@ 0x30
 800652c:	f7ff ff8c 	bl	8006448 <__multadd>
 8006530:	45a0      	cmp	r8, r4
 8006532:	d1f5      	bne.n	8006520 <__s2b+0x4c>
 8006534:	f1a5 0408 	sub.w	r4, r5, #8
 8006538:	444c      	add	r4, r9
 800653a:	1b2d      	subs	r5, r5, r4
 800653c:	1963      	adds	r3, r4, r5
 800653e:	42bb      	cmp	r3, r7
 8006540:	db04      	blt.n	800654c <__s2b+0x78>
 8006542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006546:	2509      	movs	r5, #9
 8006548:	340a      	adds	r4, #10
 800654a:	e7f6      	b.n	800653a <__s2b+0x66>
 800654c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006550:	4601      	mov	r1, r0
 8006552:	220a      	movs	r2, #10
 8006554:	4630      	mov	r0, r6
 8006556:	3b30      	subs	r3, #48	@ 0x30
 8006558:	f7ff ff76 	bl	8006448 <__multadd>
 800655c:	e7ee      	b.n	800653c <__s2b+0x68>
 800655e:	bf00      	nop
 8006560:	0800968b 	.word	0x0800968b
 8006564:	0800969c 	.word	0x0800969c

08006568 <__hi0bits>:
 8006568:	4603      	mov	r3, r0
 800656a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800656e:	bf3a      	itte	cc
 8006570:	0403      	lslcc	r3, r0, #16
 8006572:	2010      	movcc	r0, #16
 8006574:	2000      	movcs	r0, #0
 8006576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800657a:	bf3c      	itt	cc
 800657c:	021b      	lslcc	r3, r3, #8
 800657e:	3008      	addcc	r0, #8
 8006580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006584:	bf3c      	itt	cc
 8006586:	011b      	lslcc	r3, r3, #4
 8006588:	3004      	addcc	r0, #4
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658e:	bf3c      	itt	cc
 8006590:	009b      	lslcc	r3, r3, #2
 8006592:	3002      	addcc	r0, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	db05      	blt.n	80065a4 <__hi0bits+0x3c>
 8006598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800659c:	f100 0001 	add.w	r0, r0, #1
 80065a0:	bf08      	it	eq
 80065a2:	2020      	moveq	r0, #32
 80065a4:	4770      	bx	lr

080065a6 <__lo0bits>:
 80065a6:	6803      	ldr	r3, [r0, #0]
 80065a8:	4602      	mov	r2, r0
 80065aa:	f013 0007 	ands.w	r0, r3, #7
 80065ae:	d00b      	beq.n	80065c8 <__lo0bits+0x22>
 80065b0:	07d9      	lsls	r1, r3, #31
 80065b2:	d421      	bmi.n	80065f8 <__lo0bits+0x52>
 80065b4:	0798      	lsls	r0, r3, #30
 80065b6:	bf49      	itett	mi
 80065b8:	085b      	lsrmi	r3, r3, #1
 80065ba:	089b      	lsrpl	r3, r3, #2
 80065bc:	2001      	movmi	r0, #1
 80065be:	6013      	strmi	r3, [r2, #0]
 80065c0:	bf5c      	itt	pl
 80065c2:	2002      	movpl	r0, #2
 80065c4:	6013      	strpl	r3, [r2, #0]
 80065c6:	4770      	bx	lr
 80065c8:	b299      	uxth	r1, r3
 80065ca:	b909      	cbnz	r1, 80065d0 <__lo0bits+0x2a>
 80065cc:	2010      	movs	r0, #16
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2d9      	uxtb	r1, r3
 80065d2:	b909      	cbnz	r1, 80065d8 <__lo0bits+0x32>
 80065d4:	3008      	adds	r0, #8
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	0719      	lsls	r1, r3, #28
 80065da:	bf04      	itt	eq
 80065dc:	091b      	lsreq	r3, r3, #4
 80065de:	3004      	addeq	r0, #4
 80065e0:	0799      	lsls	r1, r3, #30
 80065e2:	bf04      	itt	eq
 80065e4:	089b      	lsreq	r3, r3, #2
 80065e6:	3002      	addeq	r0, #2
 80065e8:	07d9      	lsls	r1, r3, #31
 80065ea:	d403      	bmi.n	80065f4 <__lo0bits+0x4e>
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	f100 0001 	add.w	r0, r0, #1
 80065f2:	d003      	beq.n	80065fc <__lo0bits+0x56>
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4770      	bx	lr
 80065f8:	2000      	movs	r0, #0
 80065fa:	4770      	bx	lr
 80065fc:	2020      	movs	r0, #32
 80065fe:	4770      	bx	lr

08006600 <__i2b>:
 8006600:	b510      	push	{r4, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	2101      	movs	r1, #1
 8006606:	f7ff febd 	bl	8006384 <_Balloc>
 800660a:	4602      	mov	r2, r0
 800660c:	b928      	cbnz	r0, 800661a <__i2b+0x1a>
 800660e:	f240 1145 	movw	r1, #325	@ 0x145
 8006612:	4b04      	ldr	r3, [pc, #16]	@ (8006624 <__i2b+0x24>)
 8006614:	4804      	ldr	r0, [pc, #16]	@ (8006628 <__i2b+0x28>)
 8006616:	f001 fc21 	bl	8007e5c <__assert_func>
 800661a:	2301      	movs	r3, #1
 800661c:	6144      	str	r4, [r0, #20]
 800661e:	6103      	str	r3, [r0, #16]
 8006620:	bd10      	pop	{r4, pc}
 8006622:	bf00      	nop
 8006624:	0800968b 	.word	0x0800968b
 8006628:	0800969c 	.word	0x0800969c

0800662c <__multiply>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	4617      	mov	r7, r2
 8006632:	690a      	ldr	r2, [r1, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4689      	mov	r9, r1
 8006638:	429a      	cmp	r2, r3
 800663a:	bfa2      	ittt	ge
 800663c:	463b      	movge	r3, r7
 800663e:	460f      	movge	r7, r1
 8006640:	4699      	movge	r9, r3
 8006642:	693d      	ldr	r5, [r7, #16]
 8006644:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	eb05 060a 	add.w	r6, r5, sl
 8006650:	42b3      	cmp	r3, r6
 8006652:	b085      	sub	sp, #20
 8006654:	bfb8      	it	lt
 8006656:	3101      	addlt	r1, #1
 8006658:	f7ff fe94 	bl	8006384 <_Balloc>
 800665c:	b930      	cbnz	r0, 800666c <__multiply+0x40>
 800665e:	4602      	mov	r2, r0
 8006660:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006664:	4b40      	ldr	r3, [pc, #256]	@ (8006768 <__multiply+0x13c>)
 8006666:	4841      	ldr	r0, [pc, #260]	@ (800676c <__multiply+0x140>)
 8006668:	f001 fbf8 	bl	8007e5c <__assert_func>
 800666c:	f100 0414 	add.w	r4, r0, #20
 8006670:	4623      	mov	r3, r4
 8006672:	2200      	movs	r2, #0
 8006674:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006678:	4573      	cmp	r3, lr
 800667a:	d320      	bcc.n	80066be <__multiply+0x92>
 800667c:	f107 0814 	add.w	r8, r7, #20
 8006680:	f109 0114 	add.w	r1, r9, #20
 8006684:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006688:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800668c:	9302      	str	r3, [sp, #8]
 800668e:	1beb      	subs	r3, r5, r7
 8006690:	3b15      	subs	r3, #21
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	3304      	adds	r3, #4
 8006698:	3715      	adds	r7, #21
 800669a:	42bd      	cmp	r5, r7
 800669c:	bf38      	it	cc
 800669e:	2304      	movcc	r3, #4
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	9b02      	ldr	r3, [sp, #8]
 80066a4:	9103      	str	r1, [sp, #12]
 80066a6:	428b      	cmp	r3, r1
 80066a8:	d80c      	bhi.n	80066c4 <__multiply+0x98>
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	dd03      	ble.n	80066b6 <__multiply+0x8a>
 80066ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d055      	beq.n	8006762 <__multiply+0x136>
 80066b6:	6106      	str	r6, [r0, #16]
 80066b8:	b005      	add	sp, #20
 80066ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	f843 2b04 	str.w	r2, [r3], #4
 80066c2:	e7d9      	b.n	8006678 <__multiply+0x4c>
 80066c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80066c8:	f1ba 0f00 	cmp.w	sl, #0
 80066cc:	d01f      	beq.n	800670e <__multiply+0xe2>
 80066ce:	46c4      	mov	ip, r8
 80066d0:	46a1      	mov	r9, r4
 80066d2:	2700      	movs	r7, #0
 80066d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066d8:	f8d9 3000 	ldr.w	r3, [r9]
 80066dc:	fa1f fb82 	uxth.w	fp, r2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	fb0a 330b 	mla	r3, sl, fp, r3
 80066e6:	443b      	add	r3, r7
 80066e8:	f8d9 7000 	ldr.w	r7, [r9]
 80066ec:	0c12      	lsrs	r2, r2, #16
 80066ee:	0c3f      	lsrs	r7, r7, #16
 80066f0:	fb0a 7202 	mla	r2, sl, r2, r7
 80066f4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066fe:	4565      	cmp	r5, ip
 8006700:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006704:	f849 3b04 	str.w	r3, [r9], #4
 8006708:	d8e4      	bhi.n	80066d4 <__multiply+0xa8>
 800670a:	9b01      	ldr	r3, [sp, #4]
 800670c:	50e7      	str	r7, [r4, r3]
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	3104      	adds	r1, #4
 8006712:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006716:	f1b9 0f00 	cmp.w	r9, #0
 800671a:	d020      	beq.n	800675e <__multiply+0x132>
 800671c:	4647      	mov	r7, r8
 800671e:	46a4      	mov	ip, r4
 8006720:	f04f 0a00 	mov.w	sl, #0
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	f8b7 b000 	ldrh.w	fp, [r7]
 800672a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800672e:	b29b      	uxth	r3, r3
 8006730:	fb09 220b 	mla	r2, r9, fp, r2
 8006734:	4452      	add	r2, sl
 8006736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800673a:	f84c 3b04 	str.w	r3, [ip], #4
 800673e:	f857 3b04 	ldr.w	r3, [r7], #4
 8006742:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006746:	f8bc 3000 	ldrh.w	r3, [ip]
 800674a:	42bd      	cmp	r5, r7
 800674c:	fb09 330a 	mla	r3, r9, sl, r3
 8006750:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006758:	d8e5      	bhi.n	8006726 <__multiply+0xfa>
 800675a:	9a01      	ldr	r2, [sp, #4]
 800675c:	50a3      	str	r3, [r4, r2]
 800675e:	3404      	adds	r4, #4
 8006760:	e79f      	b.n	80066a2 <__multiply+0x76>
 8006762:	3e01      	subs	r6, #1
 8006764:	e7a1      	b.n	80066aa <__multiply+0x7e>
 8006766:	bf00      	nop
 8006768:	0800968b 	.word	0x0800968b
 800676c:	0800969c 	.word	0x0800969c

08006770 <__pow5mult>:
 8006770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006774:	4615      	mov	r5, r2
 8006776:	f012 0203 	ands.w	r2, r2, #3
 800677a:	4607      	mov	r7, r0
 800677c:	460e      	mov	r6, r1
 800677e:	d007      	beq.n	8006790 <__pow5mult+0x20>
 8006780:	4c25      	ldr	r4, [pc, #148]	@ (8006818 <__pow5mult+0xa8>)
 8006782:	3a01      	subs	r2, #1
 8006784:	2300      	movs	r3, #0
 8006786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800678a:	f7ff fe5d 	bl	8006448 <__multadd>
 800678e:	4606      	mov	r6, r0
 8006790:	10ad      	asrs	r5, r5, #2
 8006792:	d03d      	beq.n	8006810 <__pow5mult+0xa0>
 8006794:	69fc      	ldr	r4, [r7, #28]
 8006796:	b97c      	cbnz	r4, 80067b8 <__pow5mult+0x48>
 8006798:	2010      	movs	r0, #16
 800679a:	f7ff fd3d 	bl	8006218 <malloc>
 800679e:	4602      	mov	r2, r0
 80067a0:	61f8      	str	r0, [r7, #28]
 80067a2:	b928      	cbnz	r0, 80067b0 <__pow5mult+0x40>
 80067a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067a8:	4b1c      	ldr	r3, [pc, #112]	@ (800681c <__pow5mult+0xac>)
 80067aa:	481d      	ldr	r0, [pc, #116]	@ (8006820 <__pow5mult+0xb0>)
 80067ac:	f001 fb56 	bl	8007e5c <__assert_func>
 80067b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067b4:	6004      	str	r4, [r0, #0]
 80067b6:	60c4      	str	r4, [r0, #12]
 80067b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067c0:	b94c      	cbnz	r4, 80067d6 <__pow5mult+0x66>
 80067c2:	f240 2171 	movw	r1, #625	@ 0x271
 80067c6:	4638      	mov	r0, r7
 80067c8:	f7ff ff1a 	bl	8006600 <__i2b>
 80067cc:	2300      	movs	r3, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80067d4:	6003      	str	r3, [r0, #0]
 80067d6:	f04f 0900 	mov.w	r9, #0
 80067da:	07eb      	lsls	r3, r5, #31
 80067dc:	d50a      	bpl.n	80067f4 <__pow5mult+0x84>
 80067de:	4631      	mov	r1, r6
 80067e0:	4622      	mov	r2, r4
 80067e2:	4638      	mov	r0, r7
 80067e4:	f7ff ff22 	bl	800662c <__multiply>
 80067e8:	4680      	mov	r8, r0
 80067ea:	4631      	mov	r1, r6
 80067ec:	4638      	mov	r0, r7
 80067ee:	f7ff fe09 	bl	8006404 <_Bfree>
 80067f2:	4646      	mov	r6, r8
 80067f4:	106d      	asrs	r5, r5, #1
 80067f6:	d00b      	beq.n	8006810 <__pow5mult+0xa0>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	b938      	cbnz	r0, 800680c <__pow5mult+0x9c>
 80067fc:	4622      	mov	r2, r4
 80067fe:	4621      	mov	r1, r4
 8006800:	4638      	mov	r0, r7
 8006802:	f7ff ff13 	bl	800662c <__multiply>
 8006806:	6020      	str	r0, [r4, #0]
 8006808:	f8c0 9000 	str.w	r9, [r0]
 800680c:	4604      	mov	r4, r0
 800680e:	e7e4      	b.n	80067da <__pow5mult+0x6a>
 8006810:	4630      	mov	r0, r6
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	bf00      	nop
 8006818:	080097ac 	.word	0x080097ac
 800681c:	0800961c 	.word	0x0800961c
 8006820:	0800969c 	.word	0x0800969c

08006824 <__lshift>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	460c      	mov	r4, r1
 800682a:	4607      	mov	r7, r0
 800682c:	4691      	mov	r9, r2
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	6849      	ldr	r1, [r1, #4]
 8006832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800683c:	f108 0601 	add.w	r6, r8, #1
 8006840:	42b3      	cmp	r3, r6
 8006842:	db0b      	blt.n	800685c <__lshift+0x38>
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff fd9d 	bl	8006384 <_Balloc>
 800684a:	4605      	mov	r5, r0
 800684c:	b948      	cbnz	r0, 8006862 <__lshift+0x3e>
 800684e:	4602      	mov	r2, r0
 8006850:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006854:	4b27      	ldr	r3, [pc, #156]	@ (80068f4 <__lshift+0xd0>)
 8006856:	4828      	ldr	r0, [pc, #160]	@ (80068f8 <__lshift+0xd4>)
 8006858:	f001 fb00 	bl	8007e5c <__assert_func>
 800685c:	3101      	adds	r1, #1
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	e7ee      	b.n	8006840 <__lshift+0x1c>
 8006862:	2300      	movs	r3, #0
 8006864:	f100 0114 	add.w	r1, r0, #20
 8006868:	f100 0210 	add.w	r2, r0, #16
 800686c:	4618      	mov	r0, r3
 800686e:	4553      	cmp	r3, sl
 8006870:	db33      	blt.n	80068da <__lshift+0xb6>
 8006872:	6920      	ldr	r0, [r4, #16]
 8006874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006878:	f104 0314 	add.w	r3, r4, #20
 800687c:	f019 091f 	ands.w	r9, r9, #31
 8006880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006888:	d02b      	beq.n	80068e2 <__lshift+0xbe>
 800688a:	468a      	mov	sl, r1
 800688c:	2200      	movs	r2, #0
 800688e:	f1c9 0e20 	rsb	lr, r9, #32
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	fa00 f009 	lsl.w	r0, r0, r9
 8006898:	4310      	orrs	r0, r2
 800689a:	f84a 0b04 	str.w	r0, [sl], #4
 800689e:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a2:	459c      	cmp	ip, r3
 80068a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068a8:	d8f3      	bhi.n	8006892 <__lshift+0x6e>
 80068aa:	ebac 0304 	sub.w	r3, ip, r4
 80068ae:	3b15      	subs	r3, #21
 80068b0:	f023 0303 	bic.w	r3, r3, #3
 80068b4:	3304      	adds	r3, #4
 80068b6:	f104 0015 	add.w	r0, r4, #21
 80068ba:	4560      	cmp	r0, ip
 80068bc:	bf88      	it	hi
 80068be:	2304      	movhi	r3, #4
 80068c0:	50ca      	str	r2, [r1, r3]
 80068c2:	b10a      	cbz	r2, 80068c8 <__lshift+0xa4>
 80068c4:	f108 0602 	add.w	r6, r8, #2
 80068c8:	3e01      	subs	r6, #1
 80068ca:	4638      	mov	r0, r7
 80068cc:	4621      	mov	r1, r4
 80068ce:	612e      	str	r6, [r5, #16]
 80068d0:	f7ff fd98 	bl	8006404 <_Bfree>
 80068d4:	4628      	mov	r0, r5
 80068d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068da:	f842 0f04 	str.w	r0, [r2, #4]!
 80068de:	3301      	adds	r3, #1
 80068e0:	e7c5      	b.n	800686e <__lshift+0x4a>
 80068e2:	3904      	subs	r1, #4
 80068e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e8:	459c      	cmp	ip, r3
 80068ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80068ee:	d8f9      	bhi.n	80068e4 <__lshift+0xc0>
 80068f0:	e7ea      	b.n	80068c8 <__lshift+0xa4>
 80068f2:	bf00      	nop
 80068f4:	0800968b 	.word	0x0800968b
 80068f8:	0800969c 	.word	0x0800969c

080068fc <__mcmp>:
 80068fc:	4603      	mov	r3, r0
 80068fe:	690a      	ldr	r2, [r1, #16]
 8006900:	6900      	ldr	r0, [r0, #16]
 8006902:	b530      	push	{r4, r5, lr}
 8006904:	1a80      	subs	r0, r0, r2
 8006906:	d10e      	bne.n	8006926 <__mcmp+0x2a>
 8006908:	3314      	adds	r3, #20
 800690a:	3114      	adds	r1, #20
 800690c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006910:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800691c:	4295      	cmp	r5, r2
 800691e:	d003      	beq.n	8006928 <__mcmp+0x2c>
 8006920:	d205      	bcs.n	800692e <__mcmp+0x32>
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	bd30      	pop	{r4, r5, pc}
 8006928:	42a3      	cmp	r3, r4
 800692a:	d3f3      	bcc.n	8006914 <__mcmp+0x18>
 800692c:	e7fb      	b.n	8006926 <__mcmp+0x2a>
 800692e:	2001      	movs	r0, #1
 8006930:	e7f9      	b.n	8006926 <__mcmp+0x2a>
	...

08006934 <__mdiff>:
 8006934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	4689      	mov	r9, r1
 800693a:	4606      	mov	r6, r0
 800693c:	4611      	mov	r1, r2
 800693e:	4648      	mov	r0, r9
 8006940:	4614      	mov	r4, r2
 8006942:	f7ff ffdb 	bl	80068fc <__mcmp>
 8006946:	1e05      	subs	r5, r0, #0
 8006948:	d112      	bne.n	8006970 <__mdiff+0x3c>
 800694a:	4629      	mov	r1, r5
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff fd19 	bl	8006384 <_Balloc>
 8006952:	4602      	mov	r2, r0
 8006954:	b928      	cbnz	r0, 8006962 <__mdiff+0x2e>
 8006956:	f240 2137 	movw	r1, #567	@ 0x237
 800695a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <__mdiff+0x120>)
 800695c:	483e      	ldr	r0, [pc, #248]	@ (8006a58 <__mdiff+0x124>)
 800695e:	f001 fa7d 	bl	8007e5c <__assert_func>
 8006962:	2301      	movs	r3, #1
 8006964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006968:	4610      	mov	r0, r2
 800696a:	b003      	add	sp, #12
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006970:	bfbc      	itt	lt
 8006972:	464b      	movlt	r3, r9
 8006974:	46a1      	movlt	r9, r4
 8006976:	4630      	mov	r0, r6
 8006978:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800697c:	bfba      	itte	lt
 800697e:	461c      	movlt	r4, r3
 8006980:	2501      	movlt	r5, #1
 8006982:	2500      	movge	r5, #0
 8006984:	f7ff fcfe 	bl	8006384 <_Balloc>
 8006988:	4602      	mov	r2, r0
 800698a:	b918      	cbnz	r0, 8006994 <__mdiff+0x60>
 800698c:	f240 2145 	movw	r1, #581	@ 0x245
 8006990:	4b30      	ldr	r3, [pc, #192]	@ (8006a54 <__mdiff+0x120>)
 8006992:	e7e3      	b.n	800695c <__mdiff+0x28>
 8006994:	f100 0b14 	add.w	fp, r0, #20
 8006998:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800699c:	f109 0310 	add.w	r3, r9, #16
 80069a0:	60c5      	str	r5, [r0, #12]
 80069a2:	f04f 0c00 	mov.w	ip, #0
 80069a6:	f109 0514 	add.w	r5, r9, #20
 80069aa:	46d9      	mov	r9, fp
 80069ac:	6926      	ldr	r6, [r4, #16]
 80069ae:	f104 0e14 	add.w	lr, r4, #20
 80069b2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069b6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	9b01      	ldr	r3, [sp, #4]
 80069be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069c6:	b281      	uxth	r1, r0
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	fa1f f38a 	uxth.w	r3, sl
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	0c00      	lsrs	r0, r0, #16
 80069d2:	4463      	add	r3, ip
 80069d4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069d8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069e2:	4576      	cmp	r6, lr
 80069e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069e8:	f849 3b04 	str.w	r3, [r9], #4
 80069ec:	d8e6      	bhi.n	80069bc <__mdiff+0x88>
 80069ee:	1b33      	subs	r3, r6, r4
 80069f0:	3b15      	subs	r3, #21
 80069f2:	f023 0303 	bic.w	r3, r3, #3
 80069f6:	3415      	adds	r4, #21
 80069f8:	3304      	adds	r3, #4
 80069fa:	42a6      	cmp	r6, r4
 80069fc:	bf38      	it	cc
 80069fe:	2304      	movcc	r3, #4
 8006a00:	441d      	add	r5, r3
 8006a02:	445b      	add	r3, fp
 8006a04:	461e      	mov	r6, r3
 8006a06:	462c      	mov	r4, r5
 8006a08:	4544      	cmp	r4, r8
 8006a0a:	d30e      	bcc.n	8006a2a <__mdiff+0xf6>
 8006a0c:	f108 0103 	add.w	r1, r8, #3
 8006a10:	1b49      	subs	r1, r1, r5
 8006a12:	f021 0103 	bic.w	r1, r1, #3
 8006a16:	3d03      	subs	r5, #3
 8006a18:	45a8      	cmp	r8, r5
 8006a1a:	bf38      	it	cc
 8006a1c:	2100      	movcc	r1, #0
 8006a1e:	440b      	add	r3, r1
 8006a20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a24:	b199      	cbz	r1, 8006a4e <__mdiff+0x11a>
 8006a26:	6117      	str	r7, [r2, #16]
 8006a28:	e79e      	b.n	8006968 <__mdiff+0x34>
 8006a2a:	46e6      	mov	lr, ip
 8006a2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a30:	fa1f fc81 	uxth.w	ip, r1
 8006a34:	44f4      	add	ip, lr
 8006a36:	0c08      	lsrs	r0, r1, #16
 8006a38:	4471      	add	r1, lr
 8006a3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a3e:	b289      	uxth	r1, r1
 8006a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a48:	f846 1b04 	str.w	r1, [r6], #4
 8006a4c:	e7dc      	b.n	8006a08 <__mdiff+0xd4>
 8006a4e:	3f01      	subs	r7, #1
 8006a50:	e7e6      	b.n	8006a20 <__mdiff+0xec>
 8006a52:	bf00      	nop
 8006a54:	0800968b 	.word	0x0800968b
 8006a58:	0800969c 	.word	0x0800969c

08006a5c <__ulp>:
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a98 <__ulp+0x3c>)
 8006a5e:	400b      	ands	r3, r1
 8006a60:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dc08      	bgt.n	8006a7a <__ulp+0x1e>
 8006a68:	425b      	negs	r3, r3
 8006a6a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006a6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006a72:	da04      	bge.n	8006a7e <__ulp+0x22>
 8006a74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006a78:	4113      	asrs	r3, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	e008      	b.n	8006a90 <__ulp+0x34>
 8006a7e:	f1a2 0314 	sub.w	r3, r2, #20
 8006a82:	2b1e      	cmp	r3, #30
 8006a84:	bfd6      	itet	le
 8006a86:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006a8a:	2201      	movgt	r2, #1
 8006a8c:	40da      	lsrle	r2, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	7ff00000 	.word	0x7ff00000

08006a9c <__b2d>:
 8006a9c:	6902      	ldr	r2, [r0, #16]
 8006a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa0:	f100 0614 	add.w	r6, r0, #20
 8006aa4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006aa8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006aac:	4f1e      	ldr	r7, [pc, #120]	@ (8006b28 <__b2d+0x8c>)
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7ff fd5a 	bl	8006568 <__hi0bits>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f1c0 0020 	rsb	r0, r0, #32
 8006aba:	2b0a      	cmp	r3, #10
 8006abc:	f1a2 0504 	sub.w	r5, r2, #4
 8006ac0:	6008      	str	r0, [r1, #0]
 8006ac2:	dc12      	bgt.n	8006aea <__b2d+0x4e>
 8006ac4:	42ae      	cmp	r6, r5
 8006ac6:	bf2c      	ite	cs
 8006ac8:	2200      	movcs	r2, #0
 8006aca:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006ace:	f1c3 0c0b 	rsb	ip, r3, #11
 8006ad2:	3315      	adds	r3, #21
 8006ad4:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006ad8:	fa04 f303 	lsl.w	r3, r4, r3
 8006adc:	fa22 f20c 	lsr.w	r2, r2, ip
 8006ae0:	ea4e 0107 	orr.w	r1, lr, r7
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aea:	42ae      	cmp	r6, r5
 8006aec:	bf36      	itet	cc
 8006aee:	f1a2 0508 	subcc.w	r5, r2, #8
 8006af2:	2200      	movcs	r2, #0
 8006af4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006af8:	3b0b      	subs	r3, #11
 8006afa:	d012      	beq.n	8006b22 <__b2d+0x86>
 8006afc:	f1c3 0720 	rsb	r7, r3, #32
 8006b00:	fa22 f107 	lsr.w	r1, r2, r7
 8006b04:	409c      	lsls	r4, r3
 8006b06:	430c      	orrs	r4, r1
 8006b08:	42b5      	cmp	r5, r6
 8006b0a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006b0e:	bf94      	ite	ls
 8006b10:	2400      	movls	r4, #0
 8006b12:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006b16:	409a      	lsls	r2, r3
 8006b18:	40fc      	lsrs	r4, r7
 8006b1a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006b1e:	4322      	orrs	r2, r4
 8006b20:	e7e1      	b.n	8006ae6 <__b2d+0x4a>
 8006b22:	ea44 0107 	orr.w	r1, r4, r7
 8006b26:	e7de      	b.n	8006ae6 <__b2d+0x4a>
 8006b28:	3ff00000 	.word	0x3ff00000

08006b2c <__d2b>:
 8006b2c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b30:	2101      	movs	r1, #1
 8006b32:	4690      	mov	r8, r2
 8006b34:	4699      	mov	r9, r3
 8006b36:	9e08      	ldr	r6, [sp, #32]
 8006b38:	f7ff fc24 	bl	8006384 <_Balloc>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	b930      	cbnz	r0, 8006b4e <__d2b+0x22>
 8006b40:	4602      	mov	r2, r0
 8006b42:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b46:	4b23      	ldr	r3, [pc, #140]	@ (8006bd4 <__d2b+0xa8>)
 8006b48:	4823      	ldr	r0, [pc, #140]	@ (8006bd8 <__d2b+0xac>)
 8006b4a:	f001 f987 	bl	8007e5c <__assert_func>
 8006b4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b56:	b10d      	cbz	r5, 8006b5c <__d2b+0x30>
 8006b58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	f1b8 0300 	subs.w	r3, r8, #0
 8006b62:	d024      	beq.n	8006bae <__d2b+0x82>
 8006b64:	4668      	mov	r0, sp
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	f7ff fd1d 	bl	80065a6 <__lo0bits>
 8006b6c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b70:	b1d8      	cbz	r0, 8006baa <__d2b+0x7e>
 8006b72:	f1c0 0320 	rsb	r3, r0, #32
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	40c2      	lsrs	r2, r0
 8006b7e:	6163      	str	r3, [r4, #20]
 8006b80:	9201      	str	r2, [sp, #4]
 8006b82:	9b01      	ldr	r3, [sp, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bf0c      	ite	eq
 8006b88:	2201      	moveq	r2, #1
 8006b8a:	2202      	movne	r2, #2
 8006b8c:	61a3      	str	r3, [r4, #24]
 8006b8e:	6122      	str	r2, [r4, #16]
 8006b90:	b1ad      	cbz	r5, 8006bbe <__d2b+0x92>
 8006b92:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b96:	4405      	add	r5, r0
 8006b98:	6035      	str	r5, [r6, #0]
 8006b9a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba0:	6018      	str	r0, [r3, #0]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	b002      	add	sp, #8
 8006ba6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006baa:	6161      	str	r1, [r4, #20]
 8006bac:	e7e9      	b.n	8006b82 <__d2b+0x56>
 8006bae:	a801      	add	r0, sp, #4
 8006bb0:	f7ff fcf9 	bl	80065a6 <__lo0bits>
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	6163      	str	r3, [r4, #20]
 8006bba:	3020      	adds	r0, #32
 8006bbc:	e7e7      	b.n	8006b8e <__d2b+0x62>
 8006bbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bc6:	6030      	str	r0, [r6, #0]
 8006bc8:	6918      	ldr	r0, [r3, #16]
 8006bca:	f7ff fccd 	bl	8006568 <__hi0bits>
 8006bce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bd2:	e7e4      	b.n	8006b9e <__d2b+0x72>
 8006bd4:	0800968b 	.word	0x0800968b
 8006bd8:	0800969c 	.word	0x0800969c

08006bdc <__ratio>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	b085      	sub	sp, #20
 8006be2:	e9cd 1000 	strd	r1, r0, [sp]
 8006be6:	a902      	add	r1, sp, #8
 8006be8:	f7ff ff58 	bl	8006a9c <__b2d>
 8006bec:	468b      	mov	fp, r1
 8006bee:	4606      	mov	r6, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	9800      	ldr	r0, [sp, #0]
 8006bf4:	a903      	add	r1, sp, #12
 8006bf6:	f7ff ff51 	bl	8006a9c <__b2d>
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	4689      	mov	r9, r1
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	4604      	mov	r4, r0
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	4630      	mov	r0, r6
 8006c0a:	1ac9      	subs	r1, r1, r3
 8006c0c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bfcd      	iteet	gt
 8006c1a:	463a      	movgt	r2, r7
 8006c1c:	462a      	movle	r2, r5
 8006c1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c22:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006c26:	bfd8      	it	le
 8006c28:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4659      	mov	r1, fp
 8006c32:	f7f9 fd7b 	bl	800072c <__aeabi_ddiv>
 8006c36:	b005      	add	sp, #20
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c3c <__copybits>:
 8006c3c:	3901      	subs	r1, #1
 8006c3e:	b570      	push	{r4, r5, r6, lr}
 8006c40:	1149      	asrs	r1, r1, #5
 8006c42:	6914      	ldr	r4, [r2, #16]
 8006c44:	3101      	adds	r1, #1
 8006c46:	f102 0314 	add.w	r3, r2, #20
 8006c4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c52:	1f05      	subs	r5, r0, #4
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d30c      	bcc.n	8006c72 <__copybits+0x36>
 8006c58:	1aa3      	subs	r3, r4, r2
 8006c5a:	3b11      	subs	r3, #17
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	3211      	adds	r2, #17
 8006c62:	42a2      	cmp	r2, r4
 8006c64:	bf88      	it	hi
 8006c66:	2300      	movhi	r3, #0
 8006c68:	4418      	add	r0, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4288      	cmp	r0, r1
 8006c6e:	d305      	bcc.n	8006c7c <__copybits+0x40>
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
 8006c72:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c76:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c7a:	e7eb      	b.n	8006c54 <__copybits+0x18>
 8006c7c:	f840 3b04 	str.w	r3, [r0], #4
 8006c80:	e7f4      	b.n	8006c6c <__copybits+0x30>

08006c82 <__any_on>:
 8006c82:	f100 0214 	add.w	r2, r0, #20
 8006c86:	6900      	ldr	r0, [r0, #16]
 8006c88:	114b      	asrs	r3, r1, #5
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	db11      	blt.n	8006cb4 <__any_on+0x32>
 8006c90:	dd0a      	ble.n	8006ca8 <__any_on+0x26>
 8006c92:	f011 011f 	ands.w	r1, r1, #31
 8006c96:	d007      	beq.n	8006ca8 <__any_on+0x26>
 8006c98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c9c:	fa24 f001 	lsr.w	r0, r4, r1
 8006ca0:	fa00 f101 	lsl.w	r1, r0, r1
 8006ca4:	428c      	cmp	r4, r1
 8006ca6:	d10b      	bne.n	8006cc0 <__any_on+0x3e>
 8006ca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d803      	bhi.n	8006cb8 <__any_on+0x36>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	bd10      	pop	{r4, pc}
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	e7f7      	b.n	8006ca8 <__any_on+0x26>
 8006cb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d0f5      	beq.n	8006cac <__any_on+0x2a>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7f6      	b.n	8006cb2 <__any_on+0x30>

08006cc4 <sulp>:
 8006cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc8:	460f      	mov	r7, r1
 8006cca:	4690      	mov	r8, r2
 8006ccc:	f7ff fec6 	bl	8006a5c <__ulp>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	f1b8 0f00 	cmp.w	r8, #0
 8006cd8:	d011      	beq.n	8006cfe <sulp+0x3a>
 8006cda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006cde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd0b      	ble.n	8006cfe <sulp+0x3a>
 8006ce6:	2400      	movs	r4, #0
 8006ce8:	051b      	lsls	r3, r3, #20
 8006cea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006cee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fbef 	bl	80004d8 <__aeabi_dmul>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d08 <_strtod_l>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	b09f      	sub	sp, #124	@ 0x7c
 8006d0e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d10:	2200      	movs	r2, #0
 8006d12:	460c      	mov	r4, r1
 8006d14:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d16:	f04f 0a00 	mov.w	sl, #0
 8006d1a:	f04f 0b00 	mov.w	fp, #0
 8006d1e:	460a      	mov	r2, r1
 8006d20:	9005      	str	r0, [sp, #20]
 8006d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d24:	7811      	ldrb	r1, [r2, #0]
 8006d26:	292b      	cmp	r1, #43	@ 0x2b
 8006d28:	d048      	beq.n	8006dbc <_strtod_l+0xb4>
 8006d2a:	d836      	bhi.n	8006d9a <_strtod_l+0x92>
 8006d2c:	290d      	cmp	r1, #13
 8006d2e:	d830      	bhi.n	8006d92 <_strtod_l+0x8a>
 8006d30:	2908      	cmp	r1, #8
 8006d32:	d830      	bhi.n	8006d96 <_strtod_l+0x8e>
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d039      	beq.n	8006dac <_strtod_l+0xa4>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d3e:	782a      	ldrb	r2, [r5, #0]
 8006d40:	2a30      	cmp	r2, #48	@ 0x30
 8006d42:	f040 80b0 	bne.w	8006ea6 <_strtod_l+0x19e>
 8006d46:	786a      	ldrb	r2, [r5, #1]
 8006d48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d4c:	2a58      	cmp	r2, #88	@ 0x58
 8006d4e:	d16c      	bne.n	8006e2a <_strtod_l+0x122>
 8006d50:	9302      	str	r3, [sp, #8]
 8006d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d54:	4a8f      	ldr	r2, [pc, #572]	@ (8006f94 <_strtod_l+0x28c>)
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	9805      	ldr	r0, [sp, #20]
 8006d5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d60:	a919      	add	r1, sp, #100	@ 0x64
 8006d62:	f001 f915 	bl	8007f90 <__gethex>
 8006d66:	f010 060f 	ands.w	r6, r0, #15
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	d005      	beq.n	8006d7a <_strtod_l+0x72>
 8006d6e:	2e06      	cmp	r6, #6
 8006d70:	d126      	bne.n	8006dc0 <_strtod_l+0xb8>
 8006d72:	2300      	movs	r3, #0
 8006d74:	3501      	adds	r5, #1
 8006d76:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d78:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8582 	bne.w	8007886 <_strtod_l+0xb7e>
 8006d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d84:	b1bb      	cbz	r3, 8006db6 <_strtod_l+0xae>
 8006d86:	4650      	mov	r0, sl
 8006d88:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006d8c:	b01f      	add	sp, #124	@ 0x7c
 8006d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d92:	2920      	cmp	r1, #32
 8006d94:	d1d0      	bne.n	8006d38 <_strtod_l+0x30>
 8006d96:	3201      	adds	r2, #1
 8006d98:	e7c3      	b.n	8006d22 <_strtod_l+0x1a>
 8006d9a:	292d      	cmp	r1, #45	@ 0x2d
 8006d9c:	d1cc      	bne.n	8006d38 <_strtod_l+0x30>
 8006d9e:	2101      	movs	r1, #1
 8006da0:	910e      	str	r1, [sp, #56]	@ 0x38
 8006da2:	1c51      	adds	r1, r2, #1
 8006da4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006da6:	7852      	ldrb	r2, [r2, #1]
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	d1c7      	bne.n	8006d3c <_strtod_l+0x34>
 8006dac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dae:	9419      	str	r4, [sp, #100]	@ 0x64
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 8566 	bne.w	8007882 <_strtod_l+0xb7a>
 8006db6:	4650      	mov	r0, sl
 8006db8:	4659      	mov	r1, fp
 8006dba:	e7e7      	b.n	8006d8c <_strtod_l+0x84>
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	e7ef      	b.n	8006da0 <_strtod_l+0x98>
 8006dc0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dc2:	b13a      	cbz	r2, 8006dd4 <_strtod_l+0xcc>
 8006dc4:	2135      	movs	r1, #53	@ 0x35
 8006dc6:	a81c      	add	r0, sp, #112	@ 0x70
 8006dc8:	f7ff ff38 	bl	8006c3c <__copybits>
 8006dcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dce:	9805      	ldr	r0, [sp, #20]
 8006dd0:	f7ff fb18 	bl	8006404 <_Bfree>
 8006dd4:	3e01      	subs	r6, #1
 8006dd6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006dd8:	2e04      	cmp	r6, #4
 8006dda:	d806      	bhi.n	8006dea <_strtod_l+0xe2>
 8006ddc:	e8df f006 	tbb	[pc, r6]
 8006de0:	201d0314 	.word	0x201d0314
 8006de4:	14          	.byte	0x14
 8006de5:	00          	.byte	0x00
 8006de6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006dea:	05e1      	lsls	r1, r4, #23
 8006dec:	bf48      	it	mi
 8006dee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006df2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006df6:	0d1b      	lsrs	r3, r3, #20
 8006df8:	051b      	lsls	r3, r3, #20
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1bd      	bne.n	8006d7a <_strtod_l+0x72>
 8006dfe:	f7fe fb27 	bl	8005450 <__errno>
 8006e02:	2322      	movs	r3, #34	@ 0x22
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	e7b8      	b.n	8006d7a <_strtod_l+0x72>
 8006e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e14:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e18:	e7e7      	b.n	8006dea <_strtod_l+0xe2>
 8006e1a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f98 <_strtod_l+0x290>
 8006e1e:	e7e4      	b.n	8006dea <_strtod_l+0xe2>
 8006e20:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e24:	f04f 3aff 	mov.w	sl, #4294967295
 8006e28:	e7df      	b.n	8006dea <_strtod_l+0xe2>
 8006e2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b30      	cmp	r3, #48	@ 0x30
 8006e34:	d0f9      	beq.n	8006e2a <_strtod_l+0x122>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d09f      	beq.n	8006d7a <_strtod_l+0x72>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	2700      	movs	r7, #0
 8006e3e:	220a      	movs	r2, #10
 8006e40:	46b9      	mov	r9, r7
 8006e42:	9308      	str	r3, [sp, #32]
 8006e44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e46:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e48:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e4a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e4c:	7805      	ldrb	r5, [r0, #0]
 8006e4e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e52:	b2d9      	uxtb	r1, r3
 8006e54:	2909      	cmp	r1, #9
 8006e56:	d928      	bls.n	8006eaa <_strtod_l+0x1a2>
 8006e58:	2201      	movs	r2, #1
 8006e5a:	4950      	ldr	r1, [pc, #320]	@ (8006f9c <_strtod_l+0x294>)
 8006e5c:	f000 ffc8 	bl	8007df0 <strncmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d032      	beq.n	8006eca <_strtod_l+0x1c2>
 8006e64:	2000      	movs	r0, #0
 8006e66:	462a      	mov	r2, r5
 8006e68:	4603      	mov	r3, r0
 8006e6a:	464d      	mov	r5, r9
 8006e6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e6e:	2a65      	cmp	r2, #101	@ 0x65
 8006e70:	d001      	beq.n	8006e76 <_strtod_l+0x16e>
 8006e72:	2a45      	cmp	r2, #69	@ 0x45
 8006e74:	d114      	bne.n	8006ea0 <_strtod_l+0x198>
 8006e76:	b91d      	cbnz	r5, 8006e80 <_strtod_l+0x178>
 8006e78:	9a08      	ldr	r2, [sp, #32]
 8006e7a:	4302      	orrs	r2, r0
 8006e7c:	d096      	beq.n	8006dac <_strtod_l+0xa4>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e82:	1c62      	adds	r2, r4, #1
 8006e84:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e86:	7862      	ldrb	r2, [r4, #1]
 8006e88:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e8a:	d07a      	beq.n	8006f82 <_strtod_l+0x27a>
 8006e8c:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e8e:	d07e      	beq.n	8006f8e <_strtod_l+0x286>
 8006e90:	f04f 0c00 	mov.w	ip, #0
 8006e94:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e98:	2909      	cmp	r1, #9
 8006e9a:	f240 8085 	bls.w	8006fa8 <_strtod_l+0x2a0>
 8006e9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ea0:	f04f 0800 	mov.w	r8, #0
 8006ea4:	e0a5      	b.n	8006ff2 <_strtod_l+0x2ea>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e7c8      	b.n	8006e3c <_strtod_l+0x134>
 8006eaa:	f1b9 0f08 	cmp.w	r9, #8
 8006eae:	bfd8      	it	le
 8006eb0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006eb2:	f100 0001 	add.w	r0, r0, #1
 8006eb6:	bfd6      	itet	le
 8006eb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ebc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ec0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006ec2:	f109 0901 	add.w	r9, r9, #1
 8006ec6:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ec8:	e7bf      	b.n	8006e4a <_strtod_l+0x142>
 8006eca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ed0:	785a      	ldrb	r2, [r3, #1]
 8006ed2:	f1b9 0f00 	cmp.w	r9, #0
 8006ed6:	d03b      	beq.n	8006f50 <_strtod_l+0x248>
 8006ed8:	464d      	mov	r5, r9
 8006eda:	900a      	str	r0, [sp, #40]	@ 0x28
 8006edc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006ee0:	2b09      	cmp	r3, #9
 8006ee2:	d912      	bls.n	8006f0a <_strtod_l+0x202>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e7c2      	b.n	8006e6e <_strtod_l+0x166>
 8006ee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eea:	3001      	adds	r0, #1
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ef0:	785a      	ldrb	r2, [r3, #1]
 8006ef2:	2a30      	cmp	r2, #48	@ 0x30
 8006ef4:	d0f8      	beq.n	8006ee8 <_strtod_l+0x1e0>
 8006ef6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	f200 84c8 	bhi.w	8007890 <_strtod_l+0xb88>
 8006f00:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f02:	2000      	movs	r0, #0
 8006f04:	4605      	mov	r5, r0
 8006f06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f08:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f0a:	3a30      	subs	r2, #48	@ 0x30
 8006f0c:	f100 0301 	add.w	r3, r0, #1
 8006f10:	d018      	beq.n	8006f44 <_strtod_l+0x23c>
 8006f12:	462e      	mov	r6, r5
 8006f14:	f04f 0e0a 	mov.w	lr, #10
 8006f18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f1a:	4419      	add	r1, r3
 8006f1c:	910a      	str	r1, [sp, #40]	@ 0x28
 8006f1e:	1c71      	adds	r1, r6, #1
 8006f20:	eba1 0c05 	sub.w	ip, r1, r5
 8006f24:	4563      	cmp	r3, ip
 8006f26:	dc15      	bgt.n	8006f54 <_strtod_l+0x24c>
 8006f28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006f2c:	182b      	adds	r3, r5, r0
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	f105 0501 	add.w	r5, r5, #1
 8006f34:	4405      	add	r5, r0
 8006f36:	dc1a      	bgt.n	8006f6e <_strtod_l+0x266>
 8006f38:	230a      	movs	r3, #10
 8006f3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f3c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f42:	2300      	movs	r3, #0
 8006f44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f46:	4618      	mov	r0, r3
 8006f48:	1c51      	adds	r1, r2, #1
 8006f4a:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f4c:	7852      	ldrb	r2, [r2, #1]
 8006f4e:	e7c5      	b.n	8006edc <_strtod_l+0x1d4>
 8006f50:	4648      	mov	r0, r9
 8006f52:	e7ce      	b.n	8006ef2 <_strtod_l+0x1ea>
 8006f54:	2e08      	cmp	r6, #8
 8006f56:	dc05      	bgt.n	8006f64 <_strtod_l+0x25c>
 8006f58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f5a:	fb0e f606 	mul.w	r6, lr, r6
 8006f5e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006f60:	460e      	mov	r6, r1
 8006f62:	e7dc      	b.n	8006f1e <_strtod_l+0x216>
 8006f64:	2910      	cmp	r1, #16
 8006f66:	bfd8      	it	le
 8006f68:	fb0e f707 	mulle.w	r7, lr, r7
 8006f6c:	e7f8      	b.n	8006f60 <_strtod_l+0x258>
 8006f6e:	2b0f      	cmp	r3, #15
 8006f70:	bfdc      	itt	le
 8006f72:	230a      	movle	r3, #10
 8006f74:	fb03 2707 	mlale	r7, r3, r7, r2
 8006f78:	e7e3      	b.n	8006f42 <_strtod_l+0x23a>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e77a      	b.n	8006e78 <_strtod_l+0x170>
 8006f82:	f04f 0c00 	mov.w	ip, #0
 8006f86:	1ca2      	adds	r2, r4, #2
 8006f88:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f8a:	78a2      	ldrb	r2, [r4, #2]
 8006f8c:	e782      	b.n	8006e94 <_strtod_l+0x18c>
 8006f8e:	f04f 0c01 	mov.w	ip, #1
 8006f92:	e7f8      	b.n	8006f86 <_strtod_l+0x27e>
 8006f94:	080098bc 	.word	0x080098bc
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	080096f5 	.word	0x080096f5
 8006fa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fa2:	1c51      	adds	r1, r2, #1
 8006fa4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fa6:	7852      	ldrb	r2, [r2, #1]
 8006fa8:	2a30      	cmp	r2, #48	@ 0x30
 8006faa:	d0f9      	beq.n	8006fa0 <_strtod_l+0x298>
 8006fac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fb0:	2908      	cmp	r1, #8
 8006fb2:	f63f af75 	bhi.w	8006ea0 <_strtod_l+0x198>
 8006fb6:	f04f 080a 	mov.w	r8, #10
 8006fba:	3a30      	subs	r2, #48	@ 0x30
 8006fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fc0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fc4:	1c56      	adds	r6, r2, #1
 8006fc6:	9619      	str	r6, [sp, #100]	@ 0x64
 8006fc8:	7852      	ldrb	r2, [r2, #1]
 8006fca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006fce:	f1be 0f09 	cmp.w	lr, #9
 8006fd2:	d939      	bls.n	8007048 <_strtod_l+0x340>
 8006fd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fd6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fda:	1a76      	subs	r6, r6, r1
 8006fdc:	2e08      	cmp	r6, #8
 8006fde:	dc03      	bgt.n	8006fe8 <_strtod_l+0x2e0>
 8006fe0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fe2:	4588      	cmp	r8, r1
 8006fe4:	bfa8      	it	ge
 8006fe6:	4688      	movge	r8, r1
 8006fe8:	f1bc 0f00 	cmp.w	ip, #0
 8006fec:	d001      	beq.n	8006ff2 <_strtod_l+0x2ea>
 8006fee:	f1c8 0800 	rsb	r8, r8, #0
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	d14e      	bne.n	8007094 <_strtod_l+0x38c>
 8006ff6:	9908      	ldr	r1, [sp, #32]
 8006ff8:	4308      	orrs	r0, r1
 8006ffa:	f47f aebe 	bne.w	8006d7a <_strtod_l+0x72>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f47f aed4 	bne.w	8006dac <_strtod_l+0xa4>
 8007004:	2a69      	cmp	r2, #105	@ 0x69
 8007006:	d028      	beq.n	800705a <_strtod_l+0x352>
 8007008:	dc25      	bgt.n	8007056 <_strtod_l+0x34e>
 800700a:	2a49      	cmp	r2, #73	@ 0x49
 800700c:	d025      	beq.n	800705a <_strtod_l+0x352>
 800700e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007010:	f47f aecc 	bne.w	8006dac <_strtod_l+0xa4>
 8007014:	4999      	ldr	r1, [pc, #612]	@ (800727c <_strtod_l+0x574>)
 8007016:	a819      	add	r0, sp, #100	@ 0x64
 8007018:	f001 f9dc 	bl	80083d4 <__match>
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f aec5 	beq.w	8006dac <_strtod_l+0xa4>
 8007022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b28      	cmp	r3, #40	@ 0x28
 8007028:	d12e      	bne.n	8007088 <_strtod_l+0x380>
 800702a:	4995      	ldr	r1, [pc, #596]	@ (8007280 <_strtod_l+0x578>)
 800702c:	aa1c      	add	r2, sp, #112	@ 0x70
 800702e:	a819      	add	r0, sp, #100	@ 0x64
 8007030:	f001 f9e4 	bl	80083fc <__hexnan>
 8007034:	2805      	cmp	r0, #5
 8007036:	d127      	bne.n	8007088 <_strtod_l+0x380>
 8007038:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800703a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800703e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007042:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007046:	e698      	b.n	8006d7a <_strtod_l+0x72>
 8007048:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800704a:	fb08 2101 	mla	r1, r8, r1, r2
 800704e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007052:	9209      	str	r2, [sp, #36]	@ 0x24
 8007054:	e7b5      	b.n	8006fc2 <_strtod_l+0x2ba>
 8007056:	2a6e      	cmp	r2, #110	@ 0x6e
 8007058:	e7da      	b.n	8007010 <_strtod_l+0x308>
 800705a:	498a      	ldr	r1, [pc, #552]	@ (8007284 <_strtod_l+0x57c>)
 800705c:	a819      	add	r0, sp, #100	@ 0x64
 800705e:	f001 f9b9 	bl	80083d4 <__match>
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f aea2 	beq.w	8006dac <_strtod_l+0xa4>
 8007068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800706a:	4987      	ldr	r1, [pc, #540]	@ (8007288 <_strtod_l+0x580>)
 800706c:	3b01      	subs	r3, #1
 800706e:	a819      	add	r0, sp, #100	@ 0x64
 8007070:	9319      	str	r3, [sp, #100]	@ 0x64
 8007072:	f001 f9af 	bl	80083d4 <__match>
 8007076:	b910      	cbnz	r0, 800707e <_strtod_l+0x376>
 8007078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800707a:	3301      	adds	r3, #1
 800707c:	9319      	str	r3, [sp, #100]	@ 0x64
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800728c <_strtod_l+0x584>
 8007086:	e678      	b.n	8006d7a <_strtod_l+0x72>
 8007088:	4881      	ldr	r0, [pc, #516]	@ (8007290 <_strtod_l+0x588>)
 800708a:	f000 fee1 	bl	8007e50 <nan>
 800708e:	4682      	mov	sl, r0
 8007090:	468b      	mov	fp, r1
 8007092:	e672      	b.n	8006d7a <_strtod_l+0x72>
 8007094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007096:	f1b9 0f00 	cmp.w	r9, #0
 800709a:	bf08      	it	eq
 800709c:	46a9      	moveq	r9, r5
 800709e:	eba8 0303 	sub.w	r3, r8, r3
 80070a2:	2d10      	cmp	r5, #16
 80070a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80070a6:	462c      	mov	r4, r5
 80070a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070aa:	bfa8      	it	ge
 80070ac:	2410      	movge	r4, #16
 80070ae:	f7f9 f999 	bl	80003e4 <__aeabi_ui2d>
 80070b2:	2d09      	cmp	r5, #9
 80070b4:	4682      	mov	sl, r0
 80070b6:	468b      	mov	fp, r1
 80070b8:	dc11      	bgt.n	80070de <_strtod_l+0x3d6>
 80070ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f43f ae5c 	beq.w	8006d7a <_strtod_l+0x72>
 80070c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c4:	dd76      	ble.n	80071b4 <_strtod_l+0x4ac>
 80070c6:	2b16      	cmp	r3, #22
 80070c8:	dc5d      	bgt.n	8007186 <_strtod_l+0x47e>
 80070ca:	4972      	ldr	r1, [pc, #456]	@ (8007294 <_strtod_l+0x58c>)
 80070cc:	4652      	mov	r2, sl
 80070ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070d2:	465b      	mov	r3, fp
 80070d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d8:	f7f9 f9fe 	bl	80004d8 <__aeabi_dmul>
 80070dc:	e7d7      	b.n	800708e <_strtod_l+0x386>
 80070de:	4b6d      	ldr	r3, [pc, #436]	@ (8007294 <_strtod_l+0x58c>)
 80070e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070e8:	f7f9 f9f6 	bl	80004d8 <__aeabi_dmul>
 80070ec:	4682      	mov	sl, r0
 80070ee:	4638      	mov	r0, r7
 80070f0:	468b      	mov	fp, r1
 80070f2:	f7f9 f977 	bl	80003e4 <__aeabi_ui2d>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4650      	mov	r0, sl
 80070fc:	4659      	mov	r1, fp
 80070fe:	f7f9 f835 	bl	800016c <__adddf3>
 8007102:	2d0f      	cmp	r5, #15
 8007104:	4682      	mov	sl, r0
 8007106:	468b      	mov	fp, r1
 8007108:	ddd7      	ble.n	80070ba <_strtod_l+0x3b2>
 800710a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710c:	1b2c      	subs	r4, r5, r4
 800710e:	441c      	add	r4, r3
 8007110:	2c00      	cmp	r4, #0
 8007112:	f340 8093 	ble.w	800723c <_strtod_l+0x534>
 8007116:	f014 030f 	ands.w	r3, r4, #15
 800711a:	d00a      	beq.n	8007132 <_strtod_l+0x42a>
 800711c:	495d      	ldr	r1, [pc, #372]	@ (8007294 <_strtod_l+0x58c>)
 800711e:	4652      	mov	r2, sl
 8007120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007128:	465b      	mov	r3, fp
 800712a:	f7f9 f9d5 	bl	80004d8 <__aeabi_dmul>
 800712e:	4682      	mov	sl, r0
 8007130:	468b      	mov	fp, r1
 8007132:	f034 040f 	bics.w	r4, r4, #15
 8007136:	d073      	beq.n	8007220 <_strtod_l+0x518>
 8007138:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800713c:	dd49      	ble.n	80071d2 <_strtod_l+0x4ca>
 800713e:	2400      	movs	r4, #0
 8007140:	46a0      	mov	r8, r4
 8007142:	46a1      	mov	r9, r4
 8007144:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007146:	2322      	movs	r3, #34	@ 0x22
 8007148:	f04f 0a00 	mov.w	sl, #0
 800714c:	9a05      	ldr	r2, [sp, #20]
 800714e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800728c <_strtod_l+0x584>
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	f43f ae0f 	beq.w	8006d7a <_strtod_l+0x72>
 800715c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800715e:	9805      	ldr	r0, [sp, #20]
 8007160:	f7ff f950 	bl	8006404 <_Bfree>
 8007164:	4649      	mov	r1, r9
 8007166:	9805      	ldr	r0, [sp, #20]
 8007168:	f7ff f94c 	bl	8006404 <_Bfree>
 800716c:	4641      	mov	r1, r8
 800716e:	9805      	ldr	r0, [sp, #20]
 8007170:	f7ff f948 	bl	8006404 <_Bfree>
 8007174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007176:	9805      	ldr	r0, [sp, #20]
 8007178:	f7ff f944 	bl	8006404 <_Bfree>
 800717c:	4621      	mov	r1, r4
 800717e:	9805      	ldr	r0, [sp, #20]
 8007180:	f7ff f940 	bl	8006404 <_Bfree>
 8007184:	e5f9      	b.n	8006d7a <_strtod_l+0x72>
 8007186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007188:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800718c:	4293      	cmp	r3, r2
 800718e:	dbbc      	blt.n	800710a <_strtod_l+0x402>
 8007190:	4c40      	ldr	r4, [pc, #256]	@ (8007294 <_strtod_l+0x58c>)
 8007192:	f1c5 050f 	rsb	r5, r5, #15
 8007196:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800719a:	4652      	mov	r2, sl
 800719c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a0:	465b      	mov	r3, fp
 80071a2:	f7f9 f999 	bl	80004d8 <__aeabi_dmul>
 80071a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a8:	1b5d      	subs	r5, r3, r5
 80071aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071b2:	e791      	b.n	80070d8 <_strtod_l+0x3d0>
 80071b4:	3316      	adds	r3, #22
 80071b6:	dba8      	blt.n	800710a <_strtod_l+0x402>
 80071b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ba:	4650      	mov	r0, sl
 80071bc:	eba3 0808 	sub.w	r8, r3, r8
 80071c0:	4b34      	ldr	r3, [pc, #208]	@ (8007294 <_strtod_l+0x58c>)
 80071c2:	4659      	mov	r1, fp
 80071c4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071c8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071cc:	f7f9 faae 	bl	800072c <__aeabi_ddiv>
 80071d0:	e75d      	b.n	800708e <_strtod_l+0x386>
 80071d2:	2300      	movs	r3, #0
 80071d4:	4650      	mov	r0, sl
 80071d6:	4659      	mov	r1, fp
 80071d8:	461e      	mov	r6, r3
 80071da:	4f2f      	ldr	r7, [pc, #188]	@ (8007298 <_strtod_l+0x590>)
 80071dc:	1124      	asrs	r4, r4, #4
 80071de:	2c01      	cmp	r4, #1
 80071e0:	dc21      	bgt.n	8007226 <_strtod_l+0x51e>
 80071e2:	b10b      	cbz	r3, 80071e8 <_strtod_l+0x4e0>
 80071e4:	4682      	mov	sl, r0
 80071e6:	468b      	mov	fp, r1
 80071e8:	492b      	ldr	r1, [pc, #172]	@ (8007298 <_strtod_l+0x590>)
 80071ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071f2:	4652      	mov	r2, sl
 80071f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f8:	465b      	mov	r3, fp
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	4b23      	ldr	r3, [pc, #140]	@ (800728c <_strtod_l+0x584>)
 8007200:	460a      	mov	r2, r1
 8007202:	400b      	ands	r3, r1
 8007204:	4925      	ldr	r1, [pc, #148]	@ (800729c <_strtod_l+0x594>)
 8007206:	4682      	mov	sl, r0
 8007208:	428b      	cmp	r3, r1
 800720a:	d898      	bhi.n	800713e <_strtod_l+0x436>
 800720c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007210:	428b      	cmp	r3, r1
 8007212:	bf86      	itte	hi
 8007214:	f04f 3aff 	movhi.w	sl, #4294967295
 8007218:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80072a0 <_strtod_l+0x598>
 800721c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007220:	2300      	movs	r3, #0
 8007222:	9308      	str	r3, [sp, #32]
 8007224:	e076      	b.n	8007314 <_strtod_l+0x60c>
 8007226:	07e2      	lsls	r2, r4, #31
 8007228:	d504      	bpl.n	8007234 <_strtod_l+0x52c>
 800722a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800722e:	f7f9 f953 	bl	80004d8 <__aeabi_dmul>
 8007232:	2301      	movs	r3, #1
 8007234:	3601      	adds	r6, #1
 8007236:	1064      	asrs	r4, r4, #1
 8007238:	3708      	adds	r7, #8
 800723a:	e7d0      	b.n	80071de <_strtod_l+0x4d6>
 800723c:	d0f0      	beq.n	8007220 <_strtod_l+0x518>
 800723e:	4264      	negs	r4, r4
 8007240:	f014 020f 	ands.w	r2, r4, #15
 8007244:	d00a      	beq.n	800725c <_strtod_l+0x554>
 8007246:	4b13      	ldr	r3, [pc, #76]	@ (8007294 <_strtod_l+0x58c>)
 8007248:	4650      	mov	r0, sl
 800724a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724e:	4659      	mov	r1, fp
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 fa6a 	bl	800072c <__aeabi_ddiv>
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	1124      	asrs	r4, r4, #4
 800725e:	d0df      	beq.n	8007220 <_strtod_l+0x518>
 8007260:	2c1f      	cmp	r4, #31
 8007262:	dd1f      	ble.n	80072a4 <_strtod_l+0x59c>
 8007264:	2400      	movs	r4, #0
 8007266:	46a0      	mov	r8, r4
 8007268:	46a1      	mov	r9, r4
 800726a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800726c:	2322      	movs	r3, #34	@ 0x22
 800726e:	9a05      	ldr	r2, [sp, #20]
 8007270:	f04f 0a00 	mov.w	sl, #0
 8007274:	f04f 0b00 	mov.w	fp, #0
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e76b      	b.n	8007154 <_strtod_l+0x44c>
 800727c:	080095e3 	.word	0x080095e3
 8007280:	080098a8 	.word	0x080098a8
 8007284:	080095db 	.word	0x080095db
 8007288:	08009612 	.word	0x08009612
 800728c:	7ff00000 	.word	0x7ff00000
 8007290:	0800974b 	.word	0x0800974b
 8007294:	080097e0 	.word	0x080097e0
 8007298:	080097b8 	.word	0x080097b8
 800729c:	7ca00000 	.word	0x7ca00000
 80072a0:	7fefffff 	.word	0x7fefffff
 80072a4:	f014 0310 	ands.w	r3, r4, #16
 80072a8:	bf18      	it	ne
 80072aa:	236a      	movne	r3, #106	@ 0x6a
 80072ac:	4650      	mov	r0, sl
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	4659      	mov	r1, fp
 80072b2:	2300      	movs	r3, #0
 80072b4:	4e77      	ldr	r6, [pc, #476]	@ (8007494 <_strtod_l+0x78c>)
 80072b6:	07e7      	lsls	r7, r4, #31
 80072b8:	d504      	bpl.n	80072c4 <_strtod_l+0x5bc>
 80072ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072be:	f7f9 f90b 	bl	80004d8 <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	1064      	asrs	r4, r4, #1
 80072c6:	f106 0608 	add.w	r6, r6, #8
 80072ca:	d1f4      	bne.n	80072b6 <_strtod_l+0x5ae>
 80072cc:	b10b      	cbz	r3, 80072d2 <_strtod_l+0x5ca>
 80072ce:	4682      	mov	sl, r0
 80072d0:	468b      	mov	fp, r1
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	b1b3      	cbz	r3, 8007304 <_strtod_l+0x5fc>
 80072d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072de:	2b00      	cmp	r3, #0
 80072e0:	4659      	mov	r1, fp
 80072e2:	dd0f      	ble.n	8007304 <_strtod_l+0x5fc>
 80072e4:	2b1f      	cmp	r3, #31
 80072e6:	dd58      	ble.n	800739a <_strtod_l+0x692>
 80072e8:	2b34      	cmp	r3, #52	@ 0x34
 80072ea:	bfd8      	it	le
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295
 80072f0:	f04f 0a00 	mov.w	sl, #0
 80072f4:	bfcf      	iteee	gt
 80072f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80072fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072fe:	4093      	lslle	r3, r2
 8007300:	ea03 0b01 	andle.w	fp, r3, r1
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f9 fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	d1a7      	bne.n	8007264 <_strtod_l+0x55c>
 8007314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007316:	464a      	mov	r2, r9
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800731c:	462b      	mov	r3, r5
 800731e:	9805      	ldr	r0, [sp, #20]
 8007320:	f7ff f8d8 	bl	80064d4 <__s2b>
 8007324:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f af09 	beq.w	800713e <_strtod_l+0x436>
 800732c:	2400      	movs	r4, #0
 800732e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007332:	2a00      	cmp	r2, #0
 8007334:	eba3 0308 	sub.w	r3, r3, r8
 8007338:	bfa8      	it	ge
 800733a:	2300      	movge	r3, #0
 800733c:	46a0      	mov	r8, r4
 800733e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007340:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007344:	9316      	str	r3, [sp, #88]	@ 0x58
 8007346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007348:	9805      	ldr	r0, [sp, #20]
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	f7ff f81a 	bl	8006384 <_Balloc>
 8007350:	4681      	mov	r9, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f aef7 	beq.w	8007146 <_strtod_l+0x43e>
 8007358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735a:	300c      	adds	r0, #12
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	f103 010c 	add.w	r1, r3, #12
 8007362:	3202      	adds	r2, #2
 8007364:	0092      	lsls	r2, r2, #2
 8007366:	f000 fd65 	bl	8007e34 <memcpy>
 800736a:	ab1c      	add	r3, sp, #112	@ 0x70
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4652      	mov	r2, sl
 8007374:	465b      	mov	r3, fp
 8007376:	9805      	ldr	r0, [sp, #20]
 8007378:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800737c:	f7ff fbd6 	bl	8006b2c <__d2b>
 8007380:	901a      	str	r0, [sp, #104]	@ 0x68
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f aedf 	beq.w	8007146 <_strtod_l+0x43e>
 8007388:	2101      	movs	r1, #1
 800738a:	9805      	ldr	r0, [sp, #20]
 800738c:	f7ff f938 	bl	8006600 <__i2b>
 8007390:	4680      	mov	r8, r0
 8007392:	b948      	cbnz	r0, 80073a8 <_strtod_l+0x6a0>
 8007394:	f04f 0800 	mov.w	r8, #0
 8007398:	e6d5      	b.n	8007146 <_strtod_l+0x43e>
 800739a:	f04f 32ff 	mov.w	r2, #4294967295
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	ea03 0a0a 	and.w	sl, r3, sl
 80073a6:	e7ad      	b.n	8007304 <_strtod_l+0x5fc>
 80073a8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073aa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	bfab      	itete	ge
 80073b0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073b2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073b4:	18ef      	addge	r7, r5, r3
 80073b6:	1b5e      	sublt	r6, r3, r5
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	bfa8      	it	ge
 80073bc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073be:	eba5 0503 	sub.w	r5, r5, r3
 80073c2:	4415      	add	r5, r2
 80073c4:	4b34      	ldr	r3, [pc, #208]	@ (8007498 <_strtod_l+0x790>)
 80073c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80073ca:	bfb8      	it	lt
 80073cc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073ce:	429d      	cmp	r5, r3
 80073d0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073d4:	da50      	bge.n	8007478 <_strtod_l+0x770>
 80073d6:	1b5b      	subs	r3, r3, r5
 80073d8:	2b1f      	cmp	r3, #31
 80073da:	f04f 0101 	mov.w	r1, #1
 80073de:	eba2 0203 	sub.w	r2, r2, r3
 80073e2:	dc3d      	bgt.n	8007460 <_strtod_l+0x758>
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073ea:	2300      	movs	r3, #0
 80073ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80073ee:	18bd      	adds	r5, r7, r2
 80073f0:	9b08      	ldr	r3, [sp, #32]
 80073f2:	42af      	cmp	r7, r5
 80073f4:	4416      	add	r6, r2
 80073f6:	441e      	add	r6, r3
 80073f8:	463b      	mov	r3, r7
 80073fa:	bfa8      	it	ge
 80073fc:	462b      	movge	r3, r5
 80073fe:	42b3      	cmp	r3, r6
 8007400:	bfa8      	it	ge
 8007402:	4633      	movge	r3, r6
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfc2      	ittt	gt
 8007408:	1aed      	subgt	r5, r5, r3
 800740a:	1af6      	subgt	r6, r6, r3
 800740c:	1aff      	subgt	r7, r7, r3
 800740e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007410:	2b00      	cmp	r3, #0
 8007412:	dd16      	ble.n	8007442 <_strtod_l+0x73a>
 8007414:	4641      	mov	r1, r8
 8007416:	461a      	mov	r2, r3
 8007418:	9805      	ldr	r0, [sp, #20]
 800741a:	f7ff f9a9 	bl	8006770 <__pow5mult>
 800741e:	4680      	mov	r8, r0
 8007420:	2800      	cmp	r0, #0
 8007422:	d0b7      	beq.n	8007394 <_strtod_l+0x68c>
 8007424:	4601      	mov	r1, r0
 8007426:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007428:	9805      	ldr	r0, [sp, #20]
 800742a:	f7ff f8ff 	bl	800662c <__multiply>
 800742e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007430:	2800      	cmp	r0, #0
 8007432:	f43f ae88 	beq.w	8007146 <_strtod_l+0x43e>
 8007436:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007438:	9805      	ldr	r0, [sp, #20]
 800743a:	f7fe ffe3 	bl	8006404 <_Bfree>
 800743e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007440:	931a      	str	r3, [sp, #104]	@ 0x68
 8007442:	2d00      	cmp	r5, #0
 8007444:	dc1d      	bgt.n	8007482 <_strtod_l+0x77a>
 8007446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	dd27      	ble.n	800749c <_strtod_l+0x794>
 800744c:	4649      	mov	r1, r9
 800744e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007450:	9805      	ldr	r0, [sp, #20]
 8007452:	f7ff f98d 	bl	8006770 <__pow5mult>
 8007456:	4681      	mov	r9, r0
 8007458:	bb00      	cbnz	r0, 800749c <_strtod_l+0x794>
 800745a:	f04f 0900 	mov.w	r9, #0
 800745e:	e672      	b.n	8007146 <_strtod_l+0x43e>
 8007460:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007464:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007468:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800746c:	35e2      	adds	r5, #226	@ 0xe2
 800746e:	fa01 f305 	lsl.w	r3, r1, r5
 8007472:	9310      	str	r3, [sp, #64]	@ 0x40
 8007474:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007476:	e7ba      	b.n	80073ee <_strtod_l+0x6e6>
 8007478:	2300      	movs	r3, #0
 800747a:	9310      	str	r3, [sp, #64]	@ 0x40
 800747c:	2301      	movs	r3, #1
 800747e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007480:	e7b5      	b.n	80073ee <_strtod_l+0x6e6>
 8007482:	462a      	mov	r2, r5
 8007484:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	f7ff f9cc 	bl	8006824 <__lshift>
 800748c:	901a      	str	r0, [sp, #104]	@ 0x68
 800748e:	2800      	cmp	r0, #0
 8007490:	d1d9      	bne.n	8007446 <_strtod_l+0x73e>
 8007492:	e658      	b.n	8007146 <_strtod_l+0x43e>
 8007494:	080098d0 	.word	0x080098d0
 8007498:	fffffc02 	.word	0xfffffc02
 800749c:	2e00      	cmp	r6, #0
 800749e:	dd07      	ble.n	80074b0 <_strtod_l+0x7a8>
 80074a0:	4649      	mov	r1, r9
 80074a2:	4632      	mov	r2, r6
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	f7ff f9bd 	bl	8006824 <__lshift>
 80074aa:	4681      	mov	r9, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0d4      	beq.n	800745a <_strtod_l+0x752>
 80074b0:	2f00      	cmp	r7, #0
 80074b2:	dd08      	ble.n	80074c6 <_strtod_l+0x7be>
 80074b4:	4641      	mov	r1, r8
 80074b6:	463a      	mov	r2, r7
 80074b8:	9805      	ldr	r0, [sp, #20]
 80074ba:	f7ff f9b3 	bl	8006824 <__lshift>
 80074be:	4680      	mov	r8, r0
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f43f ae40 	beq.w	8007146 <_strtod_l+0x43e>
 80074c6:	464a      	mov	r2, r9
 80074c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ca:	9805      	ldr	r0, [sp, #20]
 80074cc:	f7ff fa32 	bl	8006934 <__mdiff>
 80074d0:	4604      	mov	r4, r0
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f43f ae37 	beq.w	8007146 <_strtod_l+0x43e>
 80074d8:	68c3      	ldr	r3, [r0, #12]
 80074da:	4641      	mov	r1, r8
 80074dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074de:	2300      	movs	r3, #0
 80074e0:	60c3      	str	r3, [r0, #12]
 80074e2:	f7ff fa0b 	bl	80068fc <__mcmp>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	da3d      	bge.n	8007566 <_strtod_l+0x85e>
 80074ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ec:	ea53 030a 	orrs.w	r3, r3, sl
 80074f0:	d163      	bne.n	80075ba <_strtod_l+0x8b2>
 80074f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d15f      	bne.n	80075ba <_strtod_l+0x8b2>
 80074fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074fe:	0d1b      	lsrs	r3, r3, #20
 8007500:	051b      	lsls	r3, r3, #20
 8007502:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007506:	d958      	bls.n	80075ba <_strtod_l+0x8b2>
 8007508:	6963      	ldr	r3, [r4, #20]
 800750a:	b913      	cbnz	r3, 8007512 <_strtod_l+0x80a>
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	2b01      	cmp	r3, #1
 8007510:	dd53      	ble.n	80075ba <_strtod_l+0x8b2>
 8007512:	4621      	mov	r1, r4
 8007514:	2201      	movs	r2, #1
 8007516:	9805      	ldr	r0, [sp, #20]
 8007518:	f7ff f984 	bl	8006824 <__lshift>
 800751c:	4641      	mov	r1, r8
 800751e:	4604      	mov	r4, r0
 8007520:	f7ff f9ec 	bl	80068fc <__mcmp>
 8007524:	2800      	cmp	r0, #0
 8007526:	dd48      	ble.n	80075ba <_strtod_l+0x8b2>
 8007528:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800752c:	9a08      	ldr	r2, [sp, #32]
 800752e:	0d1b      	lsrs	r3, r3, #20
 8007530:	051b      	lsls	r3, r3, #20
 8007532:	2a00      	cmp	r2, #0
 8007534:	d062      	beq.n	80075fc <_strtod_l+0x8f4>
 8007536:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800753a:	d85f      	bhi.n	80075fc <_strtod_l+0x8f4>
 800753c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007540:	f67f ae94 	bls.w	800726c <_strtod_l+0x564>
 8007544:	4650      	mov	r0, sl
 8007546:	4659      	mov	r1, fp
 8007548:	4ba3      	ldr	r3, [pc, #652]	@ (80077d8 <_strtod_l+0xad0>)
 800754a:	2200      	movs	r2, #0
 800754c:	f7f8 ffc4 	bl	80004d8 <__aeabi_dmul>
 8007550:	4ba2      	ldr	r3, [pc, #648]	@ (80077dc <_strtod_l+0xad4>)
 8007552:	4682      	mov	sl, r0
 8007554:	400b      	ands	r3, r1
 8007556:	468b      	mov	fp, r1
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f adff 	bne.w	800715c <_strtod_l+0x454>
 800755e:	2322      	movs	r3, #34	@ 0x22
 8007560:	9a05      	ldr	r2, [sp, #20]
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e5fa      	b.n	800715c <_strtod_l+0x454>
 8007566:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800756a:	d165      	bne.n	8007638 <_strtod_l+0x930>
 800756c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800756e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007572:	b35a      	cbz	r2, 80075cc <_strtod_l+0x8c4>
 8007574:	4a9a      	ldr	r2, [pc, #616]	@ (80077e0 <_strtod_l+0xad8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d12b      	bne.n	80075d2 <_strtod_l+0x8ca>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	4651      	mov	r1, sl
 800757e:	b303      	cbz	r3, 80075c2 <_strtod_l+0x8ba>
 8007580:	465a      	mov	r2, fp
 8007582:	4b96      	ldr	r3, [pc, #600]	@ (80077dc <_strtod_l+0xad4>)
 8007584:	4013      	ands	r3, r2
 8007586:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	d81b      	bhi.n	80075c8 <_strtod_l+0x8c0>
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	4299      	cmp	r1, r3
 800759c:	d119      	bne.n	80075d2 <_strtod_l+0x8ca>
 800759e:	4b91      	ldr	r3, [pc, #580]	@ (80077e4 <_strtod_l+0xadc>)
 80075a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d102      	bne.n	80075ac <_strtod_l+0x8a4>
 80075a6:	3101      	adds	r1, #1
 80075a8:	f43f adcd 	beq.w	8007146 <_strtod_l+0x43e>
 80075ac:	f04f 0a00 	mov.w	sl, #0
 80075b0:	4b8a      	ldr	r3, [pc, #552]	@ (80077dc <_strtod_l+0xad4>)
 80075b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075b4:	401a      	ands	r2, r3
 80075b6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075ba:	9b08      	ldr	r3, [sp, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1c1      	bne.n	8007544 <_strtod_l+0x83c>
 80075c0:	e5cc      	b.n	800715c <_strtod_l+0x454>
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295
 80075c6:	e7e8      	b.n	800759a <_strtod_l+0x892>
 80075c8:	4613      	mov	r3, r2
 80075ca:	e7e6      	b.n	800759a <_strtod_l+0x892>
 80075cc:	ea53 030a 	orrs.w	r3, r3, sl
 80075d0:	d0aa      	beq.n	8007528 <_strtod_l+0x820>
 80075d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075d4:	b1db      	cbz	r3, 800760e <_strtod_l+0x906>
 80075d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075d8:	4213      	tst	r3, r2
 80075da:	d0ee      	beq.n	80075ba <_strtod_l+0x8b2>
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	4650      	mov	r0, sl
 80075e0:	4659      	mov	r1, fp
 80075e2:	9a08      	ldr	r2, [sp, #32]
 80075e4:	b1bb      	cbz	r3, 8007616 <_strtod_l+0x90e>
 80075e6:	f7ff fb6d 	bl	8006cc4 <sulp>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075f2:	f7f8 fdbb 	bl	800016c <__adddf3>
 80075f6:	4682      	mov	sl, r0
 80075f8:	468b      	mov	fp, r1
 80075fa:	e7de      	b.n	80075ba <_strtod_l+0x8b2>
 80075fc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007600:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007604:	f04f 3aff 	mov.w	sl, #4294967295
 8007608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800760c:	e7d5      	b.n	80075ba <_strtod_l+0x8b2>
 800760e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007610:	ea13 0f0a 	tst.w	r3, sl
 8007614:	e7e1      	b.n	80075da <_strtod_l+0x8d2>
 8007616:	f7ff fb55 	bl	8006cc4 <sulp>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007622:	f7f8 fda1 	bl	8000168 <__aeabi_dsub>
 8007626:	2200      	movs	r2, #0
 8007628:	2300      	movs	r3, #0
 800762a:	4682      	mov	sl, r0
 800762c:	468b      	mov	fp, r1
 800762e:	f7f9 f9bb 	bl	80009a8 <__aeabi_dcmpeq>
 8007632:	2800      	cmp	r0, #0
 8007634:	d0c1      	beq.n	80075ba <_strtod_l+0x8b2>
 8007636:	e619      	b.n	800726c <_strtod_l+0x564>
 8007638:	4641      	mov	r1, r8
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff face 	bl	8006bdc <__ratio>
 8007640:	2200      	movs	r2, #0
 8007642:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007646:	4606      	mov	r6, r0
 8007648:	460f      	mov	r7, r1
 800764a:	f7f9 f9c1 	bl	80009d0 <__aeabi_dcmple>
 800764e:	2800      	cmp	r0, #0
 8007650:	d06d      	beq.n	800772e <_strtod_l+0xa26>
 8007652:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d178      	bne.n	800774a <_strtod_l+0xa42>
 8007658:	f1ba 0f00 	cmp.w	sl, #0
 800765c:	d156      	bne.n	800770c <_strtod_l+0xa04>
 800765e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007664:	2b00      	cmp	r3, #0
 8007666:	d158      	bne.n	800771a <_strtod_l+0xa12>
 8007668:	2200      	movs	r2, #0
 800766a:	4630      	mov	r0, r6
 800766c:	4639      	mov	r1, r7
 800766e:	4b5e      	ldr	r3, [pc, #376]	@ (80077e8 <_strtod_l+0xae0>)
 8007670:	f7f9 f9a4 	bl	80009bc <__aeabi_dcmplt>
 8007674:	2800      	cmp	r0, #0
 8007676:	d157      	bne.n	8007728 <_strtod_l+0xa20>
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	2200      	movs	r2, #0
 800767e:	4b5b      	ldr	r3, [pc, #364]	@ (80077ec <_strtod_l+0xae4>)
 8007680:	f7f8 ff2a 	bl	80004d8 <__aeabi_dmul>
 8007684:	4606      	mov	r6, r0
 8007686:	460f      	mov	r7, r1
 8007688:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800768c:	9606      	str	r6, [sp, #24]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007694:	4d51      	ldr	r5, [pc, #324]	@ (80077dc <_strtod_l+0xad4>)
 8007696:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800769a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769c:	401d      	ands	r5, r3
 800769e:	4b54      	ldr	r3, [pc, #336]	@ (80077f0 <_strtod_l+0xae8>)
 80076a0:	429d      	cmp	r5, r3
 80076a2:	f040 80ab 	bne.w	80077fc <_strtod_l+0xaf4>
 80076a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a8:	4650      	mov	r0, sl
 80076aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076ae:	4659      	mov	r1, fp
 80076b0:	f7ff f9d4 	bl	8006a5c <__ulp>
 80076b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076b8:	f7f8 ff0e 	bl	80004d8 <__aeabi_dmul>
 80076bc:	4652      	mov	r2, sl
 80076be:	465b      	mov	r3, fp
 80076c0:	f7f8 fd54 	bl	800016c <__adddf3>
 80076c4:	460b      	mov	r3, r1
 80076c6:	4945      	ldr	r1, [pc, #276]	@ (80077dc <_strtod_l+0xad4>)
 80076c8:	4a4a      	ldr	r2, [pc, #296]	@ (80077f4 <_strtod_l+0xaec>)
 80076ca:	4019      	ands	r1, r3
 80076cc:	4291      	cmp	r1, r2
 80076ce:	4682      	mov	sl, r0
 80076d0:	d942      	bls.n	8007758 <_strtod_l+0xa50>
 80076d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076d4:	4b43      	ldr	r3, [pc, #268]	@ (80077e4 <_strtod_l+0xadc>)
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d103      	bne.n	80076e2 <_strtod_l+0x9da>
 80076da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076dc:	3301      	adds	r3, #1
 80076de:	f43f ad32 	beq.w	8007146 <_strtod_l+0x43e>
 80076e2:	f04f 3aff 	mov.w	sl, #4294967295
 80076e6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80077e4 <_strtod_l+0xadc>
 80076ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076ec:	9805      	ldr	r0, [sp, #20]
 80076ee:	f7fe fe89 	bl	8006404 <_Bfree>
 80076f2:	4649      	mov	r1, r9
 80076f4:	9805      	ldr	r0, [sp, #20]
 80076f6:	f7fe fe85 	bl	8006404 <_Bfree>
 80076fa:	4641      	mov	r1, r8
 80076fc:	9805      	ldr	r0, [sp, #20]
 80076fe:	f7fe fe81 	bl	8006404 <_Bfree>
 8007702:	4621      	mov	r1, r4
 8007704:	9805      	ldr	r0, [sp, #20]
 8007706:	f7fe fe7d 	bl	8006404 <_Bfree>
 800770a:	e61c      	b.n	8007346 <_strtod_l+0x63e>
 800770c:	f1ba 0f01 	cmp.w	sl, #1
 8007710:	d103      	bne.n	800771a <_strtod_l+0xa12>
 8007712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007714:	2b00      	cmp	r3, #0
 8007716:	f43f ada9 	beq.w	800726c <_strtod_l+0x564>
 800771a:	2200      	movs	r2, #0
 800771c:	4b36      	ldr	r3, [pc, #216]	@ (80077f8 <_strtod_l+0xaf0>)
 800771e:	2600      	movs	r6, #0
 8007720:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007724:	4f30      	ldr	r7, [pc, #192]	@ (80077e8 <_strtod_l+0xae0>)
 8007726:	e7b3      	b.n	8007690 <_strtod_l+0x988>
 8007728:	2600      	movs	r6, #0
 800772a:	4f30      	ldr	r7, [pc, #192]	@ (80077ec <_strtod_l+0xae4>)
 800772c:	e7ac      	b.n	8007688 <_strtod_l+0x980>
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	4b2e      	ldr	r3, [pc, #184]	@ (80077ec <_strtod_l+0xae4>)
 8007734:	2200      	movs	r2, #0
 8007736:	f7f8 fecf 	bl	80004d8 <__aeabi_dmul>
 800773a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0a1      	beq.n	8007688 <_strtod_l+0x980>
 8007744:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007748:	e7a2      	b.n	8007690 <_strtod_l+0x988>
 800774a:	2200      	movs	r2, #0
 800774c:	4b26      	ldr	r3, [pc, #152]	@ (80077e8 <_strtod_l+0xae0>)
 800774e:	4616      	mov	r6, r2
 8007750:	461f      	mov	r7, r3
 8007752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007756:	e79b      	b.n	8007690 <_strtod_l+0x988>
 8007758:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1c1      	bne.n	80076ea <_strtod_l+0x9e2>
 8007766:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800776a:	0d1b      	lsrs	r3, r3, #20
 800776c:	051b      	lsls	r3, r3, #20
 800776e:	429d      	cmp	r5, r3
 8007770:	d1bb      	bne.n	80076ea <_strtod_l+0x9e2>
 8007772:	4630      	mov	r0, r6
 8007774:	4639      	mov	r1, r7
 8007776:	f7f9 fccb 	bl	8001110 <__aeabi_d2lz>
 800777a:	f7f8 fe7f 	bl	800047c <__aeabi_l2d>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	f7f8 fcef 	bl	8000168 <__aeabi_dsub>
 800778a:	460b      	mov	r3, r1
 800778c:	4602      	mov	r2, r0
 800778e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007792:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007798:	ea46 060a 	orr.w	r6, r6, sl
 800779c:	431e      	orrs	r6, r3
 800779e:	d06a      	beq.n	8007876 <_strtod_l+0xb6e>
 80077a0:	a309      	add	r3, pc, #36	@ (adr r3, 80077c8 <_strtod_l+0xac0>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f9 f909 	bl	80009bc <__aeabi_dcmplt>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f47f acd6 	bne.w	800715c <_strtod_l+0x454>
 80077b0:	a307      	add	r3, pc, #28	@ (adr r3, 80077d0 <_strtod_l+0xac8>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ba:	f7f9 f91d 	bl	80009f8 <__aeabi_dcmpgt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d093      	beq.n	80076ea <_strtod_l+0x9e2>
 80077c2:	e4cb      	b.n	800715c <_strtod_l+0x454>
 80077c4:	f3af 8000 	nop.w
 80077c8:	94a03595 	.word	0x94a03595
 80077cc:	3fdfffff 	.word	0x3fdfffff
 80077d0:	35afe535 	.word	0x35afe535
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	39500000 	.word	0x39500000
 80077dc:	7ff00000 	.word	0x7ff00000
 80077e0:	000fffff 	.word	0x000fffff
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	3ff00000 	.word	0x3ff00000
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	7fe00000 	.word	0x7fe00000
 80077f4:	7c9fffff 	.word	0x7c9fffff
 80077f8:	bff00000 	.word	0xbff00000
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	b323      	cbz	r3, 800784a <_strtod_l+0xb42>
 8007800:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007804:	d821      	bhi.n	800784a <_strtod_l+0xb42>
 8007806:	a328      	add	r3, pc, #160	@ (adr r3, 80078a8 <_strtod_l+0xba0>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f8de 	bl	80009d0 <__aeabi_dcmple>
 8007814:	b1a0      	cbz	r0, 8007840 <_strtod_l+0xb38>
 8007816:	4639      	mov	r1, r7
 8007818:	4630      	mov	r0, r6
 800781a:	f7f9 f935 	bl	8000a88 <__aeabi_d2uiz>
 800781e:	2801      	cmp	r0, #1
 8007820:	bf38      	it	cc
 8007822:	2001      	movcc	r0, #1
 8007824:	f7f8 fdde 	bl	80003e4 <__aeabi_ui2d>
 8007828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	b9fb      	cbnz	r3, 8007870 <_strtod_l+0xb68>
 8007830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007834:	9014      	str	r0, [sp, #80]	@ 0x50
 8007836:	9315      	str	r3, [sp, #84]	@ 0x54
 8007838:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800783c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007840:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007842:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007846:	1b5b      	subs	r3, r3, r5
 8007848:	9311      	str	r3, [sp, #68]	@ 0x44
 800784a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800784e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007852:	f7ff f903 	bl	8006a5c <__ulp>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4650      	mov	r0, sl
 800785c:	4659      	mov	r1, fp
 800785e:	f7f8 fe3b 	bl	80004d8 <__aeabi_dmul>
 8007862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007866:	f7f8 fc81 	bl	800016c <__adddf3>
 800786a:	4682      	mov	sl, r0
 800786c:	468b      	mov	fp, r1
 800786e:	e775      	b.n	800775c <_strtod_l+0xa54>
 8007870:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007874:	e7e0      	b.n	8007838 <_strtod_l+0xb30>
 8007876:	a30e      	add	r3, pc, #56	@ (adr r3, 80078b0 <_strtod_l+0xba8>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f9 f89e 	bl	80009bc <__aeabi_dcmplt>
 8007880:	e79d      	b.n	80077be <_strtod_l+0xab6>
 8007882:	2300      	movs	r3, #0
 8007884:	930e      	str	r3, [sp, #56]	@ 0x38
 8007886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007888:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	f7ff ba79 	b.w	8006d82 <_strtod_l+0x7a>
 8007890:	2a65      	cmp	r2, #101	@ 0x65
 8007892:	f43f ab72 	beq.w	8006f7a <_strtod_l+0x272>
 8007896:	2a45      	cmp	r2, #69	@ 0x45
 8007898:	f43f ab6f 	beq.w	8006f7a <_strtod_l+0x272>
 800789c:	2301      	movs	r3, #1
 800789e:	f7ff bbaa 	b.w	8006ff6 <_strtod_l+0x2ee>
 80078a2:	bf00      	nop
 80078a4:	f3af 8000 	nop.w
 80078a8:	ffc00000 	.word	0xffc00000
 80078ac:	41dfffff 	.word	0x41dfffff
 80078b0:	94a03595 	.word	0x94a03595
 80078b4:	3fcfffff 	.word	0x3fcfffff

080078b8 <_strtod_r>:
 80078b8:	4b01      	ldr	r3, [pc, #4]	@ (80078c0 <_strtod_r+0x8>)
 80078ba:	f7ff ba25 	b.w	8006d08 <_strtod_l>
 80078be:	bf00      	nop
 80078c0:	20000068 	.word	0x20000068

080078c4 <_strtol_l.isra.0>:
 80078c4:	2b24      	cmp	r3, #36	@ 0x24
 80078c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ca:	4686      	mov	lr, r0
 80078cc:	4690      	mov	r8, r2
 80078ce:	d801      	bhi.n	80078d4 <_strtol_l.isra.0+0x10>
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d106      	bne.n	80078e2 <_strtol_l.isra.0+0x1e>
 80078d4:	f7fd fdbc 	bl	8005450 <__errno>
 80078d8:	2316      	movs	r3, #22
 80078da:	6003      	str	r3, [r0, #0]
 80078dc:	2000      	movs	r0, #0
 80078de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e2:	460d      	mov	r5, r1
 80078e4:	4833      	ldr	r0, [pc, #204]	@ (80079b4 <_strtol_l.isra.0+0xf0>)
 80078e6:	462a      	mov	r2, r5
 80078e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ec:	5d06      	ldrb	r6, [r0, r4]
 80078ee:	f016 0608 	ands.w	r6, r6, #8
 80078f2:	d1f8      	bne.n	80078e6 <_strtol_l.isra.0+0x22>
 80078f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80078f6:	d110      	bne.n	800791a <_strtol_l.isra.0+0x56>
 80078f8:	2601      	movs	r6, #1
 80078fa:	782c      	ldrb	r4, [r5, #0]
 80078fc:	1c95      	adds	r5, r2, #2
 80078fe:	f033 0210 	bics.w	r2, r3, #16
 8007902:	d115      	bne.n	8007930 <_strtol_l.isra.0+0x6c>
 8007904:	2c30      	cmp	r4, #48	@ 0x30
 8007906:	d10d      	bne.n	8007924 <_strtol_l.isra.0+0x60>
 8007908:	782a      	ldrb	r2, [r5, #0]
 800790a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800790e:	2a58      	cmp	r2, #88	@ 0x58
 8007910:	d108      	bne.n	8007924 <_strtol_l.isra.0+0x60>
 8007912:	786c      	ldrb	r4, [r5, #1]
 8007914:	3502      	adds	r5, #2
 8007916:	2310      	movs	r3, #16
 8007918:	e00a      	b.n	8007930 <_strtol_l.isra.0+0x6c>
 800791a:	2c2b      	cmp	r4, #43	@ 0x2b
 800791c:	bf04      	itt	eq
 800791e:	782c      	ldrbeq	r4, [r5, #0]
 8007920:	1c95      	addeq	r5, r2, #2
 8007922:	e7ec      	b.n	80078fe <_strtol_l.isra.0+0x3a>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f6      	bne.n	8007916 <_strtol_l.isra.0+0x52>
 8007928:	2c30      	cmp	r4, #48	@ 0x30
 800792a:	bf14      	ite	ne
 800792c:	230a      	movne	r3, #10
 800792e:	2308      	moveq	r3, #8
 8007930:	2200      	movs	r2, #0
 8007932:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007936:	f10c 3cff 	add.w	ip, ip, #4294967295
 800793a:	fbbc f9f3 	udiv	r9, ip, r3
 800793e:	4610      	mov	r0, r2
 8007940:	fb03 ca19 	mls	sl, r3, r9, ip
 8007944:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007948:	2f09      	cmp	r7, #9
 800794a:	d80f      	bhi.n	800796c <_strtol_l.isra.0+0xa8>
 800794c:	463c      	mov	r4, r7
 800794e:	42a3      	cmp	r3, r4
 8007950:	dd1b      	ble.n	800798a <_strtol_l.isra.0+0xc6>
 8007952:	1c57      	adds	r7, r2, #1
 8007954:	d007      	beq.n	8007966 <_strtol_l.isra.0+0xa2>
 8007956:	4581      	cmp	r9, r0
 8007958:	d314      	bcc.n	8007984 <_strtol_l.isra.0+0xc0>
 800795a:	d101      	bne.n	8007960 <_strtol_l.isra.0+0x9c>
 800795c:	45a2      	cmp	sl, r4
 800795e:	db11      	blt.n	8007984 <_strtol_l.isra.0+0xc0>
 8007960:	2201      	movs	r2, #1
 8007962:	fb00 4003 	mla	r0, r0, r3, r4
 8007966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800796a:	e7eb      	b.n	8007944 <_strtol_l.isra.0+0x80>
 800796c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007970:	2f19      	cmp	r7, #25
 8007972:	d801      	bhi.n	8007978 <_strtol_l.isra.0+0xb4>
 8007974:	3c37      	subs	r4, #55	@ 0x37
 8007976:	e7ea      	b.n	800794e <_strtol_l.isra.0+0x8a>
 8007978:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800797c:	2f19      	cmp	r7, #25
 800797e:	d804      	bhi.n	800798a <_strtol_l.isra.0+0xc6>
 8007980:	3c57      	subs	r4, #87	@ 0x57
 8007982:	e7e4      	b.n	800794e <_strtol_l.isra.0+0x8a>
 8007984:	f04f 32ff 	mov.w	r2, #4294967295
 8007988:	e7ed      	b.n	8007966 <_strtol_l.isra.0+0xa2>
 800798a:	1c53      	adds	r3, r2, #1
 800798c:	d108      	bne.n	80079a0 <_strtol_l.isra.0+0xdc>
 800798e:	2322      	movs	r3, #34	@ 0x22
 8007990:	4660      	mov	r0, ip
 8007992:	f8ce 3000 	str.w	r3, [lr]
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	d0a0      	beq.n	80078de <_strtol_l.isra.0+0x1a>
 800799c:	1e69      	subs	r1, r5, #1
 800799e:	e006      	b.n	80079ae <_strtol_l.isra.0+0xea>
 80079a0:	b106      	cbz	r6, 80079a4 <_strtol_l.isra.0+0xe0>
 80079a2:	4240      	negs	r0, r0
 80079a4:	f1b8 0f00 	cmp.w	r8, #0
 80079a8:	d099      	beq.n	80078de <_strtol_l.isra.0+0x1a>
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d1f6      	bne.n	800799c <_strtol_l.isra.0+0xd8>
 80079ae:	f8c8 1000 	str.w	r1, [r8]
 80079b2:	e794      	b.n	80078de <_strtol_l.isra.0+0x1a>
 80079b4:	080098f9 	.word	0x080098f9

080079b8 <_strtol_r>:
 80079b8:	f7ff bf84 	b.w	80078c4 <_strtol_l.isra.0>

080079bc <__ssputs_r>:
 80079bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c0:	461f      	mov	r7, r3
 80079c2:	688e      	ldr	r6, [r1, #8]
 80079c4:	4682      	mov	sl, r0
 80079c6:	42be      	cmp	r6, r7
 80079c8:	460c      	mov	r4, r1
 80079ca:	4690      	mov	r8, r2
 80079cc:	680b      	ldr	r3, [r1, #0]
 80079ce:	d82d      	bhi.n	8007a2c <__ssputs_r+0x70>
 80079d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079d8:	d026      	beq.n	8007a28 <__ssputs_r+0x6c>
 80079da:	6965      	ldr	r5, [r4, #20]
 80079dc:	6909      	ldr	r1, [r1, #16]
 80079de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079e2:	eba3 0901 	sub.w	r9, r3, r1
 80079e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079ea:	1c7b      	adds	r3, r7, #1
 80079ec:	444b      	add	r3, r9
 80079ee:	106d      	asrs	r5, r5, #1
 80079f0:	429d      	cmp	r5, r3
 80079f2:	bf38      	it	cc
 80079f4:	461d      	movcc	r5, r3
 80079f6:	0553      	lsls	r3, r2, #21
 80079f8:	d527      	bpl.n	8007a4a <__ssputs_r+0x8e>
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7fe fc36 	bl	800626c <_malloc_r>
 8007a00:	4606      	mov	r6, r0
 8007a02:	b360      	cbz	r0, 8007a5e <__ssputs_r+0xa2>
 8007a04:	464a      	mov	r2, r9
 8007a06:	6921      	ldr	r1, [r4, #16]
 8007a08:	f000 fa14 	bl	8007e34 <memcpy>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	6126      	str	r6, [r4, #16]
 8007a1a:	444e      	add	r6, r9
 8007a1c:	6026      	str	r6, [r4, #0]
 8007a1e:	463e      	mov	r6, r7
 8007a20:	6165      	str	r5, [r4, #20]
 8007a22:	eba5 0509 	sub.w	r5, r5, r9
 8007a26:	60a5      	str	r5, [r4, #8]
 8007a28:	42be      	cmp	r6, r7
 8007a2a:	d900      	bls.n	8007a2e <__ssputs_r+0x72>
 8007a2c:	463e      	mov	r6, r7
 8007a2e:	4632      	mov	r2, r6
 8007a30:	4641      	mov	r1, r8
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	f000 f9c2 	bl	8007dbc <memmove>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	1b9b      	subs	r3, r3, r6
 8007a3e:	60a3      	str	r3, [r4, #8]
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	4433      	add	r3, r6
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	f000 fd83 	bl	8008556 <_realloc_r>
 8007a50:	4606      	mov	r6, r0
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d1e0      	bne.n	8007a18 <__ssputs_r+0x5c>
 8007a56:	4650      	mov	r0, sl
 8007a58:	6921      	ldr	r1, [r4, #16]
 8007a5a:	f7fe fb95 	bl	8006188 <_free_r>
 8007a5e:	230c      	movs	r3, #12
 8007a60:	f8ca 3000 	str.w	r3, [sl]
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	e7e9      	b.n	8007a46 <__ssputs_r+0x8a>
	...

08007a74 <_svfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	4698      	mov	r8, r3
 8007a7a:	898b      	ldrh	r3, [r1, #12]
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	061b      	lsls	r3, r3, #24
 8007a80:	460d      	mov	r5, r1
 8007a82:	4614      	mov	r4, r2
 8007a84:	b09d      	sub	sp, #116	@ 0x74
 8007a86:	d510      	bpl.n	8007aaa <_svfiprintf_r+0x36>
 8007a88:	690b      	ldr	r3, [r1, #16]
 8007a8a:	b973      	cbnz	r3, 8007aaa <_svfiprintf_r+0x36>
 8007a8c:	2140      	movs	r1, #64	@ 0x40
 8007a8e:	f7fe fbed 	bl	800626c <_malloc_r>
 8007a92:	6028      	str	r0, [r5, #0]
 8007a94:	6128      	str	r0, [r5, #16]
 8007a96:	b930      	cbnz	r0, 8007aa6 <_svfiprintf_r+0x32>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	b01d      	add	sp, #116	@ 0x74
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	2340      	movs	r3, #64	@ 0x40
 8007aa8:	616b      	str	r3, [r5, #20]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aae:	2320      	movs	r3, #32
 8007ab0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ab4:	2330      	movs	r3, #48	@ 0x30
 8007ab6:	f04f 0901 	mov.w	r9, #1
 8007aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8007abe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007c58 <_svfiprintf_r+0x1e4>
 8007ac2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ac6:	4623      	mov	r3, r4
 8007ac8:	469a      	mov	sl, r3
 8007aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ace:	b10a      	cbz	r2, 8007ad4 <_svfiprintf_r+0x60>
 8007ad0:	2a25      	cmp	r2, #37	@ 0x25
 8007ad2:	d1f9      	bne.n	8007ac8 <_svfiprintf_r+0x54>
 8007ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad8:	d00b      	beq.n	8007af2 <_svfiprintf_r+0x7e>
 8007ada:	465b      	mov	r3, fp
 8007adc:	4622      	mov	r2, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7ff ff6b 	bl	80079bc <__ssputs_r>
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f000 80a7 	beq.w	8007c3a <_svfiprintf_r+0x1c6>
 8007aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aee:	445a      	add	r2, fp
 8007af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007af2:	f89a 3000 	ldrb.w	r3, [sl]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 809f 	beq.w	8007c3a <_svfiprintf_r+0x1c6>
 8007afc:	2300      	movs	r3, #0
 8007afe:	f04f 32ff 	mov.w	r2, #4294967295
 8007b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b06:	f10a 0a01 	add.w	sl, sl, #1
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	9307      	str	r3, [sp, #28]
 8007b0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b12:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b14:	4654      	mov	r4, sl
 8007b16:	2205      	movs	r2, #5
 8007b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1c:	484e      	ldr	r0, [pc, #312]	@ (8007c58 <_svfiprintf_r+0x1e4>)
 8007b1e:	f7fd fcc4 	bl	80054aa <memchr>
 8007b22:	9a04      	ldr	r2, [sp, #16]
 8007b24:	b9d8      	cbnz	r0, 8007b5e <_svfiprintf_r+0xea>
 8007b26:	06d0      	lsls	r0, r2, #27
 8007b28:	bf44      	itt	mi
 8007b2a:	2320      	movmi	r3, #32
 8007b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b30:	0711      	lsls	r1, r2, #28
 8007b32:	bf44      	itt	mi
 8007b34:	232b      	movmi	r3, #43	@ 0x2b
 8007b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b40:	d015      	beq.n	8007b6e <_svfiprintf_r+0xfa>
 8007b42:	4654      	mov	r4, sl
 8007b44:	2000      	movs	r0, #0
 8007b46:	f04f 0c0a 	mov.w	ip, #10
 8007b4a:	9a07      	ldr	r2, [sp, #28]
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b52:	3b30      	subs	r3, #48	@ 0x30
 8007b54:	2b09      	cmp	r3, #9
 8007b56:	d94b      	bls.n	8007bf0 <_svfiprintf_r+0x17c>
 8007b58:	b1b0      	cbz	r0, 8007b88 <_svfiprintf_r+0x114>
 8007b5a:	9207      	str	r2, [sp, #28]
 8007b5c:	e014      	b.n	8007b88 <_svfiprintf_r+0x114>
 8007b5e:	eba0 0308 	sub.w	r3, r0, r8
 8007b62:	fa09 f303 	lsl.w	r3, r9, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	46a2      	mov	sl, r4
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	e7d2      	b.n	8007b14 <_svfiprintf_r+0xa0>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	1d19      	adds	r1, r3, #4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	9103      	str	r1, [sp, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfbb      	ittet	lt
 8007b7a:	425b      	neglt	r3, r3
 8007b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b80:	9307      	strge	r3, [sp, #28]
 8007b82:	9307      	strlt	r3, [sp, #28]
 8007b84:	bfb8      	it	lt
 8007b86:	9204      	strlt	r2, [sp, #16]
 8007b88:	7823      	ldrb	r3, [r4, #0]
 8007b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b8c:	d10a      	bne.n	8007ba4 <_svfiprintf_r+0x130>
 8007b8e:	7863      	ldrb	r3, [r4, #1]
 8007b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b92:	d132      	bne.n	8007bfa <_svfiprintf_r+0x186>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	3402      	adds	r4, #2
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	9203      	str	r2, [sp, #12]
 8007b9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007c5c <_svfiprintf_r+0x1e8>
 8007ba8:	2203      	movs	r2, #3
 8007baa:	4650      	mov	r0, sl
 8007bac:	7821      	ldrb	r1, [r4, #0]
 8007bae:	f7fd fc7c 	bl	80054aa <memchr>
 8007bb2:	b138      	cbz	r0, 8007bc4 <_svfiprintf_r+0x150>
 8007bb4:	2240      	movs	r2, #64	@ 0x40
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	eba0 000a 	sub.w	r0, r0, sl
 8007bbc:	4082      	lsls	r2, r0
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	3401      	adds	r4, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc8:	2206      	movs	r2, #6
 8007bca:	4825      	ldr	r0, [pc, #148]	@ (8007c60 <_svfiprintf_r+0x1ec>)
 8007bcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bd0:	f7fd fc6b 	bl	80054aa <memchr>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d036      	beq.n	8007c46 <_svfiprintf_r+0x1d2>
 8007bd8:	4b22      	ldr	r3, [pc, #136]	@ (8007c64 <_svfiprintf_r+0x1f0>)
 8007bda:	bb1b      	cbnz	r3, 8007c24 <_svfiprintf_r+0x1b0>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	3307      	adds	r3, #7
 8007be0:	f023 0307 	bic.w	r3, r3, #7
 8007be4:	3308      	adds	r3, #8
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bea:	4433      	add	r3, r6
 8007bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bee:	e76a      	b.n	8007ac6 <_svfiprintf_r+0x52>
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf8:	e7a8      	b.n	8007b4c <_svfiprintf_r+0xd8>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f04f 0c0a 	mov.w	ip, #10
 8007c00:	4619      	mov	r1, r3
 8007c02:	3401      	adds	r4, #1
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	4620      	mov	r0, r4
 8007c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0c:	3a30      	subs	r2, #48	@ 0x30
 8007c0e:	2a09      	cmp	r2, #9
 8007c10:	d903      	bls.n	8007c1a <_svfiprintf_r+0x1a6>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0c6      	beq.n	8007ba4 <_svfiprintf_r+0x130>
 8007c16:	9105      	str	r1, [sp, #20]
 8007c18:	e7c4      	b.n	8007ba4 <_svfiprintf_r+0x130>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c22:	e7f0      	b.n	8007c06 <_svfiprintf_r+0x192>
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	462a      	mov	r2, r5
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c68 <_svfiprintf_r+0x1f4>)
 8007c2e:	a904      	add	r1, sp, #16
 8007c30:	f7fc fcc0 	bl	80045b4 <_printf_float>
 8007c34:	1c42      	adds	r2, r0, #1
 8007c36:	4606      	mov	r6, r0
 8007c38:	d1d6      	bne.n	8007be8 <_svfiprintf_r+0x174>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	065b      	lsls	r3, r3, #25
 8007c3e:	f53f af2d 	bmi.w	8007a9c <_svfiprintf_r+0x28>
 8007c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c44:	e72c      	b.n	8007aa0 <_svfiprintf_r+0x2c>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <_svfiprintf_r+0x1f4>)
 8007c50:	a904      	add	r1, sp, #16
 8007c52:	f7fc ff4d 	bl	8004af0 <_printf_i>
 8007c56:	e7ed      	b.n	8007c34 <_svfiprintf_r+0x1c0>
 8007c58:	080096f7 	.word	0x080096f7
 8007c5c:	080096fd 	.word	0x080096fd
 8007c60:	08009701 	.word	0x08009701
 8007c64:	080045b5 	.word	0x080045b5
 8007c68:	080079bd 	.word	0x080079bd

08007c6c <__sflush_r>:
 8007c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	0716      	lsls	r6, r2, #28
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	d454      	bmi.n	8007d24 <__sflush_r+0xb8>
 8007c7a:	684b      	ldr	r3, [r1, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dc02      	bgt.n	8007c86 <__sflush_r+0x1a>
 8007c80:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd48      	ble.n	8007d18 <__sflush_r+0xac>
 8007c86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	d045      	beq.n	8007d18 <__sflush_r+0xac>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c92:	682f      	ldr	r7, [r5, #0]
 8007c94:	6a21      	ldr	r1, [r4, #32]
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	d030      	beq.n	8007cfc <__sflush_r+0x90>
 8007c9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	0759      	lsls	r1, r3, #29
 8007ca0:	d505      	bpl.n	8007cae <__sflush_r+0x42>
 8007ca2:	6863      	ldr	r3, [r4, #4]
 8007ca4:	1ad2      	subs	r2, r2, r3
 8007ca6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ca8:	b10b      	cbz	r3, 8007cae <__sflush_r+0x42>
 8007caa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cac:	1ad2      	subs	r2, r2, r3
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cb4:	6a21      	ldr	r1, [r4, #32]
 8007cb6:	47b0      	blx	r6
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	d106      	bne.n	8007ccc <__sflush_r+0x60>
 8007cbe:	6829      	ldr	r1, [r5, #0]
 8007cc0:	291d      	cmp	r1, #29
 8007cc2:	d82b      	bhi.n	8007d1c <__sflush_r+0xb0>
 8007cc4:	4a28      	ldr	r2, [pc, #160]	@ (8007d68 <__sflush_r+0xfc>)
 8007cc6:	40ca      	lsrs	r2, r1
 8007cc8:	07d6      	lsls	r6, r2, #31
 8007cca:	d527      	bpl.n	8007d1c <__sflush_r+0xb0>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	6062      	str	r2, [r4, #4]
 8007cd0:	6922      	ldr	r2, [r4, #16]
 8007cd2:	04d9      	lsls	r1, r3, #19
 8007cd4:	6022      	str	r2, [r4, #0]
 8007cd6:	d504      	bpl.n	8007ce2 <__sflush_r+0x76>
 8007cd8:	1c42      	adds	r2, r0, #1
 8007cda:	d101      	bne.n	8007ce0 <__sflush_r+0x74>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b903      	cbnz	r3, 8007ce2 <__sflush_r+0x76>
 8007ce0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ce2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce4:	602f      	str	r7, [r5, #0]
 8007ce6:	b1b9      	cbz	r1, 8007d18 <__sflush_r+0xac>
 8007ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cec:	4299      	cmp	r1, r3
 8007cee:	d002      	beq.n	8007cf6 <__sflush_r+0x8a>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f7fe fa49 	bl	8006188 <_free_r>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfa:	e00d      	b.n	8007d18 <__sflush_r+0xac>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b0      	blx	r6
 8007d02:	4602      	mov	r2, r0
 8007d04:	1c50      	adds	r0, r2, #1
 8007d06:	d1c9      	bne.n	8007c9c <__sflush_r+0x30>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0c6      	beq.n	8007c9c <__sflush_r+0x30>
 8007d0e:	2b1d      	cmp	r3, #29
 8007d10:	d001      	beq.n	8007d16 <__sflush_r+0xaa>
 8007d12:	2b16      	cmp	r3, #22
 8007d14:	d11d      	bne.n	8007d52 <__sflush_r+0xe6>
 8007d16:	602f      	str	r7, [r5, #0]
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e021      	b.n	8007d60 <__sflush_r+0xf4>
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d20:	b21b      	sxth	r3, r3
 8007d22:	e01a      	b.n	8007d5a <__sflush_r+0xee>
 8007d24:	690f      	ldr	r7, [r1, #16]
 8007d26:	2f00      	cmp	r7, #0
 8007d28:	d0f6      	beq.n	8007d18 <__sflush_r+0xac>
 8007d2a:	0793      	lsls	r3, r2, #30
 8007d2c:	bf18      	it	ne
 8007d2e:	2300      	movne	r3, #0
 8007d30:	680e      	ldr	r6, [r1, #0]
 8007d32:	bf08      	it	eq
 8007d34:	694b      	ldreq	r3, [r1, #20]
 8007d36:	1bf6      	subs	r6, r6, r7
 8007d38:	600f      	str	r7, [r1, #0]
 8007d3a:	608b      	str	r3, [r1, #8]
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	ddeb      	ble.n	8007d18 <__sflush_r+0xac>
 8007d40:	4633      	mov	r3, r6
 8007d42:	463a      	mov	r2, r7
 8007d44:	4628      	mov	r0, r5
 8007d46:	6a21      	ldr	r1, [r4, #32]
 8007d48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d4c:	47e0      	blx	ip
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	dc07      	bgt.n	8007d62 <__sflush_r+0xf6>
 8007d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d62:	4407      	add	r7, r0
 8007d64:	1a36      	subs	r6, r6, r0
 8007d66:	e7e9      	b.n	8007d3c <__sflush_r+0xd0>
 8007d68:	20400001 	.word	0x20400001

08007d6c <_fflush_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	690b      	ldr	r3, [r1, #16]
 8007d70:	4605      	mov	r5, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	b913      	cbnz	r3, 8007d7c <_fflush_r+0x10>
 8007d76:	2500      	movs	r5, #0
 8007d78:	4628      	mov	r0, r5
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	b118      	cbz	r0, 8007d86 <_fflush_r+0x1a>
 8007d7e:	6a03      	ldr	r3, [r0, #32]
 8007d80:	b90b      	cbnz	r3, 8007d86 <_fflush_r+0x1a>
 8007d82:	f7fd fa69 	bl	8005258 <__sinit>
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f3      	beq.n	8007d76 <_fflush_r+0xa>
 8007d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d90:	07d0      	lsls	r0, r2, #31
 8007d92:	d404      	bmi.n	8007d9e <_fflush_r+0x32>
 8007d94:	0599      	lsls	r1, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_fflush_r+0x32>
 8007d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d9a:	f7fd fb84 	bl	80054a6 <__retarget_lock_acquire_recursive>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4621      	mov	r1, r4
 8007da2:	f7ff ff63 	bl	8007c6c <__sflush_r>
 8007da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007da8:	4605      	mov	r5, r0
 8007daa:	07da      	lsls	r2, r3, #31
 8007dac:	d4e4      	bmi.n	8007d78 <_fflush_r+0xc>
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	059b      	lsls	r3, r3, #22
 8007db2:	d4e1      	bmi.n	8007d78 <_fflush_r+0xc>
 8007db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007db6:	f7fd fb77 	bl	80054a8 <__retarget_lock_release_recursive>
 8007dba:	e7dd      	b.n	8007d78 <_fflush_r+0xc>

08007dbc <memmove>:
 8007dbc:	4288      	cmp	r0, r1
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	eb01 0402 	add.w	r4, r1, r2
 8007dc4:	d902      	bls.n	8007dcc <memmove+0x10>
 8007dc6:	4284      	cmp	r4, r0
 8007dc8:	4623      	mov	r3, r4
 8007dca:	d807      	bhi.n	8007ddc <memmove+0x20>
 8007dcc:	1e43      	subs	r3, r0, #1
 8007dce:	42a1      	cmp	r1, r4
 8007dd0:	d008      	beq.n	8007de4 <memmove+0x28>
 8007dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dda:	e7f8      	b.n	8007dce <memmove+0x12>
 8007ddc:	4601      	mov	r1, r0
 8007dde:	4402      	add	r2, r0
 8007de0:	428a      	cmp	r2, r1
 8007de2:	d100      	bne.n	8007de6 <memmove+0x2a>
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dee:	e7f7      	b.n	8007de0 <memmove+0x24>

08007df0 <strncmp>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	b16a      	cbz	r2, 8007e10 <strncmp+0x20>
 8007df4:	3901      	subs	r1, #1
 8007df6:	1884      	adds	r4, r0, r2
 8007df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d103      	bne.n	8007e0c <strncmp+0x1c>
 8007e04:	42a0      	cmp	r0, r4
 8007e06:	d001      	beq.n	8007e0c <strncmp+0x1c>
 8007e08:	2a00      	cmp	r2, #0
 8007e0a:	d1f5      	bne.n	8007df8 <strncmp+0x8>
 8007e0c:	1ad0      	subs	r0, r2, r3
 8007e0e:	bd10      	pop	{r4, pc}
 8007e10:	4610      	mov	r0, r2
 8007e12:	e7fc      	b.n	8007e0e <strncmp+0x1e>

08007e14 <_sbrk_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	2300      	movs	r3, #0
 8007e18:	4d05      	ldr	r5, [pc, #20]	@ (8007e30 <_sbrk_r+0x1c>)
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	602b      	str	r3, [r5, #0]
 8007e20:	f7fa fbfe 	bl	8002620 <_sbrk>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_sbrk_r+0x1a>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_sbrk_r+0x1a>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	2000084c 	.word	0x2000084c

08007e34 <memcpy>:
 8007e34:	440a      	add	r2, r1
 8007e36:	4291      	cmp	r1, r2
 8007e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e3c:	d100      	bne.n	8007e40 <memcpy+0xc>
 8007e3e:	4770      	bx	lr
 8007e40:	b510      	push	{r4, lr}
 8007e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e46:	4291      	cmp	r1, r2
 8007e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4c:	d1f9      	bne.n	8007e42 <memcpy+0xe>
 8007e4e:	bd10      	pop	{r4, pc}

08007e50 <nan>:
 8007e50:	2000      	movs	r0, #0
 8007e52:	4901      	ldr	r1, [pc, #4]	@ (8007e58 <nan+0x8>)
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	7ff80000 	.word	0x7ff80000

08007e5c <__assert_func>:
 8007e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e5e:	4614      	mov	r4, r2
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <__assert_func+0x2c>)
 8007e64:	4605      	mov	r5, r0
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68d8      	ldr	r0, [r3, #12]
 8007e6a:	b14c      	cbz	r4, 8007e80 <__assert_func+0x24>
 8007e6c:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <__assert_func+0x30>)
 8007e6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e72:	9100      	str	r1, [sp, #0]
 8007e74:	462b      	mov	r3, r5
 8007e76:	4906      	ldr	r1, [pc, #24]	@ (8007e90 <__assert_func+0x34>)
 8007e78:	f000 fba8 	bl	80085cc <fiprintf>
 8007e7c:	f000 fbb8 	bl	80085f0 <abort>
 8007e80:	4b04      	ldr	r3, [pc, #16]	@ (8007e94 <__assert_func+0x38>)
 8007e82:	461c      	mov	r4, r3
 8007e84:	e7f3      	b.n	8007e6e <__assert_func+0x12>
 8007e86:	bf00      	nop
 8007e88:	20000018 	.word	0x20000018
 8007e8c:	08009710 	.word	0x08009710
 8007e90:	0800971d 	.word	0x0800971d
 8007e94:	0800974b 	.word	0x0800974b

08007e98 <_calloc_r>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	fba1 5402 	umull	r5, r4, r1, r2
 8007e9e:	b934      	cbnz	r4, 8007eae <_calloc_r+0x16>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7fe f9e3 	bl	800626c <_malloc_r>
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	b928      	cbnz	r0, 8007eb6 <_calloc_r+0x1e>
 8007eaa:	4630      	mov	r0, r6
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	220c      	movs	r2, #12
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	6002      	str	r2, [r0, #0]
 8007eb4:	e7f9      	b.n	8007eaa <_calloc_r+0x12>
 8007eb6:	462a      	mov	r2, r5
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7fd fa68 	bl	800538e <memset>
 8007ebe:	e7f4      	b.n	8007eaa <_calloc_r+0x12>

08007ec0 <rshift>:
 8007ec0:	6903      	ldr	r3, [r0, #16]
 8007ec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007eca:	f100 0414 	add.w	r4, r0, #20
 8007ece:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ed2:	dd46      	ble.n	8007f62 <rshift+0xa2>
 8007ed4:	f011 011f 	ands.w	r1, r1, #31
 8007ed8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007edc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ee0:	d10c      	bne.n	8007efc <rshift+0x3c>
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f100 0710 	add.w	r7, r0, #16
 8007ee8:	42b1      	cmp	r1, r6
 8007eea:	d335      	bcc.n	8007f58 <rshift+0x98>
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	1eea      	subs	r2, r5, #3
 8007ef2:	4296      	cmp	r6, r2
 8007ef4:	bf38      	it	cc
 8007ef6:	2300      	movcc	r3, #0
 8007ef8:	4423      	add	r3, r4
 8007efa:	e015      	b.n	8007f28 <rshift+0x68>
 8007efc:	46a1      	mov	r9, r4
 8007efe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f02:	f1c1 0820 	rsb	r8, r1, #32
 8007f06:	40cf      	lsrs	r7, r1
 8007f08:	f105 0e04 	add.w	lr, r5, #4
 8007f0c:	4576      	cmp	r6, lr
 8007f0e:	46f4      	mov	ip, lr
 8007f10:	d816      	bhi.n	8007f40 <rshift+0x80>
 8007f12:	1a9a      	subs	r2, r3, r2
 8007f14:	0092      	lsls	r2, r2, #2
 8007f16:	3a04      	subs	r2, #4
 8007f18:	3501      	adds	r5, #1
 8007f1a:	42ae      	cmp	r6, r5
 8007f1c:	bf38      	it	cc
 8007f1e:	2200      	movcc	r2, #0
 8007f20:	18a3      	adds	r3, r4, r2
 8007f22:	50a7      	str	r7, [r4, r2]
 8007f24:	b107      	cbz	r7, 8007f28 <rshift+0x68>
 8007f26:	3304      	adds	r3, #4
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	eba3 0204 	sub.w	r2, r3, r4
 8007f2e:	bf08      	it	eq
 8007f30:	2300      	moveq	r3, #0
 8007f32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f36:	6102      	str	r2, [r0, #16]
 8007f38:	bf08      	it	eq
 8007f3a:	6143      	streq	r3, [r0, #20]
 8007f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f40:	f8dc c000 	ldr.w	ip, [ip]
 8007f44:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f48:	ea4c 0707 	orr.w	r7, ip, r7
 8007f4c:	f849 7b04 	str.w	r7, [r9], #4
 8007f50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f54:	40cf      	lsrs	r7, r1
 8007f56:	e7d9      	b.n	8007f0c <rshift+0x4c>
 8007f58:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f5c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f60:	e7c2      	b.n	8007ee8 <rshift+0x28>
 8007f62:	4623      	mov	r3, r4
 8007f64:	e7e0      	b.n	8007f28 <rshift+0x68>

08007f66 <__hexdig_fun>:
 8007f66:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d802      	bhi.n	8007f74 <__hexdig_fun+0xe>
 8007f6e:	3820      	subs	r0, #32
 8007f70:	b2c0      	uxtb	r0, r0
 8007f72:	4770      	bx	lr
 8007f74:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007f78:	2b05      	cmp	r3, #5
 8007f7a:	d801      	bhi.n	8007f80 <__hexdig_fun+0x1a>
 8007f7c:	3847      	subs	r0, #71	@ 0x47
 8007f7e:	e7f7      	b.n	8007f70 <__hexdig_fun+0xa>
 8007f80:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007f84:	2b05      	cmp	r3, #5
 8007f86:	d801      	bhi.n	8007f8c <__hexdig_fun+0x26>
 8007f88:	3827      	subs	r0, #39	@ 0x27
 8007f8a:	e7f1      	b.n	8007f70 <__hexdig_fun+0xa>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4770      	bx	lr

08007f90 <__gethex>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	468a      	mov	sl, r1
 8007f96:	4690      	mov	r8, r2
 8007f98:	b085      	sub	sp, #20
 8007f9a:	9302      	str	r3, [sp, #8]
 8007f9c:	680b      	ldr	r3, [r1, #0]
 8007f9e:	9001      	str	r0, [sp, #4]
 8007fa0:	1c9c      	adds	r4, r3, #2
 8007fa2:	46a1      	mov	r9, r4
 8007fa4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007fa8:	2830      	cmp	r0, #48	@ 0x30
 8007faa:	d0fa      	beq.n	8007fa2 <__gethex+0x12>
 8007fac:	eba9 0303 	sub.w	r3, r9, r3
 8007fb0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007fb4:	f7ff ffd7 	bl	8007f66 <__hexdig_fun>
 8007fb8:	4605      	mov	r5, r0
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d168      	bne.n	8008090 <__gethex+0x100>
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	499f      	ldr	r1, [pc, #636]	@ (8008240 <__gethex+0x2b0>)
 8007fc4:	f7ff ff14 	bl	8007df0 <strncmp>
 8007fc8:	4607      	mov	r7, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d167      	bne.n	800809e <__gethex+0x10e>
 8007fce:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007fd2:	4626      	mov	r6, r4
 8007fd4:	f7ff ffc7 	bl	8007f66 <__hexdig_fun>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d062      	beq.n	80080a2 <__gethex+0x112>
 8007fdc:	4623      	mov	r3, r4
 8007fde:	7818      	ldrb	r0, [r3, #0]
 8007fe0:	4699      	mov	r9, r3
 8007fe2:	2830      	cmp	r0, #48	@ 0x30
 8007fe4:	f103 0301 	add.w	r3, r3, #1
 8007fe8:	d0f9      	beq.n	8007fde <__gethex+0x4e>
 8007fea:	f7ff ffbc 	bl	8007f66 <__hexdig_fun>
 8007fee:	fab0 f580 	clz	r5, r0
 8007ff2:	f04f 0b01 	mov.w	fp, #1
 8007ff6:	096d      	lsrs	r5, r5, #5
 8007ff8:	464a      	mov	r2, r9
 8007ffa:	4616      	mov	r6, r2
 8007ffc:	7830      	ldrb	r0, [r6, #0]
 8007ffe:	3201      	adds	r2, #1
 8008000:	f7ff ffb1 	bl	8007f66 <__hexdig_fun>
 8008004:	2800      	cmp	r0, #0
 8008006:	d1f8      	bne.n	8007ffa <__gethex+0x6a>
 8008008:	2201      	movs	r2, #1
 800800a:	4630      	mov	r0, r6
 800800c:	498c      	ldr	r1, [pc, #560]	@ (8008240 <__gethex+0x2b0>)
 800800e:	f7ff feef 	bl	8007df0 <strncmp>
 8008012:	2800      	cmp	r0, #0
 8008014:	d13f      	bne.n	8008096 <__gethex+0x106>
 8008016:	b944      	cbnz	r4, 800802a <__gethex+0x9a>
 8008018:	1c74      	adds	r4, r6, #1
 800801a:	4622      	mov	r2, r4
 800801c:	4616      	mov	r6, r2
 800801e:	7830      	ldrb	r0, [r6, #0]
 8008020:	3201      	adds	r2, #1
 8008022:	f7ff ffa0 	bl	8007f66 <__hexdig_fun>
 8008026:	2800      	cmp	r0, #0
 8008028:	d1f8      	bne.n	800801c <__gethex+0x8c>
 800802a:	1ba4      	subs	r4, r4, r6
 800802c:	00a7      	lsls	r7, r4, #2
 800802e:	7833      	ldrb	r3, [r6, #0]
 8008030:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008034:	2b50      	cmp	r3, #80	@ 0x50
 8008036:	d13e      	bne.n	80080b6 <__gethex+0x126>
 8008038:	7873      	ldrb	r3, [r6, #1]
 800803a:	2b2b      	cmp	r3, #43	@ 0x2b
 800803c:	d033      	beq.n	80080a6 <__gethex+0x116>
 800803e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008040:	d034      	beq.n	80080ac <__gethex+0x11c>
 8008042:	2400      	movs	r4, #0
 8008044:	1c71      	adds	r1, r6, #1
 8008046:	7808      	ldrb	r0, [r1, #0]
 8008048:	f7ff ff8d 	bl	8007f66 <__hexdig_fun>
 800804c:	1e43      	subs	r3, r0, #1
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b18      	cmp	r3, #24
 8008052:	d830      	bhi.n	80080b6 <__gethex+0x126>
 8008054:	f1a0 0210 	sub.w	r2, r0, #16
 8008058:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800805c:	f7ff ff83 	bl	8007f66 <__hexdig_fun>
 8008060:	f100 3cff 	add.w	ip, r0, #4294967295
 8008064:	fa5f fc8c 	uxtb.w	ip, ip
 8008068:	f1bc 0f18 	cmp.w	ip, #24
 800806c:	f04f 030a 	mov.w	r3, #10
 8008070:	d91e      	bls.n	80080b0 <__gethex+0x120>
 8008072:	b104      	cbz	r4, 8008076 <__gethex+0xe6>
 8008074:	4252      	negs	r2, r2
 8008076:	4417      	add	r7, r2
 8008078:	f8ca 1000 	str.w	r1, [sl]
 800807c:	b1ed      	cbz	r5, 80080ba <__gethex+0x12a>
 800807e:	f1bb 0f00 	cmp.w	fp, #0
 8008082:	bf0c      	ite	eq
 8008084:	2506      	moveq	r5, #6
 8008086:	2500      	movne	r5, #0
 8008088:	4628      	mov	r0, r5
 800808a:	b005      	add	sp, #20
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	2500      	movs	r5, #0
 8008092:	462c      	mov	r4, r5
 8008094:	e7b0      	b.n	8007ff8 <__gethex+0x68>
 8008096:	2c00      	cmp	r4, #0
 8008098:	d1c7      	bne.n	800802a <__gethex+0x9a>
 800809a:	4627      	mov	r7, r4
 800809c:	e7c7      	b.n	800802e <__gethex+0x9e>
 800809e:	464e      	mov	r6, r9
 80080a0:	462f      	mov	r7, r5
 80080a2:	2501      	movs	r5, #1
 80080a4:	e7c3      	b.n	800802e <__gethex+0x9e>
 80080a6:	2400      	movs	r4, #0
 80080a8:	1cb1      	adds	r1, r6, #2
 80080aa:	e7cc      	b.n	8008046 <__gethex+0xb6>
 80080ac:	2401      	movs	r4, #1
 80080ae:	e7fb      	b.n	80080a8 <__gethex+0x118>
 80080b0:	fb03 0002 	mla	r0, r3, r2, r0
 80080b4:	e7ce      	b.n	8008054 <__gethex+0xc4>
 80080b6:	4631      	mov	r1, r6
 80080b8:	e7de      	b.n	8008078 <__gethex+0xe8>
 80080ba:	4629      	mov	r1, r5
 80080bc:	eba6 0309 	sub.w	r3, r6, r9
 80080c0:	3b01      	subs	r3, #1
 80080c2:	2b07      	cmp	r3, #7
 80080c4:	dc0a      	bgt.n	80080dc <__gethex+0x14c>
 80080c6:	9801      	ldr	r0, [sp, #4]
 80080c8:	f7fe f95c 	bl	8006384 <_Balloc>
 80080cc:	4604      	mov	r4, r0
 80080ce:	b940      	cbnz	r0, 80080e2 <__gethex+0x152>
 80080d0:	4602      	mov	r2, r0
 80080d2:	21e4      	movs	r1, #228	@ 0xe4
 80080d4:	4b5b      	ldr	r3, [pc, #364]	@ (8008244 <__gethex+0x2b4>)
 80080d6:	485c      	ldr	r0, [pc, #368]	@ (8008248 <__gethex+0x2b8>)
 80080d8:	f7ff fec0 	bl	8007e5c <__assert_func>
 80080dc:	3101      	adds	r1, #1
 80080de:	105b      	asrs	r3, r3, #1
 80080e0:	e7ef      	b.n	80080c2 <__gethex+0x132>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f100 0a14 	add.w	sl, r0, #20
 80080e8:	4655      	mov	r5, sl
 80080ea:	469b      	mov	fp, r3
 80080ec:	45b1      	cmp	r9, r6
 80080ee:	d337      	bcc.n	8008160 <__gethex+0x1d0>
 80080f0:	f845 bb04 	str.w	fp, [r5], #4
 80080f4:	eba5 050a 	sub.w	r5, r5, sl
 80080f8:	10ad      	asrs	r5, r5, #2
 80080fa:	6125      	str	r5, [r4, #16]
 80080fc:	4658      	mov	r0, fp
 80080fe:	f7fe fa33 	bl	8006568 <__hi0bits>
 8008102:	016d      	lsls	r5, r5, #5
 8008104:	f8d8 6000 	ldr.w	r6, [r8]
 8008108:	1a2d      	subs	r5, r5, r0
 800810a:	42b5      	cmp	r5, r6
 800810c:	dd54      	ble.n	80081b8 <__gethex+0x228>
 800810e:	1bad      	subs	r5, r5, r6
 8008110:	4629      	mov	r1, r5
 8008112:	4620      	mov	r0, r4
 8008114:	f7fe fdb5 	bl	8006c82 <__any_on>
 8008118:	4681      	mov	r9, r0
 800811a:	b178      	cbz	r0, 800813c <__gethex+0x1ac>
 800811c:	f04f 0901 	mov.w	r9, #1
 8008120:	1e6b      	subs	r3, r5, #1
 8008122:	1159      	asrs	r1, r3, #5
 8008124:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008128:	f003 021f 	and.w	r2, r3, #31
 800812c:	fa09 f202 	lsl.w	r2, r9, r2
 8008130:	420a      	tst	r2, r1
 8008132:	d003      	beq.n	800813c <__gethex+0x1ac>
 8008134:	454b      	cmp	r3, r9
 8008136:	dc36      	bgt.n	80081a6 <__gethex+0x216>
 8008138:	f04f 0902 	mov.w	r9, #2
 800813c:	4629      	mov	r1, r5
 800813e:	4620      	mov	r0, r4
 8008140:	f7ff febe 	bl	8007ec0 <rshift>
 8008144:	442f      	add	r7, r5
 8008146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800814a:	42bb      	cmp	r3, r7
 800814c:	da42      	bge.n	80081d4 <__gethex+0x244>
 800814e:	4621      	mov	r1, r4
 8008150:	9801      	ldr	r0, [sp, #4]
 8008152:	f7fe f957 	bl	8006404 <_Bfree>
 8008156:	2300      	movs	r3, #0
 8008158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800815a:	25a3      	movs	r5, #163	@ 0xa3
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	e793      	b.n	8008088 <__gethex+0xf8>
 8008160:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008164:	2a2e      	cmp	r2, #46	@ 0x2e
 8008166:	d012      	beq.n	800818e <__gethex+0x1fe>
 8008168:	2b20      	cmp	r3, #32
 800816a:	d104      	bne.n	8008176 <__gethex+0x1e6>
 800816c:	f845 bb04 	str.w	fp, [r5], #4
 8008170:	f04f 0b00 	mov.w	fp, #0
 8008174:	465b      	mov	r3, fp
 8008176:	7830      	ldrb	r0, [r6, #0]
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	f7ff fef4 	bl	8007f66 <__hexdig_fun>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	f000 000f 	and.w	r0, r0, #15
 8008184:	4098      	lsls	r0, r3
 8008186:	ea4b 0b00 	orr.w	fp, fp, r0
 800818a:	3304      	adds	r3, #4
 800818c:	e7ae      	b.n	80080ec <__gethex+0x15c>
 800818e:	45b1      	cmp	r9, r6
 8008190:	d8ea      	bhi.n	8008168 <__gethex+0x1d8>
 8008192:	2201      	movs	r2, #1
 8008194:	4630      	mov	r0, r6
 8008196:	492a      	ldr	r1, [pc, #168]	@ (8008240 <__gethex+0x2b0>)
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	f7ff fe29 	bl	8007df0 <strncmp>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1e1      	bne.n	8008168 <__gethex+0x1d8>
 80081a4:	e7a2      	b.n	80080ec <__gethex+0x15c>
 80081a6:	4620      	mov	r0, r4
 80081a8:	1ea9      	subs	r1, r5, #2
 80081aa:	f7fe fd6a 	bl	8006c82 <__any_on>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0c2      	beq.n	8008138 <__gethex+0x1a8>
 80081b2:	f04f 0903 	mov.w	r9, #3
 80081b6:	e7c1      	b.n	800813c <__gethex+0x1ac>
 80081b8:	da09      	bge.n	80081ce <__gethex+0x23e>
 80081ba:	1b75      	subs	r5, r6, r5
 80081bc:	4621      	mov	r1, r4
 80081be:	462a      	mov	r2, r5
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	f7fe fb2f 	bl	8006824 <__lshift>
 80081c6:	4604      	mov	r4, r0
 80081c8:	1b7f      	subs	r7, r7, r5
 80081ca:	f100 0a14 	add.w	sl, r0, #20
 80081ce:	f04f 0900 	mov.w	r9, #0
 80081d2:	e7b8      	b.n	8008146 <__gethex+0x1b6>
 80081d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081d8:	42bd      	cmp	r5, r7
 80081da:	dd6f      	ble.n	80082bc <__gethex+0x32c>
 80081dc:	1bed      	subs	r5, r5, r7
 80081de:	42ae      	cmp	r6, r5
 80081e0:	dc34      	bgt.n	800824c <__gethex+0x2bc>
 80081e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d022      	beq.n	8008230 <__gethex+0x2a0>
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d024      	beq.n	8008238 <__gethex+0x2a8>
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d115      	bne.n	800821e <__gethex+0x28e>
 80081f2:	42ae      	cmp	r6, r5
 80081f4:	d113      	bne.n	800821e <__gethex+0x28e>
 80081f6:	2e01      	cmp	r6, #1
 80081f8:	d10b      	bne.n	8008212 <__gethex+0x282>
 80081fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081fe:	9a02      	ldr	r2, [sp, #8]
 8008200:	2562      	movs	r5, #98	@ 0x62
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	2301      	movs	r3, #1
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	f8ca 3000 	str.w	r3, [sl]
 800820c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800820e:	601c      	str	r4, [r3, #0]
 8008210:	e73a      	b.n	8008088 <__gethex+0xf8>
 8008212:	4620      	mov	r0, r4
 8008214:	1e71      	subs	r1, r6, #1
 8008216:	f7fe fd34 	bl	8006c82 <__any_on>
 800821a:	2800      	cmp	r0, #0
 800821c:	d1ed      	bne.n	80081fa <__gethex+0x26a>
 800821e:	4621      	mov	r1, r4
 8008220:	9801      	ldr	r0, [sp, #4]
 8008222:	f7fe f8ef 	bl	8006404 <_Bfree>
 8008226:	2300      	movs	r3, #0
 8008228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800822a:	2550      	movs	r5, #80	@ 0x50
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e72b      	b.n	8008088 <__gethex+0xf8>
 8008230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f3      	bne.n	800821e <__gethex+0x28e>
 8008236:	e7e0      	b.n	80081fa <__gethex+0x26a>
 8008238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1dd      	bne.n	80081fa <__gethex+0x26a>
 800823e:	e7ee      	b.n	800821e <__gethex+0x28e>
 8008240:	080096f5 	.word	0x080096f5
 8008244:	0800968b 	.word	0x0800968b
 8008248:	0800974c 	.word	0x0800974c
 800824c:	1e6f      	subs	r7, r5, #1
 800824e:	f1b9 0f00 	cmp.w	r9, #0
 8008252:	d130      	bne.n	80082b6 <__gethex+0x326>
 8008254:	b127      	cbz	r7, 8008260 <__gethex+0x2d0>
 8008256:	4639      	mov	r1, r7
 8008258:	4620      	mov	r0, r4
 800825a:	f7fe fd12 	bl	8006c82 <__any_on>
 800825e:	4681      	mov	r9, r0
 8008260:	2301      	movs	r3, #1
 8008262:	4629      	mov	r1, r5
 8008264:	1b76      	subs	r6, r6, r5
 8008266:	2502      	movs	r5, #2
 8008268:	117a      	asrs	r2, r7, #5
 800826a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800826e:	f007 071f 	and.w	r7, r7, #31
 8008272:	40bb      	lsls	r3, r7
 8008274:	4213      	tst	r3, r2
 8008276:	4620      	mov	r0, r4
 8008278:	bf18      	it	ne
 800827a:	f049 0902 	orrne.w	r9, r9, #2
 800827e:	f7ff fe1f 	bl	8007ec0 <rshift>
 8008282:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008286:	f1b9 0f00 	cmp.w	r9, #0
 800828a:	d047      	beq.n	800831c <__gethex+0x38c>
 800828c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d015      	beq.n	80082c0 <__gethex+0x330>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d017      	beq.n	80082c8 <__gethex+0x338>
 8008298:	2b01      	cmp	r3, #1
 800829a:	d109      	bne.n	80082b0 <__gethex+0x320>
 800829c:	f019 0f02 	tst.w	r9, #2
 80082a0:	d006      	beq.n	80082b0 <__gethex+0x320>
 80082a2:	f8da 3000 	ldr.w	r3, [sl]
 80082a6:	ea49 0903 	orr.w	r9, r9, r3
 80082aa:	f019 0f01 	tst.w	r9, #1
 80082ae:	d10e      	bne.n	80082ce <__gethex+0x33e>
 80082b0:	f045 0510 	orr.w	r5, r5, #16
 80082b4:	e032      	b.n	800831c <__gethex+0x38c>
 80082b6:	f04f 0901 	mov.w	r9, #1
 80082ba:	e7d1      	b.n	8008260 <__gethex+0x2d0>
 80082bc:	2501      	movs	r5, #1
 80082be:	e7e2      	b.n	8008286 <__gethex+0x2f6>
 80082c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082c2:	f1c3 0301 	rsb	r3, r3, #1
 80082c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <__gethex+0x320>
 80082ce:	f04f 0c00 	mov.w	ip, #0
 80082d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082d6:	f104 0314 	add.w	r3, r4, #20
 80082da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082ec:	d01b      	beq.n	8008326 <__gethex+0x396>
 80082ee:	3201      	adds	r2, #1
 80082f0:	6002      	str	r2, [r0, #0]
 80082f2:	2d02      	cmp	r5, #2
 80082f4:	f104 0314 	add.w	r3, r4, #20
 80082f8:	d13c      	bne.n	8008374 <__gethex+0x3e4>
 80082fa:	f8d8 2000 	ldr.w	r2, [r8]
 80082fe:	3a01      	subs	r2, #1
 8008300:	42b2      	cmp	r2, r6
 8008302:	d109      	bne.n	8008318 <__gethex+0x388>
 8008304:	2201      	movs	r2, #1
 8008306:	1171      	asrs	r1, r6, #5
 8008308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800830c:	f006 061f 	and.w	r6, r6, #31
 8008310:	fa02 f606 	lsl.w	r6, r2, r6
 8008314:	421e      	tst	r6, r3
 8008316:	d13a      	bne.n	800838e <__gethex+0x3fe>
 8008318:	f045 0520 	orr.w	r5, r5, #32
 800831c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800831e:	601c      	str	r4, [r3, #0]
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	601f      	str	r7, [r3, #0]
 8008324:	e6b0      	b.n	8008088 <__gethex+0xf8>
 8008326:	4299      	cmp	r1, r3
 8008328:	f843 cc04 	str.w	ip, [r3, #-4]
 800832c:	d8d9      	bhi.n	80082e2 <__gethex+0x352>
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	459b      	cmp	fp, r3
 8008332:	db17      	blt.n	8008364 <__gethex+0x3d4>
 8008334:	6861      	ldr	r1, [r4, #4]
 8008336:	9801      	ldr	r0, [sp, #4]
 8008338:	3101      	adds	r1, #1
 800833a:	f7fe f823 	bl	8006384 <_Balloc>
 800833e:	4681      	mov	r9, r0
 8008340:	b918      	cbnz	r0, 800834a <__gethex+0x3ba>
 8008342:	4602      	mov	r2, r0
 8008344:	2184      	movs	r1, #132	@ 0x84
 8008346:	4b19      	ldr	r3, [pc, #100]	@ (80083ac <__gethex+0x41c>)
 8008348:	e6c5      	b.n	80080d6 <__gethex+0x146>
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	f104 010c 	add.w	r1, r4, #12
 8008350:	3202      	adds	r2, #2
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	300c      	adds	r0, #12
 8008356:	f7ff fd6d 	bl	8007e34 <memcpy>
 800835a:	4621      	mov	r1, r4
 800835c:	9801      	ldr	r0, [sp, #4]
 800835e:	f7fe f851 	bl	8006404 <_Bfree>
 8008362:	464c      	mov	r4, r9
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	6122      	str	r2, [r4, #16]
 800836a:	2201      	movs	r2, #1
 800836c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008370:	615a      	str	r2, [r3, #20]
 8008372:	e7be      	b.n	80082f2 <__gethex+0x362>
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	455a      	cmp	r2, fp
 8008378:	dd0b      	ble.n	8008392 <__gethex+0x402>
 800837a:	2101      	movs	r1, #1
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff fd9f 	bl	8007ec0 <rshift>
 8008382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008386:	3701      	adds	r7, #1
 8008388:	42bb      	cmp	r3, r7
 800838a:	f6ff aee0 	blt.w	800814e <__gethex+0x1be>
 800838e:	2501      	movs	r5, #1
 8008390:	e7c2      	b.n	8008318 <__gethex+0x388>
 8008392:	f016 061f 	ands.w	r6, r6, #31
 8008396:	d0fa      	beq.n	800838e <__gethex+0x3fe>
 8008398:	4453      	add	r3, sl
 800839a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800839e:	f7fe f8e3 	bl	8006568 <__hi0bits>
 80083a2:	f1c6 0620 	rsb	r6, r6, #32
 80083a6:	42b0      	cmp	r0, r6
 80083a8:	dbe7      	blt.n	800837a <__gethex+0x3ea>
 80083aa:	e7f0      	b.n	800838e <__gethex+0x3fe>
 80083ac:	0800968b 	.word	0x0800968b

080083b0 <L_shift>:
 80083b0:	f1c2 0208 	rsb	r2, r2, #8
 80083b4:	0092      	lsls	r2, r2, #2
 80083b6:	b570      	push	{r4, r5, r6, lr}
 80083b8:	f1c2 0620 	rsb	r6, r2, #32
 80083bc:	6843      	ldr	r3, [r0, #4]
 80083be:	6804      	ldr	r4, [r0, #0]
 80083c0:	fa03 f506 	lsl.w	r5, r3, r6
 80083c4:	432c      	orrs	r4, r5
 80083c6:	40d3      	lsrs	r3, r2
 80083c8:	6004      	str	r4, [r0, #0]
 80083ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80083ce:	4288      	cmp	r0, r1
 80083d0:	d3f4      	bcc.n	80083bc <L_shift+0xc>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}

080083d4 <__match>:
 80083d4:	b530      	push	{r4, r5, lr}
 80083d6:	6803      	ldr	r3, [r0, #0]
 80083d8:	3301      	adds	r3, #1
 80083da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083de:	b914      	cbnz	r4, 80083e6 <__match+0x12>
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	2001      	movs	r0, #1
 80083e4:	bd30      	pop	{r4, r5, pc}
 80083e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80083ee:	2d19      	cmp	r5, #25
 80083f0:	bf98      	it	ls
 80083f2:	3220      	addls	r2, #32
 80083f4:	42a2      	cmp	r2, r4
 80083f6:	d0f0      	beq.n	80083da <__match+0x6>
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7f3      	b.n	80083e4 <__match+0x10>

080083fc <__hexnan>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	2500      	movs	r5, #0
 8008402:	680b      	ldr	r3, [r1, #0]
 8008404:	4682      	mov	sl, r0
 8008406:	115e      	asrs	r6, r3, #5
 8008408:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800840c:	f013 031f 	ands.w	r3, r3, #31
 8008410:	bf18      	it	ne
 8008412:	3604      	addne	r6, #4
 8008414:	1f37      	subs	r7, r6, #4
 8008416:	4690      	mov	r8, r2
 8008418:	46b9      	mov	r9, r7
 800841a:	463c      	mov	r4, r7
 800841c:	46ab      	mov	fp, r5
 800841e:	b087      	sub	sp, #28
 8008420:	6801      	ldr	r1, [r0, #0]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	f846 5c04 	str.w	r5, [r6, #-4]
 8008428:	9502      	str	r5, [sp, #8]
 800842a:	784a      	ldrb	r2, [r1, #1]
 800842c:	1c4b      	adds	r3, r1, #1
 800842e:	9303      	str	r3, [sp, #12]
 8008430:	b342      	cbz	r2, 8008484 <__hexnan+0x88>
 8008432:	4610      	mov	r0, r2
 8008434:	9105      	str	r1, [sp, #20]
 8008436:	9204      	str	r2, [sp, #16]
 8008438:	f7ff fd95 	bl	8007f66 <__hexdig_fun>
 800843c:	2800      	cmp	r0, #0
 800843e:	d151      	bne.n	80084e4 <__hexnan+0xe8>
 8008440:	9a04      	ldr	r2, [sp, #16]
 8008442:	9905      	ldr	r1, [sp, #20]
 8008444:	2a20      	cmp	r2, #32
 8008446:	d818      	bhi.n	800847a <__hexnan+0x7e>
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	459b      	cmp	fp, r3
 800844c:	dd13      	ble.n	8008476 <__hexnan+0x7a>
 800844e:	454c      	cmp	r4, r9
 8008450:	d206      	bcs.n	8008460 <__hexnan+0x64>
 8008452:	2d07      	cmp	r5, #7
 8008454:	dc04      	bgt.n	8008460 <__hexnan+0x64>
 8008456:	462a      	mov	r2, r5
 8008458:	4649      	mov	r1, r9
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff ffa8 	bl	80083b0 <L_shift>
 8008460:	4544      	cmp	r4, r8
 8008462:	d952      	bls.n	800850a <__hexnan+0x10e>
 8008464:	2300      	movs	r3, #0
 8008466:	f1a4 0904 	sub.w	r9, r4, #4
 800846a:	f844 3c04 	str.w	r3, [r4, #-4]
 800846e:	461d      	mov	r5, r3
 8008470:	464c      	mov	r4, r9
 8008472:	f8cd b008 	str.w	fp, [sp, #8]
 8008476:	9903      	ldr	r1, [sp, #12]
 8008478:	e7d7      	b.n	800842a <__hexnan+0x2e>
 800847a:	2a29      	cmp	r2, #41	@ 0x29
 800847c:	d157      	bne.n	800852e <__hexnan+0x132>
 800847e:	3102      	adds	r1, #2
 8008480:	f8ca 1000 	str.w	r1, [sl]
 8008484:	f1bb 0f00 	cmp.w	fp, #0
 8008488:	d051      	beq.n	800852e <__hexnan+0x132>
 800848a:	454c      	cmp	r4, r9
 800848c:	d206      	bcs.n	800849c <__hexnan+0xa0>
 800848e:	2d07      	cmp	r5, #7
 8008490:	dc04      	bgt.n	800849c <__hexnan+0xa0>
 8008492:	462a      	mov	r2, r5
 8008494:	4649      	mov	r1, r9
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff ff8a 	bl	80083b0 <L_shift>
 800849c:	4544      	cmp	r4, r8
 800849e:	d936      	bls.n	800850e <__hexnan+0x112>
 80084a0:	4623      	mov	r3, r4
 80084a2:	f1a8 0204 	sub.w	r2, r8, #4
 80084a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80084aa:	429f      	cmp	r7, r3
 80084ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80084b0:	d2f9      	bcs.n	80084a6 <__hexnan+0xaa>
 80084b2:	1b3b      	subs	r3, r7, r4
 80084b4:	f023 0303 	bic.w	r3, r3, #3
 80084b8:	3304      	adds	r3, #4
 80084ba:	3401      	adds	r4, #1
 80084bc:	3e03      	subs	r6, #3
 80084be:	42b4      	cmp	r4, r6
 80084c0:	bf88      	it	hi
 80084c2:	2304      	movhi	r3, #4
 80084c4:	2200      	movs	r2, #0
 80084c6:	4443      	add	r3, r8
 80084c8:	f843 2b04 	str.w	r2, [r3], #4
 80084cc:	429f      	cmp	r7, r3
 80084ce:	d2fb      	bcs.n	80084c8 <__hexnan+0xcc>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	b91b      	cbnz	r3, 80084dc <__hexnan+0xe0>
 80084d4:	4547      	cmp	r7, r8
 80084d6:	d128      	bne.n	800852a <__hexnan+0x12e>
 80084d8:	2301      	movs	r3, #1
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	2005      	movs	r0, #5
 80084de:	b007      	add	sp, #28
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	3501      	adds	r5, #1
 80084e6:	2d08      	cmp	r5, #8
 80084e8:	f10b 0b01 	add.w	fp, fp, #1
 80084ec:	dd06      	ble.n	80084fc <__hexnan+0x100>
 80084ee:	4544      	cmp	r4, r8
 80084f0:	d9c1      	bls.n	8008476 <__hexnan+0x7a>
 80084f2:	2300      	movs	r3, #0
 80084f4:	2501      	movs	r5, #1
 80084f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80084fa:	3c04      	subs	r4, #4
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	f000 000f 	and.w	r0, r0, #15
 8008502:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008506:	6020      	str	r0, [r4, #0]
 8008508:	e7b5      	b.n	8008476 <__hexnan+0x7a>
 800850a:	2508      	movs	r5, #8
 800850c:	e7b3      	b.n	8008476 <__hexnan+0x7a>
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0dd      	beq.n	80084d0 <__hexnan+0xd4>
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	f1c3 0320 	rsb	r3, r3, #32
 800851c:	40da      	lsrs	r2, r3
 800851e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008522:	4013      	ands	r3, r2
 8008524:	f846 3c04 	str.w	r3, [r6, #-4]
 8008528:	e7d2      	b.n	80084d0 <__hexnan+0xd4>
 800852a:	3f04      	subs	r7, #4
 800852c:	e7d0      	b.n	80084d0 <__hexnan+0xd4>
 800852e:	2004      	movs	r0, #4
 8008530:	e7d5      	b.n	80084de <__hexnan+0xe2>

08008532 <__ascii_mbtowc>:
 8008532:	b082      	sub	sp, #8
 8008534:	b901      	cbnz	r1, 8008538 <__ascii_mbtowc+0x6>
 8008536:	a901      	add	r1, sp, #4
 8008538:	b142      	cbz	r2, 800854c <__ascii_mbtowc+0x1a>
 800853a:	b14b      	cbz	r3, 8008550 <__ascii_mbtowc+0x1e>
 800853c:	7813      	ldrb	r3, [r2, #0]
 800853e:	600b      	str	r3, [r1, #0]
 8008540:	7812      	ldrb	r2, [r2, #0]
 8008542:	1e10      	subs	r0, r2, #0
 8008544:	bf18      	it	ne
 8008546:	2001      	movne	r0, #1
 8008548:	b002      	add	sp, #8
 800854a:	4770      	bx	lr
 800854c:	4610      	mov	r0, r2
 800854e:	e7fb      	b.n	8008548 <__ascii_mbtowc+0x16>
 8008550:	f06f 0001 	mvn.w	r0, #1
 8008554:	e7f8      	b.n	8008548 <__ascii_mbtowc+0x16>

08008556 <_realloc_r>:
 8008556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855a:	4607      	mov	r7, r0
 800855c:	4614      	mov	r4, r2
 800855e:	460d      	mov	r5, r1
 8008560:	b921      	cbnz	r1, 800856c <_realloc_r+0x16>
 8008562:	4611      	mov	r1, r2
 8008564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008568:	f7fd be80 	b.w	800626c <_malloc_r>
 800856c:	b92a      	cbnz	r2, 800857a <_realloc_r+0x24>
 800856e:	f7fd fe0b 	bl	8006188 <_free_r>
 8008572:	4625      	mov	r5, r4
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857a:	f000 f840 	bl	80085fe <_malloc_usable_size_r>
 800857e:	4284      	cmp	r4, r0
 8008580:	4606      	mov	r6, r0
 8008582:	d802      	bhi.n	800858a <_realloc_r+0x34>
 8008584:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008588:	d8f4      	bhi.n	8008574 <_realloc_r+0x1e>
 800858a:	4621      	mov	r1, r4
 800858c:	4638      	mov	r0, r7
 800858e:	f7fd fe6d 	bl	800626c <_malloc_r>
 8008592:	4680      	mov	r8, r0
 8008594:	b908      	cbnz	r0, 800859a <_realloc_r+0x44>
 8008596:	4645      	mov	r5, r8
 8008598:	e7ec      	b.n	8008574 <_realloc_r+0x1e>
 800859a:	42b4      	cmp	r4, r6
 800859c:	4622      	mov	r2, r4
 800859e:	4629      	mov	r1, r5
 80085a0:	bf28      	it	cs
 80085a2:	4632      	movcs	r2, r6
 80085a4:	f7ff fc46 	bl	8007e34 <memcpy>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4638      	mov	r0, r7
 80085ac:	f7fd fdec 	bl	8006188 <_free_r>
 80085b0:	e7f1      	b.n	8008596 <_realloc_r+0x40>

080085b2 <__ascii_wctomb>:
 80085b2:	4603      	mov	r3, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	b141      	cbz	r1, 80085ca <__ascii_wctomb+0x18>
 80085b8:	2aff      	cmp	r2, #255	@ 0xff
 80085ba:	d904      	bls.n	80085c6 <__ascii_wctomb+0x14>
 80085bc:	228a      	movs	r2, #138	@ 0x8a
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	4770      	bx	lr
 80085c6:	2001      	movs	r0, #1
 80085c8:	700a      	strb	r2, [r1, #0]
 80085ca:	4770      	bx	lr

080085cc <fiprintf>:
 80085cc:	b40e      	push	{r1, r2, r3}
 80085ce:	b503      	push	{r0, r1, lr}
 80085d0:	4601      	mov	r1, r0
 80085d2:	ab03      	add	r3, sp, #12
 80085d4:	4805      	ldr	r0, [pc, #20]	@ (80085ec <fiprintf+0x20>)
 80085d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	f000 f83d 	bl	800865c <_vfiprintf_r>
 80085e2:	b002      	add	sp, #8
 80085e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e8:	b003      	add	sp, #12
 80085ea:	4770      	bx	lr
 80085ec:	20000018 	.word	0x20000018

080085f0 <abort>:
 80085f0:	2006      	movs	r0, #6
 80085f2:	b508      	push	{r3, lr}
 80085f4:	f000 fa06 	bl	8008a04 <raise>
 80085f8:	2001      	movs	r0, #1
 80085fa:	f7f9 ff9c 	bl	8002536 <_exit>

080085fe <_malloc_usable_size_r>:
 80085fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008602:	1f18      	subs	r0, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbc      	itt	lt
 8008608:	580b      	ldrlt	r3, [r1, r0]
 800860a:	18c0      	addlt	r0, r0, r3
 800860c:	4770      	bx	lr

0800860e <__sfputc_r>:
 800860e:	6893      	ldr	r3, [r2, #8]
 8008610:	b410      	push	{r4}
 8008612:	3b01      	subs	r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	6093      	str	r3, [r2, #8]
 8008618:	da07      	bge.n	800862a <__sfputc_r+0x1c>
 800861a:	6994      	ldr	r4, [r2, #24]
 800861c:	42a3      	cmp	r3, r4
 800861e:	db01      	blt.n	8008624 <__sfputc_r+0x16>
 8008620:	290a      	cmp	r1, #10
 8008622:	d102      	bne.n	800862a <__sfputc_r+0x1c>
 8008624:	bc10      	pop	{r4}
 8008626:	f000 b931 	b.w	800888c <__swbuf_r>
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	1c58      	adds	r0, r3, #1
 800862e:	6010      	str	r0, [r2, #0]
 8008630:	7019      	strb	r1, [r3, #0]
 8008632:	4608      	mov	r0, r1
 8008634:	bc10      	pop	{r4}
 8008636:	4770      	bx	lr

08008638 <__sfputs_r>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	4614      	mov	r4, r2
 8008640:	18d5      	adds	r5, r2, r3
 8008642:	42ac      	cmp	r4, r5
 8008644:	d101      	bne.n	800864a <__sfputs_r+0x12>
 8008646:	2000      	movs	r0, #0
 8008648:	e007      	b.n	800865a <__sfputs_r+0x22>
 800864a:	463a      	mov	r2, r7
 800864c:	4630      	mov	r0, r6
 800864e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008652:	f7ff ffdc 	bl	800860e <__sfputc_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d1f3      	bne.n	8008642 <__sfputs_r+0xa>
 800865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800865c <_vfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	460d      	mov	r5, r1
 8008662:	4614      	mov	r4, r2
 8008664:	4698      	mov	r8, r3
 8008666:	4606      	mov	r6, r0
 8008668:	b09d      	sub	sp, #116	@ 0x74
 800866a:	b118      	cbz	r0, 8008674 <_vfiprintf_r+0x18>
 800866c:	6a03      	ldr	r3, [r0, #32]
 800866e:	b90b      	cbnz	r3, 8008674 <_vfiprintf_r+0x18>
 8008670:	f7fc fdf2 	bl	8005258 <__sinit>
 8008674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008676:	07d9      	lsls	r1, r3, #31
 8008678:	d405      	bmi.n	8008686 <_vfiprintf_r+0x2a>
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	059a      	lsls	r2, r3, #22
 800867e:	d402      	bmi.n	8008686 <_vfiprintf_r+0x2a>
 8008680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008682:	f7fc ff10 	bl	80054a6 <__retarget_lock_acquire_recursive>
 8008686:	89ab      	ldrh	r3, [r5, #12]
 8008688:	071b      	lsls	r3, r3, #28
 800868a:	d501      	bpl.n	8008690 <_vfiprintf_r+0x34>
 800868c:	692b      	ldr	r3, [r5, #16]
 800868e:	b99b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x5c>
 8008690:	4629      	mov	r1, r5
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f938 	bl	8008908 <__swsetup_r>
 8008698:	b170      	cbz	r0, 80086b8 <_vfiprintf_r+0x5c>
 800869a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800869c:	07dc      	lsls	r4, r3, #31
 800869e:	d504      	bpl.n	80086aa <_vfiprintf_r+0x4e>
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	b01d      	add	sp, #116	@ 0x74
 80086a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	0598      	lsls	r0, r3, #22
 80086ae:	d4f7      	bmi.n	80086a0 <_vfiprintf_r+0x44>
 80086b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086b2:	f7fc fef9 	bl	80054a8 <__retarget_lock_release_recursive>
 80086b6:	e7f3      	b.n	80086a0 <_vfiprintf_r+0x44>
 80086b8:	2300      	movs	r3, #0
 80086ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80086bc:	2320      	movs	r3, #32
 80086be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086c2:	2330      	movs	r3, #48	@ 0x30
 80086c4:	f04f 0901 	mov.w	r9, #1
 80086c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80086cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008878 <_vfiprintf_r+0x21c>
 80086d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086d4:	4623      	mov	r3, r4
 80086d6:	469a      	mov	sl, r3
 80086d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086dc:	b10a      	cbz	r2, 80086e2 <_vfiprintf_r+0x86>
 80086de:	2a25      	cmp	r2, #37	@ 0x25
 80086e0:	d1f9      	bne.n	80086d6 <_vfiprintf_r+0x7a>
 80086e2:	ebba 0b04 	subs.w	fp, sl, r4
 80086e6:	d00b      	beq.n	8008700 <_vfiprintf_r+0xa4>
 80086e8:	465b      	mov	r3, fp
 80086ea:	4622      	mov	r2, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7ff ffa2 	bl	8008638 <__sfputs_r>
 80086f4:	3001      	adds	r0, #1
 80086f6:	f000 80a7 	beq.w	8008848 <_vfiprintf_r+0x1ec>
 80086fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086fc:	445a      	add	r2, fp
 80086fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008700:	f89a 3000 	ldrb.w	r3, [sl]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 809f 	beq.w	8008848 <_vfiprintf_r+0x1ec>
 800870a:	2300      	movs	r3, #0
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008714:	f10a 0a01 	add.w	sl, sl, #1
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	9307      	str	r3, [sp, #28]
 800871c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008720:	931a      	str	r3, [sp, #104]	@ 0x68
 8008722:	4654      	mov	r4, sl
 8008724:	2205      	movs	r2, #5
 8008726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872a:	4853      	ldr	r0, [pc, #332]	@ (8008878 <_vfiprintf_r+0x21c>)
 800872c:	f7fc febd 	bl	80054aa <memchr>
 8008730:	9a04      	ldr	r2, [sp, #16]
 8008732:	b9d8      	cbnz	r0, 800876c <_vfiprintf_r+0x110>
 8008734:	06d1      	lsls	r1, r2, #27
 8008736:	bf44      	itt	mi
 8008738:	2320      	movmi	r3, #32
 800873a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800873e:	0713      	lsls	r3, r2, #28
 8008740:	bf44      	itt	mi
 8008742:	232b      	movmi	r3, #43	@ 0x2b
 8008744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008748:	f89a 3000 	ldrb.w	r3, [sl]
 800874c:	2b2a      	cmp	r3, #42	@ 0x2a
 800874e:	d015      	beq.n	800877c <_vfiprintf_r+0x120>
 8008750:	4654      	mov	r4, sl
 8008752:	2000      	movs	r0, #0
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	9a07      	ldr	r2, [sp, #28]
 800875a:	4621      	mov	r1, r4
 800875c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008760:	3b30      	subs	r3, #48	@ 0x30
 8008762:	2b09      	cmp	r3, #9
 8008764:	d94b      	bls.n	80087fe <_vfiprintf_r+0x1a2>
 8008766:	b1b0      	cbz	r0, 8008796 <_vfiprintf_r+0x13a>
 8008768:	9207      	str	r2, [sp, #28]
 800876a:	e014      	b.n	8008796 <_vfiprintf_r+0x13a>
 800876c:	eba0 0308 	sub.w	r3, r0, r8
 8008770:	fa09 f303 	lsl.w	r3, r9, r3
 8008774:	4313      	orrs	r3, r2
 8008776:	46a2      	mov	sl, r4
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	e7d2      	b.n	8008722 <_vfiprintf_r+0xc6>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1d19      	adds	r1, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	9103      	str	r1, [sp, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfbb      	ittet	lt
 8008788:	425b      	neglt	r3, r3
 800878a:	f042 0202 	orrlt.w	r2, r2, #2
 800878e:	9307      	strge	r3, [sp, #28]
 8008790:	9307      	strlt	r3, [sp, #28]
 8008792:	bfb8      	it	lt
 8008794:	9204      	strlt	r2, [sp, #16]
 8008796:	7823      	ldrb	r3, [r4, #0]
 8008798:	2b2e      	cmp	r3, #46	@ 0x2e
 800879a:	d10a      	bne.n	80087b2 <_vfiprintf_r+0x156>
 800879c:	7863      	ldrb	r3, [r4, #1]
 800879e:	2b2a      	cmp	r3, #42	@ 0x2a
 80087a0:	d132      	bne.n	8008808 <_vfiprintf_r+0x1ac>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	3402      	adds	r4, #2
 80087a6:	1d1a      	adds	r2, r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	9203      	str	r2, [sp, #12]
 80087ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087b0:	9305      	str	r3, [sp, #20]
 80087b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800887c <_vfiprintf_r+0x220>
 80087b6:	2203      	movs	r2, #3
 80087b8:	4650      	mov	r0, sl
 80087ba:	7821      	ldrb	r1, [r4, #0]
 80087bc:	f7fc fe75 	bl	80054aa <memchr>
 80087c0:	b138      	cbz	r0, 80087d2 <_vfiprintf_r+0x176>
 80087c2:	2240      	movs	r2, #64	@ 0x40
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	4082      	lsls	r2, r0
 80087cc:	4313      	orrs	r3, r2
 80087ce:	3401      	adds	r4, #1
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d6:	2206      	movs	r2, #6
 80087d8:	4829      	ldr	r0, [pc, #164]	@ (8008880 <_vfiprintf_r+0x224>)
 80087da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087de:	f7fc fe64 	bl	80054aa <memchr>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d03f      	beq.n	8008866 <_vfiprintf_r+0x20a>
 80087e6:	4b27      	ldr	r3, [pc, #156]	@ (8008884 <_vfiprintf_r+0x228>)
 80087e8:	bb1b      	cbnz	r3, 8008832 <_vfiprintf_r+0x1d6>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	3307      	adds	r3, #7
 80087ee:	f023 0307 	bic.w	r3, r3, #7
 80087f2:	3308      	adds	r3, #8
 80087f4:	9303      	str	r3, [sp, #12]
 80087f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f8:	443b      	add	r3, r7
 80087fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fc:	e76a      	b.n	80086d4 <_vfiprintf_r+0x78>
 80087fe:	460c      	mov	r4, r1
 8008800:	2001      	movs	r0, #1
 8008802:	fb0c 3202 	mla	r2, ip, r2, r3
 8008806:	e7a8      	b.n	800875a <_vfiprintf_r+0xfe>
 8008808:	2300      	movs	r3, #0
 800880a:	f04f 0c0a 	mov.w	ip, #10
 800880e:	4619      	mov	r1, r3
 8008810:	3401      	adds	r4, #1
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	4620      	mov	r0, r4
 8008816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881a:	3a30      	subs	r2, #48	@ 0x30
 800881c:	2a09      	cmp	r2, #9
 800881e:	d903      	bls.n	8008828 <_vfiprintf_r+0x1cc>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0c6      	beq.n	80087b2 <_vfiprintf_r+0x156>
 8008824:	9105      	str	r1, [sp, #20]
 8008826:	e7c4      	b.n	80087b2 <_vfiprintf_r+0x156>
 8008828:	4604      	mov	r4, r0
 800882a:	2301      	movs	r3, #1
 800882c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008830:	e7f0      	b.n	8008814 <_vfiprintf_r+0x1b8>
 8008832:	ab03      	add	r3, sp, #12
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	462a      	mov	r2, r5
 8008838:	4630      	mov	r0, r6
 800883a:	4b13      	ldr	r3, [pc, #76]	@ (8008888 <_vfiprintf_r+0x22c>)
 800883c:	a904      	add	r1, sp, #16
 800883e:	f7fb feb9 	bl	80045b4 <_printf_float>
 8008842:	4607      	mov	r7, r0
 8008844:	1c78      	adds	r0, r7, #1
 8008846:	d1d6      	bne.n	80087f6 <_vfiprintf_r+0x19a>
 8008848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800884a:	07d9      	lsls	r1, r3, #31
 800884c:	d405      	bmi.n	800885a <_vfiprintf_r+0x1fe>
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	059a      	lsls	r2, r3, #22
 8008852:	d402      	bmi.n	800885a <_vfiprintf_r+0x1fe>
 8008854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008856:	f7fc fe27 	bl	80054a8 <__retarget_lock_release_recursive>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	065b      	lsls	r3, r3, #25
 800885e:	f53f af1f 	bmi.w	80086a0 <_vfiprintf_r+0x44>
 8008862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008864:	e71e      	b.n	80086a4 <_vfiprintf_r+0x48>
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4630      	mov	r0, r6
 800886e:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <_vfiprintf_r+0x22c>)
 8008870:	a904      	add	r1, sp, #16
 8008872:	f7fc f93d 	bl	8004af0 <_printf_i>
 8008876:	e7e4      	b.n	8008842 <_vfiprintf_r+0x1e6>
 8008878:	080096f7 	.word	0x080096f7
 800887c:	080096fd 	.word	0x080096fd
 8008880:	08009701 	.word	0x08009701
 8008884:	080045b5 	.word	0x080045b5
 8008888:	08008639 	.word	0x08008639

0800888c <__swbuf_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	460e      	mov	r6, r1
 8008890:	4614      	mov	r4, r2
 8008892:	4605      	mov	r5, r0
 8008894:	b118      	cbz	r0, 800889e <__swbuf_r+0x12>
 8008896:	6a03      	ldr	r3, [r0, #32]
 8008898:	b90b      	cbnz	r3, 800889e <__swbuf_r+0x12>
 800889a:	f7fc fcdd 	bl	8005258 <__sinit>
 800889e:	69a3      	ldr	r3, [r4, #24]
 80088a0:	60a3      	str	r3, [r4, #8]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	071a      	lsls	r2, r3, #28
 80088a6:	d501      	bpl.n	80088ac <__swbuf_r+0x20>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b943      	cbnz	r3, 80088be <__swbuf_r+0x32>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f82a 	bl	8008908 <__swsetup_r>
 80088b4:	b118      	cbz	r0, 80088be <__swbuf_r+0x32>
 80088b6:	f04f 37ff 	mov.w	r7, #4294967295
 80088ba:	4638      	mov	r0, r7
 80088bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	6922      	ldr	r2, [r4, #16]
 80088c2:	b2f6      	uxtb	r6, r6
 80088c4:	1a98      	subs	r0, r3, r2
 80088c6:	6963      	ldr	r3, [r4, #20]
 80088c8:	4637      	mov	r7, r6
 80088ca:	4283      	cmp	r3, r0
 80088cc:	dc05      	bgt.n	80088da <__swbuf_r+0x4e>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff fa4b 	bl	8007d6c <_fflush_r>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d1ed      	bne.n	80088b6 <__swbuf_r+0x2a>
 80088da:	68a3      	ldr	r3, [r4, #8]
 80088dc:	3b01      	subs	r3, #1
 80088de:	60a3      	str	r3, [r4, #8]
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	6022      	str	r2, [r4, #0]
 80088e6:	701e      	strb	r6, [r3, #0]
 80088e8:	6962      	ldr	r2, [r4, #20]
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d004      	beq.n	80088fa <__swbuf_r+0x6e>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d5e1      	bpl.n	80088ba <__swbuf_r+0x2e>
 80088f6:	2e0a      	cmp	r6, #10
 80088f8:	d1df      	bne.n	80088ba <__swbuf_r+0x2e>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f7ff fa35 	bl	8007d6c <_fflush_r>
 8008902:	2800      	cmp	r0, #0
 8008904:	d0d9      	beq.n	80088ba <__swbuf_r+0x2e>
 8008906:	e7d6      	b.n	80088b6 <__swbuf_r+0x2a>

08008908 <__swsetup_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4b29      	ldr	r3, [pc, #164]	@ (80089b0 <__swsetup_r+0xa8>)
 800890c:	4605      	mov	r5, r0
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	460c      	mov	r4, r1
 8008912:	b118      	cbz	r0, 800891c <__swsetup_r+0x14>
 8008914:	6a03      	ldr	r3, [r0, #32]
 8008916:	b90b      	cbnz	r3, 800891c <__swsetup_r+0x14>
 8008918:	f7fc fc9e 	bl	8005258 <__sinit>
 800891c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008920:	0719      	lsls	r1, r3, #28
 8008922:	d422      	bmi.n	800896a <__swsetup_r+0x62>
 8008924:	06da      	lsls	r2, r3, #27
 8008926:	d407      	bmi.n	8008938 <__swsetup_r+0x30>
 8008928:	2209      	movs	r2, #9
 800892a:	602a      	str	r2, [r5, #0]
 800892c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	e033      	b.n	80089a0 <__swsetup_r+0x98>
 8008938:	0758      	lsls	r0, r3, #29
 800893a:	d512      	bpl.n	8008962 <__swsetup_r+0x5a>
 800893c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800893e:	b141      	cbz	r1, 8008952 <__swsetup_r+0x4a>
 8008940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008944:	4299      	cmp	r1, r3
 8008946:	d002      	beq.n	800894e <__swsetup_r+0x46>
 8008948:	4628      	mov	r0, r5
 800894a:	f7fd fc1d 	bl	8006188 <_free_r>
 800894e:	2300      	movs	r3, #0
 8008950:	6363      	str	r3, [r4, #52]	@ 0x34
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	2300      	movs	r3, #0
 800895c:	6063      	str	r3, [r4, #4]
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f043 0308 	orr.w	r3, r3, #8
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	b94b      	cbnz	r3, 8008982 <__swsetup_r+0x7a>
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008978:	d003      	beq.n	8008982 <__swsetup_r+0x7a>
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f882 	bl	8008a86 <__smakebuf_r>
 8008982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008986:	f013 0201 	ands.w	r2, r3, #1
 800898a:	d00a      	beq.n	80089a2 <__swsetup_r+0x9a>
 800898c:	2200      	movs	r2, #0
 800898e:	60a2      	str	r2, [r4, #8]
 8008990:	6962      	ldr	r2, [r4, #20]
 8008992:	4252      	negs	r2, r2
 8008994:	61a2      	str	r2, [r4, #24]
 8008996:	6922      	ldr	r2, [r4, #16]
 8008998:	b942      	cbnz	r2, 80089ac <__swsetup_r+0xa4>
 800899a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800899e:	d1c5      	bne.n	800892c <__swsetup_r+0x24>
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	0799      	lsls	r1, r3, #30
 80089a4:	bf58      	it	pl
 80089a6:	6962      	ldrpl	r2, [r4, #20]
 80089a8:	60a2      	str	r2, [r4, #8]
 80089aa:	e7f4      	b.n	8008996 <__swsetup_r+0x8e>
 80089ac:	2000      	movs	r0, #0
 80089ae:	e7f7      	b.n	80089a0 <__swsetup_r+0x98>
 80089b0:	20000018 	.word	0x20000018

080089b4 <_raise_r>:
 80089b4:	291f      	cmp	r1, #31
 80089b6:	b538      	push	{r3, r4, r5, lr}
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	d904      	bls.n	80089c8 <_raise_r+0x14>
 80089be:	2316      	movs	r3, #22
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089ca:	b112      	cbz	r2, 80089d2 <_raise_r+0x1e>
 80089cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d0:	b94b      	cbnz	r3, 80089e6 <_raise_r+0x32>
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 f830 	bl	8008a38 <_getpid_r>
 80089d8:	4622      	mov	r2, r4
 80089da:	4601      	mov	r1, r0
 80089dc:	4628      	mov	r0, r5
 80089de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e2:	f000 b817 	b.w	8008a14 <_kill_r>
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d00a      	beq.n	8008a00 <_raise_r+0x4c>
 80089ea:	1c59      	adds	r1, r3, #1
 80089ec:	d103      	bne.n	80089f6 <_raise_r+0x42>
 80089ee:	2316      	movs	r3, #22
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	2001      	movs	r0, #1
 80089f4:	e7e7      	b.n	80089c6 <_raise_r+0x12>
 80089f6:	2100      	movs	r1, #0
 80089f8:	4620      	mov	r0, r4
 80089fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089fe:	4798      	blx	r3
 8008a00:	2000      	movs	r0, #0
 8008a02:	e7e0      	b.n	80089c6 <_raise_r+0x12>

08008a04 <raise>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	@ (8008a10 <raise+0xc>)
 8008a06:	4601      	mov	r1, r0
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	f7ff bfd3 	b.w	80089b4 <_raise_r>
 8008a0e:	bf00      	nop
 8008a10:	20000018 	.word	0x20000018

08008a14 <_kill_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	2300      	movs	r3, #0
 8008a18:	4d06      	ldr	r5, [pc, #24]	@ (8008a34 <_kill_r+0x20>)
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	4611      	mov	r1, r2
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	f7f9 fd78 	bl	8002516 <_kill>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d102      	bne.n	8008a30 <_kill_r+0x1c>
 8008a2a:	682b      	ldr	r3, [r5, #0]
 8008a2c:	b103      	cbz	r3, 8008a30 <_kill_r+0x1c>
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	bf00      	nop
 8008a34:	2000084c 	.word	0x2000084c

08008a38 <_getpid_r>:
 8008a38:	f7f9 bd66 	b.w	8002508 <_getpid>

08008a3c <__swhatbuf_r>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	460c      	mov	r4, r1
 8008a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a44:	4615      	mov	r5, r2
 8008a46:	2900      	cmp	r1, #0
 8008a48:	461e      	mov	r6, r3
 8008a4a:	b096      	sub	sp, #88	@ 0x58
 8008a4c:	da0c      	bge.n	8008a68 <__swhatbuf_r+0x2c>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	2100      	movs	r1, #0
 8008a52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a56:	bf14      	ite	ne
 8008a58:	2340      	movne	r3, #64	@ 0x40
 8008a5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a5e:	2000      	movs	r0, #0
 8008a60:	6031      	str	r1, [r6, #0]
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	b016      	add	sp, #88	@ 0x58
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	466a      	mov	r2, sp
 8008a6a:	f000 f849 	bl	8008b00 <_fstat_r>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	dbed      	blt.n	8008a4e <__swhatbuf_r+0x12>
 8008a72:	9901      	ldr	r1, [sp, #4]
 8008a74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a7c:	4259      	negs	r1, r3
 8008a7e:	4159      	adcs	r1, r3
 8008a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a84:	e7eb      	b.n	8008a5e <__swhatbuf_r+0x22>

08008a86 <__smakebuf_r>:
 8008a86:	898b      	ldrh	r3, [r1, #12]
 8008a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a8a:	079d      	lsls	r5, r3, #30
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	d507      	bpl.n	8008aa2 <__smakebuf_r+0x1c>
 8008a92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	6163      	str	r3, [r4, #20]
 8008a9e:	b003      	add	sp, #12
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa2:	466a      	mov	r2, sp
 8008aa4:	ab01      	add	r3, sp, #4
 8008aa6:	f7ff ffc9 	bl	8008a3c <__swhatbuf_r>
 8008aaa:	9f00      	ldr	r7, [sp, #0]
 8008aac:	4605      	mov	r5, r0
 8008aae:	4639      	mov	r1, r7
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7fd fbdb 	bl	800626c <_malloc_r>
 8008ab6:	b948      	cbnz	r0, 8008acc <__smakebuf_r+0x46>
 8008ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abc:	059a      	lsls	r2, r3, #22
 8008abe:	d4ee      	bmi.n	8008a9e <__smakebuf_r+0x18>
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	f043 0302 	orr.w	r3, r3, #2
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	e7e2      	b.n	8008a92 <__smakebuf_r+0xc>
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	9b01      	ldr	r3, [sp, #4]
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	b15b      	cbz	r3, 8008af6 <__smakebuf_r+0x70>
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae4:	f000 f81e 	bl	8008b24 <_isatty_r>
 8008ae8:	b128      	cbz	r0, 8008af6 <__smakebuf_r+0x70>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	431d      	orrs	r5, r3
 8008afa:	81a5      	strh	r5, [r4, #12]
 8008afc:	e7cf      	b.n	8008a9e <__smakebuf_r+0x18>
	...

08008b00 <_fstat_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	2300      	movs	r3, #0
 8008b04:	4d06      	ldr	r5, [pc, #24]	@ (8008b20 <_fstat_r+0x20>)
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	f7f9 fd61 	bl	80025d4 <_fstat>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d102      	bne.n	8008b1c <_fstat_r+0x1c>
 8008b16:	682b      	ldr	r3, [r5, #0]
 8008b18:	b103      	cbz	r3, 8008b1c <_fstat_r+0x1c>
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	bd38      	pop	{r3, r4, r5, pc}
 8008b1e:	bf00      	nop
 8008b20:	2000084c 	.word	0x2000084c

08008b24 <_isatty_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	2300      	movs	r3, #0
 8008b28:	4d05      	ldr	r5, [pc, #20]	@ (8008b40 <_isatty_r+0x1c>)
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7f9 fd5f 	bl	80025f2 <_isatty>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_isatty_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_isatty_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	2000084c 	.word	0x2000084c

08008b44 <_init>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr

08008b50 <_fini>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr
