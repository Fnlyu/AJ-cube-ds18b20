
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079bc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08007ad0  08007ad0  00008ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008054  08008054  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008058  08008058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800805c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d4  08008230  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08008230  0000a408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000742c  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185e  00000000  00000000  00011629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00012e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000593  00000000  00000000  000135f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c11  00000000  00000000  00013b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009377  00000000  00000000  0002b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f3a  00000000  00000000  00034b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b0  00000000  00000000  000b8a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000bbd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ab4 	.word	0x08007ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007ab4 	.word	0x08007ab4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_DQ_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2112      	movs	r1, #18
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011de:	f001 fab4 	bl	800274a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011fa:	f001 f90b 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80011fe:	2310      	movs	r3, #16
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001216:	f001 f8fd 	bl	8002414 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <RELAY_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 初始化继电器控制引脚
void RELAY_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <RELAY_Init+0x14>)
 8001236:	f001 fa88 	bl	800274a <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010800 	.word	0x40010800

08001244 <RELAY_Control>:

// 控制继电器状态
void RELAY_Control(uint8_t state)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	2110      	movs	r1, #16
 800125e:	4803      	ldr	r0, [pc, #12]	@ (800126c <RELAY_Control+0x28>)
 8001260:	f001 fa73 	bl	800274a <HAL_GPIO_WritePin>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <Delay_us>:

// 微秒级延时函数 (保持不变)
void Delay_us(uint16_t us)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  us *= 6;
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	461a      	mov	r2, r3
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	80fb      	strh	r3, [r7, #6]
  while (us--)
 8001286:	e007      	b.n	8001298 <Delay_us+0x28>
  {
    __NOP();
 8001288:	bf00      	nop
    __NOP();
 800128a:	bf00      	nop
    __NOP();
 800128c:	bf00      	nop
    __NOP();
 800128e:	bf00      	nop
    __NOP();
 8001290:	bf00      	nop
    __NOP();
 8001292:	bf00      	nop
    __NOP();
 8001294:	bf00      	nop
    __NOP();
 8001296:	bf00      	nop
  while (us--)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	80fa      	strh	r2, [r7, #6]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f2      	bne.n	8001288 <Delay_us+0x18>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
	...

080012b0 <DS18B20_WriteBit>:

// 写1位数据 (保持不变)
void DS18B20_WriteBit(uint8_t bit)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2102      	movs	r1, #2
 80012be:	480e      	ldr	r0, [pc, #56]	@ (80012f8 <DS18B20_WriteBit+0x48>)
 80012c0:	f001 fa43 	bl	800274a <HAL_GPIO_WritePin>
  Delay_us(1); // t_low1: 1-15us
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff ffd3 	bl	8001270 <Delay_us>
  if (bit)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <DS18B20_WriteBit+0x2a>
  {
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 写1
 80012d0:	2201      	movs	r2, #1
 80012d2:	2102      	movs	r1, #2
 80012d4:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <DS18B20_WriteBit+0x48>)
 80012d6:	f001 fa38 	bl	800274a <HAL_GPIO_WritePin>
  }
  else
  {
    // 保持低电平即可写0
  }
  Delay_us(60);                                               // t_slot: 60-120us
 80012da:	203c      	movs	r0, #60	@ 0x3c
 80012dc:	f7ff ffc8 	bl	8001270 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 80012e0:	2201      	movs	r2, #1
 80012e2:	2102      	movs	r1, #2
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <DS18B20_WriteBit+0x48>)
 80012e6:	f001 fa30 	bl	800274a <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_rec: >1us
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff ffc0 	bl	8001270 <Delay_us>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010800 	.word	0x40010800

080012fc <DS18B20_ReadBit>:

// 读1位数据 (保持不变)
uint8_t DS18B20_ReadBit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2102      	movs	r1, #2
 800130a:	480f      	ldr	r0, [pc, #60]	@ (8001348 <DS18B20_ReadBit+0x4c>)
 800130c:	f001 fa1d 	bl	800274a <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_low0: 1-15us
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff ffad 	bl	8001270 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线，由从机拉低或保持高电平
 8001316:	2201      	movs	r2, #1
 8001318:	2102      	movs	r1, #2
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <DS18B20_ReadBit+0x4c>)
 800131c:	f001 fa15 	bl	800274a <HAL_GPIO_WritePin>
  Delay_us(10);                                               // t_rdv: <15us (在15us内采样)
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff ffa5 	bl	8001270 <Delay_us>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 8001326:	2102      	movs	r1, #2
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <DS18B20_ReadBit+0x4c>)
 800132a:	f001 f9f7 	bl	800271c <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <DS18B20_ReadBit+0x3c>
  {
    bit = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
  }
  Delay_us(50); // 等待时间片结束 (60-120us)
 8001338:	2032      	movs	r0, #50	@ 0x32
 800133a:	f7ff ff99 	bl	8001270 <Delay_us>
  return bit;
 800133e:	79fb      	ldrb	r3, [r7, #7]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40010800 	.word	0x40010800

0800134c <DS18B20_WriteByte>:

// 向DS18B20写入1字节 (保持不变)
void DS18B20_WriteByte(uint8_t data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e00c      	b.n	8001376 <DS18B20_WriteByte+0x2a>
  {
    DS18B20_WriteBit(data & 0x01);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffa3 	bl	80012b0 <DS18B20_WriteBit>
    data >>= 1;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	3301      	adds	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b07      	cmp	r3, #7
 800137a:	d9ef      	bls.n	800135c <DS18B20_WriteByte+0x10>
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <DS18B20_ReadByte>:

// 从DS18B20读取1字节 (保持不变)
uint8_t DS18B20_ReadByte(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	71bb      	strb	r3, [r7, #6]
 8001394:	e00e      	b.n	80013b4 <DS18B20_ReadByte+0x2e>
  {
    data >>= 1;
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	71fb      	strb	r3, [r7, #7]
    if (DS18B20_ReadBit())
 800139c:	f7ff ffae 	bl	80012fc <DS18B20_ReadBit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <DS18B20_ReadByte+0x28>
    {
      data |= 0x80;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ac:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	3301      	adds	r3, #1
 80013b2:	71bb      	strb	r3, [r7, #6]
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	d9ed      	bls.n	8001396 <DS18B20_ReadByte+0x10>
    }
  }
  return data;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DS18B20_Reset>:

// 复位DS18B20 (保持不变)
// 返回 0 表示成功检测到存在脉冲, 1 表示无设备响应
uint8_t DS18B20_Reset(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
  uint8_t status;
  // 配置为推挽输出
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DS18B20_PIN;
 80013d6:	2302      	movs	r3, #2
 80013d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	481e      	ldr	r0, [pc, #120]	@ (8001464 <DS18B20_Reset+0xa0>)
 80013ec:	f001 f812 	bl	8002414 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2102      	movs	r1, #2
 80013f4:	481b      	ldr	r0, [pc, #108]	@ (8001464 <DS18B20_Reset+0xa0>)
 80013f6:	f001 f9a8 	bl	800274a <HAL_GPIO_WritePin>
  Delay_us(480); // 至少480us
 80013fa:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80013fe:	f7ff ff37 	bl	8001270 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2102      	movs	r1, #2
 8001406:	4817      	ldr	r0, [pc, #92]	@ (8001464 <DS18B20_Reset+0xa0>)
 8001408:	f001 f99f 	bl	800274a <HAL_GPIO_WritePin>

  // 配置为浮空输入
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 或 GPIO_PULLUP，取决于外部上拉
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4812      	ldr	r0, [pc, #72]	@ (8001464 <DS18B20_Reset+0xa0>)
 800141a:	f000 fffb 	bl	8002414 <HAL_GPIO_Init>

  Delay_us(60);                                         // 等待15-60us后采样
 800141e:	203c      	movs	r0, #60	@ 0x3c
 8001420:	f7ff ff26 	bl	8001270 <Delay_us>
  status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN); // 读取存在脉冲 (低电平有效)
 8001424:	2102      	movs	r1, #2
 8001426:	480f      	ldr	r0, [pc, #60]	@ (8001464 <DS18B20_Reset+0xa0>)
 8001428:	f001 f978 	bl	800271c <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
  Delay_us(420);                                        // 等待存在脉冲结束 (总共480us)
 8001430:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8001434:	f7ff ff1c 	bl	8001270 <Delay_us>

  // 恢复为推挽输出，准备后续通信
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <DS18B20_Reset+0xa0>)
 800144a:	f000 ffe3 	bl	8002414 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 800144e:	2201      	movs	r2, #1
 8001450:	2102      	movs	r1, #2
 8001452:	4804      	ldr	r0, [pc, #16]	@ (8001464 <DS18B20_Reset+0xa0>)
 8001454:	f001 f979 	bl	800274a <HAL_GPIO_WritePin>

  return status; // 0=成功, 1=失败
 8001458:	7dfb      	ldrb	r3, [r7, #23]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010800 	.word	0x40010800

08001468 <crc8>:

// --- 新增：CRC8校验函数 ---
uint8_t crc8(const uint8_t *addr, uint8_t len)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  while (len--)
 8001478:	e022      	b.n	80014c0 <crc8+0x58>
  {
    uint8_t inbyte = *addr++;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 8001484:	2308      	movs	r3, #8
 8001486:	737b      	strb	r3, [r7, #13]
 8001488:	e017      	b.n	80014ba <crc8+0x52>
    {
      uint8_t mix = (crc ^ inbyte) & 0x01;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	4053      	eors	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
      if (mix)
 800149e:	7b3b      	ldrb	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <crc8+0x46>
        crc ^= 0x8C; // 校验多项式 X^8 + X^5 + X^4 + 1
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80014aa:	43db      	mvns	r3, r3
 80014ac:	73fb      	strb	r3, [r7, #15]
      inbyte >>= 1;
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	737b      	strb	r3, [r7, #13]
 80014ba:	7b7b      	ldrb	r3, [r7, #13]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e4      	bne.n	800148a <crc8+0x22>
  while (len--)
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	70fa      	strb	r2, [r7, #3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1d7      	bne.n	800147a <crc8+0x12>
    }
  }
  return crc;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <DS18B20_Search>:

// --- 新增：1-Wire ROM搜索核心函数 ---
// 返回值: 1 = 找到设备, 0 = 未找到/搜索完成
// rom_code: 用于存储找到的ROM地址
uint8_t DS18B20_Search(uint8_t *rom_code)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint8_t search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  // 初始化搜索状态 (仅在首次搜索时)
  id_bit_number = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	733b      	strb	r3, [r7, #12]

  // 如果上一次搜索是最后一次，则重置状态开始新的搜索
  if (LastDeviceFlag)
 80014f4:	4b61      	ldr	r3, [pc, #388]	@ (800167c <DS18B20_Search+0x1a4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <DS18B20_Search+0x3a>
  {
    LastDiscrepancy = 0;
 80014fc:	4b60      	ldr	r3, [pc, #384]	@ (8001680 <DS18B20_Search+0x1a8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001502:	4b5e      	ldr	r3, [pc, #376]	@ (800167c <DS18B20_Search+0x1a4>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 8001508:	4b5e      	ldr	r3, [pc, #376]	@ (8001684 <DS18B20_Search+0x1ac>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
    return 0; // 没有更多设备
 800150e:	2300      	movs	r3, #0
 8001510:	e0af      	b.n	8001672 <DS18B20_Search+0x19a>
  }

  // 1. 发送复位脉冲
  if (DS18B20_Reset() != 0)
 8001512:	f7ff ff57 	bl	80013c4 <DS18B20_Reset>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00a      	beq.n	8001532 <DS18B20_Search+0x5a>
  {
    // 总线无响应，重置搜索状态并返回错误
    LastDiscrepancy = 0;
 800151c:	4b58      	ldr	r3, [pc, #352]	@ (8001680 <DS18B20_Search+0x1a8>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 8001522:	4b58      	ldr	r3, [pc, #352]	@ (8001684 <DS18B20_Search+0x1ac>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001528:	4b54      	ldr	r3, [pc, #336]	@ (800167c <DS18B20_Search+0x1a4>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
    return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e09f      	b.n	8001672 <DS18B20_Search+0x19a>
  }

  // 2. 发送 ROM 搜索命令 (0xF0)
  DS18B20_WriteByte(0xF0);
 8001532:	20f0      	movs	r0, #240	@ 0xf0
 8001534:	f7ff ff0a 	bl	800134c <DS18B20_WriteByte>

  // 3. 循环搜索 ROM 的每一位 (64位)
  do
  {
    // 读取两位 (bit 和 complement bit)
    id_bit = DS18B20_ReadBit();
 8001538:	f7ff fee0 	bl	80012fc <DS18B20_ReadBit>
 800153c:	4603      	mov	r3, r0
 800153e:	727b      	strb	r3, [r7, #9]
    cmp_id_bit = DS18B20_ReadBit();
 8001540:	f7ff fedc 	bl	80012fc <DS18B20_ReadBit>
 8001544:	4603      	mov	r3, r0
 8001546:	723b      	strb	r3, [r7, #8]

    // 检查冲突
    if ((id_bit == 1) && (cmp_id_bit == 1))
 8001548:	7a7b      	ldrb	r3, [r7, #9]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <DS18B20_Search+0x7c>
 800154e:	7a3b      	ldrb	r3, [r7, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d061      	beq.n	8001618 <DS18B20_Search+0x140>
      break;
    }
    else
    {
      // 设备响应了
      if (id_bit != cmp_id_bit)
 8001554:	7a7a      	ldrb	r2, [r7, #9]
 8001556:	7a3b      	ldrb	r3, [r7, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	d002      	beq.n	8001562 <DS18B20_Search+0x8a>
      {
        // 所有设备在这一位上值相同，直接选择该位
        search_direction = id_bit;
 800155c:	7a7b      	ldrb	r3, [r7, #9]
 800155e:	72bb      	strb	r3, [r7, #10]
 8001560:	e026      	b.n	80015b0 <DS18B20_Search+0xd8>
      }
      else
      {
        // 出现分歧 (Discrepancy)，即至少两个设备在这一位有不同值 (0和1)
        // 如果当前位 < 上次分歧位，选择上次确定的路径
        if (id_bit_number < LastDiscrepancy)
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <DS18B20_Search+0x1a8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	429a      	cmp	r2, r3
 800156a:	d20d      	bcs.n	8001588 <DS18B20_Search+0xb0>
        {
          search_direction = ((rom_code[rom_byte_number] & rom_byte_mask) > 0);
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	4013      	ands	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	72bb      	strb	r3, [r7, #10]
 8001586:	e008      	b.n	800159a <DS18B20_Search+0xc2>
        }
        else
        {
          // 如果等于上次分歧位，选择1路径
          // 如果大于上次分歧位，选择0路径 (优先探索0分支)
          search_direction = (id_bit_number == LastDiscrepancy);
 8001588:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <DS18B20_Search+0x1a8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	429a      	cmp	r2, r3
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	72bb      	strb	r3, [r7, #10]
        }

        // 如果选择0路径，记录下这个分歧点
        if (search_direction == 0)
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <DS18B20_Search+0xd8>
        {
          last_zero = id_bit_number;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	73bb      	strb	r3, [r7, #14]
          // 如果是家族码内的分歧，也记录
          if (last_zero < 9)
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d802      	bhi.n	80015b0 <DS18B20_Search+0xd8>
            LastFamilyDiscrepancy = last_zero;
 80015aa:	4a36      	ldr	r2, [pc, #216]	@ (8001684 <DS18B20_Search+0x1ac>)
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	7013      	strb	r3, [r2, #0]
        }
      }

      // 存储选择的位到 ROM code 中
      if (search_direction == 1)
 80015b0:	7abb      	ldrb	r3, [r7, #10]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10b      	bne.n	80015ce <DS18B20_Search+0xf6>
        rom_code[rom_byte_number] |= rom_byte_mask;
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	7819      	ldrb	r1, [r3, #0]
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	7afa      	ldrb	r2, [r7, #11]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	e00f      	b.n	80015ee <DS18B20_Search+0x116>
      else
        rom_code[rom_byte_number] &= ~rom_byte_mask;
 80015ce:	7b7b      	ldrb	r3, [r7, #13]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80015dc:	43db      	mvns	r3, r3
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4013      	ands	r3, r2
 80015e2:	b259      	sxtb	r1, r3
 80015e4:	7b7b      	ldrb	r3, [r7, #13]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]

      // 发送选择的位，让不匹配的设备进入休眠
      DS18B20_WriteBit(search_direction);
 80015ee:	7abb      	ldrb	r3, [r7, #10]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe5d 	bl	80012b0 <DS18B20_WriteBit>

      // 移到下一位
      id_bit_number++;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
      rom_byte_mask <<= 1;
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	72fb      	strb	r3, [r7, #11]

      // 如果一个字节的8位都处理完了，移到下一个字节
      if (rom_byte_mask == 0)
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <DS18B20_Search+0x13a>
      {
        rom_byte_number++;
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	3301      	adds	r3, #1
 800160c:	737b      	strb	r3, [r7, #13]
        rom_byte_mask = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	72fb      	strb	r3, [r7, #11]
      }
    }
  } while (rom_byte_number < 8); // 处理完8个字节 (64位)
 8001612:	7b7b      	ldrb	r3, [r7, #13]
 8001614:	2b07      	cmp	r3, #7
 8001616:	d98f      	bls.n	8001538 <DS18B20_Search+0x60>

  // 4. 检查搜索结果
  if (id_bit_number >= 65)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b40      	cmp	r3, #64	@ 0x40
 800161c:	d90b      	bls.n	8001636 <DS18B20_Search+0x15e>
  { // 成功完成64位搜索
    // 更新下次搜索的分歧点
    LastDiscrepancy = last_zero;
 800161e:	4a18      	ldr	r2, [pc, #96]	@ (8001680 <DS18B20_Search+0x1a8>)
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	7013      	strb	r3, [r2, #0]

    // 检查是否是最后一个设备
    if (LastDiscrepancy == 0)
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <DS18B20_Search+0x1a8>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <DS18B20_Search+0x15a>
    {
      LastDeviceFlag = 1; // 本次是最后一个设备
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <DS18B20_Search+0x1a4>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
    }
    search_result = 1; // 成功找到一个设备
 8001632:	2301      	movs	r3, #1
 8001634:	733b      	strb	r3, [r7, #12]
  }

  // 如果搜索失败或CRC校验失败，重置状态
  if (search_result == 0 || rom_code[0] == 0x00 || crc8(rom_code, 7) != rom_code[7])
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <DS18B20_Search+0x182>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00a      	beq.n	800165a <DS18B20_Search+0x182>
 8001644:	2107      	movs	r1, #7
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff0e 	bl	8001468 <crc8>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3307      	adds	r3, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d00a      	beq.n	8001670 <DS18B20_Search+0x198>
  {
    LastDiscrepancy = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <DS18B20_Search+0x1a8>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <DS18B20_Search+0x1a4>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <DS18B20_Search+0x1ac>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
    search_result = 0; // 标记为失败
 800166c:	2300      	movs	r3, #0
 800166e:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 8001670:	7b3b      	ldrb	r3, [r7, #12]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000021b 	.word	0x2000021b
 8001680:	20000219 	.word	0x20000219
 8001684:	2000021a 	.word	0x2000021a

08001688 <DS18B20_ScanDevices>:

// --- 新增：扫描总线上的所有DS18B20设备 ---
void DS18B20_ScanDevices(void)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b0a7      	sub	sp, #156	@ 0x9c
 800168c:	af08      	add	r7, sp, #32
  uint8_t id[8];
  g_num_sensors = 0; // 重置计数器
 800168e:	4b57      	ldr	r3, [pc, #348]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

  // 重置搜索状态
  LastDiscrepancy = 0;
 8001694:	4b56      	ldr	r3, [pc, #344]	@ (80017f0 <DS18B20_ScanDevices+0x168>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
  LastDeviceFlag = 0;
 800169a:	4b56      	ldr	r3, [pc, #344]	@ (80017f4 <DS18B20_ScanDevices+0x16c>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
  LastFamilyDiscrepancy = 0;
 80016a0:	4b55      	ldr	r3, [pc, #340]	@ (80017f8 <DS18B20_ScanDevices+0x170>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]

  // 循环搜索，直到找不到更多设备
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 80016a6:	e020      	b.n	80016ea <DS18B20_ScanDevices+0x62>
  {
    // 检查是否是DS18B20家族码 (0x28)
    if (id[0] == 0x28)
 80016a8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80016ac:	2b28      	cmp	r3, #40	@ 0x28
 80016ae:	d11c      	bne.n	80016ea <DS18B20_ScanDevices+0x62>
    {
      // 检查CRC校验
      if (crc8(id, 7) == id[7])
 80016b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016b4:	2107      	movs	r1, #7
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fed6 	bl	8001468 <crc8>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d110      	bne.n	80016ea <DS18B20_ScanDevices+0x62>
      {
        memcpy(g_ds18b20_roms[g_num_sensors], id, 8);
 80016c8:	4b48      	ldr	r3, [pc, #288]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4a4b      	ldr	r2, [pc, #300]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 80016d0:	4413      	add	r3, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016d8:	cb03      	ldmia	r3!, {r0, r1}
 80016da:	6010      	str	r0, [r2, #0]
 80016dc:	6051      	str	r1, [r2, #4]
        g_num_sensors++;
 80016de:	4b43      	ldr	r3, [pc, #268]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 80016e8:	701a      	strb	r2, [r3, #0]
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 80016ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fef2 	bl	80014d8 <DS18B20_Search>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <DS18B20_ScanDevices+0x7a>
 80016fa:	4b3c      	ldr	r3, [pc, #240]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d9d2      	bls.n	80016a8 <DS18B20_ScanDevices+0x20>
    }
    // 如果需要支持其他家族码，可以在这里添加判断
  }
  // 可以在这里通过串口打印找到的传感器数量和ROM地址，用于调试
  char dbg_msg[100];
  sprintf(dbg_msg, "Found %d DS18B20 sensors.\r\n", g_num_sensors);
 8001702:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	493c      	ldr	r1, [pc, #240]	@ (8001800 <DS18B20_ScanDevices+0x178>)
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fd8e 	bl	8004230 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 100);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd19 	bl	8000150 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	f107 0108 	add.w	r1, r7, #8
 8001726:	2364      	movs	r3, #100	@ 0x64
 8001728:	4836      	ldr	r0, [pc, #216]	@ (8001804 <DS18B20_ScanDevices+0x17c>)
 800172a:	f001 fc87 	bl	800303c <HAL_UART_Transmit>
  for (int i = 0; i < g_num_sensors; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	677b      	str	r3, [r7, #116]	@ 0x74
 8001732:	e050      	b.n	80017d6 <DS18B20_ScanDevices+0x14e>
  {
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 8001736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	79db      	ldrb	r3, [r3, #7]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800173e:	469c      	mov	ip, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001740:	4a2e      	ldr	r2, [pc, #184]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 8001742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	799b      	ldrb	r3, [r3, #6]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800174a:	4619      	mov	r1, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800174c:	4a2b      	ldr	r2, [pc, #172]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 800174e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	795b      	ldrb	r3, [r3, #5]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001756:	461c      	mov	r4, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001758:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 800175a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	791b      	ldrb	r3, [r3, #4]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001762:	461d      	mov	r5, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001764:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 8001766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4413      	add	r3, r2
 800176c:	78db      	ldrb	r3, [r3, #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800176e:	461e      	mov	r6, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001770:	4a22      	ldr	r2, [pc, #136]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 8001772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	789b      	ldrb	r3, [r3, #2]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800177a:	607b      	str	r3, [r7, #4]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 800177c:	4a1f      	ldr	r2, [pc, #124]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 800177e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	785b      	ldrb	r3, [r3, #1]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001786:	603b      	str	r3, [r7, #0]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001788:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <DS18B20_ScanDevices+0x174>)
 800178a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800178c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001790:	f107 0008 	add.w	r0, r7, #8
 8001794:	9306      	str	r3, [sp, #24]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	9205      	str	r2, [sp, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	9304      	str	r3, [sp, #16]
 800179e:	9603      	str	r6, [sp, #12]
 80017a0:	9502      	str	r5, [sp, #8]
 80017a2:	9401      	str	r4, [sp, #4]
 80017a4:	9100      	str	r1, [sp, #0]
 80017a6:	4663      	mov	r3, ip
 80017a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017aa:	4917      	ldr	r1, [pc, #92]	@ (8001808 <DS18B20_ScanDevices+0x180>)
 80017ac:	f002 fd40 	bl	8004230 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 200);
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fccb 	bl	8000150 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f107 0108 	add.w	r1, r7, #8
 80017c2:	23c8      	movs	r3, #200	@ 0xc8
 80017c4:	480f      	ldr	r0, [pc, #60]	@ (8001804 <DS18B20_ScanDevices+0x17c>)
 80017c6:	f001 fc39 	bl	800303c <HAL_UART_Transmit>
    HAL_Delay(10); // 短暂延时避免串口发送过快
 80017ca:	200a      	movs	r0, #10
 80017cc:	f000 fd1a 	bl	8002204 <HAL_Delay>
  for (int i = 0; i < g_num_sensors; i++)
 80017d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017d2:	3301      	adds	r3, #1
 80017d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <DS18B20_ScanDevices+0x164>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017de:	4293      	cmp	r3, r2
 80017e0:	dba8      	blt.n	8001734 <DS18B20_ScanDevices+0xac>
  }
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	377c      	adds	r7, #124	@ 0x7c
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	20000218 	.word	0x20000218
 80017f0:	20000219 	.word	0x20000219
 80017f4:	2000021b 	.word	0x2000021b
 80017f8:	2000021a 	.word	0x2000021a
 80017fc:	200001f0 	.word	0x200001f0
 8001800:	08007ad0 	.word	0x08007ad0
 8001804:	20000270 	.word	0x20000270
 8001808:	08007aec 	.word	0x08007aec

0800180c <DS18B20_Select>:

// --- 新增：选择指定ROM地址的设备 ---
void DS18B20_Select(const uint8_t *rom_code)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  DS18B20_WriteByte(0x55); // Match ROM command
 8001814:	2055      	movs	r0, #85	@ 0x55
 8001816:	f7ff fd99 	bl	800134c <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e009      	b.n	8001834 <DS18B20_Select+0x28>
  {
    DS18B20_WriteByte(rom_code[i]);
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fd8f 	bl	800134c <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b07      	cmp	r3, #7
 8001838:	d9f2      	bls.n	8001820 <DS18B20_Select+0x14>
  }
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <DS18B20_SkipRom>:

// --- 新增：向总线上所有设备发送命令 (使用 Skip ROM) ---
void DS18B20_SkipRom(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  DS18B20_WriteByte(0xCC); // Skip ROM command
 8001848:	20cc      	movs	r0, #204	@ 0xcc
 800184a:	f7ff fd7f 	bl	800134c <DS18B20_WriteByte>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <DS18B20_GetTemp>:

// --- 修改：读取指定ROM地址的温度值 ---
// 返回值：读取到的温度，或特定错误值 (例如 -999.0)
float DS18B20_GetTemp(const uint8_t *rom_code)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint8_t tempL, tempH;
  uint16_t temp;
  float result = -999.0; // 默认错误值
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <DS18B20_GetTemp+0x98>)
 800185e:	60fb      	str	r3, [r7, #12]

  // 1. 复位并选择指定设备
  if (DS18B20_Reset() != 0)
 8001860:	f7ff fdb0 	bl	80013c4 <DS18B20_Reset>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <DS18B20_GetTemp+0x1a>
    return result; // 复位失败
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	e039      	b.n	80018e2 <DS18B20_GetTemp+0x8e>
  DS18B20_Select(rom_code);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffcc 	bl	800180c <DS18B20_Select>

  // 2. 发送读取暂存器命令 (0xBE)
  DS18B20_WriteByte(0xBE);
 8001874:	20be      	movs	r0, #190	@ 0xbe
 8001876:	f7ff fd69 	bl	800134c <DS18B20_WriteByte>

  // 3. 读取暂存器内容 (前两个字节是温度)
  //    注意：实际应用中应读取全部9个字节并校验CRC
  tempL = DS18B20_ReadByte();
 800187a:	f7ff fd84 	bl	8001386 <DS18B20_ReadByte>
 800187e:	4603      	mov	r3, r0
 8001880:	72fb      	strb	r3, [r7, #11]
  tempH = DS18B20_ReadByte();
 8001882:	f7ff fd80 	bl	8001386 <DS18B20_ReadByte>
 8001886:	4603      	mov	r3, r0
 8001888:	72bb      	strb	r3, [r7, #10]
  //     // CRC校验失败
  //     return -998.0; // 返回不同的错误码
  // }

  // 4. 计算温度
  temp = (tempH << 8) | tempL;
 800188a:	7abb      	ldrb	r3, [r7, #10]
 800188c:	b21b      	sxth	r3, r3
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	813b      	strh	r3, [r7, #8]

  // 处理负温度 (符号扩展)
  if (temp & 0x8000)
 800189c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da11      	bge.n	80018c8 <DS18B20_GetTemp+0x74>
  {
    temp = ~temp + 1; // 取反加一
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	425b      	negs	r3, r3
 80018a8:	813b      	strh	r3, [r7, #8]
    result = -(float)temp / 16.0;
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa11 	bl	8000cd4 <__aeabi_ui2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018b8:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb15 	bl	8000eec <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e00b      	b.n	80018e0 <DS18B20_GetTemp+0x8c>
  }
  else
  {
    result = (float)temp / 16.0;
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fa02 	bl	8000cd4 <__aeabi_ui2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb08 	bl	8000eec <__aeabi_fdiv>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
  {
    // 可能读取错误，可以返回特定错误值或上次有效值
    // return -997.0;
  }

  return result;
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	c479c000 	.word	0xc479c000

080018f0 <DS18B20_StartConversionAll>:

// --- 新增：启动所有连接设备的温度转换 ---
uint8_t DS18B20_StartConversionAll(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  if (DS18B20_Reset() != 0)
 80018f4:	f7ff fd66 	bl	80013c4 <DS18B20_Reset>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <DS18B20_StartConversionAll+0x12>
    return 1;              // 复位失败
 80018fe:	2301      	movs	r3, #1
 8001900:	e005      	b.n	800190e <DS18B20_StartConversionAll+0x1e>
  DS18B20_SkipRom();       // 使用 Skip ROM 命令
 8001902:	f7ff ff9f 	bl	8001844 <DS18B20_SkipRom>
  DS18B20_WriteByte(0x44); // 启动温度转换命令
 8001906:	2044      	movs	r0, #68	@ 0x44
 8001908:	f7ff fd20 	bl	800134c <DS18B20_WriteByte>
  return 0;                // 成功启动
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	b0df      	sub	sp, #380	@ 0x17c
 8001918:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191a:	f000 fc11 	bl	8002140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191e:	f000 f99b 	bl	8001c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001922:	f7ff fc2b 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001926:	f000 fb09 	bl	8001f3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800192a:	f000 fb31 	bl	8001f90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  RELAY_Init();
 800192e:	f7ff fc7d 	bl	800122c <RELAY_Init>
  
  HAL_Delay(100); // 等待总线稳定
 8001932:	2064      	movs	r0, #100	@ 0x64
 8001934:	f000 fc66 	bl	8002204 <HAL_Delay>
  HAL_UART_Transmit(&huart3, (uint8_t *)"DS18B20 Multi-Sensor Test\r\n", strlen("DS18B20 Multi-Sensor Test\r\n"), 100);
 8001938:	2364      	movs	r3, #100	@ 0x64
 800193a:	221b      	movs	r2, #27
 800193c:	49b5      	ldr	r1, [pc, #724]	@ (8001c14 <main+0x300>)
 800193e:	48b6      	ldr	r0, [pc, #728]	@ (8001c18 <main+0x304>)
 8001940:	f001 fb7c 	bl	800303c <HAL_UART_Transmit>

  // --- 修改：扫描设备 ---
  DS18B20_ScanDevices();
 8001944:	f7ff fea0 	bl	8001688 <DS18B20_ScanDevices>

  if (g_num_sensors == 0)
 8001948:	4bb4      	ldr	r3, [pc, #720]	@ (8001c1c <main+0x308>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <main+0x4c>
  {
    HAL_UART_Transmit(&huart3, (uint8_t *)"No DS18B20 sensors found!\r\n", strlen("No DS18B20 sensors found!\r\n"), 100);
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	221b      	movs	r2, #27
 8001954:	49b2      	ldr	r1, [pc, #712]	@ (8001c20 <main+0x30c>)
 8001956:	48b0      	ldr	r0, [pc, #704]	@ (8001c18 <main+0x304>)
 8001958:	f001 fb70 	bl	800303c <HAL_UART_Transmit>
    while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <main+0x48>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1. 启动所有传感器的温度转换
    if (DS18B20_StartConversionAll() == 0)
 8001960:	f7ff ffc6 	bl	80018f0 <DS18B20_StartConversionAll>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 813c 	bne.w	8001be4 <main+0x2d0>
    {
      // 2. 等待转换完成 (标准精度约750ms)
      //    注意：如果设置了不同精度，等待时间需要调整
      HAL_Delay(750);
 800196c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001970:	f000 fc48 	bl	8002204 <HAL_Delay>

      // 3. 依次读取每个传感器的温度
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800197a:	e0a3      	b.n	8001ac4 <main+0x1b0>
      {
        temperature = DS18B20_GetTemp(g_ds18b20_roms[i]);
 800197c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4aa8      	ldr	r2, [pc, #672]	@ (8001c24 <main+0x310>)
 8001984:	4413      	add	r3, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff64 	bl	8001854 <DS18B20_GetTemp>
 800198c:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
        // 保存温度值到数组中
        temperatureArray[i] = temperature;
 8001990:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001994:	49a4      	ldr	r1, [pc, #656]	@ (8001c28 <main+0x314>)
 8001996:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 格式化ROM地址用于显示
        char rom_str[25];
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800199e:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019a2:	4aa0      	ldr	r2, [pc, #640]	@ (8001c24 <main+0x310>)
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	79db      	ldrb	r3, [r3, #7]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019aa:	469c      	mov	ip, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80019ac:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c24 <main+0x310>)
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	799b      	ldrb	r3, [r3, #6]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019b8:	469e      	mov	lr, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80019ba:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019be:	4a99      	ldr	r2, [pc, #612]	@ (8001c24 <main+0x310>)
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	795b      	ldrb	r3, [r3, #5]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019c6:	4619      	mov	r1, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 80019c8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019cc:	4a95      	ldr	r2, [pc, #596]	@ (8001c24 <main+0x310>)
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	791b      	ldrb	r3, [r3, #4]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019d4:	461c      	mov	r4, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 80019d6:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019da:	4a92      	ldr	r2, [pc, #584]	@ (8001c24 <main+0x310>)
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	78db      	ldrb	r3, [r3, #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019e2:	461d      	mov	r5, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 80019e4:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001c24 <main+0x310>)
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	789b      	ldrb	r3, [r3, #2]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019f0:	461e      	mov	r6, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 80019f2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80019f6:	4a8b      	ldr	r2, [pc, #556]	@ (8001c24 <main+0x310>)
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	785b      	ldrb	r3, [r3, #1]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 80019fe:	607b      	str	r3, [r7, #4]
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001a00:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001a04:	4a87      	ldr	r2, [pc, #540]	@ (8001c24 <main+0x310>)
 8001a06:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001a0a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001a0e:	9305      	str	r3, [sp, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	9304      	str	r3, [sp, #16]
 8001a14:	9603      	str	r6, [sp, #12]
 8001a16:	9502      	str	r5, [sp, #8]
 8001a18:	9401      	str	r4, [sp, #4]
 8001a1a:	9100      	str	r1, [sp, #0]
 8001a1c:	4673      	mov	r3, lr
 8001a1e:	4662      	mov	r2, ip
 8001a20:	4982      	ldr	r1, [pc, #520]	@ (8001c2c <main+0x318>)
 8001a22:	f002 fc05 	bl	8004230 <siprintf>

        if (temperature > -900.0)
 8001a26:	4982      	ldr	r1, [pc, #520]	@ (8001c30 <main+0x31c>)
 8001a28:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001a2c:	f7ff fb66 	bl	80010fc <__aeabi_fcmpgt>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01e      	beq.n	8001a74 <main+0x160>
        { // 检查是否为有效温度值
          sprintf(msg, "Sensor %d [%s]: %.2f C\r\n", i, rom_str, temperature);
 8001a36:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001a3a:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001a3e:	f7fe fcf3 	bl	8000428 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001a4a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a52:	460b      	mov	r3, r1
 8001a54:	4622      	mov	r2, r4
 8001a56:	4977      	ldr	r1, [pc, #476]	@ (8001c34 <main+0x320>)
 8001a58:	f002 fbea 	bl	8004230 <siprintf>
          sprintf(msg2, "%.2f;",temperature);
 8001a5c:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001a60:	f7fe fce2 	bl	8000428 <__aeabi_f2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001a6c:	4972      	ldr	r1, [pc, #456]	@ (8001c38 <main+0x324>)
 8001a6e:	f002 fbdf 	bl	8004230 <siprintf>
 8001a72:	e012      	b.n	8001a9a <main+0x186>
        }
        else
        {
          sprintf(msg, "Sensor %d [%s]: Read Error (Code: %.1f)\r\n", i, rom_str, temperature);
 8001a74:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001a78:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001a7c:	f7fe fcd4 	bl	8000428 <__aeabi_f2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001a88:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001a8c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a90:	460b      	mov	r3, r1
 8001a92:	4622      	mov	r2, r4
 8001a94:	4969      	ldr	r1, [pc, #420]	@ (8001c3c <main+0x328>)
 8001a96:	f002 fbcb 	bl	8004230 <siprintf>
        }
        HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200);
 8001a9a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fb56 	bl	8000150 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8001aac:	23c8      	movs	r3, #200	@ 0xc8
 8001aae:	485a      	ldr	r0, [pc, #360]	@ (8001c18 <main+0x304>)
 8001ab0:	f001 fac4 	bl	800303c <HAL_UART_Transmit>
        // HAL_UART_Transmit(&huart1, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
        HAL_Delay(50); // 短暂延时，避免串口拥堵
 8001ab4:	2032      	movs	r0, #50	@ 0x32
 8001ab6:	f000 fba5 	bl	8002204 <HAL_Delay>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001aba:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001ac4:	4b55      	ldr	r3, [pc, #340]	@ (8001c1c <main+0x308>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f4ff af55 	bcc.w	800197c <main+0x68>
      }
      // 示例：打印数组内容
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8001ad8:	e035      	b.n	8001b46 <main+0x232>
      {
          char temp_msg[50];
          if(temperatureArray[i] > TEMP_THRESHOLD)
 8001ada:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001ade:	4a52      	ldr	r2, [pc, #328]	@ (8001c28 <main+0x314>)
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	4956      	ldr	r1, [pc, #344]	@ (8001c40 <main+0x32c>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fb08 	bl	80010fc <__aeabi_fcmpgt>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <main+0x1f0>
          {
            RELAY_Control(1); // 温度超过阈值，打开继电器
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fba6 	bl	8001244 <RELAY_Control>
            sprintf(relay_msg, "ON");
 8001af8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001afc:	4951      	ldr	r1, [pc, #324]	@ (8001c44 <main+0x330>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fb96 	bl	8004230 <siprintf>
          }
          sprintf(temp_msg, "%.2f;", i, temperatureArray[i]);
 8001b04:	f897 415e 	ldrb.w	r4, [r7, #350]	@ 0x15e
 8001b08:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001b0c:	4a46      	ldr	r2, [pc, #280]	@ (8001c28 <main+0x314>)
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fc88 	bl	8000428 <__aeabi_f2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	f107 000c 	add.w	r0, r7, #12
 8001b20:	e9cd 2300 	strd	r2, r3, [sp]
 8001b24:	4622      	mov	r2, r4
 8001b26:	4944      	ldr	r1, [pc, #272]	@ (8001c38 <main+0x324>)
 8001b28:	f002 fb82 	bl	8004230 <siprintf>
          strcat(msg2, temp_msg);
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fbe7 	bl	800430a <strcat>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001b3c:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001b40:	3301      	adds	r3, #1
 8001b42:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8001b46:	4b35      	ldr	r3, [pc, #212]	@ (8001c1c <main+0x308>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3c3      	bcc.n	8001ada <main+0x1c6>
      }
      if (temperatureArray[0] < TEMP_THRESHOLD)
 8001b52:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <main+0x314>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	493a      	ldr	r1, [pc, #232]	@ (8001c40 <main+0x32c>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fab1 	bl	80010c0 <__aeabi_fcmplt>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01a      	beq.n	8001b9a <main+0x286>
      {
        if (temperatureArray[1] < TEMP_THRESHOLD)
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <main+0x314>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <main+0x32c>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff faa8 	bl	80010c0 <__aeabi_fcmplt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d011      	beq.n	8001b9a <main+0x286>
        {
          if (temperatureArray[2] < TEMP_THRESHOLD)
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <main+0x314>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4931      	ldr	r1, [pc, #196]	@ (8001c40 <main+0x32c>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa9f 	bl	80010c0 <__aeabi_fcmplt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <main+0x286>
          {
            RELAY_Control(0); // 温度低于阈值，关闭继电器
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fb5b 	bl	8001244 <RELAY_Control>
            sprintf(relay_msg, "OFF");
 8001b8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b92:	492d      	ldr	r1, [pc, #180]	@ (8001c48 <main+0x334>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fb4b 	bl	8004230 <siprintf>
          }
        }
      }
      strcat(msg2, relay_msg); // 继电器状态
 8001b9a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001b9e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fbb0 	bl	800430a <strcat>
      // 发送温度数据到Lora
      strcat(msg2, "\r\n");
 8001baa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe face 	bl	8000150 <strlen>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <main+0x338>)
 8001bc0:	8811      	ldrh	r1, [r2, #0]
 8001bc2:	7892      	ldrb	r2, [r2, #2]
 8001bc4:	8019      	strh	r1, [r3, #0]
 8001bc6:	709a      	strb	r2, [r3, #2]
      HAL_UART_Transmit(&huart1, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
 8001bc8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fabf 	bl	8000150 <strlen>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001bda:	23c8      	movs	r3, #200	@ 0xc8
 8001bdc:	481c      	ldr	r0, [pc, #112]	@ (8001c50 <main+0x33c>)
 8001bde:	f001 fa2d 	bl	800303c <HAL_UART_Transmit>
 8001be2:	e012      	b.n	8001c0a <main+0x2f6>
    }
    else
    {
      sprintf(msg, "Failed to start conversion.\r\n");
 8001be4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001be8:	491a      	ldr	r1, [pc, #104]	@ (8001c54 <main+0x340>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fb20 	bl	8004230 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001bf0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe faab 	bl	8000150 <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8001c02:	2364      	movs	r3, #100	@ 0x64
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <main+0x304>)
 8001c06:	f001 fa19 	bl	800303c <HAL_UART_Transmit>
    }

    HAL_Delay(2000); // 每隔一段时间读取一次
 8001c0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c0e:	f000 faf9 	bl	8002204 <HAL_Delay>
    if (DS18B20_StartConversionAll() == 0)
 8001c12:	e6a5      	b.n	8001960 <main+0x4c>
 8001c14:	08007b20 	.word	0x08007b20
 8001c18:	20000270 	.word	0x20000270
 8001c1c:	20000218 	.word	0x20000218
 8001c20:	08007b3c 	.word	0x08007b3c
 8001c24:	200001f0 	.word	0x200001f0
 8001c28:	2000021c 	.word	0x2000021c
 8001c2c:	08007b58 	.word	0x08007b58
 8001c30:	c4610000 	.word	0xc4610000
 8001c34:	08007b80 	.word	0x08007b80
 8001c38:	08007b9c 	.word	0x08007b9c
 8001c3c:	08007ba4 	.word	0x08007ba4
 8001c40:	41f00000 	.word	0x41f00000
 8001c44:	08007bd0 	.word	0x08007bd0
 8001c48:	08007bd4 	.word	0x08007bd4
 8001c4c:	08007bd8 	.word	0x08007bd8
 8001c50:	20000228 	.word	0x20000228
 8001c54:	08007bdc 	.word	0x08007bdc

08001c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b090      	sub	sp, #64	@ 0x40
 8001c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	2228      	movs	r2, #40	@ 0x28
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fb47 	bl	80042fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c96:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fd6b 	bl	800277c <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cac:	f000 f819 	bl	8001ce2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 ffd8 	bl	8002c80 <HAL_RCC_ClockConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cd6:	f000 f804 	bl	8001ce2 <Error_Handler>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3740      	adds	r7, #64	@ 0x40
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce6:	b672      	cpsid	i
}
 8001ce8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cea:	bf00      	nop
 8001cec:	e7fd      	b.n	8001cea <Error_Handler+0x8>
	...

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_MspInit+0x5c>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <HAL_MspInit+0x5c>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6193      	str	r3, [r2, #24]
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_MspInit+0x5c>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_MspInit+0x5c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_MspInit+0x5c>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <HAL_MspInit+0x5c>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_MspInit+0x60>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_MspInit+0x60>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <NMI_Handler+0x4>

08001d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 fa12 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return 1;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <_kill>:

int _kill(int pid, int sig)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc4:	f002 fafa 	bl	80043bc <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2216      	movs	r2, #22
 8001dcc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_exit>:

void _exit (int status)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de2:	f04f 31ff 	mov.w	r1, #4294967295
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffe7 	bl	8001dba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <_exit+0x12>

08001df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e00a      	b.n	8001e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e02:	f3af 8000 	nop.w
 8001e06:	4601      	mov	r1, r0
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	60ba      	str	r2, [r7, #8]
 8001e0e:	b2ca      	uxtb	r2, r1
 8001e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbf0      	blt.n	8001e02 <_read+0x12>
  }

  return len;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e009      	b.n	8001e50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf1      	blt.n	8001e3c <_write+0x12>
  }
  return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_close>:

int _close(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e88:	605a      	str	r2, [r3, #4]
  return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <_isatty>:

int _isatty(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f002 fa62 	bl	80043bc <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20005000 	.word	0x20005000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	20000224 	.word	0x20000224
 8001f2c:	20000408 	.word	0x20000408

08001f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_USART1_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_USART1_UART_Init+0x4c>)
 8001f74:	f001 f812 	bl	8002f9c <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f7ff feb0 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000228 	.word	0x20000228
 8001f8c:	40013800 	.word	0x40013800

08001f90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <MX_USART3_UART_Init+0x50>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fc8:	f000 ffe8 	bl	8002f9c <HAL_UART_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fd2:	f7ff fe86 	bl	8001ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000270 	.word	0x20000270
 8001fe0:	40004800 	.word	0x40004800

08001fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a38      	ldr	r2, [pc, #224]	@ (80020e0 <HAL_UART_MspInit+0xfc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d132      	bne.n	800206a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a36      	ldr	r2, [pc, #216]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a30      	ldr	r2, [pc, #192]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0318 	add.w	r3, r7, #24
 8002046:	4619      	mov	r1, r3
 8002048:	4827      	ldr	r0, [pc, #156]	@ (80020e8 <HAL_UART_MspInit+0x104>)
 800204a:	f000 f9e3 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800204e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	4619      	mov	r1, r3
 8002062:	4821      	ldr	r0, [pc, #132]	@ (80020e8 <HAL_UART_MspInit+0x104>)
 8002064:	f000 f9d6 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002068:	e036      	b.n	80020d8 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ec <HAL_UART_MspInit+0x108>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d131      	bne.n	80020d8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207e:	61d3      	str	r3, [r2, #28]
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	4619      	mov	r1, r3
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <HAL_UART_MspInit+0x10c>)
 80020ba:	f000 f9ab 	bl	8002414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	4619      	mov	r1, r3
 80020d2:	4807      	ldr	r0, [pc, #28]	@ (80020f0 <HAL_UART_MspInit+0x10c>)
 80020d4:	f000 f99e 	bl	8002414 <HAL_GPIO_Init>
}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	@ 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40004800 	.word	0x40004800
 80020f0:	40010c00 	.word	0x40010c00

080020f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff ff1c 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480b      	ldr	r0, [pc, #44]	@ (8002128 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020fa:	490c      	ldr	r1, [pc, #48]	@ (800212c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002130 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002110:	4c09      	ldr	r4, [pc, #36]	@ (8002138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f002 f953 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002122:	f7ff fbf7 	bl	8001914 <main>
  bx lr
 8002126:	4770      	bx	lr
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002130:	0800805c 	.word	0x0800805c
  ldr r2, =_sbss
 8002134:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002138:	20000408 	.word	0x20000408

0800213c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC1_2_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_Init+0x28>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_Init+0x28>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f92b 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	200f      	movs	r0, #15
 8002158:	f000 f808 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fdc8 	bl	8001cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x54>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f935 	bl	80023fa <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00e      	b.n	80021b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d80a      	bhi.n	80021b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f000 f90b 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <HAL_InitTick+0x5c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_IncTick+0x1c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_IncTick+0x20>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a03      	ldr	r2, [pc, #12]	@ (80021ec <HAL_IncTick+0x20>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000008 	.word	0x20000008
 80021ec:	200002b8 	.word	0x200002b8

080021f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b02      	ldr	r3, [pc, #8]	@ (8002200 <HAL_GetTick+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	200002b8 	.word	0x200002b8

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff fff0 	bl	80021f0 <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffe0 	bl	80021f0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	@ (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	@ (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff90 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff49 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff5e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff90 	bl	8002304 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5f 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffb0 	bl	8002368 <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b08b      	sub	sp, #44	@ 0x2c
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002426:	e169      	b.n	80026fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002428:	2201      	movs	r2, #1
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 8158 	bne.w	80026f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4a9a      	ldr	r2, [pc, #616]	@ (80026b4 <HAL_GPIO_Init+0x2a0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d05e      	beq.n	800250e <HAL_GPIO_Init+0xfa>
 8002450:	4a98      	ldr	r2, [pc, #608]	@ (80026b4 <HAL_GPIO_Init+0x2a0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d875      	bhi.n	8002542 <HAL_GPIO_Init+0x12e>
 8002456:	4a98      	ldr	r2, [pc, #608]	@ (80026b8 <HAL_GPIO_Init+0x2a4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d058      	beq.n	800250e <HAL_GPIO_Init+0xfa>
 800245c:	4a96      	ldr	r2, [pc, #600]	@ (80026b8 <HAL_GPIO_Init+0x2a4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d86f      	bhi.n	8002542 <HAL_GPIO_Init+0x12e>
 8002462:	4a96      	ldr	r2, [pc, #600]	@ (80026bc <HAL_GPIO_Init+0x2a8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d052      	beq.n	800250e <HAL_GPIO_Init+0xfa>
 8002468:	4a94      	ldr	r2, [pc, #592]	@ (80026bc <HAL_GPIO_Init+0x2a8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d869      	bhi.n	8002542 <HAL_GPIO_Init+0x12e>
 800246e:	4a94      	ldr	r2, [pc, #592]	@ (80026c0 <HAL_GPIO_Init+0x2ac>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d04c      	beq.n	800250e <HAL_GPIO_Init+0xfa>
 8002474:	4a92      	ldr	r2, [pc, #584]	@ (80026c0 <HAL_GPIO_Init+0x2ac>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d863      	bhi.n	8002542 <HAL_GPIO_Init+0x12e>
 800247a:	4a92      	ldr	r2, [pc, #584]	@ (80026c4 <HAL_GPIO_Init+0x2b0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d046      	beq.n	800250e <HAL_GPIO_Init+0xfa>
 8002480:	4a90      	ldr	r2, [pc, #576]	@ (80026c4 <HAL_GPIO_Init+0x2b0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d85d      	bhi.n	8002542 <HAL_GPIO_Init+0x12e>
 8002486:	2b12      	cmp	r3, #18
 8002488:	d82a      	bhi.n	80024e0 <HAL_GPIO_Init+0xcc>
 800248a:	2b12      	cmp	r3, #18
 800248c:	d859      	bhi.n	8002542 <HAL_GPIO_Init+0x12e>
 800248e:	a201      	add	r2, pc, #4	@ (adr r2, 8002494 <HAL_GPIO_Init+0x80>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	0800250f 	.word	0x0800250f
 8002498:	080024e9 	.word	0x080024e9
 800249c:	080024fb 	.word	0x080024fb
 80024a0:	0800253d 	.word	0x0800253d
 80024a4:	08002543 	.word	0x08002543
 80024a8:	08002543 	.word	0x08002543
 80024ac:	08002543 	.word	0x08002543
 80024b0:	08002543 	.word	0x08002543
 80024b4:	08002543 	.word	0x08002543
 80024b8:	08002543 	.word	0x08002543
 80024bc:	08002543 	.word	0x08002543
 80024c0:	08002543 	.word	0x08002543
 80024c4:	08002543 	.word	0x08002543
 80024c8:	08002543 	.word	0x08002543
 80024cc:	08002543 	.word	0x08002543
 80024d0:	08002543 	.word	0x08002543
 80024d4:	08002543 	.word	0x08002543
 80024d8:	080024f1 	.word	0x080024f1
 80024dc:	08002505 	.word	0x08002505
 80024e0:	4a79      	ldr	r2, [pc, #484]	@ (80026c8 <HAL_GPIO_Init+0x2b4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024e6:	e02c      	b.n	8002542 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	623b      	str	r3, [r7, #32]
          break;
 80024ee:	e029      	b.n	8002544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	3304      	adds	r3, #4
 80024f6:	623b      	str	r3, [r7, #32]
          break;
 80024f8:	e024      	b.n	8002544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	3308      	adds	r3, #8
 8002500:	623b      	str	r3, [r7, #32]
          break;
 8002502:	e01f      	b.n	8002544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	330c      	adds	r3, #12
 800250a:	623b      	str	r3, [r7, #32]
          break;
 800250c:	e01a      	b.n	8002544 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002516:	2304      	movs	r3, #4
 8002518:	623b      	str	r3, [r7, #32]
          break;
 800251a:	e013      	b.n	8002544 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002524:	2308      	movs	r3, #8
 8002526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	611a      	str	r2, [r3, #16]
          break;
 800252e:	e009      	b.n	8002544 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002530:	2308      	movs	r3, #8
 8002532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	615a      	str	r2, [r3, #20]
          break;
 800253a:	e003      	b.n	8002544 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x130>
          break;
 8002542:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2bff      	cmp	r3, #255	@ 0xff
 8002548:	d801      	bhi.n	800254e <HAL_GPIO_Init+0x13a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_Init+0x13e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2bff      	cmp	r3, #255	@ 0xff
 8002558:	d802      	bhi.n	8002560 <HAL_GPIO_Init+0x14c>
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	e002      	b.n	8002566 <HAL_GPIO_Init+0x152>
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	3b08      	subs	r3, #8
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	210f      	movs	r1, #15
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80b1 	beq.w	80026f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002594:	4b4d      	ldr	r3, [pc, #308]	@ (80026cc <HAL_GPIO_Init+0x2b8>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a4c      	ldr	r2, [pc, #304]	@ (80026cc <HAL_GPIO_Init+0x2b8>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b4a      	ldr	r3, [pc, #296]	@ (80026cc <HAL_GPIO_Init+0x2b8>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025ac:	4a48      	ldr	r2, [pc, #288]	@ (80026d0 <HAL_GPIO_Init+0x2bc>)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a40      	ldr	r2, [pc, #256]	@ (80026d4 <HAL_GPIO_Init+0x2c0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_GPIO_Init+0x1ec>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3f      	ldr	r2, [pc, #252]	@ (80026d8 <HAL_GPIO_Init+0x2c4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00d      	beq.n	80025fc <HAL_GPIO_Init+0x1e8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3e      	ldr	r2, [pc, #248]	@ (80026dc <HAL_GPIO_Init+0x2c8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <HAL_GPIO_Init+0x1e4>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3d      	ldr	r2, [pc, #244]	@ (80026e0 <HAL_GPIO_Init+0x2cc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_GPIO_Init+0x1e0>
 80025f0:	2303      	movs	r3, #3
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x1ee>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e004      	b.n	8002602 <HAL_GPIO_Init+0x1ee>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_Init+0x1ee>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_GPIO_Init+0x1ee>
 8002600:	2300      	movs	r3, #0
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	f002 0203 	and.w	r2, r2, #3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4093      	lsls	r3, r2
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002612:	492f      	ldr	r1, [pc, #188]	@ (80026d0 <HAL_GPIO_Init+0x2bc>)
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	492c      	ldr	r1, [pc, #176]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	43db      	mvns	r3, r3
 8002642:	4928      	ldr	r1, [pc, #160]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 8002644:	4013      	ands	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002654:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4922      	ldr	r1, [pc, #136]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	491e      	ldr	r1, [pc, #120]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 800266c:	4013      	ands	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4918      	ldr	r1, [pc, #96]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	43db      	mvns	r3, r3
 8002692:	4914      	ldr	r1, [pc, #80]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 8002694:	4013      	ands	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d021      	beq.n	80026e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e021      	b.n	80026f6 <HAL_GPIO_Init+0x2e2>
 80026b2:	bf00      	nop
 80026b4:	10320000 	.word	0x10320000
 80026b8:	10310000 	.word	0x10310000
 80026bc:	10220000 	.word	0x10220000
 80026c0:	10210000 	.word	0x10210000
 80026c4:	10120000 	.word	0x10120000
 80026c8:	10110000 	.word	0x10110000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40010800 	.word	0x40010800
 80026d8:	40010c00 	.word	0x40010c00
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40011400 	.word	0x40011400
 80026e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	4909      	ldr	r1, [pc, #36]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	3301      	adds	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	f47f ae8e 	bne.w	8002428 <HAL_GPIO_Init+0x14>
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	372c      	adds	r7, #44	@ 0x2c
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e001      	b.n	800273e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	807b      	strh	r3, [r7, #2]
 8002756:	4613      	mov	r3, r2
 8002758:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275a:	787b      	ldrb	r3, [r7, #1]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002766:	e003      	b.n	8002770 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	041a      	lsls	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	611a      	str	r2, [r3, #16]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e272      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8087 	beq.w	80028aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800279c:	4b92      	ldr	r3, [pc, #584]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a8:	4b8f      	ldr	r3, [pc, #572]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d112      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
 80027b4:	4b8c      	ldr	r3, [pc, #560]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c0:	d10b      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	4b89      	ldr	r3, [pc, #548]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x12c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d168      	bne.n	80028a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e24c      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x76>
 80027e4:	4b80      	ldr	r3, [pc, #512]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a7f      	ldr	r2, [pc, #508]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e02e      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b7b      	ldr	r3, [pc, #492]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a7a      	ldr	r2, [pc, #488]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b78      	ldr	r3, [pc, #480]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a77      	ldr	r2, [pc, #476]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0xbc>
 800281e:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a71      	ldr	r2, [pc, #452]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6f      	ldr	r3, [pc, #444]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6e      	ldr	r2, [pc, #440]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002838:	4b6b      	ldr	r3, [pc, #428]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6a      	ldr	r2, [pc, #424]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b68      	ldr	r3, [pc, #416]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a67      	ldr	r2, [pc, #412]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff fcca 	bl	80021f0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7ff fcc6 	bl	80021f0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	@ 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e200      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b5d      	ldr	r3, [pc, #372]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xe4>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7ff fcb6 	bl	80021f0 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002888:	f7ff fcb2 	bl	80021f0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	@ 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1ec      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	4b53      	ldr	r3, [pc, #332]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x10c>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d063      	beq.n	800297e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b6:	4b4c      	ldr	r3, [pc, #304]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028c2:	4b49      	ldr	r3, [pc, #292]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d11c      	bne.n	8002908 <HAL_RCC_OscConfig+0x18c>
 80028ce:	4b46      	ldr	r3, [pc, #280]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x176>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1c0      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4939      	ldr	r1, [pc, #228]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	e03a      	b.n	800297e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7ff fc6b 	bl	80021f0 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7ff fc67 	bl	80021f0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1a1      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	4b2d      	ldr	r3, [pc, #180]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4927      	ldr	r1, [pc, #156]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e015      	b.n	800297e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <HAL_RCC_OscConfig+0x270>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fc4a 	bl	80021f0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002960:	f7ff fc46 	bl	80021f0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e180      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03a      	beq.n	8002a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d019      	beq.n	80029c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_RCC_OscConfig+0x274>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7ff fc2a 	bl	80021f0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7ff fc26 	bl	80021f0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e160      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029be:	2001      	movs	r0, #1
 80029c0:	f000 face 	bl	8002f60 <RCC_Delay>
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7ff fc10 	bl	80021f0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d2:	e00f      	b.n	80029f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7ff fc0c 	bl	80021f0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d908      	bls.n	80029f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e146      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	42420000 	.word	0x42420000
 80029f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	4b92      	ldr	r3, [pc, #584]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e9      	bne.n	80029d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a6 	beq.w	8002b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b8b      	ldr	r3, [pc, #556]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	4b88      	ldr	r3, [pc, #544]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a87      	ldr	r2, [pc, #540]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b85      	ldr	r3, [pc, #532]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	@ (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b7f      	ldr	r3, [pc, #508]	@ (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7ff fbcd 	bl	80021f0 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7ff fbc9 	bl	80021f0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b64      	cmp	r3, #100	@ 0x64
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e103      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x312>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6213      	str	r3, [r2, #32]
 8002a8c:	e02d      	b.n	8002aea <HAL_RCC_OscConfig+0x36e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x334>
 8002a96:	4b6a      	ldr	r3, [pc, #424]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a69      	ldr	r2, [pc, #420]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	4b67      	ldr	r3, [pc, #412]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a66      	ldr	r2, [pc, #408]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	e01c      	b.n	8002aea <HAL_RCC_OscConfig+0x36e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x356>
 8002ab8:	4b61      	ldr	r3, [pc, #388]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a60      	ldr	r2, [pc, #384]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x36e>
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6213      	str	r3, [r2, #32]
 8002ade:	4b58      	ldr	r3, [pc, #352]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4a57      	ldr	r2, [pc, #348]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7ff fb7d 	bl	80021f0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7ff fb79 	bl	80021f0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0b1      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	4b4b      	ldr	r3, [pc, #300]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCC_OscConfig+0x37e>
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fb67 	bl	80021f0 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7ff fb63 	bl	80021f0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e09b      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ee      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4a3b      	ldr	r2, [pc, #236]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8087 	beq.w	8002c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b64:	4b36      	ldr	r3, [pc, #216]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d061      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d146      	bne.n	8002c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7ff fb37 	bl	80021f0 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7ff fb33 	bl	80021f0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e06d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bac:	d108      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4921      	ldr	r1, [pc, #132]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a19      	ldr	r1, [r3, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	491b      	ldr	r1, [pc, #108]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7ff fb07 	bl	80021f0 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7ff fb03 	bl	80021f0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e03d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x46a>
 8002c04:	e035      	b.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff faf0 	bl	80021f0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7ff faec 	bl	80021f0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e026      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x498>
 8002c32:	e01e      	b.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e019      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_OscConfig+0x500>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d0      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b67      	ldr	r3, [pc, #412]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4965      	ldr	r1, [pc, #404]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e073      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06b      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4936      	ldr	r1, [pc, #216]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d70:	f7ff fa3e 	bl	80021f0 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7ff fa3a 	bl	80021f0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e053      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b27      	ldr	r3, [pc, #156]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d210      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4922      	ldr	r1, [pc, #136]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1cc>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_ClockConfig+0x1d0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f99c 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08007bfc 	.word	0x08007bfc
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x30>
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x36>
 8002e82:	e027      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x98>)
 8002e86:	613b      	str	r3, [r7, #16]
      break;
 8002e88:	e027      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e94:	5cd3      	ldrb	r3, [r2, r3]
 8002e96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea2:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0c5b      	lsrs	r3, r3, #17
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb6:	fb03 f202 	mul.w	r2, r3, r2
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e004      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed6:	613b      	str	r3, [r7, #16]
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	693b      	ldr	r3, [r7, #16]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	007a1200 	.word	0x007a1200
 8002ef0:	08007c14 	.word	0x08007c14
 8002ef4:	08007c24 	.word	0x08007c24
 8002ef8:	003d0900 	.word	0x003d0900

08002efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b02      	ldr	r3, [pc, #8]	@ (8002f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	20000000 	.word	0x20000000

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f14:	f7ff fff2 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	@ (8002f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08007c0c 	.word	0x08007c0c

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f3c:	f7ff ffde 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0adb      	lsrs	r3, r3, #11
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	@ (8002f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08007c0c 	.word	0x08007c0c

08002f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <RCC_Delay+0x34>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <RCC_Delay+0x38>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0a5b      	lsrs	r3, r3, #9
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f7c:	bf00      	nop
  }
  while (Delay --);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1e5a      	subs	r2, r3, #1
 8002f82:	60fa      	str	r2, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f9      	bne.n	8002f7c <RCC_Delay+0x1c>
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	20000000 	.word	0x20000000
 8002f98:	10624dd3 	.word	0x10624dd3

08002f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e042      	b.n	8003034 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff f80e 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f971 	bl	80032c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b20      	cmp	r3, #32
 800305a:	d175      	bne.n	8003148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_UART_Transmit+0x2c>
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e06e      	b.n	800314a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2221      	movs	r2, #33	@ 0x21
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800307a:	f7ff f8b9 	bl	80021f0 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	88fa      	ldrh	r2, [r7, #6]
 800308a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003094:	d108      	bne.n	80030a8 <HAL_UART_Transmit+0x6c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e003      	b.n	80030b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030b0:	e02e      	b.n	8003110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f848 	bl	8003152 <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e03a      	b.n	800314a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3302      	adds	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e007      	b.n	8003102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1cb      	bne.n	80030b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	2140      	movs	r1, #64	@ 0x40
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f814 	bl	8003152 <UART_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e006      	b.n	800314a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e000      	b.n	800314a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003162:	e03b      	b.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d037      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7ff f840 	bl	80021f0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	6a3a      	ldr	r2, [r7, #32]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <UART_WaitOnFlagUntilTimeout+0x30>
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e03a      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d020      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d01d      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d116      	bne.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f81d 	bl	8003204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2208      	movs	r2, #8
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e00f      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d0b4      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003204:	b480      	push	{r7}
 8003206:	b095      	sub	sp, #84	@ 0x54
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800322c:	643a      	str	r2, [r7, #64]	@ 0x40
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800323a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	2b01      	cmp	r3, #1
 800327a:	d119      	bne.n	80032b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	60bb      	str	r3, [r7, #8]
   return(result);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f023 0310 	bic.w	r3, r3, #16
 8003292:	647b      	str	r3, [r7, #68]	@ 0x44
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800329c:	61ba      	str	r2, [r7, #24]
 800329e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6979      	ldr	r1, [r7, #20]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	613b      	str	r3, [r7, #16]
   return(result);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e5      	bne.n	800327c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032be:	bf00      	nop
 80032c0:	3754      	adds	r7, #84	@ 0x54
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003302:	f023 030c 	bic.w	r3, r3, #12
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2c      	ldr	r2, [pc, #176]	@ (80033dc <UART_SetConfig+0x114>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d103      	bne.n	8003338 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7ff fe02 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	e002      	b.n	800333e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003338:	f7ff fdea 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 800333c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	4a22      	ldr	r2, [pc, #136]	@ (80033e0 <UART_SetConfig+0x118>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	0119      	lsls	r1, r3, #4
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb2 f2f3 	udiv	r2, r2, r3
 8003374:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <UART_SetConfig+0x118>)
 8003376:	fba3 0302 	umull	r0, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2064      	movs	r0, #100	@ 0x64
 800337e:	fb00 f303 	mul.w	r3, r0, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	@ 0x32
 8003388:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <UART_SetConfig+0x118>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003394:	4419      	add	r1, r3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ac:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <UART_SetConfig+0x118>)
 80033ae:	fba3 0302 	umull	r0, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2064      	movs	r0, #100	@ 0x64
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	@ 0x32
 80033c0:	4a07      	ldr	r2, [pc, #28]	@ (80033e0 <UART_SetConfig+0x118>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 020f 	and.w	r2, r3, #15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	440a      	add	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40013800 	.word	0x40013800
 80033e0:	51eb851f 	.word	0x51eb851f

080033e4 <__cvt>:
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ea:	461d      	mov	r5, r3
 80033ec:	bfbb      	ittet	lt
 80033ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80033f2:	461d      	movlt	r5, r3
 80033f4:	2300      	movge	r3, #0
 80033f6:	232d      	movlt	r3, #45	@ 0x2d
 80033f8:	b088      	sub	sp, #32
 80033fa:	4614      	mov	r4, r2
 80033fc:	bfb8      	it	lt
 80033fe:	4614      	movlt	r4, r2
 8003400:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003402:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003404:	7013      	strb	r3, [r2, #0]
 8003406:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003408:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800340c:	f023 0820 	bic.w	r8, r3, #32
 8003410:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003414:	d005      	beq.n	8003422 <__cvt+0x3e>
 8003416:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800341a:	d100      	bne.n	800341e <__cvt+0x3a>
 800341c:	3601      	adds	r6, #1
 800341e:	2302      	movs	r3, #2
 8003420:	e000      	b.n	8003424 <__cvt+0x40>
 8003422:	2303      	movs	r3, #3
 8003424:	aa07      	add	r2, sp, #28
 8003426:	9204      	str	r2, [sp, #16]
 8003428:	aa06      	add	r2, sp, #24
 800342a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800342e:	e9cd 3600 	strd	r3, r6, [sp]
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f001 f88b 	bl	8004550 <_dtoa_r>
 800343a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800343e:	4607      	mov	r7, r0
 8003440:	d119      	bne.n	8003476 <__cvt+0x92>
 8003442:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003444:	07db      	lsls	r3, r3, #31
 8003446:	d50e      	bpl.n	8003466 <__cvt+0x82>
 8003448:	eb00 0906 	add.w	r9, r0, r6
 800344c:	2200      	movs	r2, #0
 800344e:	2300      	movs	r3, #0
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fd faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8003458:	b108      	cbz	r0, 800345e <__cvt+0x7a>
 800345a:	f8cd 901c 	str.w	r9, [sp, #28]
 800345e:	2230      	movs	r2, #48	@ 0x30
 8003460:	9b07      	ldr	r3, [sp, #28]
 8003462:	454b      	cmp	r3, r9
 8003464:	d31e      	bcc.n	80034a4 <__cvt+0xc0>
 8003466:	4638      	mov	r0, r7
 8003468:	9b07      	ldr	r3, [sp, #28]
 800346a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800346c:	1bdb      	subs	r3, r3, r7
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	b008      	add	sp, #32
 8003472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003476:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800347a:	eb00 0906 	add.w	r9, r0, r6
 800347e:	d1e5      	bne.n	800344c <__cvt+0x68>
 8003480:	7803      	ldrb	r3, [r0, #0]
 8003482:	2b30      	cmp	r3, #48	@ 0x30
 8003484:	d10a      	bne.n	800349c <__cvt+0xb8>
 8003486:	2200      	movs	r2, #0
 8003488:	2300      	movs	r3, #0
 800348a:	4620      	mov	r0, r4
 800348c:	4629      	mov	r1, r5
 800348e:	f7fd fa8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003492:	b918      	cbnz	r0, 800349c <__cvt+0xb8>
 8003494:	f1c6 0601 	rsb	r6, r6, #1
 8003498:	f8ca 6000 	str.w	r6, [sl]
 800349c:	f8da 3000 	ldr.w	r3, [sl]
 80034a0:	4499      	add	r9, r3
 80034a2:	e7d3      	b.n	800344c <__cvt+0x68>
 80034a4:	1c59      	adds	r1, r3, #1
 80034a6:	9107      	str	r1, [sp, #28]
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e7d9      	b.n	8003460 <__cvt+0x7c>

080034ac <__exponent>:
 80034ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ae:	2900      	cmp	r1, #0
 80034b0:	bfb6      	itet	lt
 80034b2:	232d      	movlt	r3, #45	@ 0x2d
 80034b4:	232b      	movge	r3, #43	@ 0x2b
 80034b6:	4249      	neglt	r1, r1
 80034b8:	2909      	cmp	r1, #9
 80034ba:	7002      	strb	r2, [r0, #0]
 80034bc:	7043      	strb	r3, [r0, #1]
 80034be:	dd29      	ble.n	8003514 <__exponent+0x68>
 80034c0:	f10d 0307 	add.w	r3, sp, #7
 80034c4:	461d      	mov	r5, r3
 80034c6:	270a      	movs	r7, #10
 80034c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80034cc:	461a      	mov	r2, r3
 80034ce:	fb07 1416 	mls	r4, r7, r6, r1
 80034d2:	3430      	adds	r4, #48	@ 0x30
 80034d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80034d8:	460c      	mov	r4, r1
 80034da:	2c63      	cmp	r4, #99	@ 0x63
 80034dc:	4631      	mov	r1, r6
 80034de:	f103 33ff 	add.w	r3, r3, #4294967295
 80034e2:	dcf1      	bgt.n	80034c8 <__exponent+0x1c>
 80034e4:	3130      	adds	r1, #48	@ 0x30
 80034e6:	1e94      	subs	r4, r2, #2
 80034e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80034ec:	4623      	mov	r3, r4
 80034ee:	1c41      	adds	r1, r0, #1
 80034f0:	42ab      	cmp	r3, r5
 80034f2:	d30a      	bcc.n	800350a <__exponent+0x5e>
 80034f4:	f10d 0309 	add.w	r3, sp, #9
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	42ac      	cmp	r4, r5
 80034fc:	bf88      	it	hi
 80034fe:	2300      	movhi	r3, #0
 8003500:	3302      	adds	r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	1a18      	subs	r0, r3, r0
 8003506:	b003      	add	sp, #12
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800350e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003512:	e7ed      	b.n	80034f0 <__exponent+0x44>
 8003514:	2330      	movs	r3, #48	@ 0x30
 8003516:	3130      	adds	r1, #48	@ 0x30
 8003518:	7083      	strb	r3, [r0, #2]
 800351a:	70c1      	strb	r1, [r0, #3]
 800351c:	1d03      	adds	r3, r0, #4
 800351e:	e7f1      	b.n	8003504 <__exponent+0x58>

08003520 <_printf_float>:
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	b091      	sub	sp, #68	@ 0x44
 8003526:	460c      	mov	r4, r1
 8003528:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800352c:	4616      	mov	r6, r2
 800352e:	461f      	mov	r7, r3
 8003530:	4605      	mov	r5, r0
 8003532:	f000 fef9 	bl	8004328 <_localeconv_r>
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	9308      	str	r3, [sp, #32]
 800353c:	f7fc fe08 	bl	8000150 <strlen>
 8003540:	2300      	movs	r3, #0
 8003542:	930e      	str	r3, [sp, #56]	@ 0x38
 8003544:	f8d8 3000 	ldr.w	r3, [r8]
 8003548:	9009      	str	r0, [sp, #36]	@ 0x24
 800354a:	3307      	adds	r3, #7
 800354c:	f023 0307 	bic.w	r3, r3, #7
 8003550:	f103 0208 	add.w	r2, r3, #8
 8003554:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003558:	f8d4 b000 	ldr.w	fp, [r4]
 800355c:	f8c8 2000 	str.w	r2, [r8]
 8003560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003564:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800356a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800356e:	f04f 32ff 	mov.w	r2, #4294967295
 8003572:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003576:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800357a:	4b9c      	ldr	r3, [pc, #624]	@ (80037ec <_printf_float+0x2cc>)
 800357c:	f7fd fa46 	bl	8000a0c <__aeabi_dcmpun>
 8003580:	bb70      	cbnz	r0, 80035e0 <_printf_float+0xc0>
 8003582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003586:	f04f 32ff 	mov.w	r2, #4294967295
 800358a:	4b98      	ldr	r3, [pc, #608]	@ (80037ec <_printf_float+0x2cc>)
 800358c:	f7fd fa20 	bl	80009d0 <__aeabi_dcmple>
 8003590:	bb30      	cbnz	r0, 80035e0 <_printf_float+0xc0>
 8003592:	2200      	movs	r2, #0
 8003594:	2300      	movs	r3, #0
 8003596:	4640      	mov	r0, r8
 8003598:	4649      	mov	r1, r9
 800359a:	f7fd fa0f 	bl	80009bc <__aeabi_dcmplt>
 800359e:	b110      	cbz	r0, 80035a6 <_printf_float+0x86>
 80035a0:	232d      	movs	r3, #45	@ 0x2d
 80035a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035a6:	4a92      	ldr	r2, [pc, #584]	@ (80037f0 <_printf_float+0x2d0>)
 80035a8:	4b92      	ldr	r3, [pc, #584]	@ (80037f4 <_printf_float+0x2d4>)
 80035aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80035ae:	bf8c      	ite	hi
 80035b0:	4690      	movhi	r8, r2
 80035b2:	4698      	movls	r8, r3
 80035b4:	2303      	movs	r3, #3
 80035b6:	f04f 0900 	mov.w	r9, #0
 80035ba:	6123      	str	r3, [r4, #16]
 80035bc:	f02b 0304 	bic.w	r3, fp, #4
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	4633      	mov	r3, r6
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	9700      	str	r7, [sp, #0]
 80035ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80035cc:	f000 f9d4 	bl	8003978 <_printf_common>
 80035d0:	3001      	adds	r0, #1
 80035d2:	f040 8090 	bne.w	80036f6 <_printf_float+0x1d6>
 80035d6:	f04f 30ff 	mov.w	r0, #4294967295
 80035da:	b011      	add	sp, #68	@ 0x44
 80035dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	4640      	mov	r0, r8
 80035e6:	4649      	mov	r1, r9
 80035e8:	f7fd fa10 	bl	8000a0c <__aeabi_dcmpun>
 80035ec:	b148      	cbz	r0, 8003602 <_printf_float+0xe2>
 80035ee:	464b      	mov	r3, r9
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bfb8      	it	lt
 80035f4:	232d      	movlt	r3, #45	@ 0x2d
 80035f6:	4a80      	ldr	r2, [pc, #512]	@ (80037f8 <_printf_float+0x2d8>)
 80035f8:	bfb8      	it	lt
 80035fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80035fe:	4b7f      	ldr	r3, [pc, #508]	@ (80037fc <_printf_float+0x2dc>)
 8003600:	e7d3      	b.n	80035aa <_printf_float+0x8a>
 8003602:	6863      	ldr	r3, [r4, #4]
 8003604:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	d13f      	bne.n	800368c <_printf_float+0x16c>
 800360c:	2306      	movs	r3, #6
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	9206      	str	r2, [sp, #24]
 800361a:	aa0e      	add	r2, sp, #56	@ 0x38
 800361c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003620:	aa0d      	add	r2, sp, #52	@ 0x34
 8003622:	9203      	str	r2, [sp, #12]
 8003624:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003628:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	4642      	mov	r2, r8
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4628      	mov	r0, r5
 8003634:	464b      	mov	r3, r9
 8003636:	910a      	str	r1, [sp, #40]	@ 0x28
 8003638:	f7ff fed4 	bl	80033e4 <__cvt>
 800363c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800363e:	4680      	mov	r8, r0
 8003640:	2947      	cmp	r1, #71	@ 0x47
 8003642:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003644:	d128      	bne.n	8003698 <_printf_float+0x178>
 8003646:	1cc8      	adds	r0, r1, #3
 8003648:	db02      	blt.n	8003650 <_printf_float+0x130>
 800364a:	6863      	ldr	r3, [r4, #4]
 800364c:	4299      	cmp	r1, r3
 800364e:	dd40      	ble.n	80036d2 <_printf_float+0x1b2>
 8003650:	f1aa 0a02 	sub.w	sl, sl, #2
 8003654:	fa5f fa8a 	uxtb.w	sl, sl
 8003658:	4652      	mov	r2, sl
 800365a:	3901      	subs	r1, #1
 800365c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003660:	910d      	str	r1, [sp, #52]	@ 0x34
 8003662:	f7ff ff23 	bl	80034ac <__exponent>
 8003666:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003668:	4681      	mov	r9, r0
 800366a:	1813      	adds	r3, r2, r0
 800366c:	2a01      	cmp	r2, #1
 800366e:	6123      	str	r3, [r4, #16]
 8003670:	dc02      	bgt.n	8003678 <_printf_float+0x158>
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	07d2      	lsls	r2, r2, #31
 8003676:	d501      	bpl.n	800367c <_printf_float+0x15c>
 8003678:	3301      	adds	r3, #1
 800367a:	6123      	str	r3, [r4, #16]
 800367c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003680:	2b00      	cmp	r3, #0
 8003682:	d09e      	beq.n	80035c2 <_printf_float+0xa2>
 8003684:	232d      	movs	r3, #45	@ 0x2d
 8003686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800368a:	e79a      	b.n	80035c2 <_printf_float+0xa2>
 800368c:	2947      	cmp	r1, #71	@ 0x47
 800368e:	d1bf      	bne.n	8003610 <_printf_float+0xf0>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1bd      	bne.n	8003610 <_printf_float+0xf0>
 8003694:	2301      	movs	r3, #1
 8003696:	e7ba      	b.n	800360e <_printf_float+0xee>
 8003698:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800369c:	d9dc      	bls.n	8003658 <_printf_float+0x138>
 800369e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80036a2:	d118      	bne.n	80036d6 <_printf_float+0x1b6>
 80036a4:	2900      	cmp	r1, #0
 80036a6:	6863      	ldr	r3, [r4, #4]
 80036a8:	dd0b      	ble.n	80036c2 <_printf_float+0x1a2>
 80036aa:	6121      	str	r1, [r4, #16]
 80036ac:	b913      	cbnz	r3, 80036b4 <_printf_float+0x194>
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	07d0      	lsls	r0, r2, #31
 80036b2:	d502      	bpl.n	80036ba <_printf_float+0x19a>
 80036b4:	3301      	adds	r3, #1
 80036b6:	440b      	add	r3, r1
 80036b8:	6123      	str	r3, [r4, #16]
 80036ba:	f04f 0900 	mov.w	r9, #0
 80036be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80036c0:	e7dc      	b.n	800367c <_printf_float+0x15c>
 80036c2:	b913      	cbnz	r3, 80036ca <_printf_float+0x1aa>
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	07d2      	lsls	r2, r2, #31
 80036c8:	d501      	bpl.n	80036ce <_printf_float+0x1ae>
 80036ca:	3302      	adds	r3, #2
 80036cc:	e7f4      	b.n	80036b8 <_printf_float+0x198>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e7f2      	b.n	80036b8 <_printf_float+0x198>
 80036d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80036d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80036d8:	4299      	cmp	r1, r3
 80036da:	db05      	blt.n	80036e8 <_printf_float+0x1c8>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	6121      	str	r1, [r4, #16]
 80036e0:	07d8      	lsls	r0, r3, #31
 80036e2:	d5ea      	bpl.n	80036ba <_printf_float+0x19a>
 80036e4:	1c4b      	adds	r3, r1, #1
 80036e6:	e7e7      	b.n	80036b8 <_printf_float+0x198>
 80036e8:	2900      	cmp	r1, #0
 80036ea:	bfcc      	ite	gt
 80036ec:	2201      	movgt	r2, #1
 80036ee:	f1c1 0202 	rsble	r2, r1, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	e7e0      	b.n	80036b8 <_printf_float+0x198>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	055a      	lsls	r2, r3, #21
 80036fa:	d407      	bmi.n	800370c <_printf_float+0x1ec>
 80036fc:	6923      	ldr	r3, [r4, #16]
 80036fe:	4642      	mov	r2, r8
 8003700:	4631      	mov	r1, r6
 8003702:	4628      	mov	r0, r5
 8003704:	47b8      	blx	r7
 8003706:	3001      	adds	r0, #1
 8003708:	d12b      	bne.n	8003762 <_printf_float+0x242>
 800370a:	e764      	b.n	80035d6 <_printf_float+0xb6>
 800370c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003710:	f240 80dc 	bls.w	80038cc <_printf_float+0x3ac>
 8003714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003718:	2200      	movs	r2, #0
 800371a:	2300      	movs	r3, #0
 800371c:	f7fd f944 	bl	80009a8 <__aeabi_dcmpeq>
 8003720:	2800      	cmp	r0, #0
 8003722:	d033      	beq.n	800378c <_printf_float+0x26c>
 8003724:	2301      	movs	r3, #1
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	4a35      	ldr	r2, [pc, #212]	@ (8003800 <_printf_float+0x2e0>)
 800372c:	47b8      	blx	r7
 800372e:	3001      	adds	r0, #1
 8003730:	f43f af51 	beq.w	80035d6 <_printf_float+0xb6>
 8003734:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003738:	4543      	cmp	r3, r8
 800373a:	db02      	blt.n	8003742 <_printf_float+0x222>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	07d8      	lsls	r0, r3, #31
 8003740:	d50f      	bpl.n	8003762 <_printf_float+0x242>
 8003742:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	47b8      	blx	r7
 800374c:	3001      	adds	r0, #1
 800374e:	f43f af42 	beq.w	80035d6 <_printf_float+0xb6>
 8003752:	f04f 0900 	mov.w	r9, #0
 8003756:	f108 38ff 	add.w	r8, r8, #4294967295
 800375a:	f104 0a1a 	add.w	sl, r4, #26
 800375e:	45c8      	cmp	r8, r9
 8003760:	dc09      	bgt.n	8003776 <_printf_float+0x256>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	079b      	lsls	r3, r3, #30
 8003766:	f100 8102 	bmi.w	800396e <_printf_float+0x44e>
 800376a:	68e0      	ldr	r0, [r4, #12]
 800376c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800376e:	4298      	cmp	r0, r3
 8003770:	bfb8      	it	lt
 8003772:	4618      	movlt	r0, r3
 8003774:	e731      	b.n	80035da <_printf_float+0xba>
 8003776:	2301      	movs	r3, #1
 8003778:	4652      	mov	r2, sl
 800377a:	4631      	mov	r1, r6
 800377c:	4628      	mov	r0, r5
 800377e:	47b8      	blx	r7
 8003780:	3001      	adds	r0, #1
 8003782:	f43f af28 	beq.w	80035d6 <_printf_float+0xb6>
 8003786:	f109 0901 	add.w	r9, r9, #1
 800378a:	e7e8      	b.n	800375e <_printf_float+0x23e>
 800378c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800378e:	2b00      	cmp	r3, #0
 8003790:	dc38      	bgt.n	8003804 <_printf_float+0x2e4>
 8003792:	2301      	movs	r3, #1
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	4a19      	ldr	r2, [pc, #100]	@ (8003800 <_printf_float+0x2e0>)
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f af1a 	beq.w	80035d6 <_printf_float+0xb6>
 80037a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80037a6:	ea59 0303 	orrs.w	r3, r9, r3
 80037aa:	d102      	bne.n	80037b2 <_printf_float+0x292>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	07d9      	lsls	r1, r3, #31
 80037b0:	d5d7      	bpl.n	8003762 <_printf_float+0x242>
 80037b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037b6:	4631      	mov	r1, r6
 80037b8:	4628      	mov	r0, r5
 80037ba:	47b8      	blx	r7
 80037bc:	3001      	adds	r0, #1
 80037be:	f43f af0a 	beq.w	80035d6 <_printf_float+0xb6>
 80037c2:	f04f 0a00 	mov.w	sl, #0
 80037c6:	f104 0b1a 	add.w	fp, r4, #26
 80037ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037cc:	425b      	negs	r3, r3
 80037ce:	4553      	cmp	r3, sl
 80037d0:	dc01      	bgt.n	80037d6 <_printf_float+0x2b6>
 80037d2:	464b      	mov	r3, r9
 80037d4:	e793      	b.n	80036fe <_printf_float+0x1de>
 80037d6:	2301      	movs	r3, #1
 80037d8:	465a      	mov	r2, fp
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	f43f aef8 	beq.w	80035d6 <_printf_float+0xb6>
 80037e6:	f10a 0a01 	add.w	sl, sl, #1
 80037ea:	e7ee      	b.n	80037ca <_printf_float+0x2aa>
 80037ec:	7fefffff 	.word	0x7fefffff
 80037f0:	08007c2a 	.word	0x08007c2a
 80037f4:	08007c26 	.word	0x08007c26
 80037f8:	08007c32 	.word	0x08007c32
 80037fc:	08007c2e 	.word	0x08007c2e
 8003800:	08007c36 	.word	0x08007c36
 8003804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003806:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800380a:	4553      	cmp	r3, sl
 800380c:	bfa8      	it	ge
 800380e:	4653      	movge	r3, sl
 8003810:	2b00      	cmp	r3, #0
 8003812:	4699      	mov	r9, r3
 8003814:	dc36      	bgt.n	8003884 <_printf_float+0x364>
 8003816:	f04f 0b00 	mov.w	fp, #0
 800381a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800381e:	f104 021a 	add.w	r2, r4, #26
 8003822:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003824:	930a      	str	r3, [sp, #40]	@ 0x28
 8003826:	eba3 0309 	sub.w	r3, r3, r9
 800382a:	455b      	cmp	r3, fp
 800382c:	dc31      	bgt.n	8003892 <_printf_float+0x372>
 800382e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003830:	459a      	cmp	sl, r3
 8003832:	dc3a      	bgt.n	80038aa <_printf_float+0x38a>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	07da      	lsls	r2, r3, #31
 8003838:	d437      	bmi.n	80038aa <_printf_float+0x38a>
 800383a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800383c:	ebaa 0903 	sub.w	r9, sl, r3
 8003840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003842:	ebaa 0303 	sub.w	r3, sl, r3
 8003846:	4599      	cmp	r9, r3
 8003848:	bfa8      	it	ge
 800384a:	4699      	movge	r9, r3
 800384c:	f1b9 0f00 	cmp.w	r9, #0
 8003850:	dc33      	bgt.n	80038ba <_printf_float+0x39a>
 8003852:	f04f 0800 	mov.w	r8, #0
 8003856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800385a:	f104 0b1a 	add.w	fp, r4, #26
 800385e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003860:	ebaa 0303 	sub.w	r3, sl, r3
 8003864:	eba3 0309 	sub.w	r3, r3, r9
 8003868:	4543      	cmp	r3, r8
 800386a:	f77f af7a 	ble.w	8003762 <_printf_float+0x242>
 800386e:	2301      	movs	r3, #1
 8003870:	465a      	mov	r2, fp
 8003872:	4631      	mov	r1, r6
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	f43f aeac 	beq.w	80035d6 <_printf_float+0xb6>
 800387e:	f108 0801 	add.w	r8, r8, #1
 8003882:	e7ec      	b.n	800385e <_printf_float+0x33e>
 8003884:	4642      	mov	r2, r8
 8003886:	4631      	mov	r1, r6
 8003888:	4628      	mov	r0, r5
 800388a:	47b8      	blx	r7
 800388c:	3001      	adds	r0, #1
 800388e:	d1c2      	bne.n	8003816 <_printf_float+0x2f6>
 8003890:	e6a1      	b.n	80035d6 <_printf_float+0xb6>
 8003892:	2301      	movs	r3, #1
 8003894:	4631      	mov	r1, r6
 8003896:	4628      	mov	r0, r5
 8003898:	920a      	str	r2, [sp, #40]	@ 0x28
 800389a:	47b8      	blx	r7
 800389c:	3001      	adds	r0, #1
 800389e:	f43f ae9a 	beq.w	80035d6 <_printf_float+0xb6>
 80038a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038a4:	f10b 0b01 	add.w	fp, fp, #1
 80038a8:	e7bb      	b.n	8003822 <_printf_float+0x302>
 80038aa:	4631      	mov	r1, r6
 80038ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d1c0      	bne.n	800383a <_printf_float+0x31a>
 80038b8:	e68d      	b.n	80035d6 <_printf_float+0xb6>
 80038ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038bc:	464b      	mov	r3, r9
 80038be:	4631      	mov	r1, r6
 80038c0:	4628      	mov	r0, r5
 80038c2:	4442      	add	r2, r8
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	d1c3      	bne.n	8003852 <_printf_float+0x332>
 80038ca:	e684      	b.n	80035d6 <_printf_float+0xb6>
 80038cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80038d0:	f1ba 0f01 	cmp.w	sl, #1
 80038d4:	dc01      	bgt.n	80038da <_printf_float+0x3ba>
 80038d6:	07db      	lsls	r3, r3, #31
 80038d8:	d536      	bpl.n	8003948 <_printf_float+0x428>
 80038da:	2301      	movs	r3, #1
 80038dc:	4642      	mov	r2, r8
 80038de:	4631      	mov	r1, r6
 80038e0:	4628      	mov	r0, r5
 80038e2:	47b8      	blx	r7
 80038e4:	3001      	adds	r0, #1
 80038e6:	f43f ae76 	beq.w	80035d6 <_printf_float+0xb6>
 80038ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038ee:	4631      	mov	r1, r6
 80038f0:	4628      	mov	r0, r5
 80038f2:	47b8      	blx	r7
 80038f4:	3001      	adds	r0, #1
 80038f6:	f43f ae6e 	beq.w	80035d6 <_printf_float+0xb6>
 80038fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80038fe:	2200      	movs	r2, #0
 8003900:	2300      	movs	r3, #0
 8003902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003906:	f7fd f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800390a:	b9c0      	cbnz	r0, 800393e <_printf_float+0x41e>
 800390c:	4653      	mov	r3, sl
 800390e:	f108 0201 	add.w	r2, r8, #1
 8003912:	4631      	mov	r1, r6
 8003914:	4628      	mov	r0, r5
 8003916:	47b8      	blx	r7
 8003918:	3001      	adds	r0, #1
 800391a:	d10c      	bne.n	8003936 <_printf_float+0x416>
 800391c:	e65b      	b.n	80035d6 <_printf_float+0xb6>
 800391e:	2301      	movs	r3, #1
 8003920:	465a      	mov	r2, fp
 8003922:	4631      	mov	r1, r6
 8003924:	4628      	mov	r0, r5
 8003926:	47b8      	blx	r7
 8003928:	3001      	adds	r0, #1
 800392a:	f43f ae54 	beq.w	80035d6 <_printf_float+0xb6>
 800392e:	f108 0801 	add.w	r8, r8, #1
 8003932:	45d0      	cmp	r8, sl
 8003934:	dbf3      	blt.n	800391e <_printf_float+0x3fe>
 8003936:	464b      	mov	r3, r9
 8003938:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800393c:	e6e0      	b.n	8003700 <_printf_float+0x1e0>
 800393e:	f04f 0800 	mov.w	r8, #0
 8003942:	f104 0b1a 	add.w	fp, r4, #26
 8003946:	e7f4      	b.n	8003932 <_printf_float+0x412>
 8003948:	2301      	movs	r3, #1
 800394a:	4642      	mov	r2, r8
 800394c:	e7e1      	b.n	8003912 <_printf_float+0x3f2>
 800394e:	2301      	movs	r3, #1
 8003950:	464a      	mov	r2, r9
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f ae3c 	beq.w	80035d6 <_printf_float+0xb6>
 800395e:	f108 0801 	add.w	r8, r8, #1
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	4543      	cmp	r3, r8
 800396a:	dcf0      	bgt.n	800394e <_printf_float+0x42e>
 800396c:	e6fd      	b.n	800376a <_printf_float+0x24a>
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	f104 0919 	add.w	r9, r4, #25
 8003976:	e7f4      	b.n	8003962 <_printf_float+0x442>

08003978 <_printf_common>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	4616      	mov	r6, r2
 800397e:	4698      	mov	r8, r3
 8003980:	688a      	ldr	r2, [r1, #8]
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	4607      	mov	r7, r0
 8003986:	4293      	cmp	r3, r2
 8003988:	bfb8      	it	lt
 800398a:	4613      	movlt	r3, r2
 800398c:	6033      	str	r3, [r6, #0]
 800398e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003992:	460c      	mov	r4, r1
 8003994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003998:	b10a      	cbz	r2, 800399e <_printf_common+0x26>
 800399a:	3301      	adds	r3, #1
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	0699      	lsls	r1, r3, #26
 80039a2:	bf42      	ittt	mi
 80039a4:	6833      	ldrmi	r3, [r6, #0]
 80039a6:	3302      	addmi	r3, #2
 80039a8:	6033      	strmi	r3, [r6, #0]
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	f015 0506 	ands.w	r5, r5, #6
 80039b0:	d106      	bne.n	80039c0 <_printf_common+0x48>
 80039b2:	f104 0a19 	add.w	sl, r4, #25
 80039b6:	68e3      	ldr	r3, [r4, #12]
 80039b8:	6832      	ldr	r2, [r6, #0]
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	42ab      	cmp	r3, r5
 80039be:	dc2b      	bgt.n	8003a18 <_printf_common+0xa0>
 80039c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	3b00      	subs	r3, #0
 80039c8:	bf18      	it	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	0692      	lsls	r2, r2, #26
 80039ce:	d430      	bmi.n	8003a32 <_printf_common+0xba>
 80039d0:	4641      	mov	r1, r8
 80039d2:	4638      	mov	r0, r7
 80039d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039d8:	47c8      	blx	r9
 80039da:	3001      	adds	r0, #1
 80039dc:	d023      	beq.n	8003a26 <_printf_common+0xae>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	6922      	ldr	r2, [r4, #16]
 80039e2:	f003 0306 	and.w	r3, r3, #6
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf14      	ite	ne
 80039ea:	2500      	movne	r5, #0
 80039ec:	6833      	ldreq	r3, [r6, #0]
 80039ee:	f04f 0600 	mov.w	r6, #0
 80039f2:	bf08      	it	eq
 80039f4:	68e5      	ldreq	r5, [r4, #12]
 80039f6:	f104 041a 	add.w	r4, r4, #26
 80039fa:	bf08      	it	eq
 80039fc:	1aed      	subeq	r5, r5, r3
 80039fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a02:	bf08      	it	eq
 8003a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bfc4      	itt	gt
 8003a0c:	1a9b      	subgt	r3, r3, r2
 8003a0e:	18ed      	addgt	r5, r5, r3
 8003a10:	42b5      	cmp	r5, r6
 8003a12:	d11a      	bne.n	8003a4a <_printf_common+0xd2>
 8003a14:	2000      	movs	r0, #0
 8003a16:	e008      	b.n	8003a2a <_printf_common+0xb2>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	4638      	mov	r0, r7
 8003a20:	47c8      	blx	r9
 8003a22:	3001      	adds	r0, #1
 8003a24:	d103      	bne.n	8003a2e <_printf_common+0xb6>
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2e:	3501      	adds	r5, #1
 8003a30:	e7c1      	b.n	80039b6 <_printf_common+0x3e>
 8003a32:	2030      	movs	r0, #48	@ 0x30
 8003a34:	18e1      	adds	r1, r4, r3
 8003a36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a40:	4422      	add	r2, r4
 8003a42:	3302      	adds	r3, #2
 8003a44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a48:	e7c2      	b.n	80039d0 <_printf_common+0x58>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4641      	mov	r1, r8
 8003a50:	4638      	mov	r0, r7
 8003a52:	47c8      	blx	r9
 8003a54:	3001      	adds	r0, #1
 8003a56:	d0e6      	beq.n	8003a26 <_printf_common+0xae>
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7d9      	b.n	8003a10 <_printf_common+0x98>

08003a5c <_printf_i>:
 8003a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a60:	7e0f      	ldrb	r7, [r1, #24]
 8003a62:	4691      	mov	r9, r2
 8003a64:	2f78      	cmp	r7, #120	@ 0x78
 8003a66:	4680      	mov	r8, r0
 8003a68:	460c      	mov	r4, r1
 8003a6a:	469a      	mov	sl, r3
 8003a6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a72:	d807      	bhi.n	8003a84 <_printf_i+0x28>
 8003a74:	2f62      	cmp	r7, #98	@ 0x62
 8003a76:	d80a      	bhi.n	8003a8e <_printf_i+0x32>
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	f000 80d1 	beq.w	8003c20 <_printf_i+0x1c4>
 8003a7e:	2f58      	cmp	r7, #88	@ 0x58
 8003a80:	f000 80b8 	beq.w	8003bf4 <_printf_i+0x198>
 8003a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a8c:	e03a      	b.n	8003b04 <_printf_i+0xa8>
 8003a8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a92:	2b15      	cmp	r3, #21
 8003a94:	d8f6      	bhi.n	8003a84 <_printf_i+0x28>
 8003a96:	a101      	add	r1, pc, #4	@ (adr r1, 8003a9c <_printf_i+0x40>)
 8003a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a9c:	08003af5 	.word	0x08003af5
 8003aa0:	08003b09 	.word	0x08003b09
 8003aa4:	08003a85 	.word	0x08003a85
 8003aa8:	08003a85 	.word	0x08003a85
 8003aac:	08003a85 	.word	0x08003a85
 8003ab0:	08003a85 	.word	0x08003a85
 8003ab4:	08003b09 	.word	0x08003b09
 8003ab8:	08003a85 	.word	0x08003a85
 8003abc:	08003a85 	.word	0x08003a85
 8003ac0:	08003a85 	.word	0x08003a85
 8003ac4:	08003a85 	.word	0x08003a85
 8003ac8:	08003c07 	.word	0x08003c07
 8003acc:	08003b33 	.word	0x08003b33
 8003ad0:	08003bc1 	.word	0x08003bc1
 8003ad4:	08003a85 	.word	0x08003a85
 8003ad8:	08003a85 	.word	0x08003a85
 8003adc:	08003c29 	.word	0x08003c29
 8003ae0:	08003a85 	.word	0x08003a85
 8003ae4:	08003b33 	.word	0x08003b33
 8003ae8:	08003a85 	.word	0x08003a85
 8003aec:	08003a85 	.word	0x08003a85
 8003af0:	08003bc9 	.word	0x08003bc9
 8003af4:	6833      	ldr	r3, [r6, #0]
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6032      	str	r2, [r6, #0]
 8003afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b04:	2301      	movs	r3, #1
 8003b06:	e09c      	b.n	8003c42 <_printf_i+0x1e6>
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	6820      	ldr	r0, [r4, #0]
 8003b0c:	1d19      	adds	r1, r3, #4
 8003b0e:	6031      	str	r1, [r6, #0]
 8003b10:	0606      	lsls	r6, r0, #24
 8003b12:	d501      	bpl.n	8003b18 <_printf_i+0xbc>
 8003b14:	681d      	ldr	r5, [r3, #0]
 8003b16:	e003      	b.n	8003b20 <_printf_i+0xc4>
 8003b18:	0645      	lsls	r5, r0, #25
 8003b1a:	d5fb      	bpl.n	8003b14 <_printf_i+0xb8>
 8003b1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	da03      	bge.n	8003b2c <_printf_i+0xd0>
 8003b24:	232d      	movs	r3, #45	@ 0x2d
 8003b26:	426d      	negs	r5, r5
 8003b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2c:	230a      	movs	r3, #10
 8003b2e:	4858      	ldr	r0, [pc, #352]	@ (8003c90 <_printf_i+0x234>)
 8003b30:	e011      	b.n	8003b56 <_printf_i+0xfa>
 8003b32:	6821      	ldr	r1, [r4, #0]
 8003b34:	6833      	ldr	r3, [r6, #0]
 8003b36:	0608      	lsls	r0, r1, #24
 8003b38:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b3c:	d402      	bmi.n	8003b44 <_printf_i+0xe8>
 8003b3e:	0649      	lsls	r1, r1, #25
 8003b40:	bf48      	it	mi
 8003b42:	b2ad      	uxthmi	r5, r5
 8003b44:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b46:	6033      	str	r3, [r6, #0]
 8003b48:	bf14      	ite	ne
 8003b4a:	230a      	movne	r3, #10
 8003b4c:	2308      	moveq	r3, #8
 8003b4e:	4850      	ldr	r0, [pc, #320]	@ (8003c90 <_printf_i+0x234>)
 8003b50:	2100      	movs	r1, #0
 8003b52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b56:	6866      	ldr	r6, [r4, #4]
 8003b58:	2e00      	cmp	r6, #0
 8003b5a:	60a6      	str	r6, [r4, #8]
 8003b5c:	db05      	blt.n	8003b6a <_printf_i+0x10e>
 8003b5e:	6821      	ldr	r1, [r4, #0]
 8003b60:	432e      	orrs	r6, r5
 8003b62:	f021 0104 	bic.w	r1, r1, #4
 8003b66:	6021      	str	r1, [r4, #0]
 8003b68:	d04b      	beq.n	8003c02 <_printf_i+0x1a6>
 8003b6a:	4616      	mov	r6, r2
 8003b6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b70:	fb03 5711 	mls	r7, r3, r1, r5
 8003b74:	5dc7      	ldrb	r7, [r0, r7]
 8003b76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b7a:	462f      	mov	r7, r5
 8003b7c:	42bb      	cmp	r3, r7
 8003b7e:	460d      	mov	r5, r1
 8003b80:	d9f4      	bls.n	8003b6c <_printf_i+0x110>
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d10b      	bne.n	8003b9e <_printf_i+0x142>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	07df      	lsls	r7, r3, #31
 8003b8a:	d508      	bpl.n	8003b9e <_printf_i+0x142>
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	6861      	ldr	r1, [r4, #4]
 8003b90:	4299      	cmp	r1, r3
 8003b92:	bfde      	ittt	le
 8003b94:	2330      	movle	r3, #48	@ 0x30
 8003b96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b9e:	1b92      	subs	r2, r2, r6
 8003ba0:	6122      	str	r2, [r4, #16]
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	f8cd a000 	str.w	sl, [sp]
 8003bac:	aa03      	add	r2, sp, #12
 8003bae:	f7ff fee3 	bl	8003978 <_printf_common>
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d14a      	bne.n	8003c4c <_printf_i+0x1f0>
 8003bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bba:	b004      	add	sp, #16
 8003bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	f043 0320 	orr.w	r3, r3, #32
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	2778      	movs	r7, #120	@ 0x78
 8003bca:	4832      	ldr	r0, [pc, #200]	@ (8003c94 <_printf_i+0x238>)
 8003bcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	6831      	ldr	r1, [r6, #0]
 8003bd4:	061f      	lsls	r7, r3, #24
 8003bd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bda:	d402      	bmi.n	8003be2 <_printf_i+0x186>
 8003bdc:	065f      	lsls	r7, r3, #25
 8003bde:	bf48      	it	mi
 8003be0:	b2ad      	uxthmi	r5, r5
 8003be2:	6031      	str	r1, [r6, #0]
 8003be4:	07d9      	lsls	r1, r3, #31
 8003be6:	bf44      	itt	mi
 8003be8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bec:	6023      	strmi	r3, [r4, #0]
 8003bee:	b11d      	cbz	r5, 8003bf8 <_printf_i+0x19c>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	e7ad      	b.n	8003b50 <_printf_i+0xf4>
 8003bf4:	4826      	ldr	r0, [pc, #152]	@ (8003c90 <_printf_i+0x234>)
 8003bf6:	e7e9      	b.n	8003bcc <_printf_i+0x170>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	f023 0320 	bic.w	r3, r3, #32
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	e7f6      	b.n	8003bf0 <_printf_i+0x194>
 8003c02:	4616      	mov	r6, r2
 8003c04:	e7bd      	b.n	8003b82 <_printf_i+0x126>
 8003c06:	6833      	ldr	r3, [r6, #0]
 8003c08:	6825      	ldr	r5, [r4, #0]
 8003c0a:	1d18      	adds	r0, r3, #4
 8003c0c:	6961      	ldr	r1, [r4, #20]
 8003c0e:	6030      	str	r0, [r6, #0]
 8003c10:	062e      	lsls	r6, r5, #24
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	d501      	bpl.n	8003c1a <_printf_i+0x1be>
 8003c16:	6019      	str	r1, [r3, #0]
 8003c18:	e002      	b.n	8003c20 <_printf_i+0x1c4>
 8003c1a:	0668      	lsls	r0, r5, #25
 8003c1c:	d5fb      	bpl.n	8003c16 <_printf_i+0x1ba>
 8003c1e:	8019      	strh	r1, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	4616      	mov	r6, r2
 8003c24:	6123      	str	r3, [r4, #16]
 8003c26:	e7bc      	b.n	8003ba2 <_printf_i+0x146>
 8003c28:	6833      	ldr	r3, [r6, #0]
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	1d1a      	adds	r2, r3, #4
 8003c2e:	6032      	str	r2, [r6, #0]
 8003c30:	681e      	ldr	r6, [r3, #0]
 8003c32:	6862      	ldr	r2, [r4, #4]
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 fbee 	bl	8004416 <memchr>
 8003c3a:	b108      	cbz	r0, 8003c40 <_printf_i+0x1e4>
 8003c3c:	1b80      	subs	r0, r0, r6
 8003c3e:	6060      	str	r0, [r4, #4]
 8003c40:	6863      	ldr	r3, [r4, #4]
 8003c42:	6123      	str	r3, [r4, #16]
 8003c44:	2300      	movs	r3, #0
 8003c46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c4a:	e7aa      	b.n	8003ba2 <_printf_i+0x146>
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4649      	mov	r1, r9
 8003c50:	4640      	mov	r0, r8
 8003c52:	6923      	ldr	r3, [r4, #16]
 8003c54:	47d0      	blx	sl
 8003c56:	3001      	adds	r0, #1
 8003c58:	d0ad      	beq.n	8003bb6 <_printf_i+0x15a>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	079b      	lsls	r3, r3, #30
 8003c5e:	d413      	bmi.n	8003c88 <_printf_i+0x22c>
 8003c60:	68e0      	ldr	r0, [r4, #12]
 8003c62:	9b03      	ldr	r3, [sp, #12]
 8003c64:	4298      	cmp	r0, r3
 8003c66:	bfb8      	it	lt
 8003c68:	4618      	movlt	r0, r3
 8003c6a:	e7a6      	b.n	8003bba <_printf_i+0x15e>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4632      	mov	r2, r6
 8003c70:	4649      	mov	r1, r9
 8003c72:	4640      	mov	r0, r8
 8003c74:	47d0      	blx	sl
 8003c76:	3001      	adds	r0, #1
 8003c78:	d09d      	beq.n	8003bb6 <_printf_i+0x15a>
 8003c7a:	3501      	adds	r5, #1
 8003c7c:	68e3      	ldr	r3, [r4, #12]
 8003c7e:	9903      	ldr	r1, [sp, #12]
 8003c80:	1a5b      	subs	r3, r3, r1
 8003c82:	42ab      	cmp	r3, r5
 8003c84:	dcf2      	bgt.n	8003c6c <_printf_i+0x210>
 8003c86:	e7eb      	b.n	8003c60 <_printf_i+0x204>
 8003c88:	2500      	movs	r5, #0
 8003c8a:	f104 0619 	add.w	r6, r4, #25
 8003c8e:	e7f5      	b.n	8003c7c <_printf_i+0x220>
 8003c90:	08007c38 	.word	0x08007c38
 8003c94:	08007c49 	.word	0x08007c49

08003c98 <_scanf_float>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	9303      	str	r3, [sp, #12]
 8003ca0:	688b      	ldr	r3, [r1, #8]
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	1e5a      	subs	r2, r3, #1
 8003ca6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003caa:	bf82      	ittt	hi
 8003cac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003cb0:	eb03 0b05 	addhi.w	fp, r3, r5
 8003cb4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003cb8:	460a      	mov	r2, r1
 8003cba:	f04f 0500 	mov.w	r5, #0
 8003cbe:	bf88      	it	hi
 8003cc0:	608b      	strhi	r3, [r1, #8]
 8003cc2:	680b      	ldr	r3, [r1, #0]
 8003cc4:	4680      	mov	r8, r0
 8003cc6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003cca:	f842 3b1c 	str.w	r3, [r2], #28
 8003cce:	460c      	mov	r4, r1
 8003cd0:	bf98      	it	ls
 8003cd2:	f04f 0b00 	movls.w	fp, #0
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	46aa      	mov	sl, r5
 8003cda:	462f      	mov	r7, r5
 8003cdc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003ce0:	9201      	str	r2, [sp, #4]
 8003ce2:	9502      	str	r5, [sp, #8]
 8003ce4:	68a2      	ldr	r2, [r4, #8]
 8003ce6:	b15a      	cbz	r2, 8003d00 <_scanf_float+0x68>
 8003ce8:	f8d9 3000 	ldr.w	r3, [r9]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cf0:	d862      	bhi.n	8003db8 <_scanf_float+0x120>
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d83a      	bhi.n	8003d6c <_scanf_float+0xd4>
 8003cf6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003cfa:	b2c8      	uxtb	r0, r1
 8003cfc:	280e      	cmp	r0, #14
 8003cfe:	d938      	bls.n	8003d72 <_scanf_float+0xda>
 8003d00:	b11f      	cbz	r7, 8003d0a <_scanf_float+0x72>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d0e:	f1ba 0f01 	cmp.w	sl, #1
 8003d12:	f200 8114 	bhi.w	8003f3e <_scanf_float+0x2a6>
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	429e      	cmp	r6, r3
 8003d1a:	f200 8105 	bhi.w	8003f28 <_scanf_float+0x290>
 8003d1e:	2001      	movs	r0, #1
 8003d20:	b007      	add	sp, #28
 8003d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d26:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003d2a:	2a0d      	cmp	r2, #13
 8003d2c:	d8e8      	bhi.n	8003d00 <_scanf_float+0x68>
 8003d2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d34 <_scanf_float+0x9c>)
 8003d30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d34:	08003e7d 	.word	0x08003e7d
 8003d38:	08003d01 	.word	0x08003d01
 8003d3c:	08003d01 	.word	0x08003d01
 8003d40:	08003d01 	.word	0x08003d01
 8003d44:	08003ed9 	.word	0x08003ed9
 8003d48:	08003eb3 	.word	0x08003eb3
 8003d4c:	08003d01 	.word	0x08003d01
 8003d50:	08003d01 	.word	0x08003d01
 8003d54:	08003e8b 	.word	0x08003e8b
 8003d58:	08003d01 	.word	0x08003d01
 8003d5c:	08003d01 	.word	0x08003d01
 8003d60:	08003d01 	.word	0x08003d01
 8003d64:	08003d01 	.word	0x08003d01
 8003d68:	08003e47 	.word	0x08003e47
 8003d6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003d70:	e7db      	b.n	8003d2a <_scanf_float+0x92>
 8003d72:	290e      	cmp	r1, #14
 8003d74:	d8c4      	bhi.n	8003d00 <_scanf_float+0x68>
 8003d76:	a001      	add	r0, pc, #4	@ (adr r0, 8003d7c <_scanf_float+0xe4>)
 8003d78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003d7c:	08003e37 	.word	0x08003e37
 8003d80:	08003d01 	.word	0x08003d01
 8003d84:	08003e37 	.word	0x08003e37
 8003d88:	08003ec7 	.word	0x08003ec7
 8003d8c:	08003d01 	.word	0x08003d01
 8003d90:	08003dd9 	.word	0x08003dd9
 8003d94:	08003e1d 	.word	0x08003e1d
 8003d98:	08003e1d 	.word	0x08003e1d
 8003d9c:	08003e1d 	.word	0x08003e1d
 8003da0:	08003e1d 	.word	0x08003e1d
 8003da4:	08003e1d 	.word	0x08003e1d
 8003da8:	08003e1d 	.word	0x08003e1d
 8003dac:	08003e1d 	.word	0x08003e1d
 8003db0:	08003e1d 	.word	0x08003e1d
 8003db4:	08003e1d 	.word	0x08003e1d
 8003db8:	2b6e      	cmp	r3, #110	@ 0x6e
 8003dba:	d809      	bhi.n	8003dd0 <_scanf_float+0x138>
 8003dbc:	2b60      	cmp	r3, #96	@ 0x60
 8003dbe:	d8b2      	bhi.n	8003d26 <_scanf_float+0x8e>
 8003dc0:	2b54      	cmp	r3, #84	@ 0x54
 8003dc2:	d07b      	beq.n	8003ebc <_scanf_float+0x224>
 8003dc4:	2b59      	cmp	r3, #89	@ 0x59
 8003dc6:	d19b      	bne.n	8003d00 <_scanf_float+0x68>
 8003dc8:	2d07      	cmp	r5, #7
 8003dca:	d199      	bne.n	8003d00 <_scanf_float+0x68>
 8003dcc:	2508      	movs	r5, #8
 8003dce:	e02f      	b.n	8003e30 <_scanf_float+0x198>
 8003dd0:	2b74      	cmp	r3, #116	@ 0x74
 8003dd2:	d073      	beq.n	8003ebc <_scanf_float+0x224>
 8003dd4:	2b79      	cmp	r3, #121	@ 0x79
 8003dd6:	e7f6      	b.n	8003dc6 <_scanf_float+0x12e>
 8003dd8:	6821      	ldr	r1, [r4, #0]
 8003dda:	05c8      	lsls	r0, r1, #23
 8003ddc:	d51e      	bpl.n	8003e1c <_scanf_float+0x184>
 8003dde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003de2:	6021      	str	r1, [r4, #0]
 8003de4:	3701      	adds	r7, #1
 8003de6:	f1bb 0f00 	cmp.w	fp, #0
 8003dea:	d003      	beq.n	8003df4 <_scanf_float+0x15c>
 8003dec:	3201      	adds	r2, #1
 8003dee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003df2:	60a2      	str	r2, [r4, #8]
 8003df4:	68a3      	ldr	r3, [r4, #8]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	60a3      	str	r3, [r4, #8]
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f8c9 3004 	str.w	r3, [r9, #4]
 8003e0c:	f340 8083 	ble.w	8003f16 <_scanf_float+0x27e>
 8003e10:	f8d9 3000 	ldr.w	r3, [r9]
 8003e14:	3301      	adds	r3, #1
 8003e16:	f8c9 3000 	str.w	r3, [r9]
 8003e1a:	e763      	b.n	8003ce4 <_scanf_float+0x4c>
 8003e1c:	eb1a 0105 	adds.w	r1, sl, r5
 8003e20:	f47f af6e 	bne.w	8003d00 <_scanf_float+0x68>
 8003e24:	460d      	mov	r5, r1
 8003e26:	468a      	mov	sl, r1
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003e2e:	6022      	str	r2, [r4, #0]
 8003e30:	f806 3b01 	strb.w	r3, [r6], #1
 8003e34:	e7de      	b.n	8003df4 <_scanf_float+0x15c>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	0610      	lsls	r0, r2, #24
 8003e3a:	f57f af61 	bpl.w	8003d00 <_scanf_float+0x68>
 8003e3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	e7f4      	b.n	8003e30 <_scanf_float+0x198>
 8003e46:	f1ba 0f00 	cmp.w	sl, #0
 8003e4a:	d10c      	bne.n	8003e66 <_scanf_float+0x1ce>
 8003e4c:	b977      	cbnz	r7, 8003e6c <_scanf_float+0x1d4>
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003e54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003e58:	d108      	bne.n	8003e6c <_scanf_float+0x1d4>
 8003e5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003e5e:	f04f 0a01 	mov.w	sl, #1
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	e7e4      	b.n	8003e30 <_scanf_float+0x198>
 8003e66:	f1ba 0f02 	cmp.w	sl, #2
 8003e6a:	d051      	beq.n	8003f10 <_scanf_float+0x278>
 8003e6c:	2d01      	cmp	r5, #1
 8003e6e:	d002      	beq.n	8003e76 <_scanf_float+0x1de>
 8003e70:	2d04      	cmp	r5, #4
 8003e72:	f47f af45 	bne.w	8003d00 <_scanf_float+0x68>
 8003e76:	3501      	adds	r5, #1
 8003e78:	b2ed      	uxtb	r5, r5
 8003e7a:	e7d9      	b.n	8003e30 <_scanf_float+0x198>
 8003e7c:	f1ba 0f01 	cmp.w	sl, #1
 8003e80:	f47f af3e 	bne.w	8003d00 <_scanf_float+0x68>
 8003e84:	f04f 0a02 	mov.w	sl, #2
 8003e88:	e7d2      	b.n	8003e30 <_scanf_float+0x198>
 8003e8a:	b975      	cbnz	r5, 8003eaa <_scanf_float+0x212>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f47f af38 	bne.w	8003d02 <_scanf_float+0x6a>
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003e98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003e9c:	f040 80ff 	bne.w	800409e <_scanf_float+0x406>
 8003ea0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003ea4:	2501      	movs	r5, #1
 8003ea6:	6022      	str	r2, [r4, #0]
 8003ea8:	e7c2      	b.n	8003e30 <_scanf_float+0x198>
 8003eaa:	2d03      	cmp	r5, #3
 8003eac:	d0e3      	beq.n	8003e76 <_scanf_float+0x1de>
 8003eae:	2d05      	cmp	r5, #5
 8003eb0:	e7df      	b.n	8003e72 <_scanf_float+0x1da>
 8003eb2:	2d02      	cmp	r5, #2
 8003eb4:	f47f af24 	bne.w	8003d00 <_scanf_float+0x68>
 8003eb8:	2503      	movs	r5, #3
 8003eba:	e7b9      	b.n	8003e30 <_scanf_float+0x198>
 8003ebc:	2d06      	cmp	r5, #6
 8003ebe:	f47f af1f 	bne.w	8003d00 <_scanf_float+0x68>
 8003ec2:	2507      	movs	r5, #7
 8003ec4:	e7b4      	b.n	8003e30 <_scanf_float+0x198>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	0591      	lsls	r1, r2, #22
 8003eca:	f57f af19 	bpl.w	8003d00 <_scanf_float+0x68>
 8003ece:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003ed2:	6022      	str	r2, [r4, #0]
 8003ed4:	9702      	str	r7, [sp, #8]
 8003ed6:	e7ab      	b.n	8003e30 <_scanf_float+0x198>
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003ede:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003ee2:	d005      	beq.n	8003ef0 <_scanf_float+0x258>
 8003ee4:	0550      	lsls	r0, r2, #21
 8003ee6:	f57f af0b 	bpl.w	8003d00 <_scanf_float+0x68>
 8003eea:	2f00      	cmp	r7, #0
 8003eec:	f000 80d7 	beq.w	800409e <_scanf_float+0x406>
 8003ef0:	0591      	lsls	r1, r2, #22
 8003ef2:	bf58      	it	pl
 8003ef4:	9902      	ldrpl	r1, [sp, #8]
 8003ef6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003efa:	bf58      	it	pl
 8003efc:	1a79      	subpl	r1, r7, r1
 8003efe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003f02:	f04f 0700 	mov.w	r7, #0
 8003f06:	bf58      	it	pl
 8003f08:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003f0c:	6022      	str	r2, [r4, #0]
 8003f0e:	e78f      	b.n	8003e30 <_scanf_float+0x198>
 8003f10:	f04f 0a03 	mov.w	sl, #3
 8003f14:	e78c      	b.n	8003e30 <_scanf_float+0x198>
 8003f16:	4649      	mov	r1, r9
 8003f18:	4640      	mov	r0, r8
 8003f1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003f1e:	4798      	blx	r3
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f43f aedf 	beq.w	8003ce4 <_scanf_float+0x4c>
 8003f26:	e6eb      	b.n	8003d00 <_scanf_float+0x68>
 8003f28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f2c:	464a      	mov	r2, r9
 8003f2e:	4640      	mov	r0, r8
 8003f30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f34:	4798      	blx	r3
 8003f36:	6923      	ldr	r3, [r4, #16]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	6123      	str	r3, [r4, #16]
 8003f3c:	e6eb      	b.n	8003d16 <_scanf_float+0x7e>
 8003f3e:	1e6b      	subs	r3, r5, #1
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d824      	bhi.n	8003f8e <_scanf_float+0x2f6>
 8003f44:	2d02      	cmp	r5, #2
 8003f46:	d836      	bhi.n	8003fb6 <_scanf_float+0x31e>
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	429e      	cmp	r6, r3
 8003f4c:	f67f aee7 	bls.w	8003d1e <_scanf_float+0x86>
 8003f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f54:	464a      	mov	r2, r9
 8003f56:	4640      	mov	r0, r8
 8003f58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f5c:	4798      	blx	r3
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	e7f0      	b.n	8003f48 <_scanf_float+0x2b0>
 8003f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f6a:	464a      	mov	r2, r9
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003f72:	4798      	blx	r3
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f7e:	fa5f fa8a 	uxtb.w	sl, sl
 8003f82:	f1ba 0f02 	cmp.w	sl, #2
 8003f86:	d1ee      	bne.n	8003f66 <_scanf_float+0x2ce>
 8003f88:	3d03      	subs	r5, #3
 8003f8a:	b2ed      	uxtb	r5, r5
 8003f8c:	1b76      	subs	r6, r6, r5
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	05da      	lsls	r2, r3, #23
 8003f92:	d530      	bpl.n	8003ff6 <_scanf_float+0x35e>
 8003f94:	055b      	lsls	r3, r3, #21
 8003f96:	d511      	bpl.n	8003fbc <_scanf_float+0x324>
 8003f98:	9b01      	ldr	r3, [sp, #4]
 8003f9a:	429e      	cmp	r6, r3
 8003f9c:	f67f aebf 	bls.w	8003d1e <_scanf_float+0x86>
 8003fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003fa4:	464a      	mov	r2, r9
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003fac:	4798      	blx	r3
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	e7f0      	b.n	8003f98 <_scanf_float+0x300>
 8003fb6:	46aa      	mov	sl, r5
 8003fb8:	46b3      	mov	fp, r6
 8003fba:	e7de      	b.n	8003f7a <_scanf_float+0x2e2>
 8003fbc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	2965      	cmp	r1, #101	@ 0x65
 8003fc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fc8:	f106 35ff 	add.w	r5, r6, #4294967295
 8003fcc:	6123      	str	r3, [r4, #16]
 8003fce:	d00c      	beq.n	8003fea <_scanf_float+0x352>
 8003fd0:	2945      	cmp	r1, #69	@ 0x45
 8003fd2:	d00a      	beq.n	8003fea <_scanf_float+0x352>
 8003fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003fd8:	464a      	mov	r2, r9
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4798      	blx	r3
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	1eb5      	subs	r5, r6, #2
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	464a      	mov	r2, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ff2:	4798      	blx	r3
 8003ff4:	462e      	mov	r6, r5
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	f012 0210 	ands.w	r2, r2, #16
 8003ffc:	d001      	beq.n	8004002 <_scanf_float+0x36a>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e68e      	b.n	8003d20 <_scanf_float+0x88>
 8004002:	7032      	strb	r2, [r6, #0]
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400e:	d125      	bne.n	800405c <_scanf_float+0x3c4>
 8004010:	9b02      	ldr	r3, [sp, #8]
 8004012:	429f      	cmp	r7, r3
 8004014:	d00a      	beq.n	800402c <_scanf_float+0x394>
 8004016:	1bda      	subs	r2, r3, r7
 8004018:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800401c:	429e      	cmp	r6, r3
 800401e:	bf28      	it	cs
 8004020:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004024:	4630      	mov	r0, r6
 8004026:	491f      	ldr	r1, [pc, #124]	@ (80040a4 <_scanf_float+0x40c>)
 8004028:	f000 f902 	bl	8004230 <siprintf>
 800402c:	2200      	movs	r2, #0
 800402e:	4640      	mov	r0, r8
 8004030:	9901      	ldr	r1, [sp, #4]
 8004032:	f002 fbf9 	bl	8006828 <_strtod_r>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f015 0f02 	tst.w	r5, #2
 8004040:	4606      	mov	r6, r0
 8004042:	460f      	mov	r7, r1
 8004044:	f103 0204 	add.w	r2, r3, #4
 8004048:	d015      	beq.n	8004076 <_scanf_float+0x3de>
 800404a:	9903      	ldr	r1, [sp, #12]
 800404c:	600a      	str	r2, [r1, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	e9c3 6700 	strd	r6, r7, [r3]
 8004054:	68e3      	ldr	r3, [r4, #12]
 8004056:	3301      	adds	r3, #1
 8004058:	60e3      	str	r3, [r4, #12]
 800405a:	e7d0      	b.n	8003ffe <_scanf_float+0x366>
 800405c:	9b04      	ldr	r3, [sp, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0e4      	beq.n	800402c <_scanf_float+0x394>
 8004062:	9905      	ldr	r1, [sp, #20]
 8004064:	230a      	movs	r3, #10
 8004066:	4640      	mov	r0, r8
 8004068:	3101      	adds	r1, #1
 800406a:	f002 fc5d 	bl	8006928 <_strtol_r>
 800406e:	9b04      	ldr	r3, [sp, #16]
 8004070:	9e05      	ldr	r6, [sp, #20]
 8004072:	1ac2      	subs	r2, r0, r3
 8004074:	e7d0      	b.n	8004018 <_scanf_float+0x380>
 8004076:	076d      	lsls	r5, r5, #29
 8004078:	d4e7      	bmi.n	800404a <_scanf_float+0x3b2>
 800407a:	9d03      	ldr	r5, [sp, #12]
 800407c:	602a      	str	r2, [r5, #0]
 800407e:	681d      	ldr	r5, [r3, #0]
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	f7fc fcc2 	bl	8000a0c <__aeabi_dcmpun>
 8004088:	b120      	cbz	r0, 8004094 <_scanf_float+0x3fc>
 800408a:	4807      	ldr	r0, [pc, #28]	@ (80040a8 <_scanf_float+0x410>)
 800408c:	f000 f9d2 	bl	8004434 <nanf>
 8004090:	6028      	str	r0, [r5, #0]
 8004092:	e7df      	b.n	8004054 <_scanf_float+0x3bc>
 8004094:	4630      	mov	r0, r6
 8004096:	4639      	mov	r1, r7
 8004098:	f7fc fd16 	bl	8000ac8 <__aeabi_d2f>
 800409c:	e7f8      	b.n	8004090 <_scanf_float+0x3f8>
 800409e:	2700      	movs	r7, #0
 80040a0:	e633      	b.n	8003d0a <_scanf_float+0x72>
 80040a2:	bf00      	nop
 80040a4:	08007c5a 	.word	0x08007c5a
 80040a8:	08007d9b 	.word	0x08007d9b

080040ac <std>:
 80040ac:	2300      	movs	r3, #0
 80040ae:	b510      	push	{r4, lr}
 80040b0:	4604      	mov	r4, r0
 80040b2:	e9c0 3300 	strd	r3, r3, [r0]
 80040b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ba:	6083      	str	r3, [r0, #8]
 80040bc:	8181      	strh	r1, [r0, #12]
 80040be:	6643      	str	r3, [r0, #100]	@ 0x64
 80040c0:	81c2      	strh	r2, [r0, #14]
 80040c2:	6183      	str	r3, [r0, #24]
 80040c4:	4619      	mov	r1, r3
 80040c6:	2208      	movs	r2, #8
 80040c8:	305c      	adds	r0, #92	@ 0x5c
 80040ca:	f000 f916 	bl	80042fa <memset>
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <std+0x58>)
 80040d0:	6224      	str	r4, [r4, #32]
 80040d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <std+0x5c>)
 80040d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <std+0x60>)
 80040da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <std+0x64>)
 80040de:	6323      	str	r3, [r4, #48]	@ 0x30
 80040e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <std+0x68>)
 80040e2:	429c      	cmp	r4, r3
 80040e4:	d006      	beq.n	80040f4 <std+0x48>
 80040e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040ea:	4294      	cmp	r4, r2
 80040ec:	d002      	beq.n	80040f4 <std+0x48>
 80040ee:	33d0      	adds	r3, #208	@ 0xd0
 80040f0:	429c      	cmp	r4, r3
 80040f2:	d105      	bne.n	8004100 <std+0x54>
 80040f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040fc:	f000 b988 	b.w	8004410 <__retarget_lock_init_recursive>
 8004100:	bd10      	pop	{r4, pc}
 8004102:	bf00      	nop
 8004104:	08004275 	.word	0x08004275
 8004108:	08004297 	.word	0x08004297
 800410c:	080042cf 	.word	0x080042cf
 8004110:	080042f3 	.word	0x080042f3
 8004114:	200002bc 	.word	0x200002bc

08004118 <stdio_exit_handler>:
 8004118:	4a02      	ldr	r2, [pc, #8]	@ (8004124 <stdio_exit_handler+0xc>)
 800411a:	4903      	ldr	r1, [pc, #12]	@ (8004128 <stdio_exit_handler+0x10>)
 800411c:	4803      	ldr	r0, [pc, #12]	@ (800412c <stdio_exit_handler+0x14>)
 800411e:	f000 b869 	b.w	80041f4 <_fwalk_sglue>
 8004122:	bf00      	nop
 8004124:	2000000c 	.word	0x2000000c
 8004128:	08006cdd 	.word	0x08006cdd
 800412c:	2000001c 	.word	0x2000001c

08004130 <cleanup_stdio>:
 8004130:	6841      	ldr	r1, [r0, #4]
 8004132:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <cleanup_stdio+0x34>)
 8004134:	b510      	push	{r4, lr}
 8004136:	4299      	cmp	r1, r3
 8004138:	4604      	mov	r4, r0
 800413a:	d001      	beq.n	8004140 <cleanup_stdio+0x10>
 800413c:	f002 fdce 	bl	8006cdc <_fflush_r>
 8004140:	68a1      	ldr	r1, [r4, #8]
 8004142:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <cleanup_stdio+0x38>)
 8004144:	4299      	cmp	r1, r3
 8004146:	d002      	beq.n	800414e <cleanup_stdio+0x1e>
 8004148:	4620      	mov	r0, r4
 800414a:	f002 fdc7 	bl	8006cdc <_fflush_r>
 800414e:	68e1      	ldr	r1, [r4, #12]
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <cleanup_stdio+0x3c>)
 8004152:	4299      	cmp	r1, r3
 8004154:	d004      	beq.n	8004160 <cleanup_stdio+0x30>
 8004156:	4620      	mov	r0, r4
 8004158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800415c:	f002 bdbe 	b.w	8006cdc <_fflush_r>
 8004160:	bd10      	pop	{r4, pc}
 8004162:	bf00      	nop
 8004164:	200002bc 	.word	0x200002bc
 8004168:	20000324 	.word	0x20000324
 800416c:	2000038c 	.word	0x2000038c

08004170 <global_stdio_init.part.0>:
 8004170:	b510      	push	{r4, lr}
 8004172:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <global_stdio_init.part.0+0x30>)
 8004174:	4c0b      	ldr	r4, [pc, #44]	@ (80041a4 <global_stdio_init.part.0+0x34>)
 8004176:	4a0c      	ldr	r2, [pc, #48]	@ (80041a8 <global_stdio_init.part.0+0x38>)
 8004178:	4620      	mov	r0, r4
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	2104      	movs	r1, #4
 800417e:	2200      	movs	r2, #0
 8004180:	f7ff ff94 	bl	80040ac <std>
 8004184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004188:	2201      	movs	r2, #1
 800418a:	2109      	movs	r1, #9
 800418c:	f7ff ff8e 	bl	80040ac <std>
 8004190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004194:	2202      	movs	r2, #2
 8004196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800419a:	2112      	movs	r1, #18
 800419c:	f7ff bf86 	b.w	80040ac <std>
 80041a0:	200003f4 	.word	0x200003f4
 80041a4:	200002bc 	.word	0x200002bc
 80041a8:	08004119 	.word	0x08004119

080041ac <__sfp_lock_acquire>:
 80041ac:	4801      	ldr	r0, [pc, #4]	@ (80041b4 <__sfp_lock_acquire+0x8>)
 80041ae:	f000 b930 	b.w	8004412 <__retarget_lock_acquire_recursive>
 80041b2:	bf00      	nop
 80041b4:	200003fd 	.word	0x200003fd

080041b8 <__sfp_lock_release>:
 80041b8:	4801      	ldr	r0, [pc, #4]	@ (80041c0 <__sfp_lock_release+0x8>)
 80041ba:	f000 b92b 	b.w	8004414 <__retarget_lock_release_recursive>
 80041be:	bf00      	nop
 80041c0:	200003fd 	.word	0x200003fd

080041c4 <__sinit>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4604      	mov	r4, r0
 80041c8:	f7ff fff0 	bl	80041ac <__sfp_lock_acquire>
 80041cc:	6a23      	ldr	r3, [r4, #32]
 80041ce:	b11b      	cbz	r3, 80041d8 <__sinit+0x14>
 80041d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d4:	f7ff bff0 	b.w	80041b8 <__sfp_lock_release>
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <__sinit+0x28>)
 80041da:	6223      	str	r3, [r4, #32]
 80041dc:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <__sinit+0x2c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f5      	bne.n	80041d0 <__sinit+0xc>
 80041e4:	f7ff ffc4 	bl	8004170 <global_stdio_init.part.0>
 80041e8:	e7f2      	b.n	80041d0 <__sinit+0xc>
 80041ea:	bf00      	nop
 80041ec:	08004131 	.word	0x08004131
 80041f0:	200003f4 	.word	0x200003f4

080041f4 <_fwalk_sglue>:
 80041f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f8:	4607      	mov	r7, r0
 80041fa:	4688      	mov	r8, r1
 80041fc:	4614      	mov	r4, r2
 80041fe:	2600      	movs	r6, #0
 8004200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004204:	f1b9 0901 	subs.w	r9, r9, #1
 8004208:	d505      	bpl.n	8004216 <_fwalk_sglue+0x22>
 800420a:	6824      	ldr	r4, [r4, #0]
 800420c:	2c00      	cmp	r4, #0
 800420e:	d1f7      	bne.n	8004200 <_fwalk_sglue+0xc>
 8004210:	4630      	mov	r0, r6
 8004212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004216:	89ab      	ldrh	r3, [r5, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d907      	bls.n	800422c <_fwalk_sglue+0x38>
 800421c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004220:	3301      	adds	r3, #1
 8004222:	d003      	beq.n	800422c <_fwalk_sglue+0x38>
 8004224:	4629      	mov	r1, r5
 8004226:	4638      	mov	r0, r7
 8004228:	47c0      	blx	r8
 800422a:	4306      	orrs	r6, r0
 800422c:	3568      	adds	r5, #104	@ 0x68
 800422e:	e7e9      	b.n	8004204 <_fwalk_sglue+0x10>

08004230 <siprintf>:
 8004230:	b40e      	push	{r1, r2, r3}
 8004232:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004236:	b510      	push	{r4, lr}
 8004238:	2400      	movs	r4, #0
 800423a:	b09d      	sub	sp, #116	@ 0x74
 800423c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800423e:	9002      	str	r0, [sp, #8]
 8004240:	9006      	str	r0, [sp, #24]
 8004242:	9107      	str	r1, [sp, #28]
 8004244:	9104      	str	r1, [sp, #16]
 8004246:	4809      	ldr	r0, [pc, #36]	@ (800426c <siprintf+0x3c>)
 8004248:	4909      	ldr	r1, [pc, #36]	@ (8004270 <siprintf+0x40>)
 800424a:	f853 2b04 	ldr.w	r2, [r3], #4
 800424e:	9105      	str	r1, [sp, #20]
 8004250:	6800      	ldr	r0, [r0, #0]
 8004252:	a902      	add	r1, sp, #8
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004258:	f002 fbc4 	bl	80069e4 <_svfiprintf_r>
 800425c:	9b02      	ldr	r3, [sp, #8]
 800425e:	701c      	strb	r4, [r3, #0]
 8004260:	b01d      	add	sp, #116	@ 0x74
 8004262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004266:	b003      	add	sp, #12
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000018 	.word	0x20000018
 8004270:	ffff0208 	.word	0xffff0208

08004274 <__sread>:
 8004274:	b510      	push	{r4, lr}
 8004276:	460c      	mov	r4, r1
 8004278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800427c:	f000 f87a 	bl	8004374 <_read_r>
 8004280:	2800      	cmp	r0, #0
 8004282:	bfab      	itete	ge
 8004284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004286:	89a3      	ldrhlt	r3, [r4, #12]
 8004288:	181b      	addge	r3, r3, r0
 800428a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800428e:	bfac      	ite	ge
 8004290:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004292:	81a3      	strhlt	r3, [r4, #12]
 8004294:	bd10      	pop	{r4, pc}

08004296 <__swrite>:
 8004296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429a:	461f      	mov	r7, r3
 800429c:	898b      	ldrh	r3, [r1, #12]
 800429e:	4605      	mov	r5, r0
 80042a0:	05db      	lsls	r3, r3, #23
 80042a2:	460c      	mov	r4, r1
 80042a4:	4616      	mov	r6, r2
 80042a6:	d505      	bpl.n	80042b4 <__swrite+0x1e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	2200      	movs	r2, #0
 80042ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b0:	f000 f84e 	bl	8004350 <_lseek_r>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	4632      	mov	r2, r6
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	4628      	mov	r0, r5
 80042c0:	463b      	mov	r3, r7
 80042c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ca:	f000 b865 	b.w	8004398 <_write_r>

080042ce <__sseek>:
 80042ce:	b510      	push	{r4, lr}
 80042d0:	460c      	mov	r4, r1
 80042d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d6:	f000 f83b 	bl	8004350 <_lseek_r>
 80042da:	1c43      	adds	r3, r0, #1
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	bf15      	itete	ne
 80042e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042ea:	81a3      	strheq	r3, [r4, #12]
 80042ec:	bf18      	it	ne
 80042ee:	81a3      	strhne	r3, [r4, #12]
 80042f0:	bd10      	pop	{r4, pc}

080042f2 <__sclose>:
 80042f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f6:	f000 b81b 	b.w	8004330 <_close_r>

080042fa <memset>:
 80042fa:	4603      	mov	r3, r0
 80042fc:	4402      	add	r2, r0
 80042fe:	4293      	cmp	r3, r2
 8004300:	d100      	bne.n	8004304 <memset+0xa>
 8004302:	4770      	bx	lr
 8004304:	f803 1b01 	strb.w	r1, [r3], #1
 8004308:	e7f9      	b.n	80042fe <memset+0x4>

0800430a <strcat>:
 800430a:	4602      	mov	r2, r0
 800430c:	b510      	push	{r4, lr}
 800430e:	7814      	ldrb	r4, [r2, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	3201      	adds	r2, #1
 8004314:	2c00      	cmp	r4, #0
 8004316:	d1fa      	bne.n	800430e <strcat+0x4>
 8004318:	3b01      	subs	r3, #1
 800431a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800431e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004322:	2a00      	cmp	r2, #0
 8004324:	d1f9      	bne.n	800431a <strcat+0x10>
 8004326:	bd10      	pop	{r4, pc}

08004328 <_localeconv_r>:
 8004328:	4800      	ldr	r0, [pc, #0]	@ (800432c <_localeconv_r+0x4>)
 800432a:	4770      	bx	lr
 800432c:	20000158 	.word	0x20000158

08004330 <_close_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	2300      	movs	r3, #0
 8004334:	4d05      	ldr	r5, [pc, #20]	@ (800434c <_close_r+0x1c>)
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	f7fd fd91 	bl	8001e62 <_close>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d102      	bne.n	800434a <_close_r+0x1a>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b103      	cbz	r3, 800434a <_close_r+0x1a>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	200003f8 	.word	0x200003f8

08004350 <_lseek_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	2200      	movs	r2, #0
 800435a:	4d05      	ldr	r5, [pc, #20]	@ (8004370 <_lseek_r+0x20>)
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f7fd fda3 	bl	8001eaa <_lseek>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_lseek_r+0x1e>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_lseek_r+0x1e>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	200003f8 	.word	0x200003f8

08004374 <_read_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	2200      	movs	r2, #0
 800437e:	4d05      	ldr	r5, [pc, #20]	@ (8004394 <_read_r+0x20>)
 8004380:	602a      	str	r2, [r5, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	f7fd fd34 	bl	8001df0 <_read>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_read_r+0x1e>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_read_r+0x1e>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	200003f8 	.word	0x200003f8

08004398 <_write_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	4d05      	ldr	r5, [pc, #20]	@ (80043b8 <_write_r+0x20>)
 80043a4:	602a      	str	r2, [r5, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f7fd fd3f 	bl	8001e2a <_write>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d102      	bne.n	80043b6 <_write_r+0x1e>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b103      	cbz	r3, 80043b6 <_write_r+0x1e>
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	200003f8 	.word	0x200003f8

080043bc <__errno>:
 80043bc:	4b01      	ldr	r3, [pc, #4]	@ (80043c4 <__errno+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000018 	.word	0x20000018

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	2600      	movs	r6, #0
 80043cc:	4d0c      	ldr	r5, [pc, #48]	@ (8004400 <__libc_init_array+0x38>)
 80043ce:	4c0d      	ldr	r4, [pc, #52]	@ (8004404 <__libc_init_array+0x3c>)
 80043d0:	1b64      	subs	r4, r4, r5
 80043d2:	10a4      	asrs	r4, r4, #2
 80043d4:	42a6      	cmp	r6, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	f003 fb6c 	bl	8007ab4 <_init>
 80043dc:	2600      	movs	r6, #0
 80043de:	4d0a      	ldr	r5, [pc, #40]	@ (8004408 <__libc_init_array+0x40>)
 80043e0:	4c0a      	ldr	r4, [pc, #40]	@ (800440c <__libc_init_array+0x44>)
 80043e2:	1b64      	subs	r4, r4, r5
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	42a6      	cmp	r6, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f0:	4798      	blx	r3
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fa:	4798      	blx	r3
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08008054 	.word	0x08008054
 8004404:	08008054 	.word	0x08008054
 8004408:	08008054 	.word	0x08008054
 800440c:	08008058 	.word	0x08008058

08004410 <__retarget_lock_init_recursive>:
 8004410:	4770      	bx	lr

08004412 <__retarget_lock_acquire_recursive>:
 8004412:	4770      	bx	lr

08004414 <__retarget_lock_release_recursive>:
 8004414:	4770      	bx	lr

08004416 <memchr>:
 8004416:	4603      	mov	r3, r0
 8004418:	b510      	push	{r4, lr}
 800441a:	b2c9      	uxtb	r1, r1
 800441c:	4402      	add	r2, r0
 800441e:	4293      	cmp	r3, r2
 8004420:	4618      	mov	r0, r3
 8004422:	d101      	bne.n	8004428 <memchr+0x12>
 8004424:	2000      	movs	r0, #0
 8004426:	e003      	b.n	8004430 <memchr+0x1a>
 8004428:	7804      	ldrb	r4, [r0, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	428c      	cmp	r4, r1
 800442e:	d1f6      	bne.n	800441e <memchr+0x8>
 8004430:	bd10      	pop	{r4, pc}
	...

08004434 <nanf>:
 8004434:	4800      	ldr	r0, [pc, #0]	@ (8004438 <nanf+0x4>)
 8004436:	4770      	bx	lr
 8004438:	7fc00000 	.word	0x7fc00000

0800443c <quorem>:
 800443c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	6903      	ldr	r3, [r0, #16]
 8004442:	690c      	ldr	r4, [r1, #16]
 8004444:	4607      	mov	r7, r0
 8004446:	42a3      	cmp	r3, r4
 8004448:	db7e      	blt.n	8004548 <quorem+0x10c>
 800444a:	3c01      	subs	r4, #1
 800444c:	00a3      	lsls	r3, r4, #2
 800444e:	f100 0514 	add.w	r5, r0, #20
 8004452:	f101 0814 	add.w	r8, r1, #20
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004466:	3301      	adds	r3, #1
 8004468:	429a      	cmp	r2, r3
 800446a:	fbb2 f6f3 	udiv	r6, r2, r3
 800446e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004472:	d32e      	bcc.n	80044d2 <quorem+0x96>
 8004474:	f04f 0a00 	mov.w	sl, #0
 8004478:	46c4      	mov	ip, r8
 800447a:	46ae      	mov	lr, r5
 800447c:	46d3      	mov	fp, sl
 800447e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004482:	b298      	uxth	r0, r3
 8004484:	fb06 a000 	mla	r0, r6, r0, sl
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	0c02      	lsrs	r2, r0, #16
 800448c:	fb06 2303 	mla	r3, r6, r3, r2
 8004490:	f8de 2000 	ldr.w	r2, [lr]
 8004494:	b280      	uxth	r0, r0
 8004496:	b292      	uxth	r2, r2
 8004498:	1a12      	subs	r2, r2, r0
 800449a:	445a      	add	r2, fp
 800449c:	f8de 0000 	ldr.w	r0, [lr]
 80044a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80044aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80044ae:	b292      	uxth	r2, r2
 80044b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80044b4:	45e1      	cmp	r9, ip
 80044b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80044ba:	f84e 2b04 	str.w	r2, [lr], #4
 80044be:	d2de      	bcs.n	800447e <quorem+0x42>
 80044c0:	9b00      	ldr	r3, [sp, #0]
 80044c2:	58eb      	ldr	r3, [r5, r3]
 80044c4:	b92b      	cbnz	r3, 80044d2 <quorem+0x96>
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	429d      	cmp	r5, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	d32f      	bcc.n	8004530 <quorem+0xf4>
 80044d0:	613c      	str	r4, [r7, #16]
 80044d2:	4638      	mov	r0, r7
 80044d4:	f001 f9ca 	bl	800586c <__mcmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	db25      	blt.n	8004528 <quorem+0xec>
 80044dc:	4629      	mov	r1, r5
 80044de:	2000      	movs	r0, #0
 80044e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80044e4:	f8d1 c000 	ldr.w	ip, [r1]
 80044e8:	fa1f fe82 	uxth.w	lr, r2
 80044ec:	fa1f f38c 	uxth.w	r3, ip
 80044f0:	eba3 030e 	sub.w	r3, r3, lr
 80044f4:	4403      	add	r3, r0
 80044f6:	0c12      	lsrs	r2, r2, #16
 80044f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80044fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004506:	45c1      	cmp	r9, r8
 8004508:	ea4f 4022 	mov.w	r0, r2, asr #16
 800450c:	f841 3b04 	str.w	r3, [r1], #4
 8004510:	d2e6      	bcs.n	80044e0 <quorem+0xa4>
 8004512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800451a:	b922      	cbnz	r2, 8004526 <quorem+0xea>
 800451c:	3b04      	subs	r3, #4
 800451e:	429d      	cmp	r5, r3
 8004520:	461a      	mov	r2, r3
 8004522:	d30b      	bcc.n	800453c <quorem+0x100>
 8004524:	613c      	str	r4, [r7, #16]
 8004526:	3601      	adds	r6, #1
 8004528:	4630      	mov	r0, r6
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	3b04      	subs	r3, #4
 8004534:	2a00      	cmp	r2, #0
 8004536:	d1cb      	bne.n	80044d0 <quorem+0x94>
 8004538:	3c01      	subs	r4, #1
 800453a:	e7c6      	b.n	80044ca <quorem+0x8e>
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	3b04      	subs	r3, #4
 8004540:	2a00      	cmp	r2, #0
 8004542:	d1ef      	bne.n	8004524 <quorem+0xe8>
 8004544:	3c01      	subs	r4, #1
 8004546:	e7ea      	b.n	800451e <quorem+0xe2>
 8004548:	2000      	movs	r0, #0
 800454a:	e7ee      	b.n	800452a <quorem+0xee>
 800454c:	0000      	movs	r0, r0
	...

08004550 <_dtoa_r>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	69c7      	ldr	r7, [r0, #28]
 800455a:	b097      	sub	sp, #92	@ 0x5c
 800455c:	4681      	mov	r9, r0
 800455e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004562:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004564:	b97f      	cbnz	r7, 8004586 <_dtoa_r+0x36>
 8004566:	2010      	movs	r0, #16
 8004568:	f000 fe0e 	bl	8005188 <malloc>
 800456c:	4602      	mov	r2, r0
 800456e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004572:	b920      	cbnz	r0, 800457e <_dtoa_r+0x2e>
 8004574:	21ef      	movs	r1, #239	@ 0xef
 8004576:	4bac      	ldr	r3, [pc, #688]	@ (8004828 <_dtoa_r+0x2d8>)
 8004578:	48ac      	ldr	r0, [pc, #688]	@ (800482c <_dtoa_r+0x2dc>)
 800457a:	f002 fc27 	bl	8006dcc <__assert_func>
 800457e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004582:	6007      	str	r7, [r0, #0]
 8004584:	60c7      	str	r7, [r0, #12]
 8004586:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	b159      	cbz	r1, 80045a6 <_dtoa_r+0x56>
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	2301      	movs	r3, #1
 8004592:	4093      	lsls	r3, r2
 8004594:	604a      	str	r2, [r1, #4]
 8004596:	608b      	str	r3, [r1, #8]
 8004598:	4648      	mov	r0, r9
 800459a:	f000 feeb 	bl	8005374 <_Bfree>
 800459e:	2200      	movs	r2, #0
 80045a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	1e2b      	subs	r3, r5, #0
 80045a8:	bfaf      	iteee	ge
 80045aa:	2300      	movge	r3, #0
 80045ac:	2201      	movlt	r2, #1
 80045ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80045b2:	9307      	strlt	r3, [sp, #28]
 80045b4:	bfa8      	it	ge
 80045b6:	6033      	strge	r3, [r6, #0]
 80045b8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80045bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004830 <_dtoa_r+0x2e0>)
 80045be:	bfb8      	it	lt
 80045c0:	6032      	strlt	r2, [r6, #0]
 80045c2:	ea33 0308 	bics.w	r3, r3, r8
 80045c6:	d112      	bne.n	80045ee <_dtoa_r+0x9e>
 80045c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80045cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80045d4:	4323      	orrs	r3, r4
 80045d6:	f000 855e 	beq.w	8005096 <_dtoa_r+0xb46>
 80045da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80045dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004834 <_dtoa_r+0x2e4>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8560 	beq.w	80050a6 <_dtoa_r+0xb56>
 80045e6:	f10a 0303 	add.w	r3, sl, #3
 80045ea:	f000 bd5a 	b.w	80050a2 <_dtoa_r+0xb52>
 80045ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80045f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	f7fc f9d3 	bl	80009a8 <__aeabi_dcmpeq>
 8004602:	4607      	mov	r7, r0
 8004604:	b158      	cbz	r0, 800461e <_dtoa_r+0xce>
 8004606:	2301      	movs	r3, #1
 8004608:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800460e:	b113      	cbz	r3, 8004616 <_dtoa_r+0xc6>
 8004610:	4b89      	ldr	r3, [pc, #548]	@ (8004838 <_dtoa_r+0x2e8>)
 8004612:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800483c <_dtoa_r+0x2ec>
 800461a:	f000 bd44 	b.w	80050a6 <_dtoa_r+0xb56>
 800461e:	ab14      	add	r3, sp, #80	@ 0x50
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	ab15      	add	r3, sp, #84	@ 0x54
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4648      	mov	r0, r9
 8004628:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800462c:	f001 fa36 	bl	8005a9c <__d2b>
 8004630:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004634:	9003      	str	r0, [sp, #12]
 8004636:	2e00      	cmp	r6, #0
 8004638:	d078      	beq.n	800472c <_dtoa_r+0x1dc>
 800463a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800463e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004640:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004648:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800464c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004650:	9712      	str	r7, [sp, #72]	@ 0x48
 8004652:	4619      	mov	r1, r3
 8004654:	2200      	movs	r2, #0
 8004656:	4b7a      	ldr	r3, [pc, #488]	@ (8004840 <_dtoa_r+0x2f0>)
 8004658:	f7fb fd86 	bl	8000168 <__aeabi_dsub>
 800465c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004810 <_dtoa_r+0x2c0>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f7fb ff39 	bl	80004d8 <__aeabi_dmul>
 8004666:	a36c      	add	r3, pc, #432	@ (adr r3, 8004818 <_dtoa_r+0x2c8>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb fd7e 	bl	800016c <__adddf3>
 8004670:	4604      	mov	r4, r0
 8004672:	4630      	mov	r0, r6
 8004674:	460d      	mov	r5, r1
 8004676:	f7fb fec5 	bl	8000404 <__aeabi_i2d>
 800467a:	a369      	add	r3, pc, #420	@ (adr r3, 8004820 <_dtoa_r+0x2d0>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fb ff2a 	bl	80004d8 <__aeabi_dmul>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4620      	mov	r0, r4
 800468a:	4629      	mov	r1, r5
 800468c:	f7fb fd6e 	bl	800016c <__adddf3>
 8004690:	4604      	mov	r4, r0
 8004692:	460d      	mov	r5, r1
 8004694:	f7fc f9d0 	bl	8000a38 <__aeabi_d2iz>
 8004698:	2200      	movs	r2, #0
 800469a:	4607      	mov	r7, r0
 800469c:	2300      	movs	r3, #0
 800469e:	4620      	mov	r0, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fc f98b 	bl	80009bc <__aeabi_dcmplt>
 80046a6:	b140      	cbz	r0, 80046ba <_dtoa_r+0x16a>
 80046a8:	4638      	mov	r0, r7
 80046aa:	f7fb feab 	bl	8000404 <__aeabi_i2d>
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	f7fc f979 	bl	80009a8 <__aeabi_dcmpeq>
 80046b6:	b900      	cbnz	r0, 80046ba <_dtoa_r+0x16a>
 80046b8:	3f01      	subs	r7, #1
 80046ba:	2f16      	cmp	r7, #22
 80046bc:	d854      	bhi.n	8004768 <_dtoa_r+0x218>
 80046be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046c2:	4b60      	ldr	r3, [pc, #384]	@ (8004844 <_dtoa_r+0x2f4>)
 80046c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fc f976 	bl	80009bc <__aeabi_dcmplt>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d04b      	beq.n	800476c <_dtoa_r+0x21c>
 80046d4:	2300      	movs	r3, #0
 80046d6:	3f01      	subs	r7, #1
 80046d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80046da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046dc:	1b9b      	subs	r3, r3, r6
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	bf49      	itett	mi
 80046e2:	f1c3 0301 	rsbmi	r3, r3, #1
 80046e6:	2300      	movpl	r3, #0
 80046e8:	9304      	strmi	r3, [sp, #16]
 80046ea:	2300      	movmi	r3, #0
 80046ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ee:	bf54      	ite	pl
 80046f0:	9304      	strpl	r3, [sp, #16]
 80046f2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	db3b      	blt.n	8004770 <_dtoa_r+0x220>
 80046f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046fa:	970e      	str	r7, [sp, #56]	@ 0x38
 80046fc:	443b      	add	r3, r7
 80046fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004700:	2300      	movs	r3, #0
 8004702:	930a      	str	r3, [sp, #40]	@ 0x28
 8004704:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004706:	2b09      	cmp	r3, #9
 8004708:	d865      	bhi.n	80047d6 <_dtoa_r+0x286>
 800470a:	2b05      	cmp	r3, #5
 800470c:	bfc4      	itt	gt
 800470e:	3b04      	subgt	r3, #4
 8004710:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004712:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004714:	bfc8      	it	gt
 8004716:	2400      	movgt	r4, #0
 8004718:	f1a3 0302 	sub.w	r3, r3, #2
 800471c:	bfd8      	it	le
 800471e:	2401      	movle	r4, #1
 8004720:	2b03      	cmp	r3, #3
 8004722:	d864      	bhi.n	80047ee <_dtoa_r+0x29e>
 8004724:	e8df f003 	tbb	[pc, r3]
 8004728:	2c385553 	.word	0x2c385553
 800472c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004730:	441e      	add	r6, r3
 8004732:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004736:	2b20      	cmp	r3, #32
 8004738:	bfc1      	itttt	gt
 800473a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800473e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004742:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004746:	fa24 f303 	lsrgt.w	r3, r4, r3
 800474a:	bfd6      	itet	le
 800474c:	f1c3 0320 	rsble	r3, r3, #32
 8004750:	ea48 0003 	orrgt.w	r0, r8, r3
 8004754:	fa04 f003 	lslle.w	r0, r4, r3
 8004758:	f7fb fe44 	bl	80003e4 <__aeabi_ui2d>
 800475c:	2201      	movs	r2, #1
 800475e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004762:	3e01      	subs	r6, #1
 8004764:	9212      	str	r2, [sp, #72]	@ 0x48
 8004766:	e774      	b.n	8004652 <_dtoa_r+0x102>
 8004768:	2301      	movs	r3, #1
 800476a:	e7b5      	b.n	80046d8 <_dtoa_r+0x188>
 800476c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800476e:	e7b4      	b.n	80046da <_dtoa_r+0x18a>
 8004770:	9b04      	ldr	r3, [sp, #16]
 8004772:	1bdb      	subs	r3, r3, r7
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	427b      	negs	r3, r7
 8004778:	930a      	str	r3, [sp, #40]	@ 0x28
 800477a:	2300      	movs	r3, #0
 800477c:	930e      	str	r3, [sp, #56]	@ 0x38
 800477e:	e7c1      	b.n	8004704 <_dtoa_r+0x1b4>
 8004780:	2301      	movs	r3, #1
 8004782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004784:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004786:	eb07 0b03 	add.w	fp, r7, r3
 800478a:	f10b 0301 	add.w	r3, fp, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	9308      	str	r3, [sp, #32]
 8004792:	bfb8      	it	lt
 8004794:	2301      	movlt	r3, #1
 8004796:	e006      	b.n	80047a6 <_dtoa_r+0x256>
 8004798:	2301      	movs	r3, #1
 800479a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800479c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dd28      	ble.n	80047f4 <_dtoa_r+0x2a4>
 80047a2:	469b      	mov	fp, r3
 80047a4:	9308      	str	r3, [sp, #32]
 80047a6:	2100      	movs	r1, #0
 80047a8:	2204      	movs	r2, #4
 80047aa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80047ae:	f102 0514 	add.w	r5, r2, #20
 80047b2:	429d      	cmp	r5, r3
 80047b4:	d926      	bls.n	8004804 <_dtoa_r+0x2b4>
 80047b6:	6041      	str	r1, [r0, #4]
 80047b8:	4648      	mov	r0, r9
 80047ba:	f000 fd9b 	bl	80052f4 <_Balloc>
 80047be:	4682      	mov	sl, r0
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d143      	bne.n	800484c <_dtoa_r+0x2fc>
 80047c4:	4602      	mov	r2, r0
 80047c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80047ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <_dtoa_r+0x2f8>)
 80047cc:	e6d4      	b.n	8004578 <_dtoa_r+0x28>
 80047ce:	2300      	movs	r3, #0
 80047d0:	e7e3      	b.n	800479a <_dtoa_r+0x24a>
 80047d2:	2300      	movs	r3, #0
 80047d4:	e7d5      	b.n	8004782 <_dtoa_r+0x232>
 80047d6:	2401      	movs	r4, #1
 80047d8:	2300      	movs	r3, #0
 80047da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80047dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80047de:	f04f 3bff 	mov.w	fp, #4294967295
 80047e2:	2200      	movs	r2, #0
 80047e4:	2312      	movs	r3, #18
 80047e6:	f8cd b020 	str.w	fp, [sp, #32]
 80047ea:	9221      	str	r2, [sp, #132]	@ 0x84
 80047ec:	e7db      	b.n	80047a6 <_dtoa_r+0x256>
 80047ee:	2301      	movs	r3, #1
 80047f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047f2:	e7f4      	b.n	80047de <_dtoa_r+0x28e>
 80047f4:	f04f 0b01 	mov.w	fp, #1
 80047f8:	465b      	mov	r3, fp
 80047fa:	f8cd b020 	str.w	fp, [sp, #32]
 80047fe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004802:	e7d0      	b.n	80047a6 <_dtoa_r+0x256>
 8004804:	3101      	adds	r1, #1
 8004806:	0052      	lsls	r2, r2, #1
 8004808:	e7d1      	b.n	80047ae <_dtoa_r+0x25e>
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w
 8004810:	636f4361 	.word	0x636f4361
 8004814:	3fd287a7 	.word	0x3fd287a7
 8004818:	8b60c8b3 	.word	0x8b60c8b3
 800481c:	3fc68a28 	.word	0x3fc68a28
 8004820:	509f79fb 	.word	0x509f79fb
 8004824:	3fd34413 	.word	0x3fd34413
 8004828:	08007c6c 	.word	0x08007c6c
 800482c:	08007c83 	.word	0x08007c83
 8004830:	7ff00000 	.word	0x7ff00000
 8004834:	08007c68 	.word	0x08007c68
 8004838:	08007c37 	.word	0x08007c37
 800483c:	08007c36 	.word	0x08007c36
 8004840:	3ff80000 	.word	0x3ff80000
 8004844:	08007e30 	.word	0x08007e30
 8004848:	08007cdb 	.word	0x08007cdb
 800484c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004850:	6018      	str	r0, [r3, #0]
 8004852:	9b08      	ldr	r3, [sp, #32]
 8004854:	2b0e      	cmp	r3, #14
 8004856:	f200 80a1 	bhi.w	800499c <_dtoa_r+0x44c>
 800485a:	2c00      	cmp	r4, #0
 800485c:	f000 809e 	beq.w	800499c <_dtoa_r+0x44c>
 8004860:	2f00      	cmp	r7, #0
 8004862:	dd33      	ble.n	80048cc <_dtoa_r+0x37c>
 8004864:	4b9c      	ldr	r3, [pc, #624]	@ (8004ad8 <_dtoa_r+0x588>)
 8004866:	f007 020f 	and.w	r2, r7, #15
 800486a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800486e:	05f8      	lsls	r0, r7, #23
 8004870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004874:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800487c:	d516      	bpl.n	80048ac <_dtoa_r+0x35c>
 800487e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004882:	4b96      	ldr	r3, [pc, #600]	@ (8004adc <_dtoa_r+0x58c>)
 8004884:	2603      	movs	r6, #3
 8004886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800488a:	f7fb ff4f 	bl	800072c <__aeabi_ddiv>
 800488e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004892:	f004 040f 	and.w	r4, r4, #15
 8004896:	4d91      	ldr	r5, [pc, #580]	@ (8004adc <_dtoa_r+0x58c>)
 8004898:	b954      	cbnz	r4, 80048b0 <_dtoa_r+0x360>
 800489a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800489e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048a2:	f7fb ff43 	bl	800072c <__aeabi_ddiv>
 80048a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048aa:	e028      	b.n	80048fe <_dtoa_r+0x3ae>
 80048ac:	2602      	movs	r6, #2
 80048ae:	e7f2      	b.n	8004896 <_dtoa_r+0x346>
 80048b0:	07e1      	lsls	r1, r4, #31
 80048b2:	d508      	bpl.n	80048c6 <_dtoa_r+0x376>
 80048b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048bc:	f7fb fe0c 	bl	80004d8 <__aeabi_dmul>
 80048c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048c4:	3601      	adds	r6, #1
 80048c6:	1064      	asrs	r4, r4, #1
 80048c8:	3508      	adds	r5, #8
 80048ca:	e7e5      	b.n	8004898 <_dtoa_r+0x348>
 80048cc:	f000 80af 	beq.w	8004a2e <_dtoa_r+0x4de>
 80048d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048d4:	427c      	negs	r4, r7
 80048d6:	4b80      	ldr	r3, [pc, #512]	@ (8004ad8 <_dtoa_r+0x588>)
 80048d8:	f004 020f 	and.w	r2, r4, #15
 80048dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f7fb fdf8 	bl	80004d8 <__aeabi_dmul>
 80048e8:	2602      	movs	r6, #2
 80048ea:	2300      	movs	r3, #0
 80048ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048f0:	4d7a      	ldr	r5, [pc, #488]	@ (8004adc <_dtoa_r+0x58c>)
 80048f2:	1124      	asrs	r4, r4, #4
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	f040 808f 	bne.w	8004a18 <_dtoa_r+0x4c8>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1d3      	bne.n	80048a6 <_dtoa_r+0x356>
 80048fe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8094 	beq.w	8004a32 <_dtoa_r+0x4e2>
 800490a:	2200      	movs	r2, #0
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	4b73      	ldr	r3, [pc, #460]	@ (8004ae0 <_dtoa_r+0x590>)
 8004912:	f7fc f853 	bl	80009bc <__aeabi_dcmplt>
 8004916:	2800      	cmp	r0, #0
 8004918:	f000 808b 	beq.w	8004a32 <_dtoa_r+0x4e2>
 800491c:	9b08      	ldr	r3, [sp, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8087 	beq.w	8004a32 <_dtoa_r+0x4e2>
 8004924:	f1bb 0f00 	cmp.w	fp, #0
 8004928:	dd34      	ble.n	8004994 <_dtoa_r+0x444>
 800492a:	4620      	mov	r0, r4
 800492c:	2200      	movs	r2, #0
 800492e:	4629      	mov	r1, r5
 8004930:	4b6c      	ldr	r3, [pc, #432]	@ (8004ae4 <_dtoa_r+0x594>)
 8004932:	f7fb fdd1 	bl	80004d8 <__aeabi_dmul>
 8004936:	465c      	mov	r4, fp
 8004938:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800493c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004940:	3601      	adds	r6, #1
 8004942:	4630      	mov	r0, r6
 8004944:	f7fb fd5e 	bl	8000404 <__aeabi_i2d>
 8004948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800494c:	f7fb fdc4 	bl	80004d8 <__aeabi_dmul>
 8004950:	2200      	movs	r2, #0
 8004952:	4b65      	ldr	r3, [pc, #404]	@ (8004ae8 <_dtoa_r+0x598>)
 8004954:	f7fb fc0a 	bl	800016c <__adddf3>
 8004958:	4605      	mov	r5, r0
 800495a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800495e:	2c00      	cmp	r4, #0
 8004960:	d16a      	bne.n	8004a38 <_dtoa_r+0x4e8>
 8004962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004966:	2200      	movs	r2, #0
 8004968:	4b60      	ldr	r3, [pc, #384]	@ (8004aec <_dtoa_r+0x59c>)
 800496a:	f7fb fbfd 	bl	8000168 <__aeabi_dsub>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004976:	462a      	mov	r2, r5
 8004978:	4633      	mov	r3, r6
 800497a:	f7fc f83d 	bl	80009f8 <__aeabi_dcmpgt>
 800497e:	2800      	cmp	r0, #0
 8004980:	f040 8298 	bne.w	8004eb4 <_dtoa_r+0x964>
 8004984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004988:	462a      	mov	r2, r5
 800498a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800498e:	f7fc f815 	bl	80009bc <__aeabi_dcmplt>
 8004992:	bb38      	cbnz	r0, 80049e4 <_dtoa_r+0x494>
 8004994:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004998:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800499c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f2c0 8157 	blt.w	8004c52 <_dtoa_r+0x702>
 80049a4:	2f0e      	cmp	r7, #14
 80049a6:	f300 8154 	bgt.w	8004c52 <_dtoa_r+0x702>
 80049aa:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad8 <_dtoa_r+0x588>)
 80049ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80049b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f280 80e5 	bge.w	8004b8a <_dtoa_r+0x63a>
 80049c0:	9b08      	ldr	r3, [sp, #32]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f300 80e1 	bgt.w	8004b8a <_dtoa_r+0x63a>
 80049c8:	d10c      	bne.n	80049e4 <_dtoa_r+0x494>
 80049ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ce:	2200      	movs	r2, #0
 80049d0:	4b46      	ldr	r3, [pc, #280]	@ (8004aec <_dtoa_r+0x59c>)
 80049d2:	f7fb fd81 	bl	80004d8 <__aeabi_dmul>
 80049d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049da:	f7fc f803 	bl	80009e4 <__aeabi_dcmpge>
 80049de:	2800      	cmp	r0, #0
 80049e0:	f000 8266 	beq.w	8004eb0 <_dtoa_r+0x960>
 80049e4:	2400      	movs	r4, #0
 80049e6:	4625      	mov	r5, r4
 80049e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049ea:	4656      	mov	r6, sl
 80049ec:	ea6f 0803 	mvn.w	r8, r3
 80049f0:	2700      	movs	r7, #0
 80049f2:	4621      	mov	r1, r4
 80049f4:	4648      	mov	r0, r9
 80049f6:	f000 fcbd 	bl	8005374 <_Bfree>
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	f000 80bd 	beq.w	8004b7a <_dtoa_r+0x62a>
 8004a00:	b12f      	cbz	r7, 8004a0e <_dtoa_r+0x4be>
 8004a02:	42af      	cmp	r7, r5
 8004a04:	d003      	beq.n	8004a0e <_dtoa_r+0x4be>
 8004a06:	4639      	mov	r1, r7
 8004a08:	4648      	mov	r0, r9
 8004a0a:	f000 fcb3 	bl	8005374 <_Bfree>
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4648      	mov	r0, r9
 8004a12:	f000 fcaf 	bl	8005374 <_Bfree>
 8004a16:	e0b0      	b.n	8004b7a <_dtoa_r+0x62a>
 8004a18:	07e2      	lsls	r2, r4, #31
 8004a1a:	d505      	bpl.n	8004a28 <_dtoa_r+0x4d8>
 8004a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a20:	f7fb fd5a 	bl	80004d8 <__aeabi_dmul>
 8004a24:	2301      	movs	r3, #1
 8004a26:	3601      	adds	r6, #1
 8004a28:	1064      	asrs	r4, r4, #1
 8004a2a:	3508      	adds	r5, #8
 8004a2c:	e762      	b.n	80048f4 <_dtoa_r+0x3a4>
 8004a2e:	2602      	movs	r6, #2
 8004a30:	e765      	b.n	80048fe <_dtoa_r+0x3ae>
 8004a32:	46b8      	mov	r8, r7
 8004a34:	9c08      	ldr	r4, [sp, #32]
 8004a36:	e784      	b.n	8004942 <_dtoa_r+0x3f2>
 8004a38:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <_dtoa_r+0x588>)
 8004a3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a44:	4454      	add	r4, sl
 8004a46:	2900      	cmp	r1, #0
 8004a48:	d054      	beq.n	8004af4 <_dtoa_r+0x5a4>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	4928      	ldr	r1, [pc, #160]	@ (8004af0 <_dtoa_r+0x5a0>)
 8004a4e:	f7fb fe6d 	bl	800072c <__aeabi_ddiv>
 8004a52:	4633      	mov	r3, r6
 8004a54:	462a      	mov	r2, r5
 8004a56:	f7fb fb87 	bl	8000168 <__aeabi_dsub>
 8004a5a:	4656      	mov	r6, sl
 8004a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a64:	f7fb ffe8 	bl	8000a38 <__aeabi_d2iz>
 8004a68:	4605      	mov	r5, r0
 8004a6a:	f7fb fccb 	bl	8000404 <__aeabi_i2d>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a76:	f7fb fb77 	bl	8000168 <__aeabi_dsub>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	3530      	adds	r5, #48	@ 0x30
 8004a80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a88:	f806 5b01 	strb.w	r5, [r6], #1
 8004a8c:	f7fb ff96 	bl	80009bc <__aeabi_dcmplt>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d172      	bne.n	8004b7a <_dtoa_r+0x62a>
 8004a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a98:	2000      	movs	r0, #0
 8004a9a:	4911      	ldr	r1, [pc, #68]	@ (8004ae0 <_dtoa_r+0x590>)
 8004a9c:	f7fb fb64 	bl	8000168 <__aeabi_dsub>
 8004aa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004aa4:	f7fb ff8a 	bl	80009bc <__aeabi_dcmplt>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f040 80b4 	bne.w	8004c16 <_dtoa_r+0x6c6>
 8004aae:	42a6      	cmp	r6, r4
 8004ab0:	f43f af70 	beq.w	8004994 <_dtoa_r+0x444>
 8004ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <_dtoa_r+0x594>)
 8004abc:	f7fb fd0c 	bl	80004d8 <__aeabi_dmul>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <_dtoa_r+0x594>)
 8004acc:	f7fb fd04 	bl	80004d8 <__aeabi_dmul>
 8004ad0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ad4:	e7c4      	b.n	8004a60 <_dtoa_r+0x510>
 8004ad6:	bf00      	nop
 8004ad8:	08007e30 	.word	0x08007e30
 8004adc:	08007e08 	.word	0x08007e08
 8004ae0:	3ff00000 	.word	0x3ff00000
 8004ae4:	40240000 	.word	0x40240000
 8004ae8:	401c0000 	.word	0x401c0000
 8004aec:	40140000 	.word	0x40140000
 8004af0:	3fe00000 	.word	0x3fe00000
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	f7fb fcee 	bl	80004d8 <__aeabi_dmul>
 8004afc:	4656      	mov	r6, sl
 8004afe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b02:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004b04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b08:	f7fb ff96 	bl	8000a38 <__aeabi_d2iz>
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	f7fb fc79 	bl	8000404 <__aeabi_i2d>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1a:	f7fb fb25 	bl	8000168 <__aeabi_dsub>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	3530      	adds	r5, #48	@ 0x30
 8004b24:	f806 5b01 	strb.w	r5, [r6], #1
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	d124      	bne.n	8004b7e <_dtoa_r+0x62e>
 8004b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b38:	4bae      	ldr	r3, [pc, #696]	@ (8004df4 <_dtoa_r+0x8a4>)
 8004b3a:	f7fb fb17 	bl	800016c <__adddf3>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b46:	f7fb ff57 	bl	80009f8 <__aeabi_dcmpgt>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d163      	bne.n	8004c16 <_dtoa_r+0x6c6>
 8004b4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b52:	2000      	movs	r0, #0
 8004b54:	49a7      	ldr	r1, [pc, #668]	@ (8004df4 <_dtoa_r+0x8a4>)
 8004b56:	f7fb fb07 	bl	8000168 <__aeabi_dsub>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b62:	f7fb ff2b 	bl	80009bc <__aeabi_dcmplt>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f43f af14 	beq.w	8004994 <_dtoa_r+0x444>
 8004b6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b6e:	1e73      	subs	r3, r6, #1
 8004b70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b76:	2b30      	cmp	r3, #48	@ 0x30
 8004b78:	d0f8      	beq.n	8004b6c <_dtoa_r+0x61c>
 8004b7a:	4647      	mov	r7, r8
 8004b7c:	e03b      	b.n	8004bf6 <_dtoa_r+0x6a6>
 8004b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8004df8 <_dtoa_r+0x8a8>)
 8004b80:	f7fb fcaa 	bl	80004d8 <__aeabi_dmul>
 8004b84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b88:	e7bc      	b.n	8004b04 <_dtoa_r+0x5b4>
 8004b8a:	4656      	mov	r6, sl
 8004b8c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b94:	4620      	mov	r0, r4
 8004b96:	4629      	mov	r1, r5
 8004b98:	f7fb fdc8 	bl	800072c <__aeabi_ddiv>
 8004b9c:	f7fb ff4c 	bl	8000a38 <__aeabi_d2iz>
 8004ba0:	4680      	mov	r8, r0
 8004ba2:	f7fb fc2f 	bl	8000404 <__aeabi_i2d>
 8004ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004baa:	f7fb fc95 	bl	80004d8 <__aeabi_dmul>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f7fb fad7 	bl	8000168 <__aeabi_dsub>
 8004bba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004bbe:	9d08      	ldr	r5, [sp, #32]
 8004bc0:	f806 4b01 	strb.w	r4, [r6], #1
 8004bc4:	eba6 040a 	sub.w	r4, r6, sl
 8004bc8:	42a5      	cmp	r5, r4
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	d133      	bne.n	8004c38 <_dtoa_r+0x6e8>
 8004bd0:	f7fb facc 	bl	800016c <__adddf3>
 8004bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bd8:	4604      	mov	r4, r0
 8004bda:	460d      	mov	r5, r1
 8004bdc:	f7fb ff0c 	bl	80009f8 <__aeabi_dcmpgt>
 8004be0:	b9c0      	cbnz	r0, 8004c14 <_dtoa_r+0x6c4>
 8004be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb fedd 	bl	80009a8 <__aeabi_dcmpeq>
 8004bee:	b110      	cbz	r0, 8004bf6 <_dtoa_r+0x6a6>
 8004bf0:	f018 0f01 	tst.w	r8, #1
 8004bf4:	d10e      	bne.n	8004c14 <_dtoa_r+0x6c4>
 8004bf6:	4648      	mov	r0, r9
 8004bf8:	9903      	ldr	r1, [sp, #12]
 8004bfa:	f000 fbbb 	bl	8005374 <_Bfree>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	7033      	strb	r3, [r6, #0]
 8004c02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004c04:	3701      	adds	r7, #1
 8004c06:	601f      	str	r7, [r3, #0]
 8004c08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 824b 	beq.w	80050a6 <_dtoa_r+0xb56>
 8004c10:	601e      	str	r6, [r3, #0]
 8004c12:	e248      	b.n	80050a6 <_dtoa_r+0xb56>
 8004c14:	46b8      	mov	r8, r7
 8004c16:	4633      	mov	r3, r6
 8004c18:	461e      	mov	r6, r3
 8004c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c1e:	2a39      	cmp	r2, #57	@ 0x39
 8004c20:	d106      	bne.n	8004c30 <_dtoa_r+0x6e0>
 8004c22:	459a      	cmp	sl, r3
 8004c24:	d1f8      	bne.n	8004c18 <_dtoa_r+0x6c8>
 8004c26:	2230      	movs	r2, #48	@ 0x30
 8004c28:	f108 0801 	add.w	r8, r8, #1
 8004c2c:	f88a 2000 	strb.w	r2, [sl]
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	3201      	adds	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e7a0      	b.n	8004b7a <_dtoa_r+0x62a>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8004df8 <_dtoa_r+0x8a8>)
 8004c3c:	f7fb fc4c 	bl	80004d8 <__aeabi_dmul>
 8004c40:	2200      	movs	r2, #0
 8004c42:	2300      	movs	r3, #0
 8004c44:	4604      	mov	r4, r0
 8004c46:	460d      	mov	r5, r1
 8004c48:	f7fb feae 	bl	80009a8 <__aeabi_dcmpeq>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d09f      	beq.n	8004b90 <_dtoa_r+0x640>
 8004c50:	e7d1      	b.n	8004bf6 <_dtoa_r+0x6a6>
 8004c52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	f000 80ea 	beq.w	8004e2e <_dtoa_r+0x8de>
 8004c5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	f300 80cd 	bgt.w	8004dfc <_dtoa_r+0x8ac>
 8004c62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	f000 80c1 	beq.w	8004dec <_dtoa_r+0x89c>
 8004c6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c70:	9e04      	ldr	r6, [sp, #16]
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	2101      	movs	r1, #1
 8004c76:	441a      	add	r2, r3
 8004c78:	9204      	str	r2, [sp, #16]
 8004c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c7c:	4648      	mov	r0, r9
 8004c7e:	441a      	add	r2, r3
 8004c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c82:	f000 fc75 	bl	8005570 <__i2b>
 8004c86:	4605      	mov	r5, r0
 8004c88:	b166      	cbz	r6, 8004ca4 <_dtoa_r+0x754>
 8004c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dd09      	ble.n	8004ca4 <_dtoa_r+0x754>
 8004c90:	42b3      	cmp	r3, r6
 8004c92:	bfa8      	it	ge
 8004c94:	4633      	movge	r3, r6
 8004c96:	9a04      	ldr	r2, [sp, #16]
 8004c98:	1af6      	subs	r6, r6, r3
 8004c9a:	1ad2      	subs	r2, r2, r3
 8004c9c:	9204      	str	r2, [sp, #16]
 8004c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ca6:	b30b      	cbz	r3, 8004cec <_dtoa_r+0x79c>
 8004ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80c6 	beq.w	8004e3c <_dtoa_r+0x8ec>
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	f000 80c0 	beq.w	8004e36 <_dtoa_r+0x8e6>
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4648      	mov	r0, r9
 8004cbc:	f000 fd10 	bl	80056e0 <__pow5mult>
 8004cc0:	9a03      	ldr	r2, [sp, #12]
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	4648      	mov	r0, r9
 8004cc8:	f000 fc68 	bl	800559c <__multiply>
 8004ccc:	9903      	ldr	r1, [sp, #12]
 8004cce:	4680      	mov	r8, r0
 8004cd0:	4648      	mov	r0, r9
 8004cd2:	f000 fb4f 	bl	8005374 <_Bfree>
 8004cd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cd8:	1b1b      	subs	r3, r3, r4
 8004cda:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cdc:	f000 80b1 	beq.w	8004e42 <_dtoa_r+0x8f2>
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ce4:	4648      	mov	r0, r9
 8004ce6:	f000 fcfb 	bl	80056e0 <__pow5mult>
 8004cea:	9003      	str	r0, [sp, #12]
 8004cec:	2101      	movs	r1, #1
 8004cee:	4648      	mov	r0, r9
 8004cf0:	f000 fc3e 	bl	8005570 <__i2b>
 8004cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 81d8 	beq.w	80050ae <_dtoa_r+0xb5e>
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4601      	mov	r1, r0
 8004d02:	4648      	mov	r0, r9
 8004d04:	f000 fcec 	bl	80056e0 <__pow5mult>
 8004d08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f300 809f 	bgt.w	8004e50 <_dtoa_r+0x900>
 8004d12:	9b06      	ldr	r3, [sp, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8097 	bne.w	8004e48 <_dtoa_r+0x8f8>
 8004d1a:	9b07      	ldr	r3, [sp, #28]
 8004d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 8093 	bne.w	8004e4c <_dtoa_r+0x8fc>
 8004d26:	9b07      	ldr	r3, [sp, #28]
 8004d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d2c:	0d1b      	lsrs	r3, r3, #20
 8004d2e:	051b      	lsls	r3, r3, #20
 8004d30:	b133      	cbz	r3, 8004d40 <_dtoa_r+0x7f0>
 8004d32:	9b04      	ldr	r3, [sp, #16]
 8004d34:	3301      	adds	r3, #1
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d3e:	2301      	movs	r3, #1
 8004d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 81b8 	beq.w	80050ba <_dtoa_r+0xb6a>
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d50:	6918      	ldr	r0, [r3, #16]
 8004d52:	f000 fbc1 	bl	80054d8 <__hi0bits>
 8004d56:	f1c0 0020 	rsb	r0, r0, #32
 8004d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5c:	4418      	add	r0, r3
 8004d5e:	f010 001f 	ands.w	r0, r0, #31
 8004d62:	f000 8082 	beq.w	8004e6a <_dtoa_r+0x91a>
 8004d66:	f1c0 0320 	rsb	r3, r0, #32
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	dd73      	ble.n	8004e56 <_dtoa_r+0x906>
 8004d6e:	9b04      	ldr	r3, [sp, #16]
 8004d70:	f1c0 001c 	rsb	r0, r0, #28
 8004d74:	4403      	add	r3, r0
 8004d76:	9304      	str	r3, [sp, #16]
 8004d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7a:	4406      	add	r6, r0
 8004d7c:	4403      	add	r3, r0
 8004d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d80:	9b04      	ldr	r3, [sp, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dd05      	ble.n	8004d92 <_dtoa_r+0x842>
 8004d86:	461a      	mov	r2, r3
 8004d88:	4648      	mov	r0, r9
 8004d8a:	9903      	ldr	r1, [sp, #12]
 8004d8c:	f000 fd02 	bl	8005794 <__lshift>
 8004d90:	9003      	str	r0, [sp, #12]
 8004d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	dd05      	ble.n	8004da4 <_dtoa_r+0x854>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4648      	mov	r0, r9
 8004d9e:	f000 fcf9 	bl	8005794 <__lshift>
 8004da2:	4604      	mov	r4, r0
 8004da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d061      	beq.n	8004e6e <_dtoa_r+0x91e>
 8004daa:	4621      	mov	r1, r4
 8004dac:	9803      	ldr	r0, [sp, #12]
 8004dae:	f000 fd5d 	bl	800586c <__mcmp>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	da5b      	bge.n	8004e6e <_dtoa_r+0x91e>
 8004db6:	2300      	movs	r3, #0
 8004db8:	220a      	movs	r2, #10
 8004dba:	4648      	mov	r0, r9
 8004dbc:	9903      	ldr	r1, [sp, #12]
 8004dbe:	f000 fafb 	bl	80053b8 <__multadd>
 8004dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dc4:	f107 38ff 	add.w	r8, r7, #4294967295
 8004dc8:	9003      	str	r0, [sp, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8177 	beq.w	80050be <_dtoa_r+0xb6e>
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	220a      	movs	r2, #10
 8004dd6:	4648      	mov	r0, r9
 8004dd8:	f000 faee 	bl	80053b8 <__multadd>
 8004ddc:	f1bb 0f00 	cmp.w	fp, #0
 8004de0:	4605      	mov	r5, r0
 8004de2:	dc6f      	bgt.n	8004ec4 <_dtoa_r+0x974>
 8004de4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	dc49      	bgt.n	8004e7e <_dtoa_r+0x92e>
 8004dea:	e06b      	b.n	8004ec4 <_dtoa_r+0x974>
 8004dec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004df2:	e73c      	b.n	8004c6e <_dtoa_r+0x71e>
 8004df4:	3fe00000 	.word	0x3fe00000
 8004df8:	40240000 	.word	0x40240000
 8004dfc:	9b08      	ldr	r3, [sp, #32]
 8004dfe:	1e5c      	subs	r4, r3, #1
 8004e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	db09      	blt.n	8004e1a <_dtoa_r+0x8ca>
 8004e06:	1b1c      	subs	r4, r3, r4
 8004e08:	9b08      	ldr	r3, [sp, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f6bf af30 	bge.w	8004c70 <_dtoa_r+0x720>
 8004e10:	9b04      	ldr	r3, [sp, #16]
 8004e12:	9a08      	ldr	r2, [sp, #32]
 8004e14:	1a9e      	subs	r6, r3, r2
 8004e16:	2300      	movs	r3, #0
 8004e18:	e72b      	b.n	8004c72 <_dtoa_r+0x722>
 8004e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e1e:	1ae3      	subs	r3, r4, r3
 8004e20:	441a      	add	r2, r3
 8004e22:	940a      	str	r4, [sp, #40]	@ 0x28
 8004e24:	9e04      	ldr	r6, [sp, #16]
 8004e26:	2400      	movs	r4, #0
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e2c:	e721      	b.n	8004c72 <_dtoa_r+0x722>
 8004e2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e30:	9e04      	ldr	r6, [sp, #16]
 8004e32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e34:	e728      	b.n	8004c88 <_dtoa_r+0x738>
 8004e36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e3a:	e751      	b.n	8004ce0 <_dtoa_r+0x790>
 8004e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e3e:	9903      	ldr	r1, [sp, #12]
 8004e40:	e750      	b.n	8004ce4 <_dtoa_r+0x794>
 8004e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e46:	e751      	b.n	8004cec <_dtoa_r+0x79c>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e779      	b.n	8004d40 <_dtoa_r+0x7f0>
 8004e4c:	9b06      	ldr	r3, [sp, #24]
 8004e4e:	e777      	b.n	8004d40 <_dtoa_r+0x7f0>
 8004e50:	2300      	movs	r3, #0
 8004e52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e54:	e779      	b.n	8004d4a <_dtoa_r+0x7fa>
 8004e56:	d093      	beq.n	8004d80 <_dtoa_r+0x830>
 8004e58:	9a04      	ldr	r2, [sp, #16]
 8004e5a:	331c      	adds	r3, #28
 8004e5c:	441a      	add	r2, r3
 8004e5e:	9204      	str	r2, [sp, #16]
 8004e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e62:	441e      	add	r6, r3
 8004e64:	441a      	add	r2, r3
 8004e66:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e68:	e78a      	b.n	8004d80 <_dtoa_r+0x830>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	e7f4      	b.n	8004e58 <_dtoa_r+0x908>
 8004e6e:	9b08      	ldr	r3, [sp, #32]
 8004e70:	46b8      	mov	r8, r7
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	dc20      	bgt.n	8004eb8 <_dtoa_r+0x968>
 8004e76:	469b      	mov	fp, r3
 8004e78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	dd1e      	ble.n	8004ebc <_dtoa_r+0x96c>
 8004e7e:	f1bb 0f00 	cmp.w	fp, #0
 8004e82:	f47f adb1 	bne.w	80049e8 <_dtoa_r+0x498>
 8004e86:	4621      	mov	r1, r4
 8004e88:	465b      	mov	r3, fp
 8004e8a:	2205      	movs	r2, #5
 8004e8c:	4648      	mov	r0, r9
 8004e8e:	f000 fa93 	bl	80053b8 <__multadd>
 8004e92:	4601      	mov	r1, r0
 8004e94:	4604      	mov	r4, r0
 8004e96:	9803      	ldr	r0, [sp, #12]
 8004e98:	f000 fce8 	bl	800586c <__mcmp>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f77f ada3 	ble.w	80049e8 <_dtoa_r+0x498>
 8004ea2:	4656      	mov	r6, sl
 8004ea4:	2331      	movs	r3, #49	@ 0x31
 8004ea6:	f108 0801 	add.w	r8, r8, #1
 8004eaa:	f806 3b01 	strb.w	r3, [r6], #1
 8004eae:	e59f      	b.n	80049f0 <_dtoa_r+0x4a0>
 8004eb0:	46b8      	mov	r8, r7
 8004eb2:	9c08      	ldr	r4, [sp, #32]
 8004eb4:	4625      	mov	r5, r4
 8004eb6:	e7f4      	b.n	8004ea2 <_dtoa_r+0x952>
 8004eb8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8101 	beq.w	80050c6 <_dtoa_r+0xb76>
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	dd05      	ble.n	8004ed4 <_dtoa_r+0x984>
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4632      	mov	r2, r6
 8004ecc:	4648      	mov	r0, r9
 8004ece:	f000 fc61 	bl	8005794 <__lshift>
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d05c      	beq.n	8004f94 <_dtoa_r+0xa44>
 8004eda:	4648      	mov	r0, r9
 8004edc:	6869      	ldr	r1, [r5, #4]
 8004ede:	f000 fa09 	bl	80052f4 <_Balloc>
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	b928      	cbnz	r0, 8004ef2 <_dtoa_r+0x9a2>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004eec:	4b80      	ldr	r3, [pc, #512]	@ (80050f0 <_dtoa_r+0xba0>)
 8004eee:	f7ff bb43 	b.w	8004578 <_dtoa_r+0x28>
 8004ef2:	692a      	ldr	r2, [r5, #16]
 8004ef4:	f105 010c 	add.w	r1, r5, #12
 8004ef8:	3202      	adds	r2, #2
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	300c      	adds	r0, #12
 8004efe:	f001 ff51 	bl	8006da4 <memcpy>
 8004f02:	2201      	movs	r2, #1
 8004f04:	4631      	mov	r1, r6
 8004f06:	4648      	mov	r0, r9
 8004f08:	f000 fc44 	bl	8005794 <__lshift>
 8004f0c:	462f      	mov	r7, r5
 8004f0e:	4605      	mov	r5, r0
 8004f10:	f10a 0301 	add.w	r3, sl, #1
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	eb0a 030b 	add.w	r3, sl, fp
 8004f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f1c:	9b06      	ldr	r3, [sp, #24]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f24:	9b04      	ldr	r3, [sp, #16]
 8004f26:	4621      	mov	r1, r4
 8004f28:	9803      	ldr	r0, [sp, #12]
 8004f2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f2e:	f7ff fa85 	bl	800443c <quorem>
 8004f32:	4603      	mov	r3, r0
 8004f34:	4639      	mov	r1, r7
 8004f36:	3330      	adds	r3, #48	@ 0x30
 8004f38:	9006      	str	r0, [sp, #24]
 8004f3a:	9803      	ldr	r0, [sp, #12]
 8004f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f3e:	f000 fc95 	bl	800586c <__mcmp>
 8004f42:	462a      	mov	r2, r5
 8004f44:	9008      	str	r0, [sp, #32]
 8004f46:	4621      	mov	r1, r4
 8004f48:	4648      	mov	r0, r9
 8004f4a:	f000 fcab 	bl	80058a4 <__mdiff>
 8004f4e:	68c2      	ldr	r2, [r0, #12]
 8004f50:	4606      	mov	r6, r0
 8004f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f54:	bb02      	cbnz	r2, 8004f98 <_dtoa_r+0xa48>
 8004f56:	4601      	mov	r1, r0
 8004f58:	9803      	ldr	r0, [sp, #12]
 8004f5a:	f000 fc87 	bl	800586c <__mcmp>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f62:	4631      	mov	r1, r6
 8004f64:	4648      	mov	r0, r9
 8004f66:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004f6a:	f000 fa03 	bl	8005374 <_Bfree>
 8004f6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004f72:	9e04      	ldr	r6, [sp, #16]
 8004f74:	ea42 0103 	orr.w	r1, r2, r3
 8004f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f7a:	4319      	orrs	r1, r3
 8004f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f7e:	d10d      	bne.n	8004f9c <_dtoa_r+0xa4c>
 8004f80:	2b39      	cmp	r3, #57	@ 0x39
 8004f82:	d027      	beq.n	8004fd4 <_dtoa_r+0xa84>
 8004f84:	9a08      	ldr	r2, [sp, #32]
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	dd01      	ble.n	8004f8e <_dtoa_r+0xa3e>
 8004f8a:	9b06      	ldr	r3, [sp, #24]
 8004f8c:	3331      	adds	r3, #49	@ 0x31
 8004f8e:	f88b 3000 	strb.w	r3, [fp]
 8004f92:	e52e      	b.n	80049f2 <_dtoa_r+0x4a2>
 8004f94:	4628      	mov	r0, r5
 8004f96:	e7b9      	b.n	8004f0c <_dtoa_r+0x9bc>
 8004f98:	2201      	movs	r2, #1
 8004f9a:	e7e2      	b.n	8004f62 <_dtoa_r+0xa12>
 8004f9c:	9908      	ldr	r1, [sp, #32]
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	db04      	blt.n	8004fac <_dtoa_r+0xa5c>
 8004fa2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004fa4:	4301      	orrs	r1, r0
 8004fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fa8:	4301      	orrs	r1, r0
 8004faa:	d120      	bne.n	8004fee <_dtoa_r+0xa9e>
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	ddee      	ble.n	8004f8e <_dtoa_r+0xa3e>
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	9903      	ldr	r1, [sp, #12]
 8004fb4:	4648      	mov	r0, r9
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	f000 fbec 	bl	8005794 <__lshift>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	9003      	str	r0, [sp, #12]
 8004fc0:	f000 fc54 	bl	800586c <__mcmp>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	9b04      	ldr	r3, [sp, #16]
 8004fc8:	dc02      	bgt.n	8004fd0 <_dtoa_r+0xa80>
 8004fca:	d1e0      	bne.n	8004f8e <_dtoa_r+0xa3e>
 8004fcc:	07da      	lsls	r2, r3, #31
 8004fce:	d5de      	bpl.n	8004f8e <_dtoa_r+0xa3e>
 8004fd0:	2b39      	cmp	r3, #57	@ 0x39
 8004fd2:	d1da      	bne.n	8004f8a <_dtoa_r+0xa3a>
 8004fd4:	2339      	movs	r3, #57	@ 0x39
 8004fd6:	f88b 3000 	strb.w	r3, [fp]
 8004fda:	4633      	mov	r3, r6
 8004fdc:	461e      	mov	r6, r3
 8004fde:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2a39      	cmp	r2, #57	@ 0x39
 8004fe6:	d04e      	beq.n	8005086 <_dtoa_r+0xb36>
 8004fe8:	3201      	adds	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e501      	b.n	80049f2 <_dtoa_r+0x4a2>
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	dd03      	ble.n	8004ffa <_dtoa_r+0xaaa>
 8004ff2:	2b39      	cmp	r3, #57	@ 0x39
 8004ff4:	d0ee      	beq.n	8004fd4 <_dtoa_r+0xa84>
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	e7c9      	b.n	8004f8e <_dtoa_r+0xa3e>
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005002:	428a      	cmp	r2, r1
 8005004:	d028      	beq.n	8005058 <_dtoa_r+0xb08>
 8005006:	2300      	movs	r3, #0
 8005008:	220a      	movs	r2, #10
 800500a:	9903      	ldr	r1, [sp, #12]
 800500c:	4648      	mov	r0, r9
 800500e:	f000 f9d3 	bl	80053b8 <__multadd>
 8005012:	42af      	cmp	r7, r5
 8005014:	9003      	str	r0, [sp, #12]
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	f04f 020a 	mov.w	r2, #10
 800501e:	4639      	mov	r1, r7
 8005020:	4648      	mov	r0, r9
 8005022:	d107      	bne.n	8005034 <_dtoa_r+0xae4>
 8005024:	f000 f9c8 	bl	80053b8 <__multadd>
 8005028:	4607      	mov	r7, r0
 800502a:	4605      	mov	r5, r0
 800502c:	9b04      	ldr	r3, [sp, #16]
 800502e:	3301      	adds	r3, #1
 8005030:	9304      	str	r3, [sp, #16]
 8005032:	e777      	b.n	8004f24 <_dtoa_r+0x9d4>
 8005034:	f000 f9c0 	bl	80053b8 <__multadd>
 8005038:	4629      	mov	r1, r5
 800503a:	4607      	mov	r7, r0
 800503c:	2300      	movs	r3, #0
 800503e:	220a      	movs	r2, #10
 8005040:	4648      	mov	r0, r9
 8005042:	f000 f9b9 	bl	80053b8 <__multadd>
 8005046:	4605      	mov	r5, r0
 8005048:	e7f0      	b.n	800502c <_dtoa_r+0xadc>
 800504a:	f1bb 0f00 	cmp.w	fp, #0
 800504e:	bfcc      	ite	gt
 8005050:	465e      	movgt	r6, fp
 8005052:	2601      	movle	r6, #1
 8005054:	2700      	movs	r7, #0
 8005056:	4456      	add	r6, sl
 8005058:	2201      	movs	r2, #1
 800505a:	9903      	ldr	r1, [sp, #12]
 800505c:	4648      	mov	r0, r9
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	f000 fb98 	bl	8005794 <__lshift>
 8005064:	4621      	mov	r1, r4
 8005066:	9003      	str	r0, [sp, #12]
 8005068:	f000 fc00 	bl	800586c <__mcmp>
 800506c:	2800      	cmp	r0, #0
 800506e:	dcb4      	bgt.n	8004fda <_dtoa_r+0xa8a>
 8005070:	d102      	bne.n	8005078 <_dtoa_r+0xb28>
 8005072:	9b04      	ldr	r3, [sp, #16]
 8005074:	07db      	lsls	r3, r3, #31
 8005076:	d4b0      	bmi.n	8004fda <_dtoa_r+0xa8a>
 8005078:	4633      	mov	r3, r6
 800507a:	461e      	mov	r6, r3
 800507c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005080:	2a30      	cmp	r2, #48	@ 0x30
 8005082:	d0fa      	beq.n	800507a <_dtoa_r+0xb2a>
 8005084:	e4b5      	b.n	80049f2 <_dtoa_r+0x4a2>
 8005086:	459a      	cmp	sl, r3
 8005088:	d1a8      	bne.n	8004fdc <_dtoa_r+0xa8c>
 800508a:	2331      	movs	r3, #49	@ 0x31
 800508c:	f108 0801 	add.w	r8, r8, #1
 8005090:	f88a 3000 	strb.w	r3, [sl]
 8005094:	e4ad      	b.n	80049f2 <_dtoa_r+0x4a2>
 8005096:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005098:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80050f4 <_dtoa_r+0xba4>
 800509c:	b11b      	cbz	r3, 80050a6 <_dtoa_r+0xb56>
 800509e:	f10a 0308 	add.w	r3, sl, #8
 80050a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4650      	mov	r0, sl
 80050a8:	b017      	add	sp, #92	@ 0x5c
 80050aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	f77f ae2e 	ble.w	8004d12 <_dtoa_r+0x7c2>
 80050b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ba:	2001      	movs	r0, #1
 80050bc:	e64d      	b.n	8004d5a <_dtoa_r+0x80a>
 80050be:	f1bb 0f00 	cmp.w	fp, #0
 80050c2:	f77f aed9 	ble.w	8004e78 <_dtoa_r+0x928>
 80050c6:	4656      	mov	r6, sl
 80050c8:	4621      	mov	r1, r4
 80050ca:	9803      	ldr	r0, [sp, #12]
 80050cc:	f7ff f9b6 	bl	800443c <quorem>
 80050d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80050d4:	f806 3b01 	strb.w	r3, [r6], #1
 80050d8:	eba6 020a 	sub.w	r2, r6, sl
 80050dc:	4593      	cmp	fp, r2
 80050de:	ddb4      	ble.n	800504a <_dtoa_r+0xafa>
 80050e0:	2300      	movs	r3, #0
 80050e2:	220a      	movs	r2, #10
 80050e4:	4648      	mov	r0, r9
 80050e6:	9903      	ldr	r1, [sp, #12]
 80050e8:	f000 f966 	bl	80053b8 <__multadd>
 80050ec:	9003      	str	r0, [sp, #12]
 80050ee:	e7eb      	b.n	80050c8 <_dtoa_r+0xb78>
 80050f0:	08007cdb 	.word	0x08007cdb
 80050f4:	08007c5f 	.word	0x08007c5f

080050f8 <_free_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4605      	mov	r5, r0
 80050fc:	2900      	cmp	r1, #0
 80050fe:	d040      	beq.n	8005182 <_free_r+0x8a>
 8005100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005104:	1f0c      	subs	r4, r1, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	bfb8      	it	lt
 800510a:	18e4      	addlt	r4, r4, r3
 800510c:	f000 f8e6 	bl	80052dc <__malloc_lock>
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <_free_r+0x8c>)
 8005112:	6813      	ldr	r3, [r2, #0]
 8005114:	b933      	cbnz	r3, 8005124 <_free_r+0x2c>
 8005116:	6063      	str	r3, [r4, #4]
 8005118:	6014      	str	r4, [r2, #0]
 800511a:	4628      	mov	r0, r5
 800511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005120:	f000 b8e2 	b.w	80052e8 <__malloc_unlock>
 8005124:	42a3      	cmp	r3, r4
 8005126:	d908      	bls.n	800513a <_free_r+0x42>
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	1821      	adds	r1, r4, r0
 800512c:	428b      	cmp	r3, r1
 800512e:	bf01      	itttt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	1809      	addeq	r1, r1, r0
 8005136:	6021      	streq	r1, [r4, #0]
 8005138:	e7ed      	b.n	8005116 <_free_r+0x1e>
 800513a:	461a      	mov	r2, r3
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	b10b      	cbz	r3, 8005144 <_free_r+0x4c>
 8005140:	42a3      	cmp	r3, r4
 8005142:	d9fa      	bls.n	800513a <_free_r+0x42>
 8005144:	6811      	ldr	r1, [r2, #0]
 8005146:	1850      	adds	r0, r2, r1
 8005148:	42a0      	cmp	r0, r4
 800514a:	d10b      	bne.n	8005164 <_free_r+0x6c>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	4401      	add	r1, r0
 8005150:	1850      	adds	r0, r2, r1
 8005152:	4283      	cmp	r3, r0
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	d1e0      	bne.n	800511a <_free_r+0x22>
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4408      	add	r0, r1
 800515e:	6010      	str	r0, [r2, #0]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	e7da      	b.n	800511a <_free_r+0x22>
 8005164:	d902      	bls.n	800516c <_free_r+0x74>
 8005166:	230c      	movs	r3, #12
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	e7d6      	b.n	800511a <_free_r+0x22>
 800516c:	6820      	ldr	r0, [r4, #0]
 800516e:	1821      	adds	r1, r4, r0
 8005170:	428b      	cmp	r3, r1
 8005172:	bf01      	itttt	eq
 8005174:	6819      	ldreq	r1, [r3, #0]
 8005176:	685b      	ldreq	r3, [r3, #4]
 8005178:	1809      	addeq	r1, r1, r0
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	6054      	str	r4, [r2, #4]
 8005180:	e7cb      	b.n	800511a <_free_r+0x22>
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000404 	.word	0x20000404

08005188 <malloc>:
 8005188:	4b02      	ldr	r3, [pc, #8]	@ (8005194 <malloc+0xc>)
 800518a:	4601      	mov	r1, r0
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f000 b825 	b.w	80051dc <_malloc_r>
 8005192:	bf00      	nop
 8005194:	20000018 	.word	0x20000018

08005198 <sbrk_aligned>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4e0f      	ldr	r6, [pc, #60]	@ (80051d8 <sbrk_aligned+0x40>)
 800519c:	460c      	mov	r4, r1
 800519e:	6831      	ldr	r1, [r6, #0]
 80051a0:	4605      	mov	r5, r0
 80051a2:	b911      	cbnz	r1, 80051aa <sbrk_aligned+0x12>
 80051a4:	f001 fdee 	bl	8006d84 <_sbrk_r>
 80051a8:	6030      	str	r0, [r6, #0]
 80051aa:	4621      	mov	r1, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	f001 fde9 	bl	8006d84 <_sbrk_r>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d103      	bne.n	80051be <sbrk_aligned+0x26>
 80051b6:	f04f 34ff 	mov.w	r4, #4294967295
 80051ba:	4620      	mov	r0, r4
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	1cc4      	adds	r4, r0, #3
 80051c0:	f024 0403 	bic.w	r4, r4, #3
 80051c4:	42a0      	cmp	r0, r4
 80051c6:	d0f8      	beq.n	80051ba <sbrk_aligned+0x22>
 80051c8:	1a21      	subs	r1, r4, r0
 80051ca:	4628      	mov	r0, r5
 80051cc:	f001 fdda 	bl	8006d84 <_sbrk_r>
 80051d0:	3001      	adds	r0, #1
 80051d2:	d1f2      	bne.n	80051ba <sbrk_aligned+0x22>
 80051d4:	e7ef      	b.n	80051b6 <sbrk_aligned+0x1e>
 80051d6:	bf00      	nop
 80051d8:	20000400 	.word	0x20000400

080051dc <_malloc_r>:
 80051dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e0:	1ccd      	adds	r5, r1, #3
 80051e2:	f025 0503 	bic.w	r5, r5, #3
 80051e6:	3508      	adds	r5, #8
 80051e8:	2d0c      	cmp	r5, #12
 80051ea:	bf38      	it	cc
 80051ec:	250c      	movcc	r5, #12
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	4606      	mov	r6, r0
 80051f2:	db01      	blt.n	80051f8 <_malloc_r+0x1c>
 80051f4:	42a9      	cmp	r1, r5
 80051f6:	d904      	bls.n	8005202 <_malloc_r+0x26>
 80051f8:	230c      	movs	r3, #12
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	2000      	movs	r0, #0
 80051fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052d8 <_malloc_r+0xfc>
 8005206:	f000 f869 	bl	80052dc <__malloc_lock>
 800520a:	f8d8 3000 	ldr.w	r3, [r8]
 800520e:	461c      	mov	r4, r3
 8005210:	bb44      	cbnz	r4, 8005264 <_malloc_r+0x88>
 8005212:	4629      	mov	r1, r5
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff ffbf 	bl	8005198 <sbrk_aligned>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	4604      	mov	r4, r0
 800521e:	d158      	bne.n	80052d2 <_malloc_r+0xf6>
 8005220:	f8d8 4000 	ldr.w	r4, [r8]
 8005224:	4627      	mov	r7, r4
 8005226:	2f00      	cmp	r7, #0
 8005228:	d143      	bne.n	80052b2 <_malloc_r+0xd6>
 800522a:	2c00      	cmp	r4, #0
 800522c:	d04b      	beq.n	80052c6 <_malloc_r+0xea>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	4639      	mov	r1, r7
 8005232:	4630      	mov	r0, r6
 8005234:	eb04 0903 	add.w	r9, r4, r3
 8005238:	f001 fda4 	bl	8006d84 <_sbrk_r>
 800523c:	4581      	cmp	r9, r0
 800523e:	d142      	bne.n	80052c6 <_malloc_r+0xea>
 8005240:	6821      	ldr	r1, [r4, #0]
 8005242:	4630      	mov	r0, r6
 8005244:	1a6d      	subs	r5, r5, r1
 8005246:	4629      	mov	r1, r5
 8005248:	f7ff ffa6 	bl	8005198 <sbrk_aligned>
 800524c:	3001      	adds	r0, #1
 800524e:	d03a      	beq.n	80052c6 <_malloc_r+0xea>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	442b      	add	r3, r5
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	f8d8 3000 	ldr.w	r3, [r8]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	bb62      	cbnz	r2, 80052b8 <_malloc_r+0xdc>
 800525e:	f8c8 7000 	str.w	r7, [r8]
 8005262:	e00f      	b.n	8005284 <_malloc_r+0xa8>
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	1b52      	subs	r2, r2, r5
 8005268:	d420      	bmi.n	80052ac <_malloc_r+0xd0>
 800526a:	2a0b      	cmp	r2, #11
 800526c:	d917      	bls.n	800529e <_malloc_r+0xc2>
 800526e:	1961      	adds	r1, r4, r5
 8005270:	42a3      	cmp	r3, r4
 8005272:	6025      	str	r5, [r4, #0]
 8005274:	bf18      	it	ne
 8005276:	6059      	strne	r1, [r3, #4]
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	bf08      	it	eq
 800527c:	f8c8 1000 	streq.w	r1, [r8]
 8005280:	5162      	str	r2, [r4, r5]
 8005282:	604b      	str	r3, [r1, #4]
 8005284:	4630      	mov	r0, r6
 8005286:	f000 f82f 	bl	80052e8 <__malloc_unlock>
 800528a:	f104 000b 	add.w	r0, r4, #11
 800528e:	1d23      	adds	r3, r4, #4
 8005290:	f020 0007 	bic.w	r0, r0, #7
 8005294:	1ac2      	subs	r2, r0, r3
 8005296:	bf1c      	itt	ne
 8005298:	1a1b      	subne	r3, r3, r0
 800529a:	50a3      	strne	r3, [r4, r2]
 800529c:	e7af      	b.n	80051fe <_malloc_r+0x22>
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	bf0c      	ite	eq
 80052a4:	f8c8 2000 	streq.w	r2, [r8]
 80052a8:	605a      	strne	r2, [r3, #4]
 80052aa:	e7eb      	b.n	8005284 <_malloc_r+0xa8>
 80052ac:	4623      	mov	r3, r4
 80052ae:	6864      	ldr	r4, [r4, #4]
 80052b0:	e7ae      	b.n	8005210 <_malloc_r+0x34>
 80052b2:	463c      	mov	r4, r7
 80052b4:	687f      	ldr	r7, [r7, #4]
 80052b6:	e7b6      	b.n	8005226 <_malloc_r+0x4a>
 80052b8:	461a      	mov	r2, r3
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	42a3      	cmp	r3, r4
 80052be:	d1fb      	bne.n	80052b8 <_malloc_r+0xdc>
 80052c0:	2300      	movs	r3, #0
 80052c2:	6053      	str	r3, [r2, #4]
 80052c4:	e7de      	b.n	8005284 <_malloc_r+0xa8>
 80052c6:	230c      	movs	r3, #12
 80052c8:	4630      	mov	r0, r6
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	f000 f80c 	bl	80052e8 <__malloc_unlock>
 80052d0:	e794      	b.n	80051fc <_malloc_r+0x20>
 80052d2:	6005      	str	r5, [r0, #0]
 80052d4:	e7d6      	b.n	8005284 <_malloc_r+0xa8>
 80052d6:	bf00      	nop
 80052d8:	20000404 	.word	0x20000404

080052dc <__malloc_lock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	@ (80052e4 <__malloc_lock+0x8>)
 80052de:	f7ff b898 	b.w	8004412 <__retarget_lock_acquire_recursive>
 80052e2:	bf00      	nop
 80052e4:	200003fc 	.word	0x200003fc

080052e8 <__malloc_unlock>:
 80052e8:	4801      	ldr	r0, [pc, #4]	@ (80052f0 <__malloc_unlock+0x8>)
 80052ea:	f7ff b893 	b.w	8004414 <__retarget_lock_release_recursive>
 80052ee:	bf00      	nop
 80052f0:	200003fc 	.word	0x200003fc

080052f4 <_Balloc>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	69c6      	ldr	r6, [r0, #28]
 80052f8:	4604      	mov	r4, r0
 80052fa:	460d      	mov	r5, r1
 80052fc:	b976      	cbnz	r6, 800531c <_Balloc+0x28>
 80052fe:	2010      	movs	r0, #16
 8005300:	f7ff ff42 	bl	8005188 <malloc>
 8005304:	4602      	mov	r2, r0
 8005306:	61e0      	str	r0, [r4, #28]
 8005308:	b920      	cbnz	r0, 8005314 <_Balloc+0x20>
 800530a:	216b      	movs	r1, #107	@ 0x6b
 800530c:	4b17      	ldr	r3, [pc, #92]	@ (800536c <_Balloc+0x78>)
 800530e:	4818      	ldr	r0, [pc, #96]	@ (8005370 <_Balloc+0x7c>)
 8005310:	f001 fd5c 	bl	8006dcc <__assert_func>
 8005314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005318:	6006      	str	r6, [r0, #0]
 800531a:	60c6      	str	r6, [r0, #12]
 800531c:	69e6      	ldr	r6, [r4, #28]
 800531e:	68f3      	ldr	r3, [r6, #12]
 8005320:	b183      	cbz	r3, 8005344 <_Balloc+0x50>
 8005322:	69e3      	ldr	r3, [r4, #28]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800532a:	b9b8      	cbnz	r0, 800535c <_Balloc+0x68>
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f605 	lsl.w	r6, r1, r5
 8005332:	1d72      	adds	r2, r6, #5
 8005334:	4620      	mov	r0, r4
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	f001 fd66 	bl	8006e08 <_calloc_r>
 800533c:	b160      	cbz	r0, 8005358 <_Balloc+0x64>
 800533e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005342:	e00e      	b.n	8005362 <_Balloc+0x6e>
 8005344:	2221      	movs	r2, #33	@ 0x21
 8005346:	2104      	movs	r1, #4
 8005348:	4620      	mov	r0, r4
 800534a:	f001 fd5d 	bl	8006e08 <_calloc_r>
 800534e:	69e3      	ldr	r3, [r4, #28]
 8005350:	60f0      	str	r0, [r6, #12]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e4      	bne.n	8005322 <_Balloc+0x2e>
 8005358:	2000      	movs	r0, #0
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	6802      	ldr	r2, [r0, #0]
 800535e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005362:	2300      	movs	r3, #0
 8005364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005368:	e7f7      	b.n	800535a <_Balloc+0x66>
 800536a:	bf00      	nop
 800536c:	08007c6c 	.word	0x08007c6c
 8005370:	08007cec 	.word	0x08007cec

08005374 <_Bfree>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	69c6      	ldr	r6, [r0, #28]
 8005378:	4605      	mov	r5, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b976      	cbnz	r6, 800539c <_Bfree+0x28>
 800537e:	2010      	movs	r0, #16
 8005380:	f7ff ff02 	bl	8005188 <malloc>
 8005384:	4602      	mov	r2, r0
 8005386:	61e8      	str	r0, [r5, #28]
 8005388:	b920      	cbnz	r0, 8005394 <_Bfree+0x20>
 800538a:	218f      	movs	r1, #143	@ 0x8f
 800538c:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <_Bfree+0x3c>)
 800538e:	4809      	ldr	r0, [pc, #36]	@ (80053b4 <_Bfree+0x40>)
 8005390:	f001 fd1c 	bl	8006dcc <__assert_func>
 8005394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005398:	6006      	str	r6, [r0, #0]
 800539a:	60c6      	str	r6, [r0, #12]
 800539c:	b13c      	cbz	r4, 80053ae <_Bfree+0x3a>
 800539e:	69eb      	ldr	r3, [r5, #28]
 80053a0:	6862      	ldr	r2, [r4, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053a8:	6021      	str	r1, [r4, #0]
 80053aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	08007c6c 	.word	0x08007c6c
 80053b4:	08007cec 	.word	0x08007cec

080053b8 <__multadd>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	4607      	mov	r7, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	461e      	mov	r6, r3
 80053c2:	2000      	movs	r0, #0
 80053c4:	690d      	ldr	r5, [r1, #16]
 80053c6:	f101 0c14 	add.w	ip, r1, #20
 80053ca:	f8dc 3000 	ldr.w	r3, [ip]
 80053ce:	3001      	adds	r0, #1
 80053d0:	b299      	uxth	r1, r3
 80053d2:	fb02 6101 	mla	r1, r2, r1, r6
 80053d6:	0c1e      	lsrs	r6, r3, #16
 80053d8:	0c0b      	lsrs	r3, r1, #16
 80053da:	fb02 3306 	mla	r3, r2, r6, r3
 80053de:	b289      	uxth	r1, r1
 80053e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053e4:	4285      	cmp	r5, r0
 80053e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053ea:	f84c 1b04 	str.w	r1, [ip], #4
 80053ee:	dcec      	bgt.n	80053ca <__multadd+0x12>
 80053f0:	b30e      	cbz	r6, 8005436 <__multadd+0x7e>
 80053f2:	68a3      	ldr	r3, [r4, #8]
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	dc19      	bgt.n	800542c <__multadd+0x74>
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	4638      	mov	r0, r7
 80053fc:	3101      	adds	r1, #1
 80053fe:	f7ff ff79 	bl	80052f4 <_Balloc>
 8005402:	4680      	mov	r8, r0
 8005404:	b928      	cbnz	r0, 8005412 <__multadd+0x5a>
 8005406:	4602      	mov	r2, r0
 8005408:	21ba      	movs	r1, #186	@ 0xba
 800540a:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <__multadd+0x84>)
 800540c:	480c      	ldr	r0, [pc, #48]	@ (8005440 <__multadd+0x88>)
 800540e:	f001 fcdd 	bl	8006dcc <__assert_func>
 8005412:	6922      	ldr	r2, [r4, #16]
 8005414:	f104 010c 	add.w	r1, r4, #12
 8005418:	3202      	adds	r2, #2
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	300c      	adds	r0, #12
 800541e:	f001 fcc1 	bl	8006da4 <memcpy>
 8005422:	4621      	mov	r1, r4
 8005424:	4638      	mov	r0, r7
 8005426:	f7ff ffa5 	bl	8005374 <_Bfree>
 800542a:	4644      	mov	r4, r8
 800542c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005430:	3501      	adds	r5, #1
 8005432:	615e      	str	r6, [r3, #20]
 8005434:	6125      	str	r5, [r4, #16]
 8005436:	4620      	mov	r0, r4
 8005438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800543c:	08007cdb 	.word	0x08007cdb
 8005440:	08007cec 	.word	0x08007cec

08005444 <__s2b>:
 8005444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005448:	4615      	mov	r5, r2
 800544a:	2209      	movs	r2, #9
 800544c:	461f      	mov	r7, r3
 800544e:	3308      	adds	r3, #8
 8005450:	460c      	mov	r4, r1
 8005452:	fb93 f3f2 	sdiv	r3, r3, r2
 8005456:	4606      	mov	r6, r0
 8005458:	2201      	movs	r2, #1
 800545a:	2100      	movs	r1, #0
 800545c:	429a      	cmp	r2, r3
 800545e:	db09      	blt.n	8005474 <__s2b+0x30>
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff ff47 	bl	80052f4 <_Balloc>
 8005466:	b940      	cbnz	r0, 800547a <__s2b+0x36>
 8005468:	4602      	mov	r2, r0
 800546a:	21d3      	movs	r1, #211	@ 0xd3
 800546c:	4b18      	ldr	r3, [pc, #96]	@ (80054d0 <__s2b+0x8c>)
 800546e:	4819      	ldr	r0, [pc, #100]	@ (80054d4 <__s2b+0x90>)
 8005470:	f001 fcac 	bl	8006dcc <__assert_func>
 8005474:	0052      	lsls	r2, r2, #1
 8005476:	3101      	adds	r1, #1
 8005478:	e7f0      	b.n	800545c <__s2b+0x18>
 800547a:	9b08      	ldr	r3, [sp, #32]
 800547c:	2d09      	cmp	r5, #9
 800547e:	6143      	str	r3, [r0, #20]
 8005480:	f04f 0301 	mov.w	r3, #1
 8005484:	6103      	str	r3, [r0, #16]
 8005486:	dd16      	ble.n	80054b6 <__s2b+0x72>
 8005488:	f104 0909 	add.w	r9, r4, #9
 800548c:	46c8      	mov	r8, r9
 800548e:	442c      	add	r4, r5
 8005490:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005494:	4601      	mov	r1, r0
 8005496:	220a      	movs	r2, #10
 8005498:	4630      	mov	r0, r6
 800549a:	3b30      	subs	r3, #48	@ 0x30
 800549c:	f7ff ff8c 	bl	80053b8 <__multadd>
 80054a0:	45a0      	cmp	r8, r4
 80054a2:	d1f5      	bne.n	8005490 <__s2b+0x4c>
 80054a4:	f1a5 0408 	sub.w	r4, r5, #8
 80054a8:	444c      	add	r4, r9
 80054aa:	1b2d      	subs	r5, r5, r4
 80054ac:	1963      	adds	r3, r4, r5
 80054ae:	42bb      	cmp	r3, r7
 80054b0:	db04      	blt.n	80054bc <__s2b+0x78>
 80054b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b6:	2509      	movs	r5, #9
 80054b8:	340a      	adds	r4, #10
 80054ba:	e7f6      	b.n	80054aa <__s2b+0x66>
 80054bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80054c0:	4601      	mov	r1, r0
 80054c2:	220a      	movs	r2, #10
 80054c4:	4630      	mov	r0, r6
 80054c6:	3b30      	subs	r3, #48	@ 0x30
 80054c8:	f7ff ff76 	bl	80053b8 <__multadd>
 80054cc:	e7ee      	b.n	80054ac <__s2b+0x68>
 80054ce:	bf00      	nop
 80054d0:	08007cdb 	.word	0x08007cdb
 80054d4:	08007cec 	.word	0x08007cec

080054d8 <__hi0bits>:
 80054d8:	4603      	mov	r3, r0
 80054da:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80054de:	bf3a      	itte	cc
 80054e0:	0403      	lslcc	r3, r0, #16
 80054e2:	2010      	movcc	r0, #16
 80054e4:	2000      	movcs	r0, #0
 80054e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054ea:	bf3c      	itt	cc
 80054ec:	021b      	lslcc	r3, r3, #8
 80054ee:	3008      	addcc	r0, #8
 80054f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054f4:	bf3c      	itt	cc
 80054f6:	011b      	lslcc	r3, r3, #4
 80054f8:	3004      	addcc	r0, #4
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fe:	bf3c      	itt	cc
 8005500:	009b      	lslcc	r3, r3, #2
 8005502:	3002      	addcc	r0, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	db05      	blt.n	8005514 <__hi0bits+0x3c>
 8005508:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800550c:	f100 0001 	add.w	r0, r0, #1
 8005510:	bf08      	it	eq
 8005512:	2020      	moveq	r0, #32
 8005514:	4770      	bx	lr

08005516 <__lo0bits>:
 8005516:	6803      	ldr	r3, [r0, #0]
 8005518:	4602      	mov	r2, r0
 800551a:	f013 0007 	ands.w	r0, r3, #7
 800551e:	d00b      	beq.n	8005538 <__lo0bits+0x22>
 8005520:	07d9      	lsls	r1, r3, #31
 8005522:	d421      	bmi.n	8005568 <__lo0bits+0x52>
 8005524:	0798      	lsls	r0, r3, #30
 8005526:	bf49      	itett	mi
 8005528:	085b      	lsrmi	r3, r3, #1
 800552a:	089b      	lsrpl	r3, r3, #2
 800552c:	2001      	movmi	r0, #1
 800552e:	6013      	strmi	r3, [r2, #0]
 8005530:	bf5c      	itt	pl
 8005532:	2002      	movpl	r0, #2
 8005534:	6013      	strpl	r3, [r2, #0]
 8005536:	4770      	bx	lr
 8005538:	b299      	uxth	r1, r3
 800553a:	b909      	cbnz	r1, 8005540 <__lo0bits+0x2a>
 800553c:	2010      	movs	r0, #16
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	b2d9      	uxtb	r1, r3
 8005542:	b909      	cbnz	r1, 8005548 <__lo0bits+0x32>
 8005544:	3008      	adds	r0, #8
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	0719      	lsls	r1, r3, #28
 800554a:	bf04      	itt	eq
 800554c:	091b      	lsreq	r3, r3, #4
 800554e:	3004      	addeq	r0, #4
 8005550:	0799      	lsls	r1, r3, #30
 8005552:	bf04      	itt	eq
 8005554:	089b      	lsreq	r3, r3, #2
 8005556:	3002      	addeq	r0, #2
 8005558:	07d9      	lsls	r1, r3, #31
 800555a:	d403      	bmi.n	8005564 <__lo0bits+0x4e>
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	f100 0001 	add.w	r0, r0, #1
 8005562:	d003      	beq.n	800556c <__lo0bits+0x56>
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4770      	bx	lr
 8005568:	2000      	movs	r0, #0
 800556a:	4770      	bx	lr
 800556c:	2020      	movs	r0, #32
 800556e:	4770      	bx	lr

08005570 <__i2b>:
 8005570:	b510      	push	{r4, lr}
 8005572:	460c      	mov	r4, r1
 8005574:	2101      	movs	r1, #1
 8005576:	f7ff febd 	bl	80052f4 <_Balloc>
 800557a:	4602      	mov	r2, r0
 800557c:	b928      	cbnz	r0, 800558a <__i2b+0x1a>
 800557e:	f240 1145 	movw	r1, #325	@ 0x145
 8005582:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <__i2b+0x24>)
 8005584:	4804      	ldr	r0, [pc, #16]	@ (8005598 <__i2b+0x28>)
 8005586:	f001 fc21 	bl	8006dcc <__assert_func>
 800558a:	2301      	movs	r3, #1
 800558c:	6144      	str	r4, [r0, #20]
 800558e:	6103      	str	r3, [r0, #16]
 8005590:	bd10      	pop	{r4, pc}
 8005592:	bf00      	nop
 8005594:	08007cdb 	.word	0x08007cdb
 8005598:	08007cec 	.word	0x08007cec

0800559c <__multiply>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	4617      	mov	r7, r2
 80055a2:	690a      	ldr	r2, [r1, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4689      	mov	r9, r1
 80055a8:	429a      	cmp	r2, r3
 80055aa:	bfa2      	ittt	ge
 80055ac:	463b      	movge	r3, r7
 80055ae:	460f      	movge	r7, r1
 80055b0:	4699      	movge	r9, r3
 80055b2:	693d      	ldr	r5, [r7, #16]
 80055b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	eb05 060a 	add.w	r6, r5, sl
 80055c0:	42b3      	cmp	r3, r6
 80055c2:	b085      	sub	sp, #20
 80055c4:	bfb8      	it	lt
 80055c6:	3101      	addlt	r1, #1
 80055c8:	f7ff fe94 	bl	80052f4 <_Balloc>
 80055cc:	b930      	cbnz	r0, 80055dc <__multiply+0x40>
 80055ce:	4602      	mov	r2, r0
 80055d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80055d4:	4b40      	ldr	r3, [pc, #256]	@ (80056d8 <__multiply+0x13c>)
 80055d6:	4841      	ldr	r0, [pc, #260]	@ (80056dc <__multiply+0x140>)
 80055d8:	f001 fbf8 	bl	8006dcc <__assert_func>
 80055dc:	f100 0414 	add.w	r4, r0, #20
 80055e0:	4623      	mov	r3, r4
 80055e2:	2200      	movs	r2, #0
 80055e4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80055e8:	4573      	cmp	r3, lr
 80055ea:	d320      	bcc.n	800562e <__multiply+0x92>
 80055ec:	f107 0814 	add.w	r8, r7, #20
 80055f0:	f109 0114 	add.w	r1, r9, #20
 80055f4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80055f8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80055fc:	9302      	str	r3, [sp, #8]
 80055fe:	1beb      	subs	r3, r5, r7
 8005600:	3b15      	subs	r3, #21
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	3304      	adds	r3, #4
 8005608:	3715      	adds	r7, #21
 800560a:	42bd      	cmp	r5, r7
 800560c:	bf38      	it	cc
 800560e:	2304      	movcc	r3, #4
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	9b02      	ldr	r3, [sp, #8]
 8005614:	9103      	str	r1, [sp, #12]
 8005616:	428b      	cmp	r3, r1
 8005618:	d80c      	bhi.n	8005634 <__multiply+0x98>
 800561a:	2e00      	cmp	r6, #0
 800561c:	dd03      	ble.n	8005626 <__multiply+0x8a>
 800561e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005622:	2b00      	cmp	r3, #0
 8005624:	d055      	beq.n	80056d2 <__multiply+0x136>
 8005626:	6106      	str	r6, [r0, #16]
 8005628:	b005      	add	sp, #20
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	f843 2b04 	str.w	r2, [r3], #4
 8005632:	e7d9      	b.n	80055e8 <__multiply+0x4c>
 8005634:	f8b1 a000 	ldrh.w	sl, [r1]
 8005638:	f1ba 0f00 	cmp.w	sl, #0
 800563c:	d01f      	beq.n	800567e <__multiply+0xe2>
 800563e:	46c4      	mov	ip, r8
 8005640:	46a1      	mov	r9, r4
 8005642:	2700      	movs	r7, #0
 8005644:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005648:	f8d9 3000 	ldr.w	r3, [r9]
 800564c:	fa1f fb82 	uxth.w	fp, r2
 8005650:	b29b      	uxth	r3, r3
 8005652:	fb0a 330b 	mla	r3, sl, fp, r3
 8005656:	443b      	add	r3, r7
 8005658:	f8d9 7000 	ldr.w	r7, [r9]
 800565c:	0c12      	lsrs	r2, r2, #16
 800565e:	0c3f      	lsrs	r7, r7, #16
 8005660:	fb0a 7202 	mla	r2, sl, r2, r7
 8005664:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800566e:	4565      	cmp	r5, ip
 8005670:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005674:	f849 3b04 	str.w	r3, [r9], #4
 8005678:	d8e4      	bhi.n	8005644 <__multiply+0xa8>
 800567a:	9b01      	ldr	r3, [sp, #4]
 800567c:	50e7      	str	r7, [r4, r3]
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	3104      	adds	r1, #4
 8005682:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005686:	f1b9 0f00 	cmp.w	r9, #0
 800568a:	d020      	beq.n	80056ce <__multiply+0x132>
 800568c:	4647      	mov	r7, r8
 800568e:	46a4      	mov	ip, r4
 8005690:	f04f 0a00 	mov.w	sl, #0
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	f8b7 b000 	ldrh.w	fp, [r7]
 800569a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	fb09 220b 	mla	r2, r9, fp, r2
 80056a4:	4452      	add	r2, sl
 80056a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056aa:	f84c 3b04 	str.w	r3, [ip], #4
 80056ae:	f857 3b04 	ldr.w	r3, [r7], #4
 80056b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056b6:	f8bc 3000 	ldrh.w	r3, [ip]
 80056ba:	42bd      	cmp	r5, r7
 80056bc:	fb09 330a 	mla	r3, r9, sl, r3
 80056c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80056c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056c8:	d8e5      	bhi.n	8005696 <__multiply+0xfa>
 80056ca:	9a01      	ldr	r2, [sp, #4]
 80056cc:	50a3      	str	r3, [r4, r2]
 80056ce:	3404      	adds	r4, #4
 80056d0:	e79f      	b.n	8005612 <__multiply+0x76>
 80056d2:	3e01      	subs	r6, #1
 80056d4:	e7a1      	b.n	800561a <__multiply+0x7e>
 80056d6:	bf00      	nop
 80056d8:	08007cdb 	.word	0x08007cdb
 80056dc:	08007cec 	.word	0x08007cec

080056e0 <__pow5mult>:
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	4615      	mov	r5, r2
 80056e6:	f012 0203 	ands.w	r2, r2, #3
 80056ea:	4607      	mov	r7, r0
 80056ec:	460e      	mov	r6, r1
 80056ee:	d007      	beq.n	8005700 <__pow5mult+0x20>
 80056f0:	4c25      	ldr	r4, [pc, #148]	@ (8005788 <__pow5mult+0xa8>)
 80056f2:	3a01      	subs	r2, #1
 80056f4:	2300      	movs	r3, #0
 80056f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056fa:	f7ff fe5d 	bl	80053b8 <__multadd>
 80056fe:	4606      	mov	r6, r0
 8005700:	10ad      	asrs	r5, r5, #2
 8005702:	d03d      	beq.n	8005780 <__pow5mult+0xa0>
 8005704:	69fc      	ldr	r4, [r7, #28]
 8005706:	b97c      	cbnz	r4, 8005728 <__pow5mult+0x48>
 8005708:	2010      	movs	r0, #16
 800570a:	f7ff fd3d 	bl	8005188 <malloc>
 800570e:	4602      	mov	r2, r0
 8005710:	61f8      	str	r0, [r7, #28]
 8005712:	b928      	cbnz	r0, 8005720 <__pow5mult+0x40>
 8005714:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005718:	4b1c      	ldr	r3, [pc, #112]	@ (800578c <__pow5mult+0xac>)
 800571a:	481d      	ldr	r0, [pc, #116]	@ (8005790 <__pow5mult+0xb0>)
 800571c:	f001 fb56 	bl	8006dcc <__assert_func>
 8005720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005724:	6004      	str	r4, [r0, #0]
 8005726:	60c4      	str	r4, [r0, #12]
 8005728:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800572c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005730:	b94c      	cbnz	r4, 8005746 <__pow5mult+0x66>
 8005732:	f240 2171 	movw	r1, #625	@ 0x271
 8005736:	4638      	mov	r0, r7
 8005738:	f7ff ff1a 	bl	8005570 <__i2b>
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	f8c8 0008 	str.w	r0, [r8, #8]
 8005744:	6003      	str	r3, [r0, #0]
 8005746:	f04f 0900 	mov.w	r9, #0
 800574a:	07eb      	lsls	r3, r5, #31
 800574c:	d50a      	bpl.n	8005764 <__pow5mult+0x84>
 800574e:	4631      	mov	r1, r6
 8005750:	4622      	mov	r2, r4
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ff22 	bl	800559c <__multiply>
 8005758:	4680      	mov	r8, r0
 800575a:	4631      	mov	r1, r6
 800575c:	4638      	mov	r0, r7
 800575e:	f7ff fe09 	bl	8005374 <_Bfree>
 8005762:	4646      	mov	r6, r8
 8005764:	106d      	asrs	r5, r5, #1
 8005766:	d00b      	beq.n	8005780 <__pow5mult+0xa0>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	b938      	cbnz	r0, 800577c <__pow5mult+0x9c>
 800576c:	4622      	mov	r2, r4
 800576e:	4621      	mov	r1, r4
 8005770:	4638      	mov	r0, r7
 8005772:	f7ff ff13 	bl	800559c <__multiply>
 8005776:	6020      	str	r0, [r4, #0]
 8005778:	f8c0 9000 	str.w	r9, [r0]
 800577c:	4604      	mov	r4, r0
 800577e:	e7e4      	b.n	800574a <__pow5mult+0x6a>
 8005780:	4630      	mov	r0, r6
 8005782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005786:	bf00      	nop
 8005788:	08007dfc 	.word	0x08007dfc
 800578c:	08007c6c 	.word	0x08007c6c
 8005790:	08007cec 	.word	0x08007cec

08005794 <__lshift>:
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	460c      	mov	r4, r1
 800579a:	4607      	mov	r7, r0
 800579c:	4691      	mov	r9, r2
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6849      	ldr	r1, [r1, #4]
 80057a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057ac:	f108 0601 	add.w	r6, r8, #1
 80057b0:	42b3      	cmp	r3, r6
 80057b2:	db0b      	blt.n	80057cc <__lshift+0x38>
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff fd9d 	bl	80052f4 <_Balloc>
 80057ba:	4605      	mov	r5, r0
 80057bc:	b948      	cbnz	r0, 80057d2 <__lshift+0x3e>
 80057be:	4602      	mov	r2, r0
 80057c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80057c4:	4b27      	ldr	r3, [pc, #156]	@ (8005864 <__lshift+0xd0>)
 80057c6:	4828      	ldr	r0, [pc, #160]	@ (8005868 <__lshift+0xd4>)
 80057c8:	f001 fb00 	bl	8006dcc <__assert_func>
 80057cc:	3101      	adds	r1, #1
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	e7ee      	b.n	80057b0 <__lshift+0x1c>
 80057d2:	2300      	movs	r3, #0
 80057d4:	f100 0114 	add.w	r1, r0, #20
 80057d8:	f100 0210 	add.w	r2, r0, #16
 80057dc:	4618      	mov	r0, r3
 80057de:	4553      	cmp	r3, sl
 80057e0:	db33      	blt.n	800584a <__lshift+0xb6>
 80057e2:	6920      	ldr	r0, [r4, #16]
 80057e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057e8:	f104 0314 	add.w	r3, r4, #20
 80057ec:	f019 091f 	ands.w	r9, r9, #31
 80057f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057f8:	d02b      	beq.n	8005852 <__lshift+0xbe>
 80057fa:	468a      	mov	sl, r1
 80057fc:	2200      	movs	r2, #0
 80057fe:	f1c9 0e20 	rsb	lr, r9, #32
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	fa00 f009 	lsl.w	r0, r0, r9
 8005808:	4310      	orrs	r0, r2
 800580a:	f84a 0b04 	str.w	r0, [sl], #4
 800580e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005812:	459c      	cmp	ip, r3
 8005814:	fa22 f20e 	lsr.w	r2, r2, lr
 8005818:	d8f3      	bhi.n	8005802 <__lshift+0x6e>
 800581a:	ebac 0304 	sub.w	r3, ip, r4
 800581e:	3b15      	subs	r3, #21
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	3304      	adds	r3, #4
 8005826:	f104 0015 	add.w	r0, r4, #21
 800582a:	4560      	cmp	r0, ip
 800582c:	bf88      	it	hi
 800582e:	2304      	movhi	r3, #4
 8005830:	50ca      	str	r2, [r1, r3]
 8005832:	b10a      	cbz	r2, 8005838 <__lshift+0xa4>
 8005834:	f108 0602 	add.w	r6, r8, #2
 8005838:	3e01      	subs	r6, #1
 800583a:	4638      	mov	r0, r7
 800583c:	4621      	mov	r1, r4
 800583e:	612e      	str	r6, [r5, #16]
 8005840:	f7ff fd98 	bl	8005374 <_Bfree>
 8005844:	4628      	mov	r0, r5
 8005846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584a:	f842 0f04 	str.w	r0, [r2, #4]!
 800584e:	3301      	adds	r3, #1
 8005850:	e7c5      	b.n	80057de <__lshift+0x4a>
 8005852:	3904      	subs	r1, #4
 8005854:	f853 2b04 	ldr.w	r2, [r3], #4
 8005858:	459c      	cmp	ip, r3
 800585a:	f841 2f04 	str.w	r2, [r1, #4]!
 800585e:	d8f9      	bhi.n	8005854 <__lshift+0xc0>
 8005860:	e7ea      	b.n	8005838 <__lshift+0xa4>
 8005862:	bf00      	nop
 8005864:	08007cdb 	.word	0x08007cdb
 8005868:	08007cec 	.word	0x08007cec

0800586c <__mcmp>:
 800586c:	4603      	mov	r3, r0
 800586e:	690a      	ldr	r2, [r1, #16]
 8005870:	6900      	ldr	r0, [r0, #16]
 8005872:	b530      	push	{r4, r5, lr}
 8005874:	1a80      	subs	r0, r0, r2
 8005876:	d10e      	bne.n	8005896 <__mcmp+0x2a>
 8005878:	3314      	adds	r3, #20
 800587a:	3114      	adds	r1, #20
 800587c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005880:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005884:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005888:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800588c:	4295      	cmp	r5, r2
 800588e:	d003      	beq.n	8005898 <__mcmp+0x2c>
 8005890:	d205      	bcs.n	800589e <__mcmp+0x32>
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	bd30      	pop	{r4, r5, pc}
 8005898:	42a3      	cmp	r3, r4
 800589a:	d3f3      	bcc.n	8005884 <__mcmp+0x18>
 800589c:	e7fb      	b.n	8005896 <__mcmp+0x2a>
 800589e:	2001      	movs	r0, #1
 80058a0:	e7f9      	b.n	8005896 <__mcmp+0x2a>
	...

080058a4 <__mdiff>:
 80058a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	4689      	mov	r9, r1
 80058aa:	4606      	mov	r6, r0
 80058ac:	4611      	mov	r1, r2
 80058ae:	4648      	mov	r0, r9
 80058b0:	4614      	mov	r4, r2
 80058b2:	f7ff ffdb 	bl	800586c <__mcmp>
 80058b6:	1e05      	subs	r5, r0, #0
 80058b8:	d112      	bne.n	80058e0 <__mdiff+0x3c>
 80058ba:	4629      	mov	r1, r5
 80058bc:	4630      	mov	r0, r6
 80058be:	f7ff fd19 	bl	80052f4 <_Balloc>
 80058c2:	4602      	mov	r2, r0
 80058c4:	b928      	cbnz	r0, 80058d2 <__mdiff+0x2e>
 80058c6:	f240 2137 	movw	r1, #567	@ 0x237
 80058ca:	4b3e      	ldr	r3, [pc, #248]	@ (80059c4 <__mdiff+0x120>)
 80058cc:	483e      	ldr	r0, [pc, #248]	@ (80059c8 <__mdiff+0x124>)
 80058ce:	f001 fa7d 	bl	8006dcc <__assert_func>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058d8:	4610      	mov	r0, r2
 80058da:	b003      	add	sp, #12
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	bfbc      	itt	lt
 80058e2:	464b      	movlt	r3, r9
 80058e4:	46a1      	movlt	r9, r4
 80058e6:	4630      	mov	r0, r6
 80058e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80058ec:	bfba      	itte	lt
 80058ee:	461c      	movlt	r4, r3
 80058f0:	2501      	movlt	r5, #1
 80058f2:	2500      	movge	r5, #0
 80058f4:	f7ff fcfe 	bl	80052f4 <_Balloc>
 80058f8:	4602      	mov	r2, r0
 80058fa:	b918      	cbnz	r0, 8005904 <__mdiff+0x60>
 80058fc:	f240 2145 	movw	r1, #581	@ 0x245
 8005900:	4b30      	ldr	r3, [pc, #192]	@ (80059c4 <__mdiff+0x120>)
 8005902:	e7e3      	b.n	80058cc <__mdiff+0x28>
 8005904:	f100 0b14 	add.w	fp, r0, #20
 8005908:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800590c:	f109 0310 	add.w	r3, r9, #16
 8005910:	60c5      	str	r5, [r0, #12]
 8005912:	f04f 0c00 	mov.w	ip, #0
 8005916:	f109 0514 	add.w	r5, r9, #20
 800591a:	46d9      	mov	r9, fp
 800591c:	6926      	ldr	r6, [r4, #16]
 800591e:	f104 0e14 	add.w	lr, r4, #20
 8005922:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005926:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005932:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005936:	b281      	uxth	r1, r0
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	fa1f f38a 	uxth.w	r3, sl
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	0c00      	lsrs	r0, r0, #16
 8005942:	4463      	add	r3, ip
 8005944:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005948:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005952:	4576      	cmp	r6, lr
 8005954:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005958:	f849 3b04 	str.w	r3, [r9], #4
 800595c:	d8e6      	bhi.n	800592c <__mdiff+0x88>
 800595e:	1b33      	subs	r3, r6, r4
 8005960:	3b15      	subs	r3, #21
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	3415      	adds	r4, #21
 8005968:	3304      	adds	r3, #4
 800596a:	42a6      	cmp	r6, r4
 800596c:	bf38      	it	cc
 800596e:	2304      	movcc	r3, #4
 8005970:	441d      	add	r5, r3
 8005972:	445b      	add	r3, fp
 8005974:	461e      	mov	r6, r3
 8005976:	462c      	mov	r4, r5
 8005978:	4544      	cmp	r4, r8
 800597a:	d30e      	bcc.n	800599a <__mdiff+0xf6>
 800597c:	f108 0103 	add.w	r1, r8, #3
 8005980:	1b49      	subs	r1, r1, r5
 8005982:	f021 0103 	bic.w	r1, r1, #3
 8005986:	3d03      	subs	r5, #3
 8005988:	45a8      	cmp	r8, r5
 800598a:	bf38      	it	cc
 800598c:	2100      	movcc	r1, #0
 800598e:	440b      	add	r3, r1
 8005990:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005994:	b199      	cbz	r1, 80059be <__mdiff+0x11a>
 8005996:	6117      	str	r7, [r2, #16]
 8005998:	e79e      	b.n	80058d8 <__mdiff+0x34>
 800599a:	46e6      	mov	lr, ip
 800599c:	f854 1b04 	ldr.w	r1, [r4], #4
 80059a0:	fa1f fc81 	uxth.w	ip, r1
 80059a4:	44f4      	add	ip, lr
 80059a6:	0c08      	lsrs	r0, r1, #16
 80059a8:	4471      	add	r1, lr
 80059aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059ae:	b289      	uxth	r1, r1
 80059b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059b8:	f846 1b04 	str.w	r1, [r6], #4
 80059bc:	e7dc      	b.n	8005978 <__mdiff+0xd4>
 80059be:	3f01      	subs	r7, #1
 80059c0:	e7e6      	b.n	8005990 <__mdiff+0xec>
 80059c2:	bf00      	nop
 80059c4:	08007cdb 	.word	0x08007cdb
 80059c8:	08007cec 	.word	0x08007cec

080059cc <__ulp>:
 80059cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <__ulp+0x3c>)
 80059ce:	400b      	ands	r3, r1
 80059d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dc08      	bgt.n	80059ea <__ulp+0x1e>
 80059d8:	425b      	negs	r3, r3
 80059da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80059de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80059e2:	da04      	bge.n	80059ee <__ulp+0x22>
 80059e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80059e8:	4113      	asrs	r3, r2
 80059ea:	2200      	movs	r2, #0
 80059ec:	e008      	b.n	8005a00 <__ulp+0x34>
 80059ee:	f1a2 0314 	sub.w	r3, r2, #20
 80059f2:	2b1e      	cmp	r3, #30
 80059f4:	bfd6      	itet	le
 80059f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80059fa:	2201      	movgt	r2, #1
 80059fc:	40da      	lsrle	r2, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	7ff00000 	.word	0x7ff00000

08005a0c <__b2d>:
 8005a0c:	6902      	ldr	r2, [r0, #16]
 8005a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a10:	f100 0614 	add.w	r6, r0, #20
 8005a14:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005a18:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005a1c:	4f1e      	ldr	r7, [pc, #120]	@ (8005a98 <__b2d+0x8c>)
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff fd5a 	bl	80054d8 <__hi0bits>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f1c0 0020 	rsb	r0, r0, #32
 8005a2a:	2b0a      	cmp	r3, #10
 8005a2c:	f1a2 0504 	sub.w	r5, r2, #4
 8005a30:	6008      	str	r0, [r1, #0]
 8005a32:	dc12      	bgt.n	8005a5a <__b2d+0x4e>
 8005a34:	42ae      	cmp	r6, r5
 8005a36:	bf2c      	ite	cs
 8005a38:	2200      	movcs	r2, #0
 8005a3a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005a3e:	f1c3 0c0b 	rsb	ip, r3, #11
 8005a42:	3315      	adds	r3, #21
 8005a44:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005a48:	fa04 f303 	lsl.w	r3, r4, r3
 8005a4c:	fa22 f20c 	lsr.w	r2, r2, ip
 8005a50:	ea4e 0107 	orr.w	r1, lr, r7
 8005a54:	431a      	orrs	r2, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a5a:	42ae      	cmp	r6, r5
 8005a5c:	bf36      	itet	cc
 8005a5e:	f1a2 0508 	subcc.w	r5, r2, #8
 8005a62:	2200      	movcs	r2, #0
 8005a64:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005a68:	3b0b      	subs	r3, #11
 8005a6a:	d012      	beq.n	8005a92 <__b2d+0x86>
 8005a6c:	f1c3 0720 	rsb	r7, r3, #32
 8005a70:	fa22 f107 	lsr.w	r1, r2, r7
 8005a74:	409c      	lsls	r4, r3
 8005a76:	430c      	orrs	r4, r1
 8005a78:	42b5      	cmp	r5, r6
 8005a7a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005a7e:	bf94      	ite	ls
 8005a80:	2400      	movls	r4, #0
 8005a82:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005a86:	409a      	lsls	r2, r3
 8005a88:	40fc      	lsrs	r4, r7
 8005a8a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005a8e:	4322      	orrs	r2, r4
 8005a90:	e7e1      	b.n	8005a56 <__b2d+0x4a>
 8005a92:	ea44 0107 	orr.w	r1, r4, r7
 8005a96:	e7de      	b.n	8005a56 <__b2d+0x4a>
 8005a98:	3ff00000 	.word	0x3ff00000

08005a9c <__d2b>:
 8005a9c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	4690      	mov	r8, r2
 8005aa4:	4699      	mov	r9, r3
 8005aa6:	9e08      	ldr	r6, [sp, #32]
 8005aa8:	f7ff fc24 	bl	80052f4 <_Balloc>
 8005aac:	4604      	mov	r4, r0
 8005aae:	b930      	cbnz	r0, 8005abe <__d2b+0x22>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ab6:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <__d2b+0xa8>)
 8005ab8:	4823      	ldr	r0, [pc, #140]	@ (8005b48 <__d2b+0xac>)
 8005aba:	f001 f987 	bl	8006dcc <__assert_func>
 8005abe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ac2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ac6:	b10d      	cbz	r5, 8005acc <__d2b+0x30>
 8005ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	f1b8 0300 	subs.w	r3, r8, #0
 8005ad2:	d024      	beq.n	8005b1e <__d2b+0x82>
 8005ad4:	4668      	mov	r0, sp
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	f7ff fd1d 	bl	8005516 <__lo0bits>
 8005adc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ae0:	b1d8      	cbz	r0, 8005b1a <__d2b+0x7e>
 8005ae2:	f1c0 0320 	rsb	r3, r0, #32
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	430b      	orrs	r3, r1
 8005aec:	40c2      	lsrs	r2, r0
 8005aee:	6163      	str	r3, [r4, #20]
 8005af0:	9201      	str	r2, [sp, #4]
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2201      	moveq	r2, #1
 8005afa:	2202      	movne	r2, #2
 8005afc:	61a3      	str	r3, [r4, #24]
 8005afe:	6122      	str	r2, [r4, #16]
 8005b00:	b1ad      	cbz	r5, 8005b2e <__d2b+0x92>
 8005b02:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b06:	4405      	add	r5, r0
 8005b08:	6035      	str	r5, [r6, #0]
 8005b0a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b10:	6018      	str	r0, [r3, #0]
 8005b12:	4620      	mov	r0, r4
 8005b14:	b002      	add	sp, #8
 8005b16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005b1a:	6161      	str	r1, [r4, #20]
 8005b1c:	e7e9      	b.n	8005af2 <__d2b+0x56>
 8005b1e:	a801      	add	r0, sp, #4
 8005b20:	f7ff fcf9 	bl	8005516 <__lo0bits>
 8005b24:	9b01      	ldr	r3, [sp, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	6163      	str	r3, [r4, #20]
 8005b2a:	3020      	adds	r0, #32
 8005b2c:	e7e7      	b.n	8005afe <__d2b+0x62>
 8005b2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b36:	6030      	str	r0, [r6, #0]
 8005b38:	6918      	ldr	r0, [r3, #16]
 8005b3a:	f7ff fccd 	bl	80054d8 <__hi0bits>
 8005b3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b42:	e7e4      	b.n	8005b0e <__d2b+0x72>
 8005b44:	08007cdb 	.word	0x08007cdb
 8005b48:	08007cec 	.word	0x08007cec

08005b4c <__ratio>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	b085      	sub	sp, #20
 8005b52:	e9cd 1000 	strd	r1, r0, [sp]
 8005b56:	a902      	add	r1, sp, #8
 8005b58:	f7ff ff58 	bl	8005a0c <__b2d>
 8005b5c:	468b      	mov	fp, r1
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460f      	mov	r7, r1
 8005b62:	9800      	ldr	r0, [sp, #0]
 8005b64:	a903      	add	r1, sp, #12
 8005b66:	f7ff ff51 	bl	8005a0c <__b2d>
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	4689      	mov	r9, r1
 8005b70:	6919      	ldr	r1, [r3, #16]
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	4604      	mov	r4, r0
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	4630      	mov	r0, r6
 8005b7a:	1ac9      	subs	r1, r1, r3
 8005b7c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfcd      	iteet	gt
 8005b8a:	463a      	movgt	r2, r7
 8005b8c:	462a      	movle	r2, r5
 8005b8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005b92:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005b96:	bfd8      	it	le
 8005b98:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	f7fa fdc3 	bl	800072c <__aeabi_ddiv>
 8005ba6:	b005      	add	sp, #20
 8005ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bac <__copybits>:
 8005bac:	3901      	subs	r1, #1
 8005bae:	b570      	push	{r4, r5, r6, lr}
 8005bb0:	1149      	asrs	r1, r1, #5
 8005bb2:	6914      	ldr	r4, [r2, #16]
 8005bb4:	3101      	adds	r1, #1
 8005bb6:	f102 0314 	add.w	r3, r2, #20
 8005bba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005bbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005bc2:	1f05      	subs	r5, r0, #4
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d30c      	bcc.n	8005be2 <__copybits+0x36>
 8005bc8:	1aa3      	subs	r3, r4, r2
 8005bca:	3b11      	subs	r3, #17
 8005bcc:	f023 0303 	bic.w	r3, r3, #3
 8005bd0:	3211      	adds	r2, #17
 8005bd2:	42a2      	cmp	r2, r4
 8005bd4:	bf88      	it	hi
 8005bd6:	2300      	movhi	r3, #0
 8005bd8:	4418      	add	r0, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4288      	cmp	r0, r1
 8005bde:	d305      	bcc.n	8005bec <__copybits+0x40>
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	f853 6b04 	ldr.w	r6, [r3], #4
 8005be6:	f845 6f04 	str.w	r6, [r5, #4]!
 8005bea:	e7eb      	b.n	8005bc4 <__copybits+0x18>
 8005bec:	f840 3b04 	str.w	r3, [r0], #4
 8005bf0:	e7f4      	b.n	8005bdc <__copybits+0x30>

08005bf2 <__any_on>:
 8005bf2:	f100 0214 	add.w	r2, r0, #20
 8005bf6:	6900      	ldr	r0, [r0, #16]
 8005bf8:	114b      	asrs	r3, r1, #5
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	db11      	blt.n	8005c24 <__any_on+0x32>
 8005c00:	dd0a      	ble.n	8005c18 <__any_on+0x26>
 8005c02:	f011 011f 	ands.w	r1, r1, #31
 8005c06:	d007      	beq.n	8005c18 <__any_on+0x26>
 8005c08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005c0c:	fa24 f001 	lsr.w	r0, r4, r1
 8005c10:	fa00 f101 	lsl.w	r1, r0, r1
 8005c14:	428c      	cmp	r4, r1
 8005c16:	d10b      	bne.n	8005c30 <__any_on+0x3e>
 8005c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d803      	bhi.n	8005c28 <__any_on+0x36>
 8005c20:	2000      	movs	r0, #0
 8005c22:	bd10      	pop	{r4, pc}
 8005c24:	4603      	mov	r3, r0
 8005c26:	e7f7      	b.n	8005c18 <__any_on+0x26>
 8005c28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d0f5      	beq.n	8005c1c <__any_on+0x2a>
 8005c30:	2001      	movs	r0, #1
 8005c32:	e7f6      	b.n	8005c22 <__any_on+0x30>

08005c34 <sulp>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	460f      	mov	r7, r1
 8005c3a:	4690      	mov	r8, r2
 8005c3c:	f7ff fec6 	bl	80059cc <__ulp>
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	d011      	beq.n	8005c6e <sulp+0x3a>
 8005c4a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005c4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dd0b      	ble.n	8005c6e <sulp+0x3a>
 8005c56:	2400      	movs	r4, #0
 8005c58:	051b      	lsls	r3, r3, #20
 8005c5a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005c5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005c62:	4622      	mov	r2, r4
 8005c64:	462b      	mov	r3, r5
 8005c66:	f7fa fc37 	bl	80004d8 <__aeabi_dmul>
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005c78 <_strtod_l>:
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	b09f      	sub	sp, #124	@ 0x7c
 8005c7e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005c80:	2200      	movs	r2, #0
 8005c82:	460c      	mov	r4, r1
 8005c84:	921a      	str	r2, [sp, #104]	@ 0x68
 8005c86:	f04f 0a00 	mov.w	sl, #0
 8005c8a:	f04f 0b00 	mov.w	fp, #0
 8005c8e:	460a      	mov	r2, r1
 8005c90:	9005      	str	r0, [sp, #20]
 8005c92:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c94:	7811      	ldrb	r1, [r2, #0]
 8005c96:	292b      	cmp	r1, #43	@ 0x2b
 8005c98:	d048      	beq.n	8005d2c <_strtod_l+0xb4>
 8005c9a:	d836      	bhi.n	8005d0a <_strtod_l+0x92>
 8005c9c:	290d      	cmp	r1, #13
 8005c9e:	d830      	bhi.n	8005d02 <_strtod_l+0x8a>
 8005ca0:	2908      	cmp	r1, #8
 8005ca2:	d830      	bhi.n	8005d06 <_strtod_l+0x8e>
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	d039      	beq.n	8005d1c <_strtod_l+0xa4>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005cae:	782a      	ldrb	r2, [r5, #0]
 8005cb0:	2a30      	cmp	r2, #48	@ 0x30
 8005cb2:	f040 80b0 	bne.w	8005e16 <_strtod_l+0x19e>
 8005cb6:	786a      	ldrb	r2, [r5, #1]
 8005cb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005cbc:	2a58      	cmp	r2, #88	@ 0x58
 8005cbe:	d16c      	bne.n	8005d9a <_strtod_l+0x122>
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cc4:	4a8f      	ldr	r2, [pc, #572]	@ (8005f04 <_strtod_l+0x28c>)
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	ab1a      	add	r3, sp, #104	@ 0x68
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	9805      	ldr	r0, [sp, #20]
 8005cce:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005cd0:	a919      	add	r1, sp, #100	@ 0x64
 8005cd2:	f001 f915 	bl	8006f00 <__gethex>
 8005cd6:	f010 060f 	ands.w	r6, r0, #15
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d005      	beq.n	8005cea <_strtod_l+0x72>
 8005cde:	2e06      	cmp	r6, #6
 8005ce0:	d126      	bne.n	8005d30 <_strtod_l+0xb8>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ce8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f040 8582 	bne.w	80067f6 <_strtod_l+0xb7e>
 8005cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cf4:	b1bb      	cbz	r3, 8005d26 <_strtod_l+0xae>
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005cfc:	b01f      	add	sp, #124	@ 0x7c
 8005cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d02:	2920      	cmp	r1, #32
 8005d04:	d1d0      	bne.n	8005ca8 <_strtod_l+0x30>
 8005d06:	3201      	adds	r2, #1
 8005d08:	e7c3      	b.n	8005c92 <_strtod_l+0x1a>
 8005d0a:	292d      	cmp	r1, #45	@ 0x2d
 8005d0c:	d1cc      	bne.n	8005ca8 <_strtod_l+0x30>
 8005d0e:	2101      	movs	r1, #1
 8005d10:	910e      	str	r1, [sp, #56]	@ 0x38
 8005d12:	1c51      	adds	r1, r2, #1
 8005d14:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d16:	7852      	ldrb	r2, [r2, #1]
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	d1c7      	bne.n	8005cac <_strtod_l+0x34>
 8005d1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d1e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 8566 	bne.w	80067f2 <_strtod_l+0xb7a>
 8005d26:	4650      	mov	r0, sl
 8005d28:	4659      	mov	r1, fp
 8005d2a:	e7e7      	b.n	8005cfc <_strtod_l+0x84>
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	e7ef      	b.n	8005d10 <_strtod_l+0x98>
 8005d30:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005d32:	b13a      	cbz	r2, 8005d44 <_strtod_l+0xcc>
 8005d34:	2135      	movs	r1, #53	@ 0x35
 8005d36:	a81c      	add	r0, sp, #112	@ 0x70
 8005d38:	f7ff ff38 	bl	8005bac <__copybits>
 8005d3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d3e:	9805      	ldr	r0, [sp, #20]
 8005d40:	f7ff fb18 	bl	8005374 <_Bfree>
 8005d44:	3e01      	subs	r6, #1
 8005d46:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005d48:	2e04      	cmp	r6, #4
 8005d4a:	d806      	bhi.n	8005d5a <_strtod_l+0xe2>
 8005d4c:	e8df f006 	tbb	[pc, r6]
 8005d50:	201d0314 	.word	0x201d0314
 8005d54:	14          	.byte	0x14
 8005d55:	00          	.byte	0x00
 8005d56:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005d5a:	05e1      	lsls	r1, r4, #23
 8005d5c:	bf48      	it	mi
 8005d5e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005d62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005d66:	0d1b      	lsrs	r3, r3, #20
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1bd      	bne.n	8005cea <_strtod_l+0x72>
 8005d6e:	f7fe fb25 	bl	80043bc <__errno>
 8005d72:	2322      	movs	r3, #34	@ 0x22
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	e7b8      	b.n	8005cea <_strtod_l+0x72>
 8005d78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005d7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005d80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d84:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d88:	e7e7      	b.n	8005d5a <_strtod_l+0xe2>
 8005d8a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005f08 <_strtod_l+0x290>
 8005d8e:	e7e4      	b.n	8005d5a <_strtod_l+0xe2>
 8005d90:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005d94:	f04f 3aff 	mov.w	sl, #4294967295
 8005d98:	e7df      	b.n	8005d5a <_strtod_l+0xe2>
 8005d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b30      	cmp	r3, #48	@ 0x30
 8005da4:	d0f9      	beq.n	8005d9a <_strtod_l+0x122>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d09f      	beq.n	8005cea <_strtod_l+0x72>
 8005daa:	2301      	movs	r3, #1
 8005dac:	2700      	movs	r7, #0
 8005dae:	220a      	movs	r2, #10
 8005db0:	46b9      	mov	r9, r7
 8005db2:	9308      	str	r3, [sp, #32]
 8005db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db6:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005dba:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005dbc:	7805      	ldrb	r5, [r0, #0]
 8005dbe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005dc2:	b2d9      	uxtb	r1, r3
 8005dc4:	2909      	cmp	r1, #9
 8005dc6:	d928      	bls.n	8005e1a <_strtod_l+0x1a2>
 8005dc8:	2201      	movs	r2, #1
 8005dca:	4950      	ldr	r1, [pc, #320]	@ (8005f0c <_strtod_l+0x294>)
 8005dcc:	f000 ffc8 	bl	8006d60 <strncmp>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d032      	beq.n	8005e3a <_strtod_l+0x1c2>
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4603      	mov	r3, r0
 8005dda:	464d      	mov	r5, r9
 8005ddc:	900a      	str	r0, [sp, #40]	@ 0x28
 8005dde:	2a65      	cmp	r2, #101	@ 0x65
 8005de0:	d001      	beq.n	8005de6 <_strtod_l+0x16e>
 8005de2:	2a45      	cmp	r2, #69	@ 0x45
 8005de4:	d114      	bne.n	8005e10 <_strtod_l+0x198>
 8005de6:	b91d      	cbnz	r5, 8005df0 <_strtod_l+0x178>
 8005de8:	9a08      	ldr	r2, [sp, #32]
 8005dea:	4302      	orrs	r2, r0
 8005dec:	d096      	beq.n	8005d1c <_strtod_l+0xa4>
 8005dee:	2500      	movs	r5, #0
 8005df0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005df2:	1c62      	adds	r2, r4, #1
 8005df4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005df6:	7862      	ldrb	r2, [r4, #1]
 8005df8:	2a2b      	cmp	r2, #43	@ 0x2b
 8005dfa:	d07a      	beq.n	8005ef2 <_strtod_l+0x27a>
 8005dfc:	2a2d      	cmp	r2, #45	@ 0x2d
 8005dfe:	d07e      	beq.n	8005efe <_strtod_l+0x286>
 8005e00:	f04f 0c00 	mov.w	ip, #0
 8005e04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005e08:	2909      	cmp	r1, #9
 8005e0a:	f240 8085 	bls.w	8005f18 <_strtod_l+0x2a0>
 8005e0e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005e10:	f04f 0800 	mov.w	r8, #0
 8005e14:	e0a5      	b.n	8005f62 <_strtod_l+0x2ea>
 8005e16:	2300      	movs	r3, #0
 8005e18:	e7c8      	b.n	8005dac <_strtod_l+0x134>
 8005e1a:	f1b9 0f08 	cmp.w	r9, #8
 8005e1e:	bfd8      	it	le
 8005e20:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005e22:	f100 0001 	add.w	r0, r0, #1
 8005e26:	bfd6      	itet	le
 8005e28:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e2c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005e30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005e32:	f109 0901 	add.w	r9, r9, #1
 8005e36:	9019      	str	r0, [sp, #100]	@ 0x64
 8005e38:	e7bf      	b.n	8005dba <_strtod_l+0x142>
 8005e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e40:	785a      	ldrb	r2, [r3, #1]
 8005e42:	f1b9 0f00 	cmp.w	r9, #0
 8005e46:	d03b      	beq.n	8005ec0 <_strtod_l+0x248>
 8005e48:	464d      	mov	r5, r9
 8005e4a:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e4c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	d912      	bls.n	8005e7a <_strtod_l+0x202>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e7c2      	b.n	8005dde <_strtod_l+0x166>
 8005e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e60:	785a      	ldrb	r2, [r3, #1]
 8005e62:	2a30      	cmp	r2, #48	@ 0x30
 8005e64:	d0f8      	beq.n	8005e58 <_strtod_l+0x1e0>
 8005e66:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	f200 84c8 	bhi.w	8006800 <_strtod_l+0xb88>
 8005e70:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e72:	2000      	movs	r0, #0
 8005e74:	4605      	mov	r5, r0
 8005e76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e78:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e7a:	3a30      	subs	r2, #48	@ 0x30
 8005e7c:	f100 0301 	add.w	r3, r0, #1
 8005e80:	d018      	beq.n	8005eb4 <_strtod_l+0x23c>
 8005e82:	462e      	mov	r6, r5
 8005e84:	f04f 0e0a 	mov.w	lr, #10
 8005e88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e8a:	4419      	add	r1, r3
 8005e8c:	910a      	str	r1, [sp, #40]	@ 0x28
 8005e8e:	1c71      	adds	r1, r6, #1
 8005e90:	eba1 0c05 	sub.w	ip, r1, r5
 8005e94:	4563      	cmp	r3, ip
 8005e96:	dc15      	bgt.n	8005ec4 <_strtod_l+0x24c>
 8005e98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005e9c:	182b      	adds	r3, r5, r0
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	f105 0501 	add.w	r5, r5, #1
 8005ea4:	4405      	add	r5, r0
 8005ea6:	dc1a      	bgt.n	8005ede <_strtod_l+0x266>
 8005ea8:	230a      	movs	r3, #10
 8005eaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005eac:	fb03 2301 	mla	r3, r3, r1, r2
 8005eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	1c51      	adds	r1, r2, #1
 8005eba:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ebc:	7852      	ldrb	r2, [r2, #1]
 8005ebe:	e7c5      	b.n	8005e4c <_strtod_l+0x1d4>
 8005ec0:	4648      	mov	r0, r9
 8005ec2:	e7ce      	b.n	8005e62 <_strtod_l+0x1ea>
 8005ec4:	2e08      	cmp	r6, #8
 8005ec6:	dc05      	bgt.n	8005ed4 <_strtod_l+0x25c>
 8005ec8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005eca:	fb0e f606 	mul.w	r6, lr, r6
 8005ece:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005ed0:	460e      	mov	r6, r1
 8005ed2:	e7dc      	b.n	8005e8e <_strtod_l+0x216>
 8005ed4:	2910      	cmp	r1, #16
 8005ed6:	bfd8      	it	le
 8005ed8:	fb0e f707 	mulle.w	r7, lr, r7
 8005edc:	e7f8      	b.n	8005ed0 <_strtod_l+0x258>
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	bfdc      	itt	le
 8005ee2:	230a      	movle	r3, #10
 8005ee4:	fb03 2707 	mlale	r7, r3, r7, r2
 8005ee8:	e7e3      	b.n	8005eb2 <_strtod_l+0x23a>
 8005eea:	2300      	movs	r3, #0
 8005eec:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e77a      	b.n	8005de8 <_strtod_l+0x170>
 8005ef2:	f04f 0c00 	mov.w	ip, #0
 8005ef6:	1ca2      	adds	r2, r4, #2
 8005ef8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005efa:	78a2      	ldrb	r2, [r4, #2]
 8005efc:	e782      	b.n	8005e04 <_strtod_l+0x18c>
 8005efe:	f04f 0c01 	mov.w	ip, #1
 8005f02:	e7f8      	b.n	8005ef6 <_strtod_l+0x27e>
 8005f04:	08007f0c 	.word	0x08007f0c
 8005f08:	7ff00000 	.word	0x7ff00000
 8005f0c:	08007d45 	.word	0x08007d45
 8005f10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f12:	1c51      	adds	r1, r2, #1
 8005f14:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f16:	7852      	ldrb	r2, [r2, #1]
 8005f18:	2a30      	cmp	r2, #48	@ 0x30
 8005f1a:	d0f9      	beq.n	8005f10 <_strtod_l+0x298>
 8005f1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005f20:	2908      	cmp	r1, #8
 8005f22:	f63f af75 	bhi.w	8005e10 <_strtod_l+0x198>
 8005f26:	f04f 080a 	mov.w	r8, #10
 8005f2a:	3a30      	subs	r2, #48	@ 0x30
 8005f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f30:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005f32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f34:	1c56      	adds	r6, r2, #1
 8005f36:	9619      	str	r6, [sp, #100]	@ 0x64
 8005f38:	7852      	ldrb	r2, [r2, #1]
 8005f3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005f3e:	f1be 0f09 	cmp.w	lr, #9
 8005f42:	d939      	bls.n	8005fb8 <_strtod_l+0x340>
 8005f44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f46:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005f4a:	1a76      	subs	r6, r6, r1
 8005f4c:	2e08      	cmp	r6, #8
 8005f4e:	dc03      	bgt.n	8005f58 <_strtod_l+0x2e0>
 8005f50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f52:	4588      	cmp	r8, r1
 8005f54:	bfa8      	it	ge
 8005f56:	4688      	movge	r8, r1
 8005f58:	f1bc 0f00 	cmp.w	ip, #0
 8005f5c:	d001      	beq.n	8005f62 <_strtod_l+0x2ea>
 8005f5e:	f1c8 0800 	rsb	r8, r8, #0
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	d14e      	bne.n	8006004 <_strtod_l+0x38c>
 8005f66:	9908      	ldr	r1, [sp, #32]
 8005f68:	4308      	orrs	r0, r1
 8005f6a:	f47f aebe 	bne.w	8005cea <_strtod_l+0x72>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f47f aed4 	bne.w	8005d1c <_strtod_l+0xa4>
 8005f74:	2a69      	cmp	r2, #105	@ 0x69
 8005f76:	d028      	beq.n	8005fca <_strtod_l+0x352>
 8005f78:	dc25      	bgt.n	8005fc6 <_strtod_l+0x34e>
 8005f7a:	2a49      	cmp	r2, #73	@ 0x49
 8005f7c:	d025      	beq.n	8005fca <_strtod_l+0x352>
 8005f7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005f80:	f47f aecc 	bne.w	8005d1c <_strtod_l+0xa4>
 8005f84:	4999      	ldr	r1, [pc, #612]	@ (80061ec <_strtod_l+0x574>)
 8005f86:	a819      	add	r0, sp, #100	@ 0x64
 8005f88:	f001 f9dc 	bl	8007344 <__match>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f43f aec5 	beq.w	8005d1c <_strtod_l+0xa4>
 8005f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b28      	cmp	r3, #40	@ 0x28
 8005f98:	d12e      	bne.n	8005ff8 <_strtod_l+0x380>
 8005f9a:	4995      	ldr	r1, [pc, #596]	@ (80061f0 <_strtod_l+0x578>)
 8005f9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005f9e:	a819      	add	r0, sp, #100	@ 0x64
 8005fa0:	f001 f9e4 	bl	800736c <__hexnan>
 8005fa4:	2805      	cmp	r0, #5
 8005fa6:	d127      	bne.n	8005ff8 <_strtod_l+0x380>
 8005fa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005faa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005fae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005fb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005fb6:	e698      	b.n	8005cea <_strtod_l+0x72>
 8005fb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fba:	fb08 2101 	mla	r1, r8, r1, r2
 8005fbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fc4:	e7b5      	b.n	8005f32 <_strtod_l+0x2ba>
 8005fc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8005fc8:	e7da      	b.n	8005f80 <_strtod_l+0x308>
 8005fca:	498a      	ldr	r1, [pc, #552]	@ (80061f4 <_strtod_l+0x57c>)
 8005fcc:	a819      	add	r0, sp, #100	@ 0x64
 8005fce:	f001 f9b9 	bl	8007344 <__match>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f43f aea2 	beq.w	8005d1c <_strtod_l+0xa4>
 8005fd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fda:	4987      	ldr	r1, [pc, #540]	@ (80061f8 <_strtod_l+0x580>)
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	a819      	add	r0, sp, #100	@ 0x64
 8005fe0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005fe2:	f001 f9af 	bl	8007344 <__match>
 8005fe6:	b910      	cbnz	r0, 8005fee <_strtod_l+0x376>
 8005fe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fea:	3301      	adds	r3, #1
 8005fec:	9319      	str	r3, [sp, #100]	@ 0x64
 8005fee:	f04f 0a00 	mov.w	sl, #0
 8005ff2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80061fc <_strtod_l+0x584>
 8005ff6:	e678      	b.n	8005cea <_strtod_l+0x72>
 8005ff8:	4881      	ldr	r0, [pc, #516]	@ (8006200 <_strtod_l+0x588>)
 8005ffa:	f000 fee1 	bl	8006dc0 <nan>
 8005ffe:	4682      	mov	sl, r0
 8006000:	468b      	mov	fp, r1
 8006002:	e672      	b.n	8005cea <_strtod_l+0x72>
 8006004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006006:	f1b9 0f00 	cmp.w	r9, #0
 800600a:	bf08      	it	eq
 800600c:	46a9      	moveq	r9, r5
 800600e:	eba8 0303 	sub.w	r3, r8, r3
 8006012:	2d10      	cmp	r5, #16
 8006014:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006016:	462c      	mov	r4, r5
 8006018:	9309      	str	r3, [sp, #36]	@ 0x24
 800601a:	bfa8      	it	ge
 800601c:	2410      	movge	r4, #16
 800601e:	f7fa f9e1 	bl	80003e4 <__aeabi_ui2d>
 8006022:	2d09      	cmp	r5, #9
 8006024:	4682      	mov	sl, r0
 8006026:	468b      	mov	fp, r1
 8006028:	dc11      	bgt.n	800604e <_strtod_l+0x3d6>
 800602a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	f43f ae5c 	beq.w	8005cea <_strtod_l+0x72>
 8006032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006034:	dd76      	ble.n	8006124 <_strtod_l+0x4ac>
 8006036:	2b16      	cmp	r3, #22
 8006038:	dc5d      	bgt.n	80060f6 <_strtod_l+0x47e>
 800603a:	4972      	ldr	r1, [pc, #456]	@ (8006204 <_strtod_l+0x58c>)
 800603c:	4652      	mov	r2, sl
 800603e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006042:	465b      	mov	r3, fp
 8006044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006048:	f7fa fa46 	bl	80004d8 <__aeabi_dmul>
 800604c:	e7d7      	b.n	8005ffe <_strtod_l+0x386>
 800604e:	4b6d      	ldr	r3, [pc, #436]	@ (8006204 <_strtod_l+0x58c>)
 8006050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006054:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006058:	f7fa fa3e 	bl	80004d8 <__aeabi_dmul>
 800605c:	4682      	mov	sl, r0
 800605e:	4638      	mov	r0, r7
 8006060:	468b      	mov	fp, r1
 8006062:	f7fa f9bf 	bl	80003e4 <__aeabi_ui2d>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4650      	mov	r0, sl
 800606c:	4659      	mov	r1, fp
 800606e:	f7fa f87d 	bl	800016c <__adddf3>
 8006072:	2d0f      	cmp	r5, #15
 8006074:	4682      	mov	sl, r0
 8006076:	468b      	mov	fp, r1
 8006078:	ddd7      	ble.n	800602a <_strtod_l+0x3b2>
 800607a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800607c:	1b2c      	subs	r4, r5, r4
 800607e:	441c      	add	r4, r3
 8006080:	2c00      	cmp	r4, #0
 8006082:	f340 8093 	ble.w	80061ac <_strtod_l+0x534>
 8006086:	f014 030f 	ands.w	r3, r4, #15
 800608a:	d00a      	beq.n	80060a2 <_strtod_l+0x42a>
 800608c:	495d      	ldr	r1, [pc, #372]	@ (8006204 <_strtod_l+0x58c>)
 800608e:	4652      	mov	r2, sl
 8006090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006098:	465b      	mov	r3, fp
 800609a:	f7fa fa1d 	bl	80004d8 <__aeabi_dmul>
 800609e:	4682      	mov	sl, r0
 80060a0:	468b      	mov	fp, r1
 80060a2:	f034 040f 	bics.w	r4, r4, #15
 80060a6:	d073      	beq.n	8006190 <_strtod_l+0x518>
 80060a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80060ac:	dd49      	ble.n	8006142 <_strtod_l+0x4ca>
 80060ae:	2400      	movs	r4, #0
 80060b0:	46a0      	mov	r8, r4
 80060b2:	46a1      	mov	r9, r4
 80060b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060b6:	2322      	movs	r3, #34	@ 0x22
 80060b8:	f04f 0a00 	mov.w	sl, #0
 80060bc:	9a05      	ldr	r2, [sp, #20]
 80060be:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80061fc <_strtod_l+0x584>
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f43f ae0f 	beq.w	8005cea <_strtod_l+0x72>
 80060cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060ce:	9805      	ldr	r0, [sp, #20]
 80060d0:	f7ff f950 	bl	8005374 <_Bfree>
 80060d4:	4649      	mov	r1, r9
 80060d6:	9805      	ldr	r0, [sp, #20]
 80060d8:	f7ff f94c 	bl	8005374 <_Bfree>
 80060dc:	4641      	mov	r1, r8
 80060de:	9805      	ldr	r0, [sp, #20]
 80060e0:	f7ff f948 	bl	8005374 <_Bfree>
 80060e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060e6:	9805      	ldr	r0, [sp, #20]
 80060e8:	f7ff f944 	bl	8005374 <_Bfree>
 80060ec:	4621      	mov	r1, r4
 80060ee:	9805      	ldr	r0, [sp, #20]
 80060f0:	f7ff f940 	bl	8005374 <_Bfree>
 80060f4:	e5f9      	b.n	8005cea <_strtod_l+0x72>
 80060f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80060fc:	4293      	cmp	r3, r2
 80060fe:	dbbc      	blt.n	800607a <_strtod_l+0x402>
 8006100:	4c40      	ldr	r4, [pc, #256]	@ (8006204 <_strtod_l+0x58c>)
 8006102:	f1c5 050f 	rsb	r5, r5, #15
 8006106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800610a:	4652      	mov	r2, sl
 800610c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006110:	465b      	mov	r3, fp
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006118:	1b5d      	subs	r5, r3, r5
 800611a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800611e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006122:	e791      	b.n	8006048 <_strtod_l+0x3d0>
 8006124:	3316      	adds	r3, #22
 8006126:	dba8      	blt.n	800607a <_strtod_l+0x402>
 8006128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800612a:	4650      	mov	r0, sl
 800612c:	eba3 0808 	sub.w	r8, r3, r8
 8006130:	4b34      	ldr	r3, [pc, #208]	@ (8006204 <_strtod_l+0x58c>)
 8006132:	4659      	mov	r1, fp
 8006134:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006138:	e9d8 2300 	ldrd	r2, r3, [r8]
 800613c:	f7fa faf6 	bl	800072c <__aeabi_ddiv>
 8006140:	e75d      	b.n	8005ffe <_strtod_l+0x386>
 8006142:	2300      	movs	r3, #0
 8006144:	4650      	mov	r0, sl
 8006146:	4659      	mov	r1, fp
 8006148:	461e      	mov	r6, r3
 800614a:	4f2f      	ldr	r7, [pc, #188]	@ (8006208 <_strtod_l+0x590>)
 800614c:	1124      	asrs	r4, r4, #4
 800614e:	2c01      	cmp	r4, #1
 8006150:	dc21      	bgt.n	8006196 <_strtod_l+0x51e>
 8006152:	b10b      	cbz	r3, 8006158 <_strtod_l+0x4e0>
 8006154:	4682      	mov	sl, r0
 8006156:	468b      	mov	fp, r1
 8006158:	492b      	ldr	r1, [pc, #172]	@ (8006208 <_strtod_l+0x590>)
 800615a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800615e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006162:	4652      	mov	r2, sl
 8006164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006168:	465b      	mov	r3, fp
 800616a:	f7fa f9b5 	bl	80004d8 <__aeabi_dmul>
 800616e:	4b23      	ldr	r3, [pc, #140]	@ (80061fc <_strtod_l+0x584>)
 8006170:	460a      	mov	r2, r1
 8006172:	400b      	ands	r3, r1
 8006174:	4925      	ldr	r1, [pc, #148]	@ (800620c <_strtod_l+0x594>)
 8006176:	4682      	mov	sl, r0
 8006178:	428b      	cmp	r3, r1
 800617a:	d898      	bhi.n	80060ae <_strtod_l+0x436>
 800617c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006180:	428b      	cmp	r3, r1
 8006182:	bf86      	itte	hi
 8006184:	f04f 3aff 	movhi.w	sl, #4294967295
 8006188:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006210 <_strtod_l+0x598>
 800618c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006190:	2300      	movs	r3, #0
 8006192:	9308      	str	r3, [sp, #32]
 8006194:	e076      	b.n	8006284 <_strtod_l+0x60c>
 8006196:	07e2      	lsls	r2, r4, #31
 8006198:	d504      	bpl.n	80061a4 <_strtod_l+0x52c>
 800619a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800619e:	f7fa f99b 	bl	80004d8 <__aeabi_dmul>
 80061a2:	2301      	movs	r3, #1
 80061a4:	3601      	adds	r6, #1
 80061a6:	1064      	asrs	r4, r4, #1
 80061a8:	3708      	adds	r7, #8
 80061aa:	e7d0      	b.n	800614e <_strtod_l+0x4d6>
 80061ac:	d0f0      	beq.n	8006190 <_strtod_l+0x518>
 80061ae:	4264      	negs	r4, r4
 80061b0:	f014 020f 	ands.w	r2, r4, #15
 80061b4:	d00a      	beq.n	80061cc <_strtod_l+0x554>
 80061b6:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <_strtod_l+0x58c>)
 80061b8:	4650      	mov	r0, sl
 80061ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061be:	4659      	mov	r1, fp
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa fab2 	bl	800072c <__aeabi_ddiv>
 80061c8:	4682      	mov	sl, r0
 80061ca:	468b      	mov	fp, r1
 80061cc:	1124      	asrs	r4, r4, #4
 80061ce:	d0df      	beq.n	8006190 <_strtod_l+0x518>
 80061d0:	2c1f      	cmp	r4, #31
 80061d2:	dd1f      	ble.n	8006214 <_strtod_l+0x59c>
 80061d4:	2400      	movs	r4, #0
 80061d6:	46a0      	mov	r8, r4
 80061d8:	46a1      	mov	r9, r4
 80061da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061dc:	2322      	movs	r3, #34	@ 0x22
 80061de:	9a05      	ldr	r2, [sp, #20]
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	f04f 0b00 	mov.w	fp, #0
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	e76b      	b.n	80060c4 <_strtod_l+0x44c>
 80061ec:	08007c33 	.word	0x08007c33
 80061f0:	08007ef8 	.word	0x08007ef8
 80061f4:	08007c2b 	.word	0x08007c2b
 80061f8:	08007c62 	.word	0x08007c62
 80061fc:	7ff00000 	.word	0x7ff00000
 8006200:	08007d9b 	.word	0x08007d9b
 8006204:	08007e30 	.word	0x08007e30
 8006208:	08007e08 	.word	0x08007e08
 800620c:	7ca00000 	.word	0x7ca00000
 8006210:	7fefffff 	.word	0x7fefffff
 8006214:	f014 0310 	ands.w	r3, r4, #16
 8006218:	bf18      	it	ne
 800621a:	236a      	movne	r3, #106	@ 0x6a
 800621c:	4650      	mov	r0, sl
 800621e:	9308      	str	r3, [sp, #32]
 8006220:	4659      	mov	r1, fp
 8006222:	2300      	movs	r3, #0
 8006224:	4e77      	ldr	r6, [pc, #476]	@ (8006404 <_strtod_l+0x78c>)
 8006226:	07e7      	lsls	r7, r4, #31
 8006228:	d504      	bpl.n	8006234 <_strtod_l+0x5bc>
 800622a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800622e:	f7fa f953 	bl	80004d8 <__aeabi_dmul>
 8006232:	2301      	movs	r3, #1
 8006234:	1064      	asrs	r4, r4, #1
 8006236:	f106 0608 	add.w	r6, r6, #8
 800623a:	d1f4      	bne.n	8006226 <_strtod_l+0x5ae>
 800623c:	b10b      	cbz	r3, 8006242 <_strtod_l+0x5ca>
 800623e:	4682      	mov	sl, r0
 8006240:	468b      	mov	fp, r1
 8006242:	9b08      	ldr	r3, [sp, #32]
 8006244:	b1b3      	cbz	r3, 8006274 <_strtod_l+0x5fc>
 8006246:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800624a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800624e:	2b00      	cmp	r3, #0
 8006250:	4659      	mov	r1, fp
 8006252:	dd0f      	ble.n	8006274 <_strtod_l+0x5fc>
 8006254:	2b1f      	cmp	r3, #31
 8006256:	dd58      	ble.n	800630a <_strtod_l+0x692>
 8006258:	2b34      	cmp	r3, #52	@ 0x34
 800625a:	bfd8      	it	le
 800625c:	f04f 33ff 	movle.w	r3, #4294967295
 8006260:	f04f 0a00 	mov.w	sl, #0
 8006264:	bfcf      	iteee	gt
 8006266:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800626a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800626e:	4093      	lslle	r3, r2
 8006270:	ea03 0b01 	andle.w	fp, r3, r1
 8006274:	2200      	movs	r2, #0
 8006276:	2300      	movs	r3, #0
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	f7fa fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8006280:	2800      	cmp	r0, #0
 8006282:	d1a7      	bne.n	80061d4 <_strtod_l+0x55c>
 8006284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006286:	464a      	mov	r2, r9
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800628c:	462b      	mov	r3, r5
 800628e:	9805      	ldr	r0, [sp, #20]
 8006290:	f7ff f8d8 	bl	8005444 <__s2b>
 8006294:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f af09 	beq.w	80060ae <_strtod_l+0x436>
 800629c:	2400      	movs	r4, #0
 800629e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	eba3 0308 	sub.w	r3, r3, r8
 80062a8:	bfa8      	it	ge
 80062aa:	2300      	movge	r3, #0
 80062ac:	46a0      	mov	r8, r4
 80062ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80062b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80062b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80062b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062b8:	9805      	ldr	r0, [sp, #20]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	f7ff f81a 	bl	80052f4 <_Balloc>
 80062c0:	4681      	mov	r9, r0
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f43f aef7 	beq.w	80060b6 <_strtod_l+0x43e>
 80062c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ca:	300c      	adds	r0, #12
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	f103 010c 	add.w	r1, r3, #12
 80062d2:	3202      	adds	r2, #2
 80062d4:	0092      	lsls	r2, r2, #2
 80062d6:	f000 fd65 	bl	8006da4 <memcpy>
 80062da:	ab1c      	add	r3, sp, #112	@ 0x70
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4652      	mov	r2, sl
 80062e4:	465b      	mov	r3, fp
 80062e6:	9805      	ldr	r0, [sp, #20]
 80062e8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80062ec:	f7ff fbd6 	bl	8005a9c <__d2b>
 80062f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f43f aedf 	beq.w	80060b6 <_strtod_l+0x43e>
 80062f8:	2101      	movs	r1, #1
 80062fa:	9805      	ldr	r0, [sp, #20]
 80062fc:	f7ff f938 	bl	8005570 <__i2b>
 8006300:	4680      	mov	r8, r0
 8006302:	b948      	cbnz	r0, 8006318 <_strtod_l+0x6a0>
 8006304:	f04f 0800 	mov.w	r8, #0
 8006308:	e6d5      	b.n	80060b6 <_strtod_l+0x43e>
 800630a:	f04f 32ff 	mov.w	r2, #4294967295
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	ea03 0a0a 	and.w	sl, r3, sl
 8006316:	e7ad      	b.n	8006274 <_strtod_l+0x5fc>
 8006318:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800631a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800631c:	2d00      	cmp	r5, #0
 800631e:	bfab      	itete	ge
 8006320:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006322:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006324:	18ef      	addge	r7, r5, r3
 8006326:	1b5e      	sublt	r6, r3, r5
 8006328:	9b08      	ldr	r3, [sp, #32]
 800632a:	bfa8      	it	ge
 800632c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800632e:	eba5 0503 	sub.w	r5, r5, r3
 8006332:	4415      	add	r5, r2
 8006334:	4b34      	ldr	r3, [pc, #208]	@ (8006408 <_strtod_l+0x790>)
 8006336:	f105 35ff 	add.w	r5, r5, #4294967295
 800633a:	bfb8      	it	lt
 800633c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800633e:	429d      	cmp	r5, r3
 8006340:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006344:	da50      	bge.n	80063e8 <_strtod_l+0x770>
 8006346:	1b5b      	subs	r3, r3, r5
 8006348:	2b1f      	cmp	r3, #31
 800634a:	f04f 0101 	mov.w	r1, #1
 800634e:	eba2 0203 	sub.w	r2, r2, r3
 8006352:	dc3d      	bgt.n	80063d0 <_strtod_l+0x758>
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	9313      	str	r3, [sp, #76]	@ 0x4c
 800635a:	2300      	movs	r3, #0
 800635c:	9310      	str	r3, [sp, #64]	@ 0x40
 800635e:	18bd      	adds	r5, r7, r2
 8006360:	9b08      	ldr	r3, [sp, #32]
 8006362:	42af      	cmp	r7, r5
 8006364:	4416      	add	r6, r2
 8006366:	441e      	add	r6, r3
 8006368:	463b      	mov	r3, r7
 800636a:	bfa8      	it	ge
 800636c:	462b      	movge	r3, r5
 800636e:	42b3      	cmp	r3, r6
 8006370:	bfa8      	it	ge
 8006372:	4633      	movge	r3, r6
 8006374:	2b00      	cmp	r3, #0
 8006376:	bfc2      	ittt	gt
 8006378:	1aed      	subgt	r5, r5, r3
 800637a:	1af6      	subgt	r6, r6, r3
 800637c:	1aff      	subgt	r7, r7, r3
 800637e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006380:	2b00      	cmp	r3, #0
 8006382:	dd16      	ble.n	80063b2 <_strtod_l+0x73a>
 8006384:	4641      	mov	r1, r8
 8006386:	461a      	mov	r2, r3
 8006388:	9805      	ldr	r0, [sp, #20]
 800638a:	f7ff f9a9 	bl	80056e0 <__pow5mult>
 800638e:	4680      	mov	r8, r0
 8006390:	2800      	cmp	r0, #0
 8006392:	d0b7      	beq.n	8006304 <_strtod_l+0x68c>
 8006394:	4601      	mov	r1, r0
 8006396:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006398:	9805      	ldr	r0, [sp, #20]
 800639a:	f7ff f8ff 	bl	800559c <__multiply>
 800639e:	900a      	str	r0, [sp, #40]	@ 0x28
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f43f ae88 	beq.w	80060b6 <_strtod_l+0x43e>
 80063a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063a8:	9805      	ldr	r0, [sp, #20]
 80063aa:	f7fe ffe3 	bl	8005374 <_Bfree>
 80063ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	dc1d      	bgt.n	80063f2 <_strtod_l+0x77a>
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	dd27      	ble.n	800640c <_strtod_l+0x794>
 80063bc:	4649      	mov	r1, r9
 80063be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80063c0:	9805      	ldr	r0, [sp, #20]
 80063c2:	f7ff f98d 	bl	80056e0 <__pow5mult>
 80063c6:	4681      	mov	r9, r0
 80063c8:	bb00      	cbnz	r0, 800640c <_strtod_l+0x794>
 80063ca:	f04f 0900 	mov.w	r9, #0
 80063ce:	e672      	b.n	80060b6 <_strtod_l+0x43e>
 80063d0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80063d4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80063d8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80063dc:	35e2      	adds	r5, #226	@ 0xe2
 80063de:	fa01 f305 	lsl.w	r3, r1, r5
 80063e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80063e4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80063e6:	e7ba      	b.n	800635e <_strtod_l+0x6e6>
 80063e8:	2300      	movs	r3, #0
 80063ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80063ec:	2301      	movs	r3, #1
 80063ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063f0:	e7b5      	b.n	800635e <_strtod_l+0x6e6>
 80063f2:	462a      	mov	r2, r5
 80063f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063f6:	9805      	ldr	r0, [sp, #20]
 80063f8:	f7ff f9cc 	bl	8005794 <__lshift>
 80063fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80063fe:	2800      	cmp	r0, #0
 8006400:	d1d9      	bne.n	80063b6 <_strtod_l+0x73e>
 8006402:	e658      	b.n	80060b6 <_strtod_l+0x43e>
 8006404:	08007f20 	.word	0x08007f20
 8006408:	fffffc02 	.word	0xfffffc02
 800640c:	2e00      	cmp	r6, #0
 800640e:	dd07      	ble.n	8006420 <_strtod_l+0x7a8>
 8006410:	4649      	mov	r1, r9
 8006412:	4632      	mov	r2, r6
 8006414:	9805      	ldr	r0, [sp, #20]
 8006416:	f7ff f9bd 	bl	8005794 <__lshift>
 800641a:	4681      	mov	r9, r0
 800641c:	2800      	cmp	r0, #0
 800641e:	d0d4      	beq.n	80063ca <_strtod_l+0x752>
 8006420:	2f00      	cmp	r7, #0
 8006422:	dd08      	ble.n	8006436 <_strtod_l+0x7be>
 8006424:	4641      	mov	r1, r8
 8006426:	463a      	mov	r2, r7
 8006428:	9805      	ldr	r0, [sp, #20]
 800642a:	f7ff f9b3 	bl	8005794 <__lshift>
 800642e:	4680      	mov	r8, r0
 8006430:	2800      	cmp	r0, #0
 8006432:	f43f ae40 	beq.w	80060b6 <_strtod_l+0x43e>
 8006436:	464a      	mov	r2, r9
 8006438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800643a:	9805      	ldr	r0, [sp, #20]
 800643c:	f7ff fa32 	bl	80058a4 <__mdiff>
 8006440:	4604      	mov	r4, r0
 8006442:	2800      	cmp	r0, #0
 8006444:	f43f ae37 	beq.w	80060b6 <_strtod_l+0x43e>
 8006448:	68c3      	ldr	r3, [r0, #12]
 800644a:	4641      	mov	r1, r8
 800644c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800644e:	2300      	movs	r3, #0
 8006450:	60c3      	str	r3, [r0, #12]
 8006452:	f7ff fa0b 	bl	800586c <__mcmp>
 8006456:	2800      	cmp	r0, #0
 8006458:	da3d      	bge.n	80064d6 <_strtod_l+0x85e>
 800645a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800645c:	ea53 030a 	orrs.w	r3, r3, sl
 8006460:	d163      	bne.n	800652a <_strtod_l+0x8b2>
 8006462:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006466:	2b00      	cmp	r3, #0
 8006468:	d15f      	bne.n	800652a <_strtod_l+0x8b2>
 800646a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800646e:	0d1b      	lsrs	r3, r3, #20
 8006470:	051b      	lsls	r3, r3, #20
 8006472:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006476:	d958      	bls.n	800652a <_strtod_l+0x8b2>
 8006478:	6963      	ldr	r3, [r4, #20]
 800647a:	b913      	cbnz	r3, 8006482 <_strtod_l+0x80a>
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	2b01      	cmp	r3, #1
 8006480:	dd53      	ble.n	800652a <_strtod_l+0x8b2>
 8006482:	4621      	mov	r1, r4
 8006484:	2201      	movs	r2, #1
 8006486:	9805      	ldr	r0, [sp, #20]
 8006488:	f7ff f984 	bl	8005794 <__lshift>
 800648c:	4641      	mov	r1, r8
 800648e:	4604      	mov	r4, r0
 8006490:	f7ff f9ec 	bl	800586c <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	dd48      	ble.n	800652a <_strtod_l+0x8b2>
 8006498:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800649c:	9a08      	ldr	r2, [sp, #32]
 800649e:	0d1b      	lsrs	r3, r3, #20
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d062      	beq.n	800656c <_strtod_l+0x8f4>
 80064a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80064aa:	d85f      	bhi.n	800656c <_strtod_l+0x8f4>
 80064ac:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80064b0:	f67f ae94 	bls.w	80061dc <_strtod_l+0x564>
 80064b4:	4650      	mov	r0, sl
 80064b6:	4659      	mov	r1, fp
 80064b8:	4ba3      	ldr	r3, [pc, #652]	@ (8006748 <_strtod_l+0xad0>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	f7fa f80c 	bl	80004d8 <__aeabi_dmul>
 80064c0:	4ba2      	ldr	r3, [pc, #648]	@ (800674c <_strtod_l+0xad4>)
 80064c2:	4682      	mov	sl, r0
 80064c4:	400b      	ands	r3, r1
 80064c6:	468b      	mov	fp, r1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f adff 	bne.w	80060cc <_strtod_l+0x454>
 80064ce:	2322      	movs	r3, #34	@ 0x22
 80064d0:	9a05      	ldr	r2, [sp, #20]
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e5fa      	b.n	80060cc <_strtod_l+0x454>
 80064d6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80064da:	d165      	bne.n	80065a8 <_strtod_l+0x930>
 80064dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80064de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064e2:	b35a      	cbz	r2, 800653c <_strtod_l+0x8c4>
 80064e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006750 <_strtod_l+0xad8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d12b      	bne.n	8006542 <_strtod_l+0x8ca>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	4651      	mov	r1, sl
 80064ee:	b303      	cbz	r3, 8006532 <_strtod_l+0x8ba>
 80064f0:	465a      	mov	r2, fp
 80064f2:	4b96      	ldr	r3, [pc, #600]	@ (800674c <_strtod_l+0xad4>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	d81b      	bhi.n	8006538 <_strtod_l+0x8c0>
 8006500:	0d1b      	lsrs	r3, r3, #20
 8006502:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	4299      	cmp	r1, r3
 800650c:	d119      	bne.n	8006542 <_strtod_l+0x8ca>
 800650e:	4b91      	ldr	r3, [pc, #580]	@ (8006754 <_strtod_l+0xadc>)
 8006510:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006512:	429a      	cmp	r2, r3
 8006514:	d102      	bne.n	800651c <_strtod_l+0x8a4>
 8006516:	3101      	adds	r1, #1
 8006518:	f43f adcd 	beq.w	80060b6 <_strtod_l+0x43e>
 800651c:	f04f 0a00 	mov.w	sl, #0
 8006520:	4b8a      	ldr	r3, [pc, #552]	@ (800674c <_strtod_l+0xad4>)
 8006522:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006524:	401a      	ands	r2, r3
 8006526:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800652a:	9b08      	ldr	r3, [sp, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1c1      	bne.n	80064b4 <_strtod_l+0x83c>
 8006530:	e5cc      	b.n	80060cc <_strtod_l+0x454>
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	e7e8      	b.n	800650a <_strtod_l+0x892>
 8006538:	4613      	mov	r3, r2
 800653a:	e7e6      	b.n	800650a <_strtod_l+0x892>
 800653c:	ea53 030a 	orrs.w	r3, r3, sl
 8006540:	d0aa      	beq.n	8006498 <_strtod_l+0x820>
 8006542:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006544:	b1db      	cbz	r3, 800657e <_strtod_l+0x906>
 8006546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006548:	4213      	tst	r3, r2
 800654a:	d0ee      	beq.n	800652a <_strtod_l+0x8b2>
 800654c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800654e:	4650      	mov	r0, sl
 8006550:	4659      	mov	r1, fp
 8006552:	9a08      	ldr	r2, [sp, #32]
 8006554:	b1bb      	cbz	r3, 8006586 <_strtod_l+0x90e>
 8006556:	f7ff fb6d 	bl	8005c34 <sulp>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006562:	f7f9 fe03 	bl	800016c <__adddf3>
 8006566:	4682      	mov	sl, r0
 8006568:	468b      	mov	fp, r1
 800656a:	e7de      	b.n	800652a <_strtod_l+0x8b2>
 800656c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006570:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006574:	f04f 3aff 	mov.w	sl, #4294967295
 8006578:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800657c:	e7d5      	b.n	800652a <_strtod_l+0x8b2>
 800657e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006580:	ea13 0f0a 	tst.w	r3, sl
 8006584:	e7e1      	b.n	800654a <_strtod_l+0x8d2>
 8006586:	f7ff fb55 	bl	8005c34 <sulp>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006592:	f7f9 fde9 	bl	8000168 <__aeabi_dsub>
 8006596:	2200      	movs	r2, #0
 8006598:	2300      	movs	r3, #0
 800659a:	4682      	mov	sl, r0
 800659c:	468b      	mov	fp, r1
 800659e:	f7fa fa03 	bl	80009a8 <__aeabi_dcmpeq>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0c1      	beq.n	800652a <_strtod_l+0x8b2>
 80065a6:	e619      	b.n	80061dc <_strtod_l+0x564>
 80065a8:	4641      	mov	r1, r8
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff face 	bl	8005b4c <__ratio>
 80065b0:	2200      	movs	r2, #0
 80065b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	f7fa fa09 	bl	80009d0 <__aeabi_dcmple>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d06d      	beq.n	800669e <_strtod_l+0xa26>
 80065c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d178      	bne.n	80066ba <_strtod_l+0xa42>
 80065c8:	f1ba 0f00 	cmp.w	sl, #0
 80065cc:	d156      	bne.n	800667c <_strtod_l+0xa04>
 80065ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d158      	bne.n	800668a <_strtod_l+0xa12>
 80065d8:	2200      	movs	r2, #0
 80065da:	4630      	mov	r0, r6
 80065dc:	4639      	mov	r1, r7
 80065de:	4b5e      	ldr	r3, [pc, #376]	@ (8006758 <_strtod_l+0xae0>)
 80065e0:	f7fa f9ec 	bl	80009bc <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d157      	bne.n	8006698 <_strtod_l+0xa20>
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b5b      	ldr	r3, [pc, #364]	@ (800675c <_strtod_l+0xae4>)
 80065f0:	f7f9 ff72 	bl	80004d8 <__aeabi_dmul>
 80065f4:	4606      	mov	r6, r0
 80065f6:	460f      	mov	r7, r1
 80065f8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80065fc:	9606      	str	r6, [sp, #24]
 80065fe:	9307      	str	r3, [sp, #28]
 8006600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006604:	4d51      	ldr	r5, [pc, #324]	@ (800674c <_strtod_l+0xad4>)
 8006606:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800660a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800660c:	401d      	ands	r5, r3
 800660e:	4b54      	ldr	r3, [pc, #336]	@ (8006760 <_strtod_l+0xae8>)
 8006610:	429d      	cmp	r5, r3
 8006612:	f040 80ab 	bne.w	800676c <_strtod_l+0xaf4>
 8006616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006618:	4650      	mov	r0, sl
 800661a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800661e:	4659      	mov	r1, fp
 8006620:	f7ff f9d4 	bl	80059cc <__ulp>
 8006624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006628:	f7f9 ff56 	bl	80004d8 <__aeabi_dmul>
 800662c:	4652      	mov	r2, sl
 800662e:	465b      	mov	r3, fp
 8006630:	f7f9 fd9c 	bl	800016c <__adddf3>
 8006634:	460b      	mov	r3, r1
 8006636:	4945      	ldr	r1, [pc, #276]	@ (800674c <_strtod_l+0xad4>)
 8006638:	4a4a      	ldr	r2, [pc, #296]	@ (8006764 <_strtod_l+0xaec>)
 800663a:	4019      	ands	r1, r3
 800663c:	4291      	cmp	r1, r2
 800663e:	4682      	mov	sl, r0
 8006640:	d942      	bls.n	80066c8 <_strtod_l+0xa50>
 8006642:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006644:	4b43      	ldr	r3, [pc, #268]	@ (8006754 <_strtod_l+0xadc>)
 8006646:	429a      	cmp	r2, r3
 8006648:	d103      	bne.n	8006652 <_strtod_l+0x9da>
 800664a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800664c:	3301      	adds	r3, #1
 800664e:	f43f ad32 	beq.w	80060b6 <_strtod_l+0x43e>
 8006652:	f04f 3aff 	mov.w	sl, #4294967295
 8006656:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006754 <_strtod_l+0xadc>
 800665a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800665c:	9805      	ldr	r0, [sp, #20]
 800665e:	f7fe fe89 	bl	8005374 <_Bfree>
 8006662:	4649      	mov	r1, r9
 8006664:	9805      	ldr	r0, [sp, #20]
 8006666:	f7fe fe85 	bl	8005374 <_Bfree>
 800666a:	4641      	mov	r1, r8
 800666c:	9805      	ldr	r0, [sp, #20]
 800666e:	f7fe fe81 	bl	8005374 <_Bfree>
 8006672:	4621      	mov	r1, r4
 8006674:	9805      	ldr	r0, [sp, #20]
 8006676:	f7fe fe7d 	bl	8005374 <_Bfree>
 800667a:	e61c      	b.n	80062b6 <_strtod_l+0x63e>
 800667c:	f1ba 0f01 	cmp.w	sl, #1
 8006680:	d103      	bne.n	800668a <_strtod_l+0xa12>
 8006682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	f43f ada9 	beq.w	80061dc <_strtod_l+0x564>
 800668a:	2200      	movs	r2, #0
 800668c:	4b36      	ldr	r3, [pc, #216]	@ (8006768 <_strtod_l+0xaf0>)
 800668e:	2600      	movs	r6, #0
 8006690:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006694:	4f30      	ldr	r7, [pc, #192]	@ (8006758 <_strtod_l+0xae0>)
 8006696:	e7b3      	b.n	8006600 <_strtod_l+0x988>
 8006698:	2600      	movs	r6, #0
 800669a:	4f30      	ldr	r7, [pc, #192]	@ (800675c <_strtod_l+0xae4>)
 800669c:	e7ac      	b.n	80065f8 <_strtod_l+0x980>
 800669e:	4630      	mov	r0, r6
 80066a0:	4639      	mov	r1, r7
 80066a2:	4b2e      	ldr	r3, [pc, #184]	@ (800675c <_strtod_l+0xae4>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	f7f9 ff17 	bl	80004d8 <__aeabi_dmul>
 80066aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ac:	4606      	mov	r6, r0
 80066ae:	460f      	mov	r7, r1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0a1      	beq.n	80065f8 <_strtod_l+0x980>
 80066b4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80066b8:	e7a2      	b.n	8006600 <_strtod_l+0x988>
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b26      	ldr	r3, [pc, #152]	@ (8006758 <_strtod_l+0xae0>)
 80066be:	4616      	mov	r6, r2
 80066c0:	461f      	mov	r7, r3
 80066c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066c6:	e79b      	b.n	8006600 <_strtod_l+0x988>
 80066c8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80066cc:	9b08      	ldr	r3, [sp, #32]
 80066ce:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1c1      	bne.n	800665a <_strtod_l+0x9e2>
 80066d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066da:	0d1b      	lsrs	r3, r3, #20
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	429d      	cmp	r5, r3
 80066e0:	d1bb      	bne.n	800665a <_strtod_l+0x9e2>
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7fa fd13 	bl	8001110 <__aeabi_d2lz>
 80066ea:	f7f9 fec7 	bl	800047c <__aeabi_l2d>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4630      	mov	r0, r6
 80066f4:	4639      	mov	r1, r7
 80066f6:	f7f9 fd37 	bl	8000168 <__aeabi_dsub>
 80066fa:	460b      	mov	r3, r1
 80066fc:	4602      	mov	r2, r0
 80066fe:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006702:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006708:	ea46 060a 	orr.w	r6, r6, sl
 800670c:	431e      	orrs	r6, r3
 800670e:	d06a      	beq.n	80067e6 <_strtod_l+0xb6e>
 8006710:	a309      	add	r3, pc, #36	@ (adr r3, 8006738 <_strtod_l+0xac0>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7fa f951 	bl	80009bc <__aeabi_dcmplt>
 800671a:	2800      	cmp	r0, #0
 800671c:	f47f acd6 	bne.w	80060cc <_strtod_l+0x454>
 8006720:	a307      	add	r3, pc, #28	@ (adr r3, 8006740 <_strtod_l+0xac8>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800672a:	f7fa f965 	bl	80009f8 <__aeabi_dcmpgt>
 800672e:	2800      	cmp	r0, #0
 8006730:	d093      	beq.n	800665a <_strtod_l+0x9e2>
 8006732:	e4cb      	b.n	80060cc <_strtod_l+0x454>
 8006734:	f3af 8000 	nop.w
 8006738:	94a03595 	.word	0x94a03595
 800673c:	3fdfffff 	.word	0x3fdfffff
 8006740:	35afe535 	.word	0x35afe535
 8006744:	3fe00000 	.word	0x3fe00000
 8006748:	39500000 	.word	0x39500000
 800674c:	7ff00000 	.word	0x7ff00000
 8006750:	000fffff 	.word	0x000fffff
 8006754:	7fefffff 	.word	0x7fefffff
 8006758:	3ff00000 	.word	0x3ff00000
 800675c:	3fe00000 	.word	0x3fe00000
 8006760:	7fe00000 	.word	0x7fe00000
 8006764:	7c9fffff 	.word	0x7c9fffff
 8006768:	bff00000 	.word	0xbff00000
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	b323      	cbz	r3, 80067ba <_strtod_l+0xb42>
 8006770:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006774:	d821      	bhi.n	80067ba <_strtod_l+0xb42>
 8006776:	a328      	add	r3, pc, #160	@ (adr r3, 8006818 <_strtod_l+0xba0>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7fa f926 	bl	80009d0 <__aeabi_dcmple>
 8006784:	b1a0      	cbz	r0, 80067b0 <_strtod_l+0xb38>
 8006786:	4639      	mov	r1, r7
 8006788:	4630      	mov	r0, r6
 800678a:	f7fa f97d 	bl	8000a88 <__aeabi_d2uiz>
 800678e:	2801      	cmp	r0, #1
 8006790:	bf38      	it	cc
 8006792:	2001      	movcc	r0, #1
 8006794:	f7f9 fe26 	bl	80003e4 <__aeabi_ui2d>
 8006798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800679a:	4606      	mov	r6, r0
 800679c:	460f      	mov	r7, r1
 800679e:	b9fb      	cbnz	r3, 80067e0 <_strtod_l+0xb68>
 80067a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80067a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80067a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80067a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80067ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80067b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80067b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80067b6:	1b5b      	subs	r3, r3, r5
 80067b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80067ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80067c2:	f7ff f903 	bl	80059cc <__ulp>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4650      	mov	r0, sl
 80067cc:	4659      	mov	r1, fp
 80067ce:	f7f9 fe83 	bl	80004d8 <__aeabi_dmul>
 80067d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80067d6:	f7f9 fcc9 	bl	800016c <__adddf3>
 80067da:	4682      	mov	sl, r0
 80067dc:	468b      	mov	fp, r1
 80067de:	e775      	b.n	80066cc <_strtod_l+0xa54>
 80067e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80067e4:	e7e0      	b.n	80067a8 <_strtod_l+0xb30>
 80067e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006820 <_strtod_l+0xba8>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7fa f8e6 	bl	80009bc <__aeabi_dcmplt>
 80067f0:	e79d      	b.n	800672e <_strtod_l+0xab6>
 80067f2:	2300      	movs	r3, #0
 80067f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80067f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067f8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	f7ff ba79 	b.w	8005cf2 <_strtod_l+0x7a>
 8006800:	2a65      	cmp	r2, #101	@ 0x65
 8006802:	f43f ab72 	beq.w	8005eea <_strtod_l+0x272>
 8006806:	2a45      	cmp	r2, #69	@ 0x45
 8006808:	f43f ab6f 	beq.w	8005eea <_strtod_l+0x272>
 800680c:	2301      	movs	r3, #1
 800680e:	f7ff bbaa 	b.w	8005f66 <_strtod_l+0x2ee>
 8006812:	bf00      	nop
 8006814:	f3af 8000 	nop.w
 8006818:	ffc00000 	.word	0xffc00000
 800681c:	41dfffff 	.word	0x41dfffff
 8006820:	94a03595 	.word	0x94a03595
 8006824:	3fcfffff 	.word	0x3fcfffff

08006828 <_strtod_r>:
 8006828:	4b01      	ldr	r3, [pc, #4]	@ (8006830 <_strtod_r+0x8>)
 800682a:	f7ff ba25 	b.w	8005c78 <_strtod_l>
 800682e:	bf00      	nop
 8006830:	20000068 	.word	0x20000068

08006834 <_strtol_l.isra.0>:
 8006834:	2b24      	cmp	r3, #36	@ 0x24
 8006836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683a:	4686      	mov	lr, r0
 800683c:	4690      	mov	r8, r2
 800683e:	d801      	bhi.n	8006844 <_strtol_l.isra.0+0x10>
 8006840:	2b01      	cmp	r3, #1
 8006842:	d106      	bne.n	8006852 <_strtol_l.isra.0+0x1e>
 8006844:	f7fd fdba 	bl	80043bc <__errno>
 8006848:	2316      	movs	r3, #22
 800684a:	6003      	str	r3, [r0, #0]
 800684c:	2000      	movs	r0, #0
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	460d      	mov	r5, r1
 8006854:	4833      	ldr	r0, [pc, #204]	@ (8006924 <_strtol_l.isra.0+0xf0>)
 8006856:	462a      	mov	r2, r5
 8006858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800685c:	5d06      	ldrb	r6, [r0, r4]
 800685e:	f016 0608 	ands.w	r6, r6, #8
 8006862:	d1f8      	bne.n	8006856 <_strtol_l.isra.0+0x22>
 8006864:	2c2d      	cmp	r4, #45	@ 0x2d
 8006866:	d110      	bne.n	800688a <_strtol_l.isra.0+0x56>
 8006868:	2601      	movs	r6, #1
 800686a:	782c      	ldrb	r4, [r5, #0]
 800686c:	1c95      	adds	r5, r2, #2
 800686e:	f033 0210 	bics.w	r2, r3, #16
 8006872:	d115      	bne.n	80068a0 <_strtol_l.isra.0+0x6c>
 8006874:	2c30      	cmp	r4, #48	@ 0x30
 8006876:	d10d      	bne.n	8006894 <_strtol_l.isra.0+0x60>
 8006878:	782a      	ldrb	r2, [r5, #0]
 800687a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800687e:	2a58      	cmp	r2, #88	@ 0x58
 8006880:	d108      	bne.n	8006894 <_strtol_l.isra.0+0x60>
 8006882:	786c      	ldrb	r4, [r5, #1]
 8006884:	3502      	adds	r5, #2
 8006886:	2310      	movs	r3, #16
 8006888:	e00a      	b.n	80068a0 <_strtol_l.isra.0+0x6c>
 800688a:	2c2b      	cmp	r4, #43	@ 0x2b
 800688c:	bf04      	itt	eq
 800688e:	782c      	ldrbeq	r4, [r5, #0]
 8006890:	1c95      	addeq	r5, r2, #2
 8006892:	e7ec      	b.n	800686e <_strtol_l.isra.0+0x3a>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f6      	bne.n	8006886 <_strtol_l.isra.0+0x52>
 8006898:	2c30      	cmp	r4, #48	@ 0x30
 800689a:	bf14      	ite	ne
 800689c:	230a      	movne	r3, #10
 800689e:	2308      	moveq	r3, #8
 80068a0:	2200      	movs	r2, #0
 80068a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80068a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068aa:	fbbc f9f3 	udiv	r9, ip, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80068b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80068b8:	2f09      	cmp	r7, #9
 80068ba:	d80f      	bhi.n	80068dc <_strtol_l.isra.0+0xa8>
 80068bc:	463c      	mov	r4, r7
 80068be:	42a3      	cmp	r3, r4
 80068c0:	dd1b      	ble.n	80068fa <_strtol_l.isra.0+0xc6>
 80068c2:	1c57      	adds	r7, r2, #1
 80068c4:	d007      	beq.n	80068d6 <_strtol_l.isra.0+0xa2>
 80068c6:	4581      	cmp	r9, r0
 80068c8:	d314      	bcc.n	80068f4 <_strtol_l.isra.0+0xc0>
 80068ca:	d101      	bne.n	80068d0 <_strtol_l.isra.0+0x9c>
 80068cc:	45a2      	cmp	sl, r4
 80068ce:	db11      	blt.n	80068f4 <_strtol_l.isra.0+0xc0>
 80068d0:	2201      	movs	r2, #1
 80068d2:	fb00 4003 	mla	r0, r0, r3, r4
 80068d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068da:	e7eb      	b.n	80068b4 <_strtol_l.isra.0+0x80>
 80068dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80068e0:	2f19      	cmp	r7, #25
 80068e2:	d801      	bhi.n	80068e8 <_strtol_l.isra.0+0xb4>
 80068e4:	3c37      	subs	r4, #55	@ 0x37
 80068e6:	e7ea      	b.n	80068be <_strtol_l.isra.0+0x8a>
 80068e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80068ec:	2f19      	cmp	r7, #25
 80068ee:	d804      	bhi.n	80068fa <_strtol_l.isra.0+0xc6>
 80068f0:	3c57      	subs	r4, #87	@ 0x57
 80068f2:	e7e4      	b.n	80068be <_strtol_l.isra.0+0x8a>
 80068f4:	f04f 32ff 	mov.w	r2, #4294967295
 80068f8:	e7ed      	b.n	80068d6 <_strtol_l.isra.0+0xa2>
 80068fa:	1c53      	adds	r3, r2, #1
 80068fc:	d108      	bne.n	8006910 <_strtol_l.isra.0+0xdc>
 80068fe:	2322      	movs	r3, #34	@ 0x22
 8006900:	4660      	mov	r0, ip
 8006902:	f8ce 3000 	str.w	r3, [lr]
 8006906:	f1b8 0f00 	cmp.w	r8, #0
 800690a:	d0a0      	beq.n	800684e <_strtol_l.isra.0+0x1a>
 800690c:	1e69      	subs	r1, r5, #1
 800690e:	e006      	b.n	800691e <_strtol_l.isra.0+0xea>
 8006910:	b106      	cbz	r6, 8006914 <_strtol_l.isra.0+0xe0>
 8006912:	4240      	negs	r0, r0
 8006914:	f1b8 0f00 	cmp.w	r8, #0
 8006918:	d099      	beq.n	800684e <_strtol_l.isra.0+0x1a>
 800691a:	2a00      	cmp	r2, #0
 800691c:	d1f6      	bne.n	800690c <_strtol_l.isra.0+0xd8>
 800691e:	f8c8 1000 	str.w	r1, [r8]
 8006922:	e794      	b.n	800684e <_strtol_l.isra.0+0x1a>
 8006924:	08007f49 	.word	0x08007f49

08006928 <_strtol_r>:
 8006928:	f7ff bf84 	b.w	8006834 <_strtol_l.isra.0>

0800692c <__ssputs_r>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	461f      	mov	r7, r3
 8006932:	688e      	ldr	r6, [r1, #8]
 8006934:	4682      	mov	sl, r0
 8006936:	42be      	cmp	r6, r7
 8006938:	460c      	mov	r4, r1
 800693a:	4690      	mov	r8, r2
 800693c:	680b      	ldr	r3, [r1, #0]
 800693e:	d82d      	bhi.n	800699c <__ssputs_r+0x70>
 8006940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006948:	d026      	beq.n	8006998 <__ssputs_r+0x6c>
 800694a:	6965      	ldr	r5, [r4, #20]
 800694c:	6909      	ldr	r1, [r1, #16]
 800694e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006952:	eba3 0901 	sub.w	r9, r3, r1
 8006956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800695a:	1c7b      	adds	r3, r7, #1
 800695c:	444b      	add	r3, r9
 800695e:	106d      	asrs	r5, r5, #1
 8006960:	429d      	cmp	r5, r3
 8006962:	bf38      	it	cc
 8006964:	461d      	movcc	r5, r3
 8006966:	0553      	lsls	r3, r2, #21
 8006968:	d527      	bpl.n	80069ba <__ssputs_r+0x8e>
 800696a:	4629      	mov	r1, r5
 800696c:	f7fe fc36 	bl	80051dc <_malloc_r>
 8006970:	4606      	mov	r6, r0
 8006972:	b360      	cbz	r0, 80069ce <__ssputs_r+0xa2>
 8006974:	464a      	mov	r2, r9
 8006976:	6921      	ldr	r1, [r4, #16]
 8006978:	f000 fa14 	bl	8006da4 <memcpy>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	6126      	str	r6, [r4, #16]
 800698a:	444e      	add	r6, r9
 800698c:	6026      	str	r6, [r4, #0]
 800698e:	463e      	mov	r6, r7
 8006990:	6165      	str	r5, [r4, #20]
 8006992:	eba5 0509 	sub.w	r5, r5, r9
 8006996:	60a5      	str	r5, [r4, #8]
 8006998:	42be      	cmp	r6, r7
 800699a:	d900      	bls.n	800699e <__ssputs_r+0x72>
 800699c:	463e      	mov	r6, r7
 800699e:	4632      	mov	r2, r6
 80069a0:	4641      	mov	r1, r8
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	f000 f9c2 	bl	8006d2c <memmove>
 80069a8:	2000      	movs	r0, #0
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	1b9b      	subs	r3, r3, r6
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4433      	add	r3, r6
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	462a      	mov	r2, r5
 80069bc:	f000 fd83 	bl	80074c6 <_realloc_r>
 80069c0:	4606      	mov	r6, r0
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d1e0      	bne.n	8006988 <__ssputs_r+0x5c>
 80069c6:	4650      	mov	r0, sl
 80069c8:	6921      	ldr	r1, [r4, #16]
 80069ca:	f7fe fb95 	bl	80050f8 <_free_r>
 80069ce:	230c      	movs	r3, #12
 80069d0:	f8ca 3000 	str.w	r3, [sl]
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	e7e9      	b.n	80069b6 <__ssputs_r+0x8a>
	...

080069e4 <_svfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	4698      	mov	r8, r3
 80069ea:	898b      	ldrh	r3, [r1, #12]
 80069ec:	4607      	mov	r7, r0
 80069ee:	061b      	lsls	r3, r3, #24
 80069f0:	460d      	mov	r5, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	b09d      	sub	sp, #116	@ 0x74
 80069f6:	d510      	bpl.n	8006a1a <_svfiprintf_r+0x36>
 80069f8:	690b      	ldr	r3, [r1, #16]
 80069fa:	b973      	cbnz	r3, 8006a1a <_svfiprintf_r+0x36>
 80069fc:	2140      	movs	r1, #64	@ 0x40
 80069fe:	f7fe fbed 	bl	80051dc <_malloc_r>
 8006a02:	6028      	str	r0, [r5, #0]
 8006a04:	6128      	str	r0, [r5, #16]
 8006a06:	b930      	cbnz	r0, 8006a16 <_svfiprintf_r+0x32>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b01d      	add	sp, #116	@ 0x74
 8006a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	2340      	movs	r3, #64	@ 0x40
 8006a18:	616b      	str	r3, [r5, #20]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a1e:	2320      	movs	r3, #32
 8006a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a24:	2330      	movs	r3, #48	@ 0x30
 8006a26:	f04f 0901 	mov.w	r9, #1
 8006a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006bc8 <_svfiprintf_r+0x1e4>
 8006a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a36:	4623      	mov	r3, r4
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3e:	b10a      	cbz	r2, 8006a44 <_svfiprintf_r+0x60>
 8006a40:	2a25      	cmp	r2, #37	@ 0x25
 8006a42:	d1f9      	bne.n	8006a38 <_svfiprintf_r+0x54>
 8006a44:	ebba 0b04 	subs.w	fp, sl, r4
 8006a48:	d00b      	beq.n	8006a62 <_svfiprintf_r+0x7e>
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff ff6b 	bl	800692c <__ssputs_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	f000 80a7 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a5e:	445a      	add	r2, fp
 8006a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a62:	f89a 3000 	ldrb.w	r3, [sl]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 809f 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a76:	f10a 0a01 	add.w	sl, sl, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	9307      	str	r3, [sp, #28]
 8006a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a84:	4654      	mov	r4, sl
 8006a86:	2205      	movs	r2, #5
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	484e      	ldr	r0, [pc, #312]	@ (8006bc8 <_svfiprintf_r+0x1e4>)
 8006a8e:	f7fd fcc2 	bl	8004416 <memchr>
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	b9d8      	cbnz	r0, 8006ace <_svfiprintf_r+0xea>
 8006a96:	06d0      	lsls	r0, r2, #27
 8006a98:	bf44      	itt	mi
 8006a9a:	2320      	movmi	r3, #32
 8006a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aa0:	0711      	lsls	r1, r2, #28
 8006aa2:	bf44      	itt	mi
 8006aa4:	232b      	movmi	r3, #43	@ 0x2b
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab0:	d015      	beq.n	8006ade <_svfiprintf_r+0xfa>
 8006ab2:	4654      	mov	r4, sl
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f04f 0c0a 	mov.w	ip, #10
 8006aba:	9a07      	ldr	r2, [sp, #28]
 8006abc:	4621      	mov	r1, r4
 8006abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac2:	3b30      	subs	r3, #48	@ 0x30
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d94b      	bls.n	8006b60 <_svfiprintf_r+0x17c>
 8006ac8:	b1b0      	cbz	r0, 8006af8 <_svfiprintf_r+0x114>
 8006aca:	9207      	str	r2, [sp, #28]
 8006acc:	e014      	b.n	8006af8 <_svfiprintf_r+0x114>
 8006ace:	eba0 0308 	sub.w	r3, r0, r8
 8006ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	46a2      	mov	sl, r4
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	e7d2      	b.n	8006a84 <_svfiprintf_r+0xa0>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfbb      	ittet	lt
 8006aea:	425b      	neglt	r3, r3
 8006aec:	f042 0202 	orrlt.w	r2, r2, #2
 8006af0:	9307      	strge	r3, [sp, #28]
 8006af2:	9307      	strlt	r3, [sp, #28]
 8006af4:	bfb8      	it	lt
 8006af6:	9204      	strlt	r2, [sp, #16]
 8006af8:	7823      	ldrb	r3, [r4, #0]
 8006afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006afc:	d10a      	bne.n	8006b14 <_svfiprintf_r+0x130>
 8006afe:	7863      	ldrb	r3, [r4, #1]
 8006b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b02:	d132      	bne.n	8006b6a <_svfiprintf_r+0x186>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	3402      	adds	r4, #2
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	9203      	str	r2, [sp, #12]
 8006b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006bcc <_svfiprintf_r+0x1e8>
 8006b18:	2203      	movs	r2, #3
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	7821      	ldrb	r1, [r4, #0]
 8006b1e:	f7fd fc7a 	bl	8004416 <memchr>
 8006b22:	b138      	cbz	r0, 8006b34 <_svfiprintf_r+0x150>
 8006b24:	2240      	movs	r2, #64	@ 0x40
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	eba0 000a 	sub.w	r0, r0, sl
 8006b2c:	4082      	lsls	r2, r0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	3401      	adds	r4, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	2206      	movs	r2, #6
 8006b3a:	4825      	ldr	r0, [pc, #148]	@ (8006bd0 <_svfiprintf_r+0x1ec>)
 8006b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b40:	f7fd fc69 	bl	8004416 <memchr>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d036      	beq.n	8006bb6 <_svfiprintf_r+0x1d2>
 8006b48:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <_svfiprintf_r+0x1f0>)
 8006b4a:	bb1b      	cbnz	r3, 8006b94 <_svfiprintf_r+0x1b0>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	3308      	adds	r3, #8
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5a:	4433      	add	r3, r6
 8006b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5e:	e76a      	b.n	8006a36 <_svfiprintf_r+0x52>
 8006b60:	460c      	mov	r4, r1
 8006b62:	2001      	movs	r0, #1
 8006b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b68:	e7a8      	b.n	8006abc <_svfiprintf_r+0xd8>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4619      	mov	r1, r3
 8006b72:	3401      	adds	r4, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b7c:	3a30      	subs	r2, #48	@ 0x30
 8006b7e:	2a09      	cmp	r2, #9
 8006b80:	d903      	bls.n	8006b8a <_svfiprintf_r+0x1a6>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0c6      	beq.n	8006b14 <_svfiprintf_r+0x130>
 8006b86:	9105      	str	r1, [sp, #20]
 8006b88:	e7c4      	b.n	8006b14 <_svfiprintf_r+0x130>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b92:	e7f0      	b.n	8006b76 <_svfiprintf_r+0x192>
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006b9e:	a904      	add	r1, sp, #16
 8006ba0:	f7fc fcbe 	bl	8003520 <_printf_float>
 8006ba4:	1c42      	adds	r2, r0, #1
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	d1d6      	bne.n	8006b58 <_svfiprintf_r+0x174>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af2d 	bmi.w	8006a0c <_svfiprintf_r+0x28>
 8006bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bb4:	e72c      	b.n	8006a10 <_svfiprintf_r+0x2c>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	f7fc ff4b 	bl	8003a5c <_printf_i>
 8006bc6:	e7ed      	b.n	8006ba4 <_svfiprintf_r+0x1c0>
 8006bc8:	08007d47 	.word	0x08007d47
 8006bcc:	08007d4d 	.word	0x08007d4d
 8006bd0:	08007d51 	.word	0x08007d51
 8006bd4:	08003521 	.word	0x08003521
 8006bd8:	0800692d 	.word	0x0800692d

08006bdc <__sflush_r>:
 8006bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	0716      	lsls	r6, r2, #28
 8006be4:	4605      	mov	r5, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	d454      	bmi.n	8006c94 <__sflush_r+0xb8>
 8006bea:	684b      	ldr	r3, [r1, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc02      	bgt.n	8006bf6 <__sflush_r+0x1a>
 8006bf0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd48      	ble.n	8006c88 <__sflush_r+0xac>
 8006bf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	d045      	beq.n	8006c88 <__sflush_r+0xac>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c02:	682f      	ldr	r7, [r5, #0]
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	d030      	beq.n	8006c6c <__sflush_r+0x90>
 8006c0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	0759      	lsls	r1, r3, #29
 8006c10:	d505      	bpl.n	8006c1e <__sflush_r+0x42>
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c18:	b10b      	cbz	r3, 8006c1e <__sflush_r+0x42>
 8006c1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c1c:	1ad2      	subs	r2, r2, r3
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4628      	mov	r0, r5
 8006c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c24:	6a21      	ldr	r1, [r4, #32]
 8006c26:	47b0      	blx	r6
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	d106      	bne.n	8006c3c <__sflush_r+0x60>
 8006c2e:	6829      	ldr	r1, [r5, #0]
 8006c30:	291d      	cmp	r1, #29
 8006c32:	d82b      	bhi.n	8006c8c <__sflush_r+0xb0>
 8006c34:	4a28      	ldr	r2, [pc, #160]	@ (8006cd8 <__sflush_r+0xfc>)
 8006c36:	40ca      	lsrs	r2, r1
 8006c38:	07d6      	lsls	r6, r2, #31
 8006c3a:	d527      	bpl.n	8006c8c <__sflush_r+0xb0>
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6062      	str	r2, [r4, #4]
 8006c40:	6922      	ldr	r2, [r4, #16]
 8006c42:	04d9      	lsls	r1, r3, #19
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	d504      	bpl.n	8006c52 <__sflush_r+0x76>
 8006c48:	1c42      	adds	r2, r0, #1
 8006c4a:	d101      	bne.n	8006c50 <__sflush_r+0x74>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b903      	cbnz	r3, 8006c52 <__sflush_r+0x76>
 8006c50:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c54:	602f      	str	r7, [r5, #0]
 8006c56:	b1b9      	cbz	r1, 8006c88 <__sflush_r+0xac>
 8006c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	d002      	beq.n	8006c66 <__sflush_r+0x8a>
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7fe fa49 	bl	80050f8 <_free_r>
 8006c66:	2300      	movs	r3, #0
 8006c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c6a:	e00d      	b.n	8006c88 <__sflush_r+0xac>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b0      	blx	r6
 8006c72:	4602      	mov	r2, r0
 8006c74:	1c50      	adds	r0, r2, #1
 8006c76:	d1c9      	bne.n	8006c0c <__sflush_r+0x30>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0c6      	beq.n	8006c0c <__sflush_r+0x30>
 8006c7e:	2b1d      	cmp	r3, #29
 8006c80:	d001      	beq.n	8006c86 <__sflush_r+0xaa>
 8006c82:	2b16      	cmp	r3, #22
 8006c84:	d11d      	bne.n	8006cc2 <__sflush_r+0xe6>
 8006c86:	602f      	str	r7, [r5, #0]
 8006c88:	2000      	movs	r0, #0
 8006c8a:	e021      	b.n	8006cd0 <__sflush_r+0xf4>
 8006c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	e01a      	b.n	8006cca <__sflush_r+0xee>
 8006c94:	690f      	ldr	r7, [r1, #16]
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	d0f6      	beq.n	8006c88 <__sflush_r+0xac>
 8006c9a:	0793      	lsls	r3, r2, #30
 8006c9c:	bf18      	it	ne
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	680e      	ldr	r6, [r1, #0]
 8006ca2:	bf08      	it	eq
 8006ca4:	694b      	ldreq	r3, [r1, #20]
 8006ca6:	1bf6      	subs	r6, r6, r7
 8006ca8:	600f      	str	r7, [r1, #0]
 8006caa:	608b      	str	r3, [r1, #8]
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	ddeb      	ble.n	8006c88 <__sflush_r+0xac>
 8006cb0:	4633      	mov	r3, r6
 8006cb2:	463a      	mov	r2, r7
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	6a21      	ldr	r1, [r4, #32]
 8006cb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006cbc:	47e0      	blx	ip
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dc07      	bgt.n	8006cd2 <__sflush_r+0xf6>
 8006cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd2:	4407      	add	r7, r0
 8006cd4:	1a36      	subs	r6, r6, r0
 8006cd6:	e7e9      	b.n	8006cac <__sflush_r+0xd0>
 8006cd8:	20400001 	.word	0x20400001

08006cdc <_fflush_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	b913      	cbnz	r3, 8006cec <_fflush_r+0x10>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	4628      	mov	r0, r5
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	b118      	cbz	r0, 8006cf6 <_fflush_r+0x1a>
 8006cee:	6a03      	ldr	r3, [r0, #32]
 8006cf0:	b90b      	cbnz	r3, 8006cf6 <_fflush_r+0x1a>
 8006cf2:	f7fd fa67 	bl	80041c4 <__sinit>
 8006cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f3      	beq.n	8006ce6 <_fflush_r+0xa>
 8006cfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d00:	07d0      	lsls	r0, r2, #31
 8006d02:	d404      	bmi.n	8006d0e <_fflush_r+0x32>
 8006d04:	0599      	lsls	r1, r3, #22
 8006d06:	d402      	bmi.n	8006d0e <_fflush_r+0x32>
 8006d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d0a:	f7fd fb82 	bl	8004412 <__retarget_lock_acquire_recursive>
 8006d0e:	4628      	mov	r0, r5
 8006d10:	4621      	mov	r1, r4
 8006d12:	f7ff ff63 	bl	8006bdc <__sflush_r>
 8006d16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d18:	4605      	mov	r5, r0
 8006d1a:	07da      	lsls	r2, r3, #31
 8006d1c:	d4e4      	bmi.n	8006ce8 <_fflush_r+0xc>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	059b      	lsls	r3, r3, #22
 8006d22:	d4e1      	bmi.n	8006ce8 <_fflush_r+0xc>
 8006d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d26:	f7fd fb75 	bl	8004414 <__retarget_lock_release_recursive>
 8006d2a:	e7dd      	b.n	8006ce8 <_fflush_r+0xc>

08006d2c <memmove>:
 8006d2c:	4288      	cmp	r0, r1
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	eb01 0402 	add.w	r4, r1, r2
 8006d34:	d902      	bls.n	8006d3c <memmove+0x10>
 8006d36:	4284      	cmp	r4, r0
 8006d38:	4623      	mov	r3, r4
 8006d3a:	d807      	bhi.n	8006d4c <memmove+0x20>
 8006d3c:	1e43      	subs	r3, r0, #1
 8006d3e:	42a1      	cmp	r1, r4
 8006d40:	d008      	beq.n	8006d54 <memmove+0x28>
 8006d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d4a:	e7f8      	b.n	8006d3e <memmove+0x12>
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	4402      	add	r2, r0
 8006d50:	428a      	cmp	r2, r1
 8006d52:	d100      	bne.n	8006d56 <memmove+0x2a>
 8006d54:	bd10      	pop	{r4, pc}
 8006d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d5e:	e7f7      	b.n	8006d50 <memmove+0x24>

08006d60 <strncmp>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	b16a      	cbz	r2, 8006d80 <strncmp+0x20>
 8006d64:	3901      	subs	r1, #1
 8006d66:	1884      	adds	r4, r0, r2
 8006d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d103      	bne.n	8006d7c <strncmp+0x1c>
 8006d74:	42a0      	cmp	r0, r4
 8006d76:	d001      	beq.n	8006d7c <strncmp+0x1c>
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	d1f5      	bne.n	8006d68 <strncmp+0x8>
 8006d7c:	1ad0      	subs	r0, r2, r3
 8006d7e:	bd10      	pop	{r4, pc}
 8006d80:	4610      	mov	r0, r2
 8006d82:	e7fc      	b.n	8006d7e <strncmp+0x1e>

08006d84 <_sbrk_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	2300      	movs	r3, #0
 8006d88:	4d05      	ldr	r5, [pc, #20]	@ (8006da0 <_sbrk_r+0x1c>)
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fb f898 	bl	8001ec4 <_sbrk>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_sbrk_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_sbrk_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	200003f8 	.word	0x200003f8

08006da4 <memcpy>:
 8006da4:	440a      	add	r2, r1
 8006da6:	4291      	cmp	r1, r2
 8006da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dac:	d100      	bne.n	8006db0 <memcpy+0xc>
 8006dae:	4770      	bx	lr
 8006db0:	b510      	push	{r4, lr}
 8006db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db6:	4291      	cmp	r1, r2
 8006db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dbc:	d1f9      	bne.n	8006db2 <memcpy+0xe>
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <nan>:
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	4901      	ldr	r1, [pc, #4]	@ (8006dc8 <nan+0x8>)
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	7ff80000 	.word	0x7ff80000

08006dcc <__assert_func>:
 8006dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dce:	4614      	mov	r4, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <__assert_func+0x2c>)
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68d8      	ldr	r0, [r3, #12]
 8006dda:	b14c      	cbz	r4, 8006df0 <__assert_func+0x24>
 8006ddc:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <__assert_func+0x30>)
 8006dde:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006de2:	9100      	str	r1, [sp, #0]
 8006de4:	462b      	mov	r3, r5
 8006de6:	4906      	ldr	r1, [pc, #24]	@ (8006e00 <__assert_func+0x34>)
 8006de8:	f000 fba8 	bl	800753c <fiprintf>
 8006dec:	f000 fbb8 	bl	8007560 <abort>
 8006df0:	4b04      	ldr	r3, [pc, #16]	@ (8006e04 <__assert_func+0x38>)
 8006df2:	461c      	mov	r4, r3
 8006df4:	e7f3      	b.n	8006dde <__assert_func+0x12>
 8006df6:	bf00      	nop
 8006df8:	20000018 	.word	0x20000018
 8006dfc:	08007d60 	.word	0x08007d60
 8006e00:	08007d6d 	.word	0x08007d6d
 8006e04:	08007d9b 	.word	0x08007d9b

08006e08 <_calloc_r>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	fba1 5402 	umull	r5, r4, r1, r2
 8006e0e:	b934      	cbnz	r4, 8006e1e <_calloc_r+0x16>
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7fe f9e3 	bl	80051dc <_malloc_r>
 8006e16:	4606      	mov	r6, r0
 8006e18:	b928      	cbnz	r0, 8006e26 <_calloc_r+0x1e>
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	220c      	movs	r2, #12
 8006e20:	2600      	movs	r6, #0
 8006e22:	6002      	str	r2, [r0, #0]
 8006e24:	e7f9      	b.n	8006e1a <_calloc_r+0x12>
 8006e26:	462a      	mov	r2, r5
 8006e28:	4621      	mov	r1, r4
 8006e2a:	f7fd fa66 	bl	80042fa <memset>
 8006e2e:	e7f4      	b.n	8006e1a <_calloc_r+0x12>

08006e30 <rshift>:
 8006e30:	6903      	ldr	r3, [r0, #16]
 8006e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e3a:	f100 0414 	add.w	r4, r0, #20
 8006e3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e42:	dd46      	ble.n	8006ed2 <rshift+0xa2>
 8006e44:	f011 011f 	ands.w	r1, r1, #31
 8006e48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e50:	d10c      	bne.n	8006e6c <rshift+0x3c>
 8006e52:	4629      	mov	r1, r5
 8006e54:	f100 0710 	add.w	r7, r0, #16
 8006e58:	42b1      	cmp	r1, r6
 8006e5a:	d335      	bcc.n	8006ec8 <rshift+0x98>
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	1eea      	subs	r2, r5, #3
 8006e62:	4296      	cmp	r6, r2
 8006e64:	bf38      	it	cc
 8006e66:	2300      	movcc	r3, #0
 8006e68:	4423      	add	r3, r4
 8006e6a:	e015      	b.n	8006e98 <rshift+0x68>
 8006e6c:	46a1      	mov	r9, r4
 8006e6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e72:	f1c1 0820 	rsb	r8, r1, #32
 8006e76:	40cf      	lsrs	r7, r1
 8006e78:	f105 0e04 	add.w	lr, r5, #4
 8006e7c:	4576      	cmp	r6, lr
 8006e7e:	46f4      	mov	ip, lr
 8006e80:	d816      	bhi.n	8006eb0 <rshift+0x80>
 8006e82:	1a9a      	subs	r2, r3, r2
 8006e84:	0092      	lsls	r2, r2, #2
 8006e86:	3a04      	subs	r2, #4
 8006e88:	3501      	adds	r5, #1
 8006e8a:	42ae      	cmp	r6, r5
 8006e8c:	bf38      	it	cc
 8006e8e:	2200      	movcc	r2, #0
 8006e90:	18a3      	adds	r3, r4, r2
 8006e92:	50a7      	str	r7, [r4, r2]
 8006e94:	b107      	cbz	r7, 8006e98 <rshift+0x68>
 8006e96:	3304      	adds	r3, #4
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	eba3 0204 	sub.w	r2, r3, r4
 8006e9e:	bf08      	it	eq
 8006ea0:	2300      	moveq	r3, #0
 8006ea2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ea6:	6102      	str	r2, [r0, #16]
 8006ea8:	bf08      	it	eq
 8006eaa:	6143      	streq	r3, [r0, #20]
 8006eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eb0:	f8dc c000 	ldr.w	ip, [ip]
 8006eb4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006eb8:	ea4c 0707 	orr.w	r7, ip, r7
 8006ebc:	f849 7b04 	str.w	r7, [r9], #4
 8006ec0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ec4:	40cf      	lsrs	r7, r1
 8006ec6:	e7d9      	b.n	8006e7c <rshift+0x4c>
 8006ec8:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ecc:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ed0:	e7c2      	b.n	8006e58 <rshift+0x28>
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	e7e0      	b.n	8006e98 <rshift+0x68>

08006ed6 <__hexdig_fun>:
 8006ed6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d802      	bhi.n	8006ee4 <__hexdig_fun+0xe>
 8006ede:	3820      	subs	r0, #32
 8006ee0:	b2c0      	uxtb	r0, r0
 8006ee2:	4770      	bx	lr
 8006ee4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	d801      	bhi.n	8006ef0 <__hexdig_fun+0x1a>
 8006eec:	3847      	subs	r0, #71	@ 0x47
 8006eee:	e7f7      	b.n	8006ee0 <__hexdig_fun+0xa>
 8006ef0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d801      	bhi.n	8006efc <__hexdig_fun+0x26>
 8006ef8:	3827      	subs	r0, #39	@ 0x27
 8006efa:	e7f1      	b.n	8006ee0 <__hexdig_fun+0xa>
 8006efc:	2000      	movs	r0, #0
 8006efe:	4770      	bx	lr

08006f00 <__gethex>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	468a      	mov	sl, r1
 8006f06:	4690      	mov	r8, r2
 8006f08:	b085      	sub	sp, #20
 8006f0a:	9302      	str	r3, [sp, #8]
 8006f0c:	680b      	ldr	r3, [r1, #0]
 8006f0e:	9001      	str	r0, [sp, #4]
 8006f10:	1c9c      	adds	r4, r3, #2
 8006f12:	46a1      	mov	r9, r4
 8006f14:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006f18:	2830      	cmp	r0, #48	@ 0x30
 8006f1a:	d0fa      	beq.n	8006f12 <__gethex+0x12>
 8006f1c:	eba9 0303 	sub.w	r3, r9, r3
 8006f20:	f1a3 0b02 	sub.w	fp, r3, #2
 8006f24:	f7ff ffd7 	bl	8006ed6 <__hexdig_fun>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d168      	bne.n	8007000 <__gethex+0x100>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4648      	mov	r0, r9
 8006f32:	499f      	ldr	r1, [pc, #636]	@ (80071b0 <__gethex+0x2b0>)
 8006f34:	f7ff ff14 	bl	8006d60 <strncmp>
 8006f38:	4607      	mov	r7, r0
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d167      	bne.n	800700e <__gethex+0x10e>
 8006f3e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006f42:	4626      	mov	r6, r4
 8006f44:	f7ff ffc7 	bl	8006ed6 <__hexdig_fun>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d062      	beq.n	8007012 <__gethex+0x112>
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	7818      	ldrb	r0, [r3, #0]
 8006f50:	4699      	mov	r9, r3
 8006f52:	2830      	cmp	r0, #48	@ 0x30
 8006f54:	f103 0301 	add.w	r3, r3, #1
 8006f58:	d0f9      	beq.n	8006f4e <__gethex+0x4e>
 8006f5a:	f7ff ffbc 	bl	8006ed6 <__hexdig_fun>
 8006f5e:	fab0 f580 	clz	r5, r0
 8006f62:	f04f 0b01 	mov.w	fp, #1
 8006f66:	096d      	lsrs	r5, r5, #5
 8006f68:	464a      	mov	r2, r9
 8006f6a:	4616      	mov	r6, r2
 8006f6c:	7830      	ldrb	r0, [r6, #0]
 8006f6e:	3201      	adds	r2, #1
 8006f70:	f7ff ffb1 	bl	8006ed6 <__hexdig_fun>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d1f8      	bne.n	8006f6a <__gethex+0x6a>
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	498c      	ldr	r1, [pc, #560]	@ (80071b0 <__gethex+0x2b0>)
 8006f7e:	f7ff feef 	bl	8006d60 <strncmp>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d13f      	bne.n	8007006 <__gethex+0x106>
 8006f86:	b944      	cbnz	r4, 8006f9a <__gethex+0x9a>
 8006f88:	1c74      	adds	r4, r6, #1
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	7830      	ldrb	r0, [r6, #0]
 8006f90:	3201      	adds	r2, #1
 8006f92:	f7ff ffa0 	bl	8006ed6 <__hexdig_fun>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d1f8      	bne.n	8006f8c <__gethex+0x8c>
 8006f9a:	1ba4      	subs	r4, r4, r6
 8006f9c:	00a7      	lsls	r7, r4, #2
 8006f9e:	7833      	ldrb	r3, [r6, #0]
 8006fa0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006fa4:	2b50      	cmp	r3, #80	@ 0x50
 8006fa6:	d13e      	bne.n	8007026 <__gethex+0x126>
 8006fa8:	7873      	ldrb	r3, [r6, #1]
 8006faa:	2b2b      	cmp	r3, #43	@ 0x2b
 8006fac:	d033      	beq.n	8007016 <__gethex+0x116>
 8006fae:	2b2d      	cmp	r3, #45	@ 0x2d
 8006fb0:	d034      	beq.n	800701c <__gethex+0x11c>
 8006fb2:	2400      	movs	r4, #0
 8006fb4:	1c71      	adds	r1, r6, #1
 8006fb6:	7808      	ldrb	r0, [r1, #0]
 8006fb8:	f7ff ff8d 	bl	8006ed6 <__hexdig_fun>
 8006fbc:	1e43      	subs	r3, r0, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b18      	cmp	r3, #24
 8006fc2:	d830      	bhi.n	8007026 <__gethex+0x126>
 8006fc4:	f1a0 0210 	sub.w	r2, r0, #16
 8006fc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006fcc:	f7ff ff83 	bl	8006ed6 <__hexdig_fun>
 8006fd0:	f100 3cff 	add.w	ip, r0, #4294967295
 8006fd4:	fa5f fc8c 	uxtb.w	ip, ip
 8006fd8:	f1bc 0f18 	cmp.w	ip, #24
 8006fdc:	f04f 030a 	mov.w	r3, #10
 8006fe0:	d91e      	bls.n	8007020 <__gethex+0x120>
 8006fe2:	b104      	cbz	r4, 8006fe6 <__gethex+0xe6>
 8006fe4:	4252      	negs	r2, r2
 8006fe6:	4417      	add	r7, r2
 8006fe8:	f8ca 1000 	str.w	r1, [sl]
 8006fec:	b1ed      	cbz	r5, 800702a <__gethex+0x12a>
 8006fee:	f1bb 0f00 	cmp.w	fp, #0
 8006ff2:	bf0c      	ite	eq
 8006ff4:	2506      	moveq	r5, #6
 8006ff6:	2500      	movne	r5, #0
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	b005      	add	sp, #20
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	2500      	movs	r5, #0
 8007002:	462c      	mov	r4, r5
 8007004:	e7b0      	b.n	8006f68 <__gethex+0x68>
 8007006:	2c00      	cmp	r4, #0
 8007008:	d1c7      	bne.n	8006f9a <__gethex+0x9a>
 800700a:	4627      	mov	r7, r4
 800700c:	e7c7      	b.n	8006f9e <__gethex+0x9e>
 800700e:	464e      	mov	r6, r9
 8007010:	462f      	mov	r7, r5
 8007012:	2501      	movs	r5, #1
 8007014:	e7c3      	b.n	8006f9e <__gethex+0x9e>
 8007016:	2400      	movs	r4, #0
 8007018:	1cb1      	adds	r1, r6, #2
 800701a:	e7cc      	b.n	8006fb6 <__gethex+0xb6>
 800701c:	2401      	movs	r4, #1
 800701e:	e7fb      	b.n	8007018 <__gethex+0x118>
 8007020:	fb03 0002 	mla	r0, r3, r2, r0
 8007024:	e7ce      	b.n	8006fc4 <__gethex+0xc4>
 8007026:	4631      	mov	r1, r6
 8007028:	e7de      	b.n	8006fe8 <__gethex+0xe8>
 800702a:	4629      	mov	r1, r5
 800702c:	eba6 0309 	sub.w	r3, r6, r9
 8007030:	3b01      	subs	r3, #1
 8007032:	2b07      	cmp	r3, #7
 8007034:	dc0a      	bgt.n	800704c <__gethex+0x14c>
 8007036:	9801      	ldr	r0, [sp, #4]
 8007038:	f7fe f95c 	bl	80052f4 <_Balloc>
 800703c:	4604      	mov	r4, r0
 800703e:	b940      	cbnz	r0, 8007052 <__gethex+0x152>
 8007040:	4602      	mov	r2, r0
 8007042:	21e4      	movs	r1, #228	@ 0xe4
 8007044:	4b5b      	ldr	r3, [pc, #364]	@ (80071b4 <__gethex+0x2b4>)
 8007046:	485c      	ldr	r0, [pc, #368]	@ (80071b8 <__gethex+0x2b8>)
 8007048:	f7ff fec0 	bl	8006dcc <__assert_func>
 800704c:	3101      	adds	r1, #1
 800704e:	105b      	asrs	r3, r3, #1
 8007050:	e7ef      	b.n	8007032 <__gethex+0x132>
 8007052:	2300      	movs	r3, #0
 8007054:	f100 0a14 	add.w	sl, r0, #20
 8007058:	4655      	mov	r5, sl
 800705a:	469b      	mov	fp, r3
 800705c:	45b1      	cmp	r9, r6
 800705e:	d337      	bcc.n	80070d0 <__gethex+0x1d0>
 8007060:	f845 bb04 	str.w	fp, [r5], #4
 8007064:	eba5 050a 	sub.w	r5, r5, sl
 8007068:	10ad      	asrs	r5, r5, #2
 800706a:	6125      	str	r5, [r4, #16]
 800706c:	4658      	mov	r0, fp
 800706e:	f7fe fa33 	bl	80054d8 <__hi0bits>
 8007072:	016d      	lsls	r5, r5, #5
 8007074:	f8d8 6000 	ldr.w	r6, [r8]
 8007078:	1a2d      	subs	r5, r5, r0
 800707a:	42b5      	cmp	r5, r6
 800707c:	dd54      	ble.n	8007128 <__gethex+0x228>
 800707e:	1bad      	subs	r5, r5, r6
 8007080:	4629      	mov	r1, r5
 8007082:	4620      	mov	r0, r4
 8007084:	f7fe fdb5 	bl	8005bf2 <__any_on>
 8007088:	4681      	mov	r9, r0
 800708a:	b178      	cbz	r0, 80070ac <__gethex+0x1ac>
 800708c:	f04f 0901 	mov.w	r9, #1
 8007090:	1e6b      	subs	r3, r5, #1
 8007092:	1159      	asrs	r1, r3, #5
 8007094:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007098:	f003 021f 	and.w	r2, r3, #31
 800709c:	fa09 f202 	lsl.w	r2, r9, r2
 80070a0:	420a      	tst	r2, r1
 80070a2:	d003      	beq.n	80070ac <__gethex+0x1ac>
 80070a4:	454b      	cmp	r3, r9
 80070a6:	dc36      	bgt.n	8007116 <__gethex+0x216>
 80070a8:	f04f 0902 	mov.w	r9, #2
 80070ac:	4629      	mov	r1, r5
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7ff febe 	bl	8006e30 <rshift>
 80070b4:	442f      	add	r7, r5
 80070b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070ba:	42bb      	cmp	r3, r7
 80070bc:	da42      	bge.n	8007144 <__gethex+0x244>
 80070be:	4621      	mov	r1, r4
 80070c0:	9801      	ldr	r0, [sp, #4]
 80070c2:	f7fe f957 	bl	8005374 <_Bfree>
 80070c6:	2300      	movs	r3, #0
 80070c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070ca:	25a3      	movs	r5, #163	@ 0xa3
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e793      	b.n	8006ff8 <__gethex+0xf8>
 80070d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80070d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80070d6:	d012      	beq.n	80070fe <__gethex+0x1fe>
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d104      	bne.n	80070e6 <__gethex+0x1e6>
 80070dc:	f845 bb04 	str.w	fp, [r5], #4
 80070e0:	f04f 0b00 	mov.w	fp, #0
 80070e4:	465b      	mov	r3, fp
 80070e6:	7830      	ldrb	r0, [r6, #0]
 80070e8:	9303      	str	r3, [sp, #12]
 80070ea:	f7ff fef4 	bl	8006ed6 <__hexdig_fun>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	f000 000f 	and.w	r0, r0, #15
 80070f4:	4098      	lsls	r0, r3
 80070f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80070fa:	3304      	adds	r3, #4
 80070fc:	e7ae      	b.n	800705c <__gethex+0x15c>
 80070fe:	45b1      	cmp	r9, r6
 8007100:	d8ea      	bhi.n	80070d8 <__gethex+0x1d8>
 8007102:	2201      	movs	r2, #1
 8007104:	4630      	mov	r0, r6
 8007106:	492a      	ldr	r1, [pc, #168]	@ (80071b0 <__gethex+0x2b0>)
 8007108:	9303      	str	r3, [sp, #12]
 800710a:	f7ff fe29 	bl	8006d60 <strncmp>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	2800      	cmp	r0, #0
 8007112:	d1e1      	bne.n	80070d8 <__gethex+0x1d8>
 8007114:	e7a2      	b.n	800705c <__gethex+0x15c>
 8007116:	4620      	mov	r0, r4
 8007118:	1ea9      	subs	r1, r5, #2
 800711a:	f7fe fd6a 	bl	8005bf2 <__any_on>
 800711e:	2800      	cmp	r0, #0
 8007120:	d0c2      	beq.n	80070a8 <__gethex+0x1a8>
 8007122:	f04f 0903 	mov.w	r9, #3
 8007126:	e7c1      	b.n	80070ac <__gethex+0x1ac>
 8007128:	da09      	bge.n	800713e <__gethex+0x23e>
 800712a:	1b75      	subs	r5, r6, r5
 800712c:	4621      	mov	r1, r4
 800712e:	462a      	mov	r2, r5
 8007130:	9801      	ldr	r0, [sp, #4]
 8007132:	f7fe fb2f 	bl	8005794 <__lshift>
 8007136:	4604      	mov	r4, r0
 8007138:	1b7f      	subs	r7, r7, r5
 800713a:	f100 0a14 	add.w	sl, r0, #20
 800713e:	f04f 0900 	mov.w	r9, #0
 8007142:	e7b8      	b.n	80070b6 <__gethex+0x1b6>
 8007144:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007148:	42bd      	cmp	r5, r7
 800714a:	dd6f      	ble.n	800722c <__gethex+0x32c>
 800714c:	1bed      	subs	r5, r5, r7
 800714e:	42ae      	cmp	r6, r5
 8007150:	dc34      	bgt.n	80071bc <__gethex+0x2bc>
 8007152:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d022      	beq.n	80071a0 <__gethex+0x2a0>
 800715a:	2b03      	cmp	r3, #3
 800715c:	d024      	beq.n	80071a8 <__gethex+0x2a8>
 800715e:	2b01      	cmp	r3, #1
 8007160:	d115      	bne.n	800718e <__gethex+0x28e>
 8007162:	42ae      	cmp	r6, r5
 8007164:	d113      	bne.n	800718e <__gethex+0x28e>
 8007166:	2e01      	cmp	r6, #1
 8007168:	d10b      	bne.n	8007182 <__gethex+0x282>
 800716a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800716e:	9a02      	ldr	r2, [sp, #8]
 8007170:	2562      	movs	r5, #98	@ 0x62
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	2301      	movs	r3, #1
 8007176:	6123      	str	r3, [r4, #16]
 8007178:	f8ca 3000 	str.w	r3, [sl]
 800717c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800717e:	601c      	str	r4, [r3, #0]
 8007180:	e73a      	b.n	8006ff8 <__gethex+0xf8>
 8007182:	4620      	mov	r0, r4
 8007184:	1e71      	subs	r1, r6, #1
 8007186:	f7fe fd34 	bl	8005bf2 <__any_on>
 800718a:	2800      	cmp	r0, #0
 800718c:	d1ed      	bne.n	800716a <__gethex+0x26a>
 800718e:	4621      	mov	r1, r4
 8007190:	9801      	ldr	r0, [sp, #4]
 8007192:	f7fe f8ef 	bl	8005374 <_Bfree>
 8007196:	2300      	movs	r3, #0
 8007198:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800719a:	2550      	movs	r5, #80	@ 0x50
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	e72b      	b.n	8006ff8 <__gethex+0xf8>
 80071a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f3      	bne.n	800718e <__gethex+0x28e>
 80071a6:	e7e0      	b.n	800716a <__gethex+0x26a>
 80071a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1dd      	bne.n	800716a <__gethex+0x26a>
 80071ae:	e7ee      	b.n	800718e <__gethex+0x28e>
 80071b0:	08007d45 	.word	0x08007d45
 80071b4:	08007cdb 	.word	0x08007cdb
 80071b8:	08007d9c 	.word	0x08007d9c
 80071bc:	1e6f      	subs	r7, r5, #1
 80071be:	f1b9 0f00 	cmp.w	r9, #0
 80071c2:	d130      	bne.n	8007226 <__gethex+0x326>
 80071c4:	b127      	cbz	r7, 80071d0 <__gethex+0x2d0>
 80071c6:	4639      	mov	r1, r7
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7fe fd12 	bl	8005bf2 <__any_on>
 80071ce:	4681      	mov	r9, r0
 80071d0:	2301      	movs	r3, #1
 80071d2:	4629      	mov	r1, r5
 80071d4:	1b76      	subs	r6, r6, r5
 80071d6:	2502      	movs	r5, #2
 80071d8:	117a      	asrs	r2, r7, #5
 80071da:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80071de:	f007 071f 	and.w	r7, r7, #31
 80071e2:	40bb      	lsls	r3, r7
 80071e4:	4213      	tst	r3, r2
 80071e6:	4620      	mov	r0, r4
 80071e8:	bf18      	it	ne
 80071ea:	f049 0902 	orrne.w	r9, r9, #2
 80071ee:	f7ff fe1f 	bl	8006e30 <rshift>
 80071f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80071f6:	f1b9 0f00 	cmp.w	r9, #0
 80071fa:	d047      	beq.n	800728c <__gethex+0x38c>
 80071fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d015      	beq.n	8007230 <__gethex+0x330>
 8007204:	2b03      	cmp	r3, #3
 8007206:	d017      	beq.n	8007238 <__gethex+0x338>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d109      	bne.n	8007220 <__gethex+0x320>
 800720c:	f019 0f02 	tst.w	r9, #2
 8007210:	d006      	beq.n	8007220 <__gethex+0x320>
 8007212:	f8da 3000 	ldr.w	r3, [sl]
 8007216:	ea49 0903 	orr.w	r9, r9, r3
 800721a:	f019 0f01 	tst.w	r9, #1
 800721e:	d10e      	bne.n	800723e <__gethex+0x33e>
 8007220:	f045 0510 	orr.w	r5, r5, #16
 8007224:	e032      	b.n	800728c <__gethex+0x38c>
 8007226:	f04f 0901 	mov.w	r9, #1
 800722a:	e7d1      	b.n	80071d0 <__gethex+0x2d0>
 800722c:	2501      	movs	r5, #1
 800722e:	e7e2      	b.n	80071f6 <__gethex+0x2f6>
 8007230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007232:	f1c3 0301 	rsb	r3, r3, #1
 8007236:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <__gethex+0x320>
 800723e:	f04f 0c00 	mov.w	ip, #0
 8007242:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007246:	f104 0314 	add.w	r3, r4, #20
 800724a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800724e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007252:	4618      	mov	r0, r3
 8007254:	f853 2b04 	ldr.w	r2, [r3], #4
 8007258:	f1b2 3fff 	cmp.w	r2, #4294967295
 800725c:	d01b      	beq.n	8007296 <__gethex+0x396>
 800725e:	3201      	adds	r2, #1
 8007260:	6002      	str	r2, [r0, #0]
 8007262:	2d02      	cmp	r5, #2
 8007264:	f104 0314 	add.w	r3, r4, #20
 8007268:	d13c      	bne.n	80072e4 <__gethex+0x3e4>
 800726a:	f8d8 2000 	ldr.w	r2, [r8]
 800726e:	3a01      	subs	r2, #1
 8007270:	42b2      	cmp	r2, r6
 8007272:	d109      	bne.n	8007288 <__gethex+0x388>
 8007274:	2201      	movs	r2, #1
 8007276:	1171      	asrs	r1, r6, #5
 8007278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800727c:	f006 061f 	and.w	r6, r6, #31
 8007280:	fa02 f606 	lsl.w	r6, r2, r6
 8007284:	421e      	tst	r6, r3
 8007286:	d13a      	bne.n	80072fe <__gethex+0x3fe>
 8007288:	f045 0520 	orr.w	r5, r5, #32
 800728c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800728e:	601c      	str	r4, [r3, #0]
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	601f      	str	r7, [r3, #0]
 8007294:	e6b0      	b.n	8006ff8 <__gethex+0xf8>
 8007296:	4299      	cmp	r1, r3
 8007298:	f843 cc04 	str.w	ip, [r3, #-4]
 800729c:	d8d9      	bhi.n	8007252 <__gethex+0x352>
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	459b      	cmp	fp, r3
 80072a2:	db17      	blt.n	80072d4 <__gethex+0x3d4>
 80072a4:	6861      	ldr	r1, [r4, #4]
 80072a6:	9801      	ldr	r0, [sp, #4]
 80072a8:	3101      	adds	r1, #1
 80072aa:	f7fe f823 	bl	80052f4 <_Balloc>
 80072ae:	4681      	mov	r9, r0
 80072b0:	b918      	cbnz	r0, 80072ba <__gethex+0x3ba>
 80072b2:	4602      	mov	r2, r0
 80072b4:	2184      	movs	r1, #132	@ 0x84
 80072b6:	4b19      	ldr	r3, [pc, #100]	@ (800731c <__gethex+0x41c>)
 80072b8:	e6c5      	b.n	8007046 <__gethex+0x146>
 80072ba:	6922      	ldr	r2, [r4, #16]
 80072bc:	f104 010c 	add.w	r1, r4, #12
 80072c0:	3202      	adds	r2, #2
 80072c2:	0092      	lsls	r2, r2, #2
 80072c4:	300c      	adds	r0, #12
 80072c6:	f7ff fd6d 	bl	8006da4 <memcpy>
 80072ca:	4621      	mov	r1, r4
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	f7fe f851 	bl	8005374 <_Bfree>
 80072d2:	464c      	mov	r4, r9
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	6122      	str	r2, [r4, #16]
 80072da:	2201      	movs	r2, #1
 80072dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072e0:	615a      	str	r2, [r3, #20]
 80072e2:	e7be      	b.n	8007262 <__gethex+0x362>
 80072e4:	6922      	ldr	r2, [r4, #16]
 80072e6:	455a      	cmp	r2, fp
 80072e8:	dd0b      	ble.n	8007302 <__gethex+0x402>
 80072ea:	2101      	movs	r1, #1
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff fd9f 	bl	8006e30 <rshift>
 80072f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072f6:	3701      	adds	r7, #1
 80072f8:	42bb      	cmp	r3, r7
 80072fa:	f6ff aee0 	blt.w	80070be <__gethex+0x1be>
 80072fe:	2501      	movs	r5, #1
 8007300:	e7c2      	b.n	8007288 <__gethex+0x388>
 8007302:	f016 061f 	ands.w	r6, r6, #31
 8007306:	d0fa      	beq.n	80072fe <__gethex+0x3fe>
 8007308:	4453      	add	r3, sl
 800730a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800730e:	f7fe f8e3 	bl	80054d8 <__hi0bits>
 8007312:	f1c6 0620 	rsb	r6, r6, #32
 8007316:	42b0      	cmp	r0, r6
 8007318:	dbe7      	blt.n	80072ea <__gethex+0x3ea>
 800731a:	e7f0      	b.n	80072fe <__gethex+0x3fe>
 800731c:	08007cdb 	.word	0x08007cdb

08007320 <L_shift>:
 8007320:	f1c2 0208 	rsb	r2, r2, #8
 8007324:	0092      	lsls	r2, r2, #2
 8007326:	b570      	push	{r4, r5, r6, lr}
 8007328:	f1c2 0620 	rsb	r6, r2, #32
 800732c:	6843      	ldr	r3, [r0, #4]
 800732e:	6804      	ldr	r4, [r0, #0]
 8007330:	fa03 f506 	lsl.w	r5, r3, r6
 8007334:	432c      	orrs	r4, r5
 8007336:	40d3      	lsrs	r3, r2
 8007338:	6004      	str	r4, [r0, #0]
 800733a:	f840 3f04 	str.w	r3, [r0, #4]!
 800733e:	4288      	cmp	r0, r1
 8007340:	d3f4      	bcc.n	800732c <L_shift+0xc>
 8007342:	bd70      	pop	{r4, r5, r6, pc}

08007344 <__match>:
 8007344:	b530      	push	{r4, r5, lr}
 8007346:	6803      	ldr	r3, [r0, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734e:	b914      	cbnz	r4, 8007356 <__match+0x12>
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	2001      	movs	r0, #1
 8007354:	bd30      	pop	{r4, r5, pc}
 8007356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800735e:	2d19      	cmp	r5, #25
 8007360:	bf98      	it	ls
 8007362:	3220      	addls	r2, #32
 8007364:	42a2      	cmp	r2, r4
 8007366:	d0f0      	beq.n	800734a <__match+0x6>
 8007368:	2000      	movs	r0, #0
 800736a:	e7f3      	b.n	8007354 <__match+0x10>

0800736c <__hexnan>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	2500      	movs	r5, #0
 8007372:	680b      	ldr	r3, [r1, #0]
 8007374:	4682      	mov	sl, r0
 8007376:	115e      	asrs	r6, r3, #5
 8007378:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800737c:	f013 031f 	ands.w	r3, r3, #31
 8007380:	bf18      	it	ne
 8007382:	3604      	addne	r6, #4
 8007384:	1f37      	subs	r7, r6, #4
 8007386:	4690      	mov	r8, r2
 8007388:	46b9      	mov	r9, r7
 800738a:	463c      	mov	r4, r7
 800738c:	46ab      	mov	fp, r5
 800738e:	b087      	sub	sp, #28
 8007390:	6801      	ldr	r1, [r0, #0]
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	f846 5c04 	str.w	r5, [r6, #-4]
 8007398:	9502      	str	r5, [sp, #8]
 800739a:	784a      	ldrb	r2, [r1, #1]
 800739c:	1c4b      	adds	r3, r1, #1
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	b342      	cbz	r2, 80073f4 <__hexnan+0x88>
 80073a2:	4610      	mov	r0, r2
 80073a4:	9105      	str	r1, [sp, #20]
 80073a6:	9204      	str	r2, [sp, #16]
 80073a8:	f7ff fd95 	bl	8006ed6 <__hexdig_fun>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d151      	bne.n	8007454 <__hexnan+0xe8>
 80073b0:	9a04      	ldr	r2, [sp, #16]
 80073b2:	9905      	ldr	r1, [sp, #20]
 80073b4:	2a20      	cmp	r2, #32
 80073b6:	d818      	bhi.n	80073ea <__hexnan+0x7e>
 80073b8:	9b02      	ldr	r3, [sp, #8]
 80073ba:	459b      	cmp	fp, r3
 80073bc:	dd13      	ble.n	80073e6 <__hexnan+0x7a>
 80073be:	454c      	cmp	r4, r9
 80073c0:	d206      	bcs.n	80073d0 <__hexnan+0x64>
 80073c2:	2d07      	cmp	r5, #7
 80073c4:	dc04      	bgt.n	80073d0 <__hexnan+0x64>
 80073c6:	462a      	mov	r2, r5
 80073c8:	4649      	mov	r1, r9
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7ff ffa8 	bl	8007320 <L_shift>
 80073d0:	4544      	cmp	r4, r8
 80073d2:	d952      	bls.n	800747a <__hexnan+0x10e>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f1a4 0904 	sub.w	r9, r4, #4
 80073da:	f844 3c04 	str.w	r3, [r4, #-4]
 80073de:	461d      	mov	r5, r3
 80073e0:	464c      	mov	r4, r9
 80073e2:	f8cd b008 	str.w	fp, [sp, #8]
 80073e6:	9903      	ldr	r1, [sp, #12]
 80073e8:	e7d7      	b.n	800739a <__hexnan+0x2e>
 80073ea:	2a29      	cmp	r2, #41	@ 0x29
 80073ec:	d157      	bne.n	800749e <__hexnan+0x132>
 80073ee:	3102      	adds	r1, #2
 80073f0:	f8ca 1000 	str.w	r1, [sl]
 80073f4:	f1bb 0f00 	cmp.w	fp, #0
 80073f8:	d051      	beq.n	800749e <__hexnan+0x132>
 80073fa:	454c      	cmp	r4, r9
 80073fc:	d206      	bcs.n	800740c <__hexnan+0xa0>
 80073fe:	2d07      	cmp	r5, #7
 8007400:	dc04      	bgt.n	800740c <__hexnan+0xa0>
 8007402:	462a      	mov	r2, r5
 8007404:	4649      	mov	r1, r9
 8007406:	4620      	mov	r0, r4
 8007408:	f7ff ff8a 	bl	8007320 <L_shift>
 800740c:	4544      	cmp	r4, r8
 800740e:	d936      	bls.n	800747e <__hexnan+0x112>
 8007410:	4623      	mov	r3, r4
 8007412:	f1a8 0204 	sub.w	r2, r8, #4
 8007416:	f853 1b04 	ldr.w	r1, [r3], #4
 800741a:	429f      	cmp	r7, r3
 800741c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007420:	d2f9      	bcs.n	8007416 <__hexnan+0xaa>
 8007422:	1b3b      	subs	r3, r7, r4
 8007424:	f023 0303 	bic.w	r3, r3, #3
 8007428:	3304      	adds	r3, #4
 800742a:	3401      	adds	r4, #1
 800742c:	3e03      	subs	r6, #3
 800742e:	42b4      	cmp	r4, r6
 8007430:	bf88      	it	hi
 8007432:	2304      	movhi	r3, #4
 8007434:	2200      	movs	r2, #0
 8007436:	4443      	add	r3, r8
 8007438:	f843 2b04 	str.w	r2, [r3], #4
 800743c:	429f      	cmp	r7, r3
 800743e:	d2fb      	bcs.n	8007438 <__hexnan+0xcc>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	b91b      	cbnz	r3, 800744c <__hexnan+0xe0>
 8007444:	4547      	cmp	r7, r8
 8007446:	d128      	bne.n	800749a <__hexnan+0x12e>
 8007448:	2301      	movs	r3, #1
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	2005      	movs	r0, #5
 800744e:	b007      	add	sp, #28
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	3501      	adds	r5, #1
 8007456:	2d08      	cmp	r5, #8
 8007458:	f10b 0b01 	add.w	fp, fp, #1
 800745c:	dd06      	ble.n	800746c <__hexnan+0x100>
 800745e:	4544      	cmp	r4, r8
 8007460:	d9c1      	bls.n	80073e6 <__hexnan+0x7a>
 8007462:	2300      	movs	r3, #0
 8007464:	2501      	movs	r5, #1
 8007466:	f844 3c04 	str.w	r3, [r4, #-4]
 800746a:	3c04      	subs	r4, #4
 800746c:	6822      	ldr	r2, [r4, #0]
 800746e:	f000 000f 	and.w	r0, r0, #15
 8007472:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007476:	6020      	str	r0, [r4, #0]
 8007478:	e7b5      	b.n	80073e6 <__hexnan+0x7a>
 800747a:	2508      	movs	r5, #8
 800747c:	e7b3      	b.n	80073e6 <__hexnan+0x7a>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0dd      	beq.n	8007440 <__hexnan+0xd4>
 8007484:	f04f 32ff 	mov.w	r2, #4294967295
 8007488:	f1c3 0320 	rsb	r3, r3, #32
 800748c:	40da      	lsrs	r2, r3
 800748e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007492:	4013      	ands	r3, r2
 8007494:	f846 3c04 	str.w	r3, [r6, #-4]
 8007498:	e7d2      	b.n	8007440 <__hexnan+0xd4>
 800749a:	3f04      	subs	r7, #4
 800749c:	e7d0      	b.n	8007440 <__hexnan+0xd4>
 800749e:	2004      	movs	r0, #4
 80074a0:	e7d5      	b.n	800744e <__hexnan+0xe2>

080074a2 <__ascii_mbtowc>:
 80074a2:	b082      	sub	sp, #8
 80074a4:	b901      	cbnz	r1, 80074a8 <__ascii_mbtowc+0x6>
 80074a6:	a901      	add	r1, sp, #4
 80074a8:	b142      	cbz	r2, 80074bc <__ascii_mbtowc+0x1a>
 80074aa:	b14b      	cbz	r3, 80074c0 <__ascii_mbtowc+0x1e>
 80074ac:	7813      	ldrb	r3, [r2, #0]
 80074ae:	600b      	str	r3, [r1, #0]
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	1e10      	subs	r0, r2, #0
 80074b4:	bf18      	it	ne
 80074b6:	2001      	movne	r0, #1
 80074b8:	b002      	add	sp, #8
 80074ba:	4770      	bx	lr
 80074bc:	4610      	mov	r0, r2
 80074be:	e7fb      	b.n	80074b8 <__ascii_mbtowc+0x16>
 80074c0:	f06f 0001 	mvn.w	r0, #1
 80074c4:	e7f8      	b.n	80074b8 <__ascii_mbtowc+0x16>

080074c6 <_realloc_r>:
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	4607      	mov	r7, r0
 80074cc:	4614      	mov	r4, r2
 80074ce:	460d      	mov	r5, r1
 80074d0:	b921      	cbnz	r1, 80074dc <_realloc_r+0x16>
 80074d2:	4611      	mov	r1, r2
 80074d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074d8:	f7fd be80 	b.w	80051dc <_malloc_r>
 80074dc:	b92a      	cbnz	r2, 80074ea <_realloc_r+0x24>
 80074de:	f7fd fe0b 	bl	80050f8 <_free_r>
 80074e2:	4625      	mov	r5, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ea:	f000 f840 	bl	800756e <_malloc_usable_size_r>
 80074ee:	4284      	cmp	r4, r0
 80074f0:	4606      	mov	r6, r0
 80074f2:	d802      	bhi.n	80074fa <_realloc_r+0x34>
 80074f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074f8:	d8f4      	bhi.n	80074e4 <_realloc_r+0x1e>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7fd fe6d 	bl	80051dc <_malloc_r>
 8007502:	4680      	mov	r8, r0
 8007504:	b908      	cbnz	r0, 800750a <_realloc_r+0x44>
 8007506:	4645      	mov	r5, r8
 8007508:	e7ec      	b.n	80074e4 <_realloc_r+0x1e>
 800750a:	42b4      	cmp	r4, r6
 800750c:	4622      	mov	r2, r4
 800750e:	4629      	mov	r1, r5
 8007510:	bf28      	it	cs
 8007512:	4632      	movcs	r2, r6
 8007514:	f7ff fc46 	bl	8006da4 <memcpy>
 8007518:	4629      	mov	r1, r5
 800751a:	4638      	mov	r0, r7
 800751c:	f7fd fdec 	bl	80050f8 <_free_r>
 8007520:	e7f1      	b.n	8007506 <_realloc_r+0x40>

08007522 <__ascii_wctomb>:
 8007522:	4603      	mov	r3, r0
 8007524:	4608      	mov	r0, r1
 8007526:	b141      	cbz	r1, 800753a <__ascii_wctomb+0x18>
 8007528:	2aff      	cmp	r2, #255	@ 0xff
 800752a:	d904      	bls.n	8007536 <__ascii_wctomb+0x14>
 800752c:	228a      	movs	r2, #138	@ 0x8a
 800752e:	f04f 30ff 	mov.w	r0, #4294967295
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	4770      	bx	lr
 8007536:	2001      	movs	r0, #1
 8007538:	700a      	strb	r2, [r1, #0]
 800753a:	4770      	bx	lr

0800753c <fiprintf>:
 800753c:	b40e      	push	{r1, r2, r3}
 800753e:	b503      	push	{r0, r1, lr}
 8007540:	4601      	mov	r1, r0
 8007542:	ab03      	add	r3, sp, #12
 8007544:	4805      	ldr	r0, [pc, #20]	@ (800755c <fiprintf+0x20>)
 8007546:	f853 2b04 	ldr.w	r2, [r3], #4
 800754a:	6800      	ldr	r0, [r0, #0]
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	f000 f83d 	bl	80075cc <_vfiprintf_r>
 8007552:	b002      	add	sp, #8
 8007554:	f85d eb04 	ldr.w	lr, [sp], #4
 8007558:	b003      	add	sp, #12
 800755a:	4770      	bx	lr
 800755c:	20000018 	.word	0x20000018

08007560 <abort>:
 8007560:	2006      	movs	r0, #6
 8007562:	b508      	push	{r3, lr}
 8007564:	f000 fa06 	bl	8007974 <raise>
 8007568:	2001      	movs	r0, #1
 800756a:	f7fa fc36 	bl	8001dda <_exit>

0800756e <_malloc_usable_size_r>:
 800756e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007572:	1f18      	subs	r0, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	bfbc      	itt	lt
 8007578:	580b      	ldrlt	r3, [r1, r0]
 800757a:	18c0      	addlt	r0, r0, r3
 800757c:	4770      	bx	lr

0800757e <__sfputc_r>:
 800757e:	6893      	ldr	r3, [r2, #8]
 8007580:	b410      	push	{r4}
 8007582:	3b01      	subs	r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	6093      	str	r3, [r2, #8]
 8007588:	da07      	bge.n	800759a <__sfputc_r+0x1c>
 800758a:	6994      	ldr	r4, [r2, #24]
 800758c:	42a3      	cmp	r3, r4
 800758e:	db01      	blt.n	8007594 <__sfputc_r+0x16>
 8007590:	290a      	cmp	r1, #10
 8007592:	d102      	bne.n	800759a <__sfputc_r+0x1c>
 8007594:	bc10      	pop	{r4}
 8007596:	f000 b931 	b.w	80077fc <__swbuf_r>
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	1c58      	adds	r0, r3, #1
 800759e:	6010      	str	r0, [r2, #0]
 80075a0:	7019      	strb	r1, [r3, #0]
 80075a2:	4608      	mov	r0, r1
 80075a4:	bc10      	pop	{r4}
 80075a6:	4770      	bx	lr

080075a8 <__sfputs_r>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	4614      	mov	r4, r2
 80075b0:	18d5      	adds	r5, r2, r3
 80075b2:	42ac      	cmp	r4, r5
 80075b4:	d101      	bne.n	80075ba <__sfputs_r+0x12>
 80075b6:	2000      	movs	r0, #0
 80075b8:	e007      	b.n	80075ca <__sfputs_r+0x22>
 80075ba:	463a      	mov	r2, r7
 80075bc:	4630      	mov	r0, r6
 80075be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c2:	f7ff ffdc 	bl	800757e <__sfputc_r>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	d1f3      	bne.n	80075b2 <__sfputs_r+0xa>
 80075ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075cc <_vfiprintf_r>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460d      	mov	r5, r1
 80075d2:	4614      	mov	r4, r2
 80075d4:	4698      	mov	r8, r3
 80075d6:	4606      	mov	r6, r0
 80075d8:	b09d      	sub	sp, #116	@ 0x74
 80075da:	b118      	cbz	r0, 80075e4 <_vfiprintf_r+0x18>
 80075dc:	6a03      	ldr	r3, [r0, #32]
 80075de:	b90b      	cbnz	r3, 80075e4 <_vfiprintf_r+0x18>
 80075e0:	f7fc fdf0 	bl	80041c4 <__sinit>
 80075e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075e6:	07d9      	lsls	r1, r3, #31
 80075e8:	d405      	bmi.n	80075f6 <_vfiprintf_r+0x2a>
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	059a      	lsls	r2, r3, #22
 80075ee:	d402      	bmi.n	80075f6 <_vfiprintf_r+0x2a>
 80075f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075f2:	f7fc ff0e 	bl	8004412 <__retarget_lock_acquire_recursive>
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	071b      	lsls	r3, r3, #28
 80075fa:	d501      	bpl.n	8007600 <_vfiprintf_r+0x34>
 80075fc:	692b      	ldr	r3, [r5, #16]
 80075fe:	b99b      	cbnz	r3, 8007628 <_vfiprintf_r+0x5c>
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f000 f938 	bl	8007878 <__swsetup_r>
 8007608:	b170      	cbz	r0, 8007628 <_vfiprintf_r+0x5c>
 800760a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800760c:	07dc      	lsls	r4, r3, #31
 800760e:	d504      	bpl.n	800761a <_vfiprintf_r+0x4e>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b01d      	add	sp, #116	@ 0x74
 8007616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	0598      	lsls	r0, r3, #22
 800761e:	d4f7      	bmi.n	8007610 <_vfiprintf_r+0x44>
 8007620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007622:	f7fc fef7 	bl	8004414 <__retarget_lock_release_recursive>
 8007626:	e7f3      	b.n	8007610 <_vfiprintf_r+0x44>
 8007628:	2300      	movs	r3, #0
 800762a:	9309      	str	r3, [sp, #36]	@ 0x24
 800762c:	2320      	movs	r3, #32
 800762e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007632:	2330      	movs	r3, #48	@ 0x30
 8007634:	f04f 0901 	mov.w	r9, #1
 8007638:	f8cd 800c 	str.w	r8, [sp, #12]
 800763c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80077e8 <_vfiprintf_r+0x21c>
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007644:	4623      	mov	r3, r4
 8007646:	469a      	mov	sl, r3
 8007648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800764c:	b10a      	cbz	r2, 8007652 <_vfiprintf_r+0x86>
 800764e:	2a25      	cmp	r2, #37	@ 0x25
 8007650:	d1f9      	bne.n	8007646 <_vfiprintf_r+0x7a>
 8007652:	ebba 0b04 	subs.w	fp, sl, r4
 8007656:	d00b      	beq.n	8007670 <_vfiprintf_r+0xa4>
 8007658:	465b      	mov	r3, fp
 800765a:	4622      	mov	r2, r4
 800765c:	4629      	mov	r1, r5
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff ffa2 	bl	80075a8 <__sfputs_r>
 8007664:	3001      	adds	r0, #1
 8007666:	f000 80a7 	beq.w	80077b8 <_vfiprintf_r+0x1ec>
 800766a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800766c:	445a      	add	r2, fp
 800766e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007670:	f89a 3000 	ldrb.w	r3, [sl]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 809f 	beq.w	80077b8 <_vfiprintf_r+0x1ec>
 800767a:	2300      	movs	r3, #0
 800767c:	f04f 32ff 	mov.w	r2, #4294967295
 8007680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007684:	f10a 0a01 	add.w	sl, sl, #1
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	9307      	str	r3, [sp, #28]
 800768c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007690:	931a      	str	r3, [sp, #104]	@ 0x68
 8007692:	4654      	mov	r4, sl
 8007694:	2205      	movs	r2, #5
 8007696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769a:	4853      	ldr	r0, [pc, #332]	@ (80077e8 <_vfiprintf_r+0x21c>)
 800769c:	f7fc febb 	bl	8004416 <memchr>
 80076a0:	9a04      	ldr	r2, [sp, #16]
 80076a2:	b9d8      	cbnz	r0, 80076dc <_vfiprintf_r+0x110>
 80076a4:	06d1      	lsls	r1, r2, #27
 80076a6:	bf44      	itt	mi
 80076a8:	2320      	movmi	r3, #32
 80076aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ae:	0713      	lsls	r3, r2, #28
 80076b0:	bf44      	itt	mi
 80076b2:	232b      	movmi	r3, #43	@ 0x2b
 80076b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b8:	f89a 3000 	ldrb.w	r3, [sl]
 80076bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80076be:	d015      	beq.n	80076ec <_vfiprintf_r+0x120>
 80076c0:	4654      	mov	r4, sl
 80076c2:	2000      	movs	r0, #0
 80076c4:	f04f 0c0a 	mov.w	ip, #10
 80076c8:	9a07      	ldr	r2, [sp, #28]
 80076ca:	4621      	mov	r1, r4
 80076cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d0:	3b30      	subs	r3, #48	@ 0x30
 80076d2:	2b09      	cmp	r3, #9
 80076d4:	d94b      	bls.n	800776e <_vfiprintf_r+0x1a2>
 80076d6:	b1b0      	cbz	r0, 8007706 <_vfiprintf_r+0x13a>
 80076d8:	9207      	str	r2, [sp, #28]
 80076da:	e014      	b.n	8007706 <_vfiprintf_r+0x13a>
 80076dc:	eba0 0308 	sub.w	r3, r0, r8
 80076e0:	fa09 f303 	lsl.w	r3, r9, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	46a2      	mov	sl, r4
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	e7d2      	b.n	8007692 <_vfiprintf_r+0xc6>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	1d19      	adds	r1, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	9103      	str	r1, [sp, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfbb      	ittet	lt
 80076f8:	425b      	neglt	r3, r3
 80076fa:	f042 0202 	orrlt.w	r2, r2, #2
 80076fe:	9307      	strge	r3, [sp, #28]
 8007700:	9307      	strlt	r3, [sp, #28]
 8007702:	bfb8      	it	lt
 8007704:	9204      	strlt	r2, [sp, #16]
 8007706:	7823      	ldrb	r3, [r4, #0]
 8007708:	2b2e      	cmp	r3, #46	@ 0x2e
 800770a:	d10a      	bne.n	8007722 <_vfiprintf_r+0x156>
 800770c:	7863      	ldrb	r3, [r4, #1]
 800770e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007710:	d132      	bne.n	8007778 <_vfiprintf_r+0x1ac>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	3402      	adds	r4, #2
 8007716:	1d1a      	adds	r2, r3, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	9203      	str	r2, [sp, #12]
 800771c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80077ec <_vfiprintf_r+0x220>
 8007726:	2203      	movs	r2, #3
 8007728:	4650      	mov	r0, sl
 800772a:	7821      	ldrb	r1, [r4, #0]
 800772c:	f7fc fe73 	bl	8004416 <memchr>
 8007730:	b138      	cbz	r0, 8007742 <_vfiprintf_r+0x176>
 8007732:	2240      	movs	r2, #64	@ 0x40
 8007734:	9b04      	ldr	r3, [sp, #16]
 8007736:	eba0 000a 	sub.w	r0, r0, sl
 800773a:	4082      	lsls	r2, r0
 800773c:	4313      	orrs	r3, r2
 800773e:	3401      	adds	r4, #1
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007746:	2206      	movs	r2, #6
 8007748:	4829      	ldr	r0, [pc, #164]	@ (80077f0 <_vfiprintf_r+0x224>)
 800774a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800774e:	f7fc fe62 	bl	8004416 <memchr>
 8007752:	2800      	cmp	r0, #0
 8007754:	d03f      	beq.n	80077d6 <_vfiprintf_r+0x20a>
 8007756:	4b27      	ldr	r3, [pc, #156]	@ (80077f4 <_vfiprintf_r+0x228>)
 8007758:	bb1b      	cbnz	r3, 80077a2 <_vfiprintf_r+0x1d6>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	3307      	adds	r3, #7
 800775e:	f023 0307 	bic.w	r3, r3, #7
 8007762:	3308      	adds	r3, #8
 8007764:	9303      	str	r3, [sp, #12]
 8007766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007768:	443b      	add	r3, r7
 800776a:	9309      	str	r3, [sp, #36]	@ 0x24
 800776c:	e76a      	b.n	8007644 <_vfiprintf_r+0x78>
 800776e:	460c      	mov	r4, r1
 8007770:	2001      	movs	r0, #1
 8007772:	fb0c 3202 	mla	r2, ip, r2, r3
 8007776:	e7a8      	b.n	80076ca <_vfiprintf_r+0xfe>
 8007778:	2300      	movs	r3, #0
 800777a:	f04f 0c0a 	mov.w	ip, #10
 800777e:	4619      	mov	r1, r3
 8007780:	3401      	adds	r4, #1
 8007782:	9305      	str	r3, [sp, #20]
 8007784:	4620      	mov	r0, r4
 8007786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800778a:	3a30      	subs	r2, #48	@ 0x30
 800778c:	2a09      	cmp	r2, #9
 800778e:	d903      	bls.n	8007798 <_vfiprintf_r+0x1cc>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0c6      	beq.n	8007722 <_vfiprintf_r+0x156>
 8007794:	9105      	str	r1, [sp, #20]
 8007796:	e7c4      	b.n	8007722 <_vfiprintf_r+0x156>
 8007798:	4604      	mov	r4, r0
 800779a:	2301      	movs	r3, #1
 800779c:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a0:	e7f0      	b.n	8007784 <_vfiprintf_r+0x1b8>
 80077a2:	ab03      	add	r3, sp, #12
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	462a      	mov	r2, r5
 80077a8:	4630      	mov	r0, r6
 80077aa:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <_vfiprintf_r+0x22c>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	f7fb feb7 	bl	8003520 <_printf_float>
 80077b2:	4607      	mov	r7, r0
 80077b4:	1c78      	adds	r0, r7, #1
 80077b6:	d1d6      	bne.n	8007766 <_vfiprintf_r+0x19a>
 80077b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077ba:	07d9      	lsls	r1, r3, #31
 80077bc:	d405      	bmi.n	80077ca <_vfiprintf_r+0x1fe>
 80077be:	89ab      	ldrh	r3, [r5, #12]
 80077c0:	059a      	lsls	r2, r3, #22
 80077c2:	d402      	bmi.n	80077ca <_vfiprintf_r+0x1fe>
 80077c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077c6:	f7fc fe25 	bl	8004414 <__retarget_lock_release_recursive>
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	065b      	lsls	r3, r3, #25
 80077ce:	f53f af1f 	bmi.w	8007610 <_vfiprintf_r+0x44>
 80077d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077d4:	e71e      	b.n	8007614 <_vfiprintf_r+0x48>
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	462a      	mov	r2, r5
 80077dc:	4630      	mov	r0, r6
 80077de:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <_vfiprintf_r+0x22c>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	f7fc f93b 	bl	8003a5c <_printf_i>
 80077e6:	e7e4      	b.n	80077b2 <_vfiprintf_r+0x1e6>
 80077e8:	08007d47 	.word	0x08007d47
 80077ec:	08007d4d 	.word	0x08007d4d
 80077f0:	08007d51 	.word	0x08007d51
 80077f4:	08003521 	.word	0x08003521
 80077f8:	080075a9 	.word	0x080075a9

080077fc <__swbuf_r>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	460e      	mov	r6, r1
 8007800:	4614      	mov	r4, r2
 8007802:	4605      	mov	r5, r0
 8007804:	b118      	cbz	r0, 800780e <__swbuf_r+0x12>
 8007806:	6a03      	ldr	r3, [r0, #32]
 8007808:	b90b      	cbnz	r3, 800780e <__swbuf_r+0x12>
 800780a:	f7fc fcdb 	bl	80041c4 <__sinit>
 800780e:	69a3      	ldr	r3, [r4, #24]
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	071a      	lsls	r2, r3, #28
 8007816:	d501      	bpl.n	800781c <__swbuf_r+0x20>
 8007818:	6923      	ldr	r3, [r4, #16]
 800781a:	b943      	cbnz	r3, 800782e <__swbuf_r+0x32>
 800781c:	4621      	mov	r1, r4
 800781e:	4628      	mov	r0, r5
 8007820:	f000 f82a 	bl	8007878 <__swsetup_r>
 8007824:	b118      	cbz	r0, 800782e <__swbuf_r+0x32>
 8007826:	f04f 37ff 	mov.w	r7, #4294967295
 800782a:	4638      	mov	r0, r7
 800782c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	6922      	ldr	r2, [r4, #16]
 8007832:	b2f6      	uxtb	r6, r6
 8007834:	1a98      	subs	r0, r3, r2
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	4637      	mov	r7, r6
 800783a:	4283      	cmp	r3, r0
 800783c:	dc05      	bgt.n	800784a <__swbuf_r+0x4e>
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f7ff fa4b 	bl	8006cdc <_fflush_r>
 8007846:	2800      	cmp	r0, #0
 8007848:	d1ed      	bne.n	8007826 <__swbuf_r+0x2a>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	3b01      	subs	r3, #1
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	701e      	strb	r6, [r3, #0]
 8007858:	6962      	ldr	r2, [r4, #20]
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	429a      	cmp	r2, r3
 800785e:	d004      	beq.n	800786a <__swbuf_r+0x6e>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d5e1      	bpl.n	800782a <__swbuf_r+0x2e>
 8007866:	2e0a      	cmp	r6, #10
 8007868:	d1df      	bne.n	800782a <__swbuf_r+0x2e>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f7ff fa35 	bl	8006cdc <_fflush_r>
 8007872:	2800      	cmp	r0, #0
 8007874:	d0d9      	beq.n	800782a <__swbuf_r+0x2e>
 8007876:	e7d6      	b.n	8007826 <__swbuf_r+0x2a>

08007878 <__swsetup_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4b29      	ldr	r3, [pc, #164]	@ (8007920 <__swsetup_r+0xa8>)
 800787c:	4605      	mov	r5, r0
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	460c      	mov	r4, r1
 8007882:	b118      	cbz	r0, 800788c <__swsetup_r+0x14>
 8007884:	6a03      	ldr	r3, [r0, #32]
 8007886:	b90b      	cbnz	r3, 800788c <__swsetup_r+0x14>
 8007888:	f7fc fc9c 	bl	80041c4 <__sinit>
 800788c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007890:	0719      	lsls	r1, r3, #28
 8007892:	d422      	bmi.n	80078da <__swsetup_r+0x62>
 8007894:	06da      	lsls	r2, r3, #27
 8007896:	d407      	bmi.n	80078a8 <__swsetup_r+0x30>
 8007898:	2209      	movs	r2, #9
 800789a:	602a      	str	r2, [r5, #0]
 800789c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	e033      	b.n	8007910 <__swsetup_r+0x98>
 80078a8:	0758      	lsls	r0, r3, #29
 80078aa:	d512      	bpl.n	80078d2 <__swsetup_r+0x5a>
 80078ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ae:	b141      	cbz	r1, 80078c2 <__swsetup_r+0x4a>
 80078b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078b4:	4299      	cmp	r1, r3
 80078b6:	d002      	beq.n	80078be <__swsetup_r+0x46>
 80078b8:	4628      	mov	r0, r5
 80078ba:	f7fd fc1d 	bl	80050f8 <_free_r>
 80078be:	2300      	movs	r3, #0
 80078c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	2300      	movs	r3, #0
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f043 0308 	orr.w	r3, r3, #8
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	b94b      	cbnz	r3, 80078f2 <__swsetup_r+0x7a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e8:	d003      	beq.n	80078f2 <__swsetup_r+0x7a>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f882 	bl	80079f6 <__smakebuf_r>
 80078f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f6:	f013 0201 	ands.w	r2, r3, #1
 80078fa:	d00a      	beq.n	8007912 <__swsetup_r+0x9a>
 80078fc:	2200      	movs	r2, #0
 80078fe:	60a2      	str	r2, [r4, #8]
 8007900:	6962      	ldr	r2, [r4, #20]
 8007902:	4252      	negs	r2, r2
 8007904:	61a2      	str	r2, [r4, #24]
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	b942      	cbnz	r2, 800791c <__swsetup_r+0xa4>
 800790a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800790e:	d1c5      	bne.n	800789c <__swsetup_r+0x24>
 8007910:	bd38      	pop	{r3, r4, r5, pc}
 8007912:	0799      	lsls	r1, r3, #30
 8007914:	bf58      	it	pl
 8007916:	6962      	ldrpl	r2, [r4, #20]
 8007918:	60a2      	str	r2, [r4, #8]
 800791a:	e7f4      	b.n	8007906 <__swsetup_r+0x8e>
 800791c:	2000      	movs	r0, #0
 800791e:	e7f7      	b.n	8007910 <__swsetup_r+0x98>
 8007920:	20000018 	.word	0x20000018

08007924 <_raise_r>:
 8007924:	291f      	cmp	r1, #31
 8007926:	b538      	push	{r3, r4, r5, lr}
 8007928:	4605      	mov	r5, r0
 800792a:	460c      	mov	r4, r1
 800792c:	d904      	bls.n	8007938 <_raise_r+0x14>
 800792e:	2316      	movs	r3, #22
 8007930:	6003      	str	r3, [r0, #0]
 8007932:	f04f 30ff 	mov.w	r0, #4294967295
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800793a:	b112      	cbz	r2, 8007942 <_raise_r+0x1e>
 800793c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007940:	b94b      	cbnz	r3, 8007956 <_raise_r+0x32>
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f830 	bl	80079a8 <_getpid_r>
 8007948:	4622      	mov	r2, r4
 800794a:	4601      	mov	r1, r0
 800794c:	4628      	mov	r0, r5
 800794e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007952:	f000 b817 	b.w	8007984 <_kill_r>
 8007956:	2b01      	cmp	r3, #1
 8007958:	d00a      	beq.n	8007970 <_raise_r+0x4c>
 800795a:	1c59      	adds	r1, r3, #1
 800795c:	d103      	bne.n	8007966 <_raise_r+0x42>
 800795e:	2316      	movs	r3, #22
 8007960:	6003      	str	r3, [r0, #0]
 8007962:	2001      	movs	r0, #1
 8007964:	e7e7      	b.n	8007936 <_raise_r+0x12>
 8007966:	2100      	movs	r1, #0
 8007968:	4620      	mov	r0, r4
 800796a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800796e:	4798      	blx	r3
 8007970:	2000      	movs	r0, #0
 8007972:	e7e0      	b.n	8007936 <_raise_r+0x12>

08007974 <raise>:
 8007974:	4b02      	ldr	r3, [pc, #8]	@ (8007980 <raise+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f7ff bfd3 	b.w	8007924 <_raise_r>
 800797e:	bf00      	nop
 8007980:	20000018 	.word	0x20000018

08007984 <_kill_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	2300      	movs	r3, #0
 8007988:	4d06      	ldr	r5, [pc, #24]	@ (80079a4 <_kill_r+0x20>)
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	4611      	mov	r1, r2
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	f7fa fa12 	bl	8001dba <_kill>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	d102      	bne.n	80079a0 <_kill_r+0x1c>
 800799a:	682b      	ldr	r3, [r5, #0]
 800799c:	b103      	cbz	r3, 80079a0 <_kill_r+0x1c>
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	bd38      	pop	{r3, r4, r5, pc}
 80079a2:	bf00      	nop
 80079a4:	200003f8 	.word	0x200003f8

080079a8 <_getpid_r>:
 80079a8:	f7fa ba00 	b.w	8001dac <_getpid>

080079ac <__swhatbuf_r>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	460c      	mov	r4, r1
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	4615      	mov	r5, r2
 80079b6:	2900      	cmp	r1, #0
 80079b8:	461e      	mov	r6, r3
 80079ba:	b096      	sub	sp, #88	@ 0x58
 80079bc:	da0c      	bge.n	80079d8 <__swhatbuf_r+0x2c>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	2100      	movs	r1, #0
 80079c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079c6:	bf14      	ite	ne
 80079c8:	2340      	movne	r3, #64	@ 0x40
 80079ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079ce:	2000      	movs	r0, #0
 80079d0:	6031      	str	r1, [r6, #0]
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	b016      	add	sp, #88	@ 0x58
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	466a      	mov	r2, sp
 80079da:	f000 f849 	bl	8007a70 <_fstat_r>
 80079de:	2800      	cmp	r0, #0
 80079e0:	dbed      	blt.n	80079be <__swhatbuf_r+0x12>
 80079e2:	9901      	ldr	r1, [sp, #4]
 80079e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079ec:	4259      	negs	r1, r3
 80079ee:	4159      	adcs	r1, r3
 80079f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079f4:	e7eb      	b.n	80079ce <__swhatbuf_r+0x22>

080079f6 <__smakebuf_r>:
 80079f6:	898b      	ldrh	r3, [r1, #12]
 80079f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079fa:	079d      	lsls	r5, r3, #30
 80079fc:	4606      	mov	r6, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	d507      	bpl.n	8007a12 <__smakebuf_r+0x1c>
 8007a02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	6163      	str	r3, [r4, #20]
 8007a0e:	b003      	add	sp, #12
 8007a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a12:	466a      	mov	r2, sp
 8007a14:	ab01      	add	r3, sp, #4
 8007a16:	f7ff ffc9 	bl	80079ac <__swhatbuf_r>
 8007a1a:	9f00      	ldr	r7, [sp, #0]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	4639      	mov	r1, r7
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7fd fbdb 	bl	80051dc <_malloc_r>
 8007a26:	b948      	cbnz	r0, 8007a3c <__smakebuf_r+0x46>
 8007a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a2c:	059a      	lsls	r2, r3, #22
 8007a2e:	d4ee      	bmi.n	8007a0e <__smakebuf_r+0x18>
 8007a30:	f023 0303 	bic.w	r3, r3, #3
 8007a34:	f043 0302 	orr.w	r3, r3, #2
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	e7e2      	b.n	8007a02 <__smakebuf_r+0xc>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	6020      	str	r0, [r4, #0]
 8007a4c:	b15b      	cbz	r3, 8007a66 <__smakebuf_r+0x70>
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a54:	f000 f81e 	bl	8007a94 <_isatty_r>
 8007a58:	b128      	cbz	r0, 8007a66 <__smakebuf_r+0x70>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f023 0303 	bic.w	r3, r3, #3
 8007a60:	f043 0301 	orr.w	r3, r3, #1
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	431d      	orrs	r5, r3
 8007a6a:	81a5      	strh	r5, [r4, #12]
 8007a6c:	e7cf      	b.n	8007a0e <__smakebuf_r+0x18>
	...

08007a70 <_fstat_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	2300      	movs	r3, #0
 8007a74:	4d06      	ldr	r5, [pc, #24]	@ (8007a90 <_fstat_r+0x20>)
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	f7fa f9fb 	bl	8001e78 <_fstat>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	d102      	bne.n	8007a8c <_fstat_r+0x1c>
 8007a86:	682b      	ldr	r3, [r5, #0]
 8007a88:	b103      	cbz	r3, 8007a8c <_fstat_r+0x1c>
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	bf00      	nop
 8007a90:	200003f8 	.word	0x200003f8

08007a94 <_isatty_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	2300      	movs	r3, #0
 8007a98:	4d05      	ldr	r5, [pc, #20]	@ (8007ab0 <_isatty_r+0x1c>)
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	602b      	str	r3, [r5, #0]
 8007aa0:	f7fa f9f9 	bl	8001e96 <_isatty>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_isatty_r+0x1a>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_isatty_r+0x1a>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	200003f8 	.word	0x200003f8

08007ab4 <_init>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr

08007ac0 <_fini>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr
