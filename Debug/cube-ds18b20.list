
cube-ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a7c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea4  08008b90  08008b90  00009b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a34  08009a34  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a34  08009a34  0000aa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a3c  08009a3c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  0000aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009a44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  200001d4  08009c18  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08009c18  0000b860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad80  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa0  00000000  00000000  00015f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00017f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085c  00000000  00000000  000189f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d4  00000000  00000000  0001924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e516  00000000  00000000  00031820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867c4  00000000  00000000  0003fd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c64fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  000c6540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ca720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b74 	.word	0x08008b74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008b74 	.word	0x08008b74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_GPIO_Init+0xa8>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_DQ_Pin|RELAY_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2112      	movs	r1, #18
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011de:	f001 fe7a 	bl	8002ed6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011fa:	f001 fcd1 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80011fe:	2310      	movs	r3, #16
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001216:	f001 fcc3 	bl	8002ba0 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C1_Init+0x50>)
 800126a:	f001 fe4d 	bl	8002f08 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 fdcb 	bl	8001e0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f0 	.word	0x200001f0
 8001280:	40005400 	.word	0x40005400
 8001284:	00061a80 	.word	0x00061a80

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_I2C_MspInit+0x70>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d123      	bne.n	80012f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c0:	23c0      	movs	r3, #192	@ 0xc0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <HAL_I2C_MspInit+0x78>)
 80012d4:	f001 fc64 	bl	8002ba0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e2:	61d3      	str	r3, [r2, #28]
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_I2C_MspInit+0x74>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00

08001304 <RELAY_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

// 初始化继电器控制引脚
void RELAY_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2110      	movs	r1, #16
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <RELAY_Init+0x14>)
 800130e:	f001 fde2 	bl	8002ed6 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40010800 	.word	0x40010800

0800131c <RELAY_Control>:

// 控制继电器状态
void RELAY_Control(uint8_t state)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2110      	movs	r1, #16
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <RELAY_Control+0x28>)
 8001338:	f001 fdcd 	bl	8002ed6 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010800 	.word	0x40010800

08001348 <Delay_us>:

// 微秒级延时函数 (保持不变)
void Delay_us(uint16_t us)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  us *= 6;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	461a      	mov	r2, r3
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	80fb      	strh	r3, [r7, #6]
  while (us--)
 800135e:	e007      	b.n	8001370 <Delay_us+0x28>
  {
    __NOP();
 8001360:	bf00      	nop
    __NOP();
 8001362:	bf00      	nop
    __NOP();
 8001364:	bf00      	nop
    __NOP();
 8001366:	bf00      	nop
    __NOP();
 8001368:	bf00      	nop
    __NOP();
 800136a:	bf00      	nop
    __NOP();
 800136c:	bf00      	nop
    __NOP();
 800136e:	bf00      	nop
  while (us--)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	80fa      	strh	r2, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f2      	bne.n	8001360 <Delay_us+0x18>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <DS18B20_WriteBit>:

// 写1位数据 (保持不变)
void DS18B20_WriteBit(uint8_t bit)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2102      	movs	r1, #2
 8001396:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 8001398:	f001 fd9d 	bl	8002ed6 <HAL_GPIO_WritePin>
  Delay_us(1); // t_low1: 1-15us
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff ffd3 	bl	8001348 <Delay_us>
  if (bit)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <DS18B20_WriteBit+0x2a>
  {
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 写1
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013ae:	f001 fd92 	bl	8002ed6 <HAL_GPIO_WritePin>
  }
  else
  {
    // 保持低电平即可写0
  }
  Delay_us(60);                                               // t_slot: 60-120us
 80013b2:	203c      	movs	r0, #60	@ 0x3c
 80013b4:	f7ff ffc8 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 80013b8:	2201      	movs	r2, #1
 80013ba:	2102      	movs	r1, #2
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <DS18B20_WriteBit+0x48>)
 80013be:	f001 fd8a 	bl	8002ed6 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_rec: >1us
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ffc0 	bl	8001348 <Delay_us>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800

080013d4 <DS18B20_ReadBit>:

// 读1位数据 (保持不变)
uint8_t DS18B20_ReadBit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013e4:	f001 fd77 	bl	8002ed6 <HAL_GPIO_WritePin>
  Delay_us(1);                                                // t_low0: 1-15us
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ffad 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线，由从机拉低或保持高电平
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 80013f4:	f001 fd6f 	bl	8002ed6 <HAL_GPIO_WritePin>
  Delay_us(10);                                               // t_rdv: <15us (在15us内采样)
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ffa5 	bl	8001348 <Delay_us>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80013fe:	2102      	movs	r1, #2
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <DS18B20_ReadBit+0x4c>)
 8001402:	f001 fd51 	bl	8002ea8 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <DS18B20_ReadBit+0x3c>
  {
    bit = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  }
  Delay_us(50); // 等待时间片结束 (60-120us)
 8001410:	2032      	movs	r0, #50	@ 0x32
 8001412:	f7ff ff99 	bl	8001348 <Delay_us>
  return bit;
 8001416:	79fb      	ldrb	r3, [r7, #7]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40010800 	.word	0x40010800

08001424 <DS18B20_WriteByte>:

// 向DS18B20写入1字节 (保持不变)
void DS18B20_WriteByte(uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e00c      	b.n	800144e <DS18B20_WriteByte+0x2a>
  {
    DS18B20_WriteBit(data & 0x01);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffa3 	bl	8001388 <DS18B20_WriteBit>
    data >>= 1;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d9ef      	bls.n	8001434 <DS18B20_WriteByte+0x10>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <DS18B20_ReadByte>:

// 从DS18B20读取1字节 (保持不变)
uint8_t DS18B20_ReadByte(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	71bb      	strb	r3, [r7, #6]
 800146c:	e00e      	b.n	800148c <DS18B20_ReadByte+0x2e>
  {
    data >>= 1;
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	71fb      	strb	r3, [r7, #7]
    if (DS18B20_ReadBit())
 8001474:	f7ff ffae 	bl	80013d4 <DS18B20_ReadBit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <DS18B20_ReadByte+0x28>
    {
      data |= 0x80;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001484:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	3301      	adds	r3, #1
 800148a:	71bb      	strb	r3, [r7, #6]
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9ed      	bls.n	800146e <DS18B20_ReadByte+0x10>
    }
  }
  return data;
 8001492:	79fb      	ldrb	r3, [r7, #7]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <DS18B20_Reset>:

// 复位DS18B20 (保持不变)
// 返回 0 表示成功检测到存在脉冲, 1 表示无设备响应
uint8_t DS18B20_Reset(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  uint8_t status;
  // 配置为推挽输出
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DS18B20_PIN;
 80014ae:	2302      	movs	r3, #2
 80014b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	481e      	ldr	r0, [pc, #120]	@ (800153c <DS18B20_Reset+0xa0>)
 80014c4:	f001 fb6c 	bl	8002ba0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	481b      	ldr	r0, [pc, #108]	@ (800153c <DS18B20_Reset+0xa0>)
 80014ce:	f001 fd02 	bl	8002ed6 <HAL_GPIO_WritePin>
  Delay_us(480); // 至少480us
 80014d2:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80014d6:	f7ff ff37 	bl	8001348 <Delay_us>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2102      	movs	r1, #2
 80014de:	4817      	ldr	r0, [pc, #92]	@ (800153c <DS18B20_Reset+0xa0>)
 80014e0:	f001 fcf9 	bl	8002ed6 <HAL_GPIO_WritePin>

  // 配置为浮空输入
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 或 GPIO_PULLUP，取决于外部上拉
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4812      	ldr	r0, [pc, #72]	@ (800153c <DS18B20_Reset+0xa0>)
 80014f2:	f001 fb55 	bl	8002ba0 <HAL_GPIO_Init>

  Delay_us(60);                                         // 等待15-60us后采样
 80014f6:	203c      	movs	r0, #60	@ 0x3c
 80014f8:	f7ff ff26 	bl	8001348 <Delay_us>
  status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN); // 读取存在脉冲 (低电平有效)
 80014fc:	2102      	movs	r1, #2
 80014fe:	480f      	ldr	r0, [pc, #60]	@ (800153c <DS18B20_Reset+0xa0>)
 8001500:	f001 fcd2 	bl	8002ea8 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	75fb      	strb	r3, [r7, #23]
  Delay_us(420);                                        // 等待存在脉冲结束 (总共480us)
 8001508:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800150c:	f7ff ff1c 	bl	8001348 <Delay_us>

  // 恢复为推挽输出，准备后续通信
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <DS18B20_Reset+0xa0>)
 8001522:	f001 fb3d 	bl	8002ba0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET); // 释放总线
 8001526:	2201      	movs	r2, #1
 8001528:	2102      	movs	r1, #2
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <DS18B20_Reset+0xa0>)
 800152c:	f001 fcd3 	bl	8002ed6 <HAL_GPIO_WritePin>

  return status; // 0=成功, 1=失败
 8001530:	7dfb      	ldrb	r3, [r7, #23]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010800 	.word	0x40010800

08001540 <crc8>:

// --- 新增：CRC8校验函数 ---
uint8_t crc8(const uint8_t *addr, uint8_t len)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  while (len--)
 8001550:	e022      	b.n	8001598 <crc8+0x58>
  {
    uint8_t inbyte = *addr++;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800155c:	2308      	movs	r3, #8
 800155e:	737b      	strb	r3, [r7, #13]
 8001560:	e017      	b.n	8001592 <crc8+0x52>
    {
      uint8_t mix = (crc ^ inbyte) & 0x01;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	4053      	eors	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      if (mix)
 8001576:	7b3b      	ldrb	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <crc8+0x46>
        crc ^= 0x8C; // 校验多项式 X^8 + X^5 + X^4 + 1
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001582:	43db      	mvns	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
      inbyte >>= 1;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	3b01      	subs	r3, #1
 8001590:	737b      	strb	r3, [r7, #13]
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <crc8+0x22>
  while (len--)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	70fa      	strb	r2, [r7, #3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1d7      	bne.n	8001552 <crc8+0x12>
    }
  }
  return crc;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <DS18B20_Search>:

// --- 新增：1-Wire ROM搜索核心函数 ---
// 返回值: 1 = 找到设备, 0 = 未找到/搜索完成
// rom_code: 用于存储找到的ROM地址
uint8_t DS18B20_Search(uint8_t *rom_code)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint8_t search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  // 初始化搜索状态 (仅在首次搜索时)
  id_bit_number = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	733b      	strb	r3, [r7, #12]

  // 如果上一次搜索是最后一次，则重置状态开始新的搜索
  if (LastDeviceFlag)
 80015cc:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <DS18B20_Search+0x3a>
  {
    LastDiscrepancy = 0;
 80015d4:	4b60      	ldr	r3, [pc, #384]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 80015da:	4b5e      	ldr	r3, [pc, #376]	@ (8001754 <DS18B20_Search+0x1a4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <DS18B20_Search+0x1ac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
    return 0; // 没有更多设备
 80015e6:	2300      	movs	r3, #0
 80015e8:	e0af      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 1. 发送复位脉冲
  if (DS18B20_Reset() != 0)
 80015ea:	f7ff ff57 	bl	800149c <DS18B20_Reset>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <DS18B20_Search+0x5a>
  {
    // 总线无响应，重置搜索状态并返回错误
    LastDiscrepancy = 0;
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <DS18B20_Search+0x1a8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 80015fa:	4b58      	ldr	r3, [pc, #352]	@ (800175c <DS18B20_Search+0x1ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001600:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e09f      	b.n	800174a <DS18B20_Search+0x19a>
  }

  // 2. 发送 ROM 搜索命令 (0xF0)
  DS18B20_WriteByte(0xF0);
 800160a:	20f0      	movs	r0, #240	@ 0xf0
 800160c:	f7ff ff0a 	bl	8001424 <DS18B20_WriteByte>

  // 3. 循环搜索 ROM 的每一位 (64位)
  do
  {
    // 读取两位 (bit 和 complement bit)
    id_bit = DS18B20_ReadBit();
 8001610:	f7ff fee0 	bl	80013d4 <DS18B20_ReadBit>
 8001614:	4603      	mov	r3, r0
 8001616:	727b      	strb	r3, [r7, #9]
    cmp_id_bit = DS18B20_ReadBit();
 8001618:	f7ff fedc 	bl	80013d4 <DS18B20_ReadBit>
 800161c:	4603      	mov	r3, r0
 800161e:	723b      	strb	r3, [r7, #8]

    // 检查冲突
    if ((id_bit == 1) && (cmp_id_bit == 1))
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <DS18B20_Search+0x7c>
 8001626:	7a3b      	ldrb	r3, [r7, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d061      	beq.n	80016f0 <DS18B20_Search+0x140>
      break;
    }
    else
    {
      // 设备响应了
      if (id_bit != cmp_id_bit)
 800162c:	7a7a      	ldrb	r2, [r7, #9]
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	d002      	beq.n	800163a <DS18B20_Search+0x8a>
      {
        // 所有设备在这一位上值相同，直接选择该位
        search_direction = id_bit;
 8001634:	7a7b      	ldrb	r3, [r7, #9]
 8001636:	72bb      	strb	r3, [r7, #10]
 8001638:	e026      	b.n	8001688 <DS18B20_Search+0xd8>
      }
      else
      {
        // 出现分歧 (Discrepancy)，即至少两个设备在这一位有不同值 (0和1)
        // 如果当前位 < 上次分歧位，选择上次确定的路径
        if (id_bit_number < LastDiscrepancy)
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <DS18B20_Search+0x1a8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	d20d      	bcs.n	8001660 <DS18B20_Search+0xb0>
        {
          search_direction = ((rom_code[rom_byte_number] & rom_byte_mask) > 0);
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	4013      	ands	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	72bb      	strb	r3, [r7, #10]
 800165e:	e008      	b.n	8001672 <DS18B20_Search+0xc2>
        }
        else
        {
          // 如果等于上次分歧位，选择1路径
          // 如果大于上次分歧位，选择0路径 (优先探索0分支)
          search_direction = (id_bit_number == LastDiscrepancy);
 8001660:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	429a      	cmp	r2, r3
 8001668:	bf0c      	ite	eq
 800166a:	2301      	moveq	r3, #1
 800166c:	2300      	movne	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	72bb      	strb	r3, [r7, #10]
        }

        // 如果选择0路径，记录下这个分歧点
        if (search_direction == 0)
 8001672:	7abb      	ldrb	r3, [r7, #10]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <DS18B20_Search+0xd8>
        {
          last_zero = id_bit_number;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	73bb      	strb	r3, [r7, #14]
          // 如果是家族码内的分歧，也记录
          if (last_zero < 9)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d802      	bhi.n	8001688 <DS18B20_Search+0xd8>
            LastFamilyDiscrepancy = last_zero;
 8001682:	4a36      	ldr	r2, [pc, #216]	@ (800175c <DS18B20_Search+0x1ac>)
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	7013      	strb	r3, [r2, #0]
        }
      }

      // 存储选择的位到 ROM code 中
      if (search_direction == 1)
 8001688:	7abb      	ldrb	r3, [r7, #10]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10b      	bne.n	80016a6 <DS18B20_Search+0xf6>
        rom_code[rom_byte_number] |= rom_byte_mask;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	430a      	orrs	r2, r1
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e00f      	b.n	80016c6 <DS18B20_Search+0x116>
      else
        rom_code[rom_byte_number] &= ~rom_byte_mask;
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	b259      	sxtb	r1, r3
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]

      // 发送选择的位，让不匹配的设备进入休眠
      DS18B20_WriteBit(search_direction);
 80016c6:	7abb      	ldrb	r3, [r7, #10]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe5d 	bl	8001388 <DS18B20_WriteBit>

      // 移到下一位
      id_bit_number++;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
      rom_byte_mask <<= 1;
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	72fb      	strb	r3, [r7, #11]

      // 如果一个字节的8位都处理完了，移到下一个字节
      if (rom_byte_mask == 0)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <DS18B20_Search+0x13a>
      {
        rom_byte_number++;
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	3301      	adds	r3, #1
 80016e4:	737b      	strb	r3, [r7, #13]
        rom_byte_mask = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	72fb      	strb	r3, [r7, #11]
      }
    }
  } while (rom_byte_number < 8); // 处理完8个字节 (64位)
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d98f      	bls.n	8001610 <DS18B20_Search+0x60>

  // 4. 检查搜索结果
  if (id_bit_number >= 65)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	d90b      	bls.n	800170e <DS18B20_Search+0x15e>
  { // 成功完成64位搜索
    // 更新下次搜索的分歧点
    LastDiscrepancy = last_zero;
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	7013      	strb	r3, [r2, #0]

    // 检查是否是最后一个设备
    if (LastDiscrepancy == 0)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <DS18B20_Search+0x1a8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <DS18B20_Search+0x15a>
    {
      LastDeviceFlag = 1; // 本次是最后一个设备
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <DS18B20_Search+0x1a4>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    }
    search_result = 1; // 成功找到一个设备
 800170a:	2301      	movs	r3, #1
 800170c:	733b      	strb	r3, [r7, #12]
  }

  // 如果搜索失败或CRC校验失败，重置状态
  if (search_result == 0 || rom_code[0] == 0x00 || crc8(rom_code, 7) != rom_code[7])
 800170e:	7b3b      	ldrb	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <DS18B20_Search+0x182>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <DS18B20_Search+0x182>
 800171c:	2107      	movs	r1, #7
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff0e 	bl	8001540 <crc8>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d00a      	beq.n	8001748 <DS18B20_Search+0x198>
  {
    LastDiscrepancy = 0;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <DS18B20_Search+0x1a8>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    LastDeviceFlag = 0;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <DS18B20_Search+0x1a4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    LastFamilyDiscrepancy = 0;
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <DS18B20_Search+0x1ac>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    search_result = 0; // 标记为失败
 8001744:	2300      	movs	r3, #0
 8001746:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 8001748:	7b3b      	ldrb	r3, [r7, #12]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000026f 	.word	0x2000026f
 8001758:	2000026d 	.word	0x2000026d
 800175c:	2000026e 	.word	0x2000026e

08001760 <DS18B20_ScanDevices>:

// --- 新增：扫描总线上的所有DS18B20设备 ---
void DS18B20_ScanDevices(void)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b0a7      	sub	sp, #156	@ 0x9c
 8001764:	af08      	add	r7, sp, #32
  uint8_t id[8];
  g_num_sensors = 0; // 重置计数器
 8001766:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

  // 重置搜索状态
  LastDiscrepancy = 0;
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <DS18B20_ScanDevices+0x168>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
  LastDeviceFlag = 0;
 8001772:	4b56      	ldr	r3, [pc, #344]	@ (80018cc <DS18B20_ScanDevices+0x16c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
  LastFamilyDiscrepancy = 0;
 8001778:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <DS18B20_ScanDevices+0x170>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]

  // 循环搜索，直到找不到更多设备
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 800177e:	e020      	b.n	80017c2 <DS18B20_ScanDevices+0x62>
  {
    // 检查是否是DS18B20家族码 (0x28)
    if (id[0] == 0x28)
 8001780:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001784:	2b28      	cmp	r3, #40	@ 0x28
 8001786:	d11c      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
    {
      // 检查CRC校验
      if (crc8(id, 7) == id[7])
 8001788:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800178c:	2107      	movs	r1, #7
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fed6 	bl	8001540 <crc8>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800179c:	429a      	cmp	r2, r3
 800179e:	d110      	bne.n	80017c2 <DS18B20_ScanDevices+0x62>
      {
        memcpy(g_ds18b20_roms[g_num_sensors], id, 8);
 80017a0:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017b0:	cb03      	ldmia	r3!, {r0, r1}
 80017b2:	6010      	str	r0, [r2, #0]
 80017b4:	6051      	str	r1, [r2, #4]
        g_num_sensors++;
 80017b6:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017c0:	701a      	strb	r2, [r3, #0]
  while (DS18B20_Search(id) && g_num_sensors < MAX_DS18B20_SENSORS)
 80017c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fef2 	bl	80015b0 <DS18B20_Search>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <DS18B20_ScanDevices+0x7a>
 80017d2:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d9d2      	bls.n	8001780 <DS18B20_ScanDevices+0x20>
    }
    // 如果需要支持其他家族码，可以在这里添加判断
  }
  // 可以在这里通过串口打印找到的传感器数量和ROM地址，用于调试
  char dbg_msg[100];
  sprintf(dbg_msg, "Found %d DS18B20 sensors.\r\n", g_num_sensors);
 80017da:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	493c      	ldr	r1, [pc, #240]	@ (80018d8 <DS18B20_ScanDevices+0x178>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fd84 	bl	80052f4 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 100);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcad 	bl	8000150 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f107 0108 	add.w	r1, r7, #8
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	4836      	ldr	r0, [pc, #216]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 8001802:	f002 fc7d 	bl	8004100 <HAL_UART_Transmit>
  for (int i = 0; i < g_num_sensors; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	677b      	str	r3, [r7, #116]	@ 0x74
 800180a:	e050      	b.n	80018ae <DS18B20_ScanDevices+0x14e>
  {
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 800180c:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800180e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	79db      	ldrb	r3, [r3, #7]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001816:	469c      	mov	ip, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001818:	4a2e      	ldr	r2, [pc, #184]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800181a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	799b      	ldrb	r3, [r3, #6]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001822:	4619      	mov	r1, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	795b      	ldrb	r3, [r3, #5]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800182e:	461c      	mov	r4, r3
            g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001830:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	791b      	ldrb	r3, [r3, #4]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800183a:	461d      	mov	r5, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 800183c:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800183e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	78db      	ldrb	r3, [r3, #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001846:	461e      	mov	r6, r3
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001848:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 800184a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	789b      	ldrb	r3, [r3, #2]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001852:	607b      	str	r3, [r7, #4]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001854:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	785b      	ldrb	r3, [r3, #1]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 800185e:	603b      	str	r3, [r7, #0]
            g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001860:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <DS18B20_ScanDevices+0x174>)
 8001862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001864:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    sprintf(dbg_msg, "Sensor %d ROM: %02X%02X%02X%02X%02X%02X%02X%02X\r\n", i,
 8001868:	f107 0008 	add.w	r0, r7, #8
 800186c:	9306      	str	r3, [sp, #24]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	9205      	str	r2, [sp, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	9304      	str	r3, [sp, #16]
 8001876:	9603      	str	r6, [sp, #12]
 8001878:	9502      	str	r5, [sp, #8]
 800187a:	9401      	str	r4, [sp, #4]
 800187c:	9100      	str	r1, [sp, #0]
 800187e:	4663      	mov	r3, ip
 8001880:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <DS18B20_ScanDevices+0x180>)
 8001884:	f003 fd36 	bl	80052f4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)dbg_msg, strlen(dbg_msg), 200);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc5f 	bl	8000150 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	23c8      	movs	r3, #200	@ 0xc8
 800189c:	480f      	ldr	r0, [pc, #60]	@ (80018dc <DS18B20_ScanDevices+0x17c>)
 800189e:	f002 fc2f 	bl	8004100 <HAL_UART_Transmit>
    HAL_Delay(10); // 短暂延时避免串口发送过快
 80018a2:	200a      	movs	r0, #10
 80018a4:	f001 f874 	bl	8002990 <HAL_Delay>
  for (int i = 0; i < g_num_sensors; i++)
 80018a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018aa:	3301      	adds	r3, #1
 80018ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <DS18B20_ScanDevices+0x164>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b6:	4293      	cmp	r3, r2
 80018b8:	dba8      	blt.n	800180c <DS18B20_ScanDevices+0xac>
  }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	377c      	adds	r7, #124	@ 0x7c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	2000026c 	.word	0x2000026c
 80018c8:	2000026d 	.word	0x2000026d
 80018cc:	2000026f 	.word	0x2000026f
 80018d0:	2000026e 	.word	0x2000026e
 80018d4:	20000244 	.word	0x20000244
 80018d8:	08008b90 	.word	0x08008b90
 80018dc:	200006c8 	.word	0x200006c8
 80018e0:	08008bac 	.word	0x08008bac

080018e4 <DS18B20_Select>:

// --- 新增：选择指定ROM地址的设备 ---
void DS18B20_Select(const uint8_t *rom_code)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  DS18B20_WriteByte(0x55); // Match ROM command
 80018ec:	2055      	movs	r0, #85	@ 0x55
 80018ee:	f7ff fd99 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e009      	b.n	800190c <DS18B20_Select+0x28>
  {
    DS18B20_WriteByte(rom_code[i]);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fd8f 	bl	8001424 <DS18B20_WriteByte>
  for (uint8_t i = 0; i < 8; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d9f2      	bls.n	80018f8 <DS18B20_Select+0x14>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DS18B20_SkipRom>:

// --- 新增：向总线上所有设备发送命令 (使用 Skip ROM) ---
void DS18B20_SkipRom(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  DS18B20_WriteByte(0xCC); // Skip ROM command
 8001920:	20cc      	movs	r0, #204	@ 0xcc
 8001922:	f7ff fd7f 	bl	8001424 <DS18B20_WriteByte>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <DS18B20_GetTemp>:

// --- 修改：读取指定ROM地址的温度值 ---
// 返回值：读取到的温度，或特定错误值 (例如 -999.0)
float DS18B20_GetTemp(const uint8_t *rom_code)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t tempL, tempH;
  uint16_t temp;
  float result = -999.0; // 默认错误值
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <DS18B20_GetTemp+0x98>)
 8001936:	60fb      	str	r3, [r7, #12]

  // 1. 复位并选择指定设备
  if (DS18B20_Reset() != 0)
 8001938:	f7ff fdb0 	bl	800149c <DS18B20_Reset>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <DS18B20_GetTemp+0x1a>
    return result; // 复位失败
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	e039      	b.n	80019ba <DS18B20_GetTemp+0x8e>
  DS18B20_Select(rom_code);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffcc 	bl	80018e4 <DS18B20_Select>

  // 2. 发送读取暂存器命令 (0xBE)
  DS18B20_WriteByte(0xBE);
 800194c:	20be      	movs	r0, #190	@ 0xbe
 800194e:	f7ff fd69 	bl	8001424 <DS18B20_WriteByte>

  // 3. 读取暂存器内容 (前两个字节是温度)
  //    注意：实际应用中应读取全部9个字节并校验CRC
  tempL = DS18B20_ReadByte();
 8001952:	f7ff fd84 	bl	800145e <DS18B20_ReadByte>
 8001956:	4603      	mov	r3, r0
 8001958:	72fb      	strb	r3, [r7, #11]
  tempH = DS18B20_ReadByte();
 800195a:	f7ff fd80 	bl	800145e <DS18B20_ReadByte>
 800195e:	4603      	mov	r3, r0
 8001960:	72bb      	strb	r3, [r7, #10]
  //     // CRC校验失败
  //     return -998.0; // 返回不同的错误码
  // }

  // 4. 计算温度
  temp = (tempH << 8) | tempL;
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	b21b      	sxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	813b      	strh	r3, [r7, #8]

  // 处理负温度 (符号扩展)
  if (temp & 0x8000)
 8001974:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da11      	bge.n	80019a0 <DS18B20_GetTemp+0x74>
  {
    temp = ~temp + 1; // 取反加一
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	425b      	negs	r3, r3
 8001980:	813b      	strh	r3, [r7, #8]
    result = -(float)temp / 16.0;
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9a5 	bl	8000cd4 <__aeabi_ui2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001990:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff faa9 	bl	8000eec <__aeabi_fdiv>
 800199a:	4603      	mov	r3, r0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00b      	b.n	80019b8 <DS18B20_GetTemp+0x8c>
  }
  else
  {
    result = (float)temp / 16.0;
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f996 	bl	8000cd4 <__aeabi_ui2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa9c 	bl	8000eec <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    // 可能读取错误，可以返回特定错误值或上次有效值
    // return -997.0;
  }

  return result;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	c479c000 	.word	0xc479c000

080019c8 <DS18B20_StartConversionAll>:

// --- 新增：启动所有连接设备的温度转换 ---
uint8_t DS18B20_StartConversionAll(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  if (DS18B20_Reset() != 0)
 80019cc:	f7ff fd66 	bl	800149c <DS18B20_Reset>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <DS18B20_StartConversionAll+0x12>
    return 1;              // 复位失败
 80019d6:	2301      	movs	r3, #1
 80019d8:	e005      	b.n	80019e6 <DS18B20_StartConversionAll+0x1e>
  DS18B20_SkipRom();       // 使用 Skip ROM 命令
 80019da:	f7ff ff9f 	bl	800191c <DS18B20_SkipRom>
  DS18B20_WriteByte(0x44); // 启动温度转换命令
 80019de:	2044      	movs	r0, #68	@ 0x44
 80019e0:	f7ff fd20 	bl	8001424 <DS18B20_WriteByte>
  return 0;                // 成功启动
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b0df      	sub	sp, #380	@ 0x17c
 80019f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f000 ff6b 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f9c5 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f7ff fbbf 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019fe:	f000 fe63 	bl	80026c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a02:	f000 fe8b 	bl	800271c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001a06:	f7ff fc11 	bl	800122c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  RELAY_Init();
 8001a0a:	f7ff fc7b 	bl	8001304 <RELAY_Init>
    OLED_Init();  // 初始化OLED
 8001a0e:	f000 fbff 	bl	8002210 <OLED_Init>

  HAL_Delay(100); // 等待总线稳定
 8001a12:	2064      	movs	r0, #100	@ 0x64
 8001a14:	f000 ffbc 	bl	8002990 <HAL_Delay>

    // 在OLED上显示欢迎信息
  OLED_ShowString(0, 0, "DS18B20 Temperature", 8);
 8001a18:	2308      	movs	r3, #8
 8001a1a:	4ac6      	ldr	r2, [pc, #792]	@ (8001d34 <main+0x348>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 fbc0 	bl	80021a4 <OLED_ShowString>
  OLED_ShowString(0, 16, "System Initializing", 8);
 8001a24:	2308      	movs	r3, #8
 8001a26:	4ac4      	ldr	r2, [pc, #784]	@ (8001d38 <main+0x34c>)
 8001a28:	2110      	movs	r1, #16
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 fbba 	bl	80021a4 <OLED_ShowString>
  OLED_Refresh();
 8001a30:	f000 fa10 	bl	8001e54 <OLED_Refresh>
    HAL_Delay(1000); // 显示欢迎信息一段时间
 8001a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a38:	f000 ffaa 	bl	8002990 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t *)"DS18B20 Multi-Sensor Test\r\n", strlen("DS18B20 Multi-Sensor Test\r\n"), 100);
 8001a3c:	2364      	movs	r3, #100	@ 0x64
 8001a3e:	221b      	movs	r2, #27
 8001a40:	49be      	ldr	r1, [pc, #760]	@ (8001d3c <main+0x350>)
 8001a42:	48bf      	ldr	r0, [pc, #764]	@ (8001d40 <main+0x354>)
 8001a44:	f002 fb5c 	bl	8004100 <HAL_UART_Transmit>

  // --- 修改：扫描设备 ---
  DS18B20_ScanDevices();
 8001a48:	f7ff fe8a 	bl	8001760 <DS18B20_ScanDevices>

    // 在OLED上显示传感器信息
  OLED_DisplaySensorInfo(g_num_sensors);
 8001a4c:	4bbd      	ldr	r3, [pc, #756]	@ (8001d44 <main+0x358>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fcc9 	bl	80023e8 <OLED_DisplaySensorInfo>
  HAL_Delay(2000);
 8001a56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a5a:	f000 ff99 	bl	8002990 <HAL_Delay>

  if (g_num_sensors == 0)
 8001a5e:	4bb9      	ldr	r3, [pc, #740]	@ (8001d44 <main+0x358>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <main+0x8a>
  {
    HAL_UART_Transmit(&huart1, (uint8_t *)"No DS18B20 sensors found!\r\n", strlen("No DS18B20 sensors found!\r\n"), 100);
 8001a66:	2364      	movs	r3, #100	@ 0x64
 8001a68:	221b      	movs	r2, #27
 8001a6a:	49b7      	ldr	r1, [pc, #732]	@ (8001d48 <main+0x35c>)
 8001a6c:	48b4      	ldr	r0, [pc, #720]	@ (8001d40 <main+0x354>)
 8001a6e:	f002 fb47 	bl	8004100 <HAL_UART_Transmit>
    while (1)
 8001a72:	bf00      	nop
 8001a74:	e7fd      	b.n	8001a72 <main+0x86>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1. 启动所有传感器的温度转换
    if (DS18B20_StartConversionAll() == 0)
 8001a76:	f7ff ffa7 	bl	80019c8 <DS18B20_StartConversionAll>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 8140 	bne.w	8001d02 <main+0x316>
    {     
      // 2. 等待转换完成 (标准精度约750ms)
      //    注意：如果设置了不同精度，等待时间需要调整
      HAL_Delay(750);
 8001a82:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001a86:	f000 ff83 	bl	8002990 <HAL_Delay>

      // 3. 依次读取每个传感器的温度
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001a90:	e096      	b.n	8001bc0 <main+0x1d4>
      {
        temperature = DS18B20_GetTemp(g_ds18b20_roms[i]);
 8001a92:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4aac      	ldr	r2, [pc, #688]	@ (8001d4c <main+0x360>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff45 	bl	800192c <DS18B20_GetTemp>
 8001aa2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
        // 保存温度值到数组中
        temperatureArray[i] = temperature;
 8001aa6:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001aaa:	49a9      	ldr	r1, [pc, #676]	@ (8001d50 <main+0x364>)
 8001aac:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        
        // 格式化ROM地址用于显示
        char rom_str[25];
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ab4:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ab8:	4aa4      	ldr	r2, [pc, #656]	@ (8001d4c <main+0x360>)
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	79db      	ldrb	r3, [r3, #7]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ac0:	469c      	mov	ip, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ac2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ac6:	4aa1      	ldr	r2, [pc, #644]	@ (8001d4c <main+0x360>)
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	799b      	ldrb	r3, [r3, #6]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001ace:	469e      	mov	lr, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ad0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ad4:	4a9d      	ldr	r2, [pc, #628]	@ (8001d4c <main+0x360>)
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	795b      	ldrb	r3, [r3, #5]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001adc:	4619      	mov	r1, r3
                g_ds18b20_roms[i][7], g_ds18b20_roms[i][6], g_ds18b20_roms[i][5], g_ds18b20_roms[i][4],
 8001ade:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001ae2:	4a9a      	ldr	r2, [pc, #616]	@ (8001d4c <main+0x360>)
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	791b      	ldrb	r3, [r3, #4]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001aea:	461c      	mov	r4, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001aec:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001af0:	4a96      	ldr	r2, [pc, #600]	@ (8001d4c <main+0x360>)
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	78db      	ldrb	r3, [r3, #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001af8:	461d      	mov	r5, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001afa:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001afe:	4a93      	ldr	r2, [pc, #588]	@ (8001d4c <main+0x360>)
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	789b      	ldrb	r3, [r3, #2]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001b06:	461e      	mov	r6, r3
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001b08:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001b0c:	4a8f      	ldr	r2, [pc, #572]	@ (8001d4c <main+0x360>)
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	785b      	ldrb	r3, [r3, #1]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001b14:	607b      	str	r3, [r7, #4]
                g_ds18b20_roms[i][3], g_ds18b20_roms[i][2], g_ds18b20_roms[i][1], g_ds18b20_roms[i][0]);
 8001b16:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001b1a:	4a8c      	ldr	r2, [pc, #560]	@ (8001d4c <main+0x360>)
 8001b1c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
        sprintf(rom_str, "%02X;%02X;%02X;%02X;%02X;%02X;%02X;%02X",
 8001b20:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001b24:	9305      	str	r3, [sp, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	9304      	str	r3, [sp, #16]
 8001b2a:	9603      	str	r6, [sp, #12]
 8001b2c:	9502      	str	r5, [sp, #8]
 8001b2e:	9401      	str	r4, [sp, #4]
 8001b30:	9100      	str	r1, [sp, #0]
 8001b32:	4673      	mov	r3, lr
 8001b34:	4662      	mov	r2, ip
 8001b36:	4987      	ldr	r1, [pc, #540]	@ (8001d54 <main+0x368>)
 8001b38:	f003 fbdc 	bl	80052f4 <siprintf>

        if (temperature > -900.0)
 8001b3c:	4986      	ldr	r1, [pc, #536]	@ (8001d58 <main+0x36c>)
 8001b3e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b42:	f7ff fadb 	bl	80010fc <__aeabi_fcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01e      	beq.n	8001b8a <main+0x19e>
        { // 检查是否为有效温度值
          sprintf(msg, "Sensor %d [%s]: %.2f C\r\n", i, rom_str, temperature);
 8001b4c:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001b50:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b54:	f7fe fc68 	bl	8000428 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001b60:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001b64:	e9cd 2300 	strd	r2, r3, [sp]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	497b      	ldr	r1, [pc, #492]	@ (8001d5c <main+0x370>)
 8001b6e:	f003 fbc1 	bl	80052f4 <siprintf>
          sprintf(msg2, "%.2f;",temperature);
 8001b72:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b76:	f7fe fc57 	bl	8000428 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001b82:	4977      	ldr	r1, [pc, #476]	@ (8001d60 <main+0x374>)
 8001b84:	f003 fbb6 	bl	80052f4 <siprintf>
 8001b88:	e012      	b.n	8001bb0 <main+0x1c4>
        }
        else
        {
          sprintf(msg, "Sensor %d [%s]: Read Error (Code: %.1f)\r\n", i, rom_str, temperature);
 8001b8a:	f897 415f 	ldrb.w	r4, [r7, #351]	@ 0x15f
 8001b8e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8001b92:	f7fe fc49 	bl	8000428 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001b9e:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001ba2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4622      	mov	r2, r4
 8001baa:	496e      	ldr	r1, [pc, #440]	@ (8001d64 <main+0x378>)
 8001bac:	f003 fba2 	bl	80052f4 <siprintf>
        }

        //暂时关闭，防止串口拥堵
        // HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200);
        HAL_Delay(50); // 短暂延时，避免串口拥堵
 8001bb0:	2032      	movs	r0, #50	@ 0x32
 8001bb2:	f000 feed 	bl	8002990 <HAL_Delay>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001bb6:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 8001bc0:	4b60      	ldr	r3, [pc, #384]	@ (8001d44 <main+0x358>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f4ff af62 	bcc.w	8001a92 <main+0xa6>
      }
      
      // 检查温度并控制继电器
      uint8_t relay_status = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8001bda:	e01d      	b.n	8001c18 <main+0x22c>
      {
          if(temperatureArray[i] > TEMP_THRESHOLD)
 8001bdc:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8001be0:	4a5b      	ldr	r2, [pc, #364]	@ (8001d50 <main+0x364>)
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	4960      	ldr	r1, [pc, #384]	@ (8001d68 <main+0x37c>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fa87 	bl	80010fc <__aeabi_fcmpgt>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00c      	beq.n	8001c0e <main+0x222>
          {
            RELAY_Control(1); // 温度超过阈值，打开继电器
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff fb91 	bl	800131c <RELAY_Control>
            sprintf(relay_msg, "ON");
 8001bfa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bfe:	495b      	ldr	r1, [pc, #364]	@ (8001d6c <main+0x380>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fb77 	bl	80052f4 <siprintf>
            relay_status = 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
            break;
 8001c0c:	e00a      	b.n	8001c24 <main+0x238>
      for (uint8_t i = 0; i < g_num_sensors; i++)
 8001c0e:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8001c12:	3301      	adds	r3, #1
 8001c14:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8001c18:	4b4a      	ldr	r3, [pc, #296]	@ (8001d44 <main+0x358>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	f897 215d 	ldrb.w	r2, [r7, #349]	@ 0x15d
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3db      	bcc.n	8001bdc <main+0x1f0>
          }
      }
      
      if (!relay_status) {
 8001c24:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <main+0x252>
        RELAY_Control(0); // 温度均低于阈值，关闭继电器
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fb75 	bl	800131c <RELAY_Control>
        sprintf(relay_msg, "OFF");
 8001c32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c36:	494e      	ldr	r1, [pc, #312]	@ (8001d70 <main+0x384>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fb5b 	bl	80052f4 <siprintf>
      //     (g_num_sensors > 1) ? temperatureArray[1] : -999.0, 
      //     relay_status,
      //     TEMP_THRESHOLD
      // );
      // OLED显示温度和继电器状态
      OLED_DisplayTemperature(
 8001c3e:	4b44      	ldr	r3, [pc, #272]	@ (8001d50 <main+0x364>)
 8001c40:	6818      	ldr	r0, [r3, #0]
          temperatureArray[0], 
          (g_num_sensors > 1) ? temperatureArray[1] : -999.0,
 8001c42:	4b40      	ldr	r3, [pc, #256]	@ (8001d44 <main+0x358>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
      OLED_DisplayTemperature(
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d902      	bls.n	8001c50 <main+0x264>
 8001c4a:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <main+0x364>)
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	e000      	b.n	8001c52 <main+0x266>
 8001c50:	4948      	ldr	r1, [pc, #288]	@ (8001d74 <main+0x388>)
          (g_num_sensors > 2) ? temperatureArray[2] : -999.0,
 8001c52:	4b3c      	ldr	r3, [pc, #240]	@ (8001d44 <main+0x358>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
      OLED_DisplayTemperature(
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d902      	bls.n	8001c60 <main+0x274>
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <main+0x364>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	e000      	b.n	8001c62 <main+0x276>
 8001c60:	4a44      	ldr	r2, [pc, #272]	@ (8001d74 <main+0x388>)
 8001c62:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001c66:	4c40      	ldr	r4, [pc, #256]	@ (8001d68 <main+0x37c>)
 8001c68:	9400      	str	r4, [sp, #0]
 8001c6a:	f000 fafb 	bl	8002264 <OLED_DisplayTemperature>
          relay_status,
          TEMP_THRESHOLD
      );
      
      // 格式化并发送到Lora
      strcpy(msg2, "");
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
      for (uint8_t i = 0; i < 3; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8001c7a:	e01b      	b.n	8001cb4 <main+0x2c8>
      {
          char temp_msg[50];
          sprintf(temp_msg, "%.2f;", temperatureArray[i]);
 8001c7c:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8001c80:	4a33      	ldr	r2, [pc, #204]	@ (8001d50 <main+0x364>)
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fbce 	bl	8000428 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	f107 000c 	add.w	r0, r7, #12
 8001c94:	4932      	ldr	r1, [pc, #200]	@ (8001d60 <main+0x374>)
 8001c96:	f003 fb2d 	bl	80052f4 <siprintf>
          strcat(msg2, temp_msg);
 8001c9a:	f107 020c 	add.w	r2, r7, #12
 8001c9e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fb92 	bl	80053ce <strcat>
      for (uint8_t i = 0; i < 3; i++)
 8001caa:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 8001cb4:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d9df      	bls.n	8001c7c <main+0x290>
      }
      strcat(msg2, relay_msg); // 继电器状态
 8001cbc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001cc0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fb81 	bl	80053ce <strcat>
      strcat(msg2, ";\r\n");
 8001ccc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fa3d 	bl	8000150 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a25      	ldr	r2, [pc, #148]	@ (8001d78 <main+0x38c>)
 8001ce2:	6810      	ldr	r0, [r2, #0]
 8001ce4:	6018      	str	r0, [r3, #0]
      HAL_UART_Transmit(&huart3, (uint8_t *)msg2, strlen(msg2), 200); // 发送到Lora
 8001ce6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fa30 	bl	8000150 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001cf8:	23c8      	movs	r3, #200	@ 0xc8
 8001cfa:	4820      	ldr	r0, [pc, #128]	@ (8001d7c <main+0x390>)
 8001cfc:	f002 fa00 	bl	8004100 <HAL_UART_Transmit>
 8001d00:	e012      	b.n	8001d28 <main+0x33c>
    }
    else
    {
      sprintf(msg, "Failed to start conversion.\r\n");
 8001d02:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d06:	491e      	ldr	r1, [pc, #120]	@ (8001d80 <main+0x394>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 faf3 	bl	80052f4 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8001d0e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fa1c 	bl	8000150 <strlen>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8001d20:	2364      	movs	r3, #100	@ 0x64
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <main+0x354>)
 8001d24:	f002 f9ec 	bl	8004100 <HAL_UART_Transmit>
    }

    HAL_Delay(2000); // 每隔一段时间读取一次
 8001d28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d2c:	f000 fe30 	bl	8002990 <HAL_Delay>
    if (DS18B20_StartConversionAll() == 0)
 8001d30:	e6a1      	b.n	8001a76 <main+0x8a>
 8001d32:	bf00      	nop
 8001d34:	08008be0 	.word	0x08008be0
 8001d38:	08008bf4 	.word	0x08008bf4
 8001d3c:	08008c08 	.word	0x08008c08
 8001d40:	20000680 	.word	0x20000680
 8001d44:	2000026c 	.word	0x2000026c
 8001d48:	08008c24 	.word	0x08008c24
 8001d4c:	20000244 	.word	0x20000244
 8001d50:	20000270 	.word	0x20000270
 8001d54:	08008c40 	.word	0x08008c40
 8001d58:	c4610000 	.word	0xc4610000
 8001d5c:	08008c68 	.word	0x08008c68
 8001d60:	08008c84 	.word	0x08008c84
 8001d64:	08008c8c 	.word	0x08008c8c
 8001d68:	41f00000 	.word	0x41f00000
 8001d6c:	08008cb8 	.word	0x08008cb8
 8001d70:	08008cbc 	.word	0x08008cbc
 8001d74:	c479c000 	.word	0xc479c000
 8001d78:	08008cc0 	.word	0x08008cc0
 8001d7c:	200006c8 	.word	0x200006c8
 8001d80:	08008cc4 	.word	0x08008cc4

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b090      	sub	sp, #64	@ 0x40
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	2228      	movs	r2, #40	@ 0x28
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fb13 	bl	80053be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001daa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db4:	2301      	movs	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db8:	2302      	movs	r3, #2
 8001dba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fd37 	bl	8003840 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001dd8:	f000 f819 	bl	8001e0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2302      	movs	r3, #2
 8001de2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2102      	movs	r1, #2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 ffa4 	bl	8003d44 <HAL_RCC_ClockConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e02:	f000 f804 	bl	8001e0e <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	3740      	adds	r7, #64	@ 0x40
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e12:	b672      	cpsid	i
}
 8001e14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e16:	bf00      	nop
 8001e18:	e7fd      	b.n	8001e16 <Error_Handler+0x8>
	...

08001e1c <OLED_Write_Byte>:
#define COM 0x00  // OLED指令
#define DAT 0x40  // OLED数据

// I2C写入数据
static void OLED_Write_Byte(uint8_t data, uint8_t mode)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	460a      	mov	r2, r1
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = mode;  // 写命令/数据控制字节
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	733b      	strb	r3, [r7, #12]
    buf[1] = data;  // 数据字节
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, buf, 2, 100);
 8001e34:	f107 020c 	add.w	r2, r7, #12
 8001e38:	2364      	movs	r3, #100	@ 0x64
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	2178      	movs	r1, #120	@ 0x78
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <OLED_Write_Byte+0x34>)
 8001e42:	f001 f9a5 	bl	8003190 <HAL_I2C_Master_Transmit>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001f0 	.word	0x200001f0

08001e54 <OLED_Refresh>:

// 更新显存到OLED
void OLED_Refresh(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0a4      	sub	sp, #144	@ 0x90
 8001e58:	af02      	add	r7, sp, #8
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e60:	e03b      	b.n	8001eda <OLED_Refresh+0x86>
    {
        OLED_Write_Byte(0xB0 + i, COM);    // 设置页地址(0~7)
 8001e62:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e66:	3b50      	subs	r3, #80	@ 0x50
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ffd5 	bl	8001e1c <OLED_Write_Byte>
        OLED_Write_Byte(0x00, COM);        // 设置显示位置—列低地址
 8001e72:	2100      	movs	r1, #0
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff ffd1 	bl	8001e1c <OLED_Write_Byte>
        OLED_Write_Byte(0x10, COM);        // 设置显示位置—列高地址
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2010      	movs	r0, #16
 8001e7e:	f7ff ffcd 	bl	8001e1c <OLED_Write_Byte>
        
        // 一次发送一整行的数据(128字节)，提高效率
        uint8_t data[129];
        data[0] = DAT;  // 数据控制字节
 8001e82:	2340      	movs	r3, #64	@ 0x40
 8001e84:	713b      	strb	r3, [r7, #4]
        for (n = 0; n < 128; n++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001e8c:	e014      	b.n	8001eb8 <OLED_Refresh+0x64>
            data[n+1] = OLED_GRAM[n][i];
 8001e8e:	f897 1086 	ldrb.w	r1, [r7, #134]	@ 0x86
 8001e92:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001e96:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4813      	ldr	r0, [pc, #76]	@ (8001eec <OLED_Refresh+0x98>)
 8001e9e:	00c9      	lsls	r1, r1, #3
 8001ea0:	4401      	add	r1, r0
 8001ea2:	440a      	add	r2, r1
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	3388      	adds	r3, #136	@ 0x88
 8001ea8:	443b      	add	r3, r7
 8001eaa:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (n = 0; n < 128; n++)
 8001eae:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001eb8:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	dae6      	bge.n	8001e8e <OLED_Refresh+0x3a>
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR, data, 129, 200);
 8001ec0:	1d3a      	adds	r2, r7, #4
 8001ec2:	23c8      	movs	r3, #200	@ 0xc8
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2381      	movs	r3, #129	@ 0x81
 8001ec8:	2178      	movs	r1, #120	@ 0x78
 8001eca:	4809      	ldr	r0, [pc, #36]	@ (8001ef0 <OLED_Refresh+0x9c>)
 8001ecc:	f001 f960 	bl	8003190 <HAL_I2C_Master_Transmit>
    for (i = 0; i < 8; i++)
 8001ed0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001eda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ede:	2b07      	cmp	r3, #7
 8001ee0:	d9bf      	bls.n	8001e62 <OLED_Refresh+0xe>
    }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	3788      	adds	r7, #136	@ 0x88
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2000027c 	.word	0x2000027c
 8001ef0:	200001f0 	.word	0x200001f0

08001ef4 <OLED_Clear>:
    OLED_Write_Byte(0xAE, COM); // 关闭屏幕
}

// 清屏函数
void OLED_Clear(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
    uint8_t i, n;
    for (i = 0; i < 8; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	e014      	b.n	8001f2a <OLED_Clear+0x36>
    {
        for (n = 0; n < 128; n++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	71bb      	strb	r3, [r7, #6]
 8001f04:	e00a      	b.n	8001f1c <OLED_Clear+0x28>
        {
            OLED_GRAM[n][i] = 0;
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	490c      	ldr	r1, [pc, #48]	@ (8001f3c <OLED_Clear+0x48>)
 8001f0c:	00d2      	lsls	r2, r2, #3
 8001f0e:	440a      	add	r2, r1
 8001f10:	4413      	add	r3, r2
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
        for (n = 0; n < 128; n++)
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	71bb      	strb	r3, [r7, #6]
 8001f1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	daf0      	bge.n	8001f06 <OLED_Clear+0x12>
    for (i = 0; i < 8; i++)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	3301      	adds	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	d9e7      	bls.n	8001f00 <OLED_Clear+0xc>
        }
    }
    OLED_Refresh(); // 更新显示
 8001f30:	f7ff ff90 	bl	8001e54 <OLED_Refresh>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2000027c 	.word	0x2000027c

08001f40 <OLED_DrawPoint>:

// 画点
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	71bb      	strb	r3, [r7, #6]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	717b      	strb	r3, [r7, #5]
    uint8_t pos, bx, temp = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
    if (x > 127 || y > 63) return; // 超出范围
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db3c      	blt.n	8001fd8 <OLED_DrawPoint+0x98>
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f62:	d839      	bhi.n	8001fd8 <OLED_DrawPoint+0x98>
    pos = y / 8;                   // 得到页地址
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	08db      	lsrs	r3, r3, #3
 8001f68:	73bb      	strb	r3, [r7, #14]
    bx = y % 8;                    // 取得y在页内的位置
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	737b      	strb	r3, [r7, #13]
    temp = 1 << bx;                // 得到点在页内的位置对应的值
 8001f72:	7b7b      	ldrb	r3, [r7, #13]
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	73fb      	strb	r3, [r7, #15]
    if (t) OLED_GRAM[x][pos] |= temp;  // 置1
 8001f7c:	797b      	ldrb	r3, [r7, #5]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <OLED_DrawPoint+0x68>
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	4917      	ldr	r1, [pc, #92]	@ (8001fe4 <OLED_DrawPoint+0xa4>)
 8001f88:	00d2      	lsls	r2, r2, #3
 8001f8a:	440a      	add	r2, r1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	7818      	ldrb	r0, [r3, #0]
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	7bf9      	ldrb	r1, [r7, #15]
 8001f96:	4301      	orrs	r1, r0
 8001f98:	b2c8      	uxtb	r0, r1
 8001f9a:	4912      	ldr	r1, [pc, #72]	@ (8001fe4 <OLED_DrawPoint+0xa4>)
 8001f9c:	00d2      	lsls	r2, r2, #3
 8001f9e:	440a      	add	r2, r1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e018      	b.n	8001fda <OLED_DrawPoint+0x9a>
    else OLED_GRAM[x][pos] &= ~temp;   // 清0
 8001fa8:	79fa      	ldrb	r2, [r7, #7]
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	490d      	ldr	r1, [pc, #52]	@ (8001fe4 <OLED_DrawPoint+0xa4>)
 8001fae:	00d2      	lsls	r2, r2, #3
 8001fb0:	440a      	add	r2, r1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b259      	sxtb	r1, r3
 8001fc4:	79fa      	ldrb	r2, [r7, #7]
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	b2c8      	uxtb	r0, r1
 8001fca:	4906      	ldr	r1, [pc, #24]	@ (8001fe4 <OLED_DrawPoint+0xa4>)
 8001fcc:	00d2      	lsls	r2, r2, #3
 8001fce:	440a      	add	r2, r1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	e000      	b.n	8001fda <OLED_DrawPoint+0x9a>
    if (x > 127 || y > 63) return; // 超出范围
 8001fd8:	bf00      	nop
}
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000027c 	.word	0x2000027c

08001fe8 <OLED_ShowChar>:
    OLED_Refresh();
}

// 在指定位置显示一个字符
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4604      	mov	r4, r0
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	71fb      	strb	r3, [r7, #7]
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71bb      	strb	r3, [r7, #6]
 8001ffe:	460b      	mov	r3, r1
 8002000:	717b      	strb	r3, [r7, #5]
 8002002:	4613      	mov	r3, r2
 8002004:	713b      	strb	r3, [r7, #4]
    uint8_t i, j, c;
    c = chr - ' '; // 得到偏移后的值
 8002006:	797b      	ldrb	r3, [r7, #5]
 8002008:	3b20      	subs	r3, #32
 800200a:	737b      	strb	r3, [r7, #13]
    if (x > 128 - 1)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da04      	bge.n	800201e <OLED_ShowChar+0x36>
    {
        x = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	71fb      	strb	r3, [r7, #7]
        y = y + 2;
 8002018:	79bb      	ldrb	r3, [r7, #6]
 800201a:	3302      	adds	r3, #2
 800201c:	71bb      	strb	r3, [r7, #6]
    }
    if (size == 16)
 800201e:	793b      	ldrb	r3, [r7, #4]
 8002020:	2b10      	cmp	r3, #16
 8002022:	d177      	bne.n	8002114 <OLED_ShowChar+0x12c>
    {
        for (i = 0; i < 8; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e032      	b.n	8002090 <OLED_ShowChar+0xa8>
        {
            for (j = 0; j < 8; j++)
 800202a:	2300      	movs	r3, #0
 800202c:	73bb      	strb	r3, [r7, #14]
 800202e:	e029      	b.n	8002084 <OLED_ShowChar+0x9c>
            {
                if (F8X16[c * 16 + i] & (0x80 >> j))
 8002030:	7b7b      	ldrb	r3, [r7, #13]
 8002032:	011a      	lsls	r2, r3, #4
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	4413      	add	r3, r2
 8002038:	4a58      	ldr	r2, [pc, #352]	@ (800219c <OLED_ShowChar+0x1b4>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	4619      	mov	r1, r3
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	fa42 f303 	asr.w	r3, r2, r3
 8002046:	400b      	ands	r3, r1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00c      	beq.n	8002066 <OLED_ShowChar+0x7e>
                    OLED_DrawPoint(x + j, y + i, 1);
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	7bbb      	ldrb	r3, [r7, #14]
 8002050:	4413      	add	r3, r2
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	79ba      	ldrb	r2, [r7, #6]
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4413      	add	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2201      	movs	r2, #1
 800205e:	4619      	mov	r1, r3
 8002060:	f7ff ff6e 	bl	8001f40 <OLED_DrawPoint>
 8002064:	e00b      	b.n	800207e <OLED_ShowChar+0x96>
                else
                    OLED_DrawPoint(x + j, y + i, 0);
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	7bbb      	ldrb	r3, [r7, #14]
 800206a:	4413      	add	r3, r2
 800206c:	b2d8      	uxtb	r0, r3
 800206e:	79ba      	ldrb	r2, [r7, #6]
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	4413      	add	r3, r2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	f7ff ff61 	bl	8001f40 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800207e:	7bbb      	ldrb	r3, [r7, #14]
 8002080:	3301      	adds	r3, #1
 8002082:	73bb      	strb	r3, [r7, #14]
 8002084:	7bbb      	ldrb	r3, [r7, #14]
 8002086:	2b07      	cmp	r3, #7
 8002088:	d9d2      	bls.n	8002030 <OLED_ShowChar+0x48>
        for (i = 0; i < 8; i++)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b07      	cmp	r3, #7
 8002094:	d9c9      	bls.n	800202a <OLED_ShowChar+0x42>
            }
        }
        for (i = 0; i < 8; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e037      	b.n	800210c <OLED_ShowChar+0x124>
        {
            for (j = 0; j < 8; j++)
 800209c:	2300      	movs	r3, #0
 800209e:	73bb      	strb	r3, [r7, #14]
 80020a0:	e02e      	b.n	8002100 <OLED_ShowChar+0x118>
            {
                if (F8X16[c * 16 + i + 8] & (0x80 >> j))
 80020a2:	7b7b      	ldrb	r3, [r7, #13]
 80020a4:	011a      	lsls	r2, r3, #4
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	4413      	add	r3, r2
 80020aa:	3308      	adds	r3, #8
 80020ac:	4a3b      	ldr	r2, [pc, #236]	@ (800219c <OLED_ShowChar+0x1b4>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	4619      	mov	r1, r3
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	2280      	movs	r2, #128	@ 0x80
 80020b6:	fa42 f303 	asr.w	r3, r2, r3
 80020ba:	400b      	ands	r3, r1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <OLED_ShowChar+0xf6>
                    OLED_DrawPoint(x + j, y + i + 8, 1);
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	4413      	add	r3, r2
 80020c6:	b2d8      	uxtb	r0, r3
 80020c8:	79ba      	ldrb	r2, [r7, #6]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4413      	add	r3, r2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3308      	adds	r3, #8
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7ff ff32 	bl	8001f40 <OLED_DrawPoint>
 80020dc:	e00d      	b.n	80020fa <OLED_ShowChar+0x112>
                else
                    OLED_DrawPoint(x + j, y + i + 8, 0);
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2d8      	uxtb	r0, r3
 80020e6:	79ba      	ldrb	r2, [r7, #6]
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3308      	adds	r3, #8
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7ff ff23 	bl	8001f40 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73bb      	strb	r3, [r7, #14]
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b07      	cmp	r3, #7
 8002104:	d9cd      	bls.n	80020a2 <OLED_ShowChar+0xba>
        for (i = 0; i < 8; i++)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3301      	adds	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b07      	cmp	r3, #7
 8002110:	d9c4      	bls.n	800209c <OLED_ShowChar+0xb4>
                else
                    OLED_DrawPoint(x + i, y + j, 0);
            }
        }
    }
}
 8002112:	e03f      	b.n	8002194 <OLED_ShowChar+0x1ac>
    else if (size == 8)
 8002114:	793b      	ldrb	r3, [r7, #4]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d13c      	bne.n	8002194 <OLED_ShowChar+0x1ac>
        for (i = 0; i < 6; i++)
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	e036      	b.n	800218e <OLED_ShowChar+0x1a6>
            for (j = 0; j < 8; j++)
 8002120:	2300      	movs	r3, #0
 8002122:	73bb      	strb	r3, [r7, #14]
 8002124:	e02d      	b.n	8002182 <OLED_ShowChar+0x19a>
                if (F6x8[c][i] & (1 << j))
 8002126:	7b7a      	ldrb	r2, [r7, #13]
 8002128:	7bf9      	ldrb	r1, [r7, #15]
 800212a:	481d      	ldr	r0, [pc, #116]	@ (80021a0 <OLED_ShowChar+0x1b8>)
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4403      	add	r3, r0
 8002136:	440b      	add	r3, r1
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	fa42 f303 	asr.w	r3, r2, r3
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <OLED_ShowChar+0x17c>
                    OLED_DrawPoint(x + i, y + j, 1);
 800214a:	79fa      	ldrb	r2, [r7, #7]
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	4413      	add	r3, r2
 8002150:	b2d8      	uxtb	r0, r3
 8002152:	79ba      	ldrb	r2, [r7, #6]
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	4413      	add	r3, r2
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2201      	movs	r2, #1
 800215c:	4619      	mov	r1, r3
 800215e:	f7ff feef 	bl	8001f40 <OLED_DrawPoint>
 8002162:	e00b      	b.n	800217c <OLED_ShowChar+0x194>
                    OLED_DrawPoint(x + i, y + j, 0);
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	4413      	add	r3, r2
 800216a:	b2d8      	uxtb	r0, r3
 800216c:	79ba      	ldrb	r2, [r7, #6]
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	4413      	add	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	f7ff fee2 	bl	8001f40 <OLED_DrawPoint>
            for (j = 0; j < 8; j++)
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	3301      	adds	r3, #1
 8002180:	73bb      	strb	r3, [r7, #14]
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	2b07      	cmp	r3, #7
 8002186:	d9ce      	bls.n	8002126 <OLED_ShowChar+0x13e>
        for (i = 0; i < 6; i++)
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3301      	adds	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d9c5      	bls.n	8002120 <OLED_ShowChar+0x138>
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	08008ff0 	.word	0x08008ff0
 80021a0:	08008dc8 	.word	0x08008dc8

080021a4 <OLED_ShowString>:

// 显示字符串
void OLED_ShowString(uint8_t x, uint8_t y, const char *p, uint8_t size)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	603a      	str	r2, [r7, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
 80021b2:	460b      	mov	r3, r1
 80021b4:	71bb      	strb	r3, [r7, #6]
 80021b6:	4613      	mov	r3, r2
 80021b8:	717b      	strb	r3, [r7, #5]
    while (*p != '\0')
 80021ba:	e020      	b.n	80021fe <OLED_ShowString+0x5a>
    {
        OLED_ShowChar(x, y, *p, size);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	797b      	ldrb	r3, [r7, #5]
 80021c2:	79b9      	ldrb	r1, [r7, #6]
 80021c4:	79f8      	ldrb	r0, [r7, #7]
 80021c6:	f7ff ff0f 	bl	8001fe8 <OLED_ShowChar>
        x += (size == 8) ? 6 : 8;
 80021ca:	797b      	ldrb	r3, [r7, #5]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d101      	bne.n	80021d4 <OLED_ShowString+0x30>
 80021d0:	2206      	movs	r2, #6
 80021d2:	e000      	b.n	80021d6 <OLED_ShowString+0x32>
 80021d4:	2208      	movs	r2, #8
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4413      	add	r3, r2
 80021da:	71fb      	strb	r3, [r7, #7]
        if (x > 122)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	2b7a      	cmp	r3, #122	@ 0x7a
 80021e0:	d90a      	bls.n	80021f8 <OLED_ShowString+0x54>
        {
            x = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	71fb      	strb	r3, [r7, #7]
            y += (size == 8) ? 9 : 16;
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d101      	bne.n	80021f0 <OLED_ShowString+0x4c>
 80021ec:	2209      	movs	r2, #9
 80021ee:	e000      	b.n	80021f2 <OLED_ShowString+0x4e>
 80021f0:	2210      	movs	r2, #16
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	4413      	add	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
        }
        p++;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	603b      	str	r3, [r7, #0]
    while (*p != '\0')
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1da      	bne.n	80021bc <OLED_ShowString+0x18>
    }
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <OLED_Init>:
    }
}

// 初始化OLED
void OLED_Init(void)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
    // 初始化命令
    uint8_t CMD_Data[] = {
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <OLED_Init+0x50>)
 8002218:	463c      	mov	r4, r7
 800221a:	461d      	mov	r5, r3
 800221c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800221e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        0xAE, 0x00, 0x10, 0x40, 0x81, 0xCF, 0xA1, 0xC8, 0xA6,
        0xA8, 0x3f, 0xD3, 0x00, 0xD5, 0x80, 0xD9, 0xF1, 0xDA, 0x12,
        0xDB, 0x40, 0x20, 0x02, 0x8D, 0x14, 0xA4, 0xA6, 0xAF
    };
    
    HAL_Delay(100);  // 延时等待OLED稳定
 8002228:	2064      	movs	r0, #100	@ 0x64
 800222a:	f000 fbb1 	bl	8002990 <HAL_Delay>
    
    // 发送初始化命令
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 800222e:	2300      	movs	r3, #0
 8002230:	77fb      	strb	r3, [r7, #31]
 8002232:	e00b      	b.n	800224c <OLED_Init+0x3c>
    {
        OLED_Write_Byte(CMD_Data[i], COM);
 8002234:	7ffb      	ldrb	r3, [r7, #31]
 8002236:	3320      	adds	r3, #32
 8002238:	443b      	add	r3, r7
 800223a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fdeb 	bl	8001e1c <OLED_Write_Byte>
    for (uint8_t i = 0; i < sizeof(CMD_Data); i++)
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	3301      	adds	r3, #1
 800224a:	77fb      	strb	r3, [r7, #31]
 800224c:	7ffb      	ldrb	r3, [r7, #31]
 800224e:	2b1b      	cmp	r3, #27
 8002250:	d9f0      	bls.n	8002234 <OLED_Init+0x24>
    }
    
    OLED_Clear();  // 清屏
 8002252:	f7ff fe4f 	bl	8001ef4 <OLED_Clear>
}
 8002256:	bf00      	nop
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bdb0      	pop	{r4, r5, r7, pc}
 800225e:	bf00      	nop
 8002260:	08008ce4 	.word	0x08008ce4

08002264 <OLED_DisplayTemperature>:
//     OLED_Refresh();  // 更新显示
// }

// 显示温度和继电器状态
void OLED_DisplayTemperature(float temp1, float temp2, float temp3, uint8_t relay_status, float temp_threshold)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 8002272:	f7ff fe3f 	bl	8001ef4 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "Temperature Monitor", 8);
 8002276:	2308      	movs	r3, #8
 8002278:	4a50      	ldr	r2, [pc, #320]	@ (80023bc <OLED_DisplayTemperature+0x158>)
 800227a:	2100      	movs	r1, #0
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ff91 	bl	80021a4 <OLED_ShowString>
    OLED_ShowString(0, 16, "Sensor1:", 8);
 8002282:	2308      	movs	r3, #8
 8002284:	4a4e      	ldr	r2, [pc, #312]	@ (80023c0 <OLED_DisplayTemperature+0x15c>)
 8002286:	2110      	movs	r1, #16
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff ff8b 	bl	80021a4 <OLED_ShowString>
    
    // 显示传感器1温度
    if (temp1 > -900.0) {
 800228e:	494d      	ldr	r1, [pc, #308]	@ (80023c4 <OLED_DisplayTemperature+0x160>)
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe ff33 	bl	80010fc <__aeabi_fcmpgt>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d011      	beq.n	80022c0 <OLED_DisplayTemperature+0x5c>
        sprintf(buffer, "%.1fC", temp1);
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7fe f8c3 	bl	8000428 <__aeabi_f2d>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	f107 0014 	add.w	r0, r7, #20
 80022aa:	4947      	ldr	r1, [pc, #284]	@ (80023c8 <OLED_DisplayTemperature+0x164>)
 80022ac:	f003 f822 	bl	80052f4 <siprintf>
        OLED_ShowString(56, 16, buffer, 8);
 80022b0:	f107 0214 	add.w	r2, r7, #20
 80022b4:	2308      	movs	r3, #8
 80022b6:	2110      	movs	r1, #16
 80022b8:	2038      	movs	r0, #56	@ 0x38
 80022ba:	f7ff ff73 	bl	80021a4 <OLED_ShowString>
 80022be:	e005      	b.n	80022cc <OLED_DisplayTemperature+0x68>
    } else {
        OLED_ShowString(56, 16, "Error", 8);
 80022c0:	2308      	movs	r3, #8
 80022c2:	4a42      	ldr	r2, [pc, #264]	@ (80023cc <OLED_DisplayTemperature+0x168>)
 80022c4:	2110      	movs	r1, #16
 80022c6:	2038      	movs	r0, #56	@ 0x38
 80022c8:	f7ff ff6c 	bl	80021a4 <OLED_ShowString>
    }
    
    // 显示传感器2温度
    OLED_ShowString(0, 26, "Sensor2:", 8);
 80022cc:	2308      	movs	r3, #8
 80022ce:	4a40      	ldr	r2, [pc, #256]	@ (80023d0 <OLED_DisplayTemperature+0x16c>)
 80022d0:	211a      	movs	r1, #26
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff ff66 	bl	80021a4 <OLED_ShowString>
    if (temp2 > -900.0) {
 80022d8:	493a      	ldr	r1, [pc, #232]	@ (80023c4 <OLED_DisplayTemperature+0x160>)
 80022da:	68b8      	ldr	r0, [r7, #8]
 80022dc:	f7fe ff0e 	bl	80010fc <__aeabi_fcmpgt>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <OLED_DisplayTemperature+0xa6>
        sprintf(buffer, "%.1fC", temp2);
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	f7fe f89e 	bl	8000428 <__aeabi_f2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	f107 0014 	add.w	r0, r7, #20
 80022f4:	4934      	ldr	r1, [pc, #208]	@ (80023c8 <OLED_DisplayTemperature+0x164>)
 80022f6:	f002 fffd 	bl	80052f4 <siprintf>
        OLED_ShowString(56, 26, buffer, 8);
 80022fa:	f107 0214 	add.w	r2, r7, #20
 80022fe:	2308      	movs	r3, #8
 8002300:	211a      	movs	r1, #26
 8002302:	2038      	movs	r0, #56	@ 0x38
 8002304:	f7ff ff4e 	bl	80021a4 <OLED_ShowString>
 8002308:	e005      	b.n	8002316 <OLED_DisplayTemperature+0xb2>
    } else {
        OLED_ShowString(56, 26, "Error", 8);
 800230a:	2308      	movs	r3, #8
 800230c:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <OLED_DisplayTemperature+0x168>)
 800230e:	211a      	movs	r1, #26
 8002310:	2038      	movs	r0, #56	@ 0x38
 8002312:	f7ff ff47 	bl	80021a4 <OLED_ShowString>
    }

    // 显示传感器3温度
    OLED_ShowString(0, 36, "Sensor3:", 8);
 8002316:	2308      	movs	r3, #8
 8002318:	4a2e      	ldr	r2, [pc, #184]	@ (80023d4 <OLED_DisplayTemperature+0x170>)
 800231a:	2124      	movs	r1, #36	@ 0x24
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff ff41 	bl	80021a4 <OLED_ShowString>
    if (temp3 > -900.0) {
 8002322:	4928      	ldr	r1, [pc, #160]	@ (80023c4 <OLED_DisplayTemperature+0x160>)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7fe fee9 	bl	80010fc <__aeabi_fcmpgt>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d011      	beq.n	8002354 <OLED_DisplayTemperature+0xf0>
        sprintf(buffer, "%.1fC", temp3);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe f879 	bl	8000428 <__aeabi_f2d>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	f107 0014 	add.w	r0, r7, #20
 800233e:	4922      	ldr	r1, [pc, #136]	@ (80023c8 <OLED_DisplayTemperature+0x164>)
 8002340:	f002 ffd8 	bl	80052f4 <siprintf>
        OLED_ShowString(56, 36, buffer, 8);
 8002344:	f107 0214 	add.w	r2, r7, #20
 8002348:	2308      	movs	r3, #8
 800234a:	2124      	movs	r1, #36	@ 0x24
 800234c:	2038      	movs	r0, #56	@ 0x38
 800234e:	f7ff ff29 	bl	80021a4 <OLED_ShowString>
 8002352:	e005      	b.n	8002360 <OLED_DisplayTemperature+0xfc>
    } else {
        OLED_ShowString(56, 36, "Error", 8);
 8002354:	2308      	movs	r3, #8
 8002356:	4a1d      	ldr	r2, [pc, #116]	@ (80023cc <OLED_DisplayTemperature+0x168>)
 8002358:	2124      	movs	r1, #36	@ 0x24
 800235a:	2038      	movs	r0, #56	@ 0x38
 800235c:	f7ff ff22 	bl	80021a4 <OLED_ShowString>
    }
    
    // 显示继电器状态
    OLED_ShowString(0, 50, "Relay:", 8);
 8002360:	2308      	movs	r3, #8
 8002362:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <OLED_DisplayTemperature+0x174>)
 8002364:	2132      	movs	r1, #50	@ 0x32
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff ff1c 	bl	80021a4 <OLED_ShowString>
    if (relay_status) {
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <OLED_DisplayTemperature+0x11c>
        OLED_ShowString(56, 50, "ON ", 8);
 8002372:	2308      	movs	r3, #8
 8002374:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <OLED_DisplayTemperature+0x178>)
 8002376:	2132      	movs	r1, #50	@ 0x32
 8002378:	2038      	movs	r0, #56	@ 0x38
 800237a:	f7ff ff13 	bl	80021a4 <OLED_ShowString>
 800237e:	e005      	b.n	800238c <OLED_DisplayTemperature+0x128>
    } else {
        OLED_ShowString(56, 50, "OFF", 8);
 8002380:	2308      	movs	r3, #8
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <OLED_DisplayTemperature+0x17c>)
 8002384:	2132      	movs	r1, #50	@ 0x32
 8002386:	2038      	movs	r0, #56	@ 0x38
 8002388:	f7ff ff0c 	bl	80021a4 <OLED_ShowString>
    }
    
    // 显示温度阈值
    // OLED_ShowString(0, 64, "Threshold:", 8);
    sprintf(buffer, "%.f", temp_threshold);
 800238c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800238e:	f7fe f84b 	bl	8000428 <__aeabi_f2d>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	f107 0014 	add.w	r0, r7, #20
 800239a:	4912      	ldr	r1, [pc, #72]	@ (80023e4 <OLED_DisplayTemperature+0x180>)
 800239c:	f002 ffaa 	bl	80052f4 <siprintf>
    OLED_ShowString(90, 50, buffer, 8);
 80023a0:	f107 0214 	add.w	r2, r7, #20
 80023a4:	2308      	movs	r3, #8
 80023a6:	2132      	movs	r1, #50	@ 0x32
 80023a8:	205a      	movs	r0, #90	@ 0x5a
 80023aa:	f7ff fefb 	bl	80021a4 <OLED_ShowString>
    
    OLED_Refresh();  // 更新显示
 80023ae:	f7ff fd51 	bl	8001e54 <OLED_Refresh>
}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	@ 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	08008d00 	.word	0x08008d00
 80023c0:	08008d14 	.word	0x08008d14
 80023c4:	c4610000 	.word	0xc4610000
 80023c8:	08008d20 	.word	0x08008d20
 80023cc:	08008d28 	.word	0x08008d28
 80023d0:	08008d30 	.word	0x08008d30
 80023d4:	08008d3c 	.word	0x08008d3c
 80023d8:	08008d48 	.word	0x08008d48
 80023dc:	08008d50 	.word	0x08008d50
 80023e0:	08008d54 	.word	0x08008d54
 80023e4:	08008d58 	.word	0x08008d58

080023e8 <OLED_DisplaySensorInfo>:

// 显示传感器信息
void OLED_DisplaySensorInfo(uint8_t num_sensors)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
    
    OLED_Clear();  // 清屏
 80023f2:	f7ff fd7f 	bl	8001ef4 <OLED_Clear>
    
    // 显示标题
    OLED_ShowString(0, 0, "DS18B20 Sensors", 8);
 80023f6:	2308      	movs	r3, #8
 80023f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002464 <OLED_DisplaySensorInfo+0x7c>)
 80023fa:	2100      	movs	r1, #0
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fed1 	bl	80021a4 <OLED_ShowString>
    
    // 显示传感器数量
    sprintf(buffer, "Found: %d sensors", num_sensors);
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4917      	ldr	r1, [pc, #92]	@ (8002468 <OLED_DisplaySensorInfo+0x80>)
 800240a:	4618      	mov	r0, r3
 800240c:	f002 ff72 	bl	80052f4 <siprintf>
    OLED_ShowString(0, 16, buffer, 8);
 8002410:	f107 020c 	add.w	r2, r7, #12
 8002414:	2308      	movs	r3, #8
 8002416:	2110      	movs	r1, #16
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fec3 	bl	80021a4 <OLED_ShowString>
    
    if (num_sensors == 0) {
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <OLED_DisplaySensorInfo+0x56>
        OLED_ShowString(0, 30, "No sensors found!", 8);
 8002424:	2308      	movs	r3, #8
 8002426:	4a11      	ldr	r2, [pc, #68]	@ (800246c <OLED_DisplaySensorInfo+0x84>)
 8002428:	211e      	movs	r1, #30
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff feba 	bl	80021a4 <OLED_ShowString>
        OLED_ShowString(0, 40, "Check connections", 8);
 8002430:	2308      	movs	r3, #8
 8002432:	4a0f      	ldr	r2, [pc, #60]	@ (8002470 <OLED_DisplaySensorInfo+0x88>)
 8002434:	2128      	movs	r1, #40	@ 0x28
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff feb4 	bl	80021a4 <OLED_ShowString>
 800243c:	e00b      	b.n	8002456 <OLED_DisplaySensorInfo+0x6e>
    } else {
        OLED_ShowString(0, 30, "System ready", 8);
 800243e:	2308      	movs	r3, #8
 8002440:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <OLED_DisplaySensorInfo+0x8c>)
 8002442:	211e      	movs	r1, #30
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff fead 	bl	80021a4 <OLED_ShowString>
        OLED_ShowString(0, 40, "Monitoring...", 8);
 800244a:	2308      	movs	r3, #8
 800244c:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <OLED_DisplaySensorInfo+0x90>)
 800244e:	2128      	movs	r1, #40	@ 0x28
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff fea7 	bl	80021a4 <OLED_ShowString>
    }
    
    OLED_Refresh();  // 更新显示
 8002456:	f7ff fcfd 	bl	8001e54 <OLED_Refresh>
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	08008d5c 	.word	0x08008d5c
 8002468:	08008d6c 	.word	0x08008d6c
 800246c:	08008d80 	.word	0x08008d80
 8002470:	08008d94 	.word	0x08008d94
 8002474:	08008da8 	.word	0x08008da8
 8002478:	08008db8 	.word	0x08008db8

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_MspInit+0x5c>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <HAL_MspInit+0x5c>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <HAL_MspInit+0x5c>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <HAL_MspInit+0x5c>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <HAL_MspInit+0x5c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <HAL_MspInit+0x5c>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80024b2:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <HAL_MspInit+0x60>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_MspInit+0x60>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <NMI_Handler+0x4>

080024e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <MemManage_Handler+0x4>

080024f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <UsageFault_Handler+0x4>

08002508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002530:	f000 fa12 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return 1;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_kill>:

int _kill(int pid, int sig)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002550:	f002 ff96 	bl	8005480 <__errno>
 8002554:	4603      	mov	r3, r0
 8002556:	2216      	movs	r2, #22
 8002558:	601a      	str	r2, [r3, #0]
  return -1;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_exit>:

void _exit (int status)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800256e:	f04f 31ff 	mov.w	r1, #4294967295
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffe7 	bl	8002546 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <_exit+0x12>

0800257c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e00a      	b.n	80025a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800258e:	f3af 8000 	nop.w
 8002592:	4601      	mov	r1, r0
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	b2ca      	uxtb	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dbf0      	blt.n	800258e <_read+0x12>
  }

  return len;
 80025ac:	687b      	ldr	r3, [r7, #4]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e009      	b.n	80025dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbf1      	blt.n	80025c8 <_write+0x12>
  }
  return len;
 80025e4:	687b      	ldr	r3, [r7, #4]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_close>:

int _close(int file)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002614:	605a      	str	r2, [r3, #4]
  return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <_isatty>:

int _isatty(int file)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
	...

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f002 fefe 	bl	8005480 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20005000 	.word	0x20005000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	2000067c 	.word	0x2000067c
 80026b8:	20000860 	.word	0x20000860

080026bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <MX_USART1_UART_Init+0x50>)
 80026d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026ee:	220c      	movs	r2, #12
 80026f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026fe:	4805      	ldr	r0, [pc, #20]	@ (8002714 <MX_USART1_UART_Init+0x4c>)
 8002700:	f001 fcae 	bl	8004060 <HAL_UART_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800270a:	f7ff fb80 	bl	8001e0e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000680 	.word	0x20000680
 8002718:	40013800 	.word	0x40013800

0800271c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002720:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002722:	4a12      	ldr	r2, [pc, #72]	@ (800276c <MX_USART3_UART_Init+0x50>)
 8002724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800272c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800272e:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002734:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002742:	220c      	movs	r2, #12
 8002744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002752:	4805      	ldr	r0, [pc, #20]	@ (8002768 <MX_USART3_UART_Init+0x4c>)
 8002754:	f001 fc84 	bl	8004060 <HAL_UART_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800275e:	f7ff fb56 	bl	8001e0e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200006c8 	.word	0x200006c8
 800276c:	40004800 	.word	0x40004800

08002770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0318 	add.w	r3, r7, #24
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a38      	ldr	r2, [pc, #224]	@ (800286c <HAL_UART_MspInit+0xfc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d132      	bne.n	80027f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002790:	4b37      	ldr	r3, [pc, #220]	@ (8002870 <HAL_UART_MspInit+0x100>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a36      	ldr	r2, [pc, #216]	@ (8002870 <HAL_UART_MspInit+0x100>)
 8002796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_UART_MspInit+0x100>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_UART_MspInit+0x100>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a30      	ldr	r2, [pc, #192]	@ (8002870 <HAL_UART_MspInit+0x100>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <HAL_UART_MspInit+0x100>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0318 	add.w	r3, r7, #24
 80027d2:	4619      	mov	r1, r3
 80027d4:	4827      	ldr	r0, [pc, #156]	@ (8002874 <HAL_UART_MspInit+0x104>)
 80027d6:	f000 f9e3 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 0318 	add.w	r3, r7, #24
 80027ec:	4619      	mov	r1, r3
 80027ee:	4821      	ldr	r0, [pc, #132]	@ (8002874 <HAL_UART_MspInit+0x104>)
 80027f0:	f000 f9d6 	bl	8002ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027f4:	e036      	b.n	8002864 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002878 <HAL_UART_MspInit+0x108>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d131      	bne.n	8002864 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_UART_MspInit+0x100>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <HAL_UART_MspInit+0x100>)
 8002806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <HAL_UART_MspInit+0x100>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_UART_MspInit+0x100>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <HAL_UART_MspInit+0x100>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_UART_MspInit+0x100>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	f107 0318 	add.w	r3, r7, #24
 8002842:	4619      	mov	r1, r3
 8002844:	480d      	ldr	r0, [pc, #52]	@ (800287c <HAL_UART_MspInit+0x10c>)
 8002846:	f000 f9ab 	bl	8002ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800284a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	4619      	mov	r1, r3
 800285e:	4807      	ldr	r0, [pc, #28]	@ (800287c <HAL_UART_MspInit+0x10c>)
 8002860:	f000 f99e 	bl	8002ba0 <HAL_GPIO_Init>
}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	@ 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40013800 	.word	0x40013800
 8002870:	40021000 	.word	0x40021000
 8002874:	40010800 	.word	0x40010800
 8002878:	40004800 	.word	0x40004800
 800287c:	40010c00 	.word	0x40010c00

08002880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002880:	f7ff ff1c 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002884:	480b      	ldr	r0, [pc, #44]	@ (80028b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002886:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002888:	4a0c      	ldr	r2, [pc, #48]	@ (80028bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800289c:	4c09      	ldr	r4, [pc, #36]	@ (80028c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028aa:	f002 fdef 	bl	800548c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7ff f89d 	bl	80019ec <main>
  bx lr
 80028b2:	4770      	bx	lr
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028bc:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 80028c0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028c4:	20000860 	.word	0x20000860

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_Init+0x28>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	@ (80028f4 <HAL_Init+0x28>)
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 f92b 	bl	8002b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 f808 	bl	80028f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fdc8 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f935 	bl	8002b86 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 f90b 	bl	8002b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000000 	.word	0x20000000
 8002950:	20000008 	.word	0x20000008
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_IncTick+0x1c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_IncTick+0x20>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a03      	ldr	r2, [pc, #12]	@ (8002978 <HAL_IncTick+0x20>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000008 	.word	0x20000008
 8002978:	20000710 	.word	0x20000710

0800297c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b02      	ldr	r3, [pc, #8]	@ (800298c <HAL_GetTick+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	20000710 	.word	0x20000710

08002990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002998:	f7ff fff0 	bl	800297c <HAL_GetTick>
 800299c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d005      	beq.n	80029b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_Delay+0x44>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029b6:	bf00      	nop
 80029b8:	f7ff ffe0 	bl	800297c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d8f7      	bhi.n	80029b8 <HAL_Delay+0x28>
  {
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000008 	.word	0x20000008

080029d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0a:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	60d3      	str	r3, [r2, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	@ (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	@ (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b04:	d301      	bcc.n	8002b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00f      	b.n	8002b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <SysTick_Config+0x40>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b12:	210f      	movs	r1, #15
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f7ff ff90 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <SysTick_Config+0x40>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b22:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <SysTick_Config+0x40>)
 8002b24:	2207      	movs	r2, #7
 8002b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff49 	bl	80029d8 <__NVIC_SetPriorityGrouping>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b60:	f7ff ff5e 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7ff ff90 	bl	8002a90 <NVIC_EncodePriority>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff5f 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffb0 	bl	8002af4 <SysTick_Config>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b08b      	sub	sp, #44	@ 0x2c
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb2:	e169      	b.n	8002e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f040 8158 	bne.w	8002e82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4a9a      	ldr	r2, [pc, #616]	@ (8002e40 <HAL_GPIO_Init+0x2a0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d05e      	beq.n	8002c9a <HAL_GPIO_Init+0xfa>
 8002bdc:	4a98      	ldr	r2, [pc, #608]	@ (8002e40 <HAL_GPIO_Init+0x2a0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d875      	bhi.n	8002cce <HAL_GPIO_Init+0x12e>
 8002be2:	4a98      	ldr	r2, [pc, #608]	@ (8002e44 <HAL_GPIO_Init+0x2a4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d058      	beq.n	8002c9a <HAL_GPIO_Init+0xfa>
 8002be8:	4a96      	ldr	r2, [pc, #600]	@ (8002e44 <HAL_GPIO_Init+0x2a4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d86f      	bhi.n	8002cce <HAL_GPIO_Init+0x12e>
 8002bee:	4a96      	ldr	r2, [pc, #600]	@ (8002e48 <HAL_GPIO_Init+0x2a8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d052      	beq.n	8002c9a <HAL_GPIO_Init+0xfa>
 8002bf4:	4a94      	ldr	r2, [pc, #592]	@ (8002e48 <HAL_GPIO_Init+0x2a8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d869      	bhi.n	8002cce <HAL_GPIO_Init+0x12e>
 8002bfa:	4a94      	ldr	r2, [pc, #592]	@ (8002e4c <HAL_GPIO_Init+0x2ac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d04c      	beq.n	8002c9a <HAL_GPIO_Init+0xfa>
 8002c00:	4a92      	ldr	r2, [pc, #584]	@ (8002e4c <HAL_GPIO_Init+0x2ac>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d863      	bhi.n	8002cce <HAL_GPIO_Init+0x12e>
 8002c06:	4a92      	ldr	r2, [pc, #584]	@ (8002e50 <HAL_GPIO_Init+0x2b0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d046      	beq.n	8002c9a <HAL_GPIO_Init+0xfa>
 8002c0c:	4a90      	ldr	r2, [pc, #576]	@ (8002e50 <HAL_GPIO_Init+0x2b0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d85d      	bhi.n	8002cce <HAL_GPIO_Init+0x12e>
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d82a      	bhi.n	8002c6c <HAL_GPIO_Init+0xcc>
 8002c16:	2b12      	cmp	r3, #18
 8002c18:	d859      	bhi.n	8002cce <HAL_GPIO_Init+0x12e>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <HAL_GPIO_Init+0x80>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c9b 	.word	0x08002c9b
 8002c24:	08002c75 	.word	0x08002c75
 8002c28:	08002c87 	.word	0x08002c87
 8002c2c:	08002cc9 	.word	0x08002cc9
 8002c30:	08002ccf 	.word	0x08002ccf
 8002c34:	08002ccf 	.word	0x08002ccf
 8002c38:	08002ccf 	.word	0x08002ccf
 8002c3c:	08002ccf 	.word	0x08002ccf
 8002c40:	08002ccf 	.word	0x08002ccf
 8002c44:	08002ccf 	.word	0x08002ccf
 8002c48:	08002ccf 	.word	0x08002ccf
 8002c4c:	08002ccf 	.word	0x08002ccf
 8002c50:	08002ccf 	.word	0x08002ccf
 8002c54:	08002ccf 	.word	0x08002ccf
 8002c58:	08002ccf 	.word	0x08002ccf
 8002c5c:	08002ccf 	.word	0x08002ccf
 8002c60:	08002ccf 	.word	0x08002ccf
 8002c64:	08002c7d 	.word	0x08002c7d
 8002c68:	08002c91 	.word	0x08002c91
 8002c6c:	4a79      	ldr	r2, [pc, #484]	@ (8002e54 <HAL_GPIO_Init+0x2b4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c72:	e02c      	b.n	8002cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	623b      	str	r3, [r7, #32]
          break;
 8002c7a:	e029      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	3304      	adds	r3, #4
 8002c82:	623b      	str	r3, [r7, #32]
          break;
 8002c84:	e024      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	623b      	str	r3, [r7, #32]
          break;
 8002c8e:	e01f      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	330c      	adds	r3, #12
 8002c96:	623b      	str	r3, [r7, #32]
          break;
 8002c98:	e01a      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	623b      	str	r3, [r7, #32]
          break;
 8002ca6:	e013      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	611a      	str	r2, [r3, #16]
          break;
 8002cba:	e009      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	615a      	str	r2, [r3, #20]
          break;
 8002cc6:	e003      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
          break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_GPIO_Init+0x130>
          break;
 8002cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2bff      	cmp	r3, #255	@ 0xff
 8002cd4:	d801      	bhi.n	8002cda <HAL_GPIO_Init+0x13a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	e001      	b.n	8002cde <HAL_GPIO_Init+0x13e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2bff      	cmp	r3, #255	@ 0xff
 8002ce4:	d802      	bhi.n	8002cec <HAL_GPIO_Init+0x14c>
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0x152>
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	3b08      	subs	r3, #8
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	210f      	movs	r1, #15
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80b1 	beq.w	8002e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d20:	4b4d      	ldr	r3, [pc, #308]	@ (8002e58 <HAL_GPIO_Init+0x2b8>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a4c      	ldr	r2, [pc, #304]	@ (8002e58 <HAL_GPIO_Init+0x2b8>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6193      	str	r3, [r2, #24]
 8002d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e58 <HAL_GPIO_Init+0x2b8>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d38:	4a48      	ldr	r2, [pc, #288]	@ (8002e5c <HAL_GPIO_Init+0x2bc>)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a40      	ldr	r2, [pc, #256]	@ (8002e60 <HAL_GPIO_Init+0x2c0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_GPIO_Init+0x1ec>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3f      	ldr	r2, [pc, #252]	@ (8002e64 <HAL_GPIO_Init+0x2c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00d      	beq.n	8002d88 <HAL_GPIO_Init+0x1e8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e68 <HAL_GPIO_Init+0x2c8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <HAL_GPIO_Init+0x1e4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3d      	ldr	r2, [pc, #244]	@ (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <HAL_GPIO_Init+0x1e0>
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x1ee>
 8002d80:	2304      	movs	r3, #4
 8002d82:	e004      	b.n	8002d8e <HAL_GPIO_Init+0x1ee>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e002      	b.n	8002d8e <HAL_GPIO_Init+0x1ee>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_GPIO_Init+0x1ee>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	f002 0203 	and.w	r2, r2, #3
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	4093      	lsls	r3, r2
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d9e:	492f      	ldr	r1, [pc, #188]	@ (8002e5c <HAL_GPIO_Init+0x2bc>)
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002db8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	492c      	ldr	r1, [pc, #176]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	4928      	ldr	r1, [pc, #160]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002de0:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	4922      	ldr	r1, [pc, #136]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dee:	4b20      	ldr	r3, [pc, #128]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	491e      	ldr	r1, [pc, #120]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d006      	beq.n	8002e16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4918      	ldr	r1, [pc, #96]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
 8002e14:	e006      	b.n	8002e24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e16:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	4914      	ldr	r1, [pc, #80]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d021      	beq.n	8002e74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e30:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	490e      	ldr	r1, [pc, #56]	@ (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e021      	b.n	8002e82 <HAL_GPIO_Init+0x2e2>
 8002e3e:	bf00      	nop
 8002e40:	10320000 	.word	0x10320000
 8002e44:	10310000 	.word	0x10310000
 8002e48:	10220000 	.word	0x10220000
 8002e4c:	10210000 	.word	0x10210000
 8002e50:	10120000 	.word	0x10120000
 8002e54:	10110000 	.word	0x10110000
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40010800 	.word	0x40010800
 8002e64:	40010c00 	.word	0x40010c00
 8002e68:	40011000 	.word	0x40011000
 8002e6c:	40011400 	.word	0x40011400
 8002e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_GPIO_Init+0x304>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	4909      	ldr	r1, [pc, #36]	@ (8002ea4 <HAL_GPIO_Init+0x304>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f47f ae8e 	bne.w	8002bb4 <HAL_GPIO_Init+0x14>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	372c      	adds	r7, #44	@ 0x2c
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e001      	b.n	8002eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	807b      	strh	r3, [r7, #2]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee6:	787b      	ldrb	r3, [r7, #1]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eec:	887a      	ldrh	r2, [r7, #2]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef2:	e003      	b.n	8002efc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	611a      	str	r2, [r3, #16]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e12b      	b.n	8003172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe f9aa 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	@ 0x24
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f001 f832 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a81      	ldr	r2, [pc, #516]	@ (800317c <HAL_I2C_Init+0x274>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d807      	bhi.n	8002f8c <HAL_I2C_Init+0x84>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a80      	ldr	r2, [pc, #512]	@ (8003180 <HAL_I2C_Init+0x278>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e006      	b.n	8002f9a <HAL_I2C_Init+0x92>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003184 <HAL_I2C_Init+0x27c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0e7      	b.n	8003172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a78      	ldr	r2, [pc, #480]	@ (8003188 <HAL_I2C_Init+0x280>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800317c <HAL_I2C_Init+0x274>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d802      	bhi.n	8002fdc <HAL_I2C_Init+0xd4>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	e009      	b.n	8002ff0 <HAL_I2C_Init+0xe8>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a69      	ldr	r2, [pc, #420]	@ (800318c <HAL_I2C_Init+0x284>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	495c      	ldr	r1, [pc, #368]	@ (800317c <HAL_I2C_Init+0x274>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d819      	bhi.n	8003044 <HAL_I2C_Init+0x13c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e59      	subs	r1, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fbb1 f3f3 	udiv	r3, r1, r3
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003024:	400b      	ands	r3, r1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_I2C_Init+0x138>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e59      	subs	r1, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fbb1 f3f3 	udiv	r3, r1, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	e051      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003040:	2304      	movs	r3, #4
 8003042:	e04f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <HAL_I2C_Init+0x168>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e012      	b.n	8003096 <HAL_I2C_Init+0x18e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x196>
 800309a:	2301      	movs	r3, #1
 800309c:	e022      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <HAL_I2C_Init+0x1bc>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e58      	subs	r0, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	440b      	add	r3, r1
 80030b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	0099      	lsls	r1, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6809      	ldr	r1, [r1, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6911      	ldr	r1, [r2, #16]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	000186a0 	.word	0x000186a0
 8003180:	001e847f 	.word	0x001e847f
 8003184:	003d08ff 	.word	0x003d08ff
 8003188:	431bde83 	.word	0x431bde83
 800318c:	10624dd3 	.word	0x10624dd3

08003190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
 80031a0:	4613      	mov	r3, r2
 80031a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff fbea 	bl	800297c <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 80e0 	bne.w	8003378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2319      	movs	r3, #25
 80031be:	2201      	movs	r2, #1
 80031c0:	4970      	ldr	r1, [pc, #448]	@ (8003384 <HAL_I2C_Master_Transmit+0x1f4>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f964 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0d3      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x50>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0cc      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d007      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2221      	movs	r2, #33	@ 0x21
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2210      	movs	r2, #16
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a50      	ldr	r2, [pc, #320]	@ (8003388 <HAL_I2C_Master_Transmit+0x1f8>)
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003248:	8979      	ldrh	r1, [r7, #10]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f89c 	bl	800338c <I2C_MasterRequestWrite>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e08d      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003274:	e066      	b.n	8003344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa22 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b04      	cmp	r3, #4
 800328c:	d107      	bne.n	800329e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06b      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d11b      	bne.n	8003318 <HAL_I2C_Master_Transmit+0x188>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	6a39      	ldr	r1, [r7, #32]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fa19 	bl	8003754 <I2C_WaitOnBTFFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e01a      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d194      	bne.n	8003276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	00100002 	.word	0x00100002
 8003388:	ffff0000 	.word	0xffff0000

0800338c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d006      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d003      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033b4:	d108      	bne.n	80033c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00b      	b.n	80033e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d107      	bne.n	80033e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f84f 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003406:	d103      	bne.n	8003410 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e035      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800341c:	d108      	bne.n	8003430 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	e01b      	b.n	8003468 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	11db      	asrs	r3, r3, #7
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 0306 	and.w	r3, r3, #6
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f063 030f 	orn	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	490e      	ldr	r1, [pc, #56]	@ (8003488 <I2C_MasterRequestWrite+0xfc>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f898 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e010      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4907      	ldr	r1, [pc, #28]	@ (800348c <I2C_MasterRequestWrite+0x100>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f888 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	00010008 	.word	0x00010008
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	e048      	b.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d044      	beq.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7ff fa67 	bl	800297c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d139      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10d      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	e00c      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d116      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e023      	b.n	800357c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <I2C_WaitOnFlagUntilTimeout+0xca>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	e00c      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d093      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003592:	e071      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d123      	bne.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e067      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d041      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7ff f9c2 	bl	800297c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d136      	bne.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10c      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e021      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10c      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e00b      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f af6d 	bne.w	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d0:	e034      	b.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f886 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e034      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d028      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7ff f947 	bl	800297c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11d      	bne.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d016      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003746:	2b80      	cmp	r3, #128	@ 0x80
 8003748:	d1c3      	bne.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f83e 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7ff f8ff 	bl	800297c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037fa:	d11b      	bne.n	8003834 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003804:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e272      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8087 	beq.w	800396e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003860:	4b92      	ldr	r3, [pc, #584]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00c      	beq.n	8003886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800386c:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d112      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
 8003878:	4b8c      	ldr	r3, [pc, #560]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d10b      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06c      	beq.n	800396c <HAL_RCC_OscConfig+0x12c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e24c      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x76>
 80038a8:	4b80      	ldr	r3, [pc, #512]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a7f      	ldr	r2, [pc, #508]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e02e      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b7b      	ldr	r3, [pc, #492]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7a      	ldr	r2, [pc, #488]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b78      	ldr	r3, [pc, #480]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a77      	ldr	r2, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xbc>
 80038e2:	4b72      	ldr	r3, [pc, #456]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a71      	ldr	r2, [pc, #452]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6f      	ldr	r3, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038fc:	4b6b      	ldr	r3, [pc, #428]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6a      	ldr	r2, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b68      	ldr	r3, [pc, #416]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a67      	ldr	r2, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7ff f82e 	bl	800297c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7ff f82a 	bl	800297c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e200      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b5d      	ldr	r3, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xe4>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7ff f81a 	bl	800297c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7ff f816 	bl	800297c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1ec      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b53      	ldr	r3, [pc, #332]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x10c>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003986:	4b49      	ldr	r3, [pc, #292]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
 8003992:	4b46      	ldr	r3, [pc, #280]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b43      	ldr	r3, [pc, #268]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1c0      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4939      	ldr	r1, [pc, #228]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe ffcf 	bl	800297c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe ffcb 	bl	800297c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1a1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b2d      	ldr	r3, [pc, #180]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b2a      	ldr	r3, [pc, #168]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4927      	ldr	r1, [pc, #156]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b26      	ldr	r3, [pc, #152]	@ (8003ab0 <HAL_RCC_OscConfig+0x270>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe ffae 	bl	800297c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fe ffaa 	bl	800297c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e180      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03a      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d019      	beq.n	8003a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b17      	ldr	r3, [pc, #92]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fe ff8e 	bl	800297c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fe ff8a 	bl	800297c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e160      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f000 face 	bl	8004024 <RCC_Delay>
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fe ff74 	bl	800297c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fe ff70 	bl	800297c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d908      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e146      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	42420000 	.word	0x42420000
 8003ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	4b92      	ldr	r3, [pc, #584]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e9      	bne.n	8003a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a6 	beq.w	8003c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad6:	4b8b      	ldr	r3, [pc, #556]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b88      	ldr	r3, [pc, #544]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a87      	ldr	r2, [pc, #540]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]
 8003aee:	4b85      	ldr	r3, [pc, #532]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b82      	ldr	r3, [pc, #520]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe ff31 	bl	800297c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe ff2d 	bl	800297c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	@ 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e103      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b75      	ldr	r3, [pc, #468]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x312>
 8003b44:	4b6f      	ldr	r3, [pc, #444]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	e02d      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a69      	ldr	r2, [pc, #420]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	4b67      	ldr	r3, [pc, #412]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a66      	ldr	r2, [pc, #408]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	e01c      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x356>
 8003b7c:	4b61      	ldr	r3, [pc, #388]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a60      	ldr	r2, [pc, #384]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	4b5e      	ldr	r3, [pc, #376]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e00b      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b96:	4b5b      	ldr	r3, [pc, #364]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	4b58      	ldr	r3, [pc, #352]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d015      	beq.n	8003be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fee1 	bl	800297c <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe fedd 	bl	800297c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0b1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ee      	beq.n	8003bbe <HAL_RCC_OscConfig+0x37e>
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fecb 	bl	800297c <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe fec7 	bl	800297c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e09b      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c00:	4b40      	ldr	r3, [pc, #256]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ee      	bne.n	8003bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8087 	beq.w	8003d36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c28:	4b36      	ldr	r3, [pc, #216]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d061      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d146      	bne.n	8003cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b33      	ldr	r3, [pc, #204]	@ (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe fe9b 	bl	800297c <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe fe97 	bl	800297c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e06d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5c:	4b29      	ldr	r3, [pc, #164]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c72:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4921      	ldr	r1, [pc, #132]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a19      	ldr	r1, [r3, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	430b      	orrs	r3, r1
 8003c96:	491b      	ldr	r1, [pc, #108]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fe6b 	bl	800297c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fe67 	bl	800297c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x46a>
 8003cc8:	e035      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fe54 	bl	800297c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fe50 	bl	800297c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e026      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x498>
 8003cf6:	e01e      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e019      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <HAL_RCC_OscConfig+0x500>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b6a      	ldr	r3, [pc, #424]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	4965      	ldr	r1, [pc, #404]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a58      	ldr	r2, [pc, #352]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3d      	ldr	r3, [pc, #244]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e34:	f7fe fda2 	bl	800297c <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe fd9e 	bl	800297c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b27      	ldr	r3, [pc, #156]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4922      	ldr	r1, [pc, #136]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1cc>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_ClockConfig+0x1d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fd00 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	080095e0 	.word	0x080095e0
 8003f10:	20000000 	.word	0x20000000
 8003f14:	20000004 	.word	0x20000004

08003f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x30>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x36>
 8003f46:	e027      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	613b      	str	r3, [r7, #16]
      break;
 8003f4c:	e027      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a17      	ldr	r2, [pc, #92]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f66:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	0c5b      	lsrs	r3, r3, #17
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	4a11      	ldr	r2, [pc, #68]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7a:	fb03 f202 	mul.w	r2, r3, r2
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e004      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	613b      	str	r3, [r7, #16]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f9a:	613b      	str	r3, [r7, #16]
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	693b      	ldr	r3, [r7, #16]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	007a1200 	.word	0x007a1200
 8003fb4:	080095f8 	.word	0x080095f8
 8003fb8:	08009608 	.word	0x08009608
 8003fbc:	003d0900 	.word	0x003d0900

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b02      	ldr	r3, [pc, #8]	@ (8003fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000000 	.word	0x20000000

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd8:	f7ff fff2 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	@ (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	080095f0 	.word	0x080095f0

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004000:	f7ff ffde 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	@ (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	080095f0 	.word	0x080095f0

08004024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800402c:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <RCC_Delay+0x34>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0a      	ldr	r2, [pc, #40]	@ (800405c <RCC_Delay+0x38>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0a5b      	lsrs	r3, r3, #9
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004040:	bf00      	nop
  }
  while (Delay --);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	60fa      	str	r2, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <RCC_Delay+0x1c>
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	20000000 	.word	0x20000000
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e042      	b.n	80040f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fb72 	bl	8002770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f971 	bl	800438c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b20      	cmp	r3, #32
 800411e:	d175      	bne.n	800420c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Transmit+0x2c>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e06e      	b.n	800420e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	@ 0x21
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413e:	f7fe fc1d 	bl	800297c <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x6c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004174:	e02e      	b.n	80041d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f848 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e03a      	b.n	800420e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	3302      	adds	r3, #2
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	e007      	b.n	80041c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1cb      	bne.n	8004176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	@ 0x40
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f814 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e03b      	b.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d037      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fe fba4 	bl	800297c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	6a3a      	ldr	r2, [r7, #32]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <UART_WaitOnFlagUntilTimeout+0x30>
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e03a      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d023      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b80      	cmp	r3, #128	@ 0x80
 800425c:	d020      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b40      	cmp	r3, #64	@ 0x40
 8004262:	d01d      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d116      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f81d 	bl	80042c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2208      	movs	r2, #8
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e00f      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4013      	ands	r3, r2
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d0b4      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b095      	sub	sp, #84	@ 0x54
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	61fb      	str	r3, [r7, #28]
   return(result);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004326:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800432a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433c:	2b01      	cmp	r3, #1
 800433e:	d119      	bne.n	8004374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0310 	bic.w	r3, r3, #16
 8004356:	647b      	str	r3, [r7, #68]	@ 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004360:	61ba      	str	r2, [r7, #24]
 8004362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	613b      	str	r3, [r7, #16]
   return(result);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e5      	bne.n	8004340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004382:	bf00      	nop
 8004384:	3754      	adds	r7, #84	@ 0x54
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043c6:	f023 030c 	bic.w	r3, r3, #12
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	@ (80044a0 <UART_SetConfig+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7ff fe02 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	e002      	b.n	8004402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7ff fdea 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8004400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009a      	lsls	r2, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	4a22      	ldr	r2, [pc, #136]	@ (80044a4 <UART_SetConfig+0x118>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	0119      	lsls	r1, r3, #4
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009a      	lsls	r2, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fbb2 f2f3 	udiv	r2, r2, r3
 8004438:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <UART_SetConfig+0x118>)
 800443a:	fba3 0302 	umull	r0, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2064      	movs	r0, #100	@ 0x64
 8004442:	fb00 f303 	mul.w	r3, r0, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	@ 0x32
 800444c:	4a15      	ldr	r2, [pc, #84]	@ (80044a4 <UART_SetConfig+0x118>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004458:	4419      	add	r1, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009a      	lsls	r2, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <UART_SetConfig+0x118>)
 8004472:	fba3 0302 	umull	r0, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2064      	movs	r0, #100	@ 0x64
 800447a:	fb00 f303 	mul.w	r3, r0, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	3332      	adds	r3, #50	@ 0x32
 8004484:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <UART_SetConfig+0x118>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	f003 020f 	and.w	r2, r3, #15
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	440a      	add	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40013800 	.word	0x40013800
 80044a4:	51eb851f 	.word	0x51eb851f

080044a8 <__cvt>:
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ae:	461d      	mov	r5, r3
 80044b0:	bfbb      	ittet	lt
 80044b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80044b6:	461d      	movlt	r5, r3
 80044b8:	2300      	movge	r3, #0
 80044ba:	232d      	movlt	r3, #45	@ 0x2d
 80044bc:	b088      	sub	sp, #32
 80044be:	4614      	mov	r4, r2
 80044c0:	bfb8      	it	lt
 80044c2:	4614      	movlt	r4, r2
 80044c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80044c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80044c8:	7013      	strb	r3, [r2, #0]
 80044ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80044d0:	f023 0820 	bic.w	r8, r3, #32
 80044d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044d8:	d005      	beq.n	80044e6 <__cvt+0x3e>
 80044da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80044de:	d100      	bne.n	80044e2 <__cvt+0x3a>
 80044e0:	3601      	adds	r6, #1
 80044e2:	2302      	movs	r3, #2
 80044e4:	e000      	b.n	80044e8 <__cvt+0x40>
 80044e6:	2303      	movs	r3, #3
 80044e8:	aa07      	add	r2, sp, #28
 80044ea:	9204      	str	r2, [sp, #16]
 80044ec:	aa06      	add	r2, sp, #24
 80044ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044f2:	e9cd 3600 	strd	r3, r6, [sp]
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	f001 f889 	bl	8005610 <_dtoa_r>
 80044fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004502:	4607      	mov	r7, r0
 8004504:	d119      	bne.n	800453a <__cvt+0x92>
 8004506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004508:	07db      	lsls	r3, r3, #31
 800450a:	d50e      	bpl.n	800452a <__cvt+0x82>
 800450c:	eb00 0906 	add.w	r9, r0, r6
 8004510:	2200      	movs	r2, #0
 8004512:	2300      	movs	r3, #0
 8004514:	4620      	mov	r0, r4
 8004516:	4629      	mov	r1, r5
 8004518:	f7fc fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800451c:	b108      	cbz	r0, 8004522 <__cvt+0x7a>
 800451e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004522:	2230      	movs	r2, #48	@ 0x30
 8004524:	9b07      	ldr	r3, [sp, #28]
 8004526:	454b      	cmp	r3, r9
 8004528:	d31e      	bcc.n	8004568 <__cvt+0xc0>
 800452a:	4638      	mov	r0, r7
 800452c:	9b07      	ldr	r3, [sp, #28]
 800452e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004530:	1bdb      	subs	r3, r3, r7
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	b008      	add	sp, #32
 8004536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800453e:	eb00 0906 	add.w	r9, r0, r6
 8004542:	d1e5      	bne.n	8004510 <__cvt+0x68>
 8004544:	7803      	ldrb	r3, [r0, #0]
 8004546:	2b30      	cmp	r3, #48	@ 0x30
 8004548:	d10a      	bne.n	8004560 <__cvt+0xb8>
 800454a:	2200      	movs	r2, #0
 800454c:	2300      	movs	r3, #0
 800454e:	4620      	mov	r0, r4
 8004550:	4629      	mov	r1, r5
 8004552:	f7fc fa29 	bl	80009a8 <__aeabi_dcmpeq>
 8004556:	b918      	cbnz	r0, 8004560 <__cvt+0xb8>
 8004558:	f1c6 0601 	rsb	r6, r6, #1
 800455c:	f8ca 6000 	str.w	r6, [sl]
 8004560:	f8da 3000 	ldr.w	r3, [sl]
 8004564:	4499      	add	r9, r3
 8004566:	e7d3      	b.n	8004510 <__cvt+0x68>
 8004568:	1c59      	adds	r1, r3, #1
 800456a:	9107      	str	r1, [sp, #28]
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e7d9      	b.n	8004524 <__cvt+0x7c>

08004570 <__exponent>:
 8004570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004572:	2900      	cmp	r1, #0
 8004574:	bfb6      	itet	lt
 8004576:	232d      	movlt	r3, #45	@ 0x2d
 8004578:	232b      	movge	r3, #43	@ 0x2b
 800457a:	4249      	neglt	r1, r1
 800457c:	2909      	cmp	r1, #9
 800457e:	7002      	strb	r2, [r0, #0]
 8004580:	7043      	strb	r3, [r0, #1]
 8004582:	dd29      	ble.n	80045d8 <__exponent+0x68>
 8004584:	f10d 0307 	add.w	r3, sp, #7
 8004588:	461d      	mov	r5, r3
 800458a:	270a      	movs	r7, #10
 800458c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004590:	461a      	mov	r2, r3
 8004592:	fb07 1416 	mls	r4, r7, r6, r1
 8004596:	3430      	adds	r4, #48	@ 0x30
 8004598:	f802 4c01 	strb.w	r4, [r2, #-1]
 800459c:	460c      	mov	r4, r1
 800459e:	2c63      	cmp	r4, #99	@ 0x63
 80045a0:	4631      	mov	r1, r6
 80045a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80045a6:	dcf1      	bgt.n	800458c <__exponent+0x1c>
 80045a8:	3130      	adds	r1, #48	@ 0x30
 80045aa:	1e94      	subs	r4, r2, #2
 80045ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045b0:	4623      	mov	r3, r4
 80045b2:	1c41      	adds	r1, r0, #1
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	d30a      	bcc.n	80045ce <__exponent+0x5e>
 80045b8:	f10d 0309 	add.w	r3, sp, #9
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	42ac      	cmp	r4, r5
 80045c0:	bf88      	it	hi
 80045c2:	2300      	movhi	r3, #0
 80045c4:	3302      	adds	r3, #2
 80045c6:	4403      	add	r3, r0
 80045c8:	1a18      	subs	r0, r3, r0
 80045ca:	b003      	add	sp, #12
 80045cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80045d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80045d6:	e7ed      	b.n	80045b4 <__exponent+0x44>
 80045d8:	2330      	movs	r3, #48	@ 0x30
 80045da:	3130      	adds	r1, #48	@ 0x30
 80045dc:	7083      	strb	r3, [r0, #2]
 80045de:	70c1      	strb	r1, [r0, #3]
 80045e0:	1d03      	adds	r3, r0, #4
 80045e2:	e7f1      	b.n	80045c8 <__exponent+0x58>

080045e4 <_printf_float>:
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	b091      	sub	sp, #68	@ 0x44
 80045ea:	460c      	mov	r4, r1
 80045ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80045f0:	4616      	mov	r6, r2
 80045f2:	461f      	mov	r7, r3
 80045f4:	4605      	mov	r5, r0
 80045f6:	f000 fef9 	bl	80053ec <_localeconv_r>
 80045fa:	6803      	ldr	r3, [r0, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	9308      	str	r3, [sp, #32]
 8004600:	f7fb fda6 	bl	8000150 <strlen>
 8004604:	2300      	movs	r3, #0
 8004606:	930e      	str	r3, [sp, #56]	@ 0x38
 8004608:	f8d8 3000 	ldr.w	r3, [r8]
 800460c:	9009      	str	r0, [sp, #36]	@ 0x24
 800460e:	3307      	adds	r3, #7
 8004610:	f023 0307 	bic.w	r3, r3, #7
 8004614:	f103 0208 	add.w	r2, r3, #8
 8004618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800461c:	f8d4 b000 	ldr.w	fp, [r4]
 8004620:	f8c8 2000 	str.w	r2, [r8]
 8004624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800462c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800462e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800463a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800463e:	4b9c      	ldr	r3, [pc, #624]	@ (80048b0 <_printf_float+0x2cc>)
 8004640:	f7fc f9e4 	bl	8000a0c <__aeabi_dcmpun>
 8004644:	bb70      	cbnz	r0, 80046a4 <_printf_float+0xc0>
 8004646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	4b98      	ldr	r3, [pc, #608]	@ (80048b0 <_printf_float+0x2cc>)
 8004650:	f7fc f9be 	bl	80009d0 <__aeabi_dcmple>
 8004654:	bb30      	cbnz	r0, 80046a4 <_printf_float+0xc0>
 8004656:	2200      	movs	r2, #0
 8004658:	2300      	movs	r3, #0
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f7fc f9ad 	bl	80009bc <__aeabi_dcmplt>
 8004662:	b110      	cbz	r0, 800466a <_printf_float+0x86>
 8004664:	232d      	movs	r3, #45	@ 0x2d
 8004666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466a:	4a92      	ldr	r2, [pc, #584]	@ (80048b4 <_printf_float+0x2d0>)
 800466c:	4b92      	ldr	r3, [pc, #584]	@ (80048b8 <_printf_float+0x2d4>)
 800466e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004672:	bf8c      	ite	hi
 8004674:	4690      	movhi	r8, r2
 8004676:	4698      	movls	r8, r3
 8004678:	2303      	movs	r3, #3
 800467a:	f04f 0900 	mov.w	r9, #0
 800467e:	6123      	str	r3, [r4, #16]
 8004680:	f02b 0304 	bic.w	r3, fp, #4
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	4633      	mov	r3, r6
 8004688:	4621      	mov	r1, r4
 800468a:	4628      	mov	r0, r5
 800468c:	9700      	str	r7, [sp, #0]
 800468e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004690:	f000 f9d4 	bl	8004a3c <_printf_common>
 8004694:	3001      	adds	r0, #1
 8004696:	f040 8090 	bne.w	80047ba <_printf_float+0x1d6>
 800469a:	f04f 30ff 	mov.w	r0, #4294967295
 800469e:	b011      	add	sp, #68	@ 0x44
 80046a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	f7fc f9ae 	bl	8000a0c <__aeabi_dcmpun>
 80046b0:	b148      	cbz	r0, 80046c6 <_printf_float+0xe2>
 80046b2:	464b      	mov	r3, r9
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bfb8      	it	lt
 80046b8:	232d      	movlt	r3, #45	@ 0x2d
 80046ba:	4a80      	ldr	r2, [pc, #512]	@ (80048bc <_printf_float+0x2d8>)
 80046bc:	bfb8      	it	lt
 80046be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80046c2:	4b7f      	ldr	r3, [pc, #508]	@ (80048c0 <_printf_float+0x2dc>)
 80046c4:	e7d3      	b.n	800466e <_printf_float+0x8a>
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	d13f      	bne.n	8004750 <_printf_float+0x16c>
 80046d0:	2306      	movs	r3, #6
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	9206      	str	r2, [sp, #24]
 80046de:	aa0e      	add	r2, sp, #56	@ 0x38
 80046e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80046e4:	aa0d      	add	r2, sp, #52	@ 0x34
 80046e6:	9203      	str	r2, [sp, #12]
 80046e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80046ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	4642      	mov	r2, r8
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	4628      	mov	r0, r5
 80046f8:	464b      	mov	r3, r9
 80046fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80046fc:	f7ff fed4 	bl	80044a8 <__cvt>
 8004700:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004702:	4680      	mov	r8, r0
 8004704:	2947      	cmp	r1, #71	@ 0x47
 8004706:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004708:	d128      	bne.n	800475c <_printf_float+0x178>
 800470a:	1cc8      	adds	r0, r1, #3
 800470c:	db02      	blt.n	8004714 <_printf_float+0x130>
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	4299      	cmp	r1, r3
 8004712:	dd40      	ble.n	8004796 <_printf_float+0x1b2>
 8004714:	f1aa 0a02 	sub.w	sl, sl, #2
 8004718:	fa5f fa8a 	uxtb.w	sl, sl
 800471c:	4652      	mov	r2, sl
 800471e:	3901      	subs	r1, #1
 8004720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004724:	910d      	str	r1, [sp, #52]	@ 0x34
 8004726:	f7ff ff23 	bl	8004570 <__exponent>
 800472a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800472c:	4681      	mov	r9, r0
 800472e:	1813      	adds	r3, r2, r0
 8004730:	2a01      	cmp	r2, #1
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	dc02      	bgt.n	800473c <_printf_float+0x158>
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	07d2      	lsls	r2, r2, #31
 800473a:	d501      	bpl.n	8004740 <_printf_float+0x15c>
 800473c:	3301      	adds	r3, #1
 800473e:	6123      	str	r3, [r4, #16]
 8004740:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004744:	2b00      	cmp	r3, #0
 8004746:	d09e      	beq.n	8004686 <_printf_float+0xa2>
 8004748:	232d      	movs	r3, #45	@ 0x2d
 800474a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474e:	e79a      	b.n	8004686 <_printf_float+0xa2>
 8004750:	2947      	cmp	r1, #71	@ 0x47
 8004752:	d1bf      	bne.n	80046d4 <_printf_float+0xf0>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1bd      	bne.n	80046d4 <_printf_float+0xf0>
 8004758:	2301      	movs	r3, #1
 800475a:	e7ba      	b.n	80046d2 <_printf_float+0xee>
 800475c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004760:	d9dc      	bls.n	800471c <_printf_float+0x138>
 8004762:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004766:	d118      	bne.n	800479a <_printf_float+0x1b6>
 8004768:	2900      	cmp	r1, #0
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	dd0b      	ble.n	8004786 <_printf_float+0x1a2>
 800476e:	6121      	str	r1, [r4, #16]
 8004770:	b913      	cbnz	r3, 8004778 <_printf_float+0x194>
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	07d0      	lsls	r0, r2, #31
 8004776:	d502      	bpl.n	800477e <_printf_float+0x19a>
 8004778:	3301      	adds	r3, #1
 800477a:	440b      	add	r3, r1
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	f04f 0900 	mov.w	r9, #0
 8004782:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004784:	e7dc      	b.n	8004740 <_printf_float+0x15c>
 8004786:	b913      	cbnz	r3, 800478e <_printf_float+0x1aa>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	07d2      	lsls	r2, r2, #31
 800478c:	d501      	bpl.n	8004792 <_printf_float+0x1ae>
 800478e:	3302      	adds	r3, #2
 8004790:	e7f4      	b.n	800477c <_printf_float+0x198>
 8004792:	2301      	movs	r3, #1
 8004794:	e7f2      	b.n	800477c <_printf_float+0x198>
 8004796:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800479a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800479c:	4299      	cmp	r1, r3
 800479e:	db05      	blt.n	80047ac <_printf_float+0x1c8>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	6121      	str	r1, [r4, #16]
 80047a4:	07d8      	lsls	r0, r3, #31
 80047a6:	d5ea      	bpl.n	800477e <_printf_float+0x19a>
 80047a8:	1c4b      	adds	r3, r1, #1
 80047aa:	e7e7      	b.n	800477c <_printf_float+0x198>
 80047ac:	2900      	cmp	r1, #0
 80047ae:	bfcc      	ite	gt
 80047b0:	2201      	movgt	r2, #1
 80047b2:	f1c1 0202 	rsble	r2, r1, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	e7e0      	b.n	800477c <_printf_float+0x198>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	055a      	lsls	r2, r3, #21
 80047be:	d407      	bmi.n	80047d0 <_printf_float+0x1ec>
 80047c0:	6923      	ldr	r3, [r4, #16]
 80047c2:	4642      	mov	r2, r8
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	d12b      	bne.n	8004826 <_printf_float+0x242>
 80047ce:	e764      	b.n	800469a <_printf_float+0xb6>
 80047d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047d4:	f240 80dc 	bls.w	8004990 <_printf_float+0x3ac>
 80047d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047dc:	2200      	movs	r2, #0
 80047de:	2300      	movs	r3, #0
 80047e0:	f7fc f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d033      	beq.n	8004850 <_printf_float+0x26c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	4a35      	ldr	r2, [pc, #212]	@ (80048c4 <_printf_float+0x2e0>)
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	f43f af51 	beq.w	800469a <_printf_float+0xb6>
 80047f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80047fc:	4543      	cmp	r3, r8
 80047fe:	db02      	blt.n	8004806 <_printf_float+0x222>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07d8      	lsls	r0, r3, #31
 8004804:	d50f      	bpl.n	8004826 <_printf_float+0x242>
 8004806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800480a:	4631      	mov	r1, r6
 800480c:	4628      	mov	r0, r5
 800480e:	47b8      	blx	r7
 8004810:	3001      	adds	r0, #1
 8004812:	f43f af42 	beq.w	800469a <_printf_float+0xb6>
 8004816:	f04f 0900 	mov.w	r9, #0
 800481a:	f108 38ff 	add.w	r8, r8, #4294967295
 800481e:	f104 0a1a 	add.w	sl, r4, #26
 8004822:	45c8      	cmp	r8, r9
 8004824:	dc09      	bgt.n	800483a <_printf_float+0x256>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	079b      	lsls	r3, r3, #30
 800482a:	f100 8102 	bmi.w	8004a32 <_printf_float+0x44e>
 800482e:	68e0      	ldr	r0, [r4, #12]
 8004830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004832:	4298      	cmp	r0, r3
 8004834:	bfb8      	it	lt
 8004836:	4618      	movlt	r0, r3
 8004838:	e731      	b.n	800469e <_printf_float+0xba>
 800483a:	2301      	movs	r3, #1
 800483c:	4652      	mov	r2, sl
 800483e:	4631      	mov	r1, r6
 8004840:	4628      	mov	r0, r5
 8004842:	47b8      	blx	r7
 8004844:	3001      	adds	r0, #1
 8004846:	f43f af28 	beq.w	800469a <_printf_float+0xb6>
 800484a:	f109 0901 	add.w	r9, r9, #1
 800484e:	e7e8      	b.n	8004822 <_printf_float+0x23e>
 8004850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004852:	2b00      	cmp	r3, #0
 8004854:	dc38      	bgt.n	80048c8 <_printf_float+0x2e4>
 8004856:	2301      	movs	r3, #1
 8004858:	4631      	mov	r1, r6
 800485a:	4628      	mov	r0, r5
 800485c:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <_printf_float+0x2e0>)
 800485e:	47b8      	blx	r7
 8004860:	3001      	adds	r0, #1
 8004862:	f43f af1a 	beq.w	800469a <_printf_float+0xb6>
 8004866:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800486a:	ea59 0303 	orrs.w	r3, r9, r3
 800486e:	d102      	bne.n	8004876 <_printf_float+0x292>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	07d9      	lsls	r1, r3, #31
 8004874:	d5d7      	bpl.n	8004826 <_printf_float+0x242>
 8004876:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f af0a 	beq.w	800469a <_printf_float+0xb6>
 8004886:	f04f 0a00 	mov.w	sl, #0
 800488a:	f104 0b1a 	add.w	fp, r4, #26
 800488e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004890:	425b      	negs	r3, r3
 8004892:	4553      	cmp	r3, sl
 8004894:	dc01      	bgt.n	800489a <_printf_float+0x2b6>
 8004896:	464b      	mov	r3, r9
 8004898:	e793      	b.n	80047c2 <_printf_float+0x1de>
 800489a:	2301      	movs	r3, #1
 800489c:	465a      	mov	r2, fp
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f aef8 	beq.w	800469a <_printf_float+0xb6>
 80048aa:	f10a 0a01 	add.w	sl, sl, #1
 80048ae:	e7ee      	b.n	800488e <_printf_float+0x2aa>
 80048b0:	7fefffff 	.word	0x7fefffff
 80048b4:	0800960e 	.word	0x0800960e
 80048b8:	0800960a 	.word	0x0800960a
 80048bc:	08009616 	.word	0x08009616
 80048c0:	08009612 	.word	0x08009612
 80048c4:	0800961a 	.word	0x0800961a
 80048c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80048ce:	4553      	cmp	r3, sl
 80048d0:	bfa8      	it	ge
 80048d2:	4653      	movge	r3, sl
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	4699      	mov	r9, r3
 80048d8:	dc36      	bgt.n	8004948 <_printf_float+0x364>
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048e2:	f104 021a 	add.w	r2, r4, #26
 80048e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ea:	eba3 0309 	sub.w	r3, r3, r9
 80048ee:	455b      	cmp	r3, fp
 80048f0:	dc31      	bgt.n	8004956 <_printf_float+0x372>
 80048f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048f4:	459a      	cmp	sl, r3
 80048f6:	dc3a      	bgt.n	800496e <_printf_float+0x38a>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	07da      	lsls	r2, r3, #31
 80048fc:	d437      	bmi.n	800496e <_printf_float+0x38a>
 80048fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004900:	ebaa 0903 	sub.w	r9, sl, r3
 8004904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004906:	ebaa 0303 	sub.w	r3, sl, r3
 800490a:	4599      	cmp	r9, r3
 800490c:	bfa8      	it	ge
 800490e:	4699      	movge	r9, r3
 8004910:	f1b9 0f00 	cmp.w	r9, #0
 8004914:	dc33      	bgt.n	800497e <_printf_float+0x39a>
 8004916:	f04f 0800 	mov.w	r8, #0
 800491a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800491e:	f104 0b1a 	add.w	fp, r4, #26
 8004922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004924:	ebaa 0303 	sub.w	r3, sl, r3
 8004928:	eba3 0309 	sub.w	r3, r3, r9
 800492c:	4543      	cmp	r3, r8
 800492e:	f77f af7a 	ble.w	8004826 <_printf_float+0x242>
 8004932:	2301      	movs	r3, #1
 8004934:	465a      	mov	r2, fp
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	f43f aeac 	beq.w	800469a <_printf_float+0xb6>
 8004942:	f108 0801 	add.w	r8, r8, #1
 8004946:	e7ec      	b.n	8004922 <_printf_float+0x33e>
 8004948:	4642      	mov	r2, r8
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	d1c2      	bne.n	80048da <_printf_float+0x2f6>
 8004954:	e6a1      	b.n	800469a <_printf_float+0xb6>
 8004956:	2301      	movs	r3, #1
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	920a      	str	r2, [sp, #40]	@ 0x28
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	f43f ae9a 	beq.w	800469a <_printf_float+0xb6>
 8004966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004968:	f10b 0b01 	add.w	fp, fp, #1
 800496c:	e7bb      	b.n	80048e6 <_printf_float+0x302>
 800496e:	4631      	mov	r1, r6
 8004970:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004974:	4628      	mov	r0, r5
 8004976:	47b8      	blx	r7
 8004978:	3001      	adds	r0, #1
 800497a:	d1c0      	bne.n	80048fe <_printf_float+0x31a>
 800497c:	e68d      	b.n	800469a <_printf_float+0xb6>
 800497e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004980:	464b      	mov	r3, r9
 8004982:	4631      	mov	r1, r6
 8004984:	4628      	mov	r0, r5
 8004986:	4442      	add	r2, r8
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	d1c3      	bne.n	8004916 <_printf_float+0x332>
 800498e:	e684      	b.n	800469a <_printf_float+0xb6>
 8004990:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004994:	f1ba 0f01 	cmp.w	sl, #1
 8004998:	dc01      	bgt.n	800499e <_printf_float+0x3ba>
 800499a:	07db      	lsls	r3, r3, #31
 800499c:	d536      	bpl.n	8004a0c <_printf_float+0x428>
 800499e:	2301      	movs	r3, #1
 80049a0:	4642      	mov	r2, r8
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f ae76 	beq.w	800469a <_printf_float+0xb6>
 80049ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	f43f ae6e 	beq.w	800469a <_printf_float+0xb6>
 80049be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049c2:	2200      	movs	r2, #0
 80049c4:	2300      	movs	r3, #0
 80049c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ca:	f7fb ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80049ce:	b9c0      	cbnz	r0, 8004a02 <_printf_float+0x41e>
 80049d0:	4653      	mov	r3, sl
 80049d2:	f108 0201 	add.w	r2, r8, #1
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	d10c      	bne.n	80049fa <_printf_float+0x416>
 80049e0:	e65b      	b.n	800469a <_printf_float+0xb6>
 80049e2:	2301      	movs	r3, #1
 80049e4:	465a      	mov	r2, fp
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f ae54 	beq.w	800469a <_printf_float+0xb6>
 80049f2:	f108 0801 	add.w	r8, r8, #1
 80049f6:	45d0      	cmp	r8, sl
 80049f8:	dbf3      	blt.n	80049e2 <_printf_float+0x3fe>
 80049fa:	464b      	mov	r3, r9
 80049fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a00:	e6e0      	b.n	80047c4 <_printf_float+0x1e0>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	f104 0b1a 	add.w	fp, r4, #26
 8004a0a:	e7f4      	b.n	80049f6 <_printf_float+0x412>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4642      	mov	r2, r8
 8004a10:	e7e1      	b.n	80049d6 <_printf_float+0x3f2>
 8004a12:	2301      	movs	r3, #1
 8004a14:	464a      	mov	r2, r9
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f43f ae3c 	beq.w	800469a <_printf_float+0xb6>
 8004a22:	f108 0801 	add.w	r8, r8, #1
 8004a26:	68e3      	ldr	r3, [r4, #12]
 8004a28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a2a:	1a5b      	subs	r3, r3, r1
 8004a2c:	4543      	cmp	r3, r8
 8004a2e:	dcf0      	bgt.n	8004a12 <_printf_float+0x42e>
 8004a30:	e6fd      	b.n	800482e <_printf_float+0x24a>
 8004a32:	f04f 0800 	mov.w	r8, #0
 8004a36:	f104 0919 	add.w	r9, r4, #25
 8004a3a:	e7f4      	b.n	8004a26 <_printf_float+0x442>

08004a3c <_printf_common>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	4616      	mov	r6, r2
 8004a42:	4698      	mov	r8, r3
 8004a44:	688a      	ldr	r2, [r1, #8]
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	4607      	mov	r7, r0
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	bfb8      	it	lt
 8004a4e:	4613      	movlt	r3, r2
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a56:	460c      	mov	r4, r1
 8004a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a5c:	b10a      	cbz	r2, 8004a62 <_printf_common+0x26>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	0699      	lsls	r1, r3, #26
 8004a66:	bf42      	ittt	mi
 8004a68:	6833      	ldrmi	r3, [r6, #0]
 8004a6a:	3302      	addmi	r3, #2
 8004a6c:	6033      	strmi	r3, [r6, #0]
 8004a6e:	6825      	ldr	r5, [r4, #0]
 8004a70:	f015 0506 	ands.w	r5, r5, #6
 8004a74:	d106      	bne.n	8004a84 <_printf_common+0x48>
 8004a76:	f104 0a19 	add.w	sl, r4, #25
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	6832      	ldr	r2, [r6, #0]
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dc2b      	bgt.n	8004adc <_printf_common+0xa0>
 8004a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a88:	6822      	ldr	r2, [r4, #0]
 8004a8a:	3b00      	subs	r3, #0
 8004a8c:	bf18      	it	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	0692      	lsls	r2, r2, #26
 8004a92:	d430      	bmi.n	8004af6 <_printf_common+0xba>
 8004a94:	4641      	mov	r1, r8
 8004a96:	4638      	mov	r0, r7
 8004a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a9c:	47c8      	blx	r9
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d023      	beq.n	8004aea <_printf_common+0xae>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf14      	ite	ne
 8004aae:	2500      	movne	r5, #0
 8004ab0:	6833      	ldreq	r3, [r6, #0]
 8004ab2:	f04f 0600 	mov.w	r6, #0
 8004ab6:	bf08      	it	eq
 8004ab8:	68e5      	ldreq	r5, [r4, #12]
 8004aba:	f104 041a 	add.w	r4, r4, #26
 8004abe:	bf08      	it	eq
 8004ac0:	1aed      	subeq	r5, r5, r3
 8004ac2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ac6:	bf08      	it	eq
 8004ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bfc4      	itt	gt
 8004ad0:	1a9b      	subgt	r3, r3, r2
 8004ad2:	18ed      	addgt	r5, r5, r3
 8004ad4:	42b5      	cmp	r5, r6
 8004ad6:	d11a      	bne.n	8004b0e <_printf_common+0xd2>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e008      	b.n	8004aee <_printf_common+0xb2>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4652      	mov	r2, sl
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	47c8      	blx	r9
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d103      	bne.n	8004af2 <_printf_common+0xb6>
 8004aea:	f04f 30ff 	mov.w	r0, #4294967295
 8004aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af2:	3501      	adds	r5, #1
 8004af4:	e7c1      	b.n	8004a7a <_printf_common+0x3e>
 8004af6:	2030      	movs	r0, #48	@ 0x30
 8004af8:	18e1      	adds	r1, r4, r3
 8004afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b04:	4422      	add	r2, r4
 8004b06:	3302      	adds	r3, #2
 8004b08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b0c:	e7c2      	b.n	8004a94 <_printf_common+0x58>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4622      	mov	r2, r4
 8004b12:	4641      	mov	r1, r8
 8004b14:	4638      	mov	r0, r7
 8004b16:	47c8      	blx	r9
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d0e6      	beq.n	8004aea <_printf_common+0xae>
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	e7d9      	b.n	8004ad4 <_printf_common+0x98>

08004b20 <_printf_i>:
 8004b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	7e0f      	ldrb	r7, [r1, #24]
 8004b26:	4691      	mov	r9, r2
 8004b28:	2f78      	cmp	r7, #120	@ 0x78
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	469a      	mov	sl, r3
 8004b30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b36:	d807      	bhi.n	8004b48 <_printf_i+0x28>
 8004b38:	2f62      	cmp	r7, #98	@ 0x62
 8004b3a:	d80a      	bhi.n	8004b52 <_printf_i+0x32>
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	f000 80d1 	beq.w	8004ce4 <_printf_i+0x1c4>
 8004b42:	2f58      	cmp	r7, #88	@ 0x58
 8004b44:	f000 80b8 	beq.w	8004cb8 <_printf_i+0x198>
 8004b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b50:	e03a      	b.n	8004bc8 <_printf_i+0xa8>
 8004b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b56:	2b15      	cmp	r3, #21
 8004b58:	d8f6      	bhi.n	8004b48 <_printf_i+0x28>
 8004b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b60 <_printf_i+0x40>)
 8004b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b60:	08004bb9 	.word	0x08004bb9
 8004b64:	08004bcd 	.word	0x08004bcd
 8004b68:	08004b49 	.word	0x08004b49
 8004b6c:	08004b49 	.word	0x08004b49
 8004b70:	08004b49 	.word	0x08004b49
 8004b74:	08004b49 	.word	0x08004b49
 8004b78:	08004bcd 	.word	0x08004bcd
 8004b7c:	08004b49 	.word	0x08004b49
 8004b80:	08004b49 	.word	0x08004b49
 8004b84:	08004b49 	.word	0x08004b49
 8004b88:	08004b49 	.word	0x08004b49
 8004b8c:	08004ccb 	.word	0x08004ccb
 8004b90:	08004bf7 	.word	0x08004bf7
 8004b94:	08004c85 	.word	0x08004c85
 8004b98:	08004b49 	.word	0x08004b49
 8004b9c:	08004b49 	.word	0x08004b49
 8004ba0:	08004ced 	.word	0x08004ced
 8004ba4:	08004b49 	.word	0x08004b49
 8004ba8:	08004bf7 	.word	0x08004bf7
 8004bac:	08004b49 	.word	0x08004b49
 8004bb0:	08004b49 	.word	0x08004b49
 8004bb4:	08004c8d 	.word	0x08004c8d
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	1d1a      	adds	r2, r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6032      	str	r2, [r6, #0]
 8004bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e09c      	b.n	8004d06 <_printf_i+0x1e6>
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	1d19      	adds	r1, r3, #4
 8004bd2:	6031      	str	r1, [r6, #0]
 8004bd4:	0606      	lsls	r6, r0, #24
 8004bd6:	d501      	bpl.n	8004bdc <_printf_i+0xbc>
 8004bd8:	681d      	ldr	r5, [r3, #0]
 8004bda:	e003      	b.n	8004be4 <_printf_i+0xc4>
 8004bdc:	0645      	lsls	r5, r0, #25
 8004bde:	d5fb      	bpl.n	8004bd8 <_printf_i+0xb8>
 8004be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	da03      	bge.n	8004bf0 <_printf_i+0xd0>
 8004be8:	232d      	movs	r3, #45	@ 0x2d
 8004bea:	426d      	negs	r5, r5
 8004bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bf0:	230a      	movs	r3, #10
 8004bf2:	4858      	ldr	r0, [pc, #352]	@ (8004d54 <_printf_i+0x234>)
 8004bf4:	e011      	b.n	8004c1a <_printf_i+0xfa>
 8004bf6:	6821      	ldr	r1, [r4, #0]
 8004bf8:	6833      	ldr	r3, [r6, #0]
 8004bfa:	0608      	lsls	r0, r1, #24
 8004bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c00:	d402      	bmi.n	8004c08 <_printf_i+0xe8>
 8004c02:	0649      	lsls	r1, r1, #25
 8004c04:	bf48      	it	mi
 8004c06:	b2ad      	uxthmi	r5, r5
 8004c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	bf14      	ite	ne
 8004c0e:	230a      	movne	r3, #10
 8004c10:	2308      	moveq	r3, #8
 8004c12:	4850      	ldr	r0, [pc, #320]	@ (8004d54 <_printf_i+0x234>)
 8004c14:	2100      	movs	r1, #0
 8004c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c1a:	6866      	ldr	r6, [r4, #4]
 8004c1c:	2e00      	cmp	r6, #0
 8004c1e:	60a6      	str	r6, [r4, #8]
 8004c20:	db05      	blt.n	8004c2e <_printf_i+0x10e>
 8004c22:	6821      	ldr	r1, [r4, #0]
 8004c24:	432e      	orrs	r6, r5
 8004c26:	f021 0104 	bic.w	r1, r1, #4
 8004c2a:	6021      	str	r1, [r4, #0]
 8004c2c:	d04b      	beq.n	8004cc6 <_printf_i+0x1a6>
 8004c2e:	4616      	mov	r6, r2
 8004c30:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c34:	fb03 5711 	mls	r7, r3, r1, r5
 8004c38:	5dc7      	ldrb	r7, [r0, r7]
 8004c3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c3e:	462f      	mov	r7, r5
 8004c40:	42bb      	cmp	r3, r7
 8004c42:	460d      	mov	r5, r1
 8004c44:	d9f4      	bls.n	8004c30 <_printf_i+0x110>
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d10b      	bne.n	8004c62 <_printf_i+0x142>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	07df      	lsls	r7, r3, #31
 8004c4e:	d508      	bpl.n	8004c62 <_printf_i+0x142>
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	6861      	ldr	r1, [r4, #4]
 8004c54:	4299      	cmp	r1, r3
 8004c56:	bfde      	ittt	le
 8004c58:	2330      	movle	r3, #48	@ 0x30
 8004c5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c62:	1b92      	subs	r2, r2, r6
 8004c64:	6122      	str	r2, [r4, #16]
 8004c66:	464b      	mov	r3, r9
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f8cd a000 	str.w	sl, [sp]
 8004c70:	aa03      	add	r2, sp, #12
 8004c72:	f7ff fee3 	bl	8004a3c <_printf_common>
 8004c76:	3001      	adds	r0, #1
 8004c78:	d14a      	bne.n	8004d10 <_printf_i+0x1f0>
 8004c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7e:	b004      	add	sp, #16
 8004c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2778      	movs	r7, #120	@ 0x78
 8004c8e:	4832      	ldr	r0, [pc, #200]	@ (8004d58 <_printf_i+0x238>)
 8004c90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	6831      	ldr	r1, [r6, #0]
 8004c98:	061f      	lsls	r7, r3, #24
 8004c9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c9e:	d402      	bmi.n	8004ca6 <_printf_i+0x186>
 8004ca0:	065f      	lsls	r7, r3, #25
 8004ca2:	bf48      	it	mi
 8004ca4:	b2ad      	uxthmi	r5, r5
 8004ca6:	6031      	str	r1, [r6, #0]
 8004ca8:	07d9      	lsls	r1, r3, #31
 8004caa:	bf44      	itt	mi
 8004cac:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb0:	6023      	strmi	r3, [r4, #0]
 8004cb2:	b11d      	cbz	r5, 8004cbc <_printf_i+0x19c>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	e7ad      	b.n	8004c14 <_printf_i+0xf4>
 8004cb8:	4826      	ldr	r0, [pc, #152]	@ (8004d54 <_printf_i+0x234>)
 8004cba:	e7e9      	b.n	8004c90 <_printf_i+0x170>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f023 0320 	bic.w	r3, r3, #32
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	e7f6      	b.n	8004cb4 <_printf_i+0x194>
 8004cc6:	4616      	mov	r6, r2
 8004cc8:	e7bd      	b.n	8004c46 <_printf_i+0x126>
 8004cca:	6833      	ldr	r3, [r6, #0]
 8004ccc:	6825      	ldr	r5, [r4, #0]
 8004cce:	1d18      	adds	r0, r3, #4
 8004cd0:	6961      	ldr	r1, [r4, #20]
 8004cd2:	6030      	str	r0, [r6, #0]
 8004cd4:	062e      	lsls	r6, r5, #24
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	d501      	bpl.n	8004cde <_printf_i+0x1be>
 8004cda:	6019      	str	r1, [r3, #0]
 8004cdc:	e002      	b.n	8004ce4 <_printf_i+0x1c4>
 8004cde:	0668      	lsls	r0, r5, #25
 8004ce0:	d5fb      	bpl.n	8004cda <_printf_i+0x1ba>
 8004ce2:	8019      	strh	r1, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4616      	mov	r6, r2
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	e7bc      	b.n	8004c66 <_printf_i+0x146>
 8004cec:	6833      	ldr	r3, [r6, #0]
 8004cee:	2100      	movs	r1, #0
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	6032      	str	r2, [r6, #0]
 8004cf4:	681e      	ldr	r6, [r3, #0]
 8004cf6:	6862      	ldr	r2, [r4, #4]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fbee 	bl	80054da <memchr>
 8004cfe:	b108      	cbz	r0, 8004d04 <_printf_i+0x1e4>
 8004d00:	1b80      	subs	r0, r0, r6
 8004d02:	6060      	str	r0, [r4, #4]
 8004d04:	6863      	ldr	r3, [r4, #4]
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d0e:	e7aa      	b.n	8004c66 <_printf_i+0x146>
 8004d10:	4632      	mov	r2, r6
 8004d12:	4649      	mov	r1, r9
 8004d14:	4640      	mov	r0, r8
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	47d0      	blx	sl
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d0ad      	beq.n	8004c7a <_printf_i+0x15a>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	079b      	lsls	r3, r3, #30
 8004d22:	d413      	bmi.n	8004d4c <_printf_i+0x22c>
 8004d24:	68e0      	ldr	r0, [r4, #12]
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	4298      	cmp	r0, r3
 8004d2a:	bfb8      	it	lt
 8004d2c:	4618      	movlt	r0, r3
 8004d2e:	e7a6      	b.n	8004c7e <_printf_i+0x15e>
 8004d30:	2301      	movs	r3, #1
 8004d32:	4632      	mov	r2, r6
 8004d34:	4649      	mov	r1, r9
 8004d36:	4640      	mov	r0, r8
 8004d38:	47d0      	blx	sl
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d09d      	beq.n	8004c7a <_printf_i+0x15a>
 8004d3e:	3501      	adds	r5, #1
 8004d40:	68e3      	ldr	r3, [r4, #12]
 8004d42:	9903      	ldr	r1, [sp, #12]
 8004d44:	1a5b      	subs	r3, r3, r1
 8004d46:	42ab      	cmp	r3, r5
 8004d48:	dcf2      	bgt.n	8004d30 <_printf_i+0x210>
 8004d4a:	e7eb      	b.n	8004d24 <_printf_i+0x204>
 8004d4c:	2500      	movs	r5, #0
 8004d4e:	f104 0619 	add.w	r6, r4, #25
 8004d52:	e7f5      	b.n	8004d40 <_printf_i+0x220>
 8004d54:	0800961c 	.word	0x0800961c
 8004d58:	0800962d 	.word	0x0800962d

08004d5c <_scanf_float>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	b087      	sub	sp, #28
 8004d62:	9303      	str	r3, [sp, #12]
 8004d64:	688b      	ldr	r3, [r1, #8]
 8004d66:	4691      	mov	r9, r2
 8004d68:	1e5a      	subs	r2, r3, #1
 8004d6a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004d6e:	bf82      	ittt	hi
 8004d70:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004d74:	eb03 0b05 	addhi.w	fp, r3, r5
 8004d78:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004d7c:	460a      	mov	r2, r1
 8004d7e:	f04f 0500 	mov.w	r5, #0
 8004d82:	bf88      	it	hi
 8004d84:	608b      	strhi	r3, [r1, #8]
 8004d86:	680b      	ldr	r3, [r1, #0]
 8004d88:	4680      	mov	r8, r0
 8004d8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004d8e:	f842 3b1c 	str.w	r3, [r2], #28
 8004d92:	460c      	mov	r4, r1
 8004d94:	bf98      	it	ls
 8004d96:	f04f 0b00 	movls.w	fp, #0
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	46aa      	mov	sl, r5
 8004d9e:	462f      	mov	r7, r5
 8004da0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004da4:	9201      	str	r2, [sp, #4]
 8004da6:	9502      	str	r5, [sp, #8]
 8004da8:	68a2      	ldr	r2, [r4, #8]
 8004daa:	b15a      	cbz	r2, 8004dc4 <_scanf_float+0x68>
 8004dac:	f8d9 3000 	ldr.w	r3, [r9]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b4e      	cmp	r3, #78	@ 0x4e
 8004db4:	d862      	bhi.n	8004e7c <_scanf_float+0x120>
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d83a      	bhi.n	8004e30 <_scanf_float+0xd4>
 8004dba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004dbe:	b2c8      	uxtb	r0, r1
 8004dc0:	280e      	cmp	r0, #14
 8004dc2:	d938      	bls.n	8004e36 <_scanf_float+0xda>
 8004dc4:	b11f      	cbz	r7, 8004dce <_scanf_float+0x72>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dd2:	f1ba 0f01 	cmp.w	sl, #1
 8004dd6:	f200 8114 	bhi.w	8005002 <_scanf_float+0x2a6>
 8004dda:	9b01      	ldr	r3, [sp, #4]
 8004ddc:	429e      	cmp	r6, r3
 8004dde:	f200 8105 	bhi.w	8004fec <_scanf_float+0x290>
 8004de2:	2001      	movs	r0, #1
 8004de4:	b007      	add	sp, #28
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004dee:	2a0d      	cmp	r2, #13
 8004df0:	d8e8      	bhi.n	8004dc4 <_scanf_float+0x68>
 8004df2:	a101      	add	r1, pc, #4	@ (adr r1, 8004df8 <_scanf_float+0x9c>)
 8004df4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004df8:	08004f41 	.word	0x08004f41
 8004dfc:	08004dc5 	.word	0x08004dc5
 8004e00:	08004dc5 	.word	0x08004dc5
 8004e04:	08004dc5 	.word	0x08004dc5
 8004e08:	08004f9d 	.word	0x08004f9d
 8004e0c:	08004f77 	.word	0x08004f77
 8004e10:	08004dc5 	.word	0x08004dc5
 8004e14:	08004dc5 	.word	0x08004dc5
 8004e18:	08004f4f 	.word	0x08004f4f
 8004e1c:	08004dc5 	.word	0x08004dc5
 8004e20:	08004dc5 	.word	0x08004dc5
 8004e24:	08004dc5 	.word	0x08004dc5
 8004e28:	08004dc5 	.word	0x08004dc5
 8004e2c:	08004f0b 	.word	0x08004f0b
 8004e30:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004e34:	e7db      	b.n	8004dee <_scanf_float+0x92>
 8004e36:	290e      	cmp	r1, #14
 8004e38:	d8c4      	bhi.n	8004dc4 <_scanf_float+0x68>
 8004e3a:	a001      	add	r0, pc, #4	@ (adr r0, 8004e40 <_scanf_float+0xe4>)
 8004e3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e40:	08004efb 	.word	0x08004efb
 8004e44:	08004dc5 	.word	0x08004dc5
 8004e48:	08004efb 	.word	0x08004efb
 8004e4c:	08004f8b 	.word	0x08004f8b
 8004e50:	08004dc5 	.word	0x08004dc5
 8004e54:	08004e9d 	.word	0x08004e9d
 8004e58:	08004ee1 	.word	0x08004ee1
 8004e5c:	08004ee1 	.word	0x08004ee1
 8004e60:	08004ee1 	.word	0x08004ee1
 8004e64:	08004ee1 	.word	0x08004ee1
 8004e68:	08004ee1 	.word	0x08004ee1
 8004e6c:	08004ee1 	.word	0x08004ee1
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004e7e:	d809      	bhi.n	8004e94 <_scanf_float+0x138>
 8004e80:	2b60      	cmp	r3, #96	@ 0x60
 8004e82:	d8b2      	bhi.n	8004dea <_scanf_float+0x8e>
 8004e84:	2b54      	cmp	r3, #84	@ 0x54
 8004e86:	d07b      	beq.n	8004f80 <_scanf_float+0x224>
 8004e88:	2b59      	cmp	r3, #89	@ 0x59
 8004e8a:	d19b      	bne.n	8004dc4 <_scanf_float+0x68>
 8004e8c:	2d07      	cmp	r5, #7
 8004e8e:	d199      	bne.n	8004dc4 <_scanf_float+0x68>
 8004e90:	2508      	movs	r5, #8
 8004e92:	e02f      	b.n	8004ef4 <_scanf_float+0x198>
 8004e94:	2b74      	cmp	r3, #116	@ 0x74
 8004e96:	d073      	beq.n	8004f80 <_scanf_float+0x224>
 8004e98:	2b79      	cmp	r3, #121	@ 0x79
 8004e9a:	e7f6      	b.n	8004e8a <_scanf_float+0x12e>
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	05c8      	lsls	r0, r1, #23
 8004ea0:	d51e      	bpl.n	8004ee0 <_scanf_float+0x184>
 8004ea2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004ea6:	6021      	str	r1, [r4, #0]
 8004ea8:	3701      	adds	r7, #1
 8004eaa:	f1bb 0f00 	cmp.w	fp, #0
 8004eae:	d003      	beq.n	8004eb8 <_scanf_float+0x15c>
 8004eb0:	3201      	adds	r2, #1
 8004eb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004eb6:	60a2      	str	r2, [r4, #8]
 8004eb8:	68a3      	ldr	r3, [r4, #8]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f8c9 3004 	str.w	r3, [r9, #4]
 8004ed0:	f340 8083 	ble.w	8004fda <_scanf_float+0x27e>
 8004ed4:	f8d9 3000 	ldr.w	r3, [r9]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f8c9 3000 	str.w	r3, [r9]
 8004ede:	e763      	b.n	8004da8 <_scanf_float+0x4c>
 8004ee0:	eb1a 0105 	adds.w	r1, sl, r5
 8004ee4:	f47f af6e 	bne.w	8004dc4 <_scanf_float+0x68>
 8004ee8:	460d      	mov	r5, r1
 8004eea:	468a      	mov	sl, r1
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ef2:	6022      	str	r2, [r4, #0]
 8004ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8004ef8:	e7de      	b.n	8004eb8 <_scanf_float+0x15c>
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	0610      	lsls	r0, r2, #24
 8004efe:	f57f af61 	bpl.w	8004dc4 <_scanf_float+0x68>
 8004f02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f06:	6022      	str	r2, [r4, #0]
 8004f08:	e7f4      	b.n	8004ef4 <_scanf_float+0x198>
 8004f0a:	f1ba 0f00 	cmp.w	sl, #0
 8004f0e:	d10c      	bne.n	8004f2a <_scanf_float+0x1ce>
 8004f10:	b977      	cbnz	r7, 8004f30 <_scanf_float+0x1d4>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f1c:	d108      	bne.n	8004f30 <_scanf_float+0x1d4>
 8004f1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f22:	f04f 0a01 	mov.w	sl, #1
 8004f26:	6022      	str	r2, [r4, #0]
 8004f28:	e7e4      	b.n	8004ef4 <_scanf_float+0x198>
 8004f2a:	f1ba 0f02 	cmp.w	sl, #2
 8004f2e:	d051      	beq.n	8004fd4 <_scanf_float+0x278>
 8004f30:	2d01      	cmp	r5, #1
 8004f32:	d002      	beq.n	8004f3a <_scanf_float+0x1de>
 8004f34:	2d04      	cmp	r5, #4
 8004f36:	f47f af45 	bne.w	8004dc4 <_scanf_float+0x68>
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	b2ed      	uxtb	r5, r5
 8004f3e:	e7d9      	b.n	8004ef4 <_scanf_float+0x198>
 8004f40:	f1ba 0f01 	cmp.w	sl, #1
 8004f44:	f47f af3e 	bne.w	8004dc4 <_scanf_float+0x68>
 8004f48:	f04f 0a02 	mov.w	sl, #2
 8004f4c:	e7d2      	b.n	8004ef4 <_scanf_float+0x198>
 8004f4e:	b975      	cbnz	r5, 8004f6e <_scanf_float+0x212>
 8004f50:	2f00      	cmp	r7, #0
 8004f52:	f47f af38 	bne.w	8004dc6 <_scanf_float+0x6a>
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f60:	f040 80ff 	bne.w	8005162 <_scanf_float+0x406>
 8004f64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f68:	2501      	movs	r5, #1
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	e7c2      	b.n	8004ef4 <_scanf_float+0x198>
 8004f6e:	2d03      	cmp	r5, #3
 8004f70:	d0e3      	beq.n	8004f3a <_scanf_float+0x1de>
 8004f72:	2d05      	cmp	r5, #5
 8004f74:	e7df      	b.n	8004f36 <_scanf_float+0x1da>
 8004f76:	2d02      	cmp	r5, #2
 8004f78:	f47f af24 	bne.w	8004dc4 <_scanf_float+0x68>
 8004f7c:	2503      	movs	r5, #3
 8004f7e:	e7b9      	b.n	8004ef4 <_scanf_float+0x198>
 8004f80:	2d06      	cmp	r5, #6
 8004f82:	f47f af1f 	bne.w	8004dc4 <_scanf_float+0x68>
 8004f86:	2507      	movs	r5, #7
 8004f88:	e7b4      	b.n	8004ef4 <_scanf_float+0x198>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	0591      	lsls	r1, r2, #22
 8004f8e:	f57f af19 	bpl.w	8004dc4 <_scanf_float+0x68>
 8004f92:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004f96:	6022      	str	r2, [r4, #0]
 8004f98:	9702      	str	r7, [sp, #8]
 8004f9a:	e7ab      	b.n	8004ef4 <_scanf_float+0x198>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004fa2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004fa6:	d005      	beq.n	8004fb4 <_scanf_float+0x258>
 8004fa8:	0550      	lsls	r0, r2, #21
 8004faa:	f57f af0b 	bpl.w	8004dc4 <_scanf_float+0x68>
 8004fae:	2f00      	cmp	r7, #0
 8004fb0:	f000 80d7 	beq.w	8005162 <_scanf_float+0x406>
 8004fb4:	0591      	lsls	r1, r2, #22
 8004fb6:	bf58      	it	pl
 8004fb8:	9902      	ldrpl	r1, [sp, #8]
 8004fba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fbe:	bf58      	it	pl
 8004fc0:	1a79      	subpl	r1, r7, r1
 8004fc2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004fc6:	f04f 0700 	mov.w	r7, #0
 8004fca:	bf58      	it	pl
 8004fcc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fd0:	6022      	str	r2, [r4, #0]
 8004fd2:	e78f      	b.n	8004ef4 <_scanf_float+0x198>
 8004fd4:	f04f 0a03 	mov.w	sl, #3
 8004fd8:	e78c      	b.n	8004ef4 <_scanf_float+0x198>
 8004fda:	4649      	mov	r1, r9
 8004fdc:	4640      	mov	r0, r8
 8004fde:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004fe2:	4798      	blx	r3
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	f43f aedf 	beq.w	8004da8 <_scanf_float+0x4c>
 8004fea:	e6eb      	b.n	8004dc4 <_scanf_float+0x68>
 8004fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ff0:	464a      	mov	r2, r9
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ff8:	4798      	blx	r3
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	e6eb      	b.n	8004dda <_scanf_float+0x7e>
 8005002:	1e6b      	subs	r3, r5, #1
 8005004:	2b06      	cmp	r3, #6
 8005006:	d824      	bhi.n	8005052 <_scanf_float+0x2f6>
 8005008:	2d02      	cmp	r5, #2
 800500a:	d836      	bhi.n	800507a <_scanf_float+0x31e>
 800500c:	9b01      	ldr	r3, [sp, #4]
 800500e:	429e      	cmp	r6, r3
 8005010:	f67f aee7 	bls.w	8004de2 <_scanf_float+0x86>
 8005014:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005018:	464a      	mov	r2, r9
 800501a:	4640      	mov	r0, r8
 800501c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005020:	4798      	blx	r3
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	3b01      	subs	r3, #1
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	e7f0      	b.n	800500c <_scanf_float+0x2b0>
 800502a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800502e:	464a      	mov	r2, r9
 8005030:	4640      	mov	r0, r8
 8005032:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005036:	4798      	blx	r3
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	3b01      	subs	r3, #1
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005042:	fa5f fa8a 	uxtb.w	sl, sl
 8005046:	f1ba 0f02 	cmp.w	sl, #2
 800504a:	d1ee      	bne.n	800502a <_scanf_float+0x2ce>
 800504c:	3d03      	subs	r5, #3
 800504e:	b2ed      	uxtb	r5, r5
 8005050:	1b76      	subs	r6, r6, r5
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	05da      	lsls	r2, r3, #23
 8005056:	d530      	bpl.n	80050ba <_scanf_float+0x35e>
 8005058:	055b      	lsls	r3, r3, #21
 800505a:	d511      	bpl.n	8005080 <_scanf_float+0x324>
 800505c:	9b01      	ldr	r3, [sp, #4]
 800505e:	429e      	cmp	r6, r3
 8005060:	f67f aebf 	bls.w	8004de2 <_scanf_float+0x86>
 8005064:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005068:	464a      	mov	r2, r9
 800506a:	4640      	mov	r0, r8
 800506c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005070:	4798      	blx	r3
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	3b01      	subs	r3, #1
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	e7f0      	b.n	800505c <_scanf_float+0x300>
 800507a:	46aa      	mov	sl, r5
 800507c:	46b3      	mov	fp, r6
 800507e:	e7de      	b.n	800503e <_scanf_float+0x2e2>
 8005080:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	2965      	cmp	r1, #101	@ 0x65
 8005088:	f103 33ff 	add.w	r3, r3, #4294967295
 800508c:	f106 35ff 	add.w	r5, r6, #4294967295
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	d00c      	beq.n	80050ae <_scanf_float+0x352>
 8005094:	2945      	cmp	r1, #69	@ 0x45
 8005096:	d00a      	beq.n	80050ae <_scanf_float+0x352>
 8005098:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800509c:	464a      	mov	r2, r9
 800509e:	4640      	mov	r0, r8
 80050a0:	4798      	blx	r3
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	1eb5      	subs	r5, r6, #2
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	464a      	mov	r2, r9
 80050b0:	4640      	mov	r0, r8
 80050b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050b6:	4798      	blx	r3
 80050b8:	462e      	mov	r6, r5
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	f012 0210 	ands.w	r2, r2, #16
 80050c0:	d001      	beq.n	80050c6 <_scanf_float+0x36a>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e68e      	b.n	8004de4 <_scanf_float+0x88>
 80050c6:	7032      	strb	r2, [r6, #0]
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d2:	d125      	bne.n	8005120 <_scanf_float+0x3c4>
 80050d4:	9b02      	ldr	r3, [sp, #8]
 80050d6:	429f      	cmp	r7, r3
 80050d8:	d00a      	beq.n	80050f0 <_scanf_float+0x394>
 80050da:	1bda      	subs	r2, r3, r7
 80050dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80050e0:	429e      	cmp	r6, r3
 80050e2:	bf28      	it	cs
 80050e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80050e8:	4630      	mov	r0, r6
 80050ea:	491f      	ldr	r1, [pc, #124]	@ (8005168 <_scanf_float+0x40c>)
 80050ec:	f000 f902 	bl	80052f4 <siprintf>
 80050f0:	2200      	movs	r2, #0
 80050f2:	4640      	mov	r0, r8
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	f002 fbf7 	bl	80078e8 <_strtod_r>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f015 0f02 	tst.w	r5, #2
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	f103 0204 	add.w	r2, r3, #4
 800510c:	d015      	beq.n	800513a <_scanf_float+0x3de>
 800510e:	9903      	ldr	r1, [sp, #12]
 8005110:	600a      	str	r2, [r1, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	e9c3 6700 	strd	r6, r7, [r3]
 8005118:	68e3      	ldr	r3, [r4, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60e3      	str	r3, [r4, #12]
 800511e:	e7d0      	b.n	80050c2 <_scanf_float+0x366>
 8005120:	9b04      	ldr	r3, [sp, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0e4      	beq.n	80050f0 <_scanf_float+0x394>
 8005126:	9905      	ldr	r1, [sp, #20]
 8005128:	230a      	movs	r3, #10
 800512a:	4640      	mov	r0, r8
 800512c:	3101      	adds	r1, #1
 800512e:	f002 fc5b 	bl	80079e8 <_strtol_r>
 8005132:	9b04      	ldr	r3, [sp, #16]
 8005134:	9e05      	ldr	r6, [sp, #20]
 8005136:	1ac2      	subs	r2, r0, r3
 8005138:	e7d0      	b.n	80050dc <_scanf_float+0x380>
 800513a:	076d      	lsls	r5, r5, #29
 800513c:	d4e7      	bmi.n	800510e <_scanf_float+0x3b2>
 800513e:	9d03      	ldr	r5, [sp, #12]
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	681d      	ldr	r5, [r3, #0]
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	f7fb fc60 	bl	8000a0c <__aeabi_dcmpun>
 800514c:	b120      	cbz	r0, 8005158 <_scanf_float+0x3fc>
 800514e:	4807      	ldr	r0, [pc, #28]	@ (800516c <_scanf_float+0x410>)
 8005150:	f000 f9d2 	bl	80054f8 <nanf>
 8005154:	6028      	str	r0, [r5, #0]
 8005156:	e7df      	b.n	8005118 <_scanf_float+0x3bc>
 8005158:	4630      	mov	r0, r6
 800515a:	4639      	mov	r1, r7
 800515c:	f7fb fcb4 	bl	8000ac8 <__aeabi_d2f>
 8005160:	e7f8      	b.n	8005154 <_scanf_float+0x3f8>
 8005162:	2700      	movs	r7, #0
 8005164:	e633      	b.n	8004dce <_scanf_float+0x72>
 8005166:	bf00      	nop
 8005168:	0800963e 	.word	0x0800963e
 800516c:	0800977f 	.word	0x0800977f

08005170 <std>:
 8005170:	2300      	movs	r3, #0
 8005172:	b510      	push	{r4, lr}
 8005174:	4604      	mov	r4, r0
 8005176:	e9c0 3300 	strd	r3, r3, [r0]
 800517a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800517e:	6083      	str	r3, [r0, #8]
 8005180:	8181      	strh	r1, [r0, #12]
 8005182:	6643      	str	r3, [r0, #100]	@ 0x64
 8005184:	81c2      	strh	r2, [r0, #14]
 8005186:	6183      	str	r3, [r0, #24]
 8005188:	4619      	mov	r1, r3
 800518a:	2208      	movs	r2, #8
 800518c:	305c      	adds	r0, #92	@ 0x5c
 800518e:	f000 f916 	bl	80053be <memset>
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <std+0x58>)
 8005194:	6224      	str	r4, [r4, #32]
 8005196:	6263      	str	r3, [r4, #36]	@ 0x24
 8005198:	4b0c      	ldr	r3, [pc, #48]	@ (80051cc <std+0x5c>)
 800519a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800519c:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <std+0x60>)
 800519e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <std+0x64>)
 80051a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80051a4:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <std+0x68>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d006      	beq.n	80051b8 <std+0x48>
 80051aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ae:	4294      	cmp	r4, r2
 80051b0:	d002      	beq.n	80051b8 <std+0x48>
 80051b2:	33d0      	adds	r3, #208	@ 0xd0
 80051b4:	429c      	cmp	r4, r3
 80051b6:	d105      	bne.n	80051c4 <std+0x54>
 80051b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c0:	f000 b988 	b.w	80054d4 <__retarget_lock_init_recursive>
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop
 80051c8:	08005339 	.word	0x08005339
 80051cc:	0800535b 	.word	0x0800535b
 80051d0:	08005393 	.word	0x08005393
 80051d4:	080053b7 	.word	0x080053b7
 80051d8:	20000714 	.word	0x20000714

080051dc <stdio_exit_handler>:
 80051dc:	4a02      	ldr	r2, [pc, #8]	@ (80051e8 <stdio_exit_handler+0xc>)
 80051de:	4903      	ldr	r1, [pc, #12]	@ (80051ec <stdio_exit_handler+0x10>)
 80051e0:	4803      	ldr	r0, [pc, #12]	@ (80051f0 <stdio_exit_handler+0x14>)
 80051e2:	f000 b869 	b.w	80052b8 <_fwalk_sglue>
 80051e6:	bf00      	nop
 80051e8:	2000000c 	.word	0x2000000c
 80051ec:	08007d9d 	.word	0x08007d9d
 80051f0:	2000001c 	.word	0x2000001c

080051f4 <cleanup_stdio>:
 80051f4:	6841      	ldr	r1, [r0, #4]
 80051f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <cleanup_stdio+0x34>)
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4299      	cmp	r1, r3
 80051fc:	4604      	mov	r4, r0
 80051fe:	d001      	beq.n	8005204 <cleanup_stdio+0x10>
 8005200:	f002 fdcc 	bl	8007d9c <_fflush_r>
 8005204:	68a1      	ldr	r1, [r4, #8]
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <cleanup_stdio+0x38>)
 8005208:	4299      	cmp	r1, r3
 800520a:	d002      	beq.n	8005212 <cleanup_stdio+0x1e>
 800520c:	4620      	mov	r0, r4
 800520e:	f002 fdc5 	bl	8007d9c <_fflush_r>
 8005212:	68e1      	ldr	r1, [r4, #12]
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <cleanup_stdio+0x3c>)
 8005216:	4299      	cmp	r1, r3
 8005218:	d004      	beq.n	8005224 <cleanup_stdio+0x30>
 800521a:	4620      	mov	r0, r4
 800521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005220:	f002 bdbc 	b.w	8007d9c <_fflush_r>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	bf00      	nop
 8005228:	20000714 	.word	0x20000714
 800522c:	2000077c 	.word	0x2000077c
 8005230:	200007e4 	.word	0x200007e4

08005234 <global_stdio_init.part.0>:
 8005234:	b510      	push	{r4, lr}
 8005236:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <global_stdio_init.part.0+0x30>)
 8005238:	4c0b      	ldr	r4, [pc, #44]	@ (8005268 <global_stdio_init.part.0+0x34>)
 800523a:	4a0c      	ldr	r2, [pc, #48]	@ (800526c <global_stdio_init.part.0+0x38>)
 800523c:	4620      	mov	r0, r4
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	2104      	movs	r1, #4
 8005242:	2200      	movs	r2, #0
 8005244:	f7ff ff94 	bl	8005170 <std>
 8005248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800524c:	2201      	movs	r2, #1
 800524e:	2109      	movs	r1, #9
 8005250:	f7ff ff8e 	bl	8005170 <std>
 8005254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005258:	2202      	movs	r2, #2
 800525a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525e:	2112      	movs	r1, #18
 8005260:	f7ff bf86 	b.w	8005170 <std>
 8005264:	2000084c 	.word	0x2000084c
 8005268:	20000714 	.word	0x20000714
 800526c:	080051dd 	.word	0x080051dd

08005270 <__sfp_lock_acquire>:
 8005270:	4801      	ldr	r0, [pc, #4]	@ (8005278 <__sfp_lock_acquire+0x8>)
 8005272:	f000 b930 	b.w	80054d6 <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	20000855 	.word	0x20000855

0800527c <__sfp_lock_release>:
 800527c:	4801      	ldr	r0, [pc, #4]	@ (8005284 <__sfp_lock_release+0x8>)
 800527e:	f000 b92b 	b.w	80054d8 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	20000855 	.word	0x20000855

08005288 <__sinit>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4604      	mov	r4, r0
 800528c:	f7ff fff0 	bl	8005270 <__sfp_lock_acquire>
 8005290:	6a23      	ldr	r3, [r4, #32]
 8005292:	b11b      	cbz	r3, 800529c <__sinit+0x14>
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f7ff bff0 	b.w	800527c <__sfp_lock_release>
 800529c:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <__sinit+0x28>)
 800529e:	6223      	str	r3, [r4, #32]
 80052a0:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <__sinit+0x2c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f5      	bne.n	8005294 <__sinit+0xc>
 80052a8:	f7ff ffc4 	bl	8005234 <global_stdio_init.part.0>
 80052ac:	e7f2      	b.n	8005294 <__sinit+0xc>
 80052ae:	bf00      	nop
 80052b0:	080051f5 	.word	0x080051f5
 80052b4:	2000084c 	.word	0x2000084c

080052b8 <_fwalk_sglue>:
 80052b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	4607      	mov	r7, r0
 80052be:	4688      	mov	r8, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	2600      	movs	r6, #0
 80052c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052c8:	f1b9 0901 	subs.w	r9, r9, #1
 80052cc:	d505      	bpl.n	80052da <_fwalk_sglue+0x22>
 80052ce:	6824      	ldr	r4, [r4, #0]
 80052d0:	2c00      	cmp	r4, #0
 80052d2:	d1f7      	bne.n	80052c4 <_fwalk_sglue+0xc>
 80052d4:	4630      	mov	r0, r6
 80052d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d907      	bls.n	80052f0 <_fwalk_sglue+0x38>
 80052e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052e4:	3301      	adds	r3, #1
 80052e6:	d003      	beq.n	80052f0 <_fwalk_sglue+0x38>
 80052e8:	4629      	mov	r1, r5
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c0      	blx	r8
 80052ee:	4306      	orrs	r6, r0
 80052f0:	3568      	adds	r5, #104	@ 0x68
 80052f2:	e7e9      	b.n	80052c8 <_fwalk_sglue+0x10>

080052f4 <siprintf>:
 80052f4:	b40e      	push	{r1, r2, r3}
 80052f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052fa:	b510      	push	{r4, lr}
 80052fc:	2400      	movs	r4, #0
 80052fe:	b09d      	sub	sp, #116	@ 0x74
 8005300:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005302:	9002      	str	r0, [sp, #8]
 8005304:	9006      	str	r0, [sp, #24]
 8005306:	9107      	str	r1, [sp, #28]
 8005308:	9104      	str	r1, [sp, #16]
 800530a:	4809      	ldr	r0, [pc, #36]	@ (8005330 <siprintf+0x3c>)
 800530c:	4909      	ldr	r1, [pc, #36]	@ (8005334 <siprintf+0x40>)
 800530e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005312:	9105      	str	r1, [sp, #20]
 8005314:	6800      	ldr	r0, [r0, #0]
 8005316:	a902      	add	r1, sp, #8
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800531c:	f002 fbc2 	bl	8007aa4 <_svfiprintf_r>
 8005320:	9b02      	ldr	r3, [sp, #8]
 8005322:	701c      	strb	r4, [r3, #0]
 8005324:	b01d      	add	sp, #116	@ 0x74
 8005326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532a:	b003      	add	sp, #12
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000018 	.word	0x20000018
 8005334:	ffff0208 	.word	0xffff0208

08005338 <__sread>:
 8005338:	b510      	push	{r4, lr}
 800533a:	460c      	mov	r4, r1
 800533c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005340:	f000 f87a 	bl	8005438 <_read_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	bfab      	itete	ge
 8005348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800534a:	89a3      	ldrhlt	r3, [r4, #12]
 800534c:	181b      	addge	r3, r3, r0
 800534e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005352:	bfac      	ite	ge
 8005354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005356:	81a3      	strhlt	r3, [r4, #12]
 8005358:	bd10      	pop	{r4, pc}

0800535a <__swrite>:
 800535a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535e:	461f      	mov	r7, r3
 8005360:	898b      	ldrh	r3, [r1, #12]
 8005362:	4605      	mov	r5, r0
 8005364:	05db      	lsls	r3, r3, #23
 8005366:	460c      	mov	r4, r1
 8005368:	4616      	mov	r6, r2
 800536a:	d505      	bpl.n	8005378 <__swrite+0x1e>
 800536c:	2302      	movs	r3, #2
 800536e:	2200      	movs	r2, #0
 8005370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005374:	f000 f84e 	bl	8005414 <_lseek_r>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	4632      	mov	r2, r6
 800537c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	4628      	mov	r0, r5
 8005384:	463b      	mov	r3, r7
 8005386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	f000 b865 	b.w	800545c <_write_r>

08005392 <__sseek>:
 8005392:	b510      	push	{r4, lr}
 8005394:	460c      	mov	r4, r1
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 f83b 	bl	8005414 <_lseek_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	bf15      	itete	ne
 80053a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ae:	81a3      	strheq	r3, [r4, #12]
 80053b0:	bf18      	it	ne
 80053b2:	81a3      	strhne	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__sclose>:
 80053b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ba:	f000 b81b 	b.w	80053f4 <_close_r>

080053be <memset>:
 80053be:	4603      	mov	r3, r0
 80053c0:	4402      	add	r2, r0
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d100      	bne.n	80053c8 <memset+0xa>
 80053c6:	4770      	bx	lr
 80053c8:	f803 1b01 	strb.w	r1, [r3], #1
 80053cc:	e7f9      	b.n	80053c2 <memset+0x4>

080053ce <strcat>:
 80053ce:	4602      	mov	r2, r0
 80053d0:	b510      	push	{r4, lr}
 80053d2:	7814      	ldrb	r4, [r2, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	3201      	adds	r2, #1
 80053d8:	2c00      	cmp	r4, #0
 80053da:	d1fa      	bne.n	80053d2 <strcat+0x4>
 80053dc:	3b01      	subs	r3, #1
 80053de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	d1f9      	bne.n	80053de <strcat+0x10>
 80053ea:	bd10      	pop	{r4, pc}

080053ec <_localeconv_r>:
 80053ec:	4800      	ldr	r0, [pc, #0]	@ (80053f0 <_localeconv_r+0x4>)
 80053ee:	4770      	bx	lr
 80053f0:	20000158 	.word	0x20000158

080053f4 <_close_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	2300      	movs	r3, #0
 80053f8:	4d05      	ldr	r5, [pc, #20]	@ (8005410 <_close_r+0x1c>)
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fd f8f5 	bl	80025ee <_close>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_close_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_close_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000850 	.word	0x20000850

08005414 <_lseek_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	2200      	movs	r2, #0
 800541e:	4d05      	ldr	r5, [pc, #20]	@ (8005434 <_lseek_r+0x20>)
 8005420:	602a      	str	r2, [r5, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	f7fd f907 	bl	8002636 <_lseek>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d102      	bne.n	8005432 <_lseek_r+0x1e>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	b103      	cbz	r3, 8005432 <_lseek_r+0x1e>
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	20000850 	.word	0x20000850

08005438 <_read_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	2200      	movs	r2, #0
 8005442:	4d05      	ldr	r5, [pc, #20]	@ (8005458 <_read_r+0x20>)
 8005444:	602a      	str	r2, [r5, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	f7fd f898 	bl	800257c <_read>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_read_r+0x1e>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	b103      	cbz	r3, 8005456 <_read_r+0x1e>
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20000850 	.word	0x20000850

0800545c <_write_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	4611      	mov	r1, r2
 8005464:	2200      	movs	r2, #0
 8005466:	4d05      	ldr	r5, [pc, #20]	@ (800547c <_write_r+0x20>)
 8005468:	602a      	str	r2, [r5, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	f7fd f8a3 	bl	80025b6 <_write>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_write_r+0x1e>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_write_r+0x1e>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	20000850 	.word	0x20000850

08005480 <__errno>:
 8005480:	4b01      	ldr	r3, [pc, #4]	@ (8005488 <__errno+0x8>)
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000018 	.word	0x20000018

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	2600      	movs	r6, #0
 8005490:	4d0c      	ldr	r5, [pc, #48]	@ (80054c4 <__libc_init_array+0x38>)
 8005492:	4c0d      	ldr	r4, [pc, #52]	@ (80054c8 <__libc_init_array+0x3c>)
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	42a6      	cmp	r6, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	f003 fb6a 	bl	8008b74 <_init>
 80054a0:	2600      	movs	r6, #0
 80054a2:	4d0a      	ldr	r5, [pc, #40]	@ (80054cc <__libc_init_array+0x40>)
 80054a4:	4c0a      	ldr	r4, [pc, #40]	@ (80054d0 <__libc_init_array+0x44>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	42a6      	cmp	r6, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b4:	4798      	blx	r3
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80054be:	4798      	blx	r3
 80054c0:	3601      	adds	r6, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	08009a3c 	.word	0x08009a3c
 80054c8:	08009a3c 	.word	0x08009a3c
 80054cc:	08009a3c 	.word	0x08009a3c
 80054d0:	08009a40 	.word	0x08009a40

080054d4 <__retarget_lock_init_recursive>:
 80054d4:	4770      	bx	lr

080054d6 <__retarget_lock_acquire_recursive>:
 80054d6:	4770      	bx	lr

080054d8 <__retarget_lock_release_recursive>:
 80054d8:	4770      	bx	lr

080054da <memchr>:
 80054da:	4603      	mov	r3, r0
 80054dc:	b510      	push	{r4, lr}
 80054de:	b2c9      	uxtb	r1, r1
 80054e0:	4402      	add	r2, r0
 80054e2:	4293      	cmp	r3, r2
 80054e4:	4618      	mov	r0, r3
 80054e6:	d101      	bne.n	80054ec <memchr+0x12>
 80054e8:	2000      	movs	r0, #0
 80054ea:	e003      	b.n	80054f4 <memchr+0x1a>
 80054ec:	7804      	ldrb	r4, [r0, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	428c      	cmp	r4, r1
 80054f2:	d1f6      	bne.n	80054e2 <memchr+0x8>
 80054f4:	bd10      	pop	{r4, pc}
	...

080054f8 <nanf>:
 80054f8:	4800      	ldr	r0, [pc, #0]	@ (80054fc <nanf+0x4>)
 80054fa:	4770      	bx	lr
 80054fc:	7fc00000 	.word	0x7fc00000

08005500 <quorem>:
 8005500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	6903      	ldr	r3, [r0, #16]
 8005506:	690c      	ldr	r4, [r1, #16]
 8005508:	4607      	mov	r7, r0
 800550a:	42a3      	cmp	r3, r4
 800550c:	db7e      	blt.n	800560c <quorem+0x10c>
 800550e:	3c01      	subs	r4, #1
 8005510:	00a3      	lsls	r3, r4, #2
 8005512:	f100 0514 	add.w	r5, r0, #20
 8005516:	f101 0814 	add.w	r8, r1, #20
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800552a:	3301      	adds	r3, #1
 800552c:	429a      	cmp	r2, r3
 800552e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005532:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005536:	d32e      	bcc.n	8005596 <quorem+0x96>
 8005538:	f04f 0a00 	mov.w	sl, #0
 800553c:	46c4      	mov	ip, r8
 800553e:	46ae      	mov	lr, r5
 8005540:	46d3      	mov	fp, sl
 8005542:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005546:	b298      	uxth	r0, r3
 8005548:	fb06 a000 	mla	r0, r6, r0, sl
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	0c02      	lsrs	r2, r0, #16
 8005550:	fb06 2303 	mla	r3, r6, r3, r2
 8005554:	f8de 2000 	ldr.w	r2, [lr]
 8005558:	b280      	uxth	r0, r0
 800555a:	b292      	uxth	r2, r2
 800555c:	1a12      	subs	r2, r2, r0
 800555e:	445a      	add	r2, fp
 8005560:	f8de 0000 	ldr.w	r0, [lr]
 8005564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005568:	b29b      	uxth	r3, r3
 800556a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800556e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005572:	b292      	uxth	r2, r2
 8005574:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005578:	45e1      	cmp	r9, ip
 800557a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800557e:	f84e 2b04 	str.w	r2, [lr], #4
 8005582:	d2de      	bcs.n	8005542 <quorem+0x42>
 8005584:	9b00      	ldr	r3, [sp, #0]
 8005586:	58eb      	ldr	r3, [r5, r3]
 8005588:	b92b      	cbnz	r3, 8005596 <quorem+0x96>
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	3b04      	subs	r3, #4
 800558e:	429d      	cmp	r5, r3
 8005590:	461a      	mov	r2, r3
 8005592:	d32f      	bcc.n	80055f4 <quorem+0xf4>
 8005594:	613c      	str	r4, [r7, #16]
 8005596:	4638      	mov	r0, r7
 8005598:	f001 f9c8 	bl	800692c <__mcmp>
 800559c:	2800      	cmp	r0, #0
 800559e:	db25      	blt.n	80055ec <quorem+0xec>
 80055a0:	4629      	mov	r1, r5
 80055a2:	2000      	movs	r0, #0
 80055a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80055a8:	f8d1 c000 	ldr.w	ip, [r1]
 80055ac:	fa1f fe82 	uxth.w	lr, r2
 80055b0:	fa1f f38c 	uxth.w	r3, ip
 80055b4:	eba3 030e 	sub.w	r3, r3, lr
 80055b8:	4403      	add	r3, r0
 80055ba:	0c12      	lsrs	r2, r2, #16
 80055bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ca:	45c1      	cmp	r9, r8
 80055cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055d0:	f841 3b04 	str.w	r3, [r1], #4
 80055d4:	d2e6      	bcs.n	80055a4 <quorem+0xa4>
 80055d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055de:	b922      	cbnz	r2, 80055ea <quorem+0xea>
 80055e0:	3b04      	subs	r3, #4
 80055e2:	429d      	cmp	r5, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	d30b      	bcc.n	8005600 <quorem+0x100>
 80055e8:	613c      	str	r4, [r7, #16]
 80055ea:	3601      	adds	r6, #1
 80055ec:	4630      	mov	r0, r6
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	3b04      	subs	r3, #4
 80055f8:	2a00      	cmp	r2, #0
 80055fa:	d1cb      	bne.n	8005594 <quorem+0x94>
 80055fc:	3c01      	subs	r4, #1
 80055fe:	e7c6      	b.n	800558e <quorem+0x8e>
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	3b04      	subs	r3, #4
 8005604:	2a00      	cmp	r2, #0
 8005606:	d1ef      	bne.n	80055e8 <quorem+0xe8>
 8005608:	3c01      	subs	r4, #1
 800560a:	e7ea      	b.n	80055e2 <quorem+0xe2>
 800560c:	2000      	movs	r0, #0
 800560e:	e7ee      	b.n	80055ee <quorem+0xee>

08005610 <_dtoa_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	4614      	mov	r4, r2
 8005616:	461d      	mov	r5, r3
 8005618:	69c7      	ldr	r7, [r0, #28]
 800561a:	b097      	sub	sp, #92	@ 0x5c
 800561c:	4681      	mov	r9, r0
 800561e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005622:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005624:	b97f      	cbnz	r7, 8005646 <_dtoa_r+0x36>
 8005626:	2010      	movs	r0, #16
 8005628:	f000 fe0e 	bl	8006248 <malloc>
 800562c:	4602      	mov	r2, r0
 800562e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005632:	b920      	cbnz	r0, 800563e <_dtoa_r+0x2e>
 8005634:	21ef      	movs	r1, #239	@ 0xef
 8005636:	4bac      	ldr	r3, [pc, #688]	@ (80058e8 <_dtoa_r+0x2d8>)
 8005638:	48ac      	ldr	r0, [pc, #688]	@ (80058ec <_dtoa_r+0x2dc>)
 800563a:	f002 fc27 	bl	8007e8c <__assert_func>
 800563e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005642:	6007      	str	r7, [r0, #0]
 8005644:	60c7      	str	r7, [r0, #12]
 8005646:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800564a:	6819      	ldr	r1, [r3, #0]
 800564c:	b159      	cbz	r1, 8005666 <_dtoa_r+0x56>
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	2301      	movs	r3, #1
 8005652:	4093      	lsls	r3, r2
 8005654:	604a      	str	r2, [r1, #4]
 8005656:	608b      	str	r3, [r1, #8]
 8005658:	4648      	mov	r0, r9
 800565a:	f000 feeb 	bl	8006434 <_Bfree>
 800565e:	2200      	movs	r2, #0
 8005660:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	1e2b      	subs	r3, r5, #0
 8005668:	bfaf      	iteee	ge
 800566a:	2300      	movge	r3, #0
 800566c:	2201      	movlt	r2, #1
 800566e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005672:	9307      	strlt	r3, [sp, #28]
 8005674:	bfa8      	it	ge
 8005676:	6033      	strge	r3, [r6, #0]
 8005678:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800567c:	4b9c      	ldr	r3, [pc, #624]	@ (80058f0 <_dtoa_r+0x2e0>)
 800567e:	bfb8      	it	lt
 8005680:	6032      	strlt	r2, [r6, #0]
 8005682:	ea33 0308 	bics.w	r3, r3, r8
 8005686:	d112      	bne.n	80056ae <_dtoa_r+0x9e>
 8005688:	f242 730f 	movw	r3, #9999	@ 0x270f
 800568c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005694:	4323      	orrs	r3, r4
 8005696:	f000 855e 	beq.w	8006156 <_dtoa_r+0xb46>
 800569a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800569c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80058f4 <_dtoa_r+0x2e4>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8560 	beq.w	8006166 <_dtoa_r+0xb56>
 80056a6:	f10a 0303 	add.w	r3, sl, #3
 80056aa:	f000 bd5a 	b.w	8006162 <_dtoa_r+0xb52>
 80056ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80056b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	2300      	movs	r3, #0
 80056be:	f7fb f973 	bl	80009a8 <__aeabi_dcmpeq>
 80056c2:	4607      	mov	r7, r0
 80056c4:	b158      	cbz	r0, 80056de <_dtoa_r+0xce>
 80056c6:	2301      	movs	r3, #1
 80056c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056ce:	b113      	cbz	r3, 80056d6 <_dtoa_r+0xc6>
 80056d0:	4b89      	ldr	r3, [pc, #548]	@ (80058f8 <_dtoa_r+0x2e8>)
 80056d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80058fc <_dtoa_r+0x2ec>
 80056da:	f000 bd44 	b.w	8006166 <_dtoa_r+0xb56>
 80056de:	ab14      	add	r3, sp, #80	@ 0x50
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	ab15      	add	r3, sp, #84	@ 0x54
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	4648      	mov	r0, r9
 80056e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80056ec:	f001 fa36 	bl	8006b5c <__d2b>
 80056f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80056f4:	9003      	str	r0, [sp, #12]
 80056f6:	2e00      	cmp	r6, #0
 80056f8:	d078      	beq.n	80057ec <_dtoa_r+0x1dc>
 80056fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005700:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005708:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800570c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005710:	9712      	str	r7, [sp, #72]	@ 0x48
 8005712:	4619      	mov	r1, r3
 8005714:	2200      	movs	r2, #0
 8005716:	4b7a      	ldr	r3, [pc, #488]	@ (8005900 <_dtoa_r+0x2f0>)
 8005718:	f7fa fd26 	bl	8000168 <__aeabi_dsub>
 800571c:	a36c      	add	r3, pc, #432	@ (adr r3, 80058d0 <_dtoa_r+0x2c0>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fed9 	bl	80004d8 <__aeabi_dmul>
 8005726:	a36c      	add	r3, pc, #432	@ (adr r3, 80058d8 <_dtoa_r+0x2c8>)
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f7fa fd1e 	bl	800016c <__adddf3>
 8005730:	4604      	mov	r4, r0
 8005732:	4630      	mov	r0, r6
 8005734:	460d      	mov	r5, r1
 8005736:	f7fa fe65 	bl	8000404 <__aeabi_i2d>
 800573a:	a369      	add	r3, pc, #420	@ (adr r3, 80058e0 <_dtoa_r+0x2d0>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa feca 	bl	80004d8 <__aeabi_dmul>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4620      	mov	r0, r4
 800574a:	4629      	mov	r1, r5
 800574c:	f7fa fd0e 	bl	800016c <__adddf3>
 8005750:	4604      	mov	r4, r0
 8005752:	460d      	mov	r5, r1
 8005754:	f7fb f970 	bl	8000a38 <__aeabi_d2iz>
 8005758:	2200      	movs	r2, #0
 800575a:	4607      	mov	r7, r0
 800575c:	2300      	movs	r3, #0
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fb f92b 	bl	80009bc <__aeabi_dcmplt>
 8005766:	b140      	cbz	r0, 800577a <_dtoa_r+0x16a>
 8005768:	4638      	mov	r0, r7
 800576a:	f7fa fe4b 	bl	8000404 <__aeabi_i2d>
 800576e:	4622      	mov	r2, r4
 8005770:	462b      	mov	r3, r5
 8005772:	f7fb f919 	bl	80009a8 <__aeabi_dcmpeq>
 8005776:	b900      	cbnz	r0, 800577a <_dtoa_r+0x16a>
 8005778:	3f01      	subs	r7, #1
 800577a:	2f16      	cmp	r7, #22
 800577c:	d854      	bhi.n	8005828 <_dtoa_r+0x218>
 800577e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005782:	4b60      	ldr	r3, [pc, #384]	@ (8005904 <_dtoa_r+0x2f4>)
 8005784:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fb f916 	bl	80009bc <__aeabi_dcmplt>
 8005790:	2800      	cmp	r0, #0
 8005792:	d04b      	beq.n	800582c <_dtoa_r+0x21c>
 8005794:	2300      	movs	r3, #0
 8005796:	3f01      	subs	r7, #1
 8005798:	930f      	str	r3, [sp, #60]	@ 0x3c
 800579a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800579c:	1b9b      	subs	r3, r3, r6
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	bf49      	itett	mi
 80057a2:	f1c3 0301 	rsbmi	r3, r3, #1
 80057a6:	2300      	movpl	r3, #0
 80057a8:	9304      	strmi	r3, [sp, #16]
 80057aa:	2300      	movmi	r3, #0
 80057ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80057ae:	bf54      	ite	pl
 80057b0:	9304      	strpl	r3, [sp, #16]
 80057b2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	db3b      	blt.n	8005830 <_dtoa_r+0x220>
 80057b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ba:	970e      	str	r7, [sp, #56]	@ 0x38
 80057bc:	443b      	add	r3, r7
 80057be:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c0:	2300      	movs	r3, #0
 80057c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80057c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057c6:	2b09      	cmp	r3, #9
 80057c8:	d865      	bhi.n	8005896 <_dtoa_r+0x286>
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	bfc4      	itt	gt
 80057ce:	3b04      	subgt	r3, #4
 80057d0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80057d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057d4:	bfc8      	it	gt
 80057d6:	2400      	movgt	r4, #0
 80057d8:	f1a3 0302 	sub.w	r3, r3, #2
 80057dc:	bfd8      	it	le
 80057de:	2401      	movle	r4, #1
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d864      	bhi.n	80058ae <_dtoa_r+0x29e>
 80057e4:	e8df f003 	tbb	[pc, r3]
 80057e8:	2c385553 	.word	0x2c385553
 80057ec:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057f0:	441e      	add	r6, r3
 80057f2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	bfc1      	itttt	gt
 80057fa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057fe:	fa08 f803 	lslgt.w	r8, r8, r3
 8005802:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005806:	fa24 f303 	lsrgt.w	r3, r4, r3
 800580a:	bfd6      	itet	le
 800580c:	f1c3 0320 	rsble	r3, r3, #32
 8005810:	ea48 0003 	orrgt.w	r0, r8, r3
 8005814:	fa04 f003 	lslle.w	r0, r4, r3
 8005818:	f7fa fde4 	bl	80003e4 <__aeabi_ui2d>
 800581c:	2201      	movs	r2, #1
 800581e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005822:	3e01      	subs	r6, #1
 8005824:	9212      	str	r2, [sp, #72]	@ 0x48
 8005826:	e774      	b.n	8005712 <_dtoa_r+0x102>
 8005828:	2301      	movs	r3, #1
 800582a:	e7b5      	b.n	8005798 <_dtoa_r+0x188>
 800582c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800582e:	e7b4      	b.n	800579a <_dtoa_r+0x18a>
 8005830:	9b04      	ldr	r3, [sp, #16]
 8005832:	1bdb      	subs	r3, r3, r7
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	427b      	negs	r3, r7
 8005838:	930a      	str	r3, [sp, #40]	@ 0x28
 800583a:	2300      	movs	r3, #0
 800583c:	930e      	str	r3, [sp, #56]	@ 0x38
 800583e:	e7c1      	b.n	80057c4 <_dtoa_r+0x1b4>
 8005840:	2301      	movs	r3, #1
 8005842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005844:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005846:	eb07 0b03 	add.w	fp, r7, r3
 800584a:	f10b 0301 	add.w	r3, fp, #1
 800584e:	2b01      	cmp	r3, #1
 8005850:	9308      	str	r3, [sp, #32]
 8005852:	bfb8      	it	lt
 8005854:	2301      	movlt	r3, #1
 8005856:	e006      	b.n	8005866 <_dtoa_r+0x256>
 8005858:	2301      	movs	r3, #1
 800585a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800585c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800585e:	2b00      	cmp	r3, #0
 8005860:	dd28      	ble.n	80058b4 <_dtoa_r+0x2a4>
 8005862:	469b      	mov	fp, r3
 8005864:	9308      	str	r3, [sp, #32]
 8005866:	2100      	movs	r1, #0
 8005868:	2204      	movs	r2, #4
 800586a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800586e:	f102 0514 	add.w	r5, r2, #20
 8005872:	429d      	cmp	r5, r3
 8005874:	d926      	bls.n	80058c4 <_dtoa_r+0x2b4>
 8005876:	6041      	str	r1, [r0, #4]
 8005878:	4648      	mov	r0, r9
 800587a:	f000 fd9b 	bl	80063b4 <_Balloc>
 800587e:	4682      	mov	sl, r0
 8005880:	2800      	cmp	r0, #0
 8005882:	d143      	bne.n	800590c <_dtoa_r+0x2fc>
 8005884:	4602      	mov	r2, r0
 8005886:	f240 11af 	movw	r1, #431	@ 0x1af
 800588a:	4b1f      	ldr	r3, [pc, #124]	@ (8005908 <_dtoa_r+0x2f8>)
 800588c:	e6d4      	b.n	8005638 <_dtoa_r+0x28>
 800588e:	2300      	movs	r3, #0
 8005890:	e7e3      	b.n	800585a <_dtoa_r+0x24a>
 8005892:	2300      	movs	r3, #0
 8005894:	e7d5      	b.n	8005842 <_dtoa_r+0x232>
 8005896:	2401      	movs	r4, #1
 8005898:	2300      	movs	r3, #0
 800589a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800589c:	9320      	str	r3, [sp, #128]	@ 0x80
 800589e:	f04f 3bff 	mov.w	fp, #4294967295
 80058a2:	2200      	movs	r2, #0
 80058a4:	2312      	movs	r3, #18
 80058a6:	f8cd b020 	str.w	fp, [sp, #32]
 80058aa:	9221      	str	r2, [sp, #132]	@ 0x84
 80058ac:	e7db      	b.n	8005866 <_dtoa_r+0x256>
 80058ae:	2301      	movs	r3, #1
 80058b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b2:	e7f4      	b.n	800589e <_dtoa_r+0x28e>
 80058b4:	f04f 0b01 	mov.w	fp, #1
 80058b8:	465b      	mov	r3, fp
 80058ba:	f8cd b020 	str.w	fp, [sp, #32]
 80058be:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80058c2:	e7d0      	b.n	8005866 <_dtoa_r+0x256>
 80058c4:	3101      	adds	r1, #1
 80058c6:	0052      	lsls	r2, r2, #1
 80058c8:	e7d1      	b.n	800586e <_dtoa_r+0x25e>
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w
 80058d0:	636f4361 	.word	0x636f4361
 80058d4:	3fd287a7 	.word	0x3fd287a7
 80058d8:	8b60c8b3 	.word	0x8b60c8b3
 80058dc:	3fc68a28 	.word	0x3fc68a28
 80058e0:	509f79fb 	.word	0x509f79fb
 80058e4:	3fd34413 	.word	0x3fd34413
 80058e8:	08009650 	.word	0x08009650
 80058ec:	08009667 	.word	0x08009667
 80058f0:	7ff00000 	.word	0x7ff00000
 80058f4:	0800964c 	.word	0x0800964c
 80058f8:	0800961b 	.word	0x0800961b
 80058fc:	0800961a 	.word	0x0800961a
 8005900:	3ff80000 	.word	0x3ff80000
 8005904:	08009818 	.word	0x08009818
 8005908:	080096bf 	.word	0x080096bf
 800590c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005910:	6018      	str	r0, [r3, #0]
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	2b0e      	cmp	r3, #14
 8005916:	f200 80a1 	bhi.w	8005a5c <_dtoa_r+0x44c>
 800591a:	2c00      	cmp	r4, #0
 800591c:	f000 809e 	beq.w	8005a5c <_dtoa_r+0x44c>
 8005920:	2f00      	cmp	r7, #0
 8005922:	dd33      	ble.n	800598c <_dtoa_r+0x37c>
 8005924:	4b9c      	ldr	r3, [pc, #624]	@ (8005b98 <_dtoa_r+0x588>)
 8005926:	f007 020f 	and.w	r2, r7, #15
 800592a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800592e:	05f8      	lsls	r0, r7, #23
 8005930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005934:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800593c:	d516      	bpl.n	800596c <_dtoa_r+0x35c>
 800593e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005942:	4b96      	ldr	r3, [pc, #600]	@ (8005b9c <_dtoa_r+0x58c>)
 8005944:	2603      	movs	r6, #3
 8005946:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800594a:	f7fa feef 	bl	800072c <__aeabi_ddiv>
 800594e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005952:	f004 040f 	and.w	r4, r4, #15
 8005956:	4d91      	ldr	r5, [pc, #580]	@ (8005b9c <_dtoa_r+0x58c>)
 8005958:	b954      	cbnz	r4, 8005970 <_dtoa_r+0x360>
 800595a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800595e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005962:	f7fa fee3 	bl	800072c <__aeabi_ddiv>
 8005966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800596a:	e028      	b.n	80059be <_dtoa_r+0x3ae>
 800596c:	2602      	movs	r6, #2
 800596e:	e7f2      	b.n	8005956 <_dtoa_r+0x346>
 8005970:	07e1      	lsls	r1, r4, #31
 8005972:	d508      	bpl.n	8005986 <_dtoa_r+0x376>
 8005974:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800597c:	f7fa fdac 	bl	80004d8 <__aeabi_dmul>
 8005980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005984:	3601      	adds	r6, #1
 8005986:	1064      	asrs	r4, r4, #1
 8005988:	3508      	adds	r5, #8
 800598a:	e7e5      	b.n	8005958 <_dtoa_r+0x348>
 800598c:	f000 80af 	beq.w	8005aee <_dtoa_r+0x4de>
 8005990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005994:	427c      	negs	r4, r7
 8005996:	4b80      	ldr	r3, [pc, #512]	@ (8005b98 <_dtoa_r+0x588>)
 8005998:	f004 020f 	and.w	r2, r4, #15
 800599c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fd98 	bl	80004d8 <__aeabi_dmul>
 80059a8:	2602      	movs	r6, #2
 80059aa:	2300      	movs	r3, #0
 80059ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059b0:	4d7a      	ldr	r5, [pc, #488]	@ (8005b9c <_dtoa_r+0x58c>)
 80059b2:	1124      	asrs	r4, r4, #4
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	f040 808f 	bne.w	8005ad8 <_dtoa_r+0x4c8>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1d3      	bne.n	8005966 <_dtoa_r+0x356>
 80059be:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80059c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8094 	beq.w	8005af2 <_dtoa_r+0x4e2>
 80059ca:	2200      	movs	r2, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	4b73      	ldr	r3, [pc, #460]	@ (8005ba0 <_dtoa_r+0x590>)
 80059d2:	f7fa fff3 	bl	80009bc <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f000 808b 	beq.w	8005af2 <_dtoa_r+0x4e2>
 80059dc:	9b08      	ldr	r3, [sp, #32]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8087 	beq.w	8005af2 <_dtoa_r+0x4e2>
 80059e4:	f1bb 0f00 	cmp.w	fp, #0
 80059e8:	dd34      	ble.n	8005a54 <_dtoa_r+0x444>
 80059ea:	4620      	mov	r0, r4
 80059ec:	2200      	movs	r2, #0
 80059ee:	4629      	mov	r1, r5
 80059f0:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba4 <_dtoa_r+0x594>)
 80059f2:	f7fa fd71 	bl	80004d8 <__aeabi_dmul>
 80059f6:	465c      	mov	r4, fp
 80059f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059fc:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a00:	3601      	adds	r6, #1
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7fa fcfe 	bl	8000404 <__aeabi_i2d>
 8005a08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a0c:	f7fa fd64 	bl	80004d8 <__aeabi_dmul>
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b65      	ldr	r3, [pc, #404]	@ (8005ba8 <_dtoa_r+0x598>)
 8005a14:	f7fa fbaa 	bl	800016c <__adddf3>
 8005a18:	4605      	mov	r5, r0
 8005a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	d16a      	bne.n	8005af8 <_dtoa_r+0x4e8>
 8005a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a26:	2200      	movs	r2, #0
 8005a28:	4b60      	ldr	r3, [pc, #384]	@ (8005bac <_dtoa_r+0x59c>)
 8005a2a:	f7fa fb9d 	bl	8000168 <__aeabi_dsub>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a36:	462a      	mov	r2, r5
 8005a38:	4633      	mov	r3, r6
 8005a3a:	f7fa ffdd 	bl	80009f8 <__aeabi_dcmpgt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f040 8298 	bne.w	8005f74 <_dtoa_r+0x964>
 8005a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a4e:	f7fa ffb5 	bl	80009bc <__aeabi_dcmplt>
 8005a52:	bb38      	cbnz	r0, 8005aa4 <_dtoa_r+0x494>
 8005a54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a58:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f2c0 8157 	blt.w	8005d12 <_dtoa_r+0x702>
 8005a64:	2f0e      	cmp	r7, #14
 8005a66:	f300 8154 	bgt.w	8005d12 <_dtoa_r+0x702>
 8005a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b98 <_dtoa_r+0x588>)
 8005a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f280 80e5 	bge.w	8005c4a <_dtoa_r+0x63a>
 8005a80:	9b08      	ldr	r3, [sp, #32]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f300 80e1 	bgt.w	8005c4a <_dtoa_r+0x63a>
 8005a88:	d10c      	bne.n	8005aa4 <_dtoa_r+0x494>
 8005a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4b46      	ldr	r3, [pc, #280]	@ (8005bac <_dtoa_r+0x59c>)
 8005a92:	f7fa fd21 	bl	80004d8 <__aeabi_dmul>
 8005a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a9a:	f7fa ffa3 	bl	80009e4 <__aeabi_dcmpge>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f000 8266 	beq.w	8005f70 <_dtoa_r+0x960>
 8005aa4:	2400      	movs	r4, #0
 8005aa6:	4625      	mov	r5, r4
 8005aa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005aaa:	4656      	mov	r6, sl
 8005aac:	ea6f 0803 	mvn.w	r8, r3
 8005ab0:	2700      	movs	r7, #0
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4648      	mov	r0, r9
 8005ab6:	f000 fcbd 	bl	8006434 <_Bfree>
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	f000 80bd 	beq.w	8005c3a <_dtoa_r+0x62a>
 8005ac0:	b12f      	cbz	r7, 8005ace <_dtoa_r+0x4be>
 8005ac2:	42af      	cmp	r7, r5
 8005ac4:	d003      	beq.n	8005ace <_dtoa_r+0x4be>
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4648      	mov	r0, r9
 8005aca:	f000 fcb3 	bl	8006434 <_Bfree>
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4648      	mov	r0, r9
 8005ad2:	f000 fcaf 	bl	8006434 <_Bfree>
 8005ad6:	e0b0      	b.n	8005c3a <_dtoa_r+0x62a>
 8005ad8:	07e2      	lsls	r2, r4, #31
 8005ada:	d505      	bpl.n	8005ae8 <_dtoa_r+0x4d8>
 8005adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ae0:	f7fa fcfa 	bl	80004d8 <__aeabi_dmul>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	1064      	asrs	r4, r4, #1
 8005aea:	3508      	adds	r5, #8
 8005aec:	e762      	b.n	80059b4 <_dtoa_r+0x3a4>
 8005aee:	2602      	movs	r6, #2
 8005af0:	e765      	b.n	80059be <_dtoa_r+0x3ae>
 8005af2:	46b8      	mov	r8, r7
 8005af4:	9c08      	ldr	r4, [sp, #32]
 8005af6:	e784      	b.n	8005a02 <_dtoa_r+0x3f2>
 8005af8:	4b27      	ldr	r3, [pc, #156]	@ (8005b98 <_dtoa_r+0x588>)
 8005afa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b04:	4454      	add	r4, sl
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d054      	beq.n	8005bb4 <_dtoa_r+0x5a4>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	4928      	ldr	r1, [pc, #160]	@ (8005bb0 <_dtoa_r+0x5a0>)
 8005b0e:	f7fa fe0d 	bl	800072c <__aeabi_ddiv>
 8005b12:	4633      	mov	r3, r6
 8005b14:	462a      	mov	r2, r5
 8005b16:	f7fa fb27 	bl	8000168 <__aeabi_dsub>
 8005b1a:	4656      	mov	r6, sl
 8005b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b24:	f7fa ff88 	bl	8000a38 <__aeabi_d2iz>
 8005b28:	4605      	mov	r5, r0
 8005b2a:	f7fa fc6b 	bl	8000404 <__aeabi_i2d>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b36:	f7fa fb17 	bl	8000168 <__aeabi_dsub>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	3530      	adds	r5, #48	@ 0x30
 8005b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b48:	f806 5b01 	strb.w	r5, [r6], #1
 8005b4c:	f7fa ff36 	bl	80009bc <__aeabi_dcmplt>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d172      	bne.n	8005c3a <_dtoa_r+0x62a>
 8005b54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	4911      	ldr	r1, [pc, #68]	@ (8005ba0 <_dtoa_r+0x590>)
 8005b5c:	f7fa fb04 	bl	8000168 <__aeabi_dsub>
 8005b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b64:	f7fa ff2a 	bl	80009bc <__aeabi_dcmplt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f040 80b4 	bne.w	8005cd6 <_dtoa_r+0x6c6>
 8005b6e:	42a6      	cmp	r6, r4
 8005b70:	f43f af70 	beq.w	8005a54 <_dtoa_r+0x444>
 8005b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <_dtoa_r+0x594>)
 8005b7c:	f7fa fcac 	bl	80004d8 <__aeabi_dmul>
 8005b80:	2200      	movs	r2, #0
 8005b82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <_dtoa_r+0x594>)
 8005b8c:	f7fa fca4 	bl	80004d8 <__aeabi_dmul>
 8005b90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b94:	e7c4      	b.n	8005b20 <_dtoa_r+0x510>
 8005b96:	bf00      	nop
 8005b98:	08009818 	.word	0x08009818
 8005b9c:	080097f0 	.word	0x080097f0
 8005ba0:	3ff00000 	.word	0x3ff00000
 8005ba4:	40240000 	.word	0x40240000
 8005ba8:	401c0000 	.word	0x401c0000
 8005bac:	40140000 	.word	0x40140000
 8005bb0:	3fe00000 	.word	0x3fe00000
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7fa fc8e 	bl	80004d8 <__aeabi_dmul>
 8005bbc:	4656      	mov	r6, sl
 8005bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bc2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005bc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc8:	f7fa ff36 	bl	8000a38 <__aeabi_d2iz>
 8005bcc:	4605      	mov	r5, r0
 8005bce:	f7fa fc19 	bl	8000404 <__aeabi_i2d>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bda:	f7fa fac5 	bl	8000168 <__aeabi_dsub>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	3530      	adds	r5, #48	@ 0x30
 8005be4:	f806 5b01 	strb.w	r5, [r6], #1
 8005be8:	42a6      	cmp	r6, r4
 8005bea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	d124      	bne.n	8005c3e <_dtoa_r+0x62e>
 8005bf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bf8:	4bae      	ldr	r3, [pc, #696]	@ (8005eb4 <_dtoa_r+0x8a4>)
 8005bfa:	f7fa fab7 	bl	800016c <__adddf3>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c06:	f7fa fef7 	bl	80009f8 <__aeabi_dcmpgt>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d163      	bne.n	8005cd6 <_dtoa_r+0x6c6>
 8005c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c12:	2000      	movs	r0, #0
 8005c14:	49a7      	ldr	r1, [pc, #668]	@ (8005eb4 <_dtoa_r+0x8a4>)
 8005c16:	f7fa faa7 	bl	8000168 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c22:	f7fa fecb 	bl	80009bc <__aeabi_dcmplt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f43f af14 	beq.w	8005a54 <_dtoa_r+0x444>
 8005c2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c2e:	1e73      	subs	r3, r6, #1
 8005c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c36:	2b30      	cmp	r3, #48	@ 0x30
 8005c38:	d0f8      	beq.n	8005c2c <_dtoa_r+0x61c>
 8005c3a:	4647      	mov	r7, r8
 8005c3c:	e03b      	b.n	8005cb6 <_dtoa_r+0x6a6>
 8005c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8005eb8 <_dtoa_r+0x8a8>)
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c48:	e7bc      	b.n	8005bc4 <_dtoa_r+0x5b4>
 8005c4a:	4656      	mov	r6, sl
 8005c4c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa fd68 	bl	800072c <__aeabi_ddiv>
 8005c5c:	f7fa feec 	bl	8000a38 <__aeabi_d2iz>
 8005c60:	4680      	mov	r8, r0
 8005c62:	f7fa fbcf 	bl	8000404 <__aeabi_i2d>
 8005c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6a:	f7fa fc35 	bl	80004d8 <__aeabi_dmul>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa fa77 	bl	8000168 <__aeabi_dsub>
 8005c7a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c7e:	9d08      	ldr	r5, [sp, #32]
 8005c80:	f806 4b01 	strb.w	r4, [r6], #1
 8005c84:	eba6 040a 	sub.w	r4, r6, sl
 8005c88:	42a5      	cmp	r5, r4
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	d133      	bne.n	8005cf8 <_dtoa_r+0x6e8>
 8005c90:	f7fa fa6c 	bl	800016c <__adddf3>
 8005c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c98:	4604      	mov	r4, r0
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	f7fa feac 	bl	80009f8 <__aeabi_dcmpgt>
 8005ca0:	b9c0      	cbnz	r0, 8005cd4 <_dtoa_r+0x6c4>
 8005ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8005cae:	b110      	cbz	r0, 8005cb6 <_dtoa_r+0x6a6>
 8005cb0:	f018 0f01 	tst.w	r8, #1
 8005cb4:	d10e      	bne.n	8005cd4 <_dtoa_r+0x6c4>
 8005cb6:	4648      	mov	r0, r9
 8005cb8:	9903      	ldr	r1, [sp, #12]
 8005cba:	f000 fbbb 	bl	8006434 <_Bfree>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	7033      	strb	r3, [r6, #0]
 8005cc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005cc4:	3701      	adds	r7, #1
 8005cc6:	601f      	str	r7, [r3, #0]
 8005cc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 824b 	beq.w	8006166 <_dtoa_r+0xb56>
 8005cd0:	601e      	str	r6, [r3, #0]
 8005cd2:	e248      	b.n	8006166 <_dtoa_r+0xb56>
 8005cd4:	46b8      	mov	r8, r7
 8005cd6:	4633      	mov	r3, r6
 8005cd8:	461e      	mov	r6, r3
 8005cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cde:	2a39      	cmp	r2, #57	@ 0x39
 8005ce0:	d106      	bne.n	8005cf0 <_dtoa_r+0x6e0>
 8005ce2:	459a      	cmp	sl, r3
 8005ce4:	d1f8      	bne.n	8005cd8 <_dtoa_r+0x6c8>
 8005ce6:	2230      	movs	r2, #48	@ 0x30
 8005ce8:	f108 0801 	add.w	r8, r8, #1
 8005cec:	f88a 2000 	strb.w	r2, [sl]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	3201      	adds	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e7a0      	b.n	8005c3a <_dtoa_r+0x62a>
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb8 <_dtoa_r+0x8a8>)
 8005cfc:	f7fa fbec 	bl	80004d8 <__aeabi_dmul>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	f7fa fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d09f      	beq.n	8005c50 <_dtoa_r+0x640>
 8005d10:	e7d1      	b.n	8005cb6 <_dtoa_r+0x6a6>
 8005d12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 80ea 	beq.w	8005eee <_dtoa_r+0x8de>
 8005d1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d1c:	2a01      	cmp	r2, #1
 8005d1e:	f300 80cd 	bgt.w	8005ebc <_dtoa_r+0x8ac>
 8005d22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f000 80c1 	beq.w	8005eac <_dtoa_r+0x89c>
 8005d2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d30:	9e04      	ldr	r6, [sp, #16]
 8005d32:	9a04      	ldr	r2, [sp, #16]
 8005d34:	2101      	movs	r1, #1
 8005d36:	441a      	add	r2, r3
 8005d38:	9204      	str	r2, [sp, #16]
 8005d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d3c:	4648      	mov	r0, r9
 8005d3e:	441a      	add	r2, r3
 8005d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d42:	f000 fc75 	bl	8006630 <__i2b>
 8005d46:	4605      	mov	r5, r0
 8005d48:	b166      	cbz	r6, 8005d64 <_dtoa_r+0x754>
 8005d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd09      	ble.n	8005d64 <_dtoa_r+0x754>
 8005d50:	42b3      	cmp	r3, r6
 8005d52:	bfa8      	it	ge
 8005d54:	4633      	movge	r3, r6
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	1af6      	subs	r6, r6, r3
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	9204      	str	r2, [sp, #16]
 8005d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d66:	b30b      	cbz	r3, 8005dac <_dtoa_r+0x79c>
 8005d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80c6 	beq.w	8005efc <_dtoa_r+0x8ec>
 8005d70:	2c00      	cmp	r4, #0
 8005d72:	f000 80c0 	beq.w	8005ef6 <_dtoa_r+0x8e6>
 8005d76:	4629      	mov	r1, r5
 8005d78:	4622      	mov	r2, r4
 8005d7a:	4648      	mov	r0, r9
 8005d7c:	f000 fd10 	bl	80067a0 <__pow5mult>
 8005d80:	9a03      	ldr	r2, [sp, #12]
 8005d82:	4601      	mov	r1, r0
 8005d84:	4605      	mov	r5, r0
 8005d86:	4648      	mov	r0, r9
 8005d88:	f000 fc68 	bl	800665c <__multiply>
 8005d8c:	9903      	ldr	r1, [sp, #12]
 8005d8e:	4680      	mov	r8, r0
 8005d90:	4648      	mov	r0, r9
 8005d92:	f000 fb4f 	bl	8006434 <_Bfree>
 8005d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d98:	1b1b      	subs	r3, r3, r4
 8005d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d9c:	f000 80b1 	beq.w	8005f02 <_dtoa_r+0x8f2>
 8005da0:	4641      	mov	r1, r8
 8005da2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005da4:	4648      	mov	r0, r9
 8005da6:	f000 fcfb 	bl	80067a0 <__pow5mult>
 8005daa:	9003      	str	r0, [sp, #12]
 8005dac:	2101      	movs	r1, #1
 8005dae:	4648      	mov	r0, r9
 8005db0:	f000 fc3e 	bl	8006630 <__i2b>
 8005db4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005db6:	4604      	mov	r4, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 81d8 	beq.w	800616e <_dtoa_r+0xb5e>
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	4648      	mov	r0, r9
 8005dc4:	f000 fcec 	bl	80067a0 <__pow5mult>
 8005dc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dca:	4604      	mov	r4, r0
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	f300 809f 	bgt.w	8005f10 <_dtoa_r+0x900>
 8005dd2:	9b06      	ldr	r3, [sp, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f040 8097 	bne.w	8005f08 <_dtoa_r+0x8f8>
 8005dda:	9b07      	ldr	r3, [sp, #28]
 8005ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 8093 	bne.w	8005f0c <_dtoa_r+0x8fc>
 8005de6:	9b07      	ldr	r3, [sp, #28]
 8005de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dec:	0d1b      	lsrs	r3, r3, #20
 8005dee:	051b      	lsls	r3, r3, #20
 8005df0:	b133      	cbz	r3, 8005e00 <_dtoa_r+0x7f0>
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	3301      	adds	r3, #1
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dfe:	2301      	movs	r3, #1
 8005e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 81b8 	beq.w	800617a <_dtoa_r+0xb6a>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e10:	6918      	ldr	r0, [r3, #16]
 8005e12:	f000 fbc1 	bl	8006598 <__hi0bits>
 8005e16:	f1c0 0020 	rsb	r0, r0, #32
 8005e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1c:	4418      	add	r0, r3
 8005e1e:	f010 001f 	ands.w	r0, r0, #31
 8005e22:	f000 8082 	beq.w	8005f2a <_dtoa_r+0x91a>
 8005e26:	f1c0 0320 	rsb	r3, r0, #32
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	dd73      	ble.n	8005f16 <_dtoa_r+0x906>
 8005e2e:	9b04      	ldr	r3, [sp, #16]
 8005e30:	f1c0 001c 	rsb	r0, r0, #28
 8005e34:	4403      	add	r3, r0
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3a:	4406      	add	r6, r0
 8005e3c:	4403      	add	r3, r0
 8005e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e40:	9b04      	ldr	r3, [sp, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dd05      	ble.n	8005e52 <_dtoa_r+0x842>
 8005e46:	461a      	mov	r2, r3
 8005e48:	4648      	mov	r0, r9
 8005e4a:	9903      	ldr	r1, [sp, #12]
 8005e4c:	f000 fd02 	bl	8006854 <__lshift>
 8005e50:	9003      	str	r0, [sp, #12]
 8005e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd05      	ble.n	8005e64 <_dtoa_r+0x854>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4648      	mov	r0, r9
 8005e5e:	f000 fcf9 	bl	8006854 <__lshift>
 8005e62:	4604      	mov	r4, r0
 8005e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d061      	beq.n	8005f2e <_dtoa_r+0x91e>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	9803      	ldr	r0, [sp, #12]
 8005e6e:	f000 fd5d 	bl	800692c <__mcmp>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	da5b      	bge.n	8005f2e <_dtoa_r+0x91e>
 8005e76:	2300      	movs	r3, #0
 8005e78:	220a      	movs	r2, #10
 8005e7a:	4648      	mov	r0, r9
 8005e7c:	9903      	ldr	r1, [sp, #12]
 8005e7e:	f000 fafb 	bl	8006478 <__multadd>
 8005e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e84:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e88:	9003      	str	r0, [sp, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8177 	beq.w	800617e <_dtoa_r+0xb6e>
 8005e90:	4629      	mov	r1, r5
 8005e92:	2300      	movs	r3, #0
 8005e94:	220a      	movs	r2, #10
 8005e96:	4648      	mov	r0, r9
 8005e98:	f000 faee 	bl	8006478 <__multadd>
 8005e9c:	f1bb 0f00 	cmp.w	fp, #0
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	dc6f      	bgt.n	8005f84 <_dtoa_r+0x974>
 8005ea4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	dc49      	bgt.n	8005f3e <_dtoa_r+0x92e>
 8005eaa:	e06b      	b.n	8005f84 <_dtoa_r+0x974>
 8005eac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005eae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eb2:	e73c      	b.n	8005d2e <_dtoa_r+0x71e>
 8005eb4:	3fe00000 	.word	0x3fe00000
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	9b08      	ldr	r3, [sp, #32]
 8005ebe:	1e5c      	subs	r4, r3, #1
 8005ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	db09      	blt.n	8005eda <_dtoa_r+0x8ca>
 8005ec6:	1b1c      	subs	r4, r3, r4
 8005ec8:	9b08      	ldr	r3, [sp, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f6bf af30 	bge.w	8005d30 <_dtoa_r+0x720>
 8005ed0:	9b04      	ldr	r3, [sp, #16]
 8005ed2:	9a08      	ldr	r2, [sp, #32]
 8005ed4:	1a9e      	subs	r6, r3, r2
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e72b      	b.n	8005d32 <_dtoa_r+0x722>
 8005eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ede:	1ae3      	subs	r3, r4, r3
 8005ee0:	441a      	add	r2, r3
 8005ee2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ee4:	9e04      	ldr	r6, [sp, #16]
 8005ee6:	2400      	movs	r4, #0
 8005ee8:	9b08      	ldr	r3, [sp, #32]
 8005eea:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eec:	e721      	b.n	8005d32 <_dtoa_r+0x722>
 8005eee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ef0:	9e04      	ldr	r6, [sp, #16]
 8005ef2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ef4:	e728      	b.n	8005d48 <_dtoa_r+0x738>
 8005ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005efa:	e751      	b.n	8005da0 <_dtoa_r+0x790>
 8005efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005efe:	9903      	ldr	r1, [sp, #12]
 8005f00:	e750      	b.n	8005da4 <_dtoa_r+0x794>
 8005f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f06:	e751      	b.n	8005dac <_dtoa_r+0x79c>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e779      	b.n	8005e00 <_dtoa_r+0x7f0>
 8005f0c:	9b06      	ldr	r3, [sp, #24]
 8005f0e:	e777      	b.n	8005e00 <_dtoa_r+0x7f0>
 8005f10:	2300      	movs	r3, #0
 8005f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f14:	e779      	b.n	8005e0a <_dtoa_r+0x7fa>
 8005f16:	d093      	beq.n	8005e40 <_dtoa_r+0x830>
 8005f18:	9a04      	ldr	r2, [sp, #16]
 8005f1a:	331c      	adds	r3, #28
 8005f1c:	441a      	add	r2, r3
 8005f1e:	9204      	str	r2, [sp, #16]
 8005f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f22:	441e      	add	r6, r3
 8005f24:	441a      	add	r2, r3
 8005f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f28:	e78a      	b.n	8005e40 <_dtoa_r+0x830>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	e7f4      	b.n	8005f18 <_dtoa_r+0x908>
 8005f2e:	9b08      	ldr	r3, [sp, #32]
 8005f30:	46b8      	mov	r8, r7
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dc20      	bgt.n	8005f78 <_dtoa_r+0x968>
 8005f36:	469b      	mov	fp, r3
 8005f38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	dd1e      	ble.n	8005f7c <_dtoa_r+0x96c>
 8005f3e:	f1bb 0f00 	cmp.w	fp, #0
 8005f42:	f47f adb1 	bne.w	8005aa8 <_dtoa_r+0x498>
 8005f46:	4621      	mov	r1, r4
 8005f48:	465b      	mov	r3, fp
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	4648      	mov	r0, r9
 8005f4e:	f000 fa93 	bl	8006478 <__multadd>
 8005f52:	4601      	mov	r1, r0
 8005f54:	4604      	mov	r4, r0
 8005f56:	9803      	ldr	r0, [sp, #12]
 8005f58:	f000 fce8 	bl	800692c <__mcmp>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f77f ada3 	ble.w	8005aa8 <_dtoa_r+0x498>
 8005f62:	4656      	mov	r6, sl
 8005f64:	2331      	movs	r3, #49	@ 0x31
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	f806 3b01 	strb.w	r3, [r6], #1
 8005f6e:	e59f      	b.n	8005ab0 <_dtoa_r+0x4a0>
 8005f70:	46b8      	mov	r8, r7
 8005f72:	9c08      	ldr	r4, [sp, #32]
 8005f74:	4625      	mov	r5, r4
 8005f76:	e7f4      	b.n	8005f62 <_dtoa_r+0x952>
 8005f78:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8101 	beq.w	8006186 <_dtoa_r+0xb76>
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	dd05      	ble.n	8005f94 <_dtoa_r+0x984>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 fc61 	bl	8006854 <__lshift>
 8005f92:	4605      	mov	r5, r0
 8005f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d05c      	beq.n	8006054 <_dtoa_r+0xa44>
 8005f9a:	4648      	mov	r0, r9
 8005f9c:	6869      	ldr	r1, [r5, #4]
 8005f9e:	f000 fa09 	bl	80063b4 <_Balloc>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	b928      	cbnz	r0, 8005fb2 <_dtoa_r+0x9a2>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fac:	4b80      	ldr	r3, [pc, #512]	@ (80061b0 <_dtoa_r+0xba0>)
 8005fae:	f7ff bb43 	b.w	8005638 <_dtoa_r+0x28>
 8005fb2:	692a      	ldr	r2, [r5, #16]
 8005fb4:	f105 010c 	add.w	r1, r5, #12
 8005fb8:	3202      	adds	r2, #2
 8005fba:	0092      	lsls	r2, r2, #2
 8005fbc:	300c      	adds	r0, #12
 8005fbe:	f001 ff51 	bl	8007e64 <memcpy>
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4648      	mov	r0, r9
 8005fc8:	f000 fc44 	bl	8006854 <__lshift>
 8005fcc:	462f      	mov	r7, r5
 8005fce:	4605      	mov	r5, r0
 8005fd0:	f10a 0301 	add.w	r3, sl, #1
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	eb0a 030b 	add.w	r3, sl, fp
 8005fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	9803      	ldr	r0, [sp, #12]
 8005fea:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fee:	f7ff fa87 	bl	8005500 <quorem>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	3330      	adds	r3, #48	@ 0x30
 8005ff8:	9006      	str	r0, [sp, #24]
 8005ffa:	9803      	ldr	r0, [sp, #12]
 8005ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ffe:	f000 fc95 	bl	800692c <__mcmp>
 8006002:	462a      	mov	r2, r5
 8006004:	9008      	str	r0, [sp, #32]
 8006006:	4621      	mov	r1, r4
 8006008:	4648      	mov	r0, r9
 800600a:	f000 fcab 	bl	8006964 <__mdiff>
 800600e:	68c2      	ldr	r2, [r0, #12]
 8006010:	4606      	mov	r6, r0
 8006012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006014:	bb02      	cbnz	r2, 8006058 <_dtoa_r+0xa48>
 8006016:	4601      	mov	r1, r0
 8006018:	9803      	ldr	r0, [sp, #12]
 800601a:	f000 fc87 	bl	800692c <__mcmp>
 800601e:	4602      	mov	r2, r0
 8006020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006022:	4631      	mov	r1, r6
 8006024:	4648      	mov	r0, r9
 8006026:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800602a:	f000 fa03 	bl	8006434 <_Bfree>
 800602e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006032:	9e04      	ldr	r6, [sp, #16]
 8006034:	ea42 0103 	orr.w	r1, r2, r3
 8006038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603a:	4319      	orrs	r1, r3
 800603c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800603e:	d10d      	bne.n	800605c <_dtoa_r+0xa4c>
 8006040:	2b39      	cmp	r3, #57	@ 0x39
 8006042:	d027      	beq.n	8006094 <_dtoa_r+0xa84>
 8006044:	9a08      	ldr	r2, [sp, #32]
 8006046:	2a00      	cmp	r2, #0
 8006048:	dd01      	ble.n	800604e <_dtoa_r+0xa3e>
 800604a:	9b06      	ldr	r3, [sp, #24]
 800604c:	3331      	adds	r3, #49	@ 0x31
 800604e:	f88b 3000 	strb.w	r3, [fp]
 8006052:	e52e      	b.n	8005ab2 <_dtoa_r+0x4a2>
 8006054:	4628      	mov	r0, r5
 8006056:	e7b9      	b.n	8005fcc <_dtoa_r+0x9bc>
 8006058:	2201      	movs	r2, #1
 800605a:	e7e2      	b.n	8006022 <_dtoa_r+0xa12>
 800605c:	9908      	ldr	r1, [sp, #32]
 800605e:	2900      	cmp	r1, #0
 8006060:	db04      	blt.n	800606c <_dtoa_r+0xa5c>
 8006062:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006064:	4301      	orrs	r1, r0
 8006066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006068:	4301      	orrs	r1, r0
 800606a:	d120      	bne.n	80060ae <_dtoa_r+0xa9e>
 800606c:	2a00      	cmp	r2, #0
 800606e:	ddee      	ble.n	800604e <_dtoa_r+0xa3e>
 8006070:	2201      	movs	r2, #1
 8006072:	9903      	ldr	r1, [sp, #12]
 8006074:	4648      	mov	r0, r9
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	f000 fbec 	bl	8006854 <__lshift>
 800607c:	4621      	mov	r1, r4
 800607e:	9003      	str	r0, [sp, #12]
 8006080:	f000 fc54 	bl	800692c <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	dc02      	bgt.n	8006090 <_dtoa_r+0xa80>
 800608a:	d1e0      	bne.n	800604e <_dtoa_r+0xa3e>
 800608c:	07da      	lsls	r2, r3, #31
 800608e:	d5de      	bpl.n	800604e <_dtoa_r+0xa3e>
 8006090:	2b39      	cmp	r3, #57	@ 0x39
 8006092:	d1da      	bne.n	800604a <_dtoa_r+0xa3a>
 8006094:	2339      	movs	r3, #57	@ 0x39
 8006096:	f88b 3000 	strb.w	r3, [fp]
 800609a:	4633      	mov	r3, r6
 800609c:	461e      	mov	r6, r3
 800609e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2a39      	cmp	r2, #57	@ 0x39
 80060a6:	d04e      	beq.n	8006146 <_dtoa_r+0xb36>
 80060a8:	3201      	adds	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e501      	b.n	8005ab2 <_dtoa_r+0x4a2>
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	dd03      	ble.n	80060ba <_dtoa_r+0xaaa>
 80060b2:	2b39      	cmp	r3, #57	@ 0x39
 80060b4:	d0ee      	beq.n	8006094 <_dtoa_r+0xa84>
 80060b6:	3301      	adds	r3, #1
 80060b8:	e7c9      	b.n	800604e <_dtoa_r+0xa3e>
 80060ba:	9a04      	ldr	r2, [sp, #16]
 80060bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060c2:	428a      	cmp	r2, r1
 80060c4:	d028      	beq.n	8006118 <_dtoa_r+0xb08>
 80060c6:	2300      	movs	r3, #0
 80060c8:	220a      	movs	r2, #10
 80060ca:	9903      	ldr	r1, [sp, #12]
 80060cc:	4648      	mov	r0, r9
 80060ce:	f000 f9d3 	bl	8006478 <__multadd>
 80060d2:	42af      	cmp	r7, r5
 80060d4:	9003      	str	r0, [sp, #12]
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	f04f 020a 	mov.w	r2, #10
 80060de:	4639      	mov	r1, r7
 80060e0:	4648      	mov	r0, r9
 80060e2:	d107      	bne.n	80060f4 <_dtoa_r+0xae4>
 80060e4:	f000 f9c8 	bl	8006478 <__multadd>
 80060e8:	4607      	mov	r7, r0
 80060ea:	4605      	mov	r5, r0
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	3301      	adds	r3, #1
 80060f0:	9304      	str	r3, [sp, #16]
 80060f2:	e777      	b.n	8005fe4 <_dtoa_r+0x9d4>
 80060f4:	f000 f9c0 	bl	8006478 <__multadd>
 80060f8:	4629      	mov	r1, r5
 80060fa:	4607      	mov	r7, r0
 80060fc:	2300      	movs	r3, #0
 80060fe:	220a      	movs	r2, #10
 8006100:	4648      	mov	r0, r9
 8006102:	f000 f9b9 	bl	8006478 <__multadd>
 8006106:	4605      	mov	r5, r0
 8006108:	e7f0      	b.n	80060ec <_dtoa_r+0xadc>
 800610a:	f1bb 0f00 	cmp.w	fp, #0
 800610e:	bfcc      	ite	gt
 8006110:	465e      	movgt	r6, fp
 8006112:	2601      	movle	r6, #1
 8006114:	2700      	movs	r7, #0
 8006116:	4456      	add	r6, sl
 8006118:	2201      	movs	r2, #1
 800611a:	9903      	ldr	r1, [sp, #12]
 800611c:	4648      	mov	r0, r9
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	f000 fb98 	bl	8006854 <__lshift>
 8006124:	4621      	mov	r1, r4
 8006126:	9003      	str	r0, [sp, #12]
 8006128:	f000 fc00 	bl	800692c <__mcmp>
 800612c:	2800      	cmp	r0, #0
 800612e:	dcb4      	bgt.n	800609a <_dtoa_r+0xa8a>
 8006130:	d102      	bne.n	8006138 <_dtoa_r+0xb28>
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	07db      	lsls	r3, r3, #31
 8006136:	d4b0      	bmi.n	800609a <_dtoa_r+0xa8a>
 8006138:	4633      	mov	r3, r6
 800613a:	461e      	mov	r6, r3
 800613c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006140:	2a30      	cmp	r2, #48	@ 0x30
 8006142:	d0fa      	beq.n	800613a <_dtoa_r+0xb2a>
 8006144:	e4b5      	b.n	8005ab2 <_dtoa_r+0x4a2>
 8006146:	459a      	cmp	sl, r3
 8006148:	d1a8      	bne.n	800609c <_dtoa_r+0xa8c>
 800614a:	2331      	movs	r3, #49	@ 0x31
 800614c:	f108 0801 	add.w	r8, r8, #1
 8006150:	f88a 3000 	strb.w	r3, [sl]
 8006154:	e4ad      	b.n	8005ab2 <_dtoa_r+0x4a2>
 8006156:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006158:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80061b4 <_dtoa_r+0xba4>
 800615c:	b11b      	cbz	r3, 8006166 <_dtoa_r+0xb56>
 800615e:	f10a 0308 	add.w	r3, sl, #8
 8006162:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4650      	mov	r0, sl
 8006168:	b017      	add	sp, #92	@ 0x5c
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006170:	2b01      	cmp	r3, #1
 8006172:	f77f ae2e 	ble.w	8005dd2 <_dtoa_r+0x7c2>
 8006176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006178:	930a      	str	r3, [sp, #40]	@ 0x28
 800617a:	2001      	movs	r0, #1
 800617c:	e64d      	b.n	8005e1a <_dtoa_r+0x80a>
 800617e:	f1bb 0f00 	cmp.w	fp, #0
 8006182:	f77f aed9 	ble.w	8005f38 <_dtoa_r+0x928>
 8006186:	4656      	mov	r6, sl
 8006188:	4621      	mov	r1, r4
 800618a:	9803      	ldr	r0, [sp, #12]
 800618c:	f7ff f9b8 	bl	8005500 <quorem>
 8006190:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006194:	f806 3b01 	strb.w	r3, [r6], #1
 8006198:	eba6 020a 	sub.w	r2, r6, sl
 800619c:	4593      	cmp	fp, r2
 800619e:	ddb4      	ble.n	800610a <_dtoa_r+0xafa>
 80061a0:	2300      	movs	r3, #0
 80061a2:	220a      	movs	r2, #10
 80061a4:	4648      	mov	r0, r9
 80061a6:	9903      	ldr	r1, [sp, #12]
 80061a8:	f000 f966 	bl	8006478 <__multadd>
 80061ac:	9003      	str	r0, [sp, #12]
 80061ae:	e7eb      	b.n	8006188 <_dtoa_r+0xb78>
 80061b0:	080096bf 	.word	0x080096bf
 80061b4:	08009643 	.word	0x08009643

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d040      	beq.n	8006242 <_free_r+0x8a>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e6 	bl	800639c <__malloc_lock>
 80061d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006244 <_free_r+0x8c>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8e2 	b.w	80063a8 <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4408      	add	r0, r1
 800621e:	6010      	str	r0, [r2, #0]
 8006220:	6053      	str	r3, [r2, #4]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf01      	itttt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	1809      	addeq	r1, r1, r0
 800623a:	6021      	streq	r1, [r4, #0]
 800623c:	6063      	str	r3, [r4, #4]
 800623e:	6054      	str	r4, [r2, #4]
 8006240:	e7cb      	b.n	80061da <_free_r+0x22>
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	2000085c 	.word	0x2000085c

08006248 <malloc>:
 8006248:	4b02      	ldr	r3, [pc, #8]	@ (8006254 <malloc+0xc>)
 800624a:	4601      	mov	r1, r0
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	f000 b825 	b.w	800629c <_malloc_r>
 8006252:	bf00      	nop
 8006254:	20000018 	.word	0x20000018

08006258 <sbrk_aligned>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4e0f      	ldr	r6, [pc, #60]	@ (8006298 <sbrk_aligned+0x40>)
 800625c:	460c      	mov	r4, r1
 800625e:	6831      	ldr	r1, [r6, #0]
 8006260:	4605      	mov	r5, r0
 8006262:	b911      	cbnz	r1, 800626a <sbrk_aligned+0x12>
 8006264:	f001 fdee 	bl	8007e44 <_sbrk_r>
 8006268:	6030      	str	r0, [r6, #0]
 800626a:	4621      	mov	r1, r4
 800626c:	4628      	mov	r0, r5
 800626e:	f001 fde9 	bl	8007e44 <_sbrk_r>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	d103      	bne.n	800627e <sbrk_aligned+0x26>
 8006276:	f04f 34ff 	mov.w	r4, #4294967295
 800627a:	4620      	mov	r0, r4
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	1cc4      	adds	r4, r0, #3
 8006280:	f024 0403 	bic.w	r4, r4, #3
 8006284:	42a0      	cmp	r0, r4
 8006286:	d0f8      	beq.n	800627a <sbrk_aligned+0x22>
 8006288:	1a21      	subs	r1, r4, r0
 800628a:	4628      	mov	r0, r5
 800628c:	f001 fdda 	bl	8007e44 <_sbrk_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d1f2      	bne.n	800627a <sbrk_aligned+0x22>
 8006294:	e7ef      	b.n	8006276 <sbrk_aligned+0x1e>
 8006296:	bf00      	nop
 8006298:	20000858 	.word	0x20000858

0800629c <_malloc_r>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	1ccd      	adds	r5, r1, #3
 80062a2:	f025 0503 	bic.w	r5, r5, #3
 80062a6:	3508      	adds	r5, #8
 80062a8:	2d0c      	cmp	r5, #12
 80062aa:	bf38      	it	cc
 80062ac:	250c      	movcc	r5, #12
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	4606      	mov	r6, r0
 80062b2:	db01      	blt.n	80062b8 <_malloc_r+0x1c>
 80062b4:	42a9      	cmp	r1, r5
 80062b6:	d904      	bls.n	80062c2 <_malloc_r+0x26>
 80062b8:	230c      	movs	r3, #12
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	2000      	movs	r0, #0
 80062be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006398 <_malloc_r+0xfc>
 80062c6:	f000 f869 	bl	800639c <__malloc_lock>
 80062ca:	f8d8 3000 	ldr.w	r3, [r8]
 80062ce:	461c      	mov	r4, r3
 80062d0:	bb44      	cbnz	r4, 8006324 <_malloc_r+0x88>
 80062d2:	4629      	mov	r1, r5
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff ffbf 	bl	8006258 <sbrk_aligned>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	4604      	mov	r4, r0
 80062de:	d158      	bne.n	8006392 <_malloc_r+0xf6>
 80062e0:	f8d8 4000 	ldr.w	r4, [r8]
 80062e4:	4627      	mov	r7, r4
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	d143      	bne.n	8006372 <_malloc_r+0xd6>
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	d04b      	beq.n	8006386 <_malloc_r+0xea>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	4639      	mov	r1, r7
 80062f2:	4630      	mov	r0, r6
 80062f4:	eb04 0903 	add.w	r9, r4, r3
 80062f8:	f001 fda4 	bl	8007e44 <_sbrk_r>
 80062fc:	4581      	cmp	r9, r0
 80062fe:	d142      	bne.n	8006386 <_malloc_r+0xea>
 8006300:	6821      	ldr	r1, [r4, #0]
 8006302:	4630      	mov	r0, r6
 8006304:	1a6d      	subs	r5, r5, r1
 8006306:	4629      	mov	r1, r5
 8006308:	f7ff ffa6 	bl	8006258 <sbrk_aligned>
 800630c:	3001      	adds	r0, #1
 800630e:	d03a      	beq.n	8006386 <_malloc_r+0xea>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	442b      	add	r3, r5
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	f8d8 3000 	ldr.w	r3, [r8]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	bb62      	cbnz	r2, 8006378 <_malloc_r+0xdc>
 800631e:	f8c8 7000 	str.w	r7, [r8]
 8006322:	e00f      	b.n	8006344 <_malloc_r+0xa8>
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	1b52      	subs	r2, r2, r5
 8006328:	d420      	bmi.n	800636c <_malloc_r+0xd0>
 800632a:	2a0b      	cmp	r2, #11
 800632c:	d917      	bls.n	800635e <_malloc_r+0xc2>
 800632e:	1961      	adds	r1, r4, r5
 8006330:	42a3      	cmp	r3, r4
 8006332:	6025      	str	r5, [r4, #0]
 8006334:	bf18      	it	ne
 8006336:	6059      	strne	r1, [r3, #4]
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	bf08      	it	eq
 800633c:	f8c8 1000 	streq.w	r1, [r8]
 8006340:	5162      	str	r2, [r4, r5]
 8006342:	604b      	str	r3, [r1, #4]
 8006344:	4630      	mov	r0, r6
 8006346:	f000 f82f 	bl	80063a8 <__malloc_unlock>
 800634a:	f104 000b 	add.w	r0, r4, #11
 800634e:	1d23      	adds	r3, r4, #4
 8006350:	f020 0007 	bic.w	r0, r0, #7
 8006354:	1ac2      	subs	r2, r0, r3
 8006356:	bf1c      	itt	ne
 8006358:	1a1b      	subne	r3, r3, r0
 800635a:	50a3      	strne	r3, [r4, r2]
 800635c:	e7af      	b.n	80062be <_malloc_r+0x22>
 800635e:	6862      	ldr	r2, [r4, #4]
 8006360:	42a3      	cmp	r3, r4
 8006362:	bf0c      	ite	eq
 8006364:	f8c8 2000 	streq.w	r2, [r8]
 8006368:	605a      	strne	r2, [r3, #4]
 800636a:	e7eb      	b.n	8006344 <_malloc_r+0xa8>
 800636c:	4623      	mov	r3, r4
 800636e:	6864      	ldr	r4, [r4, #4]
 8006370:	e7ae      	b.n	80062d0 <_malloc_r+0x34>
 8006372:	463c      	mov	r4, r7
 8006374:	687f      	ldr	r7, [r7, #4]
 8006376:	e7b6      	b.n	80062e6 <_malloc_r+0x4a>
 8006378:	461a      	mov	r2, r3
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	42a3      	cmp	r3, r4
 800637e:	d1fb      	bne.n	8006378 <_malloc_r+0xdc>
 8006380:	2300      	movs	r3, #0
 8006382:	6053      	str	r3, [r2, #4]
 8006384:	e7de      	b.n	8006344 <_malloc_r+0xa8>
 8006386:	230c      	movs	r3, #12
 8006388:	4630      	mov	r0, r6
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f000 f80c 	bl	80063a8 <__malloc_unlock>
 8006390:	e794      	b.n	80062bc <_malloc_r+0x20>
 8006392:	6005      	str	r5, [r0, #0]
 8006394:	e7d6      	b.n	8006344 <_malloc_r+0xa8>
 8006396:	bf00      	nop
 8006398:	2000085c 	.word	0x2000085c

0800639c <__malloc_lock>:
 800639c:	4801      	ldr	r0, [pc, #4]	@ (80063a4 <__malloc_lock+0x8>)
 800639e:	f7ff b89a 	b.w	80054d6 <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	20000854 	.word	0x20000854

080063a8 <__malloc_unlock>:
 80063a8:	4801      	ldr	r0, [pc, #4]	@ (80063b0 <__malloc_unlock+0x8>)
 80063aa:	f7ff b895 	b.w	80054d8 <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	20000854 	.word	0x20000854

080063b4 <_Balloc>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	69c6      	ldr	r6, [r0, #28]
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	b976      	cbnz	r6, 80063dc <_Balloc+0x28>
 80063be:	2010      	movs	r0, #16
 80063c0:	f7ff ff42 	bl	8006248 <malloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	61e0      	str	r0, [r4, #28]
 80063c8:	b920      	cbnz	r0, 80063d4 <_Balloc+0x20>
 80063ca:	216b      	movs	r1, #107	@ 0x6b
 80063cc:	4b17      	ldr	r3, [pc, #92]	@ (800642c <_Balloc+0x78>)
 80063ce:	4818      	ldr	r0, [pc, #96]	@ (8006430 <_Balloc+0x7c>)
 80063d0:	f001 fd5c 	bl	8007e8c <__assert_func>
 80063d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d8:	6006      	str	r6, [r0, #0]
 80063da:	60c6      	str	r6, [r0, #12]
 80063dc:	69e6      	ldr	r6, [r4, #28]
 80063de:	68f3      	ldr	r3, [r6, #12]
 80063e0:	b183      	cbz	r3, 8006404 <_Balloc+0x50>
 80063e2:	69e3      	ldr	r3, [r4, #28]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ea:	b9b8      	cbnz	r0, 800641c <_Balloc+0x68>
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f605 	lsl.w	r6, r1, r5
 80063f2:	1d72      	adds	r2, r6, #5
 80063f4:	4620      	mov	r0, r4
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	f001 fd66 	bl	8007ec8 <_calloc_r>
 80063fc:	b160      	cbz	r0, 8006418 <_Balloc+0x64>
 80063fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006402:	e00e      	b.n	8006422 <_Balloc+0x6e>
 8006404:	2221      	movs	r2, #33	@ 0x21
 8006406:	2104      	movs	r1, #4
 8006408:	4620      	mov	r0, r4
 800640a:	f001 fd5d 	bl	8007ec8 <_calloc_r>
 800640e:	69e3      	ldr	r3, [r4, #28]
 8006410:	60f0      	str	r0, [r6, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <_Balloc+0x2e>
 8006418:	2000      	movs	r0, #0
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	6802      	ldr	r2, [r0, #0]
 800641e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006422:	2300      	movs	r3, #0
 8006424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006428:	e7f7      	b.n	800641a <_Balloc+0x66>
 800642a:	bf00      	nop
 800642c:	08009650 	.word	0x08009650
 8006430:	080096d0 	.word	0x080096d0

08006434 <_Bfree>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	69c6      	ldr	r6, [r0, #28]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b976      	cbnz	r6, 800645c <_Bfree+0x28>
 800643e:	2010      	movs	r0, #16
 8006440:	f7ff ff02 	bl	8006248 <malloc>
 8006444:	4602      	mov	r2, r0
 8006446:	61e8      	str	r0, [r5, #28]
 8006448:	b920      	cbnz	r0, 8006454 <_Bfree+0x20>
 800644a:	218f      	movs	r1, #143	@ 0x8f
 800644c:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <_Bfree+0x3c>)
 800644e:	4809      	ldr	r0, [pc, #36]	@ (8006474 <_Bfree+0x40>)
 8006450:	f001 fd1c 	bl	8007e8c <__assert_func>
 8006454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006458:	6006      	str	r6, [r0, #0]
 800645a:	60c6      	str	r6, [r0, #12]
 800645c:	b13c      	cbz	r4, 800646e <_Bfree+0x3a>
 800645e:	69eb      	ldr	r3, [r5, #28]
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006468:	6021      	str	r1, [r4, #0]
 800646a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	08009650 	.word	0x08009650
 8006474:	080096d0 	.word	0x080096d0

08006478 <__multadd>:
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647c:	4607      	mov	r7, r0
 800647e:	460c      	mov	r4, r1
 8006480:	461e      	mov	r6, r3
 8006482:	2000      	movs	r0, #0
 8006484:	690d      	ldr	r5, [r1, #16]
 8006486:	f101 0c14 	add.w	ip, r1, #20
 800648a:	f8dc 3000 	ldr.w	r3, [ip]
 800648e:	3001      	adds	r0, #1
 8006490:	b299      	uxth	r1, r3
 8006492:	fb02 6101 	mla	r1, r2, r1, r6
 8006496:	0c1e      	lsrs	r6, r3, #16
 8006498:	0c0b      	lsrs	r3, r1, #16
 800649a:	fb02 3306 	mla	r3, r2, r6, r3
 800649e:	b289      	uxth	r1, r1
 80064a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064a4:	4285      	cmp	r5, r0
 80064a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064aa:	f84c 1b04 	str.w	r1, [ip], #4
 80064ae:	dcec      	bgt.n	800648a <__multadd+0x12>
 80064b0:	b30e      	cbz	r6, 80064f6 <__multadd+0x7e>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dc19      	bgt.n	80064ec <__multadd+0x74>
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4638      	mov	r0, r7
 80064bc:	3101      	adds	r1, #1
 80064be:	f7ff ff79 	bl	80063b4 <_Balloc>
 80064c2:	4680      	mov	r8, r0
 80064c4:	b928      	cbnz	r0, 80064d2 <__multadd+0x5a>
 80064c6:	4602      	mov	r2, r0
 80064c8:	21ba      	movs	r1, #186	@ 0xba
 80064ca:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <__multadd+0x84>)
 80064cc:	480c      	ldr	r0, [pc, #48]	@ (8006500 <__multadd+0x88>)
 80064ce:	f001 fcdd 	bl	8007e8c <__assert_func>
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	f104 010c 	add.w	r1, r4, #12
 80064d8:	3202      	adds	r2, #2
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	300c      	adds	r0, #12
 80064de:	f001 fcc1 	bl	8007e64 <memcpy>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ffa5 	bl	8006434 <_Bfree>
 80064ea:	4644      	mov	r4, r8
 80064ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064f0:	3501      	adds	r5, #1
 80064f2:	615e      	str	r6, [r3, #20]
 80064f4:	6125      	str	r5, [r4, #16]
 80064f6:	4620      	mov	r0, r4
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	080096bf 	.word	0x080096bf
 8006500:	080096d0 	.word	0x080096d0

08006504 <__s2b>:
 8006504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006508:	4615      	mov	r5, r2
 800650a:	2209      	movs	r2, #9
 800650c:	461f      	mov	r7, r3
 800650e:	3308      	adds	r3, #8
 8006510:	460c      	mov	r4, r1
 8006512:	fb93 f3f2 	sdiv	r3, r3, r2
 8006516:	4606      	mov	r6, r0
 8006518:	2201      	movs	r2, #1
 800651a:	2100      	movs	r1, #0
 800651c:	429a      	cmp	r2, r3
 800651e:	db09      	blt.n	8006534 <__s2b+0x30>
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ff47 	bl	80063b4 <_Balloc>
 8006526:	b940      	cbnz	r0, 800653a <__s2b+0x36>
 8006528:	4602      	mov	r2, r0
 800652a:	21d3      	movs	r1, #211	@ 0xd3
 800652c:	4b18      	ldr	r3, [pc, #96]	@ (8006590 <__s2b+0x8c>)
 800652e:	4819      	ldr	r0, [pc, #100]	@ (8006594 <__s2b+0x90>)
 8006530:	f001 fcac 	bl	8007e8c <__assert_func>
 8006534:	0052      	lsls	r2, r2, #1
 8006536:	3101      	adds	r1, #1
 8006538:	e7f0      	b.n	800651c <__s2b+0x18>
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	2d09      	cmp	r5, #9
 800653e:	6143      	str	r3, [r0, #20]
 8006540:	f04f 0301 	mov.w	r3, #1
 8006544:	6103      	str	r3, [r0, #16]
 8006546:	dd16      	ble.n	8006576 <__s2b+0x72>
 8006548:	f104 0909 	add.w	r9, r4, #9
 800654c:	46c8      	mov	r8, r9
 800654e:	442c      	add	r4, r5
 8006550:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006554:	4601      	mov	r1, r0
 8006556:	220a      	movs	r2, #10
 8006558:	4630      	mov	r0, r6
 800655a:	3b30      	subs	r3, #48	@ 0x30
 800655c:	f7ff ff8c 	bl	8006478 <__multadd>
 8006560:	45a0      	cmp	r8, r4
 8006562:	d1f5      	bne.n	8006550 <__s2b+0x4c>
 8006564:	f1a5 0408 	sub.w	r4, r5, #8
 8006568:	444c      	add	r4, r9
 800656a:	1b2d      	subs	r5, r5, r4
 800656c:	1963      	adds	r3, r4, r5
 800656e:	42bb      	cmp	r3, r7
 8006570:	db04      	blt.n	800657c <__s2b+0x78>
 8006572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006576:	2509      	movs	r5, #9
 8006578:	340a      	adds	r4, #10
 800657a:	e7f6      	b.n	800656a <__s2b+0x66>
 800657c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006580:	4601      	mov	r1, r0
 8006582:	220a      	movs	r2, #10
 8006584:	4630      	mov	r0, r6
 8006586:	3b30      	subs	r3, #48	@ 0x30
 8006588:	f7ff ff76 	bl	8006478 <__multadd>
 800658c:	e7ee      	b.n	800656c <__s2b+0x68>
 800658e:	bf00      	nop
 8006590:	080096bf 	.word	0x080096bf
 8006594:	080096d0 	.word	0x080096d0

08006598 <__hi0bits>:
 8006598:	4603      	mov	r3, r0
 800659a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800659e:	bf3a      	itte	cc
 80065a0:	0403      	lslcc	r3, r0, #16
 80065a2:	2010      	movcc	r0, #16
 80065a4:	2000      	movcs	r0, #0
 80065a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065aa:	bf3c      	itt	cc
 80065ac:	021b      	lslcc	r3, r3, #8
 80065ae:	3008      	addcc	r0, #8
 80065b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b4:	bf3c      	itt	cc
 80065b6:	011b      	lslcc	r3, r3, #4
 80065b8:	3004      	addcc	r0, #4
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065be:	bf3c      	itt	cc
 80065c0:	009b      	lslcc	r3, r3, #2
 80065c2:	3002      	addcc	r0, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	db05      	blt.n	80065d4 <__hi0bits+0x3c>
 80065c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065cc:	f100 0001 	add.w	r0, r0, #1
 80065d0:	bf08      	it	eq
 80065d2:	2020      	moveq	r0, #32
 80065d4:	4770      	bx	lr

080065d6 <__lo0bits>:
 80065d6:	6803      	ldr	r3, [r0, #0]
 80065d8:	4602      	mov	r2, r0
 80065da:	f013 0007 	ands.w	r0, r3, #7
 80065de:	d00b      	beq.n	80065f8 <__lo0bits+0x22>
 80065e0:	07d9      	lsls	r1, r3, #31
 80065e2:	d421      	bmi.n	8006628 <__lo0bits+0x52>
 80065e4:	0798      	lsls	r0, r3, #30
 80065e6:	bf49      	itett	mi
 80065e8:	085b      	lsrmi	r3, r3, #1
 80065ea:	089b      	lsrpl	r3, r3, #2
 80065ec:	2001      	movmi	r0, #1
 80065ee:	6013      	strmi	r3, [r2, #0]
 80065f0:	bf5c      	itt	pl
 80065f2:	2002      	movpl	r0, #2
 80065f4:	6013      	strpl	r3, [r2, #0]
 80065f6:	4770      	bx	lr
 80065f8:	b299      	uxth	r1, r3
 80065fa:	b909      	cbnz	r1, 8006600 <__lo0bits+0x2a>
 80065fc:	2010      	movs	r0, #16
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	b2d9      	uxtb	r1, r3
 8006602:	b909      	cbnz	r1, 8006608 <__lo0bits+0x32>
 8006604:	3008      	adds	r0, #8
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	0719      	lsls	r1, r3, #28
 800660a:	bf04      	itt	eq
 800660c:	091b      	lsreq	r3, r3, #4
 800660e:	3004      	addeq	r0, #4
 8006610:	0799      	lsls	r1, r3, #30
 8006612:	bf04      	itt	eq
 8006614:	089b      	lsreq	r3, r3, #2
 8006616:	3002      	addeq	r0, #2
 8006618:	07d9      	lsls	r1, r3, #31
 800661a:	d403      	bmi.n	8006624 <__lo0bits+0x4e>
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	f100 0001 	add.w	r0, r0, #1
 8006622:	d003      	beq.n	800662c <__lo0bits+0x56>
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	4770      	bx	lr
 8006628:	2000      	movs	r0, #0
 800662a:	4770      	bx	lr
 800662c:	2020      	movs	r0, #32
 800662e:	4770      	bx	lr

08006630 <__i2b>:
 8006630:	b510      	push	{r4, lr}
 8006632:	460c      	mov	r4, r1
 8006634:	2101      	movs	r1, #1
 8006636:	f7ff febd 	bl	80063b4 <_Balloc>
 800663a:	4602      	mov	r2, r0
 800663c:	b928      	cbnz	r0, 800664a <__i2b+0x1a>
 800663e:	f240 1145 	movw	r1, #325	@ 0x145
 8006642:	4b04      	ldr	r3, [pc, #16]	@ (8006654 <__i2b+0x24>)
 8006644:	4804      	ldr	r0, [pc, #16]	@ (8006658 <__i2b+0x28>)
 8006646:	f001 fc21 	bl	8007e8c <__assert_func>
 800664a:	2301      	movs	r3, #1
 800664c:	6144      	str	r4, [r0, #20]
 800664e:	6103      	str	r3, [r0, #16]
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	080096bf 	.word	0x080096bf
 8006658:	080096d0 	.word	0x080096d0

0800665c <__multiply>:
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	4617      	mov	r7, r2
 8006662:	690a      	ldr	r2, [r1, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4689      	mov	r9, r1
 8006668:	429a      	cmp	r2, r3
 800666a:	bfa2      	ittt	ge
 800666c:	463b      	movge	r3, r7
 800666e:	460f      	movge	r7, r1
 8006670:	4699      	movge	r9, r3
 8006672:	693d      	ldr	r5, [r7, #16]
 8006674:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	eb05 060a 	add.w	r6, r5, sl
 8006680:	42b3      	cmp	r3, r6
 8006682:	b085      	sub	sp, #20
 8006684:	bfb8      	it	lt
 8006686:	3101      	addlt	r1, #1
 8006688:	f7ff fe94 	bl	80063b4 <_Balloc>
 800668c:	b930      	cbnz	r0, 800669c <__multiply+0x40>
 800668e:	4602      	mov	r2, r0
 8006690:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006694:	4b40      	ldr	r3, [pc, #256]	@ (8006798 <__multiply+0x13c>)
 8006696:	4841      	ldr	r0, [pc, #260]	@ (800679c <__multiply+0x140>)
 8006698:	f001 fbf8 	bl	8007e8c <__assert_func>
 800669c:	f100 0414 	add.w	r4, r0, #20
 80066a0:	4623      	mov	r3, r4
 80066a2:	2200      	movs	r2, #0
 80066a4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80066a8:	4573      	cmp	r3, lr
 80066aa:	d320      	bcc.n	80066ee <__multiply+0x92>
 80066ac:	f107 0814 	add.w	r8, r7, #20
 80066b0:	f109 0114 	add.w	r1, r9, #20
 80066b4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80066b8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80066bc:	9302      	str	r3, [sp, #8]
 80066be:	1beb      	subs	r3, r5, r7
 80066c0:	3b15      	subs	r3, #21
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	3304      	adds	r3, #4
 80066c8:	3715      	adds	r7, #21
 80066ca:	42bd      	cmp	r5, r7
 80066cc:	bf38      	it	cc
 80066ce:	2304      	movcc	r3, #4
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	9b02      	ldr	r3, [sp, #8]
 80066d4:	9103      	str	r1, [sp, #12]
 80066d6:	428b      	cmp	r3, r1
 80066d8:	d80c      	bhi.n	80066f4 <__multiply+0x98>
 80066da:	2e00      	cmp	r6, #0
 80066dc:	dd03      	ble.n	80066e6 <__multiply+0x8a>
 80066de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d055      	beq.n	8006792 <__multiply+0x136>
 80066e6:	6106      	str	r6, [r0, #16]
 80066e8:	b005      	add	sp, #20
 80066ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ee:	f843 2b04 	str.w	r2, [r3], #4
 80066f2:	e7d9      	b.n	80066a8 <__multiply+0x4c>
 80066f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80066f8:	f1ba 0f00 	cmp.w	sl, #0
 80066fc:	d01f      	beq.n	800673e <__multiply+0xe2>
 80066fe:	46c4      	mov	ip, r8
 8006700:	46a1      	mov	r9, r4
 8006702:	2700      	movs	r7, #0
 8006704:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006708:	f8d9 3000 	ldr.w	r3, [r9]
 800670c:	fa1f fb82 	uxth.w	fp, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	fb0a 330b 	mla	r3, sl, fp, r3
 8006716:	443b      	add	r3, r7
 8006718:	f8d9 7000 	ldr.w	r7, [r9]
 800671c:	0c12      	lsrs	r2, r2, #16
 800671e:	0c3f      	lsrs	r7, r7, #16
 8006720:	fb0a 7202 	mla	r2, sl, r2, r7
 8006724:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006728:	b29b      	uxth	r3, r3
 800672a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672e:	4565      	cmp	r5, ip
 8006730:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006734:	f849 3b04 	str.w	r3, [r9], #4
 8006738:	d8e4      	bhi.n	8006704 <__multiply+0xa8>
 800673a:	9b01      	ldr	r3, [sp, #4]
 800673c:	50e7      	str	r7, [r4, r3]
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	3104      	adds	r1, #4
 8006742:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006746:	f1b9 0f00 	cmp.w	r9, #0
 800674a:	d020      	beq.n	800678e <__multiply+0x132>
 800674c:	4647      	mov	r7, r8
 800674e:	46a4      	mov	ip, r4
 8006750:	f04f 0a00 	mov.w	sl, #0
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	f8b7 b000 	ldrh.w	fp, [r7]
 800675a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800675e:	b29b      	uxth	r3, r3
 8006760:	fb09 220b 	mla	r2, r9, fp, r2
 8006764:	4452      	add	r2, sl
 8006766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800676a:	f84c 3b04 	str.w	r3, [ip], #4
 800676e:	f857 3b04 	ldr.w	r3, [r7], #4
 8006772:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006776:	f8bc 3000 	ldrh.w	r3, [ip]
 800677a:	42bd      	cmp	r5, r7
 800677c:	fb09 330a 	mla	r3, r9, sl, r3
 8006780:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006788:	d8e5      	bhi.n	8006756 <__multiply+0xfa>
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	50a3      	str	r3, [r4, r2]
 800678e:	3404      	adds	r4, #4
 8006790:	e79f      	b.n	80066d2 <__multiply+0x76>
 8006792:	3e01      	subs	r6, #1
 8006794:	e7a1      	b.n	80066da <__multiply+0x7e>
 8006796:	bf00      	nop
 8006798:	080096bf 	.word	0x080096bf
 800679c:	080096d0 	.word	0x080096d0

080067a0 <__pow5mult>:
 80067a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	4615      	mov	r5, r2
 80067a6:	f012 0203 	ands.w	r2, r2, #3
 80067aa:	4607      	mov	r7, r0
 80067ac:	460e      	mov	r6, r1
 80067ae:	d007      	beq.n	80067c0 <__pow5mult+0x20>
 80067b0:	4c25      	ldr	r4, [pc, #148]	@ (8006848 <__pow5mult+0xa8>)
 80067b2:	3a01      	subs	r2, #1
 80067b4:	2300      	movs	r3, #0
 80067b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ba:	f7ff fe5d 	bl	8006478 <__multadd>
 80067be:	4606      	mov	r6, r0
 80067c0:	10ad      	asrs	r5, r5, #2
 80067c2:	d03d      	beq.n	8006840 <__pow5mult+0xa0>
 80067c4:	69fc      	ldr	r4, [r7, #28]
 80067c6:	b97c      	cbnz	r4, 80067e8 <__pow5mult+0x48>
 80067c8:	2010      	movs	r0, #16
 80067ca:	f7ff fd3d 	bl	8006248 <malloc>
 80067ce:	4602      	mov	r2, r0
 80067d0:	61f8      	str	r0, [r7, #28]
 80067d2:	b928      	cbnz	r0, 80067e0 <__pow5mult+0x40>
 80067d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067d8:	4b1c      	ldr	r3, [pc, #112]	@ (800684c <__pow5mult+0xac>)
 80067da:	481d      	ldr	r0, [pc, #116]	@ (8006850 <__pow5mult+0xb0>)
 80067dc:	f001 fb56 	bl	8007e8c <__assert_func>
 80067e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067e4:	6004      	str	r4, [r0, #0]
 80067e6:	60c4      	str	r4, [r0, #12]
 80067e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067f0:	b94c      	cbnz	r4, 8006806 <__pow5mult+0x66>
 80067f2:	f240 2171 	movw	r1, #625	@ 0x271
 80067f6:	4638      	mov	r0, r7
 80067f8:	f7ff ff1a 	bl	8006630 <__i2b>
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	f8c8 0008 	str.w	r0, [r8, #8]
 8006804:	6003      	str	r3, [r0, #0]
 8006806:	f04f 0900 	mov.w	r9, #0
 800680a:	07eb      	lsls	r3, r5, #31
 800680c:	d50a      	bpl.n	8006824 <__pow5mult+0x84>
 800680e:	4631      	mov	r1, r6
 8006810:	4622      	mov	r2, r4
 8006812:	4638      	mov	r0, r7
 8006814:	f7ff ff22 	bl	800665c <__multiply>
 8006818:	4680      	mov	r8, r0
 800681a:	4631      	mov	r1, r6
 800681c:	4638      	mov	r0, r7
 800681e:	f7ff fe09 	bl	8006434 <_Bfree>
 8006822:	4646      	mov	r6, r8
 8006824:	106d      	asrs	r5, r5, #1
 8006826:	d00b      	beq.n	8006840 <__pow5mult+0xa0>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	b938      	cbnz	r0, 800683c <__pow5mult+0x9c>
 800682c:	4622      	mov	r2, r4
 800682e:	4621      	mov	r1, r4
 8006830:	4638      	mov	r0, r7
 8006832:	f7ff ff13 	bl	800665c <__multiply>
 8006836:	6020      	str	r0, [r4, #0]
 8006838:	f8c0 9000 	str.w	r9, [r0]
 800683c:	4604      	mov	r4, r0
 800683e:	e7e4      	b.n	800680a <__pow5mult+0x6a>
 8006840:	4630      	mov	r0, r6
 8006842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006846:	bf00      	nop
 8006848:	080097e0 	.word	0x080097e0
 800684c:	08009650 	.word	0x08009650
 8006850:	080096d0 	.word	0x080096d0

08006854 <__lshift>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	460c      	mov	r4, r1
 800685a:	4607      	mov	r7, r0
 800685c:	4691      	mov	r9, r2
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	6849      	ldr	r1, [r1, #4]
 8006862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006866:	68a3      	ldr	r3, [r4, #8]
 8006868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800686c:	f108 0601 	add.w	r6, r8, #1
 8006870:	42b3      	cmp	r3, r6
 8006872:	db0b      	blt.n	800688c <__lshift+0x38>
 8006874:	4638      	mov	r0, r7
 8006876:	f7ff fd9d 	bl	80063b4 <_Balloc>
 800687a:	4605      	mov	r5, r0
 800687c:	b948      	cbnz	r0, 8006892 <__lshift+0x3e>
 800687e:	4602      	mov	r2, r0
 8006880:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006884:	4b27      	ldr	r3, [pc, #156]	@ (8006924 <__lshift+0xd0>)
 8006886:	4828      	ldr	r0, [pc, #160]	@ (8006928 <__lshift+0xd4>)
 8006888:	f001 fb00 	bl	8007e8c <__assert_func>
 800688c:	3101      	adds	r1, #1
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	e7ee      	b.n	8006870 <__lshift+0x1c>
 8006892:	2300      	movs	r3, #0
 8006894:	f100 0114 	add.w	r1, r0, #20
 8006898:	f100 0210 	add.w	r2, r0, #16
 800689c:	4618      	mov	r0, r3
 800689e:	4553      	cmp	r3, sl
 80068a0:	db33      	blt.n	800690a <__lshift+0xb6>
 80068a2:	6920      	ldr	r0, [r4, #16]
 80068a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068a8:	f104 0314 	add.w	r3, r4, #20
 80068ac:	f019 091f 	ands.w	r9, r9, #31
 80068b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068b8:	d02b      	beq.n	8006912 <__lshift+0xbe>
 80068ba:	468a      	mov	sl, r1
 80068bc:	2200      	movs	r2, #0
 80068be:	f1c9 0e20 	rsb	lr, r9, #32
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	fa00 f009 	lsl.w	r0, r0, r9
 80068c8:	4310      	orrs	r0, r2
 80068ca:	f84a 0b04 	str.w	r0, [sl], #4
 80068ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d2:	459c      	cmp	ip, r3
 80068d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068d8:	d8f3      	bhi.n	80068c2 <__lshift+0x6e>
 80068da:	ebac 0304 	sub.w	r3, ip, r4
 80068de:	3b15      	subs	r3, #21
 80068e0:	f023 0303 	bic.w	r3, r3, #3
 80068e4:	3304      	adds	r3, #4
 80068e6:	f104 0015 	add.w	r0, r4, #21
 80068ea:	4560      	cmp	r0, ip
 80068ec:	bf88      	it	hi
 80068ee:	2304      	movhi	r3, #4
 80068f0:	50ca      	str	r2, [r1, r3]
 80068f2:	b10a      	cbz	r2, 80068f8 <__lshift+0xa4>
 80068f4:	f108 0602 	add.w	r6, r8, #2
 80068f8:	3e01      	subs	r6, #1
 80068fa:	4638      	mov	r0, r7
 80068fc:	4621      	mov	r1, r4
 80068fe:	612e      	str	r6, [r5, #16]
 8006900:	f7ff fd98 	bl	8006434 <_Bfree>
 8006904:	4628      	mov	r0, r5
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	f842 0f04 	str.w	r0, [r2, #4]!
 800690e:	3301      	adds	r3, #1
 8006910:	e7c5      	b.n	800689e <__lshift+0x4a>
 8006912:	3904      	subs	r1, #4
 8006914:	f853 2b04 	ldr.w	r2, [r3], #4
 8006918:	459c      	cmp	ip, r3
 800691a:	f841 2f04 	str.w	r2, [r1, #4]!
 800691e:	d8f9      	bhi.n	8006914 <__lshift+0xc0>
 8006920:	e7ea      	b.n	80068f8 <__lshift+0xa4>
 8006922:	bf00      	nop
 8006924:	080096bf 	.word	0x080096bf
 8006928:	080096d0 	.word	0x080096d0

0800692c <__mcmp>:
 800692c:	4603      	mov	r3, r0
 800692e:	690a      	ldr	r2, [r1, #16]
 8006930:	6900      	ldr	r0, [r0, #16]
 8006932:	b530      	push	{r4, r5, lr}
 8006934:	1a80      	subs	r0, r0, r2
 8006936:	d10e      	bne.n	8006956 <__mcmp+0x2a>
 8006938:	3314      	adds	r3, #20
 800693a:	3114      	adds	r1, #20
 800693c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006940:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006944:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800694c:	4295      	cmp	r5, r2
 800694e:	d003      	beq.n	8006958 <__mcmp+0x2c>
 8006950:	d205      	bcs.n	800695e <__mcmp+0x32>
 8006952:	f04f 30ff 	mov.w	r0, #4294967295
 8006956:	bd30      	pop	{r4, r5, pc}
 8006958:	42a3      	cmp	r3, r4
 800695a:	d3f3      	bcc.n	8006944 <__mcmp+0x18>
 800695c:	e7fb      	b.n	8006956 <__mcmp+0x2a>
 800695e:	2001      	movs	r0, #1
 8006960:	e7f9      	b.n	8006956 <__mcmp+0x2a>
	...

08006964 <__mdiff>:
 8006964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	4689      	mov	r9, r1
 800696a:	4606      	mov	r6, r0
 800696c:	4611      	mov	r1, r2
 800696e:	4648      	mov	r0, r9
 8006970:	4614      	mov	r4, r2
 8006972:	f7ff ffdb 	bl	800692c <__mcmp>
 8006976:	1e05      	subs	r5, r0, #0
 8006978:	d112      	bne.n	80069a0 <__mdiff+0x3c>
 800697a:	4629      	mov	r1, r5
 800697c:	4630      	mov	r0, r6
 800697e:	f7ff fd19 	bl	80063b4 <_Balloc>
 8006982:	4602      	mov	r2, r0
 8006984:	b928      	cbnz	r0, 8006992 <__mdiff+0x2e>
 8006986:	f240 2137 	movw	r1, #567	@ 0x237
 800698a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a84 <__mdiff+0x120>)
 800698c:	483e      	ldr	r0, [pc, #248]	@ (8006a88 <__mdiff+0x124>)
 800698e:	f001 fa7d 	bl	8007e8c <__assert_func>
 8006992:	2301      	movs	r3, #1
 8006994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006998:	4610      	mov	r0, r2
 800699a:	b003      	add	sp, #12
 800699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a0:	bfbc      	itt	lt
 80069a2:	464b      	movlt	r3, r9
 80069a4:	46a1      	movlt	r9, r4
 80069a6:	4630      	mov	r0, r6
 80069a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069ac:	bfba      	itte	lt
 80069ae:	461c      	movlt	r4, r3
 80069b0:	2501      	movlt	r5, #1
 80069b2:	2500      	movge	r5, #0
 80069b4:	f7ff fcfe 	bl	80063b4 <_Balloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	b918      	cbnz	r0, 80069c4 <__mdiff+0x60>
 80069bc:	f240 2145 	movw	r1, #581	@ 0x245
 80069c0:	4b30      	ldr	r3, [pc, #192]	@ (8006a84 <__mdiff+0x120>)
 80069c2:	e7e3      	b.n	800698c <__mdiff+0x28>
 80069c4:	f100 0b14 	add.w	fp, r0, #20
 80069c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069cc:	f109 0310 	add.w	r3, r9, #16
 80069d0:	60c5      	str	r5, [r0, #12]
 80069d2:	f04f 0c00 	mov.w	ip, #0
 80069d6:	f109 0514 	add.w	r5, r9, #20
 80069da:	46d9      	mov	r9, fp
 80069dc:	6926      	ldr	r6, [r4, #16]
 80069de:	f104 0e14 	add.w	lr, r4, #20
 80069e2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069e6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	9b01      	ldr	r3, [sp, #4]
 80069ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069f6:	b281      	uxth	r1, r0
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	fa1f f38a 	uxth.w	r3, sl
 80069fe:	1a5b      	subs	r3, r3, r1
 8006a00:	0c00      	lsrs	r0, r0, #16
 8006a02:	4463      	add	r3, ip
 8006a04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a08:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a12:	4576      	cmp	r6, lr
 8006a14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a18:	f849 3b04 	str.w	r3, [r9], #4
 8006a1c:	d8e6      	bhi.n	80069ec <__mdiff+0x88>
 8006a1e:	1b33      	subs	r3, r6, r4
 8006a20:	3b15      	subs	r3, #21
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	3415      	adds	r4, #21
 8006a28:	3304      	adds	r3, #4
 8006a2a:	42a6      	cmp	r6, r4
 8006a2c:	bf38      	it	cc
 8006a2e:	2304      	movcc	r3, #4
 8006a30:	441d      	add	r5, r3
 8006a32:	445b      	add	r3, fp
 8006a34:	461e      	mov	r6, r3
 8006a36:	462c      	mov	r4, r5
 8006a38:	4544      	cmp	r4, r8
 8006a3a:	d30e      	bcc.n	8006a5a <__mdiff+0xf6>
 8006a3c:	f108 0103 	add.w	r1, r8, #3
 8006a40:	1b49      	subs	r1, r1, r5
 8006a42:	f021 0103 	bic.w	r1, r1, #3
 8006a46:	3d03      	subs	r5, #3
 8006a48:	45a8      	cmp	r8, r5
 8006a4a:	bf38      	it	cc
 8006a4c:	2100      	movcc	r1, #0
 8006a4e:	440b      	add	r3, r1
 8006a50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a54:	b199      	cbz	r1, 8006a7e <__mdiff+0x11a>
 8006a56:	6117      	str	r7, [r2, #16]
 8006a58:	e79e      	b.n	8006998 <__mdiff+0x34>
 8006a5a:	46e6      	mov	lr, ip
 8006a5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a60:	fa1f fc81 	uxth.w	ip, r1
 8006a64:	44f4      	add	ip, lr
 8006a66:	0c08      	lsrs	r0, r1, #16
 8006a68:	4471      	add	r1, lr
 8006a6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a78:	f846 1b04 	str.w	r1, [r6], #4
 8006a7c:	e7dc      	b.n	8006a38 <__mdiff+0xd4>
 8006a7e:	3f01      	subs	r7, #1
 8006a80:	e7e6      	b.n	8006a50 <__mdiff+0xec>
 8006a82:	bf00      	nop
 8006a84:	080096bf 	.word	0x080096bf
 8006a88:	080096d0 	.word	0x080096d0

08006a8c <__ulp>:
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <__ulp+0x3c>)
 8006a8e:	400b      	ands	r3, r1
 8006a90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dc08      	bgt.n	8006aaa <__ulp+0x1e>
 8006a98:	425b      	negs	r3, r3
 8006a9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006a9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006aa2:	da04      	bge.n	8006aae <__ulp+0x22>
 8006aa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006aa8:	4113      	asrs	r3, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	e008      	b.n	8006ac0 <__ulp+0x34>
 8006aae:	f1a2 0314 	sub.w	r3, r2, #20
 8006ab2:	2b1e      	cmp	r3, #30
 8006ab4:	bfd6      	itet	le
 8006ab6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006aba:	2201      	movgt	r2, #1
 8006abc:	40da      	lsrle	r2, r3
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	7ff00000 	.word	0x7ff00000

08006acc <__b2d>:
 8006acc:	6902      	ldr	r2, [r0, #16]
 8006ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad0:	f100 0614 	add.w	r6, r0, #20
 8006ad4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006ad8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006adc:	4f1e      	ldr	r7, [pc, #120]	@ (8006b58 <__b2d+0x8c>)
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fd5a 	bl	8006598 <__hi0bits>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f1c0 0020 	rsb	r0, r0, #32
 8006aea:	2b0a      	cmp	r3, #10
 8006aec:	f1a2 0504 	sub.w	r5, r2, #4
 8006af0:	6008      	str	r0, [r1, #0]
 8006af2:	dc12      	bgt.n	8006b1a <__b2d+0x4e>
 8006af4:	42ae      	cmp	r6, r5
 8006af6:	bf2c      	ite	cs
 8006af8:	2200      	movcs	r2, #0
 8006afa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006afe:	f1c3 0c0b 	rsb	ip, r3, #11
 8006b02:	3315      	adds	r3, #21
 8006b04:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006b08:	fa04 f303 	lsl.w	r3, r4, r3
 8006b0c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b10:	ea4e 0107 	orr.w	r1, lr, r7
 8006b14:	431a      	orrs	r2, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1a:	42ae      	cmp	r6, r5
 8006b1c:	bf36      	itet	cc
 8006b1e:	f1a2 0508 	subcc.w	r5, r2, #8
 8006b22:	2200      	movcs	r2, #0
 8006b24:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b28:	3b0b      	subs	r3, #11
 8006b2a:	d012      	beq.n	8006b52 <__b2d+0x86>
 8006b2c:	f1c3 0720 	rsb	r7, r3, #32
 8006b30:	fa22 f107 	lsr.w	r1, r2, r7
 8006b34:	409c      	lsls	r4, r3
 8006b36:	430c      	orrs	r4, r1
 8006b38:	42b5      	cmp	r5, r6
 8006b3a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006b3e:	bf94      	ite	ls
 8006b40:	2400      	movls	r4, #0
 8006b42:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006b46:	409a      	lsls	r2, r3
 8006b48:	40fc      	lsrs	r4, r7
 8006b4a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006b4e:	4322      	orrs	r2, r4
 8006b50:	e7e1      	b.n	8006b16 <__b2d+0x4a>
 8006b52:	ea44 0107 	orr.w	r1, r4, r7
 8006b56:	e7de      	b.n	8006b16 <__b2d+0x4a>
 8006b58:	3ff00000 	.word	0x3ff00000

08006b5c <__d2b>:
 8006b5c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b60:	2101      	movs	r1, #1
 8006b62:	4690      	mov	r8, r2
 8006b64:	4699      	mov	r9, r3
 8006b66:	9e08      	ldr	r6, [sp, #32]
 8006b68:	f7ff fc24 	bl	80063b4 <_Balloc>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	b930      	cbnz	r0, 8006b7e <__d2b+0x22>
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b76:	4b23      	ldr	r3, [pc, #140]	@ (8006c04 <__d2b+0xa8>)
 8006b78:	4823      	ldr	r0, [pc, #140]	@ (8006c08 <__d2b+0xac>)
 8006b7a:	f001 f987 	bl	8007e8c <__assert_func>
 8006b7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b86:	b10d      	cbz	r5, 8006b8c <__d2b+0x30>
 8006b88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f1b8 0300 	subs.w	r3, r8, #0
 8006b92:	d024      	beq.n	8006bde <__d2b+0x82>
 8006b94:	4668      	mov	r0, sp
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	f7ff fd1d 	bl	80065d6 <__lo0bits>
 8006b9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ba0:	b1d8      	cbz	r0, 8006bda <__d2b+0x7e>
 8006ba2:	f1c0 0320 	rsb	r3, r0, #32
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	430b      	orrs	r3, r1
 8006bac:	40c2      	lsrs	r2, r0
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	9201      	str	r2, [sp, #4]
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2201      	moveq	r2, #1
 8006bba:	2202      	movne	r2, #2
 8006bbc:	61a3      	str	r3, [r4, #24]
 8006bbe:	6122      	str	r2, [r4, #16]
 8006bc0:	b1ad      	cbz	r5, 8006bee <__d2b+0x92>
 8006bc2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006bc6:	4405      	add	r5, r0
 8006bc8:	6035      	str	r5, [r6, #0]
 8006bca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd0:	6018      	str	r0, [r3, #0]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	b002      	add	sp, #8
 8006bd6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006bda:	6161      	str	r1, [r4, #20]
 8006bdc:	e7e9      	b.n	8006bb2 <__d2b+0x56>
 8006bde:	a801      	add	r0, sp, #4
 8006be0:	f7ff fcf9 	bl	80065d6 <__lo0bits>
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	6163      	str	r3, [r4, #20]
 8006bea:	3020      	adds	r0, #32
 8006bec:	e7e7      	b.n	8006bbe <__d2b+0x62>
 8006bee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006bf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bf6:	6030      	str	r0, [r6, #0]
 8006bf8:	6918      	ldr	r0, [r3, #16]
 8006bfa:	f7ff fccd 	bl	8006598 <__hi0bits>
 8006bfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c02:	e7e4      	b.n	8006bce <__d2b+0x72>
 8006c04:	080096bf 	.word	0x080096bf
 8006c08:	080096d0 	.word	0x080096d0

08006c0c <__ratio>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	b085      	sub	sp, #20
 8006c12:	e9cd 1000 	strd	r1, r0, [sp]
 8006c16:	a902      	add	r1, sp, #8
 8006c18:	f7ff ff58 	bl	8006acc <__b2d>
 8006c1c:	468b      	mov	fp, r1
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	9800      	ldr	r0, [sp, #0]
 8006c24:	a903      	add	r1, sp, #12
 8006c26:	f7ff ff51 	bl	8006acc <__b2d>
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	4689      	mov	r9, r1
 8006c30:	6919      	ldr	r1, [r3, #16]
 8006c32:	9b00      	ldr	r3, [sp, #0]
 8006c34:	4604      	mov	r4, r0
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4630      	mov	r0, r6
 8006c3a:	1ac9      	subs	r1, r1, r3
 8006c3c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bfcd      	iteet	gt
 8006c4a:	463a      	movgt	r2, r7
 8006c4c:	462a      	movle	r2, r5
 8006c4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c52:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006c56:	bfd8      	it	le
 8006c58:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	4622      	mov	r2, r4
 8006c60:	4659      	mov	r1, fp
 8006c62:	f7f9 fd63 	bl	800072c <__aeabi_ddiv>
 8006c66:	b005      	add	sp, #20
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c6c <__copybits>:
 8006c6c:	3901      	subs	r1, #1
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	1149      	asrs	r1, r1, #5
 8006c72:	6914      	ldr	r4, [r2, #16]
 8006c74:	3101      	adds	r1, #1
 8006c76:	f102 0314 	add.w	r3, r2, #20
 8006c7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c82:	1f05      	subs	r5, r0, #4
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	d30c      	bcc.n	8006ca2 <__copybits+0x36>
 8006c88:	1aa3      	subs	r3, r4, r2
 8006c8a:	3b11      	subs	r3, #17
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	3211      	adds	r2, #17
 8006c92:	42a2      	cmp	r2, r4
 8006c94:	bf88      	it	hi
 8006c96:	2300      	movhi	r3, #0
 8006c98:	4418      	add	r0, r3
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4288      	cmp	r0, r1
 8006c9e:	d305      	bcc.n	8006cac <__copybits+0x40>
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ca6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006caa:	e7eb      	b.n	8006c84 <__copybits+0x18>
 8006cac:	f840 3b04 	str.w	r3, [r0], #4
 8006cb0:	e7f4      	b.n	8006c9c <__copybits+0x30>

08006cb2 <__any_on>:
 8006cb2:	f100 0214 	add.w	r2, r0, #20
 8006cb6:	6900      	ldr	r0, [r0, #16]
 8006cb8:	114b      	asrs	r3, r1, #5
 8006cba:	4298      	cmp	r0, r3
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	db11      	blt.n	8006ce4 <__any_on+0x32>
 8006cc0:	dd0a      	ble.n	8006cd8 <__any_on+0x26>
 8006cc2:	f011 011f 	ands.w	r1, r1, #31
 8006cc6:	d007      	beq.n	8006cd8 <__any_on+0x26>
 8006cc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ccc:	fa24 f001 	lsr.w	r0, r4, r1
 8006cd0:	fa00 f101 	lsl.w	r1, r0, r1
 8006cd4:	428c      	cmp	r4, r1
 8006cd6:	d10b      	bne.n	8006cf0 <__any_on+0x3e>
 8006cd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d803      	bhi.n	8006ce8 <__any_on+0x36>
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	e7f7      	b.n	8006cd8 <__any_on+0x26>
 8006ce8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d0f5      	beq.n	8006cdc <__any_on+0x2a>
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	e7f6      	b.n	8006ce2 <__any_on+0x30>

08006cf4 <sulp>:
 8006cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	4690      	mov	r8, r2
 8006cfc:	f7ff fec6 	bl	8006a8c <__ulp>
 8006d00:	4604      	mov	r4, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	f1b8 0f00 	cmp.w	r8, #0
 8006d08:	d011      	beq.n	8006d2e <sulp+0x3a>
 8006d0a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dd0b      	ble.n	8006d2e <sulp+0x3a>
 8006d16:	2400      	movs	r4, #0
 8006d18:	051b      	lsls	r3, r3, #20
 8006d1a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d22:	4622      	mov	r2, r4
 8006d24:	462b      	mov	r3, r5
 8006d26:	f7f9 fbd7 	bl	80004d8 <__aeabi_dmul>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d38 <_strtod_l>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b09f      	sub	sp, #124	@ 0x7c
 8006d3e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d40:	2200      	movs	r2, #0
 8006d42:	460c      	mov	r4, r1
 8006d44:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d46:	f04f 0a00 	mov.w	sl, #0
 8006d4a:	f04f 0b00 	mov.w	fp, #0
 8006d4e:	460a      	mov	r2, r1
 8006d50:	9005      	str	r0, [sp, #20]
 8006d52:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d54:	7811      	ldrb	r1, [r2, #0]
 8006d56:	292b      	cmp	r1, #43	@ 0x2b
 8006d58:	d048      	beq.n	8006dec <_strtod_l+0xb4>
 8006d5a:	d836      	bhi.n	8006dca <_strtod_l+0x92>
 8006d5c:	290d      	cmp	r1, #13
 8006d5e:	d830      	bhi.n	8006dc2 <_strtod_l+0x8a>
 8006d60:	2908      	cmp	r1, #8
 8006d62:	d830      	bhi.n	8006dc6 <_strtod_l+0x8e>
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d039      	beq.n	8006ddc <_strtod_l+0xa4>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d6e:	782a      	ldrb	r2, [r5, #0]
 8006d70:	2a30      	cmp	r2, #48	@ 0x30
 8006d72:	f040 80b0 	bne.w	8006ed6 <_strtod_l+0x19e>
 8006d76:	786a      	ldrb	r2, [r5, #1]
 8006d78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d7c:	2a58      	cmp	r2, #88	@ 0x58
 8006d7e:	d16c      	bne.n	8006e5a <_strtod_l+0x122>
 8006d80:	9302      	str	r3, [sp, #8]
 8006d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d84:	4a8f      	ldr	r2, [pc, #572]	@ (8006fc4 <_strtod_l+0x28c>)
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	9805      	ldr	r0, [sp, #20]
 8006d8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d90:	a919      	add	r1, sp, #100	@ 0x64
 8006d92:	f001 f915 	bl	8007fc0 <__gethex>
 8006d96:	f010 060f 	ands.w	r6, r0, #15
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	d005      	beq.n	8006daa <_strtod_l+0x72>
 8006d9e:	2e06      	cmp	r6, #6
 8006da0:	d126      	bne.n	8006df0 <_strtod_l+0xb8>
 8006da2:	2300      	movs	r3, #0
 8006da4:	3501      	adds	r5, #1
 8006da6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006da8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006daa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8582 	bne.w	80078b6 <_strtod_l+0xb7e>
 8006db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006db4:	b1bb      	cbz	r3, 8006de6 <_strtod_l+0xae>
 8006db6:	4650      	mov	r0, sl
 8006db8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006dbc:	b01f      	add	sp, #124	@ 0x7c
 8006dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc2:	2920      	cmp	r1, #32
 8006dc4:	d1d0      	bne.n	8006d68 <_strtod_l+0x30>
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	e7c3      	b.n	8006d52 <_strtod_l+0x1a>
 8006dca:	292d      	cmp	r1, #45	@ 0x2d
 8006dcc:	d1cc      	bne.n	8006d68 <_strtod_l+0x30>
 8006dce:	2101      	movs	r1, #1
 8006dd0:	910e      	str	r1, [sp, #56]	@ 0x38
 8006dd2:	1c51      	adds	r1, r2, #1
 8006dd4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006dd6:	7852      	ldrb	r2, [r2, #1]
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	d1c7      	bne.n	8006d6c <_strtod_l+0x34>
 8006ddc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dde:	9419      	str	r4, [sp, #100]	@ 0x64
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 8566 	bne.w	80078b2 <_strtod_l+0xb7a>
 8006de6:	4650      	mov	r0, sl
 8006de8:	4659      	mov	r1, fp
 8006dea:	e7e7      	b.n	8006dbc <_strtod_l+0x84>
 8006dec:	2100      	movs	r1, #0
 8006dee:	e7ef      	b.n	8006dd0 <_strtod_l+0x98>
 8006df0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006df2:	b13a      	cbz	r2, 8006e04 <_strtod_l+0xcc>
 8006df4:	2135      	movs	r1, #53	@ 0x35
 8006df6:	a81c      	add	r0, sp, #112	@ 0x70
 8006df8:	f7ff ff38 	bl	8006c6c <__copybits>
 8006dfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dfe:	9805      	ldr	r0, [sp, #20]
 8006e00:	f7ff fb18 	bl	8006434 <_Bfree>
 8006e04:	3e01      	subs	r6, #1
 8006e06:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e08:	2e04      	cmp	r6, #4
 8006e0a:	d806      	bhi.n	8006e1a <_strtod_l+0xe2>
 8006e0c:	e8df f006 	tbb	[pc, r6]
 8006e10:	201d0314 	.word	0x201d0314
 8006e14:	14          	.byte	0x14
 8006e15:	00          	.byte	0x00
 8006e16:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e1a:	05e1      	lsls	r1, r4, #23
 8006e1c:	bf48      	it	mi
 8006e1e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e22:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e26:	0d1b      	lsrs	r3, r3, #20
 8006e28:	051b      	lsls	r3, r3, #20
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1bd      	bne.n	8006daa <_strtod_l+0x72>
 8006e2e:	f7fe fb27 	bl	8005480 <__errno>
 8006e32:	2322      	movs	r3, #34	@ 0x22
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	e7b8      	b.n	8006daa <_strtod_l+0x72>
 8006e38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e44:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e48:	e7e7      	b.n	8006e1a <_strtod_l+0xe2>
 8006e4a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006fc8 <_strtod_l+0x290>
 8006e4e:	e7e4      	b.n	8006e1a <_strtod_l+0xe2>
 8006e50:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e54:	f04f 3aff 	mov.w	sl, #4294967295
 8006e58:	e7df      	b.n	8006e1a <_strtod_l+0xe2>
 8006e5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e60:	785b      	ldrb	r3, [r3, #1]
 8006e62:	2b30      	cmp	r3, #48	@ 0x30
 8006e64:	d0f9      	beq.n	8006e5a <_strtod_l+0x122>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d09f      	beq.n	8006daa <_strtod_l+0x72>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	2700      	movs	r7, #0
 8006e6e:	220a      	movs	r2, #10
 8006e70:	46b9      	mov	r9, r7
 8006e72:	9308      	str	r3, [sp, #32]
 8006e74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e76:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e78:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e7a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e7c:	7805      	ldrb	r5, [r0, #0]
 8006e7e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e82:	b2d9      	uxtb	r1, r3
 8006e84:	2909      	cmp	r1, #9
 8006e86:	d928      	bls.n	8006eda <_strtod_l+0x1a2>
 8006e88:	2201      	movs	r2, #1
 8006e8a:	4950      	ldr	r1, [pc, #320]	@ (8006fcc <_strtod_l+0x294>)
 8006e8c:	f000 ffc8 	bl	8007e20 <strncmp>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d032      	beq.n	8006efa <_strtod_l+0x1c2>
 8006e94:	2000      	movs	r0, #0
 8006e96:	462a      	mov	r2, r5
 8006e98:	4603      	mov	r3, r0
 8006e9a:	464d      	mov	r5, r9
 8006e9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e9e:	2a65      	cmp	r2, #101	@ 0x65
 8006ea0:	d001      	beq.n	8006ea6 <_strtod_l+0x16e>
 8006ea2:	2a45      	cmp	r2, #69	@ 0x45
 8006ea4:	d114      	bne.n	8006ed0 <_strtod_l+0x198>
 8006ea6:	b91d      	cbnz	r5, 8006eb0 <_strtod_l+0x178>
 8006ea8:	9a08      	ldr	r2, [sp, #32]
 8006eaa:	4302      	orrs	r2, r0
 8006eac:	d096      	beq.n	8006ddc <_strtod_l+0xa4>
 8006eae:	2500      	movs	r5, #0
 8006eb0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006eb2:	1c62      	adds	r2, r4, #1
 8006eb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eb6:	7862      	ldrb	r2, [r4, #1]
 8006eb8:	2a2b      	cmp	r2, #43	@ 0x2b
 8006eba:	d07a      	beq.n	8006fb2 <_strtod_l+0x27a>
 8006ebc:	2a2d      	cmp	r2, #45	@ 0x2d
 8006ebe:	d07e      	beq.n	8006fbe <_strtod_l+0x286>
 8006ec0:	f04f 0c00 	mov.w	ip, #0
 8006ec4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006ec8:	2909      	cmp	r1, #9
 8006eca:	f240 8085 	bls.w	8006fd8 <_strtod_l+0x2a0>
 8006ece:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ed0:	f04f 0800 	mov.w	r8, #0
 8006ed4:	e0a5      	b.n	8007022 <_strtod_l+0x2ea>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e7c8      	b.n	8006e6c <_strtod_l+0x134>
 8006eda:	f1b9 0f08 	cmp.w	r9, #8
 8006ede:	bfd8      	it	le
 8006ee0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006ee2:	f100 0001 	add.w	r0, r0, #1
 8006ee6:	bfd6      	itet	le
 8006ee8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eec:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ef0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006ef2:	f109 0901 	add.w	r9, r9, #1
 8006ef6:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ef8:	e7bf      	b.n	8006e7a <_strtod_l+0x142>
 8006efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f00:	785a      	ldrb	r2, [r3, #1]
 8006f02:	f1b9 0f00 	cmp.w	r9, #0
 8006f06:	d03b      	beq.n	8006f80 <_strtod_l+0x248>
 8006f08:	464d      	mov	r5, r9
 8006f0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f0c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	d912      	bls.n	8006f3a <_strtod_l+0x202>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e7c2      	b.n	8006e9e <_strtod_l+0x166>
 8006f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f20:	785a      	ldrb	r2, [r3, #1]
 8006f22:	2a30      	cmp	r2, #48	@ 0x30
 8006f24:	d0f8      	beq.n	8006f18 <_strtod_l+0x1e0>
 8006f26:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	f200 84c8 	bhi.w	80078c0 <_strtod_l+0xb88>
 8006f30:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f32:	2000      	movs	r0, #0
 8006f34:	4605      	mov	r5, r0
 8006f36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f38:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f3a:	3a30      	subs	r2, #48	@ 0x30
 8006f3c:	f100 0301 	add.w	r3, r0, #1
 8006f40:	d018      	beq.n	8006f74 <_strtod_l+0x23c>
 8006f42:	462e      	mov	r6, r5
 8006f44:	f04f 0e0a 	mov.w	lr, #10
 8006f48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f4a:	4419      	add	r1, r3
 8006f4c:	910a      	str	r1, [sp, #40]	@ 0x28
 8006f4e:	1c71      	adds	r1, r6, #1
 8006f50:	eba1 0c05 	sub.w	ip, r1, r5
 8006f54:	4563      	cmp	r3, ip
 8006f56:	dc15      	bgt.n	8006f84 <_strtod_l+0x24c>
 8006f58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006f5c:	182b      	adds	r3, r5, r0
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	f105 0501 	add.w	r5, r5, #1
 8006f64:	4405      	add	r5, r0
 8006f66:	dc1a      	bgt.n	8006f9e <_strtod_l+0x266>
 8006f68:	230a      	movs	r3, #10
 8006f6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f6c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f72:	2300      	movs	r3, #0
 8006f74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f76:	4618      	mov	r0, r3
 8006f78:	1c51      	adds	r1, r2, #1
 8006f7a:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f7c:	7852      	ldrb	r2, [r2, #1]
 8006f7e:	e7c5      	b.n	8006f0c <_strtod_l+0x1d4>
 8006f80:	4648      	mov	r0, r9
 8006f82:	e7ce      	b.n	8006f22 <_strtod_l+0x1ea>
 8006f84:	2e08      	cmp	r6, #8
 8006f86:	dc05      	bgt.n	8006f94 <_strtod_l+0x25c>
 8006f88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f8a:	fb0e f606 	mul.w	r6, lr, r6
 8006f8e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006f90:	460e      	mov	r6, r1
 8006f92:	e7dc      	b.n	8006f4e <_strtod_l+0x216>
 8006f94:	2910      	cmp	r1, #16
 8006f96:	bfd8      	it	le
 8006f98:	fb0e f707 	mulle.w	r7, lr, r7
 8006f9c:	e7f8      	b.n	8006f90 <_strtod_l+0x258>
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	bfdc      	itt	le
 8006fa2:	230a      	movle	r3, #10
 8006fa4:	fb03 2707 	mlale	r7, r3, r7, r2
 8006fa8:	e7e3      	b.n	8006f72 <_strtod_l+0x23a>
 8006faa:	2300      	movs	r3, #0
 8006fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e77a      	b.n	8006ea8 <_strtod_l+0x170>
 8006fb2:	f04f 0c00 	mov.w	ip, #0
 8006fb6:	1ca2      	adds	r2, r4, #2
 8006fb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fba:	78a2      	ldrb	r2, [r4, #2]
 8006fbc:	e782      	b.n	8006ec4 <_strtod_l+0x18c>
 8006fbe:	f04f 0c01 	mov.w	ip, #1
 8006fc2:	e7f8      	b.n	8006fb6 <_strtod_l+0x27e>
 8006fc4:	080098f4 	.word	0x080098f4
 8006fc8:	7ff00000 	.word	0x7ff00000
 8006fcc:	08009729 	.word	0x08009729
 8006fd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fd2:	1c51      	adds	r1, r2, #1
 8006fd4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fd6:	7852      	ldrb	r2, [r2, #1]
 8006fd8:	2a30      	cmp	r2, #48	@ 0x30
 8006fda:	d0f9      	beq.n	8006fd0 <_strtod_l+0x298>
 8006fdc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fe0:	2908      	cmp	r1, #8
 8006fe2:	f63f af75 	bhi.w	8006ed0 <_strtod_l+0x198>
 8006fe6:	f04f 080a 	mov.w	r8, #10
 8006fea:	3a30      	subs	r2, #48	@ 0x30
 8006fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ff0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006ff2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ff4:	1c56      	adds	r6, r2, #1
 8006ff6:	9619      	str	r6, [sp, #100]	@ 0x64
 8006ff8:	7852      	ldrb	r2, [r2, #1]
 8006ffa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006ffe:	f1be 0f09 	cmp.w	lr, #9
 8007002:	d939      	bls.n	8007078 <_strtod_l+0x340>
 8007004:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007006:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800700a:	1a76      	subs	r6, r6, r1
 800700c:	2e08      	cmp	r6, #8
 800700e:	dc03      	bgt.n	8007018 <_strtod_l+0x2e0>
 8007010:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007012:	4588      	cmp	r8, r1
 8007014:	bfa8      	it	ge
 8007016:	4688      	movge	r8, r1
 8007018:	f1bc 0f00 	cmp.w	ip, #0
 800701c:	d001      	beq.n	8007022 <_strtod_l+0x2ea>
 800701e:	f1c8 0800 	rsb	r8, r8, #0
 8007022:	2d00      	cmp	r5, #0
 8007024:	d14e      	bne.n	80070c4 <_strtod_l+0x38c>
 8007026:	9908      	ldr	r1, [sp, #32]
 8007028:	4308      	orrs	r0, r1
 800702a:	f47f aebe 	bne.w	8006daa <_strtod_l+0x72>
 800702e:	2b00      	cmp	r3, #0
 8007030:	f47f aed4 	bne.w	8006ddc <_strtod_l+0xa4>
 8007034:	2a69      	cmp	r2, #105	@ 0x69
 8007036:	d028      	beq.n	800708a <_strtod_l+0x352>
 8007038:	dc25      	bgt.n	8007086 <_strtod_l+0x34e>
 800703a:	2a49      	cmp	r2, #73	@ 0x49
 800703c:	d025      	beq.n	800708a <_strtod_l+0x352>
 800703e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007040:	f47f aecc 	bne.w	8006ddc <_strtod_l+0xa4>
 8007044:	4999      	ldr	r1, [pc, #612]	@ (80072ac <_strtod_l+0x574>)
 8007046:	a819      	add	r0, sp, #100	@ 0x64
 8007048:	f001 f9dc 	bl	8008404 <__match>
 800704c:	2800      	cmp	r0, #0
 800704e:	f43f aec5 	beq.w	8006ddc <_strtod_l+0xa4>
 8007052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b28      	cmp	r3, #40	@ 0x28
 8007058:	d12e      	bne.n	80070b8 <_strtod_l+0x380>
 800705a:	4995      	ldr	r1, [pc, #596]	@ (80072b0 <_strtod_l+0x578>)
 800705c:	aa1c      	add	r2, sp, #112	@ 0x70
 800705e:	a819      	add	r0, sp, #100	@ 0x64
 8007060:	f001 f9e4 	bl	800842c <__hexnan>
 8007064:	2805      	cmp	r0, #5
 8007066:	d127      	bne.n	80070b8 <_strtod_l+0x380>
 8007068:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800706a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800706e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007072:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007076:	e698      	b.n	8006daa <_strtod_l+0x72>
 8007078:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800707a:	fb08 2101 	mla	r1, r8, r1, r2
 800707e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007082:	9209      	str	r2, [sp, #36]	@ 0x24
 8007084:	e7b5      	b.n	8006ff2 <_strtod_l+0x2ba>
 8007086:	2a6e      	cmp	r2, #110	@ 0x6e
 8007088:	e7da      	b.n	8007040 <_strtod_l+0x308>
 800708a:	498a      	ldr	r1, [pc, #552]	@ (80072b4 <_strtod_l+0x57c>)
 800708c:	a819      	add	r0, sp, #100	@ 0x64
 800708e:	f001 f9b9 	bl	8008404 <__match>
 8007092:	2800      	cmp	r0, #0
 8007094:	f43f aea2 	beq.w	8006ddc <_strtod_l+0xa4>
 8007098:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800709a:	4987      	ldr	r1, [pc, #540]	@ (80072b8 <_strtod_l+0x580>)
 800709c:	3b01      	subs	r3, #1
 800709e:	a819      	add	r0, sp, #100	@ 0x64
 80070a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80070a2:	f001 f9af 	bl	8008404 <__match>
 80070a6:	b910      	cbnz	r0, 80070ae <_strtod_l+0x376>
 80070a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070aa:	3301      	adds	r3, #1
 80070ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80070ae:	f04f 0a00 	mov.w	sl, #0
 80070b2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80072bc <_strtod_l+0x584>
 80070b6:	e678      	b.n	8006daa <_strtod_l+0x72>
 80070b8:	4881      	ldr	r0, [pc, #516]	@ (80072c0 <_strtod_l+0x588>)
 80070ba:	f000 fee1 	bl	8007e80 <nan>
 80070be:	4682      	mov	sl, r0
 80070c0:	468b      	mov	fp, r1
 80070c2:	e672      	b.n	8006daa <_strtod_l+0x72>
 80070c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c6:	f1b9 0f00 	cmp.w	r9, #0
 80070ca:	bf08      	it	eq
 80070cc:	46a9      	moveq	r9, r5
 80070ce:	eba8 0303 	sub.w	r3, r8, r3
 80070d2:	2d10      	cmp	r5, #16
 80070d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80070d6:	462c      	mov	r4, r5
 80070d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070da:	bfa8      	it	ge
 80070dc:	2410      	movge	r4, #16
 80070de:	f7f9 f981 	bl	80003e4 <__aeabi_ui2d>
 80070e2:	2d09      	cmp	r5, #9
 80070e4:	4682      	mov	sl, r0
 80070e6:	468b      	mov	fp, r1
 80070e8:	dc11      	bgt.n	800710e <_strtod_l+0x3d6>
 80070ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f43f ae5c 	beq.w	8006daa <_strtod_l+0x72>
 80070f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f4:	dd76      	ble.n	80071e4 <_strtod_l+0x4ac>
 80070f6:	2b16      	cmp	r3, #22
 80070f8:	dc5d      	bgt.n	80071b6 <_strtod_l+0x47e>
 80070fa:	4972      	ldr	r1, [pc, #456]	@ (80072c4 <_strtod_l+0x58c>)
 80070fc:	4652      	mov	r2, sl
 80070fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007102:	465b      	mov	r3, fp
 8007104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007108:	f7f9 f9e6 	bl	80004d8 <__aeabi_dmul>
 800710c:	e7d7      	b.n	80070be <_strtod_l+0x386>
 800710e:	4b6d      	ldr	r3, [pc, #436]	@ (80072c4 <_strtod_l+0x58c>)
 8007110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007114:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007118:	f7f9 f9de 	bl	80004d8 <__aeabi_dmul>
 800711c:	4682      	mov	sl, r0
 800711e:	4638      	mov	r0, r7
 8007120:	468b      	mov	fp, r1
 8007122:	f7f9 f95f 	bl	80003e4 <__aeabi_ui2d>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4650      	mov	r0, sl
 800712c:	4659      	mov	r1, fp
 800712e:	f7f9 f81d 	bl	800016c <__adddf3>
 8007132:	2d0f      	cmp	r5, #15
 8007134:	4682      	mov	sl, r0
 8007136:	468b      	mov	fp, r1
 8007138:	ddd7      	ble.n	80070ea <_strtod_l+0x3b2>
 800713a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713c:	1b2c      	subs	r4, r5, r4
 800713e:	441c      	add	r4, r3
 8007140:	2c00      	cmp	r4, #0
 8007142:	f340 8093 	ble.w	800726c <_strtod_l+0x534>
 8007146:	f014 030f 	ands.w	r3, r4, #15
 800714a:	d00a      	beq.n	8007162 <_strtod_l+0x42a>
 800714c:	495d      	ldr	r1, [pc, #372]	@ (80072c4 <_strtod_l+0x58c>)
 800714e:	4652      	mov	r2, sl
 8007150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007158:	465b      	mov	r3, fp
 800715a:	f7f9 f9bd 	bl	80004d8 <__aeabi_dmul>
 800715e:	4682      	mov	sl, r0
 8007160:	468b      	mov	fp, r1
 8007162:	f034 040f 	bics.w	r4, r4, #15
 8007166:	d073      	beq.n	8007250 <_strtod_l+0x518>
 8007168:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800716c:	dd49      	ble.n	8007202 <_strtod_l+0x4ca>
 800716e:	2400      	movs	r4, #0
 8007170:	46a0      	mov	r8, r4
 8007172:	46a1      	mov	r9, r4
 8007174:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007176:	2322      	movs	r3, #34	@ 0x22
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	9a05      	ldr	r2, [sp, #20]
 800717e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80072bc <_strtod_l+0x584>
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	f43f ae0f 	beq.w	8006daa <_strtod_l+0x72>
 800718c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800718e:	9805      	ldr	r0, [sp, #20]
 8007190:	f7ff f950 	bl	8006434 <_Bfree>
 8007194:	4649      	mov	r1, r9
 8007196:	9805      	ldr	r0, [sp, #20]
 8007198:	f7ff f94c 	bl	8006434 <_Bfree>
 800719c:	4641      	mov	r1, r8
 800719e:	9805      	ldr	r0, [sp, #20]
 80071a0:	f7ff f948 	bl	8006434 <_Bfree>
 80071a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071a6:	9805      	ldr	r0, [sp, #20]
 80071a8:	f7ff f944 	bl	8006434 <_Bfree>
 80071ac:	4621      	mov	r1, r4
 80071ae:	9805      	ldr	r0, [sp, #20]
 80071b0:	f7ff f940 	bl	8006434 <_Bfree>
 80071b4:	e5f9      	b.n	8006daa <_strtod_l+0x72>
 80071b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80071bc:	4293      	cmp	r3, r2
 80071be:	dbbc      	blt.n	800713a <_strtod_l+0x402>
 80071c0:	4c40      	ldr	r4, [pc, #256]	@ (80072c4 <_strtod_l+0x58c>)
 80071c2:	f1c5 050f 	rsb	r5, r5, #15
 80071c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80071ca:	4652      	mov	r2, sl
 80071cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d0:	465b      	mov	r3, fp
 80071d2:	f7f9 f981 	bl	80004d8 <__aeabi_dmul>
 80071d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d8:	1b5d      	subs	r5, r3, r5
 80071da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071e2:	e791      	b.n	8007108 <_strtod_l+0x3d0>
 80071e4:	3316      	adds	r3, #22
 80071e6:	dba8      	blt.n	800713a <_strtod_l+0x402>
 80071e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ea:	4650      	mov	r0, sl
 80071ec:	eba3 0808 	sub.w	r8, r3, r8
 80071f0:	4b34      	ldr	r3, [pc, #208]	@ (80072c4 <_strtod_l+0x58c>)
 80071f2:	4659      	mov	r1, fp
 80071f4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071fc:	f7f9 fa96 	bl	800072c <__aeabi_ddiv>
 8007200:	e75d      	b.n	80070be <_strtod_l+0x386>
 8007202:	2300      	movs	r3, #0
 8007204:	4650      	mov	r0, sl
 8007206:	4659      	mov	r1, fp
 8007208:	461e      	mov	r6, r3
 800720a:	4f2f      	ldr	r7, [pc, #188]	@ (80072c8 <_strtod_l+0x590>)
 800720c:	1124      	asrs	r4, r4, #4
 800720e:	2c01      	cmp	r4, #1
 8007210:	dc21      	bgt.n	8007256 <_strtod_l+0x51e>
 8007212:	b10b      	cbz	r3, 8007218 <_strtod_l+0x4e0>
 8007214:	4682      	mov	sl, r0
 8007216:	468b      	mov	fp, r1
 8007218:	492b      	ldr	r1, [pc, #172]	@ (80072c8 <_strtod_l+0x590>)
 800721a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800721e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007222:	4652      	mov	r2, sl
 8007224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007228:	465b      	mov	r3, fp
 800722a:	f7f9 f955 	bl	80004d8 <__aeabi_dmul>
 800722e:	4b23      	ldr	r3, [pc, #140]	@ (80072bc <_strtod_l+0x584>)
 8007230:	460a      	mov	r2, r1
 8007232:	400b      	ands	r3, r1
 8007234:	4925      	ldr	r1, [pc, #148]	@ (80072cc <_strtod_l+0x594>)
 8007236:	4682      	mov	sl, r0
 8007238:	428b      	cmp	r3, r1
 800723a:	d898      	bhi.n	800716e <_strtod_l+0x436>
 800723c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007240:	428b      	cmp	r3, r1
 8007242:	bf86      	itte	hi
 8007244:	f04f 3aff 	movhi.w	sl, #4294967295
 8007248:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80072d0 <_strtod_l+0x598>
 800724c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007250:	2300      	movs	r3, #0
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	e076      	b.n	8007344 <_strtod_l+0x60c>
 8007256:	07e2      	lsls	r2, r4, #31
 8007258:	d504      	bpl.n	8007264 <_strtod_l+0x52c>
 800725a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725e:	f7f9 f93b 	bl	80004d8 <__aeabi_dmul>
 8007262:	2301      	movs	r3, #1
 8007264:	3601      	adds	r6, #1
 8007266:	1064      	asrs	r4, r4, #1
 8007268:	3708      	adds	r7, #8
 800726a:	e7d0      	b.n	800720e <_strtod_l+0x4d6>
 800726c:	d0f0      	beq.n	8007250 <_strtod_l+0x518>
 800726e:	4264      	negs	r4, r4
 8007270:	f014 020f 	ands.w	r2, r4, #15
 8007274:	d00a      	beq.n	800728c <_strtod_l+0x554>
 8007276:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <_strtod_l+0x58c>)
 8007278:	4650      	mov	r0, sl
 800727a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800727e:	4659      	mov	r1, fp
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f9 fa52 	bl	800072c <__aeabi_ddiv>
 8007288:	4682      	mov	sl, r0
 800728a:	468b      	mov	fp, r1
 800728c:	1124      	asrs	r4, r4, #4
 800728e:	d0df      	beq.n	8007250 <_strtod_l+0x518>
 8007290:	2c1f      	cmp	r4, #31
 8007292:	dd1f      	ble.n	80072d4 <_strtod_l+0x59c>
 8007294:	2400      	movs	r4, #0
 8007296:	46a0      	mov	r8, r4
 8007298:	46a1      	mov	r9, r4
 800729a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800729c:	2322      	movs	r3, #34	@ 0x22
 800729e:	9a05      	ldr	r2, [sp, #20]
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	f04f 0b00 	mov.w	fp, #0
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e76b      	b.n	8007184 <_strtod_l+0x44c>
 80072ac:	08009617 	.word	0x08009617
 80072b0:	080098e0 	.word	0x080098e0
 80072b4:	0800960f 	.word	0x0800960f
 80072b8:	08009646 	.word	0x08009646
 80072bc:	7ff00000 	.word	0x7ff00000
 80072c0:	0800977f 	.word	0x0800977f
 80072c4:	08009818 	.word	0x08009818
 80072c8:	080097f0 	.word	0x080097f0
 80072cc:	7ca00000 	.word	0x7ca00000
 80072d0:	7fefffff 	.word	0x7fefffff
 80072d4:	f014 0310 	ands.w	r3, r4, #16
 80072d8:	bf18      	it	ne
 80072da:	236a      	movne	r3, #106	@ 0x6a
 80072dc:	4650      	mov	r0, sl
 80072de:	9308      	str	r3, [sp, #32]
 80072e0:	4659      	mov	r1, fp
 80072e2:	2300      	movs	r3, #0
 80072e4:	4e77      	ldr	r6, [pc, #476]	@ (80074c4 <_strtod_l+0x78c>)
 80072e6:	07e7      	lsls	r7, r4, #31
 80072e8:	d504      	bpl.n	80072f4 <_strtod_l+0x5bc>
 80072ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072ee:	f7f9 f8f3 	bl	80004d8 <__aeabi_dmul>
 80072f2:	2301      	movs	r3, #1
 80072f4:	1064      	asrs	r4, r4, #1
 80072f6:	f106 0608 	add.w	r6, r6, #8
 80072fa:	d1f4      	bne.n	80072e6 <_strtod_l+0x5ae>
 80072fc:	b10b      	cbz	r3, 8007302 <_strtod_l+0x5ca>
 80072fe:	4682      	mov	sl, r0
 8007300:	468b      	mov	fp, r1
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	b1b3      	cbz	r3, 8007334 <_strtod_l+0x5fc>
 8007306:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800730a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800730e:	2b00      	cmp	r3, #0
 8007310:	4659      	mov	r1, fp
 8007312:	dd0f      	ble.n	8007334 <_strtod_l+0x5fc>
 8007314:	2b1f      	cmp	r3, #31
 8007316:	dd58      	ble.n	80073ca <_strtod_l+0x692>
 8007318:	2b34      	cmp	r3, #52	@ 0x34
 800731a:	bfd8      	it	le
 800731c:	f04f 33ff 	movle.w	r3, #4294967295
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	bfcf      	iteee	gt
 8007326:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800732a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800732e:	4093      	lslle	r3, r2
 8007330:	ea03 0b01 	andle.w	fp, r3, r1
 8007334:	2200      	movs	r2, #0
 8007336:	2300      	movs	r3, #0
 8007338:	4650      	mov	r0, sl
 800733a:	4659      	mov	r1, fp
 800733c:	f7f9 fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8007340:	2800      	cmp	r0, #0
 8007342:	d1a7      	bne.n	8007294 <_strtod_l+0x55c>
 8007344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007346:	464a      	mov	r2, r9
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800734c:	462b      	mov	r3, r5
 800734e:	9805      	ldr	r0, [sp, #20]
 8007350:	f7ff f8d8 	bl	8006504 <__s2b>
 8007354:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007356:	2800      	cmp	r0, #0
 8007358:	f43f af09 	beq.w	800716e <_strtod_l+0x436>
 800735c:	2400      	movs	r4, #0
 800735e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007362:	2a00      	cmp	r2, #0
 8007364:	eba3 0308 	sub.w	r3, r3, r8
 8007368:	bfa8      	it	ge
 800736a:	2300      	movge	r3, #0
 800736c:	46a0      	mov	r8, r4
 800736e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007370:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007374:	9316      	str	r3, [sp, #88]	@ 0x58
 8007376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007378:	9805      	ldr	r0, [sp, #20]
 800737a:	6859      	ldr	r1, [r3, #4]
 800737c:	f7ff f81a 	bl	80063b4 <_Balloc>
 8007380:	4681      	mov	r9, r0
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f aef7 	beq.w	8007176 <_strtod_l+0x43e>
 8007388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800738a:	300c      	adds	r0, #12
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	f103 010c 	add.w	r1, r3, #12
 8007392:	3202      	adds	r2, #2
 8007394:	0092      	lsls	r2, r2, #2
 8007396:	f000 fd65 	bl	8007e64 <memcpy>
 800739a:	ab1c      	add	r3, sp, #112	@ 0x70
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	4652      	mov	r2, sl
 80073a4:	465b      	mov	r3, fp
 80073a6:	9805      	ldr	r0, [sp, #20]
 80073a8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80073ac:	f7ff fbd6 	bl	8006b5c <__d2b>
 80073b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f43f aedf 	beq.w	8007176 <_strtod_l+0x43e>
 80073b8:	2101      	movs	r1, #1
 80073ba:	9805      	ldr	r0, [sp, #20]
 80073bc:	f7ff f938 	bl	8006630 <__i2b>
 80073c0:	4680      	mov	r8, r0
 80073c2:	b948      	cbnz	r0, 80073d8 <_strtod_l+0x6a0>
 80073c4:	f04f 0800 	mov.w	r8, #0
 80073c8:	e6d5      	b.n	8007176 <_strtod_l+0x43e>
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	ea03 0a0a 	and.w	sl, r3, sl
 80073d6:	e7ad      	b.n	8007334 <_strtod_l+0x5fc>
 80073d8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073da:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073dc:	2d00      	cmp	r5, #0
 80073de:	bfab      	itete	ge
 80073e0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073e2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073e4:	18ef      	addge	r7, r5, r3
 80073e6:	1b5e      	sublt	r6, r3, r5
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	bfa8      	it	ge
 80073ec:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073ee:	eba5 0503 	sub.w	r5, r5, r3
 80073f2:	4415      	add	r5, r2
 80073f4:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <_strtod_l+0x790>)
 80073f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80073fa:	bfb8      	it	lt
 80073fc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073fe:	429d      	cmp	r5, r3
 8007400:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007404:	da50      	bge.n	80074a8 <_strtod_l+0x770>
 8007406:	1b5b      	subs	r3, r3, r5
 8007408:	2b1f      	cmp	r3, #31
 800740a:	f04f 0101 	mov.w	r1, #1
 800740e:	eba2 0203 	sub.w	r2, r2, r3
 8007412:	dc3d      	bgt.n	8007490 <_strtod_l+0x758>
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	9313      	str	r3, [sp, #76]	@ 0x4c
 800741a:	2300      	movs	r3, #0
 800741c:	9310      	str	r3, [sp, #64]	@ 0x40
 800741e:	18bd      	adds	r5, r7, r2
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	42af      	cmp	r7, r5
 8007424:	4416      	add	r6, r2
 8007426:	441e      	add	r6, r3
 8007428:	463b      	mov	r3, r7
 800742a:	bfa8      	it	ge
 800742c:	462b      	movge	r3, r5
 800742e:	42b3      	cmp	r3, r6
 8007430:	bfa8      	it	ge
 8007432:	4633      	movge	r3, r6
 8007434:	2b00      	cmp	r3, #0
 8007436:	bfc2      	ittt	gt
 8007438:	1aed      	subgt	r5, r5, r3
 800743a:	1af6      	subgt	r6, r6, r3
 800743c:	1aff      	subgt	r7, r7, r3
 800743e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007440:	2b00      	cmp	r3, #0
 8007442:	dd16      	ble.n	8007472 <_strtod_l+0x73a>
 8007444:	4641      	mov	r1, r8
 8007446:	461a      	mov	r2, r3
 8007448:	9805      	ldr	r0, [sp, #20]
 800744a:	f7ff f9a9 	bl	80067a0 <__pow5mult>
 800744e:	4680      	mov	r8, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d0b7      	beq.n	80073c4 <_strtod_l+0x68c>
 8007454:	4601      	mov	r1, r0
 8007456:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007458:	9805      	ldr	r0, [sp, #20]
 800745a:	f7ff f8ff 	bl	800665c <__multiply>
 800745e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007460:	2800      	cmp	r0, #0
 8007462:	f43f ae88 	beq.w	8007176 <_strtod_l+0x43e>
 8007466:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007468:	9805      	ldr	r0, [sp, #20]
 800746a:	f7fe ffe3 	bl	8006434 <_Bfree>
 800746e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007470:	931a      	str	r3, [sp, #104]	@ 0x68
 8007472:	2d00      	cmp	r5, #0
 8007474:	dc1d      	bgt.n	80074b2 <_strtod_l+0x77a>
 8007476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	dd27      	ble.n	80074cc <_strtod_l+0x794>
 800747c:	4649      	mov	r1, r9
 800747e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	f7ff f98d 	bl	80067a0 <__pow5mult>
 8007486:	4681      	mov	r9, r0
 8007488:	bb00      	cbnz	r0, 80074cc <_strtod_l+0x794>
 800748a:	f04f 0900 	mov.w	r9, #0
 800748e:	e672      	b.n	8007176 <_strtod_l+0x43e>
 8007490:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007494:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007498:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800749c:	35e2      	adds	r5, #226	@ 0xe2
 800749e:	fa01 f305 	lsl.w	r3, r1, r5
 80074a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80074a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80074a6:	e7ba      	b.n	800741e <_strtod_l+0x6e6>
 80074a8:	2300      	movs	r3, #0
 80074aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80074ac:	2301      	movs	r3, #1
 80074ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074b0:	e7b5      	b.n	800741e <_strtod_l+0x6e6>
 80074b2:	462a      	mov	r2, r5
 80074b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074b6:	9805      	ldr	r0, [sp, #20]
 80074b8:	f7ff f9cc 	bl	8006854 <__lshift>
 80074bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80074be:	2800      	cmp	r0, #0
 80074c0:	d1d9      	bne.n	8007476 <_strtod_l+0x73e>
 80074c2:	e658      	b.n	8007176 <_strtod_l+0x43e>
 80074c4:	08009908 	.word	0x08009908
 80074c8:	fffffc02 	.word	0xfffffc02
 80074cc:	2e00      	cmp	r6, #0
 80074ce:	dd07      	ble.n	80074e0 <_strtod_l+0x7a8>
 80074d0:	4649      	mov	r1, r9
 80074d2:	4632      	mov	r2, r6
 80074d4:	9805      	ldr	r0, [sp, #20]
 80074d6:	f7ff f9bd 	bl	8006854 <__lshift>
 80074da:	4681      	mov	r9, r0
 80074dc:	2800      	cmp	r0, #0
 80074de:	d0d4      	beq.n	800748a <_strtod_l+0x752>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	dd08      	ble.n	80074f6 <_strtod_l+0x7be>
 80074e4:	4641      	mov	r1, r8
 80074e6:	463a      	mov	r2, r7
 80074e8:	9805      	ldr	r0, [sp, #20]
 80074ea:	f7ff f9b3 	bl	8006854 <__lshift>
 80074ee:	4680      	mov	r8, r0
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f43f ae40 	beq.w	8007176 <_strtod_l+0x43e>
 80074f6:	464a      	mov	r2, r9
 80074f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074fa:	9805      	ldr	r0, [sp, #20]
 80074fc:	f7ff fa32 	bl	8006964 <__mdiff>
 8007500:	4604      	mov	r4, r0
 8007502:	2800      	cmp	r0, #0
 8007504:	f43f ae37 	beq.w	8007176 <_strtod_l+0x43e>
 8007508:	68c3      	ldr	r3, [r0, #12]
 800750a:	4641      	mov	r1, r8
 800750c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800750e:	2300      	movs	r3, #0
 8007510:	60c3      	str	r3, [r0, #12]
 8007512:	f7ff fa0b 	bl	800692c <__mcmp>
 8007516:	2800      	cmp	r0, #0
 8007518:	da3d      	bge.n	8007596 <_strtod_l+0x85e>
 800751a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800751c:	ea53 030a 	orrs.w	r3, r3, sl
 8007520:	d163      	bne.n	80075ea <_strtod_l+0x8b2>
 8007522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007526:	2b00      	cmp	r3, #0
 8007528:	d15f      	bne.n	80075ea <_strtod_l+0x8b2>
 800752a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800752e:	0d1b      	lsrs	r3, r3, #20
 8007530:	051b      	lsls	r3, r3, #20
 8007532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007536:	d958      	bls.n	80075ea <_strtod_l+0x8b2>
 8007538:	6963      	ldr	r3, [r4, #20]
 800753a:	b913      	cbnz	r3, 8007542 <_strtod_l+0x80a>
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	2b01      	cmp	r3, #1
 8007540:	dd53      	ble.n	80075ea <_strtod_l+0x8b2>
 8007542:	4621      	mov	r1, r4
 8007544:	2201      	movs	r2, #1
 8007546:	9805      	ldr	r0, [sp, #20]
 8007548:	f7ff f984 	bl	8006854 <__lshift>
 800754c:	4641      	mov	r1, r8
 800754e:	4604      	mov	r4, r0
 8007550:	f7ff f9ec 	bl	800692c <__mcmp>
 8007554:	2800      	cmp	r0, #0
 8007556:	dd48      	ble.n	80075ea <_strtod_l+0x8b2>
 8007558:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800755c:	9a08      	ldr	r2, [sp, #32]
 800755e:	0d1b      	lsrs	r3, r3, #20
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	2a00      	cmp	r2, #0
 8007564:	d062      	beq.n	800762c <_strtod_l+0x8f4>
 8007566:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800756a:	d85f      	bhi.n	800762c <_strtod_l+0x8f4>
 800756c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007570:	f67f ae94 	bls.w	800729c <_strtod_l+0x564>
 8007574:	4650      	mov	r0, sl
 8007576:	4659      	mov	r1, fp
 8007578:	4ba3      	ldr	r3, [pc, #652]	@ (8007808 <_strtod_l+0xad0>)
 800757a:	2200      	movs	r2, #0
 800757c:	f7f8 ffac 	bl	80004d8 <__aeabi_dmul>
 8007580:	4ba2      	ldr	r3, [pc, #648]	@ (800780c <_strtod_l+0xad4>)
 8007582:	4682      	mov	sl, r0
 8007584:	400b      	ands	r3, r1
 8007586:	468b      	mov	fp, r1
 8007588:	2b00      	cmp	r3, #0
 800758a:	f47f adff 	bne.w	800718c <_strtod_l+0x454>
 800758e:	2322      	movs	r3, #34	@ 0x22
 8007590:	9a05      	ldr	r2, [sp, #20]
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e5fa      	b.n	800718c <_strtod_l+0x454>
 8007596:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800759a:	d165      	bne.n	8007668 <_strtod_l+0x930>
 800759c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800759e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075a2:	b35a      	cbz	r2, 80075fc <_strtod_l+0x8c4>
 80075a4:	4a9a      	ldr	r2, [pc, #616]	@ (8007810 <_strtod_l+0xad8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d12b      	bne.n	8007602 <_strtod_l+0x8ca>
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	4651      	mov	r1, sl
 80075ae:	b303      	cbz	r3, 80075f2 <_strtod_l+0x8ba>
 80075b0:	465a      	mov	r2, fp
 80075b2:	4b96      	ldr	r3, [pc, #600]	@ (800780c <_strtod_l+0xad4>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80075ba:	f04f 32ff 	mov.w	r2, #4294967295
 80075be:	d81b      	bhi.n	80075f8 <_strtod_l+0x8c0>
 80075c0:	0d1b      	lsrs	r3, r3, #20
 80075c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	4299      	cmp	r1, r3
 80075cc:	d119      	bne.n	8007602 <_strtod_l+0x8ca>
 80075ce:	4b91      	ldr	r3, [pc, #580]	@ (8007814 <_strtod_l+0xadc>)
 80075d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d102      	bne.n	80075dc <_strtod_l+0x8a4>
 80075d6:	3101      	adds	r1, #1
 80075d8:	f43f adcd 	beq.w	8007176 <_strtod_l+0x43e>
 80075dc:	f04f 0a00 	mov.w	sl, #0
 80075e0:	4b8a      	ldr	r3, [pc, #552]	@ (800780c <_strtod_l+0xad4>)
 80075e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075e4:	401a      	ands	r2, r3
 80075e6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1c1      	bne.n	8007574 <_strtod_l+0x83c>
 80075f0:	e5cc      	b.n	800718c <_strtod_l+0x454>
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295
 80075f6:	e7e8      	b.n	80075ca <_strtod_l+0x892>
 80075f8:	4613      	mov	r3, r2
 80075fa:	e7e6      	b.n	80075ca <_strtod_l+0x892>
 80075fc:	ea53 030a 	orrs.w	r3, r3, sl
 8007600:	d0aa      	beq.n	8007558 <_strtod_l+0x820>
 8007602:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007604:	b1db      	cbz	r3, 800763e <_strtod_l+0x906>
 8007606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007608:	4213      	tst	r3, r2
 800760a:	d0ee      	beq.n	80075ea <_strtod_l+0x8b2>
 800760c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800760e:	4650      	mov	r0, sl
 8007610:	4659      	mov	r1, fp
 8007612:	9a08      	ldr	r2, [sp, #32]
 8007614:	b1bb      	cbz	r3, 8007646 <_strtod_l+0x90e>
 8007616:	f7ff fb6d 	bl	8006cf4 <sulp>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007622:	f7f8 fda3 	bl	800016c <__adddf3>
 8007626:	4682      	mov	sl, r0
 8007628:	468b      	mov	fp, r1
 800762a:	e7de      	b.n	80075ea <_strtod_l+0x8b2>
 800762c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007630:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007634:	f04f 3aff 	mov.w	sl, #4294967295
 8007638:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800763c:	e7d5      	b.n	80075ea <_strtod_l+0x8b2>
 800763e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007640:	ea13 0f0a 	tst.w	r3, sl
 8007644:	e7e1      	b.n	800760a <_strtod_l+0x8d2>
 8007646:	f7ff fb55 	bl	8006cf4 <sulp>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007652:	f7f8 fd89 	bl	8000168 <__aeabi_dsub>
 8007656:	2200      	movs	r2, #0
 8007658:	2300      	movs	r3, #0
 800765a:	4682      	mov	sl, r0
 800765c:	468b      	mov	fp, r1
 800765e:	f7f9 f9a3 	bl	80009a8 <__aeabi_dcmpeq>
 8007662:	2800      	cmp	r0, #0
 8007664:	d0c1      	beq.n	80075ea <_strtod_l+0x8b2>
 8007666:	e619      	b.n	800729c <_strtod_l+0x564>
 8007668:	4641      	mov	r1, r8
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff face 	bl	8006c0c <__ratio>
 8007670:	2200      	movs	r2, #0
 8007672:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	f7f9 f9a9 	bl	80009d0 <__aeabi_dcmple>
 800767e:	2800      	cmp	r0, #0
 8007680:	d06d      	beq.n	800775e <_strtod_l+0xa26>
 8007682:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d178      	bne.n	800777a <_strtod_l+0xa42>
 8007688:	f1ba 0f00 	cmp.w	sl, #0
 800768c:	d156      	bne.n	800773c <_strtod_l+0xa04>
 800768e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007694:	2b00      	cmp	r3, #0
 8007696:	d158      	bne.n	800774a <_strtod_l+0xa12>
 8007698:	2200      	movs	r2, #0
 800769a:	4630      	mov	r0, r6
 800769c:	4639      	mov	r1, r7
 800769e:	4b5e      	ldr	r3, [pc, #376]	@ (8007818 <_strtod_l+0xae0>)
 80076a0:	f7f9 f98c 	bl	80009bc <__aeabi_dcmplt>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d157      	bne.n	8007758 <_strtod_l+0xa20>
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	2200      	movs	r2, #0
 80076ae:	4b5b      	ldr	r3, [pc, #364]	@ (800781c <_strtod_l+0xae4>)
 80076b0:	f7f8 ff12 	bl	80004d8 <__aeabi_dmul>
 80076b4:	4606      	mov	r6, r0
 80076b6:	460f      	mov	r7, r1
 80076b8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80076bc:	9606      	str	r6, [sp, #24]
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076c4:	4d51      	ldr	r5, [pc, #324]	@ (800780c <_strtod_l+0xad4>)
 80076c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076cc:	401d      	ands	r5, r3
 80076ce:	4b54      	ldr	r3, [pc, #336]	@ (8007820 <_strtod_l+0xae8>)
 80076d0:	429d      	cmp	r5, r3
 80076d2:	f040 80ab 	bne.w	800782c <_strtod_l+0xaf4>
 80076d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d8:	4650      	mov	r0, sl
 80076da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076de:	4659      	mov	r1, fp
 80076e0:	f7ff f9d4 	bl	8006a8c <__ulp>
 80076e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076e8:	f7f8 fef6 	bl	80004d8 <__aeabi_dmul>
 80076ec:	4652      	mov	r2, sl
 80076ee:	465b      	mov	r3, fp
 80076f0:	f7f8 fd3c 	bl	800016c <__adddf3>
 80076f4:	460b      	mov	r3, r1
 80076f6:	4945      	ldr	r1, [pc, #276]	@ (800780c <_strtod_l+0xad4>)
 80076f8:	4a4a      	ldr	r2, [pc, #296]	@ (8007824 <_strtod_l+0xaec>)
 80076fa:	4019      	ands	r1, r3
 80076fc:	4291      	cmp	r1, r2
 80076fe:	4682      	mov	sl, r0
 8007700:	d942      	bls.n	8007788 <_strtod_l+0xa50>
 8007702:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007704:	4b43      	ldr	r3, [pc, #268]	@ (8007814 <_strtod_l+0xadc>)
 8007706:	429a      	cmp	r2, r3
 8007708:	d103      	bne.n	8007712 <_strtod_l+0x9da>
 800770a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800770c:	3301      	adds	r3, #1
 800770e:	f43f ad32 	beq.w	8007176 <_strtod_l+0x43e>
 8007712:	f04f 3aff 	mov.w	sl, #4294967295
 8007716:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007814 <_strtod_l+0xadc>
 800771a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800771c:	9805      	ldr	r0, [sp, #20]
 800771e:	f7fe fe89 	bl	8006434 <_Bfree>
 8007722:	4649      	mov	r1, r9
 8007724:	9805      	ldr	r0, [sp, #20]
 8007726:	f7fe fe85 	bl	8006434 <_Bfree>
 800772a:	4641      	mov	r1, r8
 800772c:	9805      	ldr	r0, [sp, #20]
 800772e:	f7fe fe81 	bl	8006434 <_Bfree>
 8007732:	4621      	mov	r1, r4
 8007734:	9805      	ldr	r0, [sp, #20]
 8007736:	f7fe fe7d 	bl	8006434 <_Bfree>
 800773a:	e61c      	b.n	8007376 <_strtod_l+0x63e>
 800773c:	f1ba 0f01 	cmp.w	sl, #1
 8007740:	d103      	bne.n	800774a <_strtod_l+0xa12>
 8007742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007744:	2b00      	cmp	r3, #0
 8007746:	f43f ada9 	beq.w	800729c <_strtod_l+0x564>
 800774a:	2200      	movs	r2, #0
 800774c:	4b36      	ldr	r3, [pc, #216]	@ (8007828 <_strtod_l+0xaf0>)
 800774e:	2600      	movs	r6, #0
 8007750:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007754:	4f30      	ldr	r7, [pc, #192]	@ (8007818 <_strtod_l+0xae0>)
 8007756:	e7b3      	b.n	80076c0 <_strtod_l+0x988>
 8007758:	2600      	movs	r6, #0
 800775a:	4f30      	ldr	r7, [pc, #192]	@ (800781c <_strtod_l+0xae4>)
 800775c:	e7ac      	b.n	80076b8 <_strtod_l+0x980>
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	4b2e      	ldr	r3, [pc, #184]	@ (800781c <_strtod_l+0xae4>)
 8007764:	2200      	movs	r2, #0
 8007766:	f7f8 feb7 	bl	80004d8 <__aeabi_dmul>
 800776a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0a1      	beq.n	80076b8 <_strtod_l+0x980>
 8007774:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007778:	e7a2      	b.n	80076c0 <_strtod_l+0x988>
 800777a:	2200      	movs	r2, #0
 800777c:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <_strtod_l+0xae0>)
 800777e:	4616      	mov	r6, r2
 8007780:	461f      	mov	r7, r3
 8007782:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007786:	e79b      	b.n	80076c0 <_strtod_l+0x988>
 8007788:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800778c:	9b08      	ldr	r3, [sp, #32]
 800778e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1c1      	bne.n	800771a <_strtod_l+0x9e2>
 8007796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800779a:	0d1b      	lsrs	r3, r3, #20
 800779c:	051b      	lsls	r3, r3, #20
 800779e:	429d      	cmp	r5, r3
 80077a0:	d1bb      	bne.n	800771a <_strtod_l+0x9e2>
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	f7f9 fcb3 	bl	8001110 <__aeabi_d2lz>
 80077aa:	f7f8 fe67 	bl	800047c <__aeabi_l2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f8 fcd7 	bl	8000168 <__aeabi_dsub>
 80077ba:	460b      	mov	r3, r1
 80077bc:	4602      	mov	r2, r0
 80077be:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80077c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c8:	ea46 060a 	orr.w	r6, r6, sl
 80077cc:	431e      	orrs	r6, r3
 80077ce:	d06a      	beq.n	80078a6 <_strtod_l+0xb6e>
 80077d0:	a309      	add	r3, pc, #36	@ (adr r3, 80077f8 <_strtod_l+0xac0>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f9 f8f1 	bl	80009bc <__aeabi_dcmplt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f47f acd6 	bne.w	800718c <_strtod_l+0x454>
 80077e0:	a307      	add	r3, pc, #28	@ (adr r3, 8007800 <_strtod_l+0xac8>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ea:	f7f9 f905 	bl	80009f8 <__aeabi_dcmpgt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d093      	beq.n	800771a <_strtod_l+0x9e2>
 80077f2:	e4cb      	b.n	800718c <_strtod_l+0x454>
 80077f4:	f3af 8000 	nop.w
 80077f8:	94a03595 	.word	0x94a03595
 80077fc:	3fdfffff 	.word	0x3fdfffff
 8007800:	35afe535 	.word	0x35afe535
 8007804:	3fe00000 	.word	0x3fe00000
 8007808:	39500000 	.word	0x39500000
 800780c:	7ff00000 	.word	0x7ff00000
 8007810:	000fffff 	.word	0x000fffff
 8007814:	7fefffff 	.word	0x7fefffff
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	7fe00000 	.word	0x7fe00000
 8007824:	7c9fffff 	.word	0x7c9fffff
 8007828:	bff00000 	.word	0xbff00000
 800782c:	9b08      	ldr	r3, [sp, #32]
 800782e:	b323      	cbz	r3, 800787a <_strtod_l+0xb42>
 8007830:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007834:	d821      	bhi.n	800787a <_strtod_l+0xb42>
 8007836:	a328      	add	r3, pc, #160	@ (adr r3, 80078d8 <_strtod_l+0xba0>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	4630      	mov	r0, r6
 800783e:	4639      	mov	r1, r7
 8007840:	f7f9 f8c6 	bl	80009d0 <__aeabi_dcmple>
 8007844:	b1a0      	cbz	r0, 8007870 <_strtod_l+0xb38>
 8007846:	4639      	mov	r1, r7
 8007848:	4630      	mov	r0, r6
 800784a:	f7f9 f91d 	bl	8000a88 <__aeabi_d2uiz>
 800784e:	2801      	cmp	r0, #1
 8007850:	bf38      	it	cc
 8007852:	2001      	movcc	r0, #1
 8007854:	f7f8 fdc6 	bl	80003e4 <__aeabi_ui2d>
 8007858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	b9fb      	cbnz	r3, 80078a0 <_strtod_l+0xb68>
 8007860:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007864:	9014      	str	r0, [sp, #80]	@ 0x50
 8007866:	9315      	str	r3, [sp, #84]	@ 0x54
 8007868:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800786c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007870:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007872:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007876:	1b5b      	subs	r3, r3, r5
 8007878:	9311      	str	r3, [sp, #68]	@ 0x44
 800787a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800787e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007882:	f7ff f903 	bl	8006a8c <__ulp>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4650      	mov	r0, sl
 800788c:	4659      	mov	r1, fp
 800788e:	f7f8 fe23 	bl	80004d8 <__aeabi_dmul>
 8007892:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007896:	f7f8 fc69 	bl	800016c <__adddf3>
 800789a:	4682      	mov	sl, r0
 800789c:	468b      	mov	fp, r1
 800789e:	e775      	b.n	800778c <_strtod_l+0xa54>
 80078a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80078a4:	e7e0      	b.n	8007868 <_strtod_l+0xb30>
 80078a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80078e0 <_strtod_l+0xba8>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f9 f886 	bl	80009bc <__aeabi_dcmplt>
 80078b0:	e79d      	b.n	80077ee <_strtod_l+0xab6>
 80078b2:	2300      	movs	r3, #0
 80078b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80078b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078b8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	f7ff ba79 	b.w	8006db2 <_strtod_l+0x7a>
 80078c0:	2a65      	cmp	r2, #101	@ 0x65
 80078c2:	f43f ab72 	beq.w	8006faa <_strtod_l+0x272>
 80078c6:	2a45      	cmp	r2, #69	@ 0x45
 80078c8:	f43f ab6f 	beq.w	8006faa <_strtod_l+0x272>
 80078cc:	2301      	movs	r3, #1
 80078ce:	f7ff bbaa 	b.w	8007026 <_strtod_l+0x2ee>
 80078d2:	bf00      	nop
 80078d4:	f3af 8000 	nop.w
 80078d8:	ffc00000 	.word	0xffc00000
 80078dc:	41dfffff 	.word	0x41dfffff
 80078e0:	94a03595 	.word	0x94a03595
 80078e4:	3fcfffff 	.word	0x3fcfffff

080078e8 <_strtod_r>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	@ (80078f0 <_strtod_r+0x8>)
 80078ea:	f7ff ba25 	b.w	8006d38 <_strtod_l>
 80078ee:	bf00      	nop
 80078f0:	20000068 	.word	0x20000068

080078f4 <_strtol_l.isra.0>:
 80078f4:	2b24      	cmp	r3, #36	@ 0x24
 80078f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fa:	4686      	mov	lr, r0
 80078fc:	4690      	mov	r8, r2
 80078fe:	d801      	bhi.n	8007904 <_strtol_l.isra.0+0x10>
 8007900:	2b01      	cmp	r3, #1
 8007902:	d106      	bne.n	8007912 <_strtol_l.isra.0+0x1e>
 8007904:	f7fd fdbc 	bl	8005480 <__errno>
 8007908:	2316      	movs	r3, #22
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	2000      	movs	r0, #0
 800790e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007912:	460d      	mov	r5, r1
 8007914:	4833      	ldr	r0, [pc, #204]	@ (80079e4 <_strtol_l.isra.0+0xf0>)
 8007916:	462a      	mov	r2, r5
 8007918:	f815 4b01 	ldrb.w	r4, [r5], #1
 800791c:	5d06      	ldrb	r6, [r0, r4]
 800791e:	f016 0608 	ands.w	r6, r6, #8
 8007922:	d1f8      	bne.n	8007916 <_strtol_l.isra.0+0x22>
 8007924:	2c2d      	cmp	r4, #45	@ 0x2d
 8007926:	d110      	bne.n	800794a <_strtol_l.isra.0+0x56>
 8007928:	2601      	movs	r6, #1
 800792a:	782c      	ldrb	r4, [r5, #0]
 800792c:	1c95      	adds	r5, r2, #2
 800792e:	f033 0210 	bics.w	r2, r3, #16
 8007932:	d115      	bne.n	8007960 <_strtol_l.isra.0+0x6c>
 8007934:	2c30      	cmp	r4, #48	@ 0x30
 8007936:	d10d      	bne.n	8007954 <_strtol_l.isra.0+0x60>
 8007938:	782a      	ldrb	r2, [r5, #0]
 800793a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800793e:	2a58      	cmp	r2, #88	@ 0x58
 8007940:	d108      	bne.n	8007954 <_strtol_l.isra.0+0x60>
 8007942:	786c      	ldrb	r4, [r5, #1]
 8007944:	3502      	adds	r5, #2
 8007946:	2310      	movs	r3, #16
 8007948:	e00a      	b.n	8007960 <_strtol_l.isra.0+0x6c>
 800794a:	2c2b      	cmp	r4, #43	@ 0x2b
 800794c:	bf04      	itt	eq
 800794e:	782c      	ldrbeq	r4, [r5, #0]
 8007950:	1c95      	addeq	r5, r2, #2
 8007952:	e7ec      	b.n	800792e <_strtol_l.isra.0+0x3a>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f6      	bne.n	8007946 <_strtol_l.isra.0+0x52>
 8007958:	2c30      	cmp	r4, #48	@ 0x30
 800795a:	bf14      	ite	ne
 800795c:	230a      	movne	r3, #10
 800795e:	2308      	moveq	r3, #8
 8007960:	2200      	movs	r2, #0
 8007962:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007966:	f10c 3cff 	add.w	ip, ip, #4294967295
 800796a:	fbbc f9f3 	udiv	r9, ip, r3
 800796e:	4610      	mov	r0, r2
 8007970:	fb03 ca19 	mls	sl, r3, r9, ip
 8007974:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007978:	2f09      	cmp	r7, #9
 800797a:	d80f      	bhi.n	800799c <_strtol_l.isra.0+0xa8>
 800797c:	463c      	mov	r4, r7
 800797e:	42a3      	cmp	r3, r4
 8007980:	dd1b      	ble.n	80079ba <_strtol_l.isra.0+0xc6>
 8007982:	1c57      	adds	r7, r2, #1
 8007984:	d007      	beq.n	8007996 <_strtol_l.isra.0+0xa2>
 8007986:	4581      	cmp	r9, r0
 8007988:	d314      	bcc.n	80079b4 <_strtol_l.isra.0+0xc0>
 800798a:	d101      	bne.n	8007990 <_strtol_l.isra.0+0x9c>
 800798c:	45a2      	cmp	sl, r4
 800798e:	db11      	blt.n	80079b4 <_strtol_l.isra.0+0xc0>
 8007990:	2201      	movs	r2, #1
 8007992:	fb00 4003 	mla	r0, r0, r3, r4
 8007996:	f815 4b01 	ldrb.w	r4, [r5], #1
 800799a:	e7eb      	b.n	8007974 <_strtol_l.isra.0+0x80>
 800799c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80079a0:	2f19      	cmp	r7, #25
 80079a2:	d801      	bhi.n	80079a8 <_strtol_l.isra.0+0xb4>
 80079a4:	3c37      	subs	r4, #55	@ 0x37
 80079a6:	e7ea      	b.n	800797e <_strtol_l.isra.0+0x8a>
 80079a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80079ac:	2f19      	cmp	r7, #25
 80079ae:	d804      	bhi.n	80079ba <_strtol_l.isra.0+0xc6>
 80079b0:	3c57      	subs	r4, #87	@ 0x57
 80079b2:	e7e4      	b.n	800797e <_strtol_l.isra.0+0x8a>
 80079b4:	f04f 32ff 	mov.w	r2, #4294967295
 80079b8:	e7ed      	b.n	8007996 <_strtol_l.isra.0+0xa2>
 80079ba:	1c53      	adds	r3, r2, #1
 80079bc:	d108      	bne.n	80079d0 <_strtol_l.isra.0+0xdc>
 80079be:	2322      	movs	r3, #34	@ 0x22
 80079c0:	4660      	mov	r0, ip
 80079c2:	f8ce 3000 	str.w	r3, [lr]
 80079c6:	f1b8 0f00 	cmp.w	r8, #0
 80079ca:	d0a0      	beq.n	800790e <_strtol_l.isra.0+0x1a>
 80079cc:	1e69      	subs	r1, r5, #1
 80079ce:	e006      	b.n	80079de <_strtol_l.isra.0+0xea>
 80079d0:	b106      	cbz	r6, 80079d4 <_strtol_l.isra.0+0xe0>
 80079d2:	4240      	negs	r0, r0
 80079d4:	f1b8 0f00 	cmp.w	r8, #0
 80079d8:	d099      	beq.n	800790e <_strtol_l.isra.0+0x1a>
 80079da:	2a00      	cmp	r2, #0
 80079dc:	d1f6      	bne.n	80079cc <_strtol_l.isra.0+0xd8>
 80079de:	f8c8 1000 	str.w	r1, [r8]
 80079e2:	e794      	b.n	800790e <_strtol_l.isra.0+0x1a>
 80079e4:	08009931 	.word	0x08009931

080079e8 <_strtol_r>:
 80079e8:	f7ff bf84 	b.w	80078f4 <_strtol_l.isra.0>

080079ec <__ssputs_r>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	461f      	mov	r7, r3
 80079f2:	688e      	ldr	r6, [r1, #8]
 80079f4:	4682      	mov	sl, r0
 80079f6:	42be      	cmp	r6, r7
 80079f8:	460c      	mov	r4, r1
 80079fa:	4690      	mov	r8, r2
 80079fc:	680b      	ldr	r3, [r1, #0]
 80079fe:	d82d      	bhi.n	8007a5c <__ssputs_r+0x70>
 8007a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a08:	d026      	beq.n	8007a58 <__ssputs_r+0x6c>
 8007a0a:	6965      	ldr	r5, [r4, #20]
 8007a0c:	6909      	ldr	r1, [r1, #16]
 8007a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a12:	eba3 0901 	sub.w	r9, r3, r1
 8007a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a1a:	1c7b      	adds	r3, r7, #1
 8007a1c:	444b      	add	r3, r9
 8007a1e:	106d      	asrs	r5, r5, #1
 8007a20:	429d      	cmp	r5, r3
 8007a22:	bf38      	it	cc
 8007a24:	461d      	movcc	r5, r3
 8007a26:	0553      	lsls	r3, r2, #21
 8007a28:	d527      	bpl.n	8007a7a <__ssputs_r+0x8e>
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7fe fc36 	bl	800629c <_malloc_r>
 8007a30:	4606      	mov	r6, r0
 8007a32:	b360      	cbz	r0, 8007a8e <__ssputs_r+0xa2>
 8007a34:	464a      	mov	r2, r9
 8007a36:	6921      	ldr	r1, [r4, #16]
 8007a38:	f000 fa14 	bl	8007e64 <memcpy>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	6126      	str	r6, [r4, #16]
 8007a4a:	444e      	add	r6, r9
 8007a4c:	6026      	str	r6, [r4, #0]
 8007a4e:	463e      	mov	r6, r7
 8007a50:	6165      	str	r5, [r4, #20]
 8007a52:	eba5 0509 	sub.w	r5, r5, r9
 8007a56:	60a5      	str	r5, [r4, #8]
 8007a58:	42be      	cmp	r6, r7
 8007a5a:	d900      	bls.n	8007a5e <__ssputs_r+0x72>
 8007a5c:	463e      	mov	r6, r7
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4641      	mov	r1, r8
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	f000 f9c2 	bl	8007dec <memmove>
 8007a68:	2000      	movs	r0, #0
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	4433      	add	r3, r6
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	f000 fd83 	bl	8008586 <_realloc_r>
 8007a80:	4606      	mov	r6, r0
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d1e0      	bne.n	8007a48 <__ssputs_r+0x5c>
 8007a86:	4650      	mov	r0, sl
 8007a88:	6921      	ldr	r1, [r4, #16]
 8007a8a:	f7fe fb95 	bl	80061b8 <_free_r>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	f8ca 3000 	str.w	r3, [sl]
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	e7e9      	b.n	8007a76 <__ssputs_r+0x8a>
	...

08007aa4 <_svfiprintf_r>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	4698      	mov	r8, r3
 8007aaa:	898b      	ldrh	r3, [r1, #12]
 8007aac:	4607      	mov	r7, r0
 8007aae:	061b      	lsls	r3, r3, #24
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	4614      	mov	r4, r2
 8007ab4:	b09d      	sub	sp, #116	@ 0x74
 8007ab6:	d510      	bpl.n	8007ada <_svfiprintf_r+0x36>
 8007ab8:	690b      	ldr	r3, [r1, #16]
 8007aba:	b973      	cbnz	r3, 8007ada <_svfiprintf_r+0x36>
 8007abc:	2140      	movs	r1, #64	@ 0x40
 8007abe:	f7fe fbed 	bl	800629c <_malloc_r>
 8007ac2:	6028      	str	r0, [r5, #0]
 8007ac4:	6128      	str	r0, [r5, #16]
 8007ac6:	b930      	cbnz	r0, 8007ad6 <_svfiprintf_r+0x32>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	b01d      	add	sp, #116	@ 0x74
 8007ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	2340      	movs	r3, #64	@ 0x40
 8007ad8:	616b      	str	r3, [r5, #20]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ade:	2320      	movs	r3, #32
 8007ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ae4:	2330      	movs	r3, #48	@ 0x30
 8007ae6:	f04f 0901 	mov.w	r9, #1
 8007aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007c88 <_svfiprintf_r+0x1e4>
 8007af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007af6:	4623      	mov	r3, r4
 8007af8:	469a      	mov	sl, r3
 8007afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afe:	b10a      	cbz	r2, 8007b04 <_svfiprintf_r+0x60>
 8007b00:	2a25      	cmp	r2, #37	@ 0x25
 8007b02:	d1f9      	bne.n	8007af8 <_svfiprintf_r+0x54>
 8007b04:	ebba 0b04 	subs.w	fp, sl, r4
 8007b08:	d00b      	beq.n	8007b22 <_svfiprintf_r+0x7e>
 8007b0a:	465b      	mov	r3, fp
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff ff6b 	bl	80079ec <__ssputs_r>
 8007b16:	3001      	adds	r0, #1
 8007b18:	f000 80a7 	beq.w	8007c6a <_svfiprintf_r+0x1c6>
 8007b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b1e:	445a      	add	r2, fp
 8007b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b22:	f89a 3000 	ldrb.w	r3, [sl]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 809f 	beq.w	8007c6a <_svfiprintf_r+0x1c6>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b36:	f10a 0a01 	add.w	sl, sl, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	9307      	str	r3, [sp, #28]
 8007b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b44:	4654      	mov	r4, sl
 8007b46:	2205      	movs	r2, #5
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	484e      	ldr	r0, [pc, #312]	@ (8007c88 <_svfiprintf_r+0x1e4>)
 8007b4e:	f7fd fcc4 	bl	80054da <memchr>
 8007b52:	9a04      	ldr	r2, [sp, #16]
 8007b54:	b9d8      	cbnz	r0, 8007b8e <_svfiprintf_r+0xea>
 8007b56:	06d0      	lsls	r0, r2, #27
 8007b58:	bf44      	itt	mi
 8007b5a:	2320      	movmi	r3, #32
 8007b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b60:	0711      	lsls	r1, r2, #28
 8007b62:	bf44      	itt	mi
 8007b64:	232b      	movmi	r3, #43	@ 0x2b
 8007b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b70:	d015      	beq.n	8007b9e <_svfiprintf_r+0xfa>
 8007b72:	4654      	mov	r4, sl
 8007b74:	2000      	movs	r0, #0
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b82:	3b30      	subs	r3, #48	@ 0x30
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d94b      	bls.n	8007c20 <_svfiprintf_r+0x17c>
 8007b88:	b1b0      	cbz	r0, 8007bb8 <_svfiprintf_r+0x114>
 8007b8a:	9207      	str	r2, [sp, #28]
 8007b8c:	e014      	b.n	8007bb8 <_svfiprintf_r+0x114>
 8007b8e:	eba0 0308 	sub.w	r3, r0, r8
 8007b92:	fa09 f303 	lsl.w	r3, r9, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	46a2      	mov	sl, r4
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	e7d2      	b.n	8007b44 <_svfiprintf_r+0xa0>
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	1d19      	adds	r1, r3, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	9103      	str	r1, [sp, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfbb      	ittet	lt
 8007baa:	425b      	neglt	r3, r3
 8007bac:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb0:	9307      	strge	r3, [sp, #28]
 8007bb2:	9307      	strlt	r3, [sp, #28]
 8007bb4:	bfb8      	it	lt
 8007bb6:	9204      	strlt	r2, [sp, #16]
 8007bb8:	7823      	ldrb	r3, [r4, #0]
 8007bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bbc:	d10a      	bne.n	8007bd4 <_svfiprintf_r+0x130>
 8007bbe:	7863      	ldrb	r3, [r4, #1]
 8007bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bc2:	d132      	bne.n	8007c2a <_svfiprintf_r+0x186>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	3402      	adds	r4, #2
 8007bc8:	1d1a      	adds	r2, r3, #4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	9203      	str	r2, [sp, #12]
 8007bce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007c8c <_svfiprintf_r+0x1e8>
 8007bd8:	2203      	movs	r2, #3
 8007bda:	4650      	mov	r0, sl
 8007bdc:	7821      	ldrb	r1, [r4, #0]
 8007bde:	f7fd fc7c 	bl	80054da <memchr>
 8007be2:	b138      	cbz	r0, 8007bf4 <_svfiprintf_r+0x150>
 8007be4:	2240      	movs	r2, #64	@ 0x40
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	eba0 000a 	sub.w	r0, r0, sl
 8007bec:	4082      	lsls	r2, r0
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	3401      	adds	r4, #1
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf8:	2206      	movs	r2, #6
 8007bfa:	4825      	ldr	r0, [pc, #148]	@ (8007c90 <_svfiprintf_r+0x1ec>)
 8007bfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c00:	f7fd fc6b 	bl	80054da <memchr>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d036      	beq.n	8007c76 <_svfiprintf_r+0x1d2>
 8007c08:	4b22      	ldr	r3, [pc, #136]	@ (8007c94 <_svfiprintf_r+0x1f0>)
 8007c0a:	bb1b      	cbnz	r3, 8007c54 <_svfiprintf_r+0x1b0>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	3307      	adds	r3, #7
 8007c10:	f023 0307 	bic.w	r3, r3, #7
 8007c14:	3308      	adds	r3, #8
 8007c16:	9303      	str	r3, [sp, #12]
 8007c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1a:	4433      	add	r3, r6
 8007c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1e:	e76a      	b.n	8007af6 <_svfiprintf_r+0x52>
 8007c20:	460c      	mov	r4, r1
 8007c22:	2001      	movs	r0, #1
 8007c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c28:	e7a8      	b.n	8007b7c <_svfiprintf_r+0xd8>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f04f 0c0a 	mov.w	ip, #10
 8007c30:	4619      	mov	r1, r3
 8007c32:	3401      	adds	r4, #1
 8007c34:	9305      	str	r3, [sp, #20]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c3c:	3a30      	subs	r2, #48	@ 0x30
 8007c3e:	2a09      	cmp	r2, #9
 8007c40:	d903      	bls.n	8007c4a <_svfiprintf_r+0x1a6>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c6      	beq.n	8007bd4 <_svfiprintf_r+0x130>
 8007c46:	9105      	str	r1, [sp, #20]
 8007c48:	e7c4      	b.n	8007bd4 <_svfiprintf_r+0x130>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c52:	e7f0      	b.n	8007c36 <_svfiprintf_r+0x192>
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <_svfiprintf_r+0x1f4>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	f7fc fcc0 	bl	80045e4 <_printf_float>
 8007c64:	1c42      	adds	r2, r0, #1
 8007c66:	4606      	mov	r6, r0
 8007c68:	d1d6      	bne.n	8007c18 <_svfiprintf_r+0x174>
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	065b      	lsls	r3, r3, #25
 8007c6e:	f53f af2d 	bmi.w	8007acc <_svfiprintf_r+0x28>
 8007c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c74:	e72c      	b.n	8007ad0 <_svfiprintf_r+0x2c>
 8007c76:	ab03      	add	r3, sp, #12
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <_svfiprintf_r+0x1f4>)
 8007c80:	a904      	add	r1, sp, #16
 8007c82:	f7fc ff4d 	bl	8004b20 <_printf_i>
 8007c86:	e7ed      	b.n	8007c64 <_svfiprintf_r+0x1c0>
 8007c88:	0800972b 	.word	0x0800972b
 8007c8c:	08009731 	.word	0x08009731
 8007c90:	08009735 	.word	0x08009735
 8007c94:	080045e5 	.word	0x080045e5
 8007c98:	080079ed 	.word	0x080079ed

08007c9c <__sflush_r>:
 8007c9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	0716      	lsls	r6, r2, #28
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d454      	bmi.n	8007d54 <__sflush_r+0xb8>
 8007caa:	684b      	ldr	r3, [r1, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc02      	bgt.n	8007cb6 <__sflush_r+0x1a>
 8007cb0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd48      	ble.n	8007d48 <__sflush_r+0xac>
 8007cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	d045      	beq.n	8007d48 <__sflush_r+0xac>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cc2:	682f      	ldr	r7, [r5, #0]
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	d030      	beq.n	8007d2c <__sflush_r+0x90>
 8007cca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	0759      	lsls	r1, r3, #29
 8007cd0:	d505      	bpl.n	8007cde <__sflush_r+0x42>
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cd8:	b10b      	cbz	r3, 8007cde <__sflush_r+0x42>
 8007cda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cdc:	1ad2      	subs	r2, r2, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	47b0      	blx	r6
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	d106      	bne.n	8007cfc <__sflush_r+0x60>
 8007cee:	6829      	ldr	r1, [r5, #0]
 8007cf0:	291d      	cmp	r1, #29
 8007cf2:	d82b      	bhi.n	8007d4c <__sflush_r+0xb0>
 8007cf4:	4a28      	ldr	r2, [pc, #160]	@ (8007d98 <__sflush_r+0xfc>)
 8007cf6:	40ca      	lsrs	r2, r1
 8007cf8:	07d6      	lsls	r6, r2, #31
 8007cfa:	d527      	bpl.n	8007d4c <__sflush_r+0xb0>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	6062      	str	r2, [r4, #4]
 8007d00:	6922      	ldr	r2, [r4, #16]
 8007d02:	04d9      	lsls	r1, r3, #19
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	d504      	bpl.n	8007d12 <__sflush_r+0x76>
 8007d08:	1c42      	adds	r2, r0, #1
 8007d0a:	d101      	bne.n	8007d10 <__sflush_r+0x74>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b903      	cbnz	r3, 8007d12 <__sflush_r+0x76>
 8007d10:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d14:	602f      	str	r7, [r5, #0]
 8007d16:	b1b9      	cbz	r1, 8007d48 <__sflush_r+0xac>
 8007d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	d002      	beq.n	8007d26 <__sflush_r+0x8a>
 8007d20:	4628      	mov	r0, r5
 8007d22:	f7fe fa49 	bl	80061b8 <_free_r>
 8007d26:	2300      	movs	r3, #0
 8007d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d2a:	e00d      	b.n	8007d48 <__sflush_r+0xac>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b0      	blx	r6
 8007d32:	4602      	mov	r2, r0
 8007d34:	1c50      	adds	r0, r2, #1
 8007d36:	d1c9      	bne.n	8007ccc <__sflush_r+0x30>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0c6      	beq.n	8007ccc <__sflush_r+0x30>
 8007d3e:	2b1d      	cmp	r3, #29
 8007d40:	d001      	beq.n	8007d46 <__sflush_r+0xaa>
 8007d42:	2b16      	cmp	r3, #22
 8007d44:	d11d      	bne.n	8007d82 <__sflush_r+0xe6>
 8007d46:	602f      	str	r7, [r5, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e021      	b.n	8007d90 <__sflush_r+0xf4>
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d50:	b21b      	sxth	r3, r3
 8007d52:	e01a      	b.n	8007d8a <__sflush_r+0xee>
 8007d54:	690f      	ldr	r7, [r1, #16]
 8007d56:	2f00      	cmp	r7, #0
 8007d58:	d0f6      	beq.n	8007d48 <__sflush_r+0xac>
 8007d5a:	0793      	lsls	r3, r2, #30
 8007d5c:	bf18      	it	ne
 8007d5e:	2300      	movne	r3, #0
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	1bf6      	subs	r6, r6, r7
 8007d68:	600f      	str	r7, [r1, #0]
 8007d6a:	608b      	str	r3, [r1, #8]
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	ddeb      	ble.n	8007d48 <__sflush_r+0xac>
 8007d70:	4633      	mov	r3, r6
 8007d72:	463a      	mov	r2, r7
 8007d74:	4628      	mov	r0, r5
 8007d76:	6a21      	ldr	r1, [r4, #32]
 8007d78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d7c:	47e0      	blx	ip
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	dc07      	bgt.n	8007d92 <__sflush_r+0xf6>
 8007d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d92:	4407      	add	r7, r0
 8007d94:	1a36      	subs	r6, r6, r0
 8007d96:	e7e9      	b.n	8007d6c <__sflush_r+0xd0>
 8007d98:	20400001 	.word	0x20400001

08007d9c <_fflush_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	690b      	ldr	r3, [r1, #16]
 8007da0:	4605      	mov	r5, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	b913      	cbnz	r3, 8007dac <_fflush_r+0x10>
 8007da6:	2500      	movs	r5, #0
 8007da8:	4628      	mov	r0, r5
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	b118      	cbz	r0, 8007db6 <_fflush_r+0x1a>
 8007dae:	6a03      	ldr	r3, [r0, #32]
 8007db0:	b90b      	cbnz	r3, 8007db6 <_fflush_r+0x1a>
 8007db2:	f7fd fa69 	bl	8005288 <__sinit>
 8007db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f3      	beq.n	8007da6 <_fflush_r+0xa>
 8007dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007dc0:	07d0      	lsls	r0, r2, #31
 8007dc2:	d404      	bmi.n	8007dce <_fflush_r+0x32>
 8007dc4:	0599      	lsls	r1, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_fflush_r+0x32>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dca:	f7fd fb84 	bl	80054d6 <__retarget_lock_acquire_recursive>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	f7ff ff63 	bl	8007c9c <__sflush_r>
 8007dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dd8:	4605      	mov	r5, r0
 8007dda:	07da      	lsls	r2, r3, #31
 8007ddc:	d4e4      	bmi.n	8007da8 <_fflush_r+0xc>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	059b      	lsls	r3, r3, #22
 8007de2:	d4e1      	bmi.n	8007da8 <_fflush_r+0xc>
 8007de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007de6:	f7fd fb77 	bl	80054d8 <__retarget_lock_release_recursive>
 8007dea:	e7dd      	b.n	8007da8 <_fflush_r+0xc>

08007dec <memmove>:
 8007dec:	4288      	cmp	r0, r1
 8007dee:	b510      	push	{r4, lr}
 8007df0:	eb01 0402 	add.w	r4, r1, r2
 8007df4:	d902      	bls.n	8007dfc <memmove+0x10>
 8007df6:	4284      	cmp	r4, r0
 8007df8:	4623      	mov	r3, r4
 8007dfa:	d807      	bhi.n	8007e0c <memmove+0x20>
 8007dfc:	1e43      	subs	r3, r0, #1
 8007dfe:	42a1      	cmp	r1, r4
 8007e00:	d008      	beq.n	8007e14 <memmove+0x28>
 8007e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e0a:	e7f8      	b.n	8007dfe <memmove+0x12>
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4402      	add	r2, r0
 8007e10:	428a      	cmp	r2, r1
 8007e12:	d100      	bne.n	8007e16 <memmove+0x2a>
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e1e:	e7f7      	b.n	8007e10 <memmove+0x24>

08007e20 <strncmp>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	b16a      	cbz	r2, 8007e40 <strncmp+0x20>
 8007e24:	3901      	subs	r1, #1
 8007e26:	1884      	adds	r4, r0, r2
 8007e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d103      	bne.n	8007e3c <strncmp+0x1c>
 8007e34:	42a0      	cmp	r0, r4
 8007e36:	d001      	beq.n	8007e3c <strncmp+0x1c>
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d1f5      	bne.n	8007e28 <strncmp+0x8>
 8007e3c:	1ad0      	subs	r0, r2, r3
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	4610      	mov	r0, r2
 8007e42:	e7fc      	b.n	8007e3e <strncmp+0x1e>

08007e44 <_sbrk_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	2300      	movs	r3, #0
 8007e48:	4d05      	ldr	r5, [pc, #20]	@ (8007e60 <_sbrk_r+0x1c>)
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7fa fbfe 	bl	8002650 <_sbrk>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_sbrk_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_sbrk_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20000850 	.word	0x20000850

08007e64 <memcpy>:
 8007e64:	440a      	add	r2, r1
 8007e66:	4291      	cmp	r1, r2
 8007e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	4770      	bx	lr
 8007e70:	b510      	push	{r4, lr}
 8007e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e76:	4291      	cmp	r1, r2
 8007e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e7c:	d1f9      	bne.n	8007e72 <memcpy+0xe>
 8007e7e:	bd10      	pop	{r4, pc}

08007e80 <nan>:
 8007e80:	2000      	movs	r0, #0
 8007e82:	4901      	ldr	r1, [pc, #4]	@ (8007e88 <nan+0x8>)
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	7ff80000 	.word	0x7ff80000

08007e8c <__assert_func>:
 8007e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e8e:	4614      	mov	r4, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	4b09      	ldr	r3, [pc, #36]	@ (8007eb8 <__assert_func+0x2c>)
 8007e94:	4605      	mov	r5, r0
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68d8      	ldr	r0, [r3, #12]
 8007e9a:	b14c      	cbz	r4, 8007eb0 <__assert_func+0x24>
 8007e9c:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <__assert_func+0x30>)
 8007e9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ea2:	9100      	str	r1, [sp, #0]
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	4906      	ldr	r1, [pc, #24]	@ (8007ec0 <__assert_func+0x34>)
 8007ea8:	f000 fba8 	bl	80085fc <fiprintf>
 8007eac:	f000 fbb8 	bl	8008620 <abort>
 8007eb0:	4b04      	ldr	r3, [pc, #16]	@ (8007ec4 <__assert_func+0x38>)
 8007eb2:	461c      	mov	r4, r3
 8007eb4:	e7f3      	b.n	8007e9e <__assert_func+0x12>
 8007eb6:	bf00      	nop
 8007eb8:	20000018 	.word	0x20000018
 8007ebc:	08009744 	.word	0x08009744
 8007ec0:	08009751 	.word	0x08009751
 8007ec4:	0800977f 	.word	0x0800977f

08007ec8 <_calloc_r>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	fba1 5402 	umull	r5, r4, r1, r2
 8007ece:	b934      	cbnz	r4, 8007ede <_calloc_r+0x16>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7fe f9e3 	bl	800629c <_malloc_r>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	b928      	cbnz	r0, 8007ee6 <_calloc_r+0x1e>
 8007eda:	4630      	mov	r0, r6
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	220c      	movs	r2, #12
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	6002      	str	r2, [r0, #0]
 8007ee4:	e7f9      	b.n	8007eda <_calloc_r+0x12>
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	4621      	mov	r1, r4
 8007eea:	f7fd fa68 	bl	80053be <memset>
 8007eee:	e7f4      	b.n	8007eda <_calloc_r+0x12>

08007ef0 <rshift>:
 8007ef0:	6903      	ldr	r3, [r0, #16]
 8007ef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ef6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007efa:	f100 0414 	add.w	r4, r0, #20
 8007efe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f02:	dd46      	ble.n	8007f92 <rshift+0xa2>
 8007f04:	f011 011f 	ands.w	r1, r1, #31
 8007f08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f10:	d10c      	bne.n	8007f2c <rshift+0x3c>
 8007f12:	4629      	mov	r1, r5
 8007f14:	f100 0710 	add.w	r7, r0, #16
 8007f18:	42b1      	cmp	r1, r6
 8007f1a:	d335      	bcc.n	8007f88 <rshift+0x98>
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	1eea      	subs	r2, r5, #3
 8007f22:	4296      	cmp	r6, r2
 8007f24:	bf38      	it	cc
 8007f26:	2300      	movcc	r3, #0
 8007f28:	4423      	add	r3, r4
 8007f2a:	e015      	b.n	8007f58 <rshift+0x68>
 8007f2c:	46a1      	mov	r9, r4
 8007f2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f32:	f1c1 0820 	rsb	r8, r1, #32
 8007f36:	40cf      	lsrs	r7, r1
 8007f38:	f105 0e04 	add.w	lr, r5, #4
 8007f3c:	4576      	cmp	r6, lr
 8007f3e:	46f4      	mov	ip, lr
 8007f40:	d816      	bhi.n	8007f70 <rshift+0x80>
 8007f42:	1a9a      	subs	r2, r3, r2
 8007f44:	0092      	lsls	r2, r2, #2
 8007f46:	3a04      	subs	r2, #4
 8007f48:	3501      	adds	r5, #1
 8007f4a:	42ae      	cmp	r6, r5
 8007f4c:	bf38      	it	cc
 8007f4e:	2200      	movcc	r2, #0
 8007f50:	18a3      	adds	r3, r4, r2
 8007f52:	50a7      	str	r7, [r4, r2]
 8007f54:	b107      	cbz	r7, 8007f58 <rshift+0x68>
 8007f56:	3304      	adds	r3, #4
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	eba3 0204 	sub.w	r2, r3, r4
 8007f5e:	bf08      	it	eq
 8007f60:	2300      	moveq	r3, #0
 8007f62:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f66:	6102      	str	r2, [r0, #16]
 8007f68:	bf08      	it	eq
 8007f6a:	6143      	streq	r3, [r0, #20]
 8007f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f70:	f8dc c000 	ldr.w	ip, [ip]
 8007f74:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f78:	ea4c 0707 	orr.w	r7, ip, r7
 8007f7c:	f849 7b04 	str.w	r7, [r9], #4
 8007f80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f84:	40cf      	lsrs	r7, r1
 8007f86:	e7d9      	b.n	8007f3c <rshift+0x4c>
 8007f88:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f90:	e7c2      	b.n	8007f18 <rshift+0x28>
 8007f92:	4623      	mov	r3, r4
 8007f94:	e7e0      	b.n	8007f58 <rshift+0x68>

08007f96 <__hexdig_fun>:
 8007f96:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	d802      	bhi.n	8007fa4 <__hexdig_fun+0xe>
 8007f9e:	3820      	subs	r0, #32
 8007fa0:	b2c0      	uxtb	r0, r0
 8007fa2:	4770      	bx	lr
 8007fa4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d801      	bhi.n	8007fb0 <__hexdig_fun+0x1a>
 8007fac:	3847      	subs	r0, #71	@ 0x47
 8007fae:	e7f7      	b.n	8007fa0 <__hexdig_fun+0xa>
 8007fb0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007fb4:	2b05      	cmp	r3, #5
 8007fb6:	d801      	bhi.n	8007fbc <__hexdig_fun+0x26>
 8007fb8:	3827      	subs	r0, #39	@ 0x27
 8007fba:	e7f1      	b.n	8007fa0 <__hexdig_fun+0xa>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	4770      	bx	lr

08007fc0 <__gethex>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	468a      	mov	sl, r1
 8007fc6:	4690      	mov	r8, r2
 8007fc8:	b085      	sub	sp, #20
 8007fca:	9302      	str	r3, [sp, #8]
 8007fcc:	680b      	ldr	r3, [r1, #0]
 8007fce:	9001      	str	r0, [sp, #4]
 8007fd0:	1c9c      	adds	r4, r3, #2
 8007fd2:	46a1      	mov	r9, r4
 8007fd4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007fd8:	2830      	cmp	r0, #48	@ 0x30
 8007fda:	d0fa      	beq.n	8007fd2 <__gethex+0x12>
 8007fdc:	eba9 0303 	sub.w	r3, r9, r3
 8007fe0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007fe4:	f7ff ffd7 	bl	8007f96 <__hexdig_fun>
 8007fe8:	4605      	mov	r5, r0
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d168      	bne.n	80080c0 <__gethex+0x100>
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4648      	mov	r0, r9
 8007ff2:	499f      	ldr	r1, [pc, #636]	@ (8008270 <__gethex+0x2b0>)
 8007ff4:	f7ff ff14 	bl	8007e20 <strncmp>
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d167      	bne.n	80080ce <__gethex+0x10e>
 8007ffe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008002:	4626      	mov	r6, r4
 8008004:	f7ff ffc7 	bl	8007f96 <__hexdig_fun>
 8008008:	2800      	cmp	r0, #0
 800800a:	d062      	beq.n	80080d2 <__gethex+0x112>
 800800c:	4623      	mov	r3, r4
 800800e:	7818      	ldrb	r0, [r3, #0]
 8008010:	4699      	mov	r9, r3
 8008012:	2830      	cmp	r0, #48	@ 0x30
 8008014:	f103 0301 	add.w	r3, r3, #1
 8008018:	d0f9      	beq.n	800800e <__gethex+0x4e>
 800801a:	f7ff ffbc 	bl	8007f96 <__hexdig_fun>
 800801e:	fab0 f580 	clz	r5, r0
 8008022:	f04f 0b01 	mov.w	fp, #1
 8008026:	096d      	lsrs	r5, r5, #5
 8008028:	464a      	mov	r2, r9
 800802a:	4616      	mov	r6, r2
 800802c:	7830      	ldrb	r0, [r6, #0]
 800802e:	3201      	adds	r2, #1
 8008030:	f7ff ffb1 	bl	8007f96 <__hexdig_fun>
 8008034:	2800      	cmp	r0, #0
 8008036:	d1f8      	bne.n	800802a <__gethex+0x6a>
 8008038:	2201      	movs	r2, #1
 800803a:	4630      	mov	r0, r6
 800803c:	498c      	ldr	r1, [pc, #560]	@ (8008270 <__gethex+0x2b0>)
 800803e:	f7ff feef 	bl	8007e20 <strncmp>
 8008042:	2800      	cmp	r0, #0
 8008044:	d13f      	bne.n	80080c6 <__gethex+0x106>
 8008046:	b944      	cbnz	r4, 800805a <__gethex+0x9a>
 8008048:	1c74      	adds	r4, r6, #1
 800804a:	4622      	mov	r2, r4
 800804c:	4616      	mov	r6, r2
 800804e:	7830      	ldrb	r0, [r6, #0]
 8008050:	3201      	adds	r2, #1
 8008052:	f7ff ffa0 	bl	8007f96 <__hexdig_fun>
 8008056:	2800      	cmp	r0, #0
 8008058:	d1f8      	bne.n	800804c <__gethex+0x8c>
 800805a:	1ba4      	subs	r4, r4, r6
 800805c:	00a7      	lsls	r7, r4, #2
 800805e:	7833      	ldrb	r3, [r6, #0]
 8008060:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008064:	2b50      	cmp	r3, #80	@ 0x50
 8008066:	d13e      	bne.n	80080e6 <__gethex+0x126>
 8008068:	7873      	ldrb	r3, [r6, #1]
 800806a:	2b2b      	cmp	r3, #43	@ 0x2b
 800806c:	d033      	beq.n	80080d6 <__gethex+0x116>
 800806e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008070:	d034      	beq.n	80080dc <__gethex+0x11c>
 8008072:	2400      	movs	r4, #0
 8008074:	1c71      	adds	r1, r6, #1
 8008076:	7808      	ldrb	r0, [r1, #0]
 8008078:	f7ff ff8d 	bl	8007f96 <__hexdig_fun>
 800807c:	1e43      	subs	r3, r0, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b18      	cmp	r3, #24
 8008082:	d830      	bhi.n	80080e6 <__gethex+0x126>
 8008084:	f1a0 0210 	sub.w	r2, r0, #16
 8008088:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800808c:	f7ff ff83 	bl	8007f96 <__hexdig_fun>
 8008090:	f100 3cff 	add.w	ip, r0, #4294967295
 8008094:	fa5f fc8c 	uxtb.w	ip, ip
 8008098:	f1bc 0f18 	cmp.w	ip, #24
 800809c:	f04f 030a 	mov.w	r3, #10
 80080a0:	d91e      	bls.n	80080e0 <__gethex+0x120>
 80080a2:	b104      	cbz	r4, 80080a6 <__gethex+0xe6>
 80080a4:	4252      	negs	r2, r2
 80080a6:	4417      	add	r7, r2
 80080a8:	f8ca 1000 	str.w	r1, [sl]
 80080ac:	b1ed      	cbz	r5, 80080ea <__gethex+0x12a>
 80080ae:	f1bb 0f00 	cmp.w	fp, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2506      	moveq	r5, #6
 80080b6:	2500      	movne	r5, #0
 80080b8:	4628      	mov	r0, r5
 80080ba:	b005      	add	sp, #20
 80080bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c0:	2500      	movs	r5, #0
 80080c2:	462c      	mov	r4, r5
 80080c4:	e7b0      	b.n	8008028 <__gethex+0x68>
 80080c6:	2c00      	cmp	r4, #0
 80080c8:	d1c7      	bne.n	800805a <__gethex+0x9a>
 80080ca:	4627      	mov	r7, r4
 80080cc:	e7c7      	b.n	800805e <__gethex+0x9e>
 80080ce:	464e      	mov	r6, r9
 80080d0:	462f      	mov	r7, r5
 80080d2:	2501      	movs	r5, #1
 80080d4:	e7c3      	b.n	800805e <__gethex+0x9e>
 80080d6:	2400      	movs	r4, #0
 80080d8:	1cb1      	adds	r1, r6, #2
 80080da:	e7cc      	b.n	8008076 <__gethex+0xb6>
 80080dc:	2401      	movs	r4, #1
 80080de:	e7fb      	b.n	80080d8 <__gethex+0x118>
 80080e0:	fb03 0002 	mla	r0, r3, r2, r0
 80080e4:	e7ce      	b.n	8008084 <__gethex+0xc4>
 80080e6:	4631      	mov	r1, r6
 80080e8:	e7de      	b.n	80080a8 <__gethex+0xe8>
 80080ea:	4629      	mov	r1, r5
 80080ec:	eba6 0309 	sub.w	r3, r6, r9
 80080f0:	3b01      	subs	r3, #1
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	dc0a      	bgt.n	800810c <__gethex+0x14c>
 80080f6:	9801      	ldr	r0, [sp, #4]
 80080f8:	f7fe f95c 	bl	80063b4 <_Balloc>
 80080fc:	4604      	mov	r4, r0
 80080fe:	b940      	cbnz	r0, 8008112 <__gethex+0x152>
 8008100:	4602      	mov	r2, r0
 8008102:	21e4      	movs	r1, #228	@ 0xe4
 8008104:	4b5b      	ldr	r3, [pc, #364]	@ (8008274 <__gethex+0x2b4>)
 8008106:	485c      	ldr	r0, [pc, #368]	@ (8008278 <__gethex+0x2b8>)
 8008108:	f7ff fec0 	bl	8007e8c <__assert_func>
 800810c:	3101      	adds	r1, #1
 800810e:	105b      	asrs	r3, r3, #1
 8008110:	e7ef      	b.n	80080f2 <__gethex+0x132>
 8008112:	2300      	movs	r3, #0
 8008114:	f100 0a14 	add.w	sl, r0, #20
 8008118:	4655      	mov	r5, sl
 800811a:	469b      	mov	fp, r3
 800811c:	45b1      	cmp	r9, r6
 800811e:	d337      	bcc.n	8008190 <__gethex+0x1d0>
 8008120:	f845 bb04 	str.w	fp, [r5], #4
 8008124:	eba5 050a 	sub.w	r5, r5, sl
 8008128:	10ad      	asrs	r5, r5, #2
 800812a:	6125      	str	r5, [r4, #16]
 800812c:	4658      	mov	r0, fp
 800812e:	f7fe fa33 	bl	8006598 <__hi0bits>
 8008132:	016d      	lsls	r5, r5, #5
 8008134:	f8d8 6000 	ldr.w	r6, [r8]
 8008138:	1a2d      	subs	r5, r5, r0
 800813a:	42b5      	cmp	r5, r6
 800813c:	dd54      	ble.n	80081e8 <__gethex+0x228>
 800813e:	1bad      	subs	r5, r5, r6
 8008140:	4629      	mov	r1, r5
 8008142:	4620      	mov	r0, r4
 8008144:	f7fe fdb5 	bl	8006cb2 <__any_on>
 8008148:	4681      	mov	r9, r0
 800814a:	b178      	cbz	r0, 800816c <__gethex+0x1ac>
 800814c:	f04f 0901 	mov.w	r9, #1
 8008150:	1e6b      	subs	r3, r5, #1
 8008152:	1159      	asrs	r1, r3, #5
 8008154:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008158:	f003 021f 	and.w	r2, r3, #31
 800815c:	fa09 f202 	lsl.w	r2, r9, r2
 8008160:	420a      	tst	r2, r1
 8008162:	d003      	beq.n	800816c <__gethex+0x1ac>
 8008164:	454b      	cmp	r3, r9
 8008166:	dc36      	bgt.n	80081d6 <__gethex+0x216>
 8008168:	f04f 0902 	mov.w	r9, #2
 800816c:	4629      	mov	r1, r5
 800816e:	4620      	mov	r0, r4
 8008170:	f7ff febe 	bl	8007ef0 <rshift>
 8008174:	442f      	add	r7, r5
 8008176:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800817a:	42bb      	cmp	r3, r7
 800817c:	da42      	bge.n	8008204 <__gethex+0x244>
 800817e:	4621      	mov	r1, r4
 8008180:	9801      	ldr	r0, [sp, #4]
 8008182:	f7fe f957 	bl	8006434 <_Bfree>
 8008186:	2300      	movs	r3, #0
 8008188:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800818a:	25a3      	movs	r5, #163	@ 0xa3
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	e793      	b.n	80080b8 <__gethex+0xf8>
 8008190:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008194:	2a2e      	cmp	r2, #46	@ 0x2e
 8008196:	d012      	beq.n	80081be <__gethex+0x1fe>
 8008198:	2b20      	cmp	r3, #32
 800819a:	d104      	bne.n	80081a6 <__gethex+0x1e6>
 800819c:	f845 bb04 	str.w	fp, [r5], #4
 80081a0:	f04f 0b00 	mov.w	fp, #0
 80081a4:	465b      	mov	r3, fp
 80081a6:	7830      	ldrb	r0, [r6, #0]
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	f7ff fef4 	bl	8007f96 <__hexdig_fun>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	f000 000f 	and.w	r0, r0, #15
 80081b4:	4098      	lsls	r0, r3
 80081b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80081ba:	3304      	adds	r3, #4
 80081bc:	e7ae      	b.n	800811c <__gethex+0x15c>
 80081be:	45b1      	cmp	r9, r6
 80081c0:	d8ea      	bhi.n	8008198 <__gethex+0x1d8>
 80081c2:	2201      	movs	r2, #1
 80081c4:	4630      	mov	r0, r6
 80081c6:	492a      	ldr	r1, [pc, #168]	@ (8008270 <__gethex+0x2b0>)
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	f7ff fe29 	bl	8007e20 <strncmp>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1e1      	bne.n	8008198 <__gethex+0x1d8>
 80081d4:	e7a2      	b.n	800811c <__gethex+0x15c>
 80081d6:	4620      	mov	r0, r4
 80081d8:	1ea9      	subs	r1, r5, #2
 80081da:	f7fe fd6a 	bl	8006cb2 <__any_on>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d0c2      	beq.n	8008168 <__gethex+0x1a8>
 80081e2:	f04f 0903 	mov.w	r9, #3
 80081e6:	e7c1      	b.n	800816c <__gethex+0x1ac>
 80081e8:	da09      	bge.n	80081fe <__gethex+0x23e>
 80081ea:	1b75      	subs	r5, r6, r5
 80081ec:	4621      	mov	r1, r4
 80081ee:	462a      	mov	r2, r5
 80081f0:	9801      	ldr	r0, [sp, #4]
 80081f2:	f7fe fb2f 	bl	8006854 <__lshift>
 80081f6:	4604      	mov	r4, r0
 80081f8:	1b7f      	subs	r7, r7, r5
 80081fa:	f100 0a14 	add.w	sl, r0, #20
 80081fe:	f04f 0900 	mov.w	r9, #0
 8008202:	e7b8      	b.n	8008176 <__gethex+0x1b6>
 8008204:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008208:	42bd      	cmp	r5, r7
 800820a:	dd6f      	ble.n	80082ec <__gethex+0x32c>
 800820c:	1bed      	subs	r5, r5, r7
 800820e:	42ae      	cmp	r6, r5
 8008210:	dc34      	bgt.n	800827c <__gethex+0x2bc>
 8008212:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008216:	2b02      	cmp	r3, #2
 8008218:	d022      	beq.n	8008260 <__gethex+0x2a0>
 800821a:	2b03      	cmp	r3, #3
 800821c:	d024      	beq.n	8008268 <__gethex+0x2a8>
 800821e:	2b01      	cmp	r3, #1
 8008220:	d115      	bne.n	800824e <__gethex+0x28e>
 8008222:	42ae      	cmp	r6, r5
 8008224:	d113      	bne.n	800824e <__gethex+0x28e>
 8008226:	2e01      	cmp	r6, #1
 8008228:	d10b      	bne.n	8008242 <__gethex+0x282>
 800822a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800822e:	9a02      	ldr	r2, [sp, #8]
 8008230:	2562      	movs	r5, #98	@ 0x62
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	2301      	movs	r3, #1
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	f8ca 3000 	str.w	r3, [sl]
 800823c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823e:	601c      	str	r4, [r3, #0]
 8008240:	e73a      	b.n	80080b8 <__gethex+0xf8>
 8008242:	4620      	mov	r0, r4
 8008244:	1e71      	subs	r1, r6, #1
 8008246:	f7fe fd34 	bl	8006cb2 <__any_on>
 800824a:	2800      	cmp	r0, #0
 800824c:	d1ed      	bne.n	800822a <__gethex+0x26a>
 800824e:	4621      	mov	r1, r4
 8008250:	9801      	ldr	r0, [sp, #4]
 8008252:	f7fe f8ef 	bl	8006434 <_Bfree>
 8008256:	2300      	movs	r3, #0
 8008258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800825a:	2550      	movs	r5, #80	@ 0x50
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	e72b      	b.n	80080b8 <__gethex+0xf8>
 8008260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f3      	bne.n	800824e <__gethex+0x28e>
 8008266:	e7e0      	b.n	800822a <__gethex+0x26a>
 8008268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1dd      	bne.n	800822a <__gethex+0x26a>
 800826e:	e7ee      	b.n	800824e <__gethex+0x28e>
 8008270:	08009729 	.word	0x08009729
 8008274:	080096bf 	.word	0x080096bf
 8008278:	08009780 	.word	0x08009780
 800827c:	1e6f      	subs	r7, r5, #1
 800827e:	f1b9 0f00 	cmp.w	r9, #0
 8008282:	d130      	bne.n	80082e6 <__gethex+0x326>
 8008284:	b127      	cbz	r7, 8008290 <__gethex+0x2d0>
 8008286:	4639      	mov	r1, r7
 8008288:	4620      	mov	r0, r4
 800828a:	f7fe fd12 	bl	8006cb2 <__any_on>
 800828e:	4681      	mov	r9, r0
 8008290:	2301      	movs	r3, #1
 8008292:	4629      	mov	r1, r5
 8008294:	1b76      	subs	r6, r6, r5
 8008296:	2502      	movs	r5, #2
 8008298:	117a      	asrs	r2, r7, #5
 800829a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800829e:	f007 071f 	and.w	r7, r7, #31
 80082a2:	40bb      	lsls	r3, r7
 80082a4:	4213      	tst	r3, r2
 80082a6:	4620      	mov	r0, r4
 80082a8:	bf18      	it	ne
 80082aa:	f049 0902 	orrne.w	r9, r9, #2
 80082ae:	f7ff fe1f 	bl	8007ef0 <rshift>
 80082b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	d047      	beq.n	800834c <__gethex+0x38c>
 80082bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d015      	beq.n	80082f0 <__gethex+0x330>
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d017      	beq.n	80082f8 <__gethex+0x338>
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d109      	bne.n	80082e0 <__gethex+0x320>
 80082cc:	f019 0f02 	tst.w	r9, #2
 80082d0:	d006      	beq.n	80082e0 <__gethex+0x320>
 80082d2:	f8da 3000 	ldr.w	r3, [sl]
 80082d6:	ea49 0903 	orr.w	r9, r9, r3
 80082da:	f019 0f01 	tst.w	r9, #1
 80082de:	d10e      	bne.n	80082fe <__gethex+0x33e>
 80082e0:	f045 0510 	orr.w	r5, r5, #16
 80082e4:	e032      	b.n	800834c <__gethex+0x38c>
 80082e6:	f04f 0901 	mov.w	r9, #1
 80082ea:	e7d1      	b.n	8008290 <__gethex+0x2d0>
 80082ec:	2501      	movs	r5, #1
 80082ee:	e7e2      	b.n	80082b6 <__gethex+0x2f6>
 80082f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082f2:	f1c3 0301 	rsb	r3, r3, #1
 80082f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0f0      	beq.n	80082e0 <__gethex+0x320>
 80082fe:	f04f 0c00 	mov.w	ip, #0
 8008302:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008306:	f104 0314 	add.w	r3, r4, #20
 800830a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800830e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008312:	4618      	mov	r0, r3
 8008314:	f853 2b04 	ldr.w	r2, [r3], #4
 8008318:	f1b2 3fff 	cmp.w	r2, #4294967295
 800831c:	d01b      	beq.n	8008356 <__gethex+0x396>
 800831e:	3201      	adds	r2, #1
 8008320:	6002      	str	r2, [r0, #0]
 8008322:	2d02      	cmp	r5, #2
 8008324:	f104 0314 	add.w	r3, r4, #20
 8008328:	d13c      	bne.n	80083a4 <__gethex+0x3e4>
 800832a:	f8d8 2000 	ldr.w	r2, [r8]
 800832e:	3a01      	subs	r2, #1
 8008330:	42b2      	cmp	r2, r6
 8008332:	d109      	bne.n	8008348 <__gethex+0x388>
 8008334:	2201      	movs	r2, #1
 8008336:	1171      	asrs	r1, r6, #5
 8008338:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800833c:	f006 061f 	and.w	r6, r6, #31
 8008340:	fa02 f606 	lsl.w	r6, r2, r6
 8008344:	421e      	tst	r6, r3
 8008346:	d13a      	bne.n	80083be <__gethex+0x3fe>
 8008348:	f045 0520 	orr.w	r5, r5, #32
 800834c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800834e:	601c      	str	r4, [r3, #0]
 8008350:	9b02      	ldr	r3, [sp, #8]
 8008352:	601f      	str	r7, [r3, #0]
 8008354:	e6b0      	b.n	80080b8 <__gethex+0xf8>
 8008356:	4299      	cmp	r1, r3
 8008358:	f843 cc04 	str.w	ip, [r3, #-4]
 800835c:	d8d9      	bhi.n	8008312 <__gethex+0x352>
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	459b      	cmp	fp, r3
 8008362:	db17      	blt.n	8008394 <__gethex+0x3d4>
 8008364:	6861      	ldr	r1, [r4, #4]
 8008366:	9801      	ldr	r0, [sp, #4]
 8008368:	3101      	adds	r1, #1
 800836a:	f7fe f823 	bl	80063b4 <_Balloc>
 800836e:	4681      	mov	r9, r0
 8008370:	b918      	cbnz	r0, 800837a <__gethex+0x3ba>
 8008372:	4602      	mov	r2, r0
 8008374:	2184      	movs	r1, #132	@ 0x84
 8008376:	4b19      	ldr	r3, [pc, #100]	@ (80083dc <__gethex+0x41c>)
 8008378:	e6c5      	b.n	8008106 <__gethex+0x146>
 800837a:	6922      	ldr	r2, [r4, #16]
 800837c:	f104 010c 	add.w	r1, r4, #12
 8008380:	3202      	adds	r2, #2
 8008382:	0092      	lsls	r2, r2, #2
 8008384:	300c      	adds	r0, #12
 8008386:	f7ff fd6d 	bl	8007e64 <memcpy>
 800838a:	4621      	mov	r1, r4
 800838c:	9801      	ldr	r0, [sp, #4]
 800838e:	f7fe f851 	bl	8006434 <_Bfree>
 8008392:	464c      	mov	r4, r9
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	6122      	str	r2, [r4, #16]
 800839a:	2201      	movs	r2, #1
 800839c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a0:	615a      	str	r2, [r3, #20]
 80083a2:	e7be      	b.n	8008322 <__gethex+0x362>
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	455a      	cmp	r2, fp
 80083a8:	dd0b      	ble.n	80083c2 <__gethex+0x402>
 80083aa:	2101      	movs	r1, #1
 80083ac:	4620      	mov	r0, r4
 80083ae:	f7ff fd9f 	bl	8007ef0 <rshift>
 80083b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083b6:	3701      	adds	r7, #1
 80083b8:	42bb      	cmp	r3, r7
 80083ba:	f6ff aee0 	blt.w	800817e <__gethex+0x1be>
 80083be:	2501      	movs	r5, #1
 80083c0:	e7c2      	b.n	8008348 <__gethex+0x388>
 80083c2:	f016 061f 	ands.w	r6, r6, #31
 80083c6:	d0fa      	beq.n	80083be <__gethex+0x3fe>
 80083c8:	4453      	add	r3, sl
 80083ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083ce:	f7fe f8e3 	bl	8006598 <__hi0bits>
 80083d2:	f1c6 0620 	rsb	r6, r6, #32
 80083d6:	42b0      	cmp	r0, r6
 80083d8:	dbe7      	blt.n	80083aa <__gethex+0x3ea>
 80083da:	e7f0      	b.n	80083be <__gethex+0x3fe>
 80083dc:	080096bf 	.word	0x080096bf

080083e0 <L_shift>:
 80083e0:	f1c2 0208 	rsb	r2, r2, #8
 80083e4:	0092      	lsls	r2, r2, #2
 80083e6:	b570      	push	{r4, r5, r6, lr}
 80083e8:	f1c2 0620 	rsb	r6, r2, #32
 80083ec:	6843      	ldr	r3, [r0, #4]
 80083ee:	6804      	ldr	r4, [r0, #0]
 80083f0:	fa03 f506 	lsl.w	r5, r3, r6
 80083f4:	432c      	orrs	r4, r5
 80083f6:	40d3      	lsrs	r3, r2
 80083f8:	6004      	str	r4, [r0, #0]
 80083fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80083fe:	4288      	cmp	r0, r1
 8008400:	d3f4      	bcc.n	80083ec <L_shift+0xc>
 8008402:	bd70      	pop	{r4, r5, r6, pc}

08008404 <__match>:
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	6803      	ldr	r3, [r0, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840e:	b914      	cbnz	r4, 8008416 <__match+0x12>
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	2001      	movs	r0, #1
 8008414:	bd30      	pop	{r4, r5, pc}
 8008416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800841e:	2d19      	cmp	r5, #25
 8008420:	bf98      	it	ls
 8008422:	3220      	addls	r2, #32
 8008424:	42a2      	cmp	r2, r4
 8008426:	d0f0      	beq.n	800840a <__match+0x6>
 8008428:	2000      	movs	r0, #0
 800842a:	e7f3      	b.n	8008414 <__match+0x10>

0800842c <__hexnan>:
 800842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	2500      	movs	r5, #0
 8008432:	680b      	ldr	r3, [r1, #0]
 8008434:	4682      	mov	sl, r0
 8008436:	115e      	asrs	r6, r3, #5
 8008438:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800843c:	f013 031f 	ands.w	r3, r3, #31
 8008440:	bf18      	it	ne
 8008442:	3604      	addne	r6, #4
 8008444:	1f37      	subs	r7, r6, #4
 8008446:	4690      	mov	r8, r2
 8008448:	46b9      	mov	r9, r7
 800844a:	463c      	mov	r4, r7
 800844c:	46ab      	mov	fp, r5
 800844e:	b087      	sub	sp, #28
 8008450:	6801      	ldr	r1, [r0, #0]
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	f846 5c04 	str.w	r5, [r6, #-4]
 8008458:	9502      	str	r5, [sp, #8]
 800845a:	784a      	ldrb	r2, [r1, #1]
 800845c:	1c4b      	adds	r3, r1, #1
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	b342      	cbz	r2, 80084b4 <__hexnan+0x88>
 8008462:	4610      	mov	r0, r2
 8008464:	9105      	str	r1, [sp, #20]
 8008466:	9204      	str	r2, [sp, #16]
 8008468:	f7ff fd95 	bl	8007f96 <__hexdig_fun>
 800846c:	2800      	cmp	r0, #0
 800846e:	d151      	bne.n	8008514 <__hexnan+0xe8>
 8008470:	9a04      	ldr	r2, [sp, #16]
 8008472:	9905      	ldr	r1, [sp, #20]
 8008474:	2a20      	cmp	r2, #32
 8008476:	d818      	bhi.n	80084aa <__hexnan+0x7e>
 8008478:	9b02      	ldr	r3, [sp, #8]
 800847a:	459b      	cmp	fp, r3
 800847c:	dd13      	ble.n	80084a6 <__hexnan+0x7a>
 800847e:	454c      	cmp	r4, r9
 8008480:	d206      	bcs.n	8008490 <__hexnan+0x64>
 8008482:	2d07      	cmp	r5, #7
 8008484:	dc04      	bgt.n	8008490 <__hexnan+0x64>
 8008486:	462a      	mov	r2, r5
 8008488:	4649      	mov	r1, r9
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff ffa8 	bl	80083e0 <L_shift>
 8008490:	4544      	cmp	r4, r8
 8008492:	d952      	bls.n	800853a <__hexnan+0x10e>
 8008494:	2300      	movs	r3, #0
 8008496:	f1a4 0904 	sub.w	r9, r4, #4
 800849a:	f844 3c04 	str.w	r3, [r4, #-4]
 800849e:	461d      	mov	r5, r3
 80084a0:	464c      	mov	r4, r9
 80084a2:	f8cd b008 	str.w	fp, [sp, #8]
 80084a6:	9903      	ldr	r1, [sp, #12]
 80084a8:	e7d7      	b.n	800845a <__hexnan+0x2e>
 80084aa:	2a29      	cmp	r2, #41	@ 0x29
 80084ac:	d157      	bne.n	800855e <__hexnan+0x132>
 80084ae:	3102      	adds	r1, #2
 80084b0:	f8ca 1000 	str.w	r1, [sl]
 80084b4:	f1bb 0f00 	cmp.w	fp, #0
 80084b8:	d051      	beq.n	800855e <__hexnan+0x132>
 80084ba:	454c      	cmp	r4, r9
 80084bc:	d206      	bcs.n	80084cc <__hexnan+0xa0>
 80084be:	2d07      	cmp	r5, #7
 80084c0:	dc04      	bgt.n	80084cc <__hexnan+0xa0>
 80084c2:	462a      	mov	r2, r5
 80084c4:	4649      	mov	r1, r9
 80084c6:	4620      	mov	r0, r4
 80084c8:	f7ff ff8a 	bl	80083e0 <L_shift>
 80084cc:	4544      	cmp	r4, r8
 80084ce:	d936      	bls.n	800853e <__hexnan+0x112>
 80084d0:	4623      	mov	r3, r4
 80084d2:	f1a8 0204 	sub.w	r2, r8, #4
 80084d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80084da:	429f      	cmp	r7, r3
 80084dc:	f842 1f04 	str.w	r1, [r2, #4]!
 80084e0:	d2f9      	bcs.n	80084d6 <__hexnan+0xaa>
 80084e2:	1b3b      	subs	r3, r7, r4
 80084e4:	f023 0303 	bic.w	r3, r3, #3
 80084e8:	3304      	adds	r3, #4
 80084ea:	3401      	adds	r4, #1
 80084ec:	3e03      	subs	r6, #3
 80084ee:	42b4      	cmp	r4, r6
 80084f0:	bf88      	it	hi
 80084f2:	2304      	movhi	r3, #4
 80084f4:	2200      	movs	r2, #0
 80084f6:	4443      	add	r3, r8
 80084f8:	f843 2b04 	str.w	r2, [r3], #4
 80084fc:	429f      	cmp	r7, r3
 80084fe:	d2fb      	bcs.n	80084f8 <__hexnan+0xcc>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	b91b      	cbnz	r3, 800850c <__hexnan+0xe0>
 8008504:	4547      	cmp	r7, r8
 8008506:	d128      	bne.n	800855a <__hexnan+0x12e>
 8008508:	2301      	movs	r3, #1
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	2005      	movs	r0, #5
 800850e:	b007      	add	sp, #28
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	3501      	adds	r5, #1
 8008516:	2d08      	cmp	r5, #8
 8008518:	f10b 0b01 	add.w	fp, fp, #1
 800851c:	dd06      	ble.n	800852c <__hexnan+0x100>
 800851e:	4544      	cmp	r4, r8
 8008520:	d9c1      	bls.n	80084a6 <__hexnan+0x7a>
 8008522:	2300      	movs	r3, #0
 8008524:	2501      	movs	r5, #1
 8008526:	f844 3c04 	str.w	r3, [r4, #-4]
 800852a:	3c04      	subs	r4, #4
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	f000 000f 	and.w	r0, r0, #15
 8008532:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	e7b5      	b.n	80084a6 <__hexnan+0x7a>
 800853a:	2508      	movs	r5, #8
 800853c:	e7b3      	b.n	80084a6 <__hexnan+0x7a>
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0dd      	beq.n	8008500 <__hexnan+0xd4>
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	f1c3 0320 	rsb	r3, r3, #32
 800854c:	40da      	lsrs	r2, r3
 800854e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008552:	4013      	ands	r3, r2
 8008554:	f846 3c04 	str.w	r3, [r6, #-4]
 8008558:	e7d2      	b.n	8008500 <__hexnan+0xd4>
 800855a:	3f04      	subs	r7, #4
 800855c:	e7d0      	b.n	8008500 <__hexnan+0xd4>
 800855e:	2004      	movs	r0, #4
 8008560:	e7d5      	b.n	800850e <__hexnan+0xe2>

08008562 <__ascii_mbtowc>:
 8008562:	b082      	sub	sp, #8
 8008564:	b901      	cbnz	r1, 8008568 <__ascii_mbtowc+0x6>
 8008566:	a901      	add	r1, sp, #4
 8008568:	b142      	cbz	r2, 800857c <__ascii_mbtowc+0x1a>
 800856a:	b14b      	cbz	r3, 8008580 <__ascii_mbtowc+0x1e>
 800856c:	7813      	ldrb	r3, [r2, #0]
 800856e:	600b      	str	r3, [r1, #0]
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	1e10      	subs	r0, r2, #0
 8008574:	bf18      	it	ne
 8008576:	2001      	movne	r0, #1
 8008578:	b002      	add	sp, #8
 800857a:	4770      	bx	lr
 800857c:	4610      	mov	r0, r2
 800857e:	e7fb      	b.n	8008578 <__ascii_mbtowc+0x16>
 8008580:	f06f 0001 	mvn.w	r0, #1
 8008584:	e7f8      	b.n	8008578 <__ascii_mbtowc+0x16>

08008586 <_realloc_r>:
 8008586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	4607      	mov	r7, r0
 800858c:	4614      	mov	r4, r2
 800858e:	460d      	mov	r5, r1
 8008590:	b921      	cbnz	r1, 800859c <_realloc_r+0x16>
 8008592:	4611      	mov	r1, r2
 8008594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	f7fd be80 	b.w	800629c <_malloc_r>
 800859c:	b92a      	cbnz	r2, 80085aa <_realloc_r+0x24>
 800859e:	f7fd fe0b 	bl	80061b8 <_free_r>
 80085a2:	4625      	mov	r5, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085aa:	f000 f840 	bl	800862e <_malloc_usable_size_r>
 80085ae:	4284      	cmp	r4, r0
 80085b0:	4606      	mov	r6, r0
 80085b2:	d802      	bhi.n	80085ba <_realloc_r+0x34>
 80085b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085b8:	d8f4      	bhi.n	80085a4 <_realloc_r+0x1e>
 80085ba:	4621      	mov	r1, r4
 80085bc:	4638      	mov	r0, r7
 80085be:	f7fd fe6d 	bl	800629c <_malloc_r>
 80085c2:	4680      	mov	r8, r0
 80085c4:	b908      	cbnz	r0, 80085ca <_realloc_r+0x44>
 80085c6:	4645      	mov	r5, r8
 80085c8:	e7ec      	b.n	80085a4 <_realloc_r+0x1e>
 80085ca:	42b4      	cmp	r4, r6
 80085cc:	4622      	mov	r2, r4
 80085ce:	4629      	mov	r1, r5
 80085d0:	bf28      	it	cs
 80085d2:	4632      	movcs	r2, r6
 80085d4:	f7ff fc46 	bl	8007e64 <memcpy>
 80085d8:	4629      	mov	r1, r5
 80085da:	4638      	mov	r0, r7
 80085dc:	f7fd fdec 	bl	80061b8 <_free_r>
 80085e0:	e7f1      	b.n	80085c6 <_realloc_r+0x40>

080085e2 <__ascii_wctomb>:
 80085e2:	4603      	mov	r3, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	b141      	cbz	r1, 80085fa <__ascii_wctomb+0x18>
 80085e8:	2aff      	cmp	r2, #255	@ 0xff
 80085ea:	d904      	bls.n	80085f6 <__ascii_wctomb+0x14>
 80085ec:	228a      	movs	r2, #138	@ 0x8a
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	4770      	bx	lr
 80085f6:	2001      	movs	r0, #1
 80085f8:	700a      	strb	r2, [r1, #0]
 80085fa:	4770      	bx	lr

080085fc <fiprintf>:
 80085fc:	b40e      	push	{r1, r2, r3}
 80085fe:	b503      	push	{r0, r1, lr}
 8008600:	4601      	mov	r1, r0
 8008602:	ab03      	add	r3, sp, #12
 8008604:	4805      	ldr	r0, [pc, #20]	@ (800861c <fiprintf+0x20>)
 8008606:	f853 2b04 	ldr.w	r2, [r3], #4
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	f000 f83d 	bl	800868c <_vfiprintf_r>
 8008612:	b002      	add	sp, #8
 8008614:	f85d eb04 	ldr.w	lr, [sp], #4
 8008618:	b003      	add	sp, #12
 800861a:	4770      	bx	lr
 800861c:	20000018 	.word	0x20000018

08008620 <abort>:
 8008620:	2006      	movs	r0, #6
 8008622:	b508      	push	{r3, lr}
 8008624:	f000 fa06 	bl	8008a34 <raise>
 8008628:	2001      	movs	r0, #1
 800862a:	f7f9 ff9c 	bl	8002566 <_exit>

0800862e <_malloc_usable_size_r>:
 800862e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008632:	1f18      	subs	r0, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	bfbc      	itt	lt
 8008638:	580b      	ldrlt	r3, [r1, r0]
 800863a:	18c0      	addlt	r0, r0, r3
 800863c:	4770      	bx	lr

0800863e <__sfputc_r>:
 800863e:	6893      	ldr	r3, [r2, #8]
 8008640:	b410      	push	{r4}
 8008642:	3b01      	subs	r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	6093      	str	r3, [r2, #8]
 8008648:	da07      	bge.n	800865a <__sfputc_r+0x1c>
 800864a:	6994      	ldr	r4, [r2, #24]
 800864c:	42a3      	cmp	r3, r4
 800864e:	db01      	blt.n	8008654 <__sfputc_r+0x16>
 8008650:	290a      	cmp	r1, #10
 8008652:	d102      	bne.n	800865a <__sfputc_r+0x1c>
 8008654:	bc10      	pop	{r4}
 8008656:	f000 b931 	b.w	80088bc <__swbuf_r>
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	1c58      	adds	r0, r3, #1
 800865e:	6010      	str	r0, [r2, #0]
 8008660:	7019      	strb	r1, [r3, #0]
 8008662:	4608      	mov	r0, r1
 8008664:	bc10      	pop	{r4}
 8008666:	4770      	bx	lr

08008668 <__sfputs_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	4614      	mov	r4, r2
 8008670:	18d5      	adds	r5, r2, r3
 8008672:	42ac      	cmp	r4, r5
 8008674:	d101      	bne.n	800867a <__sfputs_r+0x12>
 8008676:	2000      	movs	r0, #0
 8008678:	e007      	b.n	800868a <__sfputs_r+0x22>
 800867a:	463a      	mov	r2, r7
 800867c:	4630      	mov	r0, r6
 800867e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008682:	f7ff ffdc 	bl	800863e <__sfputc_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d1f3      	bne.n	8008672 <__sfputs_r+0xa>
 800868a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800868c <_vfiprintf_r>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	460d      	mov	r5, r1
 8008692:	4614      	mov	r4, r2
 8008694:	4698      	mov	r8, r3
 8008696:	4606      	mov	r6, r0
 8008698:	b09d      	sub	sp, #116	@ 0x74
 800869a:	b118      	cbz	r0, 80086a4 <_vfiprintf_r+0x18>
 800869c:	6a03      	ldr	r3, [r0, #32]
 800869e:	b90b      	cbnz	r3, 80086a4 <_vfiprintf_r+0x18>
 80086a0:	f7fc fdf2 	bl	8005288 <__sinit>
 80086a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086a6:	07d9      	lsls	r1, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_vfiprintf_r+0x2a>
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	059a      	lsls	r2, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_vfiprintf_r+0x2a>
 80086b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086b2:	f7fc ff10 	bl	80054d6 <__retarget_lock_acquire_recursive>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	071b      	lsls	r3, r3, #28
 80086ba:	d501      	bpl.n	80086c0 <_vfiprintf_r+0x34>
 80086bc:	692b      	ldr	r3, [r5, #16]
 80086be:	b99b      	cbnz	r3, 80086e8 <_vfiprintf_r+0x5c>
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 f938 	bl	8008938 <__swsetup_r>
 80086c8:	b170      	cbz	r0, 80086e8 <_vfiprintf_r+0x5c>
 80086ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086cc:	07dc      	lsls	r4, r3, #31
 80086ce:	d504      	bpl.n	80086da <_vfiprintf_r+0x4e>
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	b01d      	add	sp, #116	@ 0x74
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	0598      	lsls	r0, r3, #22
 80086de:	d4f7      	bmi.n	80086d0 <_vfiprintf_r+0x44>
 80086e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086e2:	f7fc fef9 	bl	80054d8 <__retarget_lock_release_recursive>
 80086e6:	e7f3      	b.n	80086d0 <_vfiprintf_r+0x44>
 80086e8:	2300      	movs	r3, #0
 80086ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ec:	2320      	movs	r3, #32
 80086ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086f2:	2330      	movs	r3, #48	@ 0x30
 80086f4:	f04f 0901 	mov.w	r9, #1
 80086f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80086fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80088a8 <_vfiprintf_r+0x21c>
 8008700:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008704:	4623      	mov	r3, r4
 8008706:	469a      	mov	sl, r3
 8008708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800870c:	b10a      	cbz	r2, 8008712 <_vfiprintf_r+0x86>
 800870e:	2a25      	cmp	r2, #37	@ 0x25
 8008710:	d1f9      	bne.n	8008706 <_vfiprintf_r+0x7a>
 8008712:	ebba 0b04 	subs.w	fp, sl, r4
 8008716:	d00b      	beq.n	8008730 <_vfiprintf_r+0xa4>
 8008718:	465b      	mov	r3, fp
 800871a:	4622      	mov	r2, r4
 800871c:	4629      	mov	r1, r5
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff ffa2 	bl	8008668 <__sfputs_r>
 8008724:	3001      	adds	r0, #1
 8008726:	f000 80a7 	beq.w	8008878 <_vfiprintf_r+0x1ec>
 800872a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800872c:	445a      	add	r2, fp
 800872e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008730:	f89a 3000 	ldrb.w	r3, [sl]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 809f 	beq.w	8008878 <_vfiprintf_r+0x1ec>
 800873a:	2300      	movs	r3, #0
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008744:	f10a 0a01 	add.w	sl, sl, #1
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	9307      	str	r3, [sp, #28]
 800874c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008750:	931a      	str	r3, [sp, #104]	@ 0x68
 8008752:	4654      	mov	r4, sl
 8008754:	2205      	movs	r2, #5
 8008756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875a:	4853      	ldr	r0, [pc, #332]	@ (80088a8 <_vfiprintf_r+0x21c>)
 800875c:	f7fc febd 	bl	80054da <memchr>
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	b9d8      	cbnz	r0, 800879c <_vfiprintf_r+0x110>
 8008764:	06d1      	lsls	r1, r2, #27
 8008766:	bf44      	itt	mi
 8008768:	2320      	movmi	r3, #32
 800876a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800876e:	0713      	lsls	r3, r2, #28
 8008770:	bf44      	itt	mi
 8008772:	232b      	movmi	r3, #43	@ 0x2b
 8008774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008778:	f89a 3000 	ldrb.w	r3, [sl]
 800877c:	2b2a      	cmp	r3, #42	@ 0x2a
 800877e:	d015      	beq.n	80087ac <_vfiprintf_r+0x120>
 8008780:	4654      	mov	r4, sl
 8008782:	2000      	movs	r0, #0
 8008784:	f04f 0c0a 	mov.w	ip, #10
 8008788:	9a07      	ldr	r2, [sp, #28]
 800878a:	4621      	mov	r1, r4
 800878c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008790:	3b30      	subs	r3, #48	@ 0x30
 8008792:	2b09      	cmp	r3, #9
 8008794:	d94b      	bls.n	800882e <_vfiprintf_r+0x1a2>
 8008796:	b1b0      	cbz	r0, 80087c6 <_vfiprintf_r+0x13a>
 8008798:	9207      	str	r2, [sp, #28]
 800879a:	e014      	b.n	80087c6 <_vfiprintf_r+0x13a>
 800879c:	eba0 0308 	sub.w	r3, r0, r8
 80087a0:	fa09 f303 	lsl.w	r3, r9, r3
 80087a4:	4313      	orrs	r3, r2
 80087a6:	46a2      	mov	sl, r4
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	e7d2      	b.n	8008752 <_vfiprintf_r+0xc6>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	1d19      	adds	r1, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	9103      	str	r1, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfbb      	ittet	lt
 80087b8:	425b      	neglt	r3, r3
 80087ba:	f042 0202 	orrlt.w	r2, r2, #2
 80087be:	9307      	strge	r3, [sp, #28]
 80087c0:	9307      	strlt	r3, [sp, #28]
 80087c2:	bfb8      	it	lt
 80087c4:	9204      	strlt	r2, [sp, #16]
 80087c6:	7823      	ldrb	r3, [r4, #0]
 80087c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80087ca:	d10a      	bne.n	80087e2 <_vfiprintf_r+0x156>
 80087cc:	7863      	ldrb	r3, [r4, #1]
 80087ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80087d0:	d132      	bne.n	8008838 <_vfiprintf_r+0x1ac>
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	3402      	adds	r4, #2
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	9203      	str	r2, [sp, #12]
 80087dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087e0:	9305      	str	r3, [sp, #20]
 80087e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80088ac <_vfiprintf_r+0x220>
 80087e6:	2203      	movs	r2, #3
 80087e8:	4650      	mov	r0, sl
 80087ea:	7821      	ldrb	r1, [r4, #0]
 80087ec:	f7fc fe75 	bl	80054da <memchr>
 80087f0:	b138      	cbz	r0, 8008802 <_vfiprintf_r+0x176>
 80087f2:	2240      	movs	r2, #64	@ 0x40
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	eba0 000a 	sub.w	r0, r0, sl
 80087fa:	4082      	lsls	r2, r0
 80087fc:	4313      	orrs	r3, r2
 80087fe:	3401      	adds	r4, #1
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008806:	2206      	movs	r2, #6
 8008808:	4829      	ldr	r0, [pc, #164]	@ (80088b0 <_vfiprintf_r+0x224>)
 800880a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800880e:	f7fc fe64 	bl	80054da <memchr>
 8008812:	2800      	cmp	r0, #0
 8008814:	d03f      	beq.n	8008896 <_vfiprintf_r+0x20a>
 8008816:	4b27      	ldr	r3, [pc, #156]	@ (80088b4 <_vfiprintf_r+0x228>)
 8008818:	bb1b      	cbnz	r3, 8008862 <_vfiprintf_r+0x1d6>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	3307      	adds	r3, #7
 800881e:	f023 0307 	bic.w	r3, r3, #7
 8008822:	3308      	adds	r3, #8
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008828:	443b      	add	r3, r7
 800882a:	9309      	str	r3, [sp, #36]	@ 0x24
 800882c:	e76a      	b.n	8008704 <_vfiprintf_r+0x78>
 800882e:	460c      	mov	r4, r1
 8008830:	2001      	movs	r0, #1
 8008832:	fb0c 3202 	mla	r2, ip, r2, r3
 8008836:	e7a8      	b.n	800878a <_vfiprintf_r+0xfe>
 8008838:	2300      	movs	r3, #0
 800883a:	f04f 0c0a 	mov.w	ip, #10
 800883e:	4619      	mov	r1, r3
 8008840:	3401      	adds	r4, #1
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	4620      	mov	r0, r4
 8008846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800884a:	3a30      	subs	r2, #48	@ 0x30
 800884c:	2a09      	cmp	r2, #9
 800884e:	d903      	bls.n	8008858 <_vfiprintf_r+0x1cc>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0c6      	beq.n	80087e2 <_vfiprintf_r+0x156>
 8008854:	9105      	str	r1, [sp, #20]
 8008856:	e7c4      	b.n	80087e2 <_vfiprintf_r+0x156>
 8008858:	4604      	mov	r4, r0
 800885a:	2301      	movs	r3, #1
 800885c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008860:	e7f0      	b.n	8008844 <_vfiprintf_r+0x1b8>
 8008862:	ab03      	add	r3, sp, #12
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	462a      	mov	r2, r5
 8008868:	4630      	mov	r0, r6
 800886a:	4b13      	ldr	r3, [pc, #76]	@ (80088b8 <_vfiprintf_r+0x22c>)
 800886c:	a904      	add	r1, sp, #16
 800886e:	f7fb feb9 	bl	80045e4 <_printf_float>
 8008872:	4607      	mov	r7, r0
 8008874:	1c78      	adds	r0, r7, #1
 8008876:	d1d6      	bne.n	8008826 <_vfiprintf_r+0x19a>
 8008878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800887a:	07d9      	lsls	r1, r3, #31
 800887c:	d405      	bmi.n	800888a <_vfiprintf_r+0x1fe>
 800887e:	89ab      	ldrh	r3, [r5, #12]
 8008880:	059a      	lsls	r2, r3, #22
 8008882:	d402      	bmi.n	800888a <_vfiprintf_r+0x1fe>
 8008884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008886:	f7fc fe27 	bl	80054d8 <__retarget_lock_release_recursive>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	065b      	lsls	r3, r3, #25
 800888e:	f53f af1f 	bmi.w	80086d0 <_vfiprintf_r+0x44>
 8008892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008894:	e71e      	b.n	80086d4 <_vfiprintf_r+0x48>
 8008896:	ab03      	add	r3, sp, #12
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	462a      	mov	r2, r5
 800889c:	4630      	mov	r0, r6
 800889e:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <_vfiprintf_r+0x22c>)
 80088a0:	a904      	add	r1, sp, #16
 80088a2:	f7fc f93d 	bl	8004b20 <_printf_i>
 80088a6:	e7e4      	b.n	8008872 <_vfiprintf_r+0x1e6>
 80088a8:	0800972b 	.word	0x0800972b
 80088ac:	08009731 	.word	0x08009731
 80088b0:	08009735 	.word	0x08009735
 80088b4:	080045e5 	.word	0x080045e5
 80088b8:	08008669 	.word	0x08008669

080088bc <__swbuf_r>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	460e      	mov	r6, r1
 80088c0:	4614      	mov	r4, r2
 80088c2:	4605      	mov	r5, r0
 80088c4:	b118      	cbz	r0, 80088ce <__swbuf_r+0x12>
 80088c6:	6a03      	ldr	r3, [r0, #32]
 80088c8:	b90b      	cbnz	r3, 80088ce <__swbuf_r+0x12>
 80088ca:	f7fc fcdd 	bl	8005288 <__sinit>
 80088ce:	69a3      	ldr	r3, [r4, #24]
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	071a      	lsls	r2, r3, #28
 80088d6:	d501      	bpl.n	80088dc <__swbuf_r+0x20>
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	b943      	cbnz	r3, 80088ee <__swbuf_r+0x32>
 80088dc:	4621      	mov	r1, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f82a 	bl	8008938 <__swsetup_r>
 80088e4:	b118      	cbz	r0, 80088ee <__swbuf_r+0x32>
 80088e6:	f04f 37ff 	mov.w	r7, #4294967295
 80088ea:	4638      	mov	r0, r7
 80088ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	b2f6      	uxtb	r6, r6
 80088f4:	1a98      	subs	r0, r3, r2
 80088f6:	6963      	ldr	r3, [r4, #20]
 80088f8:	4637      	mov	r7, r6
 80088fa:	4283      	cmp	r3, r0
 80088fc:	dc05      	bgt.n	800890a <__swbuf_r+0x4e>
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f7ff fa4b 	bl	8007d9c <_fflush_r>
 8008906:	2800      	cmp	r0, #0
 8008908:	d1ed      	bne.n	80088e6 <__swbuf_r+0x2a>
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	3b01      	subs	r3, #1
 800890e:	60a3      	str	r3, [r4, #8]
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	701e      	strb	r6, [r3, #0]
 8008918:	6962      	ldr	r2, [r4, #20]
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	429a      	cmp	r2, r3
 800891e:	d004      	beq.n	800892a <__swbuf_r+0x6e>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	07db      	lsls	r3, r3, #31
 8008924:	d5e1      	bpl.n	80088ea <__swbuf_r+0x2e>
 8008926:	2e0a      	cmp	r6, #10
 8008928:	d1df      	bne.n	80088ea <__swbuf_r+0x2e>
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f7ff fa35 	bl	8007d9c <_fflush_r>
 8008932:	2800      	cmp	r0, #0
 8008934:	d0d9      	beq.n	80088ea <__swbuf_r+0x2e>
 8008936:	e7d6      	b.n	80088e6 <__swbuf_r+0x2a>

08008938 <__swsetup_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4b29      	ldr	r3, [pc, #164]	@ (80089e0 <__swsetup_r+0xa8>)
 800893c:	4605      	mov	r5, r0
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	460c      	mov	r4, r1
 8008942:	b118      	cbz	r0, 800894c <__swsetup_r+0x14>
 8008944:	6a03      	ldr	r3, [r0, #32]
 8008946:	b90b      	cbnz	r3, 800894c <__swsetup_r+0x14>
 8008948:	f7fc fc9e 	bl	8005288 <__sinit>
 800894c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008950:	0719      	lsls	r1, r3, #28
 8008952:	d422      	bmi.n	800899a <__swsetup_r+0x62>
 8008954:	06da      	lsls	r2, r3, #27
 8008956:	d407      	bmi.n	8008968 <__swsetup_r+0x30>
 8008958:	2209      	movs	r2, #9
 800895a:	602a      	str	r2, [r5, #0]
 800895c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	e033      	b.n	80089d0 <__swsetup_r+0x98>
 8008968:	0758      	lsls	r0, r3, #29
 800896a:	d512      	bpl.n	8008992 <__swsetup_r+0x5a>
 800896c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800896e:	b141      	cbz	r1, 8008982 <__swsetup_r+0x4a>
 8008970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008974:	4299      	cmp	r1, r3
 8008976:	d002      	beq.n	800897e <__swsetup_r+0x46>
 8008978:	4628      	mov	r0, r5
 800897a:	f7fd fc1d 	bl	80061b8 <_free_r>
 800897e:	2300      	movs	r3, #0
 8008980:	6363      	str	r3, [r4, #52]	@ 0x34
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	2300      	movs	r3, #0
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f043 0308 	orr.w	r3, r3, #8
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	b94b      	cbnz	r3, 80089b2 <__swsetup_r+0x7a>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a8:	d003      	beq.n	80089b2 <__swsetup_r+0x7a>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	f000 f882 	bl	8008ab6 <__smakebuf_r>
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	f013 0201 	ands.w	r2, r3, #1
 80089ba:	d00a      	beq.n	80089d2 <__swsetup_r+0x9a>
 80089bc:	2200      	movs	r2, #0
 80089be:	60a2      	str	r2, [r4, #8]
 80089c0:	6962      	ldr	r2, [r4, #20]
 80089c2:	4252      	negs	r2, r2
 80089c4:	61a2      	str	r2, [r4, #24]
 80089c6:	6922      	ldr	r2, [r4, #16]
 80089c8:	b942      	cbnz	r2, 80089dc <__swsetup_r+0xa4>
 80089ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ce:	d1c5      	bne.n	800895c <__swsetup_r+0x24>
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	0799      	lsls	r1, r3, #30
 80089d4:	bf58      	it	pl
 80089d6:	6962      	ldrpl	r2, [r4, #20]
 80089d8:	60a2      	str	r2, [r4, #8]
 80089da:	e7f4      	b.n	80089c6 <__swsetup_r+0x8e>
 80089dc:	2000      	movs	r0, #0
 80089de:	e7f7      	b.n	80089d0 <__swsetup_r+0x98>
 80089e0:	20000018 	.word	0x20000018

080089e4 <_raise_r>:
 80089e4:	291f      	cmp	r1, #31
 80089e6:	b538      	push	{r3, r4, r5, lr}
 80089e8:	4605      	mov	r5, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	d904      	bls.n	80089f8 <_raise_r+0x14>
 80089ee:	2316      	movs	r3, #22
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089fa:	b112      	cbz	r2, 8008a02 <_raise_r+0x1e>
 80089fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a00:	b94b      	cbnz	r3, 8008a16 <_raise_r+0x32>
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 f830 	bl	8008a68 <_getpid_r>
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a12:	f000 b817 	b.w	8008a44 <_kill_r>
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d00a      	beq.n	8008a30 <_raise_r+0x4c>
 8008a1a:	1c59      	adds	r1, r3, #1
 8008a1c:	d103      	bne.n	8008a26 <_raise_r+0x42>
 8008a1e:	2316      	movs	r3, #22
 8008a20:	6003      	str	r3, [r0, #0]
 8008a22:	2001      	movs	r0, #1
 8008a24:	e7e7      	b.n	80089f6 <_raise_r+0x12>
 8008a26:	2100      	movs	r1, #0
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a2e:	4798      	blx	r3
 8008a30:	2000      	movs	r0, #0
 8008a32:	e7e0      	b.n	80089f6 <_raise_r+0x12>

08008a34 <raise>:
 8008a34:	4b02      	ldr	r3, [pc, #8]	@ (8008a40 <raise+0xc>)
 8008a36:	4601      	mov	r1, r0
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f7ff bfd3 	b.w	80089e4 <_raise_r>
 8008a3e:	bf00      	nop
 8008a40:	20000018 	.word	0x20000018

08008a44 <_kill_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	2300      	movs	r3, #0
 8008a48:	4d06      	ldr	r5, [pc, #24]	@ (8008a64 <_kill_r+0x20>)
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	4611      	mov	r1, r2
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	f7f9 fd78 	bl	8002546 <_kill>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	d102      	bne.n	8008a60 <_kill_r+0x1c>
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	b103      	cbz	r3, 8008a60 <_kill_r+0x1c>
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	bd38      	pop	{r3, r4, r5, pc}
 8008a62:	bf00      	nop
 8008a64:	20000850 	.word	0x20000850

08008a68 <_getpid_r>:
 8008a68:	f7f9 bd66 	b.w	8002538 <_getpid>

08008a6c <__swhatbuf_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	460c      	mov	r4, r1
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	4615      	mov	r5, r2
 8008a76:	2900      	cmp	r1, #0
 8008a78:	461e      	mov	r6, r3
 8008a7a:	b096      	sub	sp, #88	@ 0x58
 8008a7c:	da0c      	bge.n	8008a98 <__swhatbuf_r+0x2c>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	2100      	movs	r1, #0
 8008a82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a86:	bf14      	ite	ne
 8008a88:	2340      	movne	r3, #64	@ 0x40
 8008a8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a8e:	2000      	movs	r0, #0
 8008a90:	6031      	str	r1, [r6, #0]
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	b016      	add	sp, #88	@ 0x58
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	466a      	mov	r2, sp
 8008a9a:	f000 f849 	bl	8008b30 <_fstat_r>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	dbed      	blt.n	8008a7e <__swhatbuf_r+0x12>
 8008aa2:	9901      	ldr	r1, [sp, #4]
 8008aa4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aa8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aac:	4259      	negs	r1, r3
 8008aae:	4159      	adcs	r1, r3
 8008ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ab4:	e7eb      	b.n	8008a8e <__swhatbuf_r+0x22>

08008ab6 <__smakebuf_r>:
 8008ab6:	898b      	ldrh	r3, [r1, #12]
 8008ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aba:	079d      	lsls	r5, r3, #30
 8008abc:	4606      	mov	r6, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	d507      	bpl.n	8008ad2 <__smakebuf_r+0x1c>
 8008ac2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	2301      	movs	r3, #1
 8008acc:	6163      	str	r3, [r4, #20]
 8008ace:	b003      	add	sp, #12
 8008ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad2:	466a      	mov	r2, sp
 8008ad4:	ab01      	add	r3, sp, #4
 8008ad6:	f7ff ffc9 	bl	8008a6c <__swhatbuf_r>
 8008ada:	9f00      	ldr	r7, [sp, #0]
 8008adc:	4605      	mov	r5, r0
 8008ade:	4639      	mov	r1, r7
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7fd fbdb 	bl	800629c <_malloc_r>
 8008ae6:	b948      	cbnz	r0, 8008afc <__smakebuf_r+0x46>
 8008ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aec:	059a      	lsls	r2, r3, #22
 8008aee:	d4ee      	bmi.n	8008ace <__smakebuf_r+0x18>
 8008af0:	f023 0303 	bic.w	r3, r3, #3
 8008af4:	f043 0302 	orr.w	r3, r3, #2
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	e7e2      	b.n	8008ac2 <__smakebuf_r+0xc>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	6020      	str	r0, [r4, #0]
 8008b0c:	b15b      	cbz	r3, 8008b26 <__smakebuf_r+0x70>
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b14:	f000 f81e 	bl	8008b54 <_isatty_r>
 8008b18:	b128      	cbz	r0, 8008b26 <__smakebuf_r+0x70>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	f023 0303 	bic.w	r3, r3, #3
 8008b20:	f043 0301 	orr.w	r3, r3, #1
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	431d      	orrs	r5, r3
 8008b2a:	81a5      	strh	r5, [r4, #12]
 8008b2c:	e7cf      	b.n	8008ace <__smakebuf_r+0x18>
	...

08008b30 <_fstat_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	2300      	movs	r3, #0
 8008b34:	4d06      	ldr	r5, [pc, #24]	@ (8008b50 <_fstat_r+0x20>)
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	f7f9 fd61 	bl	8002604 <_fstat>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	d102      	bne.n	8008b4c <_fstat_r+0x1c>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b103      	cbz	r3, 8008b4c <_fstat_r+0x1c>
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000850 	.word	0x20000850

08008b54 <_isatty_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	2300      	movs	r3, #0
 8008b58:	4d05      	ldr	r5, [pc, #20]	@ (8008b70 <_isatty_r+0x1c>)
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	602b      	str	r3, [r5, #0]
 8008b60:	f7f9 fd5f 	bl	8002622 <_isatty>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_isatty_r+0x1a>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_isatty_r+0x1a>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	20000850 	.word	0x20000850

08008b74 <_init>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr

08008b80 <_fini>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr
